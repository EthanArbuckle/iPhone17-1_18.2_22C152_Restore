uint64_t specialized GeoCATModel.getID()(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::String v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v23;
  long long v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v33;
  char v34;
  ValueMetadata *v35;
  long long v36;
  void v37[4];

  v6 = type metadata accessor for Mirror();
  v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v36 = &type metadata for GeoLabel;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoLabel.Type);
  v10 = String.init<A>(describing:)();
  v12 = v11;
  v35 = &type metadata for GeoLabel;
  *(void *)&v33 = a1;
  *((void *)&v33 + 1) = a2;
  v34 = a3;
  outlined copy of GeoLabel(a1, a2, a3);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  specialized Collection.first.getter(&v36);
  swift_release();
  if (v37[3])
  {
    v13 = *((void *)&v36 + 1);
    v14 = v36;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v37);
    if (v13) {
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v36, &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }
  *(void *)&v36 = a1;
  *((void *)&v36 + 1) = a2;
  LOBYTE(v37[0]) = a3;
  outlined copy of GeoLabel(a1, a2, a3);
  v14 = String.init<A>(describing:)();
  v13 = v15;
LABEL_6:
  *(void *)&v36 = v10;
  *((void *)&v36 + 1) = v12;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 35;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17 = v36;
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(v14, v13);
  v19 = v18;
  swift_bridgeObjectRelease();
  if (v19)
  {
    v20 = Character.uppercased()();
    countAndFlagsBits = v20._countAndFlagsBits;
    object = v20._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  v36 = v17;
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = countAndFlagsBits;
  v23._object = object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = v36;
  v25 = specialized Collection.dropFirst(_:)(1, v14, v13);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  swift_bridgeObjectRelease();
  v33 = v24;
  *(void *)&v36 = v25;
  *((void *)&v36 + 1) = v27;
  v37[0] = v29;
  v37[1] = v31;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t specialized GeoCATModel.getID()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContactResolution(0);
  uint64_t v3 = __chkstk_darwin(v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v36 - v6;
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v38 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactResolution.Type);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  uint64_t v37 = v2;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v36);
  outlined init with copy of TrafficIncident(v1, (uint64_t)boxed_opaque_existential_0, type metadata accessor for ContactResolution);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  specialized Collection.first.getter(&v38);
  swift_release();
  if (v39[3])
  {
    unint64_t v16 = *((void *)&v38 + 1);
    uint64_t v17 = v38;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v39);
    outlined init with copy of TrafficIncident(v1, (uint64_t)v7, type metadata accessor for ContactResolution);
    if (v16) {
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v38, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    outlined init with copy of TrafficIncident(v1, (uint64_t)v7, type metadata accessor for ContactResolution);
  }
  outlined init with copy of TrafficIncident((uint64_t)v7, (uint64_t)v5, type metadata accessor for ContactResolution);
  uint64_t v17 = String.init<A>(describing:)();
  unint64_t v16 = v18;
LABEL_6:
  outlined destroy of ShareETA((uint64_t)v7, type metadata accessor for ContactResolution);
  *(void *)&long long v38 = v12;
  *((void *)&v38 + 1) = v14;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = 35;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  long long v20 = v38;
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(v17, v16);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if (v22)
  {
    Swift::String v23 = Character.uppercased()();
    uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    object = v23._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  long long v38 = v20;
  swift_bridgeObjectRetain();
  v26._uint64_t countAndFlagsBits = countAndFlagsBits;
  v26._object = object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v27 = v38;
  uint64_t v28 = specialized Collection.dropFirst(_:)(1, v17, v16);
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  long long v36 = v27;
  *(void *)&long long v38 = v28;
  *((void *)&v38 + 1) = v30;
  v39[0] = v32;
  v39[1] = v34;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v36;
}

uint64_t specialized GeoCATModel.getID()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for Mirror();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v40 = a4;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v14 = String.init<A>(describing:)();
  uint64_t v16 = v15;
  *(void *)&long long v37 = a1;
  *((void *)&v37 + 1) = a2;
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  outlined copy of SaveParkingLocation(a1);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  specialized Collection.first.getter(&v40);
  swift_release();
  if (v41[3])
  {
    unint64_t v17 = *((void *)&v40 + 1);
    uint64_t v18 = v40;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v41);
    if (v17) {
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v40, &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  v41[0] = a3;
  outlined copy of SaveParkingLocation(a1);
  uint64_t v18 = String.init<A>(describing:)();
  unint64_t v17 = v19;
LABEL_6:
  *(void *)&long long v40 = v14;
  *((void *)&v40 + 1) = v16;
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = 35;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  long long v21 = v40;
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(v18, v17);
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  if (v23)
  {
    Swift::String v24 = Character.uppercased()();
    uint64_t countAndFlagsBits = v24._countAndFlagsBits;
    object = v24._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  long long v40 = v21;
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = countAndFlagsBits;
  v27._object = object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v28 = v40;
  uint64_t v29 = specialized Collection.dropFirst(_:)(1, v18, v17);
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  long long v37 = v28;
  *(void *)&long long v40 = v29;
  *((void *)&v40 + 1) = v31;
  v41[0] = v33;
  v41[1] = v35;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v37;
}

uint64_t specialized GeoCATModel.getID()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  v43 = a4;
  uint64_t v7 = v4;
  uint64_t v8 = a1(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = type metadata accessor for Mirror();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v46 = v8;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v42 = String.init<A>(describing:)();
  uint64_t v19 = v18;
  uint64_t v45 = v8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v44);
  uint64_t v21 = v7;
  outlined init with copy of TrafficIncident(v7, (uint64_t)boxed_opaque_existential_0, a3);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  specialized Collection.first.getter(&v46);
  swift_release();
  if (v47[3])
  {
    unint64_t v22 = *((void *)&v46 + 1);
    uint64_t v23 = v46;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v47);
    outlined init with copy of TrafficIncident(v21, (uint64_t)v13, a3);
    if (v22) {
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v46, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    outlined init with copy of TrafficIncident(v7, (uint64_t)v13, a3);
  }
  outlined init with copy of TrafficIncident((uint64_t)v13, (uint64_t)v11, a3);
  uint64_t v23 = String.init<A>(describing:)();
  unint64_t v22 = v24;
LABEL_6:
  outlined destroy of ShareETA((uint64_t)v13, v43);
  *(void *)&long long v46 = v42;
  *((void *)&v46 + 1) = v19;
  swift_bridgeObjectRetain();
  v25._uint64_t countAndFlagsBits = 35;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  long long v26 = v46;
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(v23, v22);
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  if (v28)
  {
    Swift::String v29 = Character.uppercased()();
    uint64_t countAndFlagsBits = v29._countAndFlagsBits;
    object = v29._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  long long v46 = v26;
  swift_bridgeObjectRetain();
  v32._uint64_t countAndFlagsBits = countAndFlagsBits;
  v32._object = object;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v33 = v46;
  uint64_t v34 = specialized Collection.dropFirst(_:)(1, v23, v22);
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();
  long long v44 = v33;
  *(void *)&long long v46 = v34;
  *((void *)&v46 + 1) = v36;
  v47[0] = v38;
  v47[1] = v40;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v44;
}

uint64_t specialized GeoCATModel.getID()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v33 = &type metadata for LocationSearch;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationSearch.Type);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  Swift::String v32 = &type metadata for LocationSearch;
  *(void *)&long long v31 = a1;
  *((void *)&v31 + 1) = a2;
  outlined copy of LocationSearch(a1);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  specialized Collection.first.getter(&v33);
  swift_release();
  if (v34[3])
  {
    unint64_t v11 = *((void *)&v33 + 1);
    uint64_t v12 = v33;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v34);
    if (v11) {
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v33, &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }
  *(void *)&long long v33 = a1;
  *((void *)&v33 + 1) = a2;
  outlined copy of LocationSearch(a1);
  uint64_t v12 = String.init<A>(describing:)();
  unint64_t v11 = v13;
LABEL_6:
  *(void *)&long long v33 = v8;
  *((void *)&v33 + 1) = v10;
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = 35;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  long long v15 = v33;
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(v12, v11);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  if (v17)
  {
    Swift::String v18 = Character.uppercased()();
    uint64_t countAndFlagsBits = v18._countAndFlagsBits;
    object = v18._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  long long v33 = v15;
  swift_bridgeObjectRetain();
  v21._uint64_t countAndFlagsBits = countAndFlagsBits;
  v21._object = object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v22 = v33;
  uint64_t v23 = specialized Collection.dropFirst(_:)(1, v12, v11);
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  long long v31 = v22;
  *(void *)&long long v33 = v23;
  *((void *)&v33 + 1) = v25;
  v34[0] = v27;
  v34[1] = v29;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t specialized GeoCATModel.getID()(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v37 = a2;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  uint64_t v36 = a2;
  *(void *)&long long v35 = a1;
  a4(a1);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  specialized Collection.first.getter(&v37);
  swift_release();
  if (v38[3])
  {
    unint64_t v15 = *((void *)&v37 + 1);
    uint64_t v16 = v37;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v38);
    if (v15) {
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v37, &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }
  *(void *)&long long v37 = a1;
  a4(a1);
  uint64_t v16 = String.init<A>(describing:)();
  unint64_t v15 = v17;
LABEL_6:
  *(void *)&long long v37 = v12;
  *((void *)&v37 + 1) = v14;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = 35;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  long long v19 = v37;
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(v16, v15);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  if (v21)
  {
    Swift::String v22 = Character.uppercased()();
    uint64_t countAndFlagsBits = v22._countAndFlagsBits;
    object = v22._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  long long v37 = v19;
  swift_bridgeObjectRetain();
  v25._uint64_t countAndFlagsBits = countAndFlagsBits;
  v25._object = object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v26 = v37;
  uint64_t v27 = specialized Collection.dropFirst(_:)(1, v16, v15);
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  long long v35 = v26;
  *(void *)&long long v37 = v27;
  *((void *)&v37 + 1) = v29;
  v38[0] = v31;
  v38[1] = v33;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t specialized GeoCATModel.getID()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v31 = &type metadata for Compass;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Compass.Type);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  uint64_t v30 = &type metadata for Compass;
  *(void *)&long long v29 = a1;
  swift_retain();
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  specialized Collection.first.getter(&v31);
  swift_release();
  if (v32[3])
  {
    unint64_t v9 = *((void *)&v31 + 1);
    uint64_t v10 = v31;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v32);
    if (v9) {
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v31, &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }
  *(void *)&long long v31 = a1;
  swift_retain();
  uint64_t v10 = String.init<A>(describing:)();
  unint64_t v9 = v11;
LABEL_6:
  *(void *)&long long v31 = v6;
  *((void *)&v31 + 1) = v8;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 35;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  long long v13 = v31;
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(v10, v9);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    Swift::String v16 = Character.uppercased()();
    uint64_t countAndFlagsBits = v16._countAndFlagsBits;
    object = v16._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  long long v31 = v13;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = countAndFlagsBits;
  v19._object = object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v20 = v31;
  uint64_t v21 = specialized Collection.dropFirst(_:)(1, v10, v9);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  long long v29 = v20;
  *(void *)&long long v31 = v21;
  *((void *)&v31 + 1) = v23;
  v32[0] = v25;
  v32[1] = v27;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t specialized GeoCATModel.getID()(char a1)
{
  uint64_t v2 = type metadata accessor for Mirror();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v31 = &type metadata for LocationServices;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationServices.Type);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  uint64_t v30 = &type metadata for LocationServices;
  LOBYTE(v29) = a1;
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  specialized Collection.first.getter(&v31);
  swift_release();
  if (v32[3])
  {
    unint64_t v9 = *((void *)&v31 + 1);
    uint64_t v10 = v31;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v32);
    if (v9) {
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v31, &demangling cache variable for type metadata for (label: String?, value: Any)?);
  }
  LOBYTE(v31) = a1;
  uint64_t v10 = String.init<A>(describing:)();
  unint64_t v9 = v11;
LABEL_6:
  *(void *)&long long v31 = v6;
  *((void *)&v31 + 1) = v8;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 35;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  long long v13 = v31;
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(v10, v9);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    Swift::String v16 = Character.uppercased()();
    uint64_t countAndFlagsBits = v16._countAndFlagsBits;
    object = v16._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  long long v31 = v13;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = countAndFlagsBits;
  v19._object = object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v20 = v31;
  uint64_t v21 = specialized Collection.dropFirst(_:)(1, v10, v9);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  long long v29 = v20;
  *(void *)&long long v31 = v21;
  *((void *)&v31 + 1) = v23;
  v32[0] = v25;
  v32[1] = v27;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v29;
}

Swift::String __swiftcall GeoCATModel.getID()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v0 - 8);
  uint64_t v5 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v39 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - v7;
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::String v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v43 = swift_getDynamicType();
  swift_getMetatypeMetadata();
  *(void *)&long long v40 = String.init<A>(describing:)();
  *((void *)&v40 + 1) = v13;
  uint64_t v42 = v3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v41);
  uint64_t v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16);
  v15(boxed_opaque_existential_0, v2, v3);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  specialized Collection.first.getter(&v43);
  swift_release();
  if (v44[3])
  {
    unint64_t v16 = *((void *)&v43 + 1);
    uint64_t v17 = v43;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v44);
    v15((uint64_t *)v8, v2, v3);
    if (v16) {
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v43, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    v15((uint64_t *)v8, v2, v3);
  }
  v15((uint64_t *)v39, (uint64_t)v8, v3);
  uint64_t v17 = String.init<A>(describing:)();
  unint64_t v16 = v18;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  long long v43 = v40;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = 35;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  long long v20 = v43;
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(v17, v16);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if (v22)
  {
    Swift::String v23 = Character.uppercased()();
    uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    object = v23._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  long long v43 = v20;
  swift_bridgeObjectRetain();
  v26._uint64_t countAndFlagsBits = countAndFlagsBits;
  v26._object = object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v27 = v43;
  uint64_t v28 = specialized Collection.dropFirst(_:)(1, v17, v16);
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  long long v41 = v27;
  *(void *)&long long v43 = v28;
  *((void *)&v43 + 1) = v30;
  v44[0] = v32;
  v44[1] = v34;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = (void *)*((void *)&v41 + 1);
  uint64_t v35 = v41;
  result._object = v36;
  result._uint64_t countAndFlagsBits = v35;
  return result;
}

uint64_t specialized Collection.first.getter@<X0>(_OWORD *a1@<X8>)
{
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v2 = dispatch thunk of _AnyIndexBox._typeID.getter();
  swift_getObjectType();
  uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
  if (v2 == result)
  {
    char v4 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v4)
    {
      uint64_t result = swift_unknownObjectRelease();
      a1[1] = 0u;
      a1[2] = 0u;
      *a1 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t specialized GeoCATModel.getParams()(uint64_t a1, uint64_t a2, int a3)
{
  LODWORD(v81) = a3;
  uint64_t v5 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v77 = (char *)v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  v78 = (char *)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v70 - v16;
  __chkstk_darwin(v15);
  Swift::String v19 = (char *)v70 - v18;
  uint64_t v20 = type metadata accessor for Mirror();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v79 = v20;
  uint64_t v80 = v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v76 = (char *)v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)v70 - v24;
  *((void *)&v101[0] + 1) = &type metadata for GeoLabel;
  *(void *)&long long v100 = a1;
  *((void *)&v100 + 1) = a2;
  LOBYTE(v101[0]) = (_BYTE)v81;
  outlined copy of GeoLabel(a1, a2, (char)v81);
  Mirror.init(reflecting:)();
  v81 = v25;
  Mirror.displayStyle.getter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v17, enum case for Mirror.DisplayStyle.enum(_:), v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  uint64_t v26 = (uint64_t)&v11[*(int *)(v9 + 56)];
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v19, (uint64_t)v11, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v17, v26, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  long long v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v27((uint64_t)v11, 1, v5) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v17, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v19, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v27(v26, 1, v5) == 1)
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      uint64_t v28 = v80;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v11, (uint64_t)v78, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v27(v26, 1, v5) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v17, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v19, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v78, v5);
LABEL_6:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
    uint64_t v28 = v80;
LABEL_45:
    unint64_t v68 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v81, v79);
    return v68;
  }
  uint64_t v29 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v77, v26, v5);
  uint64_t v30 = v78;
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v6 + 8);
  v32(v29, v5);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v17, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v19, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v32(v30, v5);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v28 = v80;
  if ((v31 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_8:
  Mirror.children.getter();
  specialized Collection.first.getter(&v97);
  swift_release();
  if (!v99)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v97, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    goto LABEL_45;
  }
  long long v100 = v97;
  outlined init with take of Any(&v98, v101);
  outlined init with copy of Any((uint64_t)v101, (uint64_t)&v98);
  uint64_t v33 = v76;
  Mirror.init(reflecting:)();
  uint64_t v34 = Mirror.children.getter();
  uint64_t v36 = *(char **)(v28 + 8);
  uint64_t v35 = v28 + 8;
  v76 = v36;
  ((void (*)(char *, uint64_t))v36)(v33, v79);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v75 = v34;
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (!v99)
  {
    v77 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_47:
    swift_release_n();
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v100, &demangling cache variable for type metadata for (label: String?, value: Any));
    ((void (*)(char *, uint64_t))v76)(v81, v79);
    return (uint64_t)v77;
  }
  v72 = &v85;
  v77 = (char *)&_swiftEmptyDictionarySingleton;
  v78 = "ip";
  v73 = (char *)&type metadata for Any + 8;
  v74 = &v92;
  uint64_t v80 = v35;
  while (1)
  {
    while (1)
    {
      long long v37 = v97;
      long long v95 = v97;
      outlined init with take of Any(&v98, v96);
      long long v93 = v37;
      outlined init with copy of Any((uint64_t)v96, (uint64_t)&v94);
      if (*((void *)&v37 + 1)) {
        break;
      }
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v93, &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v99) {
        goto LABEL_47;
      }
    }
    if (v37 == __PAIR128__(0x80000000000C68D0, 0xD000000000000016))
    {
      swift_bridgeObjectRetain_n();
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v93, &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_17:
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v93, &demangling cache variable for type metadata for (label: String?, value: Any));
    if (v38) {
      goto LABEL_17;
    }
    long long v91 = v37;
    uint64_t v39 = (uint64_t)v74;
    outlined init with copy of Any((uint64_t)v96, (uint64_t)v74);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    if ((swift_dynamicCast() & 1) == 0) {
      break;
    }
    outlined init with take of CATType(&v88, (uint64_t)&v84);
    long long v91 = v37;
    outlined init with copy of Any((uint64_t)v96, v39);
    v70[1] = v86;
    unint64_t v71 = v87;
    __swift_project_boxed_opaque_existential_1(&v84, v86);
    uint64_t v40 = dispatch thunk of CATType.toDictionary.getter();
    *((void *)&v89 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&long long v88 = v40;
    outlined init with take of Any(&v88, v83);
    long long v41 = v77;
    LODWORD(v71) = swift_isUniquelyReferenced_nonNull_native();
    v82 = v41;
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
    uint64_t v44 = *((void *)v41 + 2);
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      goto LABEL_50;
    }
    if (*((void *)v41 + 3) >= v46)
    {
      if ((v71 & 1) == 0)
      {
        unint64_t v71 = v43;
        LODWORD(v77) = v42;
        specialized _NativeDictionary.copy()();
        LOBYTE(v42) = (_BYTE)v77;
        unint64_t v43 = v71;
      }
    }
    else
    {
      LODWORD(v77) = v42;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, v71);
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      int v48 = v42 & 1;
      LOBYTE(v42) = (_BYTE)v77;
      if ((v77 & 1) != v48) {
        goto LABEL_53;
      }
      unint64_t v43 = v47;
    }
    v58 = v82;
    v77 = v82;
    if (v42)
    {
      v59 = (_OWORD *)(*((void *)v82 + 7) + 32 * v43);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v59);
      outlined init with take of Any(v83, v59);
    }
    else
    {
      *(void *)&v82[8 * (v43 >> 6) + 64] |= 1 << v43;
      *(_OWORD *)(*((void *)v58 + 6) + 16 * v43) = v37;
      outlined init with take of Any(v83, (_OWORD *)(*((void *)v58 + 7) + 32 * v43));
      uint64_t v62 = *((void *)v58 + 2);
      BOOL v63 = __OFADD__(v62, 1);
      uint64_t v64 = v62 + 1;
      if (v63) {
        goto LABEL_51;
      }
      *((void *)v58 + 2) = v64;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v74);
    v65 = &v84;
LABEL_41:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v65);
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v99) {
      goto LABEL_47;
    }
  }
  uint64_t v90 = 0;
  long long v88 = 0u;
  long long v89 = 0u;
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v88, &demangling cache variable for type metadata for CATType?);
  long long v91 = v37;
  outlined init with copy of Any((uint64_t)v96, v39);
  long long v84 = v37;
  v49 = v72;
  outlined init with copy of Any((uint64_t)v96, (uint64_t)v72);
  outlined init with take of Any(v49, &v88);
  v50 = v77;
  LODWORD(v71) = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v83[0] = v50;
  unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
  uint64_t v53 = *((void *)v50 + 2);
  BOOL v54 = (v51 & 1) == 0;
  uint64_t v55 = v53 + v54;
  if (!__OFADD__(v53, v54))
  {
    if (*((void *)v50 + 3) >= v55)
    {
      if ((v71 & 1) == 0)
      {
        unint64_t v71 = v52;
        LODWORD(v77) = v51;
        specialized _NativeDictionary.copy()();
        LOBYTE(v51) = (_BYTE)v77;
        unint64_t v52 = v71;
      }
    }
    else
    {
      LODWORD(v77) = v51;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, v71);
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      int v57 = v51 & 1;
      LOBYTE(v51) = (_BYTE)v77;
      if ((v77 & 1) != v57) {
        goto LABEL_53;
      }
      unint64_t v52 = v56;
    }
    v60 = *(void **)&v83[0];
    v77 = *(char **)&v83[0];
    if (v51)
    {
      v61 = (_OWORD *)(*(void *)(*(void *)&v83[0] + 56) + 32 * v52);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v61);
      outlined init with take of Any(&v88, v61);
    }
    else
    {
      *(void *)(*(void *)&v83[0] + 8 * (v52 >> 6) + 64) |= 1 << v52;
      *(_OWORD *)(v60[6] + 16 * v52) = v37;
      outlined init with take of Any(&v88, (_OWORD *)(v60[7] + 32 * v52));
      uint64_t v66 = v60[2];
      BOOL v63 = __OFADD__(v66, 1);
      uint64_t v67 = v66 + 1;
      if (v63) {
        goto LABEL_52;
      }
      v60[2] = v67;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
    v65 = (long long *)v74;
    goto LABEL_41;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized GeoCATModel.getParams()(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  v82 = a4;
  v78 = a3;
  uint64_t v6 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v77 = (char *)v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v79 = (char *)v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v71 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v71 - v19;
  uint64_t v21 = type metadata accessor for Mirror();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v80 = v21;
  uint64_t v81 = v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v76 = (char *)v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v71 - v25;
  *(void *)&long long v101 = a1;
  *((void *)&v101 + 1) = a2;
  *(void *)&v102[0] = v78;
  *((void *)&v102[0] + 1) = v82;
  outlined copy of SaveParkingLocation(a1);
  Mirror.init(reflecting:)();
  v82 = v26;
  Mirror.displayStyle.getter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v18, enum case for Mirror.DisplayStyle.enum(_:), v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
  uint64_t v27 = (uint64_t)&v12[*(int *)(v10 + 56)];
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v20, (uint64_t)v12, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v18, v27, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v28((uint64_t)v12, 1, v6) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v20, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v28(v27, 1, v6) == 1)
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)v12, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      uint64_t v29 = v81;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v12, (uint64_t)v79, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v28(v27, 1, v6) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v20, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v79, v6);
LABEL_6:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v12, &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
    uint64_t v29 = v81;
LABEL_45:
    unint64_t v69 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v82, v80);
    return v69;
  }
  uint64_t v30 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v77, v27, v6);
  char v31 = v79;
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 8);
  v33(v30, v6);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v20, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v33(v31, v6);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v12, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v29 = v81;
  if ((v32 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_8:
  Mirror.children.getter();
  specialized Collection.first.getter(&v98);
  swift_release();
  if (!v100)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v98, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    goto LABEL_45;
  }
  long long v101 = v98;
  outlined init with take of Any(&v99, v102);
  outlined init with copy of Any((uint64_t)v102, (uint64_t)&v99);
  uint64_t v34 = v76;
  Mirror.init(reflecting:)();
  uint64_t v35 = Mirror.children.getter();
  long long v37 = *(char **)(v29 + 8);
  uint64_t v36 = v29 + 8;
  v77 = v37;
  ((void (*)(char *, uint64_t))v37)(v34, v80);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  v76 = (char *)v35;
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (!v100)
  {
    v78 = &_swiftEmptyDictionarySingleton;
LABEL_47:
    swift_release_n();
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v101, &demangling cache variable for type metadata for (label: String?, value: Any));
    ((void (*)(char *, uint64_t))v77)(v82, v80);
    return (uint64_t)v78;
  }
  v73 = &v86;
  v78 = &_swiftEmptyDictionarySingleton;
  uint64_t v79 = "ip";
  v74 = (char *)&type metadata for Any + 8;
  uint64_t v75 = &v93;
  uint64_t v81 = v36;
  while (1)
  {
    while (1)
    {
      long long v38 = v98;
      long long v96 = v98;
      outlined init with take of Any(&v99, v97);
      long long v94 = v38;
      outlined init with copy of Any((uint64_t)v97, (uint64_t)&v95);
      if (*((void *)&v38 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v94, &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v96, &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v100) {
        goto LABEL_47;
      }
    }
    if (v38 == __PAIR128__(0x80000000000C68D0, 0xD000000000000016))
    {
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v94, &demangling cache variable for type metadata for (label: String?, value: Any));
    if (v39)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    long long v92 = v38;
    uint64_t v40 = (uint64_t)v75;
    outlined init with copy of Any((uint64_t)v97, (uint64_t)v75);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    if (!swift_dynamicCast()) {
      break;
    }
    outlined init with take of CATType(&v89, (uint64_t)&v85);
    long long v92 = v38;
    outlined init with copy of Any((uint64_t)v97, v40);
    v71[1] = v87;
    unint64_t v72 = v88;
    __swift_project_boxed_opaque_existential_1(&v85, v87);
    uint64_t v41 = dispatch thunk of CATType.toDictionary.getter();
    *((void *)&v90 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&long long v89 = v41;
    outlined init with take of Any(&v89, v84);
    int v42 = v78;
    LODWORD(v72) = swift_isUniquelyReferenced_nonNull_native();
    v83 = v42;
    unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v38, *((uint64_t *)&v38 + 1));
    uint64_t v45 = v42[2];
    BOOL v46 = (v43 & 1) == 0;
    uint64_t v47 = v45 + v46;
    if (__OFADD__(v45, v46)) {
      goto LABEL_50;
    }
    if (v42[3] >= v47)
    {
      if ((v72 & 1) == 0)
      {
        unint64_t v72 = v44;
        LODWORD(v78) = v43;
        specialized _NativeDictionary.copy()();
        LOBYTE(v43) = (_BYTE)v78;
        unint64_t v44 = v72;
      }
    }
    else
    {
      LODWORD(v78) = v43;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, v72);
      unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v38, *((uint64_t *)&v38 + 1));
      int v49 = v43 & 1;
      LOBYTE(v43) = (_BYTE)v78;
      if ((v78 & 1) != v49) {
        goto LABEL_53;
      }
      unint64_t v44 = v48;
    }
    v59 = v83;
    v78 = v83;
    if (v43)
    {
      v60 = (_OWORD *)(v83[7] + 32 * v44);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v60);
      outlined init with take of Any(v84, v60);
    }
    else
    {
      v83[(v44 >> 6) + 8] |= 1 << v44;
      *(_OWORD *)(v59[6] + 16 * v44) = v38;
      outlined init with take of Any(v84, (_OWORD *)(v59[7] + 32 * v44));
      uint64_t v63 = v59[2];
      BOOL v64 = __OFADD__(v63, 1);
      uint64_t v65 = v63 + 1;
      if (v64) {
        goto LABEL_51;
      }
      v59[2] = v65;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v96, &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v75);
    uint64_t v66 = &v85;
LABEL_41:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v66);
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v100) {
      goto LABEL_47;
    }
  }
  uint64_t v91 = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v89, &demangling cache variable for type metadata for CATType?);
  long long v92 = v38;
  outlined init with copy of Any((uint64_t)v97, v40);
  long long v85 = v38;
  v50 = v73;
  outlined init with copy of Any((uint64_t)v97, (uint64_t)v73);
  outlined init with take of Any(v50, &v89);
  int v51 = v78;
  LODWORD(v72) = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v84[0] = v51;
  unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v38, *((uint64_t *)&v38 + 1));
  uint64_t v54 = v51[2];
  BOOL v55 = (v52 & 1) == 0;
  uint64_t v56 = v54 + v55;
  if (!__OFADD__(v54, v55))
  {
    if (v51[3] >= v56)
    {
      if ((v72 & 1) == 0)
      {
        unint64_t v72 = v53;
        LODWORD(v78) = v52;
        specialized _NativeDictionary.copy()();
        LOBYTE(v52) = (_BYTE)v78;
        unint64_t v53 = v72;
      }
    }
    else
    {
      LODWORD(v78) = v52;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, v72);
      unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v38, *((uint64_t *)&v38 + 1));
      int v58 = v52 & 1;
      LOBYTE(v52) = (_BYTE)v78;
      if ((v78 & 1) != v58) {
        goto LABEL_53;
      }
      unint64_t v53 = v57;
    }
    v61 = *(void **)&v84[0];
    v78 = *(void **)&v84[0];
    if (v52)
    {
      uint64_t v62 = (_OWORD *)(*(void *)(*(void *)&v84[0] + 56) + 32 * v53);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v62);
      outlined init with take of Any(&v89, v62);
    }
    else
    {
      *(void *)(*(void *)&v84[0] + 8 * (v53 >> 6) + 64) |= 1 << v53;
      *(_OWORD *)(v61[6] + 16 * v53) = v38;
      outlined init with take of Any(&v89, (_OWORD *)(v61[7] + 32 * v53));
      uint64_t v67 = v61[2];
      BOOL v64 = __OFADD__(v67, 1);
      uint64_t v68 = v67 + 1;
      if (v64) {
        goto LABEL_52;
      }
      v61[2] = v68;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v96, &demangling cache variable for type metadata for (label: String?, value: Any));
    uint64_t v66 = (long long *)v75;
    goto LABEL_41;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized GeoCATModel.getParams()(uint64_t (*a1)(void), uint64_t (*a2)(void))
{
  uint64_t v81 = a2;
  uint64_t v4 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v77 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  v78 = (char *)v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v70 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v70 - v17;
  uint64_t v19 = type metadata accessor for Mirror();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v79 = v19;
  uint64_t v80 = v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v76 = (char *)v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t (*)(void))((char *)v70 - v23);
  *((void *)&v101[0] + 1) = a1(0);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v100);
  outlined init with copy of TrafficIncident(v2, (uint64_t)boxed_opaque_existential_0, v81);
  Mirror.init(reflecting:)();
  uint64_t v81 = v24;
  Mirror.displayStyle.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v16, enum case for Mirror.DisplayStyle.enum(_:), v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  uint64_t v26 = (uint64_t)&v10[*(int *)(v8 + 56)];
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v18, (uint64_t)v10, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v16, v26, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v27((uint64_t)v10, 1, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v27(v26, 1, v4) == 1)
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      uint64_t v28 = v80;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v10, (uint64_t)v78, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v27(v26, 1, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v78, v4);
LABEL_6:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
    uint64_t v28 = v80;
LABEL_45:
    unint64_t v68 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t (*)(void), uint64_t))(v28 + 8))(v81, v79);
    return v68;
  }
  uint64_t v29 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v77, v26, v4);
  uint64_t v30 = v78;
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v32 = *(void (**)(char *, uint64_t))(v5 + 8);
  v32(v29, v4);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v32(v30, v4);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v28 = v80;
  if ((v31 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_8:
  Mirror.children.getter();
  specialized Collection.first.getter(&v97);
  swift_release();
  if (!v99)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v97, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    goto LABEL_45;
  }
  long long v100 = v97;
  outlined init with take of Any(&v98, v101);
  outlined init with copy of Any((uint64_t)v101, (uint64_t)&v98);
  uint64_t v33 = v76;
  Mirror.init(reflecting:)();
  uint64_t v34 = Mirror.children.getter();
  uint64_t v36 = *(char **)(v28 + 8);
  uint64_t v35 = v28 + 8;
  v76 = v36;
  ((void (*)(char *, uint64_t))v36)(v33, v79);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v75 = v34;
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (!v99)
  {
    v77 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_47:
    swift_release_n();
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v100, &demangling cache variable for type metadata for (label: String?, value: Any));
    ((void (*)(uint64_t (*)(void), uint64_t))v76)(v81, v79);
    return (uint64_t)v77;
  }
  unint64_t v72 = &v85;
  v77 = (char *)&_swiftEmptyDictionarySingleton;
  v78 = "ip";
  v73 = (char *)&type metadata for Any + 8;
  v74 = &v92;
  uint64_t v80 = v35;
  while (1)
  {
    while (1)
    {
      long long v37 = v97;
      long long v95 = v97;
      outlined init with take of Any(&v98, v96);
      long long v93 = v37;
      outlined init with copy of Any((uint64_t)v96, (uint64_t)&v94);
      if (*((void *)&v37 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v93, &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v99) {
        goto LABEL_47;
      }
    }
    if (v37 == __PAIR128__(0x80000000000C68D0, 0xD000000000000016))
    {
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v93, &demangling cache variable for type metadata for (label: String?, value: Any));
    if (v38)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    long long v91 = v37;
    uint64_t v39 = (uint64_t)v74;
    outlined init with copy of Any((uint64_t)v96, (uint64_t)v74);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    if (!swift_dynamicCast()) {
      break;
    }
    outlined init with take of CATType(&v88, (uint64_t)&v84);
    long long v91 = v37;
    outlined init with copy of Any((uint64_t)v96, v39);
    v70[1] = v86;
    unint64_t v71 = v87;
    __swift_project_boxed_opaque_existential_1(&v84, v86);
    uint64_t v40 = dispatch thunk of CATType.toDictionary.getter();
    *((void *)&v89 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&long long v88 = v40;
    outlined init with take of Any(&v88, v83);
    uint64_t v41 = v77;
    LODWORD(v71) = swift_isUniquelyReferenced_nonNull_native();
    v82 = v41;
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
    uint64_t v44 = *((void *)v41 + 2);
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      goto LABEL_50;
    }
    if (*((void *)v41 + 3) >= v46)
    {
      if ((v71 & 1) == 0)
      {
        unint64_t v71 = v43;
        LODWORD(v77) = v42;
        specialized _NativeDictionary.copy()();
        LOBYTE(v42) = (_BYTE)v77;
        unint64_t v43 = v71;
      }
    }
    else
    {
      LODWORD(v77) = v42;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, v71);
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      int v48 = v42 & 1;
      LOBYTE(v42) = (_BYTE)v77;
      if ((v77 & 1) != v48) {
        goto LABEL_53;
      }
      unint64_t v43 = v47;
    }
    int v58 = v82;
    v77 = v82;
    if (v42)
    {
      v59 = (_OWORD *)(*((void *)v82 + 7) + 32 * v43);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v59);
      outlined init with take of Any(v83, v59);
    }
    else
    {
      *(void *)&v82[8 * (v43 >> 6) + 64] |= 1 << v43;
      *(_OWORD *)(*((void *)v58 + 6) + 16 * v43) = v37;
      outlined init with take of Any(v83, (_OWORD *)(*((void *)v58 + 7) + 32 * v43));
      uint64_t v62 = *((void *)v58 + 2);
      BOOL v63 = __OFADD__(v62, 1);
      uint64_t v64 = v62 + 1;
      if (v63) {
        goto LABEL_51;
      }
      *((void *)v58 + 2) = v64;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v74);
    uint64_t v65 = &v84;
LABEL_41:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v65);
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v99) {
      goto LABEL_47;
    }
  }
  uint64_t v90 = 0;
  long long v88 = 0u;
  long long v89 = 0u;
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v88, &demangling cache variable for type metadata for CATType?);
  long long v91 = v37;
  outlined init with copy of Any((uint64_t)v96, v39);
  long long v84 = v37;
  int v49 = v72;
  outlined init with copy of Any((uint64_t)v96, (uint64_t)v72);
  outlined init with take of Any(v49, &v88);
  v50 = v77;
  LODWORD(v71) = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v83[0] = v50;
  unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
  uint64_t v53 = *((void *)v50 + 2);
  BOOL v54 = (v51 & 1) == 0;
  uint64_t v55 = v53 + v54;
  if (!__OFADD__(v53, v54))
  {
    if (*((void *)v50 + 3) >= v55)
    {
      if ((v71 & 1) == 0)
      {
        unint64_t v71 = v52;
        LODWORD(v77) = v51;
        specialized _NativeDictionary.copy()();
        LOBYTE(v51) = (_BYTE)v77;
        unint64_t v52 = v71;
      }
    }
    else
    {
      LODWORD(v77) = v51;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, v71);
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      int v57 = v51 & 1;
      LOBYTE(v51) = (_BYTE)v77;
      if ((v77 & 1) != v57) {
        goto LABEL_53;
      }
      unint64_t v52 = v56;
    }
    v60 = *(void **)&v83[0];
    v77 = *(char **)&v83[0];
    if (v51)
    {
      v61 = (_OWORD *)(*(void *)(*(void *)&v83[0] + 56) + 32 * v52);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v61);
      outlined init with take of Any(&v88, v61);
    }
    else
    {
      *(void *)(*(void *)&v83[0] + 8 * (v52 >> 6) + 64) |= 1 << v52;
      *(_OWORD *)(v60[6] + 16 * v52) = v37;
      outlined init with take of Any(&v88, (_OWORD *)(v60[7] + 32 * v52));
      uint64_t v66 = v60[2];
      BOOL v63 = __OFADD__(v66, 1);
      uint64_t v67 = v66 + 1;
      if (v63) {
        goto LABEL_52;
      }
      v60[2] = v67;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
    uint64_t v65 = (long long *)v74;
    goto LABEL_41;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized GeoCATModel.getParams()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v76 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  v77 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v69 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v69 - v17;
  uint64_t v19 = type metadata accessor for Mirror();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v78 = v19;
  uint64_t v79 = v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v75 = (char *)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)v69 - v23;
  *((void *)&v100[0] + 1) = &type metadata for LocationSearch;
  *(void *)&long long v99 = a1;
  *((void *)&v99 + 1) = a2;
  outlined copy of LocationSearch(a1);
  Mirror.init(reflecting:)();
  uint64_t v80 = v24;
  Mirror.displayStyle.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v16, enum case for Mirror.DisplayStyle.enum(_:), v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  uint64_t v25 = (uint64_t)&v10[*(int *)(v8 + 56)];
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v18, (uint64_t)v10, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v16, v25, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v26((uint64_t)v10, 1, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v26(v25, 1, v4) == 1)
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      uint64_t v27 = v79;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v10, (uint64_t)v77, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v26(v25, 1, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v77, v4);
LABEL_6:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
    uint64_t v27 = v79;
LABEL_45:
    unint64_t v67 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v80, v78);
    return v67;
  }
  uint64_t v28 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v76, v25, v4);
  uint64_t v29 = v77;
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31(v28, v4);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v31(v29, v4);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v27 = v79;
  if ((v30 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_8:
  Mirror.children.getter();
  specialized Collection.first.getter(&v96);
  swift_release();
  if (!v98)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v96, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    goto LABEL_45;
  }
  long long v99 = v96;
  outlined init with take of Any(&v97, v100);
  outlined init with copy of Any((uint64_t)v100, (uint64_t)&v97);
  char v32 = v75;
  Mirror.init(reflecting:)();
  uint64_t v33 = Mirror.children.getter();
  uint64_t v35 = *(char **)(v27 + 8);
  uint64_t v34 = v27 + 8;
  uint64_t v75 = v35;
  ((void (*)(char *, uint64_t))v35)(v32, v78);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v74 = v33;
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (!v98)
  {
    v76 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_47:
    swift_release_n();
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v99, &demangling cache variable for type metadata for (label: String?, value: Any));
    ((void (*)(char *, uint64_t))v75)(v80, v78);
    return (uint64_t)v76;
  }
  unint64_t v71 = &v84;
  v76 = (char *)&_swiftEmptyDictionarySingleton;
  v77 = "ip";
  unint64_t v72 = (char *)&type metadata for Any + 8;
  v73 = &v91;
  uint64_t v79 = v34;
  while (1)
  {
    while (1)
    {
      long long v36 = v96;
      long long v94 = v96;
      outlined init with take of Any(&v97, v95);
      long long v92 = v36;
      outlined init with copy of Any((uint64_t)v95, (uint64_t)&v93);
      if (*((void *)&v36 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v92, &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v94, &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v98) {
        goto LABEL_47;
      }
    }
    if (v36 == __PAIR128__(0x80000000000C68D0, 0xD000000000000016))
    {
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v92, &demangling cache variable for type metadata for (label: String?, value: Any));
    if (v37)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    long long v90 = v36;
    uint64_t v38 = (uint64_t)v73;
    outlined init with copy of Any((uint64_t)v95, (uint64_t)v73);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    if (!swift_dynamicCast()) {
      break;
    }
    outlined init with take of CATType(&v87, (uint64_t)&v83);
    long long v90 = v36;
    outlined init with copy of Any((uint64_t)v95, v38);
    v69[1] = v85;
    unint64_t v70 = v86;
    __swift_project_boxed_opaque_existential_1(&v83, v85);
    uint64_t v39 = dispatch thunk of CATType.toDictionary.getter();
    *((void *)&v88 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&long long v87 = v39;
    outlined init with take of Any(&v87, v82);
    uint64_t v40 = v76;
    LODWORD(v70) = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v81 = v40;
    unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
    uint64_t v43 = *((void *)v40 + 2);
    BOOL v44 = (v41 & 1) == 0;
    uint64_t v45 = v43 + v44;
    if (__OFADD__(v43, v44)) {
      goto LABEL_50;
    }
    if (*((void *)v40 + 3) >= v45)
    {
      if ((v70 & 1) == 0)
      {
        unint64_t v70 = v42;
        LODWORD(v76) = v41;
        specialized _NativeDictionary.copy()();
        LOBYTE(v41) = (_BYTE)v76;
        unint64_t v42 = v70;
      }
    }
    else
    {
      LODWORD(v76) = v41;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, v70);
      unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
      int v47 = v41 & 1;
      LOBYTE(v41) = (_BYTE)v76;
      if ((v76 & 1) != v47) {
        goto LABEL_53;
      }
      unint64_t v42 = v46;
    }
    int v57 = v81;
    v76 = v81;
    if (v41)
    {
      int v58 = (_OWORD *)(*((void *)v81 + 7) + 32 * v42);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v58);
      outlined init with take of Any(v82, v58);
    }
    else
    {
      *(void *)&v81[8 * (v42 >> 6) + 64] |= 1 << v42;
      *(_OWORD *)(*((void *)v57 + 6) + 16 * v42) = v36;
      outlined init with take of Any(v82, (_OWORD *)(*((void *)v57 + 7) + 32 * v42));
      uint64_t v61 = *((void *)v57 + 2);
      BOOL v62 = __OFADD__(v61, 1);
      uint64_t v63 = v61 + 1;
      if (v62) {
        goto LABEL_51;
      }
      *((void *)v57 + 2) = v63;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v94, &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v73);
    uint64_t v64 = &v83;
LABEL_41:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v64);
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v98) {
      goto LABEL_47;
    }
  }
  uint64_t v89 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v87, &demangling cache variable for type metadata for CATType?);
  long long v90 = v36;
  outlined init with copy of Any((uint64_t)v95, v38);
  long long v83 = v36;
  int v48 = v71;
  outlined init with copy of Any((uint64_t)v95, (uint64_t)v71);
  outlined init with take of Any(v48, &v87);
  int v49 = v76;
  LODWORD(v70) = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v82[0] = v49;
  unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
  uint64_t v52 = *((void *)v49 + 2);
  BOOL v53 = (v50 & 1) == 0;
  uint64_t v54 = v52 + v53;
  if (!__OFADD__(v52, v53))
  {
    if (*((void *)v49 + 3) >= v54)
    {
      if ((v70 & 1) == 0)
      {
        unint64_t v70 = v51;
        LODWORD(v76) = v50;
        specialized _NativeDictionary.copy()();
        LOBYTE(v50) = (_BYTE)v76;
        unint64_t v51 = v70;
      }
    }
    else
    {
      LODWORD(v76) = v50;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, v70);
      unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
      int v56 = v50 & 1;
      LOBYTE(v50) = (_BYTE)v76;
      if ((v76 & 1) != v56) {
        goto LABEL_53;
      }
      unint64_t v51 = v55;
    }
    v59 = *(void **)&v82[0];
    v76 = *(char **)&v82[0];
    if (v50)
    {
      v60 = (_OWORD *)(*(void *)(*(void *)&v82[0] + 56) + 32 * v51);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v60);
      outlined init with take of Any(&v87, v60);
    }
    else
    {
      *(void *)(*(void *)&v82[0] + 8 * (v51 >> 6) + 64) |= 1 << v51;
      *(_OWORD *)(v59[6] + 16 * v51) = v36;
      outlined init with take of Any(&v87, (_OWORD *)(v59[7] + 32 * v51));
      uint64_t v65 = v59[2];
      BOOL v62 = __OFADD__(v65, 1);
      uint64_t v66 = v65 + 1;
      if (v62) {
        goto LABEL_52;
      }
      v59[2] = v66;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v94, &demangling cache variable for type metadata for (label: String?, value: Any));
    uint64_t v64 = (long long *)v73;
    goto LABEL_41;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized GeoCATModel.getParams()(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v81 = a3;
  uint64_t v5 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v77 = (char *)v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v78 = (char *)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v70 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v70 - v18;
  uint64_t v20 = type metadata accessor for Mirror();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v79 = v20;
  uint64_t v80 = v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v76 = (char *)v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (void (*)(uint64_t))((char *)v70 - v24);
  *((void *)&v101[0] + 1) = a2;
  *(void *)&long long v100 = a1;
  v81(a1);
  Mirror.init(reflecting:)();
  uint64_t v81 = v25;
  Mirror.displayStyle.getter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v17, enum case for Mirror.DisplayStyle.enum(_:), v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  uint64_t v26 = (uint64_t)&v11[*(int *)(v9 + 56)];
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v19, (uint64_t)v11, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v17, v26, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v27((uint64_t)v11, 1, v5) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v17, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v19, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v27(v26, 1, v5) == 1)
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      uint64_t v28 = v80;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v11, (uint64_t)v78, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v27(v26, 1, v5) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v17, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v19, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v78, v5);
LABEL_6:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
    uint64_t v28 = v80;
LABEL_45:
    unint64_t v68 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(void (*)(uint64_t), uint64_t))(v28 + 8))(v81, v79);
    return v68;
  }
  uint64_t v29 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v77, v26, v5);
  char v30 = v78;
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v32 = *(void (**)(char *, uint64_t))(v6 + 8);
  v32(v29, v5);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v17, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v19, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v32(v30, v5);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v28 = v80;
  if ((v31 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_8:
  Mirror.children.getter();
  specialized Collection.first.getter(&v97);
  swift_release();
  if (!v99)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v97, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    goto LABEL_45;
  }
  long long v100 = v97;
  outlined init with take of Any(&v98, v101);
  outlined init with copy of Any((uint64_t)v101, (uint64_t)&v98);
  uint64_t v33 = v76;
  Mirror.init(reflecting:)();
  uint64_t v34 = Mirror.children.getter();
  long long v36 = *(char **)(v28 + 8);
  uint64_t v35 = v28 + 8;
  v76 = v36;
  ((void (*)(char *, uint64_t))v36)(v33, v79);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v75 = v34;
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (!v99)
  {
    v77 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_47:
    swift_release_n();
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v100, &demangling cache variable for type metadata for (label: String?, value: Any));
    ((void (*)(void (*)(uint64_t), uint64_t))v76)(v81, v79);
    return (uint64_t)v77;
  }
  unint64_t v72 = &v85;
  v77 = (char *)&_swiftEmptyDictionarySingleton;
  uint64_t v78 = "ip";
  v73 = (char *)&type metadata for Any + 8;
  uint64_t v74 = &v92;
  uint64_t v80 = v35;
  while (1)
  {
    while (1)
    {
      long long v37 = v97;
      long long v95 = v97;
      outlined init with take of Any(&v98, v96);
      long long v93 = v37;
      outlined init with copy of Any((uint64_t)v96, (uint64_t)&v94);
      if (*((void *)&v37 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v93, &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v99) {
        goto LABEL_47;
      }
    }
    if (v37 == __PAIR128__(0x80000000000C68D0, 0xD000000000000016))
    {
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v93, &demangling cache variable for type metadata for (label: String?, value: Any));
    if (v38)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    long long v91 = v37;
    uint64_t v39 = (uint64_t)v74;
    outlined init with copy of Any((uint64_t)v96, (uint64_t)v74);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    if (!swift_dynamicCast()) {
      break;
    }
    outlined init with take of CATType(&v88, (uint64_t)&v84);
    long long v91 = v37;
    outlined init with copy of Any((uint64_t)v96, v39);
    v70[1] = v86;
    unint64_t v71 = v87;
    __swift_project_boxed_opaque_existential_1(&v84, v86);
    uint64_t v40 = dispatch thunk of CATType.toDictionary.getter();
    *((void *)&v89 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&long long v88 = v40;
    outlined init with take of Any(&v88, v83);
    int v41 = v77;
    LODWORD(v71) = swift_isUniquelyReferenced_nonNull_native();
    v82 = v41;
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
    uint64_t v44 = *((void *)v41 + 2);
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      goto LABEL_50;
    }
    if (*((void *)v41 + 3) >= v46)
    {
      if ((v71 & 1) == 0)
      {
        unint64_t v71 = v43;
        LODWORD(v77) = v42;
        specialized _NativeDictionary.copy()();
        LOBYTE(v42) = (_BYTE)v77;
        unint64_t v43 = v71;
      }
    }
    else
    {
      LODWORD(v77) = v42;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, v71);
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      int v48 = v42 & 1;
      LOBYTE(v42) = (_BYTE)v77;
      if ((v77 & 1) != v48) {
        goto LABEL_53;
      }
      unint64_t v43 = v47;
    }
    int v58 = v82;
    v77 = v82;
    if (v42)
    {
      v59 = (_OWORD *)(*((void *)v82 + 7) + 32 * v43);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v59);
      outlined init with take of Any(v83, v59);
    }
    else
    {
      *(void *)&v82[8 * (v43 >> 6) + 64] |= 1 << v43;
      *(_OWORD *)(*((void *)v58 + 6) + 16 * v43) = v37;
      outlined init with take of Any(v83, (_OWORD *)(*((void *)v58 + 7) + 32 * v43));
      uint64_t v62 = *((void *)v58 + 2);
      BOOL v63 = __OFADD__(v62, 1);
      uint64_t v64 = v62 + 1;
      if (v63) {
        goto LABEL_51;
      }
      *((void *)v58 + 2) = v64;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v74);
    uint64_t v65 = &v84;
LABEL_41:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v65);
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v99) {
      goto LABEL_47;
    }
  }
  uint64_t v90 = 0;
  long long v88 = 0u;
  long long v89 = 0u;
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v88, &demangling cache variable for type metadata for CATType?);
  long long v91 = v37;
  outlined init with copy of Any((uint64_t)v96, v39);
  long long v84 = v37;
  int v49 = v72;
  outlined init with copy of Any((uint64_t)v96, (uint64_t)v72);
  outlined init with take of Any(v49, &v88);
  int v50 = v77;
  LODWORD(v71) = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v83[0] = v50;
  unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
  uint64_t v53 = *((void *)v50 + 2);
  BOOL v54 = (v51 & 1) == 0;
  uint64_t v55 = v53 + v54;
  if (!__OFADD__(v53, v54))
  {
    if (*((void *)v50 + 3) >= v55)
    {
      if ((v71 & 1) == 0)
      {
        unint64_t v71 = v52;
        LODWORD(v77) = v51;
        specialized _NativeDictionary.copy()();
        LOBYTE(v51) = (_BYTE)v77;
        unint64_t v52 = v71;
      }
    }
    else
    {
      LODWORD(v77) = v51;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, v71);
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      int v57 = v51 & 1;
      LOBYTE(v51) = (_BYTE)v77;
      if ((v77 & 1) != v57) {
        goto LABEL_53;
      }
      unint64_t v52 = v56;
    }
    v60 = *(void **)&v83[0];
    v77 = *(char **)&v83[0];
    if (v51)
    {
      uint64_t v61 = (_OWORD *)(*(void *)(*(void *)&v83[0] + 56) + 32 * v52);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v61);
      outlined init with take of Any(&v88, v61);
    }
    else
    {
      *(void *)(*(void *)&v83[0] + 8 * (v52 >> 6) + 64) |= 1 << v52;
      *(_OWORD *)(v60[6] + 16 * v52) = v37;
      outlined init with take of Any(&v88, (_OWORD *)(v60[7] + 32 * v52));
      uint64_t v66 = v60[2];
      BOOL v63 = __OFADD__(v66, 1);
      uint64_t v67 = v66 + 1;
      if (v63) {
        goto LABEL_52;
      }
      v60[2] = v67;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
    uint64_t v65 = (long long *)v74;
    goto LABEL_41;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized GeoCATModel.getParams()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v74 = (char *)v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v75 = (char *)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v67 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v67 - v15;
  uint64_t v17 = type metadata accessor for Mirror();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v76 = v17;
  uint64_t v77 = v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v73 = (char *)v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v67 - v21;
  *((void *)&v98[0] + 1) = &type metadata for Compass;
  *(void *)&long long v97 = a1;
  swift_retain();
  Mirror.init(reflecting:)();
  uint64_t v78 = v22;
  Mirror.displayStyle.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v14, enum case for Mirror.DisplayStyle.enum(_:), v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  uint64_t v23 = (uint64_t)&v8[*(int *)(v6 + 56)];
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v16, (uint64_t)v8, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v14, v23, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v24((uint64_t)v8, 1, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v24(v23, 1, v2) == 1)
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)v8, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      uint64_t v25 = v77;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v8, (uint64_t)v75, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v24(v23, 1, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v75, v2);
LABEL_6:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v8, &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
    uint64_t v25 = v77;
LABEL_45:
    unint64_t v65 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v78, v76);
    return v65;
  }
  uint64_t v26 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v74, v23, v2);
  uint64_t v27 = v75;
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v3 + 8);
  v29(v26, v2);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v29(v27, v2);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v8, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v25 = v77;
  if ((v28 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_8:
  Mirror.children.getter();
  specialized Collection.first.getter(&v94);
  swift_release();
  if (!v96)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v94, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    goto LABEL_45;
  }
  long long v97 = v94;
  outlined init with take of Any(&v95, v98);
  outlined init with copy of Any((uint64_t)v98, (uint64_t)&v95);
  char v30 = v73;
  Mirror.init(reflecting:)();
  uint64_t v31 = Mirror.children.getter();
  uint64_t v33 = *(char **)(v25 + 8);
  uint64_t v32 = v25 + 8;
  v73 = v33;
  ((void (*)(char *, uint64_t))v33)(v30, v76);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v72 = v31;
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (!v96)
  {
    uint64_t v74 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_47:
    swift_release_n();
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v97, &demangling cache variable for type metadata for (label: String?, value: Any));
    ((void (*)(char *, uint64_t))v73)(v78, v76);
    return (uint64_t)v74;
  }
  unint64_t v69 = &v82;
  uint64_t v74 = (char *)&_swiftEmptyDictionarySingleton;
  uint64_t v75 = "ip";
  unint64_t v70 = (char *)&type metadata for Any + 8;
  unint64_t v71 = &v89;
  uint64_t v77 = v32;
  while (1)
  {
    while (1)
    {
      long long v34 = v94;
      long long v92 = v94;
      outlined init with take of Any(&v95, v93);
      long long v90 = v34;
      outlined init with copy of Any((uint64_t)v93, (uint64_t)&v91);
      if (*((void *)&v34 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v90, &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v92, &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v96) {
        goto LABEL_47;
      }
    }
    if (v34 == __PAIR128__(0x80000000000C68D0, 0xD000000000000016))
    {
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v90, &demangling cache variable for type metadata for (label: String?, value: Any));
    if (v35)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    long long v88 = v34;
    uint64_t v36 = (uint64_t)v71;
    outlined init with copy of Any((uint64_t)v93, (uint64_t)v71);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    if (!swift_dynamicCast()) {
      break;
    }
    outlined init with take of CATType(&v85, (uint64_t)&v81);
    long long v88 = v34;
    outlined init with copy of Any((uint64_t)v93, v36);
    v67[1] = v83;
    unint64_t v68 = v84;
    __swift_project_boxed_opaque_existential_1(&v81, v83);
    uint64_t v37 = dispatch thunk of CATType.toDictionary.getter();
    *((void *)&v86 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&long long v85 = v37;
    outlined init with take of Any(&v85, v80);
    char v38 = v74;
    LODWORD(v68) = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v79 = v38;
    unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
    uint64_t v41 = *((void *)v38 + 2);
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_50;
    }
    if (*((void *)v38 + 3) >= v43)
    {
      if ((v68 & 1) == 0)
      {
        unint64_t v68 = v40;
        LODWORD(v74) = v39;
        specialized _NativeDictionary.copy()();
        LOBYTE(v39) = (_BYTE)v74;
        unint64_t v40 = v68;
      }
    }
    else
    {
      LODWORD(v74) = v39;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, v68);
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
      int v45 = v39 & 1;
      LOBYTE(v39) = (_BYTE)v74;
      if ((v74 & 1) != v45) {
        goto LABEL_53;
      }
      unint64_t v40 = v44;
    }
    uint64_t v55 = v79;
    uint64_t v74 = v79;
    if (v39)
    {
      unint64_t v56 = (_OWORD *)(*((void *)v79 + 7) + 32 * v40);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v56);
      outlined init with take of Any(v80, v56);
    }
    else
    {
      *(void *)&v79[8 * (v40 >> 6) + 64] |= 1 << v40;
      *(_OWORD *)(*((void *)v55 + 6) + 16 * v40) = v34;
      outlined init with take of Any(v80, (_OWORD *)(*((void *)v55 + 7) + 32 * v40));
      uint64_t v59 = *((void *)v55 + 2);
      BOOL v60 = __OFADD__(v59, 1);
      uint64_t v61 = v59 + 1;
      if (v60) {
        goto LABEL_51;
      }
      *((void *)v55 + 2) = v61;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v92, &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v71);
    uint64_t v62 = &v81;
LABEL_41:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v62);
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v96) {
      goto LABEL_47;
    }
  }
  uint64_t v87 = 0;
  long long v85 = 0u;
  long long v86 = 0u;
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v85, &demangling cache variable for type metadata for CATType?);
  long long v88 = v34;
  outlined init with copy of Any((uint64_t)v93, v36);
  long long v81 = v34;
  uint64_t v46 = v69;
  outlined init with copy of Any((uint64_t)v93, (uint64_t)v69);
  outlined init with take of Any(v46, &v85);
  unint64_t v47 = v74;
  LODWORD(v68) = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v80[0] = v47;
  unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
  uint64_t v50 = *((void *)v47 + 2);
  BOOL v51 = (v48 & 1) == 0;
  uint64_t v52 = v50 + v51;
  if (!__OFADD__(v50, v51))
  {
    if (*((void *)v47 + 3) >= v52)
    {
      if ((v68 & 1) == 0)
      {
        unint64_t v68 = v49;
        LODWORD(v74) = v48;
        specialized _NativeDictionary.copy()();
        LOBYTE(v48) = (_BYTE)v74;
        unint64_t v49 = v68;
      }
    }
    else
    {
      LODWORD(v74) = v48;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v68);
      unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
      int v54 = v48 & 1;
      LOBYTE(v48) = (_BYTE)v74;
      if ((v74 & 1) != v54) {
        goto LABEL_53;
      }
      unint64_t v49 = v53;
    }
    int v57 = *(void **)&v80[0];
    uint64_t v74 = *(char **)&v80[0];
    if (v48)
    {
      int v58 = (_OWORD *)(*(void *)(*(void *)&v80[0] + 56) + 32 * v49);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v58);
      outlined init with take of Any(&v85, v58);
    }
    else
    {
      *(void *)(*(void *)&v80[0] + 8 * (v49 >> 6) + 64) |= 1 << v49;
      *(_OWORD *)(v57[6] + 16 * v49) = v34;
      outlined init with take of Any(&v85, (_OWORD *)(v57[7] + 32 * v49));
      uint64_t v63 = v57[2];
      BOOL v60 = __OFADD__(v63, 1);
      uint64_t v64 = v63 + 1;
      if (v60) {
        goto LABEL_52;
      }
      v57[2] = v64;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v92, &demangling cache variable for type metadata for (label: String?, value: Any));
    uint64_t v62 = (long long *)v71;
    goto LABEL_41;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized GeoCATModel.getParams()(char a1)
{
  uint64_t v2 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v74 = (char *)v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v75 = (char *)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v67 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v67 - v15;
  uint64_t v17 = type metadata accessor for Mirror();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v76 = v17;
  uint64_t v77 = v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v73 = (char *)v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v67 - v21;
  *((void *)&v98[0] + 1) = &type metadata for LocationServices;
  LOBYTE(v97) = a1;
  Mirror.init(reflecting:)();
  uint64_t v78 = v22;
  Mirror.displayStyle.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v14, enum case for Mirror.DisplayStyle.enum(_:), v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  uint64_t v23 = (uint64_t)&v8[*(int *)(v6 + 56)];
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v16, (uint64_t)v8, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v14, v23, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v24((uint64_t)v8, 1, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v24(v23, 1, v2) == 1)
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)v8, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      uint64_t v25 = v77;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v8, (uint64_t)v75, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v24(v23, 1, v2) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v75, v2);
LABEL_6:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v8, &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
    uint64_t v25 = v77;
LABEL_45:
    unint64_t v65 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v78, v76);
    return v65;
  }
  uint64_t v26 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v74, v23, v2);
  uint64_t v27 = v75;
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v3 + 8);
  v29(v26, v2);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v29(v27, v2);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v8, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v25 = v77;
  if ((v28 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_8:
  Mirror.children.getter();
  specialized Collection.first.getter(&v94);
  swift_release();
  if (!v96)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v94, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    goto LABEL_45;
  }
  long long v97 = v94;
  outlined init with take of Any(&v95, v98);
  outlined init with copy of Any((uint64_t)v98, (uint64_t)&v95);
  char v30 = v73;
  Mirror.init(reflecting:)();
  uint64_t v31 = Mirror.children.getter();
  uint64_t v33 = *(char **)(v25 + 8);
  uint64_t v32 = v25 + 8;
  v73 = v33;
  ((void (*)(char *, uint64_t))v33)(v30, v76);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v72 = v31;
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (!v96)
  {
    uint64_t v74 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_47:
    swift_release_n();
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v97, &demangling cache variable for type metadata for (label: String?, value: Any));
    ((void (*)(char *, uint64_t))v73)(v78, v76);
    return (uint64_t)v74;
  }
  unint64_t v69 = &v82;
  uint64_t v74 = (char *)&_swiftEmptyDictionarySingleton;
  uint64_t v75 = "ip";
  unint64_t v70 = (char *)&type metadata for Any + 8;
  unint64_t v71 = &v89;
  uint64_t v77 = v32;
  while (1)
  {
    while (1)
    {
      long long v34 = v94;
      long long v92 = v94;
      outlined init with take of Any(&v95, v93);
      long long v90 = v34;
      outlined init with copy of Any((uint64_t)v93, (uint64_t)&v91);
      if (*((void *)&v34 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v90, &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v92, &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v96) {
        goto LABEL_47;
      }
    }
    if (v34 == __PAIR128__(0x80000000000C68D0, 0xD000000000000016))
    {
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v90, &demangling cache variable for type metadata for (label: String?, value: Any));
    if (v35)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    long long v88 = v34;
    uint64_t v36 = (uint64_t)v71;
    outlined init with copy of Any((uint64_t)v93, (uint64_t)v71);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    if (!swift_dynamicCast()) {
      break;
    }
    outlined init with take of CATType(&v85, (uint64_t)&v81);
    long long v88 = v34;
    outlined init with copy of Any((uint64_t)v93, v36);
    v67[1] = v83;
    unint64_t v68 = v84;
    __swift_project_boxed_opaque_existential_1(&v81, v83);
    uint64_t v37 = dispatch thunk of CATType.toDictionary.getter();
    *((void *)&v86 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&long long v85 = v37;
    outlined init with take of Any(&v85, v80);
    char v38 = v74;
    LODWORD(v68) = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v79 = v38;
    unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
    uint64_t v41 = *((void *)v38 + 2);
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_50;
    }
    if (*((void *)v38 + 3) >= v43)
    {
      if ((v68 & 1) == 0)
      {
        unint64_t v68 = v40;
        LODWORD(v74) = v39;
        specialized _NativeDictionary.copy()();
        LOBYTE(v39) = (_BYTE)v74;
        unint64_t v40 = v68;
      }
    }
    else
    {
      LODWORD(v74) = v39;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, v68);
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
      int v45 = v39 & 1;
      LOBYTE(v39) = (_BYTE)v74;
      if ((v74 & 1) != v45) {
        goto LABEL_53;
      }
      unint64_t v40 = v44;
    }
    uint64_t v55 = v79;
    uint64_t v74 = v79;
    if (v39)
    {
      unint64_t v56 = (_OWORD *)(*((void *)v79 + 7) + 32 * v40);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v56);
      outlined init with take of Any(v80, v56);
    }
    else
    {
      *(void *)&v79[8 * (v40 >> 6) + 64] |= 1 << v40;
      *(_OWORD *)(*((void *)v55 + 6) + 16 * v40) = v34;
      outlined init with take of Any(v80, (_OWORD *)(*((void *)v55 + 7) + 32 * v40));
      uint64_t v59 = *((void *)v55 + 2);
      BOOL v60 = __OFADD__(v59, 1);
      uint64_t v61 = v59 + 1;
      if (v60) {
        goto LABEL_51;
      }
      *((void *)v55 + 2) = v61;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v92, &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v71);
    uint64_t v62 = &v81;
LABEL_41:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v62);
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v96) {
      goto LABEL_47;
    }
  }
  uint64_t v87 = 0;
  long long v85 = 0u;
  long long v86 = 0u;
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v85, &demangling cache variable for type metadata for CATType?);
  long long v88 = v34;
  outlined init with copy of Any((uint64_t)v93, v36);
  long long v81 = v34;
  uint64_t v46 = v69;
  outlined init with copy of Any((uint64_t)v93, (uint64_t)v69);
  outlined init with take of Any(v46, &v85);
  unint64_t v47 = v74;
  LODWORD(v68) = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v80[0] = v47;
  unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
  uint64_t v50 = *((void *)v47 + 2);
  BOOL v51 = (v48 & 1) == 0;
  uint64_t v52 = v50 + v51;
  if (!__OFADD__(v50, v51))
  {
    if (*((void *)v47 + 3) >= v52)
    {
      if ((v68 & 1) == 0)
      {
        unint64_t v68 = v49;
        LODWORD(v74) = v48;
        specialized _NativeDictionary.copy()();
        LOBYTE(v48) = (_BYTE)v74;
        unint64_t v49 = v68;
      }
    }
    else
    {
      LODWORD(v74) = v48;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v68);
      unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
      int v54 = v48 & 1;
      LOBYTE(v48) = (_BYTE)v74;
      if ((v74 & 1) != v54) {
        goto LABEL_53;
      }
      unint64_t v49 = v53;
    }
    int v57 = *(void **)&v80[0];
    uint64_t v74 = *(char **)&v80[0];
    if (v48)
    {
      int v58 = (_OWORD *)(*(void *)(*(void *)&v80[0] + 56) + 32 * v49);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v58);
      outlined init with take of Any(&v85, v58);
    }
    else
    {
      *(void *)(*(void *)&v80[0] + 8 * (v49 >> 6) + 64) |= 1 << v49;
      *(_OWORD *)(v57[6] + 16 * v49) = v34;
      outlined init with take of Any(&v85, (_OWORD *)(v57[7] + 32 * v49));
      uint64_t v63 = v57[2];
      BOOL v60 = __OFADD__(v63, 1);
      uint64_t v64 = v63 + 1;
      if (v60) {
        goto LABEL_52;
      }
      v57[2] = v64;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v92, &demangling cache variable for type metadata for (label: String?, value: Any));
    uint64_t v62 = (long long *)v71;
    goto LABEL_41;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t GeoCATModel.getParams()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v77 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v78 = (char *)v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v70 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v70 - v17;
  uint64_t v19 = type metadata accessor for Mirror();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v79 = v19;
  uint64_t v80 = v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v76 = (char *)v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)v70 - v23;
  *((void *)&v101[0] + 1) = a1;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v100);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_0, v2, a1);
  Mirror.init(reflecting:)();
  long long v81 = v24;
  Mirror.displayStyle.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v16, enum case for Mirror.DisplayStyle.enum(_:), v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  uint64_t v26 = (uint64_t)&v10[*(int *)(v8 + 56)];
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v18, (uint64_t)v10, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v16, v26, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v27((uint64_t)v10, 1, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    if (v27(v26, 1, v4) == 1)
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      uint64_t v28 = v80;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v10, (uint64_t)v78, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v27(v26, 1, v4) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v78, v4);
LABEL_6:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
    uint64_t v28 = v80;
LABEL_45:
    unint64_t v68 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v81, v79);
    return v68;
  }
  uint64_t v29 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v77, v26, v4);
  char v30 = v78;
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v5 + 8);
  v32(v29, v4);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v32(v30, v4);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v28 = v80;
  if ((v31 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_8:
  Mirror.children.getter();
  specialized Collection.first.getter(&v97);
  swift_release();
  if (!v99)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v97, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    goto LABEL_45;
  }
  long long v100 = v97;
  outlined init with take of Any(&v98, v101);
  outlined init with copy of Any((uint64_t)v101, (uint64_t)&v98);
  uint64_t v33 = v76;
  Mirror.init(reflecting:)();
  uint64_t v34 = Mirror.children.getter();
  uint64_t v36 = *(char **)(v28 + 8);
  uint64_t v35 = v28 + 8;
  uint64_t v76 = v36;
  ((void (*)(char *, uint64_t))v36)(v33, v79);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v75 = v34;
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (!v99)
  {
    uint64_t v77 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_47:
    swift_release_n();
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v100, &demangling cache variable for type metadata for (label: String?, value: Any));
    ((void (*)(char *, uint64_t))v76)(v81, v79);
    return (uint64_t)v77;
  }
  uint64_t v72 = &v85;
  uint64_t v77 = (char *)&_swiftEmptyDictionarySingleton;
  uint64_t v78 = "ip";
  v73 = (char *)&type metadata for Any + 8;
  uint64_t v74 = &v92;
  uint64_t v80 = v35;
  while (1)
  {
    while (1)
    {
      long long v37 = v97;
      long long v95 = v97;
      outlined init with take of Any(&v98, v96);
      long long v93 = v37;
      outlined init with copy of Any((uint64_t)v96, (uint64_t)&v94);
      if (*((void *)&v37 + 1)) {
        break;
      }
LABEL_11:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v93, &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_12:
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v99) {
        goto LABEL_47;
      }
    }
    if (v37 == __PAIR128__(0x80000000000C68D0, 0xD000000000000016))
    {
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v93, &demangling cache variable for type metadata for (label: String?, value: Any));
    if (v38)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    long long v91 = v37;
    uint64_t v39 = (uint64_t)v74;
    outlined init with copy of Any((uint64_t)v96, (uint64_t)v74);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CATType);
    if (!swift_dynamicCast()) {
      break;
    }
    outlined init with take of CATType(&v88, (uint64_t)&v84);
    long long v91 = v37;
    outlined init with copy of Any((uint64_t)v96, v39);
    v70[1] = v86;
    unint64_t v71 = v87;
    __swift_project_boxed_opaque_existential_1(&v84, v86);
    uint64_t v40 = dispatch thunk of CATType.toDictionary.getter();
    *((void *)&v89 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&long long v88 = v40;
    outlined init with take of Any(&v88, v83);
    uint64_t v41 = v77;
    LODWORD(v71) = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v82 = v41;
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
    uint64_t v44 = *((void *)v41 + 2);
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      goto LABEL_50;
    }
    if (*((void *)v41 + 3) >= v46)
    {
      if ((v71 & 1) == 0)
      {
        unint64_t v71 = v43;
        LODWORD(v77) = v42;
        specialized _NativeDictionary.copy()();
        LOBYTE(v42) = (_BYTE)v77;
        unint64_t v43 = v71;
      }
    }
    else
    {
      LODWORD(v77) = v42;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, v71);
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      int v48 = v42 & 1;
      LOBYTE(v42) = (_BYTE)v77;
      if ((v77 & 1) != v48) {
        goto LABEL_53;
      }
      unint64_t v43 = v47;
    }
    int v58 = v82;
    uint64_t v77 = v82;
    if (v42)
    {
      uint64_t v59 = (_OWORD *)(*((void *)v82 + 7) + 32 * v43);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v59);
      outlined init with take of Any(v83, v59);
    }
    else
    {
      *(void *)&v82[8 * (v43 >> 6) + 64] |= 1 << v43;
      *(_OWORD *)(*((void *)v58 + 6) + 16 * v43) = v37;
      outlined init with take of Any(v83, (_OWORD *)(*((void *)v58 + 7) + 32 * v43));
      uint64_t v62 = *((void *)v58 + 2);
      BOOL v63 = __OFADD__(v62, 1);
      uint64_t v64 = v62 + 1;
      if (v63) {
        goto LABEL_51;
      }
      *((void *)v58 + 2) = v64;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v74);
    unint64_t v65 = &v84;
LABEL_41:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v65);
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v99) {
      goto LABEL_47;
    }
  }
  uint64_t v90 = 0;
  long long v88 = 0u;
  long long v89 = 0u;
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v88, &demangling cache variable for type metadata for CATType?);
  long long v91 = v37;
  outlined init with copy of Any((uint64_t)v96, v39);
  long long v84 = v37;
  unint64_t v49 = v72;
  outlined init with copy of Any((uint64_t)v96, (uint64_t)v72);
  outlined init with take of Any(v49, &v88);
  uint64_t v50 = v77;
  LODWORD(v71) = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v83[0] = v50;
  unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
  uint64_t v53 = *((void *)v50 + 2);
  BOOL v54 = (v51 & 1) == 0;
  uint64_t v55 = v53 + v54;
  if (!__OFADD__(v53, v54))
  {
    if (*((void *)v50 + 3) >= v55)
    {
      if ((v71 & 1) == 0)
      {
        unint64_t v71 = v52;
        LODWORD(v77) = v51;
        specialized _NativeDictionary.copy()();
        LOBYTE(v51) = (_BYTE)v77;
        unint64_t v52 = v71;
      }
    }
    else
    {
      LODWORD(v77) = v51;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, v71);
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v37, *((uint64_t *)&v37 + 1));
      int v57 = v51 & 1;
      LOBYTE(v51) = (_BYTE)v77;
      if ((v77 & 1) != v57) {
        goto LABEL_53;
      }
      unint64_t v52 = v56;
    }
    BOOL v60 = *(void **)&v83[0];
    uint64_t v77 = *(char **)&v83[0];
    if (v51)
    {
      uint64_t v61 = (_OWORD *)(*(void *)(*(void *)&v83[0] + 56) + 32 * v52);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v61);
      outlined init with take of Any(&v88, v61);
    }
    else
    {
      *(void *)(*(void *)&v83[0] + 8 * (v52 >> 6) + 64) |= 1 << v52;
      *(_OWORD *)(v60[6] + 16 * v52) = v37;
      outlined init with take of Any(&v88, (_OWORD *)(v60[7] + 32 * v52));
      uint64_t v66 = v60[2];
      BOOL v63 = __OFADD__(v66, 1);
      uint64_t v67 = v66 + 1;
      if (v63) {
        goto LABEL_52;
      }
      v60[2] = v67;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v95, &demangling cache variable for type metadata for (label: String?, value: Any));
    unint64_t v65 = (long long *)v74;
    goto LABEL_41;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Mirror.DisplayStyle?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue), &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue), &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue), &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue), &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Mirror.DisplayStyle?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    char v10 = v15[0];
    uint64_t v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  __int16 v5;
  __int16 v6;
  unint64_t result;
  char v8;
  unsigned char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  long long v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FlowSelector.FlowSelectorKey, (_:)>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  uint64_t v4 = (unsigned __int8 *)(a1 + 32);
  swift_retain();
  while (1)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    BOOL v13 = *(_OWORD *)(v4 + 8);
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5 | (unsigned __int16)(v6 << 8));
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (unsigned char *)(v2[6] + 2 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    char v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 24;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(void))
{
  uint64_t v29 = a5;
  char v30 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    BOOL v13 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v12 = static _DictionaryStorage.allocate(capacity:)();
  BOOL v13 = (void *)v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v13;
  }
  uint64_t v15 = *(int *)(v8 + 48);
  uint64_t v16 = v12 + 64;
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v28[1] = a1;
  uint64_t v18 = a1 + v17;
  uint64_t v19 = *(void *)(v9 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Mirror.DisplayStyle?(v18, (uint64_t)v11, a2);
    unint64_t result = v30(v11);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v23 = v13[6];
    uint64_t v24 = v29(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v23 + *(void *)(*(void *)(v24 - 8) + 72) * v22, v11, v24);
    *(unsigned char *)(v13[7] + v22) = v11[v15];
    uint64_t v25 = v13[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_11;
    }
    v13[2] = v27;
    v18 += v19;
    if (!--v14)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v9);
    swift_bridgeObjectRelease();
    return outlined destroy of (label: String?, value: Any)?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t GeoCATModel.getBehaviorAfterSpeaking()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  __chkstk_darwin(v3 - 8);
  int v57 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v52 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v49 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v49 - v19;
  uint64_t v54 = type metadata accessor for Mirror();
  uint64_t v56 = *(void *)(v54 - 8);
  uint64_t v21 = __chkstk_darwin(v54);
  int v51 = (char *)v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)v49 - v23;
  *((void *)&v68 + 1) = a1;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v67);
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_0, v55, a1);
  Mirror.init(reflecting:)();
  uint64_t v55 = v24;
  Mirror.displayStyle.getter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v18, enum case for Mirror.DisplayStyle.enum(_:), v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
  uint64_t v26 = (uint64_t)&v11[*(int *)(v9 + 56)];
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v20, (uint64_t)v11, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v18, v26, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v27((uint64_t)v11, 1, v5) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v20, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    int v28 = v27(v26, 1, v5);
    uint64_t v29 = v55;
    if (v28 == 1)
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  char v30 = v52;
  outlined init with copy of Mirror.DisplayStyle?((uint64_t)v11, (uint64_t)v15, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  if (v27(v26, 1, v5) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v20, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    uint64_t v29 = v55;
LABEL_6:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for (Mirror.DisplayStyle?, Mirror.DisplayStyle?));
LABEL_20:
    (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v54);
LABEL_21:
    uint64_t v42 = v53;
    uint64_t v43 = enum case for BehaviorAfterSpeaking.defaultBehavior(_:);
    uint64_t v44 = type metadata accessor for BehaviorAfterSpeaking();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104))(v42, v43, v44);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v30, v26, v5);
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v6 + 8);
  v32(v30, v5);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v20, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v32(v15, v5);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v29 = v55;
  if ((v31 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_8:
  Mirror.children.getter();
  specialized Collection.first.getter(&v64);
  swift_release();
  if (!v66)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v54);
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v64, &demangling cache variable for type metadata for (label: String?, value: Any)?);
    goto LABEL_21;
  }
  long long v67 = v64;
  outlined init with take of Any(&v65, &v68);
  outlined init with copy of Any((uint64_t)&v68, (uint64_t)&v65);
  uint64_t v33 = v51;
  Mirror.init(reflecting:)();
  uint64_t v34 = Mirror.children.getter();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v56 + 8);
  v56 += 8;
  uint64_t v50 = v35;
  v35(v33, v54);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  v49[1] = v34;
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (!v66)
  {
LABEL_22:
    swift_release_n();
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v67, &demangling cache variable for type metadata for (label: String?, value: Any));
    v50(v55, v54);
    uint64_t v46 = enum case for BehaviorAfterSpeaking.defaultBehavior(_:);
    uint64_t v47 = type metadata accessor for BehaviorAfterSpeaking();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104))(v53, v46, v47);
  }
  int v51 = "ip";
  unint64_t v52 = (char *)0x80000000000C68D0;
  while (1)
  {
    long long v36 = v64;
    long long v62 = v64;
    outlined init with take of Any(&v65, v63);
    long long v60 = v36;
    outlined init with copy of Any((uint64_t)v63, (uint64_t)&v61);
    if (!*((void *)&v36 + 1))
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v60, &demangling cache variable for type metadata for (label: String?, value: Any));
      goto LABEL_12;
    }
    if (v36 == __PAIR128__((unint64_t)v52, 0xD000000000000016)) {
      break;
    }
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v60, &demangling cache variable for type metadata for (label: String?, value: Any));
    if (v37) {
      goto LABEL_18;
    }
LABEL_12:
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v62, &demangling cache variable for type metadata for (label: String?, value: Any));
    swift_bridgeObjectRelease();
LABEL_13:
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v66) {
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRetain_n();
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v60, &demangling cache variable for type metadata for (label: String?, value: Any));
LABEL_18:
  long long v58 = v36;
  outlined init with copy of Any((uint64_t)v63, (uint64_t)&v59);
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v62, &demangling cache variable for type metadata for (label: String?, value: Any));
  swift_bridgeObjectRelease();
  uint64_t v38 = type metadata accessor for BehaviorAfterSpeaking();
  uint64_t v39 = (uint64_t)v57;
  int v40 = swift_dynamicCast();
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
  if (!v40)
  {
    v41(v39, 1, 1, v38);
    outlined destroy of (label: String?, value: Any)?(v39, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
    goto LABEL_13;
  }
  uint64_t v48 = *(void *)(v38 - 8);
  v41(v39, 0, 1, v38);
  swift_release();
  swift_release_n();
  outlined destroy of (label: String?, value: Any)?((uint64_t)&v67, &demangling cache variable for type metadata for (label: String?, value: Any));
  v50(v55, v54);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v53, v39, v38);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance ShareETA()
{
  return specialized GeoCATModel.getID()(type metadata accessor for ShareETA, &demangling cache variable for type metadata for ShareETA.Type, type metadata accessor for ShareETA, type metadata accessor for ShareETA);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance ShareETA()
{
  return specialized GeoCATModel.getParams()(type metadata accessor for ShareETA, type metadata accessor for ShareETA);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance ContactResolution()
{
  return specialized GeoCATModel.getParams()(type metadata accessor for ContactResolution, type metadata accessor for ContactResolution);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance RetrieveParkingLocation()
{
  return specialized GeoCATModel.getID()(*v0, v0[1], v0[2], (uint64_t)&type metadata for RetrieveParkingLocation, &demangling cache variable for type metadata for RetrieveParkingLocation.Type);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance RetrieveParkingLocation()
{
  return specialized GeoCATModel.getParams()(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), (char *)&type metadata for RetrieveParkingLocation);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance DeleteParkingLocation()
{
  return specialized GeoCATModel.getID()(*v0, v0[1], v0[2], (uint64_t)&type metadata for DeleteParkingLocation, &demangling cache variable for type metadata for DeleteParkingLocation.Type);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance DeleteParkingLocation()
{
  return specialized GeoCATModel.getParams()(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), (char *)&type metadata for DeleteParkingLocation);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance SaveParkingLocation()
{
  return specialized GeoCATModel.getID()(*v0, v0[1], v0[2], (uint64_t)&type metadata for SaveParkingLocation, &demangling cache variable for type metadata for SaveParkingLocation.Type);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance SaveParkingLocation()
{
  return specialized GeoCATModel.getParams()(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), (char *)&type metadata for SaveParkingLocation);
}

uint64_t default argument 1 of ShareETA.disambiguateContactsHandles(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for BehaviorAfterSpeaking.listen(_:);
  uint64_t v3 = type metadata accessor for BehaviorAfterSpeaking();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance TrafficIncident()
{
  return specialized GeoCATModel.getID()(type metadata accessor for TrafficIncident, &demangling cache variable for type metadata for TrafficIncident.Type, type metadata accessor for TrafficIncident, type metadata accessor for TrafficIncident);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance TrafficIncident()
{
  return specialized GeoCATModel.getParams()(type metadata accessor for TrafficIncident, type metadata accessor for TrafficIncident);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance Common()
{
  return specialized GeoCATModel.getID()(*v0, (uint64_t)&type metadata for Common, &demangling cache variable for type metadata for Common.Type, (void (*)(uint64_t))outlined copy of Common);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance Common()
{
  return specialized GeoCATModel.getParams()(*v0, (uint64_t)&type metadata for Common, (void (*)(uint64_t))outlined copy of Common);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance GeoLabel()
{
  return specialized GeoCATModel.getID()(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance GeoLabel()
{
  return specialized GeoCATModel.getParams()(*(void *)v0, *(void *)(v0 + 8), *(unsigned __int8 *)(v0 + 16));
}

uint64_t protocol witness for GeoCATModel.getID() in conformance LocationSearch()
{
  return specialized GeoCATModel.getID()(*v0, v0[1]);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance LocationSearch()
{
  return specialized GeoCATModel.getParams()(*v0, v0[1]);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance NavigationControl()
{
  return specialized GeoCATModel.getID()(*v0, (uint64_t)&type metadata for NavigationControl, &demangling cache variable for type metadata for NavigationControl.Type, (void (*)(uint64_t))outlined copy of NavigationControl);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance NavigationControl()
{
  return specialized GeoCATModel.getParams()(*v0, (uint64_t)&type metadata for NavigationControl, (void (*)(uint64_t))outlined copy of NavigationControl);
}

uint64_t protocol witness for GeoCATModel.getID() in conformance Compass()
{
  return specialized GeoCATModel.getID()(*v0);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance Compass()
{
  return specialized GeoCATModel.getParams()(*v0);
}

BOOL static LocationAccessLevelFor.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LocationAccessLevelFor.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int LocationAccessLevelFor.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LocationServices(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationServices()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LocationServices()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationServices()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for GeoCATModel.getID() in conformance LocationServices()
{
  return specialized GeoCATModel.getID()(*v0);
}

uint64_t protocol witness for GeoCATModel.getParams() in conformance LocationServices()
{
  return specialized GeoCATModel.getParams()(*v0);
}

uint64_t default argument 1 of FlowHelperImpl.init(device:rchFlowFactory:catGlobals:aceService:outputPublisher:catService:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GeoRCHFlowFactoryImpl();
  uint64_t result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for GeoRCHFlowFactoryImpl;
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of ShareETAContactDisambiguationStrategy.isUSO()
{
  return 0;
}

uint64_t variable initialization expression of ShareETAPromptForContactStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of ShareETAPromptForContactStrategy.weightedPromptResponseTargets()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_BFBD0;
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  unint64_t v1 = specialized OntologyNode.javaClassName.getter((void (*)(void))&type metadata accessor for AddressOntologyNode.OccupantNode);
  uint64_t v3 = v2;
  swift_release();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter();
  unint64_t v4 = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<String>, &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
  uint64_t v6 = v5;
  swift_release();
  *(void *)(v0 + 48) = v4;
  *(void *)(v0 + 56) = v6;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once();
  }
  *(void *)(v0 + 64) = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>, &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v0 + 72) = v7;
  return v0;
}

uint64_t default argument 0 of AddressOntologyNode.OccupantNode.init(name:multicardinal:)()
{
  return 0x746E61707563636FLL;
}

unint64_t specialized OntologyNode.javaClassName.getter()
{
  return specialized OntologyNode.javaClassName.getter((void (*)(void))&type metadata accessor for AddressOntologyNode.OccupantNode);
}

{
  return specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<String>, &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
}

{
  return specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>, &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>);
}

{
  return specialized OntologyNode.javaClassName.getter((void (*)(void))&type metadata accessor for DomainOntologyNode);
}

{
  return specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue>, &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue> and conformance TerminalOntologyNode<A>);
}

{
  return specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>, &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue> and conformance TerminalOntologyNode<A>);
}

{
  return specialized OntologyNode.javaClassName.getter((void (*)(void))&type metadata accessor for AddressOntologyNode.PersonPlaceNode);
}

unint64_t specialized OntologyNode.javaClassName.getter(uint64_t *a1, unint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  lazy protocol witness table accessor for type TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue> and conformance TerminalOntologyNode<A>(a2, a1);
  uint64_t v4 = dispatch thunk of OntologyNode.name.getter();
  specialized Collection.first.getter(v4, v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    Swift::String v8 = Character.uppercased()();
    uint64_t countAndFlagsBits = v8._countAndFlagsBits;
    object = v8._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  v11._uint64_t countAndFlagsBits = countAndFlagsBits;
  v11._object = object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = dispatch thunk of OntologyNode.name.getter();
  specialized Collection.dropFirst(_:)(1, v12, v13);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

unint64_t specialized OntologyNode.javaClassName.getter(void (*a1)(void))
{
  a1(0);
  uint64_t v1 = dispatch thunk of OntologyNode.name.getter();
  specialized Collection.first.getter(v1, v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  if (v4)
  {
    Swift::String v5 = Character.uppercased()();
    uint64_t countAndFlagsBits = v5._countAndFlagsBits;
    object = v5._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  v8._uint64_t countAndFlagsBits = countAndFlagsBits;
  v8._object = object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = dispatch thunk of OntologyNode.name.getter();
  specialized Collection.dropFirst(_:)(1, v9, v10);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t variable initialization expression of ShareETAPromptForContactStrategy.locationSearchIntent()
{
  return 0;
}

uint64_t variable initialization expression of TrafficIncidentHandleIntentStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of AnswerETAFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

ValueMetadata *default argument 1 of AnswerETAFlow.init(with:checkNavigation:)()
{
  return &type metadata for AssistantProperties;
}

uint64_t variable initialization expression of SaveParkingLocationBaseFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

id variable initialization expression of CATService.bundle()
{
  type metadata accessor for CATService();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = [self bundleForClass:ObjCClassFromMetadata];

  return v1;
}

uint64_t variable initialization expression of CATService.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of RedirectToServerFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of ShareETAContactDisambiguationStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

void *variable initialization expression of ShareETAContactDisambiguationStrategy.disambiguationItems()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of ShareETAContactDisambiguationStrategy.weightedPromptResponseTargets()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_BFBE0;
  if (one-time initialization token for referenceNode != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>, &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v0 + 40) = v1;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once();
  }
  *(void *)(v0 + 48) = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>, &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v0 + 56) = v2;
  type metadata accessor for AddressOntologyNode.PersonPlaceNode();
  swift_allocObject();
  AddressOntologyNode.PersonPlaceNode.init(name:multicardinal:)();
  unint64_t v3 = specialized OntologyNode.javaClassName.getter((void (*)(void))&type metadata accessor for AddressOntologyNode.PersonPlaceNode);
  uint64_t v5 = v4;
  swift_release();
  *(void *)(v0 + 64) = v3;
  *(void *)(v0 + 72) = v5;
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  unint64_t v6 = specialized OntologyNode.javaClassName.getter((void (*)(void))&type metadata accessor for AddressOntologyNode.OccupantNode);
  uint64_t v8 = v7;
  swift_release();
  *(void *)(v0 + 80) = v6;
  *(void *)(v0 + 88) = v8;
  static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter();
  unint64_t v9 = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<String>, &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
  uint64_t v11 = v10;
  swift_release();
  *(void *)(v0 + 96) = v9;
  *(void *)(v0 + 104) = v11;
  type metadata accessor for PersonOntologyNode();
  static PersonOntologyNode.personFullNameNode.getter();
  unint64_t v12 = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<String>, &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
  uint64_t v14 = v13;
  swift_release();
  *(void *)(v0 + 112) = v12;
  *(void *)(v0 + 120) = v14;
  return v0;
}

uint64_t default argument 0 of AddressOntologyNode.PersonPlaceNode.init(name:multicardinal:)()
{
  return 0x6C506E6F73726570;
}

uint64_t default argument 4 of ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)()
{
  type metadata accessor for CATService();
  uint64_t v0 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v0 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v0 + 16) = 1;
  return v0;
}

uint64_t variable initialization expression of ShareETAFlowDelegate.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of ShareETAAceViewProvider.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of ShareETAContextProvider.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of ShareETATemplatingService.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of DeleteParkingLocationBaseFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of ContactHandleResolver.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t default argument 0 of ContactHandleResolver.init(contactService:)()
{
  return ContactService.init()();
}

uint64_t variable initialization expression of TrafficIncidentContinueInAppPunchoutStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t default argument 5 of static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:_:)()
{
  return 1;
}

uint64_t variable initialization expression of AnswerAltitudeFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of ContactResolutionFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of ContactResolutionFlow.exitValue()
{
  return 0;
}

uint64_t variable initialization expression of ContactResolutionFlow.contactResolverConfig()
{
  uint64_t v0 = type metadata accessor for RecommenderType();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SearchSuggestedContacts();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ContactResolverDomain();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  static Locale.current.getter();
  static ContactResolverDomain.all.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for SearchSuggestedContacts.ifOnlyMatchIsSuggested(_:), v4);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for RecommenderType.mlRecommender(_:), v0);
  return ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)();
}

uint64_t default argument 4 of ContactResolutionFlow.init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for FlowHelperImpl;
  a1[4] = (uint64_t)&protocol witness table for FlowHelperImpl;
  uint64_t v2 = swift_allocObject();
  *a1 = v2;
  return FlowHelperImpl.init()((void *)(v2 + 16));
}

uint64_t variable initialization expression of StopShareETAFlowDelegate.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of StopShareETAContextProvider.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of StopShareETATemplatingService.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of FlowSelector.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of RetrieveParkingLocationBaseFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of EndNavigationFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of ParkingCommon.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of SaveParkingLocationUnsupportedValueStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of UnsupportedRequestFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of RetrieveParkingBaseRCHStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of TrafficIncidentUnsupportedValueStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of RetrieveParkingHandleIntentStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of LocationSearchIntent.domainOntologyNode()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for domainNode);
}

uint64_t variable initialization expression of GeoFlowDelegatePlugin.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t default argument 0 of GeoFlowDelegatePlugin.init(with:)()
{
  static Device.current.getter();
  uint64_t v8 = type metadata accessor for GeoRCHFlowFactoryImpl();
  uint64_t v9 = &protocol witness table for GeoRCHFlowFactoryImpl;
  uint64_t v7 = swift_allocObject();
  uint64_t v10 = static DialogHelper.globals.getter();
  static AceService.currentAsync.getter();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for CATService();
  uint64_t v0 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v0 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v11 = v0;
  type metadata accessor for FlowSelector();
  uint64_t v2 = swift_allocObject();
  outlined init with copy of FlowHelperImpl((uint64_t)v6, (uint64_t)v5);
  uint64_t v3 = specialized FlowSelector.init(with:)(v5, v2);
  outlined destroy of FlowHelperImpl((uint64_t)v6);
  return v3;
}

uint64_t variable initialization expression of DeleteParkingHandleIntentStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of LocationSearchIntentBuilder.noun()
{
  return 8;
}

uint64_t variable initialization expression of LocationSearchIntentBuilder.verb()
{
  return 10;
}

uint64_t variable initialization expression of LocationSearchIntentBuilder.incidentType()
{
  return 9;
}

uint64_t variable initialization expression of LocationSearchIntentBuilder.confirmation()
{
  return 3;
}

uint64_t variable initialization expression of LocationSearchIntentBuilder.firstName()
{
  return 0;
}

unint64_t variable initialization expression of LocationSearchIntentBuilder.locationSearchVerbMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue)>);
  uint64_t v0 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue))
             - 8);
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_BFBE0;
  unint64_t v4 = v3 + v2;
  uint64_t v5 = v0[14];
  uint64_t v6 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.unknown(_:);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb();
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104);
  v8(v4, v6, v7);
  *(unsigned char *)(v4 + v5) = 0;
  uint64_t v9 = v0[14];
  v8(v4 + v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.share(_:), v7);
  *(unsigned char *)(v4 + v1 + v9) = 1;
  uint64_t v10 = v0[14];
  v8(v4 + 2 * v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.stopShare(_:), v7);
  *(unsigned char *)(v4 + 2 * v1 + v10) = 2;
  uint64_t v11 = v0[14];
  v8(v4 + 3 * v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.report(_:), v7);
  *(unsigned char *)(v4 + 3 * v1 + v11) = 3;
  uint64_t v12 = v0[14];
  v8(v4 + 4 * v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.confirmReport(_:), v7);
  *(unsigned char *)(v4 + 4 * v1 + v12) = 5;
  unint64_t v13 = v4 + 5 * v1;
  uint64_t v14 = v0[14];
  v8(v13, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.clearReport(_:), v7);
  *(unsigned char *)(v13 + v14) = 4;
  return specialized Dictionary.init(dictionaryLiteral:)(v3, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue), &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb);
}

unint64_t variable initialization expression of LocationSearchIntentBuilder.locationSearchNounMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue)>);
  uint64_t v0 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue))
             - 8);
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_BFBF0;
  unint64_t v4 = v3 + v2;
  uint64_t v5 = v0[14];
  uint64_t v6 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchNoun.unknown(_:);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun();
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104);
  v8(v4, v6, v7);
  *(unsigned char *)(v4 + v5) = 0;
  unint64_t v9 = v4 + v1;
  uint64_t v10 = v0[14];
  v8(v9, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchNoun.eta(_:), v7);
  *(unsigned char *)(v9 + v10) = 6;
  return specialized Dictionary.init(dictionaryLiteral:)(v3, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue), &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun);
}

unint64_t variable initialization expression of LocationSearchIntentBuilder.locationSearchConfirmationMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue)>);
  uint64_t v0 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue))
             - 8);
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v0 + 80);
  uint64_t v3 = 2 * v1;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_BFBD0;
  unint64_t v5 = v4 + v2;
  uint64_t v6 = v0[14];
  uint64_t v7 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.yes(_:);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation();
  unint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);
  v9(v5, v7, v8);
  *(unsigned char *)(v5 + v6) = 0;
  unint64_t v10 = v5 + v1;
  uint64_t v11 = v0[14];
  v9(v10, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.no(_:), v8);
  *(unsigned char *)(v10 + v11) = 1;
  unint64_t v12 = v5 + v3;
  uint64_t v13 = v0[14];
  v9(v12, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.cancel(_:), v8);
  *(unsigned char *)(v12 + v13) = 2;
  return specialized Dictionary.init(dictionaryLiteral:)(v4, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue), &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation);
}

unint64_t variable initialization expression of LocationSearchIntentBuilder.locationSearchIncidentTypeMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue)>);
  uint64_t v0 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue))
             - 8);
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v0 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_BFC00;
  unint64_t v3 = v18 + v2;
  uint64_t v4 = v0[14];
  uint64_t v5 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.accident(_:);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType();
  uint64_t v7 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104);
  v7(v3, v5, v6);
  *(unsigned char *)(v3 + v4) = 0;
  uint64_t v8 = v0[14];
  v7(v3 + v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.hazard(_:), v6);
  *(unsigned char *)(v3 + v1 + v8) = 2;
  uint64_t v9 = v0[14];
  v7(v3 + 2 * v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.incident(_:), v6);
  *(unsigned char *)(v3 + 2 * v1 + v9) = 1;
  uint64_t v10 = v0[14];
  v7(v3 + 3 * v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.laneClosed(_:), v6);
  *(unsigned char *)(v3 + 3 * v1 + v10) = 5;
  uint64_t v11 = v0[14];
  v7(v3 + 4 * v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.problem(_:), v6);
  *(unsigned char *)(v3 + 4 * v1 + v11) = 8;
  uint64_t v12 = v0[14];
  v7(v3 + 5 * v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.redLightCamera(_:), v6);
  *(unsigned char *)(v3 + 5 * v1 + v12) = 7;
  uint64_t v13 = v0[14];
  v7(v3 + 6 * v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.roadClosed(_:), v6);
  *(unsigned char *)(v3 + 6 * v1 + v13) = 6;
  uint64_t v14 = v0[14];
  v7(v3 + 7 * v1, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.roadwork(_:), v6);
  *(unsigned char *)(v3 + 7 * v1 + v14) = 4;
  unint64_t v15 = v3 + 8 * v1;
  uint64_t v16 = v0[14];
  v7(v15, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.speedCheck(_:), v6);
  *(unsigned char *)(v15 + v16) = 3;
  return specialized Dictionary.init(dictionaryLiteral:)(v18, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue), &demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType);
}

uint64_t variable initialization expression of LocationFetchFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of LocationFetchFlow.exitValue()
{
  type metadata accessor for RuntimeError();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000019;
  *(void *)(v0 + 24) = 0x80000000000C6CD0;
  lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, (void (*)(uint64_t))type metadata accessor for RuntimeError);
  uint64_t result = swift_allocError();
  *unint64_t v2 = v0;
  return result;
}

uint64_t variable initialization expression of TrafficIncidentNeedsDisambiguationStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of TrafficIncidentContinueInAppPunchoutStrategy.catService()
{
  return CATService.init(withMode:)(1);
}

uint64_t variable initialization expression of TrafficIncidentNeedsDisambiguationStrategy.weightedPromptResponseTargets()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_BFBD0;
  if (one-time initialization token for incidentTypeNode != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue>, &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v0 + 40) = v1;
  if (one-time initialization token for referenceNode != -1) {
    swift_once();
  }
  *(void *)(v0 + 48) = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>, &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v0 + 56) = v2;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once();
  }
  *(void *)(v0 + 64) = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>, &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v0 + 72) = v3;
  return v0;
}

uint64_t variable initialization expression of ShareETABaseFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t default argument 0 of TemplatingResult.getDialogAsSimpleOutputFlow(_:)@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  a1[3] = (uint64_t)&type metadata for FlowHelperImpl;
  a1[4] = (uint64_t)&protocol witness table for FlowHelperImpl;
  uint64_t v2 = swift_allocObject();
  *a1 = v2;

  return outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, v2 + 16);
}

uint64_t variable initialization expression of LocalSearchIntent.domainOntologyNode()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for domainNode);
}

uint64_t variable initialization expression of LocationSearchIntent.domainOntologyNode(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t variable initialization expression of DeleteParkingBaseRCHStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of SaveParkingBaseRCHStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of TrafficIncidentBaseFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of TrafficIncidentRequestSupportedCheckFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of TrafficIncidentRequestSupportedCheckFlow.exitValue()
{
  type metadata accessor for RuntimeError();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD00000000000002CLL;
  *(void *)(v0 + 24) = 0x80000000000C6DD0;
  lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, (void (*)(uint64_t))type metadata accessor for RuntimeError);
  uint64_t result = swift_allocError();
  *uint64_t v2 = v0;
  return result;
}

uint64_t variable initialization expression of SaveParkingHandleIntentStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of ShareETAContactConfirmationStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of FlowHelperImpl.catService()
{
  return CATService.init(withMode:)(0);
}

uint64_t variable initialization expression of ShareETAContactConfirmationStrategy.weightedPromptResponseTargets()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_BFBD0;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>, &lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>);
  *(void *)(v0 + 40) = v1;
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  unint64_t v2 = specialized OntologyNode.javaClassName.getter((void (*)(void))&type metadata accessor for AddressOntologyNode.OccupantNode);
  uint64_t v4 = v3;
  swift_release();
  *(void *)(v0 + 48) = v2;
  *(void *)(v0 + 56) = v4;
  static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter();
  unint64_t v5 = specialized OntologyNode.javaClassName.getter(&demangling cache variable for type metadata for TerminalOntologyNode<String>, &lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
  uint64_t v7 = v6;
  swift_release();
  *(void *)(v0 + 64) = v5;
  *(void *)(v0 + 72) = v7;
  return v0;
}

uint64_t variable initialization expression of TrafficIncidentBaseRCHStrategy.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t variable initialization expression of WhereAmIFlow.logObject()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance INPersonHandleLabel(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance INPersonHandleLabel(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance INPersonHandleLabel(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance INPersonHandleLabel(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance INPersonHandleLabel@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance INPersonHandleType(void *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance INTrafficIncidentType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance INIntentSlotValueType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance INTrafficIncidentType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for AFLocationServiceErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);

  return Error<>._domain.getter(a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for AFLocationServiceErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);

  return Error<>._code.getter(a1, v2);
}

uint64_t protocol witness for Error._userInfo.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for AFLocationServiceErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return *v0;
}

uint64_t protocol witness for _BridgedStoredNSError.init(_nsError:) in conformance related decl 'e' for AFLocationServiceErrorCode@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSComparisonResult(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance INShareETAMediumOptions(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance INIntentSlotValueType@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for AFLocationServiceErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for AFLocationServiceErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for AFLocationServiceErrorCode(void *a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for AFLocationServiceErrorCode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance INPersonHandleLabel@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance INPersonHandleLabel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance INPersonHandleLabel(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel, type metadata accessor for INPersonHandleLabel);
  uint64_t v3 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel, type metadata accessor for INPersonHandleLabel);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for AFLocationServiceErrorCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance INPersonHandleLabel(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance INPersonHandleLabel(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance INPersonHandleLabel(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance INPersonHandleLabel()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance INPersonHandleLabel()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance INPersonHandleLabel()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = result;
    if (result)
    {
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v1;
    }
    else
    {
      return (uint64_t)_swiftEmptyArrayStorage;
    }
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType();
  lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType and conformance Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType and conformance Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType);
}

{
  uint64_t v2;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation();
  lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation and conformance Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation and conformance Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation);
}

{
  uint64_t v2;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun();
  lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchNoun and conformance Apple_Parsec_Siri_V2alpha_LocationSearchNoun, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun, &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchNoun and conformance Apple_Parsec_Siri_V2alpha_LocationSearchNoun, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun, (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun);
}

{
  uint64_t v2;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb();
  lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchVerb and conformance Apple_Parsec_Siri_V2alpha_LocationSearchVerb, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb, &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationSearchVerb and conformance Apple_Parsec_Siri_V2alpha_LocationSearchVerb, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb, (uint64_t)&protocol conformance descriptor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(__int16 a1)
{
  Hasher.init(_seed:)();
  FlowSelector.FlowSelectorKey.hash(into:)((uint64_t)v4, a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  BOOL v13;

  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v3 + 48);
    do
    {
      BOOL v11 = (void *)(v10 + 16 * v6);
      uint64_t v12 = v11[1];
      if (v12)
      {
        if (a2)
        {
          uint64_t v13 = *v11 == a1 && v12 == a2;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            return v6;
          }
        }
      }
      else if (!a2)
      {
        return v6;
      }
      unint64_t v6 = (v6 + 1) & v9;
    }
    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    unint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      outlined destroy of AnyHashable((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  unint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  double result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (double result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            double result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(__int16 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = 8 * (char)a1;
    uint64_t v7 = *(void *)((char *)&unk_C0478 + v6);
    uint64_t v8 = *(void *)((char *)&unk_C04C8 + v6);
    uint64_t v9 = SHIBYTE(a1);
    do
    {
      uint64_t v10 = (char *)(*(void *)(v2 + 48) + 2 * v4);
      uint64_t v11 = v10[1];
      uint64_t v12 = 8 * *v10;
      if (*(void *)((char *)&unk_C0478 + v12) == v7 && *(void *)((char *)&unk_C04C8 + v12) == v8)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0) {
          goto LABEL_3;
        }
      }
      if (qword_C0518[v11] == qword_C0518[v9] && qword_C0558[v11] == qword_C0558[v9])
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v4;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16) {
        return v4;
      }
LABEL_3:
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  void *v31;
  long long v32;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String?, [INPerson]>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    BOOL v30 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v16 = v15 | (v13 << 6);
      }
      else
      {
        unint64_t v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v17 >= v30) {
          goto LABEL_36;
        }
        int64_t v18 = v31[v17];
        ++v13;
        if (!v18)
        {
          int64_t v13 = v17 + 1;
          if (v17 + 1 >= v30) {
            goto LABEL_36;
          }
          int64_t v18 = v31[v13];
          if (!v18)
          {
            unint64_t v19 = v17 + 2;
            if (v19 >= v30)
            {
LABEL_36:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v31 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v13 >= v30) {
                  goto LABEL_36;
                }
                int64_t v18 = v31[v13];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v19;
          }
        }
LABEL_21:
        unint64_t v10 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      int64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      uint64_t v32 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v16);
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 16 * v16 + 8);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      if (v21)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          unint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v11 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v14) = v32;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v20;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned char *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  char *v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  uint64_t v35;
  long long v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FlowSelector.FlowSelectorKey, (_:)>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = v2;
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    int64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (char *)(*(void *)(v5 + 48) + 2 * v20);
    BOOL v30 = *v29;
    uint64_t v31 = v29[1];
    long long v36 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
    if ((a2 & 1) == 0) {
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (unsigned char *)(*(void *)(v7 + 48) + 2 * v17);
    *int64_t v18 = v30;
    v18[1] = v31;
    *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v33;
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v22, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v3);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *int64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *int64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  Swift::Int v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FlowSelector.FlowSelectorKey, (_:)>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 2 * v15;
    uint64_t v17 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(_WORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return String.subscript.getter();
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  unint64_t v6 = String.index(_:offsetBy:limitedBy:)();
  if (v7) {
    unint64_t v6 = v5;
  }
  if (4 * v3 < v6 >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with take of CATType(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t sub_119F4()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t outlined init with copy of FlowHelperImpl(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of FlowHelperImpl(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type LocationServices and conformance LocationServices()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationServices and conformance LocationServices;
  if (!lazy protocol witness table cache variable for type LocationServices and conformance LocationServices)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationServices and conformance LocationServices);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShareETA(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v7 = a2[2];
        a1[1] = a2[1];
        a1[2] = v7;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
      case 8u:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
      case 0xAu:
        *a1 = *a2;
        swift_retain();
        uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                     + 48);
        uint64_t v11 = (char *)a1 + v10;
        unint64_t v12 = (char *)a2 + v10;
        uint64_t v13 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (directInvocation: Bool, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                     + 48);
        unint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
      case 9u:
      case 0xBu:
        uint64_t v18 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for ShareETA(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
    case 2:
    case 8:
      return swift_release();
    case 3:
    case 10:
      swift_release();
      long long v3 = &demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking);
      goto LABEL_7;
    case 4:
      long long v3 = &demangling cache variable for type metadata for (directInvocation: Bool, behaviourAfterSpeaking: BehaviorAfterSpeaking);
LABEL_7:
      a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(v3) + 48);
      goto LABEL_8;
    case 6:
    case 9:
    case 11:
LABEL_8:
      uint64_t v4 = type metadata accessor for BehaviorAfterSpeaking();
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      uint64_t result = v5(a1, v4);
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for ShareETA(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v6 = a2[2];
      a1[1] = a2[1];
      a1[2] = v6;
      swift_retain();
      goto LABEL_8;
    case 2u:
    case 8u:
      *a1 = *a2;
      swift_retain();
      goto LABEL_8;
    case 3u:
    case 0xAu:
      *a1 = *a2;
      swift_retain();
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                  + 48);
      uint64_t v8 = (char *)a1 + v7;
      int64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for BehaviorAfterSpeaking();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      goto LABEL_8;
    case 4u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (directInvocation: Bool, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                   + 48);
      unint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for BehaviorAfterSpeaking();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      goto LABEL_8;
    case 6u:
    case 9u:
    case 0xBu:
      uint64_t v15 = type metadata accessor for BehaviorAfterSpeaking();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for ShareETA(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShareETA((uint64_t)a1, type metadata accessor for ShareETA);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_retain();
        goto LABEL_9;
      case 2u:
      case 8u:
        *a1 = *a2;
        swift_retain();
        goto LABEL_9;
      case 3u:
      case 0xAu:
        *a1 = *a2;
        swift_retain();
        uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                    + 48);
        uint64_t v7 = (char *)a1 + v6;
        uint64_t v8 = (char *)a2 + v6;
        uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
        goto LABEL_9;
      case 4u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (directInvocation: Bool, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                     + 48);
        uint64_t v11 = (char *)a1 + v10;
        unint64_t v12 = (char *)a2 + v10;
        uint64_t v13 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        goto LABEL_9;
      case 6u:
      case 9u:
      case 0xBu:
        uint64_t v14 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for ShareETA(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for ShareETA);
}

void *initializeWithTake for ShareETA(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 0xAu:
      *a1 = *a2;
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                  + 48);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      goto LABEL_6;
    case 4u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (directInvocation: Bool, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                   + 48);
      uint64_t v11 = (char *)a1 + v10;
      unint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for BehaviorAfterSpeaking();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      goto LABEL_6;
    case 6u:
    case 9u:
    case 0xBu:
      uint64_t v14 = type metadata accessor for BehaviorAfterSpeaking();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithTake for ShareETA(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShareETA((uint64_t)a1, type metadata accessor for ShareETA);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 0xAu:
        *a1 = *a2;
        uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                    + 48);
        uint64_t v7 = (char *)a1 + v6;
        uint64_t v8 = (char *)a2 + v6;
        uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
        goto LABEL_7;
      case 4u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (directInvocation: Bool, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                     + 48);
        uint64_t v11 = (char *)a1 + v10;
        unint64_t v12 = (char *)a2 + v10;
        uint64_t v13 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
        goto LABEL_7;
      case 6u:
      case 9u:
      case 0xBu:
        uint64_t v14 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for ShareETA()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ShareETA()
{
  uint64_t v6 = &unk_BFD70;
  uint64_t v7 = &unk_BFD88;
  uint64_t v8 = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for BehaviorAfterSpeaking();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    uint64_t v9 = &v5;
    swift_getTupleTypeLayout2();
    uint64_t v10 = &v4;
    uint64_t v11 = &unk_BFDA0;
    uint64_t v12 = v2;
    uint64_t v13 = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v14 = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t v15 = v2;
    swift_getTupleTypeLayout2();
    uint64_t v16 = &v3;
    uint64_t v17 = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContactResolution(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    swift_retain();
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for BehaviorAfterSpeaking();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for ContactResolution(uint64_t a1)
{
  swift_release();
  uint64_t v2 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
              + 48);
  uint64_t v3 = type metadata accessor for BehaviorAfterSpeaking();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *initializeWithCopy for ContactResolution(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
              + 48);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *assignWithCopy for ContactResolution(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
              + 48);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *initializeWithTake for ContactResolution(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
              + 48);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for ContactResolution(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
              + 48);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactResolution(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking));
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ContactResolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking));
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, a2, a3, v6);
}

uint64_t type metadata accessor for ContactResolution(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for ContactResolution);
}

uint64_t type metadata completion function for ContactResolution(uint64_t a1)
{
  uint64_t result = type metadata accessor for BehaviorAfterSpeaking();
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = v4;
  }
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for RetrieveParkingLocation()
{
  return &type metadata for RetrieveParkingLocation;
}

ValueMetadata *type metadata accessor for DeleteParkingLocation()
{
  return &type metadata for DeleteParkingLocation;
}

unint64_t destroy for RetrieveParkingLocation(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RetrieveParkingLocation(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *assignWithCopy for RetrieveParkingLocation(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_retain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v6 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v6;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for RetrieveParkingLocation(void *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(void *)(a2 + 16);
    return a1;
  }
  *a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  a1[1] = *(void *)(a2 + 8);
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RetrieveParkingLocation(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RetrieveParkingLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for SaveParkingLocation(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SaveParkingLocation()
{
  return &type metadata for SaveParkingLocation;
}

void *initializeBufferWithCopyOfBuffer for TrafficIncident(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
        break;
      case 2:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1:
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for TrafficIncident(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 3)
  {
    uint64_t v3 = type metadata accessor for BehaviorAfterSpeaking();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  else if (result == 2 || result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for TrafficIncident(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
      break;
    case 2:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      break;
    case 1:
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for TrafficIncident(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShareETA((uint64_t)a1, type metadata accessor for TrafficIncident);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 2:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1:
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t outlined destroy of ShareETA(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for TrafficIncident(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for TrafficIncident);
}

uint64_t type metadata accessor for ShareETA(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithTake for TrafficIncident(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = type metadata accessor for BehaviorAfterSpeaking();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for TrafficIncident(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShareETA((uint64_t)a1, type metadata accessor for TrafficIncident);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = type metadata accessor for BehaviorAfterSpeaking();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareETA(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ShareETA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t type metadata completion function for TrafficIncident()
{
  uint64_t result = type metadata accessor for BehaviorAfterSpeaking();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Common(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for Common(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for Common(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for Common(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  return assignWithTake for Common(a1, a2, a3, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t getEnumTagSinglePayload for Common(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Common(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Common()
{
  return &type metadata for Common;
}

uint64_t outlined copy of GeoLabel(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_retain();
  }
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for GeoLabel(uint64_t a1)
{
  return outlined consume of GeoLabel(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of GeoLabel(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_release();
  }
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GeoLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of GeoLabel(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for GeoLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of GeoLabel(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of GeoLabel(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for GeoLabel(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of GeoLabel(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLabel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for GeoLabel(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for GeoLabel(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GeoLabel()
{
  return &type metadata for GeoLabel;
}

unint64_t destroy for LocationSearch(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LocationSearch(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for LocationSearch(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for LocationSearch(void *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *(void *)a2;
  swift_release();
  a1[1] = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationSearch(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LocationSearch(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for LocationSearch(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for LocationSearch(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for LocationSearch()
{
  return &type metadata for LocationSearch;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationControl(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for NavigationControl(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for NavigationControl(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for NavigationControl(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  return assignWithTake for Common(a1, a2, a3, (void (*)(void))&_swift_release);
}

unint64_t *assignWithTake for Common(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v5 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v5 < 0xFFFFFFFF)
  {
    a4();
LABEL_5:
    *a1 = v5;
    return a1;
  }
  *a1 = v5;
  a4();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationControl(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NavigationControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for NavigationControl(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationControl()
{
  return &type metadata for NavigationControl;
}

void *initializeBufferWithCopyOfBuffer for Compass(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for Compass()
{
  return swift_release();
}

void *assignWithCopy for Compass(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for Compass(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Compass(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Compass(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Compass()
{
  return &type metadata for Compass;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LocationServices(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LocationServices(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x14A18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for LocationServices(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for LocationServices(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LocationServices()
{
  return &type metadata for LocationServices;
}

void type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(uint64_t a1)
{
}

uint64_t base witness table accessor for Equatable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Error in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for CustomNSError in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for Hashable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode, type metadata accessor for AFLocationServiceErrorCode);
}

void type metadata accessor for AFLocationServiceErrorCode(uint64_t a1)
{
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode, type metadata accessor for AFLocationServiceErrorCode);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode, type metadata accessor for AFLocationServiceErrorCode);
}

uint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

unint64_t outlined copy of NavigationControl(unint64_t result)
{
  if (result >= 3) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of LocationSearch(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

unint64_t outlined copy of Common(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of SaveParkingLocation(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with copy of TrafficIncident(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<INIntentSlotValueType, String>);
  int v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    uint64_t v10 = (void *)(v3[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    Swift::UInt v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue> and conformance TerminalOntologyNode<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of Mirror.DisplayStyle?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of (label: String?, value: Any)?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for INTrafficIncidentType(uint64_t a1)
{
}

void type metadata accessor for INPersonHandleLabel(uint64_t a1)
{
}

void type metadata accessor for INIntentSlotValueType(uint64_t a1)
{
}

void type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for Equatable in INIntentSlotValueType()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType, type metadata accessor for INIntentSlotValueType);
}

uint64_t base witness table accessor for RawRepresentable in INPersonHandleLabel()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel, type metadata accessor for INPersonHandleLabel);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in INPersonHandleLabel()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel, type metadata accessor for INPersonHandleLabel);
}

uint64_t base witness table accessor for Equatable in INPersonHandleLabel()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel, type metadata accessor for INPersonHandleLabel);
}

uint64_t base witness table accessor for Equatable in INTrafficIncidentType()
{
  return lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError(&lazy protocol witness table cache variable for type INTrafficIncidentType and conformance INTrafficIncidentType, type metadata accessor for INTrafficIncidentType);
}

void AnswerETAIntentResponse.code.setter()
{
}

uint64_t FlowHelperImpl.device.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1, a1);
}

uint64_t FlowHelperImpl.device.setter(long long *a1)
{
  __swift_destroy_boxed_opaque_existential_0Tm(v1);

  return outlined init with take of CATType(a1, v1);
}

uint64_t (*FlowHelperImpl.device.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t FlowHelperImpl.rchFlowFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 40, a1);
}

uint64_t FlowHelperImpl.rchFlowFactory.setter(long long *a1)
{
  uint64_t v3 = v1 + 40;
  __swift_destroy_boxed_opaque_existential_0Tm(v3);

  return outlined init with take of CATType(a1, v3);
}

uint64_t (*FlowHelperImpl.rchFlowFactory.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t FlowHelperImpl.catGlobals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FlowHelperImpl.catGlobals.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*FlowHelperImpl.catGlobals.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t FlowHelperImpl.aceService.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 88, a1);
}

uint64_t FlowHelperImpl.aceService.setter(long long *a1)
{
  uint64_t v3 = v1 + 88;
  __swift_destroy_boxed_opaque_existential_0Tm(v3);

  return outlined init with take of CATType(a1, v3);
}

uint64_t (*FlowHelperImpl.aceService.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t FlowHelperImpl.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 128, a1);
}

uint64_t outlined init with copy of DeviceState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t FlowHelperImpl.outputPublisher.setter(long long *a1)
{
  uint64_t v3 = v1 + 128;
  __swift_destroy_boxed_opaque_existential_0Tm(v3);

  return outlined init with take of CATType(a1, v3);
}

uint64_t (*FlowHelperImpl.outputPublisher.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t FlowHelperImpl.catService.getter()
{
  return swift_retain();
}

uint64_t FlowHelperImpl.catService.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 168) = a1;
  return result;
}

uint64_t (*FlowHelperImpl.catService.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t one-time initialization function for instance()
{
  return FlowHelperImpl.init()(static FlowHelperImpl.instance);
}

uint64_t FlowHelperImpl.init()@<X0>(void *a1@<X8>)
{
  static Device.current.getter();
  uint64_t v2 = type metadata accessor for GeoRCHFlowFactoryImpl();
  uint64_t v3 = swift_allocObject();
  a1[8] = v2;
  a1[9] = &protocol witness table for GeoRCHFlowFactoryImpl;
  a1[5] = v3;
  a1[10] = static DialogHelper.globals.getter();
  static AceService.currentAsync.getter();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for CATService();
  uint64_t v4 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v4 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  *(void *)(v4 + 32) = result;
  *(unsigned char *)(v4 + 16) = 0;
  a1[21] = v4;
  return result;
}

void *FlowHelperImpl.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return static FlowHelperImpl.instance;
}

uint64_t static FlowHelperImpl.instance.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, a1);
}

uint64_t default argument 5 of FlowHelperImpl.init(device:rchFlowFactory:catGlobals:aceService:outputPublisher:catService:)()
{
  type metadata accessor for CATService();
  uint64_t v0 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v0 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v0 + 16) = 0;
  return v0;
}

uint64_t FlowHelperImpl.init(device:rchFlowFactory:catGlobals:aceService:outputPublisher:catService:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, long long *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  outlined init with take of CATType(a1, a7);
  outlined init with take of CATType(a2, a7 + 40);
  *(void *)(a7 + 80) = a3;
  outlined init with take of CATType(a4, a7 + 88);
  uint64_t result = outlined init with take of CATType(a5, a7 + 128);
  *(void *)(a7 + 168) = a6;
  return result;
}

uint64_t FlowHelper.makeDialogOnlyOutput(model:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v5[18] = v6;
  v5[19] = *(void *)(v6 - 8);
  v5[20] = swift_task_alloc();
  return _swift_task_switch(FlowHelper.makeDialogOnlyOutput(model:), 0, 0);
}

uint64_t FlowHelper.makeDialogOnlyOutput(model:)()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[14];
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 128))(v2, v1);
  v0[21] = v3;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 80))(v2, v1);
  v0[22] = v4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 112)
                                                         + **(int **)(*(void *)v3 + 112));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[23] = v5;
  void *v5 = v0;
  v5[1] = FlowHelper.makeDialogOnlyOutput(model:);
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[13];
  return v9(v6, v7, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = FlowHelper.makeDialogOnlyOutput(model:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = FlowHelper.makeDialogOnlyOutput(model:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v5 = *(uint64_t **)(v0 + 96);
  (*(void (**)(void))(*(void *)(v0 + 120) + 32))(*(void *)(v0 + 112));
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  uint64_t v7 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 72) = 0u;
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  v5[3] = v7;
  v5[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of (label: String?, value: Any)?(v0 + 56, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t initializeBufferWithCopyOfBuffer for FlowHelperImpl(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for FlowHelperImpl(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  __swift_destroy_boxed_opaque_existential_0Tm(a1 + 40);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(a1 + 88);
  __swift_destroy_boxed_opaque_existential_0Tm(a1 + 128);

  return swift_release();
}

uint64_t initializeWithCopy for FlowHelperImpl(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 88, a2 + 88, v7);
  long long v9 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 128, a2 + 128);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for FlowHelperImpl(uint64_t *a1, uint64_t *a2)
{
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 11, a2 + 11);
  __swift_assign_boxed_opaque_existential_1(a1 + 16, a2 + 16);
  a1[21] = a2[21];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy176_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for FlowHelperImpl(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_0Tm(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  __swift_destroy_boxed_opaque_existential_0Tm(a1 + 128);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  uint64_t v7 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FlowHelperImpl(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FlowHelperImpl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowHelperImpl()
{
  return &type metadata for FlowHelperImpl;
}

id GeoFlowDelegatePlugin.logObject.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t GeoFlowDelegatePlugin.flowSelector.getter()
{
  return swift_retain();
}

uint64_t GeoFlowDelegatePlugin.flowSelector.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*GeoFlowDelegatePlugin.flowSelector.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t ShareETAPromptForContactStrategy.weightedPromptResponseTargets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShareETAPromptForContactStrategy.locationSearchIntent.getter()
{
  return swift_retain();
}

uint64_t ShareETAPromptForContactStrategy.locationSearchIntent.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*ShareETAPromptForContactStrategy.locationSearchIntent.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAPromptForContactStrategy.directInvocation.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ShareETAPromptForContactStrategy.directInvocation.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 48) = a1;
  return result;
}

uint64_t (*ShareETAPromptForContactStrategy.directInvocation.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAPromptForContactStrategy.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of DeviceState(v1 + 56, a1);
}

uint64_t ShareETAPromptForContactStrategy.flowHelper.setter(long long *a1)
{
  uint64_t v3 = v1 + 56;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, v3);
  return swift_endAccess();
}

uint64_t (*ShareETAPromptForContactStrategy.flowHelper.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAPromptForContactStrategy.isPOMMES.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t ShareETAPromptForContactStrategy.isPOMMES.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 96) = a1;
  return result;
}

uint64_t (*ShareETAPromptForContactStrategy.isPOMMES.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAPromptForContactStrategy.catModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ShareETA(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin32ShareETAPromptForContactStrategy_catModel, a1);
}

uint64_t outlined init with copy of ShareETA(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareETA(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ShareETAPromptForContactStrategy.__allocating_init(isPommes:directInvocation:flowHelper:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for ShareETA(0);
  __chkstk_darwin(v7);
  long long v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of DeviceState(a3, (uint64_t)v16);
  uint64_t v10 = &v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (directInvocation: Bool, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                   + 48)];
  *long long v9 = a2;
  uint64_t v11 = enum case for BehaviorAfterSpeaking.listen(_:);
  uint64_t v12 = type metadata accessor for BehaviorAfterSpeaking();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v10, v11, v12);
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, unsigned char *))(v3 + 264))(a1, a2, v16, v9);
  __swift_destroy_boxed_opaque_existential_0Tm(a3);
  return v13;
}

uint64_t ShareETAPromptForContactStrategy.__allocating_init(isPommes:directInvocation:flowHelper:catModel:)(char a1, char a2, long long *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  ShareETAPromptForContactStrategy.init(isPommes:directInvocation:flowHelper:catModel:)(a1, a2, a3, a4);
  return v8;
}

uint64_t ShareETAPromptForContactStrategy.init(isPommes:directInvocation:flowHelper:catModel:)(char a1, char a2, long long *a3, uint64_t a4)
{
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v4 + 16) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for CATService();
  uint64_t v9 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v9 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v9 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v9 + 16) = 0;
  *(void *)(v4 + 24) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_BFBD0;
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  unint64_t v12 = specialized OntologyNode.javaClassName.getter();
  uint64_t v14 = v13;
  swift_release();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter();
  unint64_t v15 = specialized OntologyNode.javaClassName.getter();
  uint64_t v17 = v16;
  swift_release();
  *(void *)(v11 + 48) = v15;
  *(void *)(v11 + 56) = v17;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once();
  }
  swift_retain();
  unint64_t v18 = specialized OntologyNode.javaClassName.getter();
  uint64_t v20 = v19;
  swift_release();
  *(void *)(v11 + 64) = v18;
  *(void *)(v11 + 72) = v20;
  *(void *)(v4 + 32) = v11;
  *(void *)(v4 + 40) = 0;
  *(unsigned char *)(v4 + 48) = 0;
  *(unsigned char *)(v4 + 96) = 0;
  swift_beginAccess();
  *(unsigned char *)(v4 + 96) = a1 & 1;
  swift_beginAccess();
  *(unsigned char *)(v4 + 48) = a2 & 1;
  outlined init with take of CATType(a3, v4 + 56);
  outlined init with take of ShareETA(a4, v4 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin32ShareETAPromptForContactStrategy_catModel);
  return v4;
}

uint64_t ShareETAPromptForContactStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Parse();
  uint64_t v28 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v27 = (id *)((char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for Input();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = v2;
  uint64_t v11 = *(NSObject **)(v2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v24 = v5;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v25 = a2;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v23 = a1;
    *(_DWORD *)uint64_t v14 = 136315138;
    v22[1] = v14 + 4;
    lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v30);
    a1 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v5 = v24;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_0, v11, v12, "actionForInput %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v17 = v27;
  Input.parse.getter();
  int v18 = (*(uint64_t (**)(id *, uint64_t))(v28 + 88))(v17, v5);
  if (v18 == enum case for Parse.NLv3IntentOnly(_:) || (int v19 = v18, v18 == enum case for Parse.directInvocation(_:)))
  {
    static os_log_type_t.info.getter();
  }
  else
  {
    if (v18 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(id *, uint64_t))(v28 + 96))(v17, v5);

      static os_log_type_t.info.getter();
      os_log(_:dso:log:_:_:)();
      return (*(uint64_t (**)(uint64_t))(*(void *)v26 + 280))(a1);
    }
    int v21 = enum case for Parse.uso(_:);
    static os_log_type_t.info.getter();
    if (v19 != v21)
    {
      os_log(_:dso:log:_:_:)();
      static ActionForInput.ignore()();
      return (*(uint64_t (**)(id *, uint64_t))(v28 + 8))(v17, v5);
    }
  }
  os_log(_:dso:log:_:_:)();
  (*(void (**)(uint64_t))(*(void *)v26 + 280))(a1);
  return (*(uint64_t (**)(id *, uint64_t))(v28 + 8))(v17, v5);
}

uint64_t ShareETAPromptForContactStrategy.handleParse(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v32 = a2;
  uint64_t v33 = type metadata accessor for Input();
  uint64_t v5 = *(void *)(v33 - 8);
  uint64_t v6 = __chkstk_darwin(v33);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v30 - v9;
  uint64_t v11 = type metadata accessor for Parse();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for GeoParse();
  Input.parse.getter();
  static GeoParse.getDomainIntent(parse:)((uint64_t)v14, (uint64_t)v36);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  outlined init with copy of GeoIntent?((uint64_t)v36, (uint64_t)v35);
  if (!v35[3])
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v35, &demangling cache variable for type metadata for GeoIntent?);
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
  type metadata accessor for LocationSearchIntent();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    uint64_t v21 = v33;
    os_log_type_t v22 = static os_log_type_t.info.getter();
    uint64_t v23 = *(NSObject **)(v3 + 16);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v21);
    if (os_log_type_enabled(v23, v22))
    {
      uint64_t v24 = swift_slowAlloc();
      v35[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      os_log_t v31 = (os_log_t)(v24 + 4);
      Input.parse.getter();
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v33);
      _os_log_impl(&dword_0, v23, v22, "ignoring parse %s as it is not LocationSearchIntent", (uint8_t *)v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v21);
    }
    static ActionForInput.ignore()();
    return outlined destroy of (label: String?, value: Any)?((uint64_t)v36, &demangling cache variable for type metadata for GeoIntent?);
  }
  if ((*(unsigned __int8 (**)(void))(*(void *)v34 + 152))() == 2)
  {
    os_log_type_t v15 = static os_log_type_t.info.getter();
    unint64_t v16 = *(NSObject **)(v3 + 16);
    uint64_t v17 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a1, v33);
    os_log_t v31 = v16;
    if (os_log_type_enabled(v16, v15))
    {
      int v18 = (uint8_t *)swift_slowAlloc();
      v35[0] = swift_slowAlloc();
      *(_DWORD *)int v18 = 136315138;
      v30[1] = v18 + 4;
      Input.parse.getter();
      uint64_t v19 = String.init<A>(describing:)();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v33);
      _os_log_impl(&dword_0, v31, v15, "cancelling for parse %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v17);
    }
    static ActionForInput.cancel()();
  }
  else
  {
    unint64_t v27 = *(void (**)(uint64_t))(*(void *)v2 + 176);
    uint64_t v28 = swift_retain();
    v27(v28);
    static ActionForInput.handle()();
  }
  swift_release();
  return outlined destroy of (label: String?, value: Any)?((uint64_t)v36, &demangling cache variable for type metadata for GeoIntent?);
}

uint64_t ShareETAPromptForContactStrategy.parseValueResponse(input:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
  v2[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Input();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(ShareETAPromptForContactStrategy.parseValueResponse(input:), 0, 0);
}

uint64_t ShareETAPromptForContactStrategy.parseValueResponse(input:)()
{
  unint64_t v26 = v0;
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[4];
  os_log_type_t v6 = static os_log_type_t.info.getter();
  uint64_t v7 = *(NSObject **)(v5 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v1, v4);
  if (os_log_type_enabled(v7, v6))
  {
    log = v7;
    uint64_t v9 = v0[7];
    uint64_t v8 = v0[8];
    uint64_t v23 = v0[6];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v23);
    _os_log_impl(&dword_0, log, v6, "parse response value %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v13 = swift_slowDealloc();
  }
  else
  {
    uint64_t v13 = (*(uint64_t (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v0[4] + 168))(v13);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = v0[5];
    (*(void (**)(uint64_t))(*(void *)v14 + 208))(v14);
    uint64_t v17 = type metadata accessor for OccupantIntentNode();
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
    outlined destroy of (label: String?, value: Any)?(v16, &demangling cache variable for type metadata for OccupantIntentNode?);
    if (v18 == 1)
    {
      static os_log_type_t.info.getter();
      os_log(_:dso:log:_:_:)();
      swift_release();
      uint64_t v15 = 0;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(uint64_t))v0[1];
    return v19(v15);
  }
  else
  {
    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type Errors and conformance Errors();
    swift_allocError();
    *(void *)uint64_t v21 = 0xD000000000000021;
    *(void *)(v21 + 8) = 0x80000000000C6FD0;
    *(unsigned char *)(v21 + 16) = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t ShareETAPromptForContactStrategy.makePromptForValue()(uint64_t a1)
{
  v2[40] = a1;
  v2[41] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[42] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[43] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ActivityType();
  v2[44] = v3;
  v2[45] = *(void *)(v3 - 8);
  v2[46] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PommesContext.Source();
  v2[47] = v4;
  v2[48] = *(void *)(v4 - 8);
  v2[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v2[50] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  v2[51] = v5;
  v2[52] = *(void *)(v5 - 8);
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  v2[55] = v6;
  v2[56] = *(void *)(v6 - 8);
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  v2[59] = v7;
  v2[60] = *(void *)(v7 - 8);
  v2[61] = swift_task_alloc();
  return _swift_task_switch(ShareETAPromptForContactStrategy.makePromptForValue(), 0, 0);
}

uint64_t ShareETAPromptForContactStrategy.makePromptForValue()()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin32ShareETAPromptForContactStrategy_catModel;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 144))();
  v0[62] = v3;
  v0[5] = type metadata accessor for ShareETA(0);
  v0[6] = (uint64_t)&protocol witness table for ShareETA;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 2);
  uint64_t v5 = outlined init with copy of ShareETA(v2, (uint64_t)boxed_opaque_existential_0);
  uint64_t v6 = *(void (**)(uint64_t))(*(void *)v1 + 216);
  unint64_t v7 = (*(void *)v1 + 216) & 0xFFFFFFFFFFFFLL | 0x80BC000000000000;
  v0[63] = (uint64_t)v6;
  v0[64] = v7;
  v6(v5);
  uint64_t v8 = v0[10];
  uint64_t v9 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 80))(v8, v9);
  v0[65] = v10;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 7));
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v3 + 112)
                                                            + **(int **)(*(void *)v3 + 112));
  uint64_t v11 = (void *)swift_task_alloc();
  v0[66] = (uint64_t)v11;
  void *v11 = v0;
  v11[1] = ShareETAPromptForContactStrategy.makePromptForValue();
  uint64_t v12 = v0[61];
  return v14(v12, v0 + 2, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = ShareETAPromptForContactStrategy.makePromptForValue();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = ShareETAPromptForContactStrategy.makePromptForValue();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id ShareETAPromptForContactStrategy.makePromptForValue()()
{
  uint64_t v64 = v0;
  uint64_t v1 = (void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 328);
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  os_log_type_t v3 = static os_log_type_t.info.getter();
  uint64_t v4 = *(NSObject **)(v2 + 16);
  os_log_type_t v5 = v3;
  if (os_log_type_enabled(v4, v3))
  {
    uint64_t v6 = *(void *)(v0 + 328);
    swift_retain();
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 67109120;
    *(_DWORD *)(v0 + 544) = (*(uint64_t (**)(void))(*(void *)v6 + 192))() & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_0, v4, v5, "directInvocation: %{BOOL}d", v7, 8u);
    swift_slowDealloc();
  }
  uint64_t v8 = *(void *)(v0 + 328);
  uint64_t v9 = NLContextUpdate.init()();
  char v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 192))(v9);
  uint64_t v11 = *(void *)(v0 + 464);
  if (v10)
  {
    uint64_t v12 = *(void *)(v0 + 432);
    uint64_t v62 = *(void *)(v0 + 424);
    uint64_t v14 = *(void *)(v0 + 408);
    uint64_t v13 = *(void *)(v0 + 416);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_C0600;
    type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
    swift_allocObject();
    uint64_t v15 = UsoTaskBuilder_noVerb_common_Person.init()();
    type metadata accessor for UsoEntityBuilder_common_Person();
    swift_allocObject();
    UsoEntityBuilder_common_Person.init()();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    static Siri_Nlu_External_SystemPrompted.from(_:)(v15, v12);
    Siri_Nlu_External_SystemDialogAct.init()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v62, v12, v14);
    Siri_Nlu_External_SystemDialogAct.prompted.setter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_release();
    uint64_t v1 = (void *)(v0 + 96);
    swift_release();
    NLContextUpdate.nluSystemDialogActs.setter();
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 448);
    uint64_t v16 = *(void *)(v0 + 456);
    uint64_t v18 = *(void *)(v0 + 440);
    static GeoNLContextUtils.makeNLContextFor(weightedPromptResponseTargets:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40))(v11, v16, v18);
    type metadata accessor for MachineUtteranceBuilder();
    swift_allocObject();
    MachineUtteranceBuilder.init()();
    if (one-time initialization token for nounNode != -1) {
      swift_once();
    }
    TerminalOntologyNode.name.getter();
    dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
    swift_bridgeObjectRelease();
    swift_release();
    if (one-time initialization token for verbNode != -1) {
      swift_once();
    }
    TerminalOntologyNode.name.getter();
    dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
    swift_bridgeObjectRelease();
    swift_release();
    dispatch thunk of MachineUtteranceBuilder.build()();
    swift_release();
    NLContextUpdate.nlInput.setter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    uint64_t v20 = os_log_type_enabled(v4, v19);
    if (v20)
    {
      uint64_t v21 = *(void *)(v0 + 328);
      swift_retain_n();
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v22 = 136315138;
      v63[0] = v23;
      char v24 = (*(uint64_t (**)(void))(*(void *)v21 + 240))();
      BOOL v25 = (v24 & 1) == 0;
      if (v24) {
        uint64_t v26 = 1702195828;
      }
      else {
        uint64_t v26 = 0x65736C6166;
      }
      if (v25) {
        unint64_t v27 = 0xE500000000000000;
      }
      else {
        unint64_t v27 = 0xE400000000000000;
      }
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v1 = (void *)(v0 + 96);
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v4, v19, "updating nl context if true, isPommes: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v20 = swift_slowDealloc();
    }
    if ((*(uint64_t (**)(uint64_t))(**(void **)(v0 + 328) + 240))(v20))
    {
      uint64_t v28 = *(void *)(v0 + 400);
      (*(void (**)(void, void, void))(*(void *)(v0 + 384) + 104))(*(void *)(v0 + 392), enum case for PommesContext.Source.pluginDefined(_:), *(void *)(v0 + 376));
      PommesContext.init(source:domain:listenAfterSpeaking:)();
      uint64_t v29 = type metadata accessor for PommesContext();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 0, 1, v29);
      NLContextUpdate.pommesContext.setter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v4, v30))
      {
        uint64_t v32 = *(void *)(v0 + 456);
        uint64_t v31 = *(void *)(v0 + 464);
        uint64_t v33 = *(void *)(v0 + 440);
        uint64_t v34 = *(void *)(v0 + 448);
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        v63[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136315138;
        swift_beginAccess();
        uint64_t v36 = v31;
        uint64_t v1 = (void *)(v0 + 96);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v32, v36, v33);
        uint64_t v37 = String.init<A>(describing:)();
        *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v4, v30, "updated nl context with pommes context. nl context = %s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
  }
  uint64_t v40 = *(void *)(v0 + 360);
  uint64_t v39 = *(void *)(v0 + 368);
  uint64_t v41 = *(void *)(v0 + 352);
  static SiriKitEventSender.current.getter();
  __swift_project_boxed_opaque_existential_1(v1, *(void *)(v0 + 120));
  (*(void (**)(uint64_t, void, uint64_t))(v40 + 104))(v39, enum case for ActivityType.promptForData(_:), v41);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
  id result = [(id)swift_getObjCClassFromMetadata() typeName];
  if (result)
  {
    uint64_t v43 = result;
    uint64_t v54 = *(void (**)(uint64_t))(v0 + 504);
    uint64_t v59 = *(void *)(v0 + 488);
    uint64_t v60 = *(void *)(v0 + 480);
    uint64_t v61 = *(void *)(v0 + 472);
    uint64_t v56 = *(void *)(v0 + 464);
    uint64_t v44 = *(void *)(v0 + 448);
    uint64_t v57 = *(void *)(v0 + 440);
    uint64_t v45 = *(void *)(v0 + 344);
    uint64_t v55 = *(void *)(v0 + 336);
    long long v58 = *(uint64_t **)(v0 + 320);
    type metadata accessor for SiriKitEvent();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v46 = enum case for SiriKitReliabilityCodes.normal(_:);
    uint64_t v47 = type metadata accessor for SiriKitReliabilityCodes();
    uint64_t v48 = *(void *)(v47 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 104))(v45, v46, v47);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    uint64_t v49 = __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
    v54(v49);
    uint64_t v50 = *(void *)(v0 + 160);
    uint64_t v51 = *(void *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v50);
    (*(void (**)(uint64_t, uint64_t))(v51 + 32))(v50, v51);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v55, v56, v57);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v55, 0, 1, v57);
    uint64_t v52 = type metadata accessor for AceOutput();
    *(_OWORD *)(v0 + 232) = 0u;
    *(void *)(v0 + 248) = 0;
    *(_OWORD *)(v0 + 216) = 0u;
    v58[3] = v52;
    v58[4] = (uint64_t)&protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_0(v58);
    static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    outlined destroy of (label: String?, value: Any)?(v0 + 216, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v55, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 176);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v56, v57);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v53();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ShareETAPromptForContactStrategy.makePromptForValue()()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter();
}

uint64_t ShareETAPromptForContactStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[28] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ActivityType();
  v2[29] = v4;
  v2[30] = *(void *)(v4 - 8);
  v2[31] = swift_task_alloc();
  return _swift_task_switch(ShareETAPromptForContactStrategy.makeFlowCancelledResponse(), 0, 0);
}

id ShareETAPromptForContactStrategy.makeFlowCancelledResponse()()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  uint64_t v3 = v0[29];
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  static SiriKitEventSender.current.getter();
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ActivityType.canceled(_:), v3);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
  id result = [(id)swift_getObjCClassFromMetadata() typeName];
  if (result)
  {
    os_log_type_t v5 = result;
    uint64_t v6 = v0[28];
    uint64_t v7 = v0[23];
    type metadata accessor for SiriKitEvent();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = enum case for SiriKitReliabilityCodes.rejectParameter(_:);
    uint64_t v9 = type metadata accessor for SiriKitReliabilityCodes();
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104))(v6, v8, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    uint64_t v11 = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 144))(v11);
    v0[32] = v12;
    v0[10] = &type metadata for Common;
    v0[11] = &protocol witness table for Common;
    v0[7] = 0;
    uint64_t v13 = static DialogHelper.globals.getter();
    v0[33] = v13;
    uint64_t v16 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v12 + 112)
                                                             + **(int **)(*(void *)v12 + 112));
    uint64_t v14 = (void *)swift_task_alloc();
    v0[34] = v14;
    *uint64_t v14 = v0;
    v14[1] = ShareETAPromptForContactStrategy.makeFlowCancelledResponse();
    uint64_t v15 = v0[27];
    return (id)v16(v15, v0 + 7, v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ShareETAPromptForContactStrategy.makeFlowCancelledResponse()()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = ShareETAPromptForContactStrategy.makeFlowCancelledResponse();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 56);
    uint64_t v3 = ShareETAPromptForContactStrategy.makeFlowCancelledResponse();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v5 = *(uint64_t **)(v0 + 176);
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  static Device.current.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v7 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 152) = 0u;
  *(void *)(v0 + 168) = 0;
  *(_OWORD *)(v0 + 136) = 0u;
  v5[3] = v7;
  v5[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v5);
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of (label: String?, value: Any)?(v0 + 136, &demangling cache variable for type metadata for FlowActivity?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  outlined destroy of (label: String?, value: Any)?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ShareETAPromptForContactStrategy.makeErrorResponse(_:)()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(ShareETAPromptForContactStrategy.makeErrorResponse(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  lazy protocol witness table accessor for type Errors and conformance Errors();
  swift_allocError();
  *(void *)uint64_t v1 = 0xD000000000000029;
  *(void *)(v1 + 8) = 0x80000000000C7050;
  *(unsigned char *)(v1 + 16) = 0;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ShareETAPromptForContactStrategy.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  outlined destroy of ShareETA(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin32ShareETAPromptForContactStrategy_catModel);
  return v0;
}

uint64_t ShareETAPromptForContactStrategy.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 7));
  outlined destroy of ShareETA((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin32ShareETAPromptForContactStrategy_catModel);
  uint64_t v1 = *((unsigned int *)*v0 + 12);
  uint64_t v2 = *((unsigned __int16 *)*v0 + 26);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance ShareETAPromptForContactStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShareETAPromptForContactStrategy(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v2 + 288) + **(int **)(*(void *)v2 + 288));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  void *v5 = v3;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShareETAPromptForContactStrategy;
  return v7(a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShareETAPromptForContactStrategy(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance ShareETAPromptForContactStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 296) + **(int **)(*(void *)v1 + 296));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence() in conformance ShareETAPromptForContactStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 304) + **(int **)(*(void *)v1 + 304));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeErrorResponse(_:) in conformance ShareETAPromptForContactStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 312) + **(int **)(*(void *)v2 + 312));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t outlined init with take of ShareETA(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareETA(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    type metadata accessor for Input();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

uint64_t outlined init with copy of GeoIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Errors and conformance Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type Errors and conformance Errors;
  if (!lazy protocol witness table cache variable for type Errors and conformance Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors and conformance Errors);
  }
  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for OS_os_log(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined destroy of ShareETA(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShareETA(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AD58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_1ADA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1ADF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_1AE44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1AE98@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1AEE8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 200))(*a1);
}

uint64_t sub_1AF30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 216))();
}

uint64_t sub_1AF74(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 224))(v4);
}

uint64_t sub_1AFD0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 240))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B020(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 248))(*a1);
}

uint64_t ObjC metadata update function for ShareETAPromptForContactStrategy()
{
  return type metadata accessor for ShareETAPromptForContactStrategy();
}

uint64_t type metadata accessor for ShareETAPromptForContactStrategy()
{
  uint64_t result = type metadata singleton initialization cache for ShareETAPromptForContactStrategy;
  if (!type metadata singleton initialization cache for ShareETAPromptForContactStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ShareETAPromptForContactStrategy()
{
  uint64_t result = type metadata accessor for ShareETA(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t GeoContact.index.getter()
{
  return *(void *)v0;
}

uint64_t GeoContact.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeoContact.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeoTrafficIncident.driPayload.getter()
{
  return *(void *)(v0 + 40);
}

void GeoTrafficIncident.hash(into:)()
{
  Hasher._combine(_:)(*v0);
  if (v0[2])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v0[5]);
}

uint64_t GeoTrafficIncident.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aIndex_1[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoTrafficIncident.CodingKeys()
{
  return GeoTrafficIncident.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoTrafficIncident.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GeoTrafficIncident.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GeoTrafficIncident.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance GeoTrafficIncident.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoTrafficIncident.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoTrafficIncident.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoTrafficIncident.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoTrafficIncident.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int GeoTrafficIncident.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  if (v0[2])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v0[5]);
  return Hasher._finalize()();
}

double GeoTrafficIncident.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized GeoTrafficIncident.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

void __swiftcall GeoTrafficIncident.init(index:id:displayName:driPayload:)(GeoFlowDelegatePlugin::GeoTrafficIncident *__return_ptr retstr, Swift::Int index, Swift::String_optional id, Swift::String displayName, Swift::Int driPayload)
{
  retstr->index = index;
  retstr->id = id;
  retstr->displayName = displayName;
  retstr->driPayload = driPayload;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoTrafficIncident(void *a1)
{
  return GeoTrafficIncident.encode(to:)(a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance GeoTrafficIncident@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void protocol witness for Hashable.hash(into:) in conformance GeoTrafficIncident()
{
  Swift::UInt v1 = v0[2];
  Swift::UInt v2 = v0[5];
  Hasher._combine(_:)(*v0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeoTrafficIncident()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[2];
  Swift::UInt v3 = v0[5];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GeoTrafficIncident(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return specialized static GeoTrafficIncident.__derived_struct_equals(_:_:)(v7, v8);
}

BOOL specialized static GeoTrafficIncident.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[2];
  if (!v4)
  {
    if (!v5)
    {
LABEL_13:
      if (a1[3] == a2[3] && a1[4] == a2[4]) {
        return a1[5] == a2[5];
      }
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL result = 0;
      if (v10) {
        return a1[5] == a2[5];
      }
      return result;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  if (a1[1] == a2[1] && v4 == v5) {
    goto LABEL_13;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v7) {
    goto LABEL_13;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys);
  }
  return result;
}

uint64_t specialized GeoTrafficIncident.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F6C796150697264 && a2 == 0xEA00000000006461)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized GeoTrafficIncident.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoTrafficIncident.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoTrafficIncident.CodingKeys and conformance GeoTrafficIncident.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v26 = 1;
  uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v23 = v10;
  char v25 = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  v21[0] = v13;
  char v24 = 3;
  swift_bridgeObjectRetain();
  v21[1] = 0;
  uint64_t v22 = v15;
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  uint64_t v17 = v22;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v19 = v23;
  *a2 = v9;
  a2[1] = v19;
  uint64_t v20 = v21[0];
  a2[2] = v12;
  a2[3] = v20;
  a2[4] = v17;
  a2[5] = v16;
  return result;
}

unint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoTrafficIncident and conformance GeoTrafficIncident()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident;
  if (!lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoTrafficIncident and conformance GeoTrafficIncident);
  }
  return result;
}

uint64_t destroy for GeoTrafficIncident()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GeoTrafficIncident(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GeoTrafficIncident(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GeoTrafficIncident(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoTrafficIncident(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoTrafficIncident(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoTrafficIncident()
{
  return &type metadata for GeoTrafficIncident;
}

uint64_t getEnumTagSinglePayload for GeoTrafficIncident.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GeoTrafficIncident.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C1D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for GeoTrafficIncident.CodingKeys()
{
  return &unk_E48E0;
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 24, a1);
}

uint64_t TrafficIncidentHandleIntentStrategy.__allocating_init(with:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v2 + 24);
  return v2;
}

uint64_t TrafficIncidentHandleIntentStrategy.init(with:)(long long *a1)
{
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v1 + 24);
  return v1;
}

uint64_t TrafficIncidentHandleIntentStrategy.makeContinueInAppResponse(app:intent:intentResponse:)(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentHandleIntentStrategy.makeContinueInAppResponse(app:intent:intentResponse:), 0, 0);
}

uint64_t TrafficIncidentHandleIntentStrategy.makeContinueInAppResponse(app:intent:intentResponse:)()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(uint64_t **)(v0 + 56);
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v2[3] = v4;
  v2[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v2);
  static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of (label: String?, value: Any)?(v0 + 16, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 24);
  return v0;
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 24);

  return _swift_deallocClassInstance(v0, 64, 7);
}

unint64_t lazy protocol witness table accessor for type TrafficIncidentHandleIntentStrategy and conformance TrafficIncidentHandleIntentStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type TrafficIncidentHandleIntentStrategy and conformance TrafficIncidentHandleIntentStrategy;
  if (!lazy protocol witness table cache variable for type TrafficIncidentHandleIntentStrategy and conformance TrafficIncidentHandleIntentStrategy)
  {
    type metadata accessor for TrafficIncidentHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrafficIncidentHandleIntentStrategy and conformance TrafficIncidentHandleIntentStrategy);
  }
  return result;
}

uint64_t type metadata accessor for TrafficIncidentHandleIntentStrategy()
{
  return self;
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.authenticationPolicy.getter in conformance TrafficIncidentHandleIntentStrategy()
{
  return HandleIntentFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *int v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *int v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *int v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *int v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *int v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *int v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance TrafficIncidentHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *int v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentHandleIntentStrategy();
  *int v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t static GeoNLContextUtils.makeNLContextFor(weightedPromptResponseTargets:)()
{
  NLContextUpdate.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_BFBD0;
  *(void *)(v0 + 32) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter();
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter();
  *(void *)(v0 + 72) = v3;
  NLContextUpdate.weightedPromptResponseOptions.setter();
  swift_bridgeObjectRetain();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  swift_retain();
  specialized OntologyNode.javaClassName.getter();
  swift_release();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_C0600;
  *(void *)(v4 + 32) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter();
  *(void *)(v4 + 40) = v5;
  NLContextUpdate.weightedPromptAbortValues.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  return NLContextUpdate.currentDomainName.setter();
}

uint64_t one-time initialization function for logObject()
{
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  logObject = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  logObject = result;
  return result;
}

unint64_t specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationSearchIntent.LocationSearchConfirmationValue.Type);
  uint64_t v0 = String.init<A>(describing:)();
  specialized BidirectionalCollection.dropLast(_:)(5, v0, v1, v2);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  Swift::String v4 = String.uppercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(uint64_t a1, uint64_t a2)
{
  NLContextUpdate.init()();
  swift_bridgeObjectRetain();
  NLContextUpdate.disambiguationPromptResponseTargets.setter();
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  swift_retain();
  specialized OntologyNode.javaClassName.getter();
  swift_release();
  NLContextUpdate.disambiguationPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_C0600;
  *(void *)(v3 + 32) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter();
  *(void *)(v3 + 40) = v4;
  NLContextUpdate.disambiguationPromptAbortValues.setter();
  swift_bridgeObjectRetain();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  swift_retain();
  specialized OntologyNode.javaClassName.getter();
  swift_release();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_C0600;
  *(void *)(v5 + 32) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter();
  *(void *)(v5 + 40) = v6;
  NLContextUpdate.weightedPromptAbortValues.setter();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_C0600;
  *(void *)(v7 + 32) = specialized TerminalNodeBoundedSemanticValue<>.javaValue.getter();
  *(void *)(v7 + 40) = v8;
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  if (a2)
  {
    swift_bridgeObjectRetain();
    NLContextUpdate.displayHints.setter();
  }
  return NLContextUpdate.currentDomainName.setter();
}

uint64_t TypedDisambiguationItems.makeDisambiguationItems(locale:_:)(uint64_t a1, void (*a2)(void), uint64_t a3, unint64_t a4, char a5)
{
  if (a5) {
    specialized static DisambiguationListUtils.makeDisambiguationItems(incidentTypes:locale:)(a4);
  }
  else {
    specialized static DisambiguationListUtils.makeDisambiguationItems(persons:locale:)(a4, a1);
  }
  a2();

  return swift_bridgeObjectRelease();
}

uint64_t TypedDisambiguationItems.makeDisambiguationItems(locale:)(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 32) = a3;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  return _swift_task_switch(TypedDisambiguationItems.makeDisambiguationItems(locale:), 0, 0);
}

uint64_t TypedDisambiguationItems.makeDisambiguationItems(locale:)()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 32)) {
    uint64_t v2 = specialized static DisambiguationListUtils.makeDisambiguationItems(incidentTypes:locale:)(v1);
  }
  else {
    uint64_t v2 = specialized static DisambiguationListUtils.makeDisambiguationItems(persons:locale:)(v1, *(void *)(v0 + 16));
  }
  uint64_t v3 = *(uint64_t (**)(void *))(v0 + 8);
  return v3(v2);
}

uint64_t TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:isPommes:isUSO:_:)(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(char *), uint64_t a6, unint64_t a7, char a8)
{
  long long v98 = (void (*)(void, void, void))a7;
  uint64_t v90 = a6;
  uint64_t v92 = a5;
  LODWORD(v96) = a4;
  int v85 = a3;
  uint64_t v88 = a2;
  uint64_t v97 = a1;
  uint64_t v83 = type metadata accessor for PommesContext.Source();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  long long v81 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v10 - 8);
  long long v84 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DisplayHint();
  uint64_t v101 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  long long v95 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  long long v100 = (char *)&v80 - v16;
  __chkstk_darwin(v15);
  uint64_t v99 = (char *)&v80 - v17;
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  char v24 = (char *)&v80 - v23;
  uint64_t v25 = type metadata accessor for NLContextUpdate();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  long long v91 = (char *)&v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  long long v89 = (char *)&v80 - v29;
  static os_log_type_t.info.getter();
  if (one-time initialization token for logObject != -1) {
    swift_once();
  }
  os_log_type_t v30 = logObject;
  os_log(_:dso:log:_:_:)();
  if (a8)
  {
    uint64_t v57 = specialized static GeoNLContextUtils.makeDisplayHints(items:locale:)((unint64_t)v98);
    os_log_type_t v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v58))
    {
      swift_bridgeObjectRetain_n();
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      v104[0] = swift_slowAlloc();
      uint64_t v80 = v26;
      *(_DWORD *)uint64_t v59 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v60 = Array.description.getter();
      uint64_t v86 = v25;
      unint64_t v62 = v61;
      swift_bridgeObjectRelease();
      uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, v104);
      uint64_t v26 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v25 = v86;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v30, v58, "TypedDisambiguationItems IncidentType displayHints are: %s", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    BOOL v63 = v89;
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(v88, v57);
    swift_bridgeObjectRelease();
    v92(v63);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v63, v25);
  }
  else
  {
    if (v96)
    {
      NLContextUpdate.init()();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
      uint64_t v31 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
      unint64_t v32 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
      uint64_t v33 = swift_allocObject();
      uint64_t v96 = v33;
      *(_OWORD *)(v33 + 16) = xmmword_C0600;
      *(void *)&long long v94 = v33 + v32;
      type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
      swift_allocObject();
      uint64_t v34 = UsoTaskBuilder_noVerb_common_Person.init()();
      type metadata accessor for UsoEntityBuilder_common_Person();
      swift_allocObject();
      UsoEntityBuilder_common_Person.init()();
      dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
      static Siri_Nlu_External_SystemPrompted.from(_:)(v34, (uint64_t)v24);
      Siri_Nlu_External_SystemDialogAct.init()();
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v24, v18);
      Siri_Nlu_External_SystemDialogAct.prompted.setter();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v24, v18);
      swift_release();
      swift_release();
      uint64_t v35 = v89;
      NLContextUpdate.nluSystemDialogActs.setter();
      v92(v35);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v25);
    }
    uint64_t v86 = v25;
    unint64_t v36 = (unint64_t)v98;
    specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)((unint64_t)v98);
    uint64_t v87 = specialized static GeoNLContextUtils.makeDisplayHints(persons:locale:handleDisambiguation:)(v36, v97, v37 & 1);
    uint64_t v38 = *(void *)(v87 + 16);
    uint64_t v39 = &lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel;
    if (v38)
    {
      uint64_t v80 = v26;
      uint64_t v40 = v101 + 16;
      uint64_t v41 = *(void (**)(void, void, void))(v101 + 16);
      uint64_t v42 = v87 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
      uint64_t v43 = *(void *)(v101 + 72);
      uint64_t v96 = v101 + 8;
      uint64_t v97 = v43;
      swift_bridgeObjectRetain();
      *(void *)&long long v44 = 136315138;
      long long v94 = v44;
      long long v93 = (char *)&type metadata for Any + 8;
      uint64_t v101 = v40;
      uint64_t v46 = v99;
      uint64_t v45 = v100;
      long long v98 = v41;
      do
      {
        v41(v46, v42, v12);
        os_log_type_t v48 = static os_log_type_t.info.getter();
        uint64_t v49 = v39[226];
        v41(v45, v46, v12);
        uint64_t v50 = (void (*)(char *, char *, uint64_t))v41;
        os_log_type_t v51 = v48;
        if (os_log_type_enabled(v49, v48))
        {
          uint64_t v52 = swift_slowAlloc();
          v104[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v52 = v94;
          v50(v95, v100, v12);
          uint64_t v45 = v100;
          uint64_t v53 = String.init<A>(describing:)();
          *(void *)(v52 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v104);
          swift_bridgeObjectRelease();
          uint64_t v55 = *(void (**)(char *, uint64_t))v96;
          (*(void (**)(char *, uint64_t))v96)(v45, v12);
          _os_log_impl(&dword_0, v49, v51, "TypedDisambiguationItems Contact displayHints are: %s", (uint8_t *)v52, 0xCu);
          swift_arrayDestroy();
          uint64_t v39 = &lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel;
          swift_slowDealloc();
          swift_slowDealloc();
          uint64_t v56 = v99;
          v55(v99, v12);
          uint64_t v46 = v56;
        }
        else
        {
          uint64_t v47 = *(void (**)(char *, uint64_t))v96;
          (*(void (**)(char *, uint64_t))v96)(v45, v12);
          uint64_t v46 = v99;
          v47(v99, v12);
        }
        uint64_t v41 = v98;
        v42 += v97;
        --v38;
      }
      while (v38);
      swift_bridgeObjectRelease();
      uint64_t v26 = v80;
    }
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(v88, v87);
    swift_bridgeObjectRelease();
    uint64_t v65 = v92;
    uint64_t v66 = v86;
    if (v85)
    {
      long long v67 = v39[226];
      os_log_type_t v68 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v67, v68))
      {
        unint64_t v69 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v69 = 0;
        _os_log_impl(&dword_0, v67, v68, "makeContextForConfirmIntent adding pommesContext", v69, 2u);
        swift_slowDealloc();
      }
      (*(void (**)(char *, void, uint64_t))(v82 + 104))(v81, enum case for PommesContext.Source.pluginDefined(_:), v83);
      unint64_t v70 = v84;
      PommesContext.init(source:domain:listenAfterSpeaking:)();
      uint64_t v71 = type metadata accessor for PommesContext();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v70, 0, 1, v71);
      NLContextUpdate.pommesContext.setter();
    }
    os_log_type_t v72 = static os_log_type_t.info.getter();
    v73 = v39[226];
    os_log_type_t v74 = v72;
    if (os_log_type_enabled(v73, v72))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      v104[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v75 = 136315138;
      uint64_t v76 = v91;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v89, v76, v66);
      uint64_t v77 = String.init<A>(describing:)();
      uint64_t v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v73, v74, "nlContext %s", v75, 0xCu);
      swift_arrayDestroy();
      uint64_t v65 = v92;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    uint64_t v79 = v91;
    swift_beginAccess();
    v65(v79);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v79, v66);
  }
}

uint64_t TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 144) = a5;
  *(void *)(v5 + 48) = a3;
  *(void *)(v5 + 56) = a4;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 72) = *(void *)(v6 - 8);
  *(void *)(v5 + 80) = swift_task_alloc();
  *(void *)(v5 + 88) = swift_task_alloc();
  *(void *)(v5 + 96) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DisplayHint();
  *(void *)(v5 + 104) = v7;
  *(void *)(v5 + 112) = *(void *)(v7 - 8);
  *(void *)(v5 + 120) = swift_task_alloc();
  *(void *)(v5 + 128) = swift_task_alloc();
  *(void *)(v5 + 136) = swift_task_alloc();
  return _swift_task_switch(TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:), 0, 0);
}

uint64_t TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:)()
{
  uint64_t v63 = v0;
  unint64_t v1 = (void *)v0;
  static os_log_type_t.info.getter();
  if (one-time initialization token for logObject != -1) {
    swift_once();
  }
  char v2 = *(unsigned char *)(v0 + 144);
  unint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = logObject;
  os_log(_:dso:log:_:_:)();
  uint64_t v5 = *(void *)(v0 + 40);
  if (v2)
  {
    uint64_t v31 = specialized static GeoNLContextUtils.makeDisplayHints(items:locale:)(v3);
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v32))
    {
      swift_bridgeObjectRetain_n();
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v34 = Array.description.getter();
      unint64_t v36 = v35;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v4, v32, "TypedDisambiguationItems IncidentType displayHints are: %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(*(void *)(v0 + 48), v31);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(v3);
    uint64_t v7 = specialized static GeoNLContextUtils.makeDisplayHints(persons:locale:handleDisambiguation:)(v3, v5, v6 & 1);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 + 16);
    uint64_t v56 = (void *)v0;
    if (v9)
    {
      uint64_t v10 = *(void *)(v0 + 112);
      uint64_t v12 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
      v10 += 16;
      uint64_t v11 = v12;
      unint64_t v13 = v7 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
      os_log_type_t v58 = (void (**)(unint64_t, uint64_t))(v10 - 8);
      uint64_t v59 = *(void *)(v10 + 56);
      uint64_t v55 = v7;
      swift_bridgeObjectRetain();
      uint64_t v60 = v12;
      do
      {
        unint64_t v16 = v1[16];
        unint64_t v17 = v1[17];
        uint64_t v18 = v1[13];
        v11(v17, v13, v18);
        os_log_type_t v19 = static os_log_type_t.info.getter();
        uint64_t v20 = logObject;
        v11(v16, v17, v18);
        os_log_type_t v21 = v19;
        BOOL v22 = os_log_type_enabled(v20, v19);
        unint64_t v23 = v1[16];
        unint64_t v24 = v1[17];
        if (v22)
        {
          unint64_t v57 = v1[17];
          unint64_t v25 = v1[15];
          uint64_t v26 = v1[13];
          uint64_t v27 = swift_slowAlloc();
          uint64_t v62 = swift_slowAlloc();
          *(_DWORD *)uint64_t v27 = 136315138;
          v11(v25, v23, v26);
          uint64_t v28 = String.init<A>(describing:)();
          *(void *)(v27 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v62);
          swift_bridgeObjectRelease();
          os_log_type_t v30 = *v58;
          (*v58)(v23, v26);
          _os_log_impl(&dword_0, v20, v21, "TypedDisambiguationItems Contact displayHints are: %s", (uint8_t *)v27, 0xCu);
          swift_arrayDestroy();
          unint64_t v1 = v56;
          swift_slowDealloc();
          swift_slowDealloc();
          v30(v57, v26);
        }
        else
        {
          uint64_t v14 = v1[13];
          uint64_t v15 = *v58;
          (*v58)(v1[16], v14);
          v15(v24, v14);
        }
        uint64_t v11 = v60;
        v13 += v59;
        --v9;
      }
      while (v9);
      uint64_t v8 = v55;
      swift_bridgeObjectRelease();
    }
    uint64_t v38 = v1[11];
    uint64_t v37 = v1[12];
    uint64_t v40 = v1[8];
    uint64_t v39 = v1[9];
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(v1[6], v8);
    swift_bridgeObjectRelease();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    uint64_t v42 = logObject;
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
    v43(v38, v37, v40);
    os_log_type_t v44 = v41;
    BOOL v45 = os_log_type_enabled(v42, v41);
    uint64_t v46 = v1[11];
    if (v45)
    {
      log = v42;
      uint64_t v48 = v1[9];
      uint64_t v47 = v1[10];
      uint64_t v49 = v1[8];
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136315138;
      v43(v47, v46, v49);
      uint64_t v51 = String.init<A>(describing:)();
      v56[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v49);
      _os_log_impl(&dword_0, log, v44, "nlContext %s", v50, 0xCu);
      swift_arrayDestroy();
      unint64_t v1 = v56;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v1[9] + 8))(v1[11], v1[8]);
    }
    (*(void (**)(void, void, void))(v1[9] + 32))(v1[4], v1[12], v1[8]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v53 = (uint64_t (*)(void))v1[1];
  return v53();
}

uint64_t TypedDisambiguationItems.shouldReadItemsInVox.getter(unint64_t a1, char a2)
{
  if (a2) {
    return 1;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of TypedDisambiguationItems(a1, 0);
    if (v4 >= 6) {
      goto LABEL_4;
    }
    return 1;
  }
  if (*(uint64_t *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)) < 6) {
    return 1;
  }
LABEL_4:

  return specialized static RecipientDisambiguationHelper.hasAllSameRecipientsWithHandles(recipients:)(a1);
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  char v2 = (unint64_t *)isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    char v6 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, (uint64_t)v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    char v2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v7, v4, (uint64_t)v2);
    swift_slowDealloc();
  }
  return v2;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v13 = v12 | (v5 << 6);
LABEL_18:
    unint64_t v16 = *(void *)(*(void *)(a3 + 56) + 8 * v13);
    if (v16 >> 62)
    {
      uint64_t v18 = result;
      uint64_t v19 = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v18;
      a2 = v19;
      if (v17 >= 2) {
        goto LABEL_4;
      }
    }
    else if (*(uint64_t *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8)) >= 2)
    {
LABEL_4:
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      BOOL v11 = __OFADD__(v4++, 1);
      if (v11) {
        goto LABEL_30;
      }
    }
  }
  BOOL v11 = __OFADD__(v5++, 1);
  if (v11)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v5 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v5);
  if (v14)
  {
LABEL_17:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v13 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_18;
  }
  int64_t v15 = v5 + 1;
  if (v5 + 1 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v5 + 2;
  if (v5 + 2 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v5 + 3;
  if (v5 + 3 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_16:
    int64_t v5 = v15;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_17;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String?, [INPerson]>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  os_log_type_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_43;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_44;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    if (v19)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain();
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    os_log_type_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *os_log_type_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t specialized static GeoNLContextUtils.makeDisplayHints(persons:locale:handleDisambiguation:)(unint64_t a1, uint64_t a2, int a3)
{
  int v227 = a3;
  uint64_t v210 = a2;
  uint64_t v201 = type metadata accessor for OrdinalDisplayHintsBuilder();
  uint64_t v200 = *(void *)(v201 - 8);
  __chkstk_darwin(v201);
  v199 = (char *)v196 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  v198 = (char *)v196 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  v197 = (char *)v196 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v209 = (char *)v196 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v207 = (char *)v196 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v206 = (char *)v196 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v220 = (char *)v196 - v17;
  __chkstk_darwin(v16);
  v219 = (char *)v196 - v18;
  uint64_t v242 = type metadata accessor for DisplayHint();
  uint64_t v233 = *(void *)(v242 - 8);
  uint64_t v19 = __chkstk_darwin(v242);
  v216 = (char *)v196 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  v203 = (char *)v196 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v202 = (char *)v196 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v215 = (char *)v196 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v214 = (char *)v196 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v213 = (char *)v196 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v230 = (char *)v196 - v32;
  __chkstk_darwin(v31);
  v229 = (char *)v196 - v33;
  uint64_t v232 = type metadata accessor for SemanticValue();
  uint64_t v228 = *(void *)(v232 - 8);
  uint64_t v34 = __chkstk_darwin(v232);
  v196[1] = (char *)v196 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v34);
  v196[0] = (char *)v196 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v208 = (char *)v196 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v205 = (char *)v196 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v204 = (char *)v196 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v218 = (char *)v196 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  v217 = (char *)v196 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v239 = (char *)v196 - v49;
  __chkstk_darwin(v48);
  *(void *)&long long v245 = (char *)v196 - v50;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v52 = __chkstk_darwin(v51 - 8);
  unint64_t v54 = (unint64_t)v196 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __chkstk_darwin(v52);
  v226 = (char *)v196 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v244 = (char *)v196 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v243 = (void *)((char *)v196 - v60);
  uint64_t v61 = __chkstk_darwin(v59);
  uint64_t v63 = (void *)((char *)v196 - v62);
  __chkstk_darwin(v61);
  uint64_t v65 = (uint64_t)v196 - v64;
  v248 = &_swiftEmptyArrayStorage;
  v246 = &_swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_51;
  }
  uint64_t v66 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  uint64_t v67 = v66;
  while (2)
  {
    unint64_t v234 = v54;
    uint64_t v240 = v67;
    if (!v67)
    {
      swift_bridgeObjectRelease();
      unint64_t v78 = (unint64_t)&_swiftEmptyArrayStorage;
      goto LABEL_24;
    }
    if (v67 < 1)
    {
      __break(1u);
      goto LABEL_135;
    }
    uint64_t v68 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v69 = *(id *)(a1 + 8 * v68 + 32);
      }
      unint64_t v70 = v69;
      id v71 = [v69 nameComponents];
      if (v71)
      {
        os_log_type_t v72 = v71;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v73 = type metadata accessor for PersonNameComponents();
        (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v63, 0, 1, v73);
      }
      else
      {
        uint64_t v73 = type metadata accessor for PersonNameComponents();
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v63, 1, 1, v73);
      }
      outlined init with take of PersonNameComponents?((uint64_t)v63, v65);
      type metadata accessor for PersonNameComponents();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 48))(v65, 1, v73))
      {
        outlined destroy of (label: String?, value: Any)?(v65, &demangling cache variable for type metadata for PersonNameComponents?);
LABEL_16:
        swift_bridgeObjectRelease();
        uint64_t v74 = 0;
        unint64_t v75 = 0xE000000000000000;
        goto LABEL_18;
      }
      uint64_t v74 = PersonNameComponents.givenName.getter();
      unint64_t v75 = v76;
      outlined destroy of (label: String?, value: Any)?(v65, &demangling cache variable for type metadata for PersonNameComponents?);
      if (!v75) {
        goto LABEL_16;
      }
LABEL_18:
      swift_bridgeObjectRelease();
      uint64_t v77 = HIBYTE(v75) & 0xF;
      if ((v75 & 0x2000000000000000) == 0) {
        uint64_t v77 = v74 & 0xFFFFFFFFFFFFLL;
      }
      if (v77)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      ++v68;
    }
    while (v240 != v68);
    swift_bridgeObjectRelease();
    unint64_t v78 = (unint64_t)v246;
    unint64_t v54 = v234;
LABEL_24:
    v246 = &_swiftEmptyDictionarySingleton;
    if ((v78 & 0x8000000000000000) != 0 || (v78 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      unint64_t v238 = a1;
      if (v79) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v79 = *(void *)(v78 + 16);
      unint64_t v238 = a1;
      if (v79)
      {
LABEL_27:
        unint64_t v241 = v78 & 0xC000000000000001;
        uint64_t v63 = &_swiftEmptyDictionarySingleton;
        uint64_t v65 = 4;
        long long v236 = xmmword_C0AD0;
        uint64_t v237 = v79;
        while (1)
        {
          id v81 = v241 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v78 + 8 * v65);
          id v82 = v81;
          unint64_t v54 = (unint64_t)v244;
          uint64_t v83 = v65 - 3;
          if (__OFADD__(v65 - 4, 1)) {
            break;
          }
          id v84 = [v81 nameComponents];
          if (v84)
          {
            int v85 = v84;
            static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v86 = type metadata accessor for PersonNameComponents();
            (*(void (**)(unint64_t, void, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v54, 0, 1, v86);
          }
          else
          {
            uint64_t v86 = type metadata accessor for PersonNameComponents();
            (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v54, 1, 1, v86);
          }
          uint64_t v87 = v54;
          uint64_t v88 = (void (*)(void, void, void))v243;
          outlined init with take of PersonNameComponents?(v87, (uint64_t)v243);
          type metadata accessor for PersonNameComponents();
          a1 = 0;
          uint64_t v89 = 0;
          if (!(*(unsigned int (**)(void, uint64_t, uint64_t))(*(void *)(v86 - 8) + 48))(v88, 1, v86))
          {
            a1 = PersonNameComponents.givenName.getter();
            uint64_t v89 = v90;
          }
          outlined destroy of (label: String?, value: Any)?((uint64_t)v88, &demangling cache variable for type metadata for PersonNameComponents?);
          unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v89);
          uint64_t v92 = v63[2];
          BOOL v93 = (v91 & 1) == 0;
          uint64_t v94 = v92 + v93;
          if (__OFADD__(v92, v93)) {
            goto LABEL_49;
          }
          char v95 = v91;
          if (v63[3] < v94)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v94, 1);
            uint64_t v63 = v246;
            unint64_t v96 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v89);
            if ((v95 & 1) != (v97 & 1)) {
              goto LABEL_136;
            }
            unint64_t v54 = v96;
          }
          if (v95)
          {
            swift_bridgeObjectRelease();
            uint64_t v80 = (void *)(v63[7] + 8 * v54);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            a1 = v238;
            if (*(void *)((char *)&dword_10 + (*v80 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                            + (*v80 & 0xFFFFFFFFFFFFFF8)) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t v98 = swift_allocObject();
            *(_OWORD *)(v98 + 16) = v236;
            *(void *)(v98 + 32) = v82;
            uint64_t v247 = v98;
            specialized Array._endMutation()();
            uint64_t v99 = v247;
            v63[(v54 >> 6) + 8] |= 1 << v54;
            long long v100 = (unint64_t *)(v63[6] + 16 * v54);
            *long long v100 = a1;
            v100[1] = v89;
            *(void *)(v63[7] + 8 * v54) = v99;
            uint64_t v101 = v63[2];
            BOOL v102 = __OFADD__(v101, 1);
            uint64_t v103 = v101 + 1;
            if (v102) {
              goto LABEL_50;
            }
            uint64_t v63[2] = v103;
            a1 = v238;
          }
          unint64_t v54 = v234;
          ++v65;
          if (v83 == v237) {
            goto LABEL_54;
          }
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        swift_bridgeObjectRetain();
        uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
        continue;
      }
    }
    break;
  }
  uint64_t v63 = &_swiftEmptyDictionarySingleton;
LABEL_54:
  swift_release();
  v104 = specialized _NativeDictionary.filter(_:)((uint64_t)v63);
  swift_release();
  unint64_t v225 = v104[2];
  swift_release();
  if (!v240)
  {
LABEL_122:
    if (one-time initialization token for referenceNode != -1) {
      goto LABEL_133;
    }
    while (1)
    {
      TerminalOntologyNode.name.getter();
      v183 = v199;
      OrdinalDisplayHintsBuilder.init(referenceNode:)();
      uint64_t v184 = OrdinalDisplayHintsBuilder.build(for:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v200 + 8))(v183, v201);
      specialized Array.append<A>(contentsOf:)(v184);
      uint64_t v186 = v248[2];
      if (!v186)
      {
LABEL_131:
        swift_beginAccess();
        return (uint64_t)v248;
      }
      unint64_t v187 = 0;
      v244 = (char *)(v233 + 16);
      *(void *)&long long v185 = 134218242;
      long long v245 = v185;
      v188 = v216;
      while (1)
      {
        os_log_type_t v189 = static os_log_type_t.info.getter();
        if (one-time initialization token for logObject != -1) {
          swift_once();
        }
        v190 = logObject;
        v191 = v248;
        if (!os_log_type_enabled((os_log_t)logObject, v189)) {
          goto LABEL_125;
        }
        swift_bridgeObjectRetain_n();
        uint64_t v192 = swift_slowAlloc();
        v246 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v192 = v245;
        *(void *)(v192 + 4) = v187;
        *(_WORD *)(v192 + 12) = 2080;
        if (v187 >= v191[2]) {
          break;
        }
        (*(void (**)(char *, unint64_t, uint64_t))(v233 + 16))(v188, (unint64_t)v191+ ((*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80))+ *(void *)(v233 + 72) * v187, v242);
        uint64_t v193 = String.init<A>(describing:)();
        *(void *)(v192 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v193, v194, (uint64_t *)&v246);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v190, v189, "display hint %ld %s", (uint8_t *)v192, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_125:
        if (v186 == ++v187) {
          goto LABEL_131;
        }
      }
      __break(1u);
LABEL_133:
      swift_once();
    }
  }
  if (v240 >= 1)
  {
    unint64_t v224 = a1 & 0xC000000000000001;
    v244 = (char *)(v228 + 16);
    uint64_t v223 = v228 + 32;
    *(void *)&long long v236 = v228 + 56;
    uint64_t v235 = v233 + 32;
    v222 = (void (**)(void, uint64_t))(v228 + 8);
    swift_bridgeObjectRetain();
    uint64_t v105 = 0;
    v106 = &_swiftEmptyArrayStorage;
    long long v221 = xmmword_BFBF0;
    uint64_t v107 = v232;
    while (1)
    {
      uint64_t v237 = v105;
      if (v224) {
        id v108 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v108 = *(id *)(a1 + 8 * v105 + 32);
      }
      v109 = v108;
      INPerson.encodeBase64.getter();
      uint64_t v110 = v245;
      SemanticValue.init(string:label:)();
      v243 = *(void **)v244;
      ((void (*)(char *, uint64_t, uint64_t))v243)(v239, v110, v107);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v106 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v106[2] + 1, 1, (unint64_t)v106);
      }
      unint64_t v112 = v106[2];
      unint64_t v111 = v106[3];
      if (v112 >= v111 >> 1) {
        v106 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v112 + 1, 1, (unint64_t)v106);
      }
      v106[2] = v112 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v228 + 32))((unint64_t)v106+ ((*(unsigned __int8 *)(v228 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80))+ *(void *)(v228 + 72) * v112, v239, v107);
      static os_log_type_t.info.getter();
      if (one-time initialization token for logObject != -1) {
        swift_once();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v113 = swift_allocObject();
      *(_OWORD *)(v113 + 16) = v221;
      *(void *)(v113 + 56) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
      *(void *)(v113 + 64) = lazy protocol witness table accessor for type INPerson and conformance NSObject();
      *(void *)(v113 + 32) = v109;
      id v114 = v109;
      uint64_t v115 = INPerson.encodeBase64.getter();
      uint64_t v117 = v116;
      *(void *)(v113 + 96) = &type metadata for String;
      *(void *)(v113 + 104) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v113 + 72) = v115;
      *(void *)(v113 + 80) = v117;
      v118 = v114;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      id v119 = [v114 displayName];
      uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v122 = v121;

      swift_bridgeObjectRelease();
      uint64_t v123 = HIBYTE(v122) & 0xF;
      if ((v122 & 0x2000000000000000) == 0) {
        uint64_t v123 = v120 & 0xFFFFFFFFFFFFLL;
      }
      if (v123)
      {
        v231 = v106;
        v124 = v219;
        ((void (*)(char *, void, uint64_t))v243)(v219, v245, v107);
        v125 = *(void (**)(char *, void, uint64_t, uint64_t))v236;
        (*(void (**)(char *, void, uint64_t, uint64_t))v236)(v124, 0, 1, v107);
        unint64_t v241 = (unint64_t)v118;
        id v126 = [v118 displayName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        type metadata accessor for PersonOntologyNode();
        static PersonOntologyNode.personFullNameNode.getter();
        specialized OntologyNode.javaClassName.getter();
        swift_release();
        SemanticValue.init(string:label:nodeClass:)();
        DisplayHint.init(idValue:displayValue:)();
        unint64_t v127 = (unint64_t)v248;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v127 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v127 + 16) + 1, 1, v127);
        }
        unint64_t v129 = *(void *)(v127 + 16);
        unint64_t v128 = *(void *)(v127 + 24);
        v130 = (void *)v241;
        if (v129 >= v128 >> 1) {
          unint64_t v127 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v128 > 1, v129 + 1, 1, v127);
        }
        *(void *)(v127 + 16) = v129 + 1;
        unint64_t v131 = (*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80);
        uint64_t v132 = *(void *)(v233 + 72);
        unint64_t v133 = v127 + v131 + v132 * v129;
        v134 = *(void (**)(unint64_t, char *, uint64_t))(v233 + 32);
        v134(v133, v229, v242);
        v135 = v220;
        uint64_t v136 = v232;
        ((void (*)(char *, void, uint64_t))v243)(v220, v245, v232);
        v125(v135, 0, 1, v136);
        id v137 = [v130 displayName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        type metadata accessor for AddressOntologyNode.OccupantNode();
        static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter();
        specialized OntologyNode.javaClassName.getter();
        swift_release();
        SemanticValue.init(string:label:nodeClass:)();
        DisplayHint.init(idValue:displayValue:)();
        unint64_t v139 = *(void *)(v127 + 16);
        unint64_t v138 = *(void *)(v127 + 24);
        if (v139 >= v138 >> 1) {
          unint64_t v127 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v138 > 1, v139 + 1, 1, v127);
        }
        v106 = v231;
        *(void *)(v127 + 16) = v139 + 1;
        unint64_t v54 = v234;
        v134(v127 + v131 + v139 * v132, v230, v242);
        v248 = (void *)v127;
        a1 = v238;
        uint64_t v107 = v232;
        v118 = (void *)v241;
      }
      uint64_t v140 = (uint64_t)v226;
      if (v225)
      {
        id v141 = [v118 nameComponents];
        if (v141)
        {
          v142 = v141;
          static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v143 = type metadata accessor for PersonNameComponents();
          (*(void (**)(unint64_t, void, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56))(v54, 0, 1, v143);
        }
        else
        {
          uint64_t v143 = type metadata accessor for PersonNameComponents();
          (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56))(v54, 1, 1, v143);
        }
        outlined init with take of PersonNameComponents?(v54, v140);
        type metadata accessor for PersonNameComponents();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 48))(v140, 1, v143))
        {
          outlined destroy of (label: String?, value: Any)?(v140, &demangling cache variable for type metadata for PersonNameComponents?);
        }
        else
        {
          uint64_t v144 = PersonNameComponents.familyName.getter();
          uint64_t v146 = v145;
          outlined destroy of (label: String?, value: Any)?(v140, &demangling cache variable for type metadata for PersonNameComponents?);
          if (v146)
          {
            unint64_t v241 = (unint64_t)v118;
            v231 = v106;
            uint64_t v147 = v144;
            v148 = v206;
            ((void (*)(char *, void, uint64_t))v243)(v206, v245, v107);
            v211 = *(void (**)(char *, void, uint64_t, uint64_t))v236;
            v211(v148, 0, 1, v107);
            type metadata accessor for AddressOntologyNode.OccupantNode();
            swift_bridgeObjectRetain();
            static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter();
            specialized OntologyNode.javaClassName.getter();
            swift_release();
            uint64_t v212 = v147;
            SemanticValue.init(string:label:nodeClass:)();
            DisplayHint.init(idValue:displayValue:)();
            unint64_t v149 = (unint64_t)v248;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v149 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v149 + 16) + 1, 1, v149);
            }
            unint64_t v151 = *(void *)(v149 + 16);
            unint64_t v150 = *(void *)(v149 + 24);
            if (v151 >= v150 >> 1) {
              unint64_t v149 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v150 > 1, v151 + 1, 1, v149);
            }
            *(void *)(v149 + 16) = v151 + 1;
            unint64_t v152 = (*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80);
            uint64_t v153 = *(void *)(v233 + 72);
            unint64_t v154 = v149 + v152 + v153 * v151;
            v155 = *(void (**)(unint64_t, char *, uint64_t))(v233 + 32);
            v155(v154, v213, v242);
            v156 = v207;
            uint64_t v157 = v232;
            ((void (*)(char *, void, uint64_t))v243)(v207, v245, v232);
            v211(v156, 0, 1, v157);
            static AddressOntologyNode.OccupantNode.occupantLastNameNode.getter();
            specialized OntologyNode.javaClassName.getter();
            swift_release();
            SemanticValue.init(string:label:nodeClass:)();
            DisplayHint.init(idValue:displayValue:)();
            unint64_t v159 = *(void *)(v149 + 16);
            unint64_t v158 = *(void *)(v149 + 24);
            if (v159 >= v158 >> 1) {
              unint64_t v149 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v158 > 1, v159 + 1, 1, v149);
            }
            v106 = v231;
            v118 = (void *)v241;
            uint64_t v160 = v242;
            *(void *)(v149 + 16) = v159 + 1;
            v155(v149 + v152 + v159 * v153, v214, v160);
            v248 = (void *)v149;
            a1 = v238;
            uint64_t v107 = v232;
          }
        }
      }
      if ((v227 & 1) != 0 && (id v161 = [v118 personHandle]) != 0)
      {
        v162 = v161;
        id v163 = [v161 label];
        if (v163)
        {
          v164 = v163;
          Locale.identifier.getter();
          static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
          swift_bridgeObjectRelease();
          v165 = v209;
          ((void (*)(char *, void, uint64_t))v243)(v209, v245, v107);
          (*(void (**)(char *, void, uint64_t, uint64_t))v236)(v165, 0, 1, v107);
          SemanticValue.init(string:label:)();
          DisplayHint.init(idValue:displayValue:)();
          unint64_t v166 = (unint64_t)v248;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v166 + 16) + 1, 1, v166);
          }
          unint64_t v168 = *(void *)(v166 + 16);
          unint64_t v167 = *(void *)(v166 + 24);
          if (v168 >= v167 >> 1) {
            unint64_t v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v167 > 1, v168 + 1, 1, v166);
          }
          *(void *)(v166 + 16) = v168 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v233 + 32))(v166+ ((*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80))+ *(void *)(v233 + 72) * v168, v215, v242);

          v248 = (void *)v166;
          a1 = v238;
        }
        id v169 = [v162 value];
        if (!v169)
        {

LABEL_120:
          (*v222)(v245, v107);
          goto LABEL_59;
        }
        v170 = v169;
        uint64_t v171 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v173 = v172;

        uint64_t v174 = HIBYTE(v173) & 0xF;
        if ((v173 & 0x2000000000000000) == 0) {
          uint64_t v174 = v171 & 0xFFFFFFFFFFFFLL;
        }
        if (v174)
        {
          v175 = (char *)[v162 type];
          if (v175 == (unsigned char *)&dword_0 + 1)
          {
            v180 = v197;
            ((void (*)(char *, void, uint64_t))v243)(v197, v245, v107);
            (*(void (**)(char *, void, uint64_t, uint64_t))v236)(v180, 0, 1, v107);
            SemanticValue.init(string:label:)();
            DisplayHint.init(idValue:displayValue:)();
            unint64_t v177 = (unint64_t)v248;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v177 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v177 + 16) + 1, 1, v177);
            }
            unint64_t v182 = *(void *)(v177 + 16);
            unint64_t v181 = *(void *)(v177 + 24);
            if (v182 >= v181 >> 1) {
              unint64_t v177 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v181 > 1, v182 + 1, 1, v177);
            }
            *(void *)(v177 + 16) = v182 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v233 + 32))(v177+ ((*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80))+ *(void *)(v233 + 72) * v182, v202, v242);
            goto LABEL_119;
          }
          if (v175 == (unsigned char *)&dword_0 + 2)
          {
            v176 = v198;
            ((void (*)(char *, void, uint64_t))v243)(v198, v245, v107);
            (*(void (**)(char *, void, uint64_t, uint64_t))v236)(v176, 0, 1, v107);
            SemanticValue.init(string:label:)();
            DisplayHint.init(idValue:displayValue:)();
            unint64_t v177 = (unint64_t)v248;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v177 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v177 + 16) + 1, 1, v177);
            }
            unint64_t v179 = *(void *)(v177 + 16);
            unint64_t v178 = *(void *)(v177 + 24);
            if (v179 >= v178 >> 1) {
              unint64_t v177 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v178 > 1, v179 + 1, 1, v177);
            }
            *(void *)(v177 + 16) = v179 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v233 + 32))(v177+ ((*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80))+ *(void *)(v233 + 72) * v179, v203, v242);
LABEL_119:

            v248 = (void *)v177;
            goto LABEL_120;
          }
        }
        (*v222)(v245, v107);
        swift_bridgeObjectRelease();
      }
      else
      {
        (*v222)(v245, v107);
      }

LABEL_59:
      uint64_t v105 = v237 + 1;
      if (v240 == v237 + 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_122;
      }
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static GeoNLContextUtils.makeDisplayHints(items:locale:)(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for OrdinalDisplayHintsBuilder();
  uint64_t v45 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v44 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin(v4 - 8);
  uint64_t v56 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for DisplayHint();
  uint64_t v58 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v60 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SemanticValue();
  uint64_t v57 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v54 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v62 = (char *)&v42 - v14;
  __chkstk_darwin(v13);
  uint64_t v63 = (char *)&v42 - v15;
  uint64_t v64 = &_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v16 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  uint64_t v16 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  uint64_t result = swift_bridgeObjectRetain();
  if (!v16) {
    goto LABEL_31;
  }
LABEL_3:
  if (v16 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v43 = v2;
  uint64_t v18 = 0;
  unint64_t v19 = a1 & 0xC000000000000001;
  uint64_t v59 = (void (**)(char *, char *, uint64_t))(v57 + 16);
  uint64_t v50 = v57 + 56;
  uint64_t v51 = v57 + 32;
  uint64_t v48 = (void (**)(char *, uint64_t))(v57 + 8);
  uint64_t v49 = v58 + 32;
  uint64_t v20 = &unk_EC000;
  uint64_t v61 = &_swiftEmptyArrayStorage;
  uint64_t v46 = v16;
  unint64_t v47 = a1;
  unint64_t v52 = a1 & 0xC000000000000001;
  uint64_t v53 = v7;
  do
  {
    if (v19) {
      id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v21 = *(id *)(a1 + 8 * v18 + 32);
    }
    uint64_t v22 = v21;
    static os_log_type_t.info.getter();
    if (v20[341] != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    unint64_t v23 = (unint64_t)[v22 type] - 1;
    if (v23 <= 4 && ((0x17u >> v23) & 1) != 0)
    {
      uint64_t v24 = one-time initialization token for incidentTypeNode;
      swift_bridgeObjectRetain();
      if (v24 != -1) {
        swift_once();
      }
      TerminalOntologyNode.name.getter();
      swift_retain();
      specialized OntologyNode.javaClassName.getter();
      swift_release();
      SemanticValue.init(string:label:nodeClass:)();
      id v25 = [v22 localizedDisplayString];
      if (v25)
      {
        uint64_t v26 = v25;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        swift_bridgeObjectRelease();
      }
      TerminalOntologyNode.name.getter();
      swift_retain();
      specialized OntologyNode.javaClassName.getter();
      swift_release();
      SemanticValue.init(string:label:nodeClass:)();
      uint64_t v27 = *v59;
      uint64_t v28 = v53;
      (*v59)(v12, v63, v53);
      unint64_t v29 = (unint64_t)v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1, v29);
      }
      a1 = v47;
      unint64_t v31 = *(void *)(v29 + 16);
      unint64_t v30 = *(void *)(v29 + 24);
      if (v31 >= v30 >> 1) {
        unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, v29);
      }
      *(void *)(v29 + 16) = v31 + 1;
      uint64_t v32 = (void *)v29;
      uint64_t v33 = v57;
      unint64_t v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      uint64_t v61 = v32;
      (*(void (**)(unint64_t, char *, uint64_t))(v57 + 32))((unint64_t)v32 + v34 + *(void *)(v57 + 72) * v31, v12, v28);
      uint64_t v35 = v56;
      v27(v56, v63, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v28);
      v27(v54, v62, v28);
      DisplayHint.init(idValue:displayValue:)();
      unint64_t v36 = (unint64_t)v64;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1, v36);
      }
      uint64_t v16 = v46;
      unint64_t v38 = *(void *)(v36 + 16);
      unint64_t v37 = *(void *)(v36 + 24);
      if (v38 >= v37 >> 1) {
        unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, v36);
      }
      *(void *)(v36 + 16) = v38 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v58 + 32))(v36+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(void *)(v58 + 72) * v38, v60, v55);

      uint64_t v64 = (void *)v36;
      uint64_t v39 = *v48;
      (*v48)(v62, v28);
      v39(v63, v28);
      unint64_t v19 = v52;
      uint64_t v20 = (void *)&unk_EC000;
    }
    else
    {
      static os_log_type_t.error.getter();
      if (one-time initialization token for logObject != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
    }
    ++v18;
  }
  while (v16 != v18);
  swift_bridgeObjectRelease();
  uint64_t v2 = v43;
LABEL_32:
  if (one-time initialization token for referenceNode != -1) {
    swift_once();
  }
  TerminalOntologyNode.name.getter();
  uint64_t v40 = v44;
  OrdinalDisplayHintsBuilder.init(referenceNode:)();
  uint64_t v41 = OrdinalDisplayHintsBuilder.build(for:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v2);
  specialized Array.append<A>(contentsOf:)(v41);
  return (uint64_t)v64;
}

id specialized Sequence.allSatisfy(_:)(unint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  unint64_t v5 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v19 = 1;
LABEL_21:
    swift_bridgeObjectRelease();
    return (id)v19;
  }
LABEL_19:
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_20;
  }
LABEL_3:
  unint64_t v20 = v5 & 0xC000000000000001;
  uint64_t v7 = 4;
  while (1)
  {
    if (v20) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v5 + 8 * v7);
    }
    uint64_t v9 = v8;
    uint64_t v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
    unint64_t v11 = v5;
    id result = [v8 *a4];
    if (!result) {
      break;
    }
    uint64_t v13 = result;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    if (v14 == a2 && v16 == a3)
    {

      swift_bridgeObjectRelease();
      unint64_t v5 = v11;
    }
    else
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      unint64_t v5 = v11;
      if ((v18 & 1) == 0)
      {
        uint64_t v19 = 0;
        goto LABEL_21;
      }
    }
    ++v7;
    if (v10 == v6)
    {
      uint64_t v19 = 1;
      goto LABEL_21;
    }
  }
  __break(1u);
  return result;
}

void specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
LABEL_46:
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_47;
  }
LABEL_3:
  unint64_t v3 = a1 & 0xC000000000000001;
  uint64_t v4 = 4;
  do
  {
    if (v3) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(a1 + 8 * v4);
    }
    uint64_t v6 = v5;
    uint64_t v7 = v4 - 3;
    if (__OFADD__(v4 - 4, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    id v8 = [v5 contactIdentifier];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;
    }
    else
    {
      uint64_t v10 = 0;
      unint64_t v12 = 0xE000000000000000;
    }

    swift_bridgeObjectRelease();
    if ((v12 & 0x2000000000000000) != 0) {
      uint64_t v13 = HIBYTE(v12) & 0xF;
    }
    else {
      uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
    }
    if (!v13) {
      break;
    }
    ++v4;
  }
  while (v7 != v2);
  uint64_t v14 = 4;
  do
  {
    if (v3) {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v15 = *(id *)(a1 + 8 * v14);
    }
    uint64_t v16 = v15;
    uint64_t v17 = v14 - 3;
    if (__OFADD__(v14 - 4, 1)) {
      goto LABEL_45;
    }
    id v18 = [v15 customIdentifier];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;
    }
    else
    {
      uint64_t v20 = 0;
      unint64_t v22 = 0xE000000000000000;
    }

    swift_bridgeObjectRelease();
    uint64_t v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0) {
      uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (!v23)
    {
      swift_bridgeObjectRelease();
      if (!v13) {
        return;
      }
      goto LABEL_32;
    }
    ++v14;
  }
  while (v17 != v2);
  swift_bridgeObjectRelease();
  if (!v13)
  {
    if (v3)
    {
      swift_bridgeObjectRetain();
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
        goto LABEL_49;
      }
      id v24 = *(id *)(a1 + 32);
    }
    id v31 = [v24 customIdentifier];

    if (v31)
    {
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v32;

      swift_bridgeObjectRetain();
      unint64_t v30 = &selRef_customIdentifier;
      goto LABEL_43;
    }
    goto LABEL_51;
  }
LABEL_32:
  if (v3)
  {
    swift_bridgeObjectRetain();
    id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_48;
    }
    id v25 = *(id *)(a1 + 32);
  }
  id v26 = [v25 contactIdentifier];

  if (v26)
  {
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    swift_bridgeObjectRetain();
    unint64_t v30 = &selRef_contactIdentifier;
LABEL_43:
    specialized Sequence.allSatisfy(_:)(a1, v27, v29, (SEL *)v30);
    swift_bridgeObjectRelease_n();
    return;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
}

uint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v11 = a2;
      id v12 = [v8 displayName];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      a2 = v11;
      if (v13 == v11 && v15 == a3)
      {

        swift_bridgeObjectRelease();
      }
      else
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
          uint64_t v18 = 0;
          goto LABEL_20;
        }
      }
      ++v7;
      if (v10 == v6)
      {
        uint64_t v18 = 1;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  uint64_t v18 = 1;
LABEL_20:
  swift_bridgeObjectRelease();
  return v18;
}

{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  if (a1 >> 62) {
    goto LABEL_26;
  }
  id v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v5; id v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      uint64_t v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      id v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      uint64_t v10 = [v7 person];
      uint64_t v11 = [v10 contactIdentifier];

      if (v11)
      {
        id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (!a3)
        {
          swift_bridgeObjectRelease();

LABEL_23:
          swift_bridgeObjectRelease();
          return 0;
        }
        if (v12 == a2 && v14 == a3)
        {

          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v16 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          if ((v16 & 1) == 0) {
            goto LABEL_23;
          }
        }
      }
      else
      {
        if (a3)
        {
          swift_bridgeObjectRelease();

          return 0;
        }
      }
      ++v6;
      if (v9 == v5) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
  }
LABEL_27:
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t specialized static RecipientDisambiguationHelper.hasRecipientsWithSameDisplayName(recipients:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    unint64_t v9 = 0xE000000000000000;
    goto LABEL_9;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_8;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return result;
    }
    id v4 = *(id *)(a1 + 32);
  }
  id v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = [v5 displayName];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

LABEL_9:
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
    char v11 = specialized Sequence.allSatisfy(_:)(a1, v7, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = 0;
  }
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t specialized static DisambiguationListUtils.makeHandleLabelItemComponent(handleLabel:handleType:locale:)(void *a1)
{
  Locale.languageCode.getter();
  uint64_t v2 = static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (one-time initialization token for logObject != -1) {
    swift_once();
  }
  id v6 = logObject;
  if (os_log_type_enabled((os_log_t)logObject, v5))
  {
    id v7 = a1;
    swift_bridgeObjectRetain_n();
    id v8 = v7;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    type metadata accessor for INPersonHandleLabel(0);
    id v10 = v8;
    uint64_t v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v6, v5, "makeHandleLabelItemComponent %s label %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  type metadata accessor for SiriKitDisambiguationItemComponent();
  dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
  swift_release();
  return v13;
}

uint64_t specialized static DisambiguationListUtils.makeHandleValueItemComponent(type:value:allowedOnLockScreen:)(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v8 = type metadata accessor for SpeakableString();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 2)
  {
    uint64_t v25 = a2;
    unint64_t v26 = a3;
    v20[3] = a4;
    uint64_t v23 = 11370722;
    unint64_t v24 = 0xA300000000000000;
    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v26 = v12;
    uint64_t v23 = 11305186;
    unint64_t v24 = 0xA300000000000000;
    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    uint64_t v25 = 0xD000000000000012;
    unint64_t v26 = 0x80000000000C7570;
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 0xD000000000000013;
    v17._object = (void *)0x80000000000C7590;
    String.append(_:)(v17);
    SpeakableString.init(print:speak:)();
    type metadata accessor for SiriKitDisambiguationItemComponent();
    SpeakableString.print.getter();
    dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
    swift_bridgeObjectRelease();
    SpeakableString.speak.getter();
    dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    SpeakableString.speak.getter();
    dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeakOnLockScreen(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withAllowedOnLockScreen(_:)();
    swift_release();
    uint64_t v18 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    type metadata accessor for SiriKitDisambiguationItemComponent();
    dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
    dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withAllowedOnLockScreen(_:)();
    swift_release();
    uint64_t v18 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
    swift_release();
  }
  return v18;
}

void *specialized static DisambiguationListUtils.makeDisambiguationItemComponents(person:locale:handleDisambiguation:)(id a1, uint64_t a2, char a3)
{
  if (a3)
  {
    id v4 = [a1 personHandle];
    if (v4)
    {
      os_log_type_t v5 = v4;
      id v6 = [v4 label];
      if (v6)
      {
        id v7 = v6;
        [v5 type];
        specialized static DisambiguationListUtils.makeHandleLabelItemComponent(handleLabel:handleType:locale:)(v7);
        swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1)
        {
          uint64_t v20 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_release();
      }
      id v8 = objc_msgSend(v5, "value", v20);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v12 = v11;

        specialized static DisambiguationListUtils.makeHandleValueItemComponent(type:value:allowedOnLockScreen:)((uint64_t)[v5 type], v10, v12, 0);
        swift_bridgeObjectRelease();
        swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_release();
      }
      else
      {
      }
    }
  }
  else
  {
    id v13 = [a1 displayName];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    swift_bridgeObjectRelease();
    uint64_t v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0) {
      uint64_t v17 = v14 & 0xFFFFFFFFFFFFLL;
    }
    if (v17)
    {
      type metadata accessor for SiriKitDisambiguationItemComponent();
      id v18 = [a1 displayName];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
      swift_bridgeObjectRelease();
      dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t specialized static DisambiguationListUtils.makeDisambiguationItem(person:locale:handleDisambiguation:)(void *a1, uint64_t a2, char a3)
{
  specialized static DisambiguationListUtils.makeDisambiguationItemComponents(person:locale:handleDisambiguation:)(a1, a2, a3);
  id v3 = objc_allocWithZone((Class)SKIDirectInvocationPayload);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithIdentifier:v4];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_C0600;
  v22[0] = 0x6E65697069636552;
  v22[1] = 0xE900000000000074;
  id v7 = v5;
  AnyHashable.init<A>(_:)();
  uint64_t v8 = INPerson.encodeBase64.getter();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v8;
  *(void *)(inited + 80) = v9;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v7 setUserData:isa];

  if (one-time initialization token for logObject != -1) {
    swift_once();
  }
  unint64_t v11 = logObject;
  id v12 = v7;
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    id v15 = v12;
    id v16 = [v15 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v11, v13, "Make Disambiguation Item with DirectInvocation payload: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  type metadata accessor for SiriKitDisambiguationItem();
  swift_allocObject();
  uint64_t v20 = SiriKitDisambiguationItem.init(components:directInvocation:allowLineWrapForDisplayText:)();

  return v20;
}

void *specialized static DisambiguationListUtils.makeDisambiguationItems(persons:locale:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  uint64_t result = &_swiftEmptyArrayStorage;
  if (v4)
  {
    specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(a1);
    char v7 = v6;
    char v8 = specialized static RecipientDisambiguationHelper.hasRecipientsWithSameDisplayName(recipients:)(a1);
    if ((v7 & 1) == 0) {
      goto LABEL_10;
    }
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_22;
    }
    if (!*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      goto LABEL_24;
    }
    for (id i = *(id *)(a1 + 32); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
    {
      uint64_t v10 = i;
      type metadata accessor for SiriKitDisambiguationItemComponent();
      id v11 = [v10 displayName];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
      swift_bridgeObjectRelease();
      uint64_t v12 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_C0AD0;
      *(void *)(v13 + 32) = v12;
      specialized Array._endMutation()();
      type metadata accessor for SiriKitDisambiguationItem();
      swift_allocObject();
      SiriKitDisambiguationItem.init(components:utterance:allowLineWrapForDisplayText:)();

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
LABEL_24:
      }
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_10:
      if (v4 >= 1) {
        break;
      }
      __break(1u);
LABEL_22:
      ;
    }
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    char v15 = v8 & 1;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v16 = *(id *)(a1 + 8 * v14 + 32);
      }
      uint64_t v17 = v16;
      specialized static DisambiguationListUtils.makeDisambiguationItem(person:locale:handleDisambiguation:)(v16, a2, v15);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v14;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    while (v4 != v14);
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_OWORD *specialized static DisambiguationListUtils.makeDisambiguationItemComponents(item:locale:)(void *a1)
{
  specialized static TrafficIncidentUtils.convertNLIncidentTypeFromSupportedTrafficIncidentType(incidentType:)(a1);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    id v3 = (_OWORD *)swift_allocObject();
    v3[1] = xmmword_C0AD0;
    id v4 = [a1 localizedDisplayString];
    if (v4)
    {
      id v5 = v4;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    type metadata accessor for SiriKitDisambiguationItemComponent();
    dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
    swift_bridgeObjectRelease();
    id v6 = [a1 localizedDisplayString];
    if (v6)
    {
      char v7 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();
    }
    dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v8 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
    swift_release();
    *((void *)v3 + 4) = v8;
    id v16 = v3;
    specialized Array._endMutation()();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (one-time initialization token for logObject != -1) {
      swift_once();
    }
    uint64_t v10 = logObject;
    if (os_log_type_enabled((os_log_t)logObject, v9))
    {
      swift_bridgeObjectRetain_n();
      id v11 = (uint8_t *)swift_slowAlloc();
      id v16 = (_OWORD *)swift_slowAlloc();
      *(_DWORD *)id v11 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v12 = Array.description.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, (uint64_t *)&v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v10, v9, "makeDisambiguationItemComponents made components %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    if (one-time initialization token for logObject != -1) {
      swift_once();
    }
    id v3 = &_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  return v3;
}

uint64_t specialized static DisambiguationListUtils.makeMachineUtterance(item:locale:)(void *a1)
{
  specialized static TrafficIncidentUtils.convertNLIncidentTypeFromSupportedTrafficIncidentType(incidentType:)(a1);
  if (v1)
  {
    type metadata accessor for MachineUtteranceBuilder();
    swift_allocObject();
    MachineUtteranceBuilder.init()();
    dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v2 = dispatch thunk of MachineUtteranceBuilder.build()();
    unint64_t v4 = v3;
    swift_release();
    if (one-time initialization token for logObject != -1) {
      swift_once();
    }
    id v5 = logObject;
    swift_bridgeObjectRetain_n();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)char v7 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v5, v6, "makeMachineUtterance utterance is: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    if (one-time initialization token for logObject != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    return 0;
  }
  return v2;
}

uint64_t specialized static DisambiguationListUtils.makeDisambiguationItem(item:locale:)(void *a1)
{
  specialized static DisambiguationListUtils.makeDisambiguationItemComponents(item:locale:)(a1);
  specialized static DisambiguationListUtils.makeMachineUtterance(item:locale:)(a1);
  type metadata accessor for SiriKitDisambiguationItem();
  swift_allocObject();
  uint64_t v2 = SiriKitDisambiguationItem.init(components:utterance:allowLineWrapForDisplayText:)();
  if (one-time initialization token for logObject != -1) {
    swift_once();
  }
  unint64_t v3 = logObject;
  swift_retain_n();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    swift_retain();
    uint64_t v6 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, v4, "makeDisambiguationItem incident item is: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
  return v2;
}

void *specialized static DisambiguationListUtils.makeDisambiguationItems(incidentTypes:locale:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    if (v2)
    {
LABEL_3:
      if (v2 >= 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v3 = 0;
        while (1)
        {
          if ((a1 & 0xC000000000000001) != 0) {
            id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v4 = *(id *)(a1 + 32 + 8 * v3);
          }
          id v5 = v4;
          if (one-time initialization token for siriSupportedIncidents != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v6 = static TrafficIncidentUtils.siriSupportedIncidents;
          swift_bridgeObjectRetain();
          id v7 = [v5 type];
          if (*(void *)(v6 + 16))
          {
            Swift::UInt v8 = (Swift::UInt)v7;
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v8);
            Swift::Int v9 = Hasher._finalize()();
            uint64_t v10 = -1 << *(unsigned char *)(v6 + 32);
            unint64_t v11 = v9 & ~v10;
            if ((*(void *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
            {
              uint64_t v12 = *(void *)(v6 + 48);
              if (*(void *)(v12 + 8 * v11) == v8)
              {
LABEL_18:
                swift_bridgeObjectRelease();
                specialized static DisambiguationListUtils.makeDisambiguationItem(item:locale:)(v5);
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();

                goto LABEL_6;
              }
              uint64_t v13 = ~v10;
              while (1)
              {
                unint64_t v11 = (v11 + 1) & v13;
                if (((*(void *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
                  break;
                }
                if (*(void *)(v12 + 8 * v11) == v8) {
                  goto LABEL_18;
                }
              }
            }
          }

          swift_bridgeObjectRelease();
LABEL_6:
          if (++v3 == v2)
          {
            swift_bridgeObjectRelease();
            return &_swiftEmptyArrayStorage;
          }
        }
      }
      __break(1u);
      goto LABEL_28;
    }
  }
  if (one-time initialization token for logObject != -1) {
LABEL_28:
  }
    swift_once();
  char v15 = logObject;
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "makeDisambiguationItems received empty list", v17, 2u);
    swift_slowDealloc();
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t specialized TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:isPommes:isUSO:_:)(uint64_t a1, uint64_t a2, int a3, int a4, unint64_t a5, char a6, void (*a7)(char *), uint64_t a8)
{
  uint64_t v99 = a8;
  v109 = (void (*)(void, void, void))a5;
  LODWORD(v107) = a4;
  LODWORD(v10) = a3;
  uint64_t v97 = a2;
  uint64_t v108 = a1;
  uint64_t v111 = type metadata accessor for DisplayHint();
  *(void *)&long long v104 = *(void *)(v111 - 8);
  uint64_t v11 = __chkstk_darwin(v111);
  uint64_t v105 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v110 = (char *)&v88 - v14;
  __chkstk_darwin(v13);
  v106 = (char *)&v88 - v15;
  uint64_t v94 = type metadata accessor for PommesContext.Source();
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v92 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v17 - 8);
  char v95 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v103 = *(void (***)(char *, char *, uint64_t))(v22 - 8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v88 - v26;
  uint64_t v28 = type metadata accessor for NLContextUpdate();
  uint64_t v101 = *(void *)(v28 - 8);
  uint64_t v102 = v28;
  uint64_t v29 = __chkstk_darwin(v28);
  unint64_t v96 = (char *)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v98 = (char *)&v88 - v31;
  static os_log_type_t.info.getter();
  if (one-time initialization token for logObject != -1) {
    swift_once();
  }
  uint64_t v32 = logObject;
  os_log(_:dso:log:_:_:)();
  long long v100 = a7;
  if (a6)
  {
    uint64_t v62 = specialized static GeoNLContextUtils.makeDisplayHints(items:locale:)((unint64_t)v109);
    os_log_type_t v63 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v63))
    {
      swift_bridgeObjectRetain_n();
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v65 = Array.description.getter();
      unint64_t v67 = v66;
      swift_bridgeObjectRelease();
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v67, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v32, v63, "TypedDisambiguationItems IncidentType displayHints are: %s", v64, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    uint64_t v68 = v98;
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(v97, v62);
    swift_bridgeObjectRelease();
    uint64_t v70 = v101;
    uint64_t v69 = v102;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v21, v68, v102);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v21, 0, 1, v69);
    v100(v21);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v21, &demangling cache variable for type metadata for NLContextUpdate?);
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v68, v69);
  }
  else
  {
    int v91 = v10;
    if (v107)
    {
      uint64_t v33 = v98;
      NLContextUpdate.init()();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
      type metadata accessor for Siri_Nlu_External_SystemDialogAct();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_C0600;
      type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
      swift_allocObject();
      uint64_t v34 = UsoTaskBuilder_noVerb_common_Person.init()();
      type metadata accessor for UsoEntityBuilder_common_Person();
      swift_allocObject();
      UsoEntityBuilder_common_Person.init()();
      dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
      static Siri_Nlu_External_SystemPrompted.from(_:)(v34, (uint64_t)v27);
      Siri_Nlu_External_SystemDialogAct.init()();
      uint64_t v35 = v103;
      v103[2](v25, v27, v22);
      Siri_Nlu_External_SystemDialogAct.prompted.setter();
      ((void (*)(char *, uint64_t))v35[1])(v27, v22);
      swift_release();
      swift_release();
      NLContextUpdate.nluSystemDialogActs.setter();
      uint64_t v36 = v101;
      uint64_t v10 = v102;
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v21, v33, v102);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v21, 0, 1, v10);
      v100(v21);
      outlined destroy of (label: String?, value: Any)?((uint64_t)v21, &demangling cache variable for type metadata for NLContextUpdate?);
      uint64_t v37 = v10;
      LOBYTE(v10) = v91;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v37);
    }
    uint64_t v90 = v21;
    unint64_t v38 = (unint64_t)v109;
    specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)((unint64_t)v109);
    uint64_t v40 = specialized static GeoNLContextUtils.makeDisplayHints(persons:locale:handleDisambiguation:)(v38, v108, v39 & 1);
    uint64_t v41 = v40;
    uint64_t v42 = *(void *)(v40 + 16);
    if (v42)
    {
      uint64_t v44 = v104 + 16;
      uint64_t v43 = *(void (**)(void, void, void))(v104 + 16);
      unint64_t v45 = v40 + ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
      uint64_t v46 = *(void *)(v104 + 72);
      uint64_t v107 = (void (**)(char *, uint64_t))(v104 + 8);
      uint64_t v108 = v46;
      uint64_t v89 = v40;
      swift_bridgeObjectRetain();
      *(void *)&long long v47 = 136315138;
      long long v104 = v47;
      uint64_t v103 = (void (**)(char *, char *, uint64_t))((char *)&type metadata for Any + 8);
      uint64_t v48 = v110;
      uint64_t v49 = v106;
      v109 = v43;
      do
      {
        uint64_t v52 = v111;
        v43(v49, v45, v111);
        os_log_type_t v53 = static os_log_type_t.info.getter();
        unint64_t v54 = logObject;
        v43(v48, v49, v52);
        os_log_type_t v55 = v53;
        if (os_log_type_enabled(v54, v53))
        {
          uint64_t v56 = swift_slowAlloc();
          v114[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v56 = v104;
          uint64_t v57 = v111;
          v43(v105, v110, v111);
          uint64_t v58 = String.init<A>(describing:)();
          uint64_t v59 = v44;
          *(void *)(v56 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, v114);
          swift_bridgeObjectRelease();
          uint64_t v61 = *v107;
          (*v107)(v110, v57);
          _os_log_impl(&dword_0, v54, v55, "TypedDisambiguationItems Contact displayHints are: %s", (uint8_t *)v56, 0xCu);
          swift_arrayDestroy();
          uint64_t v49 = v106;
          swift_slowDealloc();
          swift_slowDealloc();
          v61(v49, v57);
          uint64_t v44 = v59;
          uint64_t v48 = v110;
        }
        else
        {
          uint64_t v50 = *v107;
          uint64_t v51 = v111;
          (*v107)(v48, v111);
          v50(v49, v51);
        }
        uint64_t v43 = v109;
        v45 += v108;
        --v42;
      }
      while (v42);
      uint64_t v41 = v89;
      swift_bridgeObjectRelease();
      LOBYTE(v10) = v91;
    }
    os_log_type_t v72 = v96;
    static GeoNLContextUtils.makeNLContext(weightedPromptResponseTargets:displayHints:)(v97, v41);
    swift_bridgeObjectRelease();
    uint64_t v73 = (void (*)(uint64_t))v100;
    uint64_t v74 = (uint64_t)v90;
    if (v10)
    {
      unint64_t v75 = logObject;
      os_log_type_t v76 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v77 = 0;
        _os_log_impl(&dword_0, v75, v76, "makeContextForConfirmIntent adding pommesContext", v77, 2u);
        swift_slowDealloc();
      }
      (*(void (**)(char *, void, uint64_t))(v93 + 104))(v92, enum case for PommesContext.Source.pluginDefined(_:), v94);
      unint64_t v78 = v95;
      PommesContext.init(source:domain:listenAfterSpeaking:)();
      uint64_t v79 = type metadata accessor for PommesContext();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v78, 0, 1, v79);
      NLContextUpdate.pommesContext.setter();
    }
    os_log_type_t v80 = static os_log_type_t.info.getter();
    id v81 = logObject;
    os_log_type_t v82 = v80;
    if (os_log_type_enabled((os_log_t)logObject, v80))
    {
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v83 = 136315138;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v98, v96, v102);
      os_log_type_t v72 = v96;
      uint64_t v84 = String.init<A>(describing:)();
      uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v81, v82, "nlContext %s", v83, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_beginAccess();
    uint64_t v87 = v101;
    uint64_t v86 = v102;
    (*(void (**)(uint64_t, char *, uint64_t))(v101 + 16))(v74, v72, v102);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v74, 0, 1, v86);
    v73(v74);
    outlined destroy of (label: String?, value: Any)?(v74, &demangling cache variable for type metadata for NLContextUpdate?);
    return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v72, v86);
  }
}

uint64_t specialized static RecipientDisambiguationHelper.hasAllSameRecipientsWithHandles(recipients:)(unint64_t a1)
{
  specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(a1);
  if ((v2 & 1) == 0) {
    return 0;
  }
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = 0;
      while (1)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v5 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          break;
        }
        if (INPerson.hasHandleLabel.getter())
        {
          swift_unknownObjectRelease();
        }
        else
        {
          char v6 = INPerson.hasHandleValue.getter();
          swift_unknownObjectRelease();
          if ((v6 & 1) == 0) {
            goto LABEL_18;
          }
        }
        ++v4;
        if (v5 == v3) {
          goto LABEL_23;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          break;
        }
        id v9 = *(id *)(a1 + 8 * v7 + 32);
        if (INPerson.hasHandleLabel.getter())
        {
        }
        else
        {
          char v10 = INPerson.hasHandleValue.getter();

          if ((v10 & 1) == 0)
          {
LABEL_18:
            swift_bridgeObjectRelease();
            return 0;
          }
        }
        ++v7;
        if (v8 == v3) {
          goto LABEL_23;
        }
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
  }
LABEL_23:
  swift_bridgeObjectRelease();
  return 1;
}

ValueMetadata *type metadata accessor for GeoNLContextUtils()
{
  return &type metadata for GeoNLContextUtils;
}

ValueMetadata *type metadata accessor for DisambiguationListUtils()
{
  return &type metadata for DisambiguationListUtils;
}

uint64_t initializeBufferWithCopyOfBuffer for TypedDisambiguationItems(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  outlined copy of TypedDisambiguationItems(*a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for TypedDisambiguationItems(uint64_t a1)
{
  return outlined consume of TypedDisambiguationItems(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t *assignWithCopy for TypedDisambiguationItems(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  outlined copy of TypedDisambiguationItems(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  outlined consume of TypedDisambiguationItems(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t *assignWithTake for TypedDisambiguationItems(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  outlined consume of TypedDisambiguationItems(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TypedDisambiguationItems(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TypedDisambiguationItems(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TypedDisambiguationItems(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for TypedDisambiguationItems(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TypedDisambiguationItems()
{
  return &type metadata for TypedDisambiguationItems;
}

ValueMetadata *type metadata accessor for RecipientDisambiguationHelper()
{
  return &type metadata for RecipientDisambiguationHelper;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined init with take of PersonNameComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type INPerson and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type INPerson and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INPerson and conformance NSObject)
  {
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INPerson);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type INPerson and conformance NSObject);
  }
  return result;
}

uint64_t Sharing_Medium.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DeviceType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized DeviceType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DeviceType(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t static AssistantProperties.isNavigating()()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  [(id)static AssistantProperties.instance currentNavigationState];
  return AFNavigationStateIsNavigating();
}

uint64_t *AssistantProperties.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static AssistantProperties.instance;
}

id one-time initialization function for instance()
{
  id result = [self sharedPreferences];
  static AssistantProperties.instance = (uint64_t)result;
  return result;
}

id static AssistantProperties.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static AssistantProperties.instance;

  return v0;
}

unint64_t specialized DeviceType.init(rawValue:)(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DeviceType and conformance DeviceType()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceType and conformance DeviceType;
  if (!lazy protocol witness table cache variable for type DeviceType and conformance DeviceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceType and conformance DeviceType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DeviceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceType()
{
  return &type metadata for DeviceType;
}

ValueMetadata *type metadata accessor for AssistantProperties()
{
  return &type metadata for AssistantProperties;
}

uint64_t one-time initialization function for locationServicesURL()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __swift_allocate_value_buffer(v0, static LocationServicesViews.locationServicesURL);
  __swift_project_value_buffer(v0, (uint64_t)static LocationServicesViews.locationServicesURL);
  return URL.init(string:)();
}

uint64_t DeepLinkParams.init(catModel:deepLinkURL:buttonLabel:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  type metadata accessor for CATService();
  uint64_t v10 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v10 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v10 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v10 + 16) = 0;
  *a5 = v10;
  outlined init with take of CATType(a1, (uint64_t)(a5 + 1));
  uint64_t v12 = type metadata accessor for DeepLinkParams();
  uint64_t v13 = (char *)a5 + *(int *)(v12 + 24);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a2, v14);
  uint64_t v16 = (uint64_t *)((char *)a5 + *(int *)(v12 + 28));
  *uint64_t v16 = a3;
  v16[1] = a4;
  return result;
}

void *DeepLinkParams.makeDeepLink(device:)(void *a1)
{
  unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  char v2 = dispatch thunk of DeviceState.isPhone.getter();
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v15);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    char v3 = dispatch thunk of DeviceState.isPad.getter();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
    if ((v3 & 1) == 0) {
      return _swiftEmptyArrayStorage;
    }
  }
  id v4 = [objc_allocWithZone((Class)SAUIButton) init];
  uint64_t v5 = type metadata accessor for DeepLinkParams();
  NSString v6 = String._bridgeToObjectiveC()();
  [v4 setText:v6];

  id v7 = [objc_allocWithZone((Class)SAUIOpenLink) init];
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v5 + 24));
  id v9 = v8;
  [v7 setRef:v8];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_C0AD0;
  *(void *)(v10 + 32) = v7;
  specialized Array._endMutation()();
  id v11 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 setCommands:isa];

  id v13 = v4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                 + (v16 & 0xFFFFFFFFFFFFFF8)) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return (void *)v16;
}

uint64_t DeepLinkParams.catModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 8, a1);
}

uint64_t DeepLinkParams.catModel.setter(long long *a1)
{
  uint64_t v3 = v1 + 8;
  __swift_destroy_boxed_opaque_existential_0Tm(v3);

  return outlined init with take of CATType(a1, v3);
}

uint64_t (*DeepLinkParams.catModel.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t DeepLinkParams.deepLinkURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DeepLinkParams() + 24);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t DeepLinkParams.deepLinkURL.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DeepLinkParams() + 24);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*DeepLinkParams.deepLinkURL.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t DeepLinkParams.buttonLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for DeepLinkParams() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DeepLinkParams.buttonLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for DeepLinkParams() + 28));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DeepLinkParams.buttonLabel.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t type metadata accessor for DeepLinkParams()
{
  uint64_t result = type metadata singleton initialization cache for DeepLinkParams;
  if (!type metadata singleton initialization cache for DeepLinkParams) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized static LocationServicesViews.locationServiceLabel.getter()
{
  type metadata accessor for CATService();
  uint64_t inited = swift_initStackObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(inited + 24) = [self bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(inited + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(inited + 16) = 0;
  uint64_t v2 = specialized GeoCATModel.getID()(1, 0, 2);
  uint64_t v4 = v3;
  uint64_t v5 = specialized GeoCATModel.getParams()(1, 0, 2);
  uint64_t v6 = CATService.getLabel(catId:params:)(v2, v4, v5);
  uint64_t v8 = v7;
  char v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    outlined consume of Result<String, Error>(v6, v8, 1);
    swift_release();
    return 0;
  }
  else
  {
    swift_release();
  }
  return v6;
}

uint64_t specialized static LocationServicesViews.makeDeepLink(status:device:)(unsigned __int8 a1, void *a2)
{
  int v3 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v9 = (char *)&v36 - v8;
  uint64_t v10 = type metadata accessor for DeepLinkParams();
  uint64_t v11 = __chkstk_darwin(v10);
  id v13 = (uint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v36 - v14);
  if (v3)
  {
    unint64_t v38 = &type metadata for LocationServices;
    char v39 = &protocol witness table for LocationServices;
    LOBYTE(v37) = 0;
    if (one-time initialization token for locationServicesURL != -1) {
      swift_once();
    }
    uint64_t v16 = __swift_project_value_buffer(v4, (uint64_t)static LocationServicesViews.locationServicesURL);
    outlined init with copy of URL?(v16, (uint64_t)v7);
    uint64_t v17 = type metadata accessor for URL();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v17);
    if (result != 1)
    {
      uint64_t v20 = specialized static LocationServicesViews.locationServiceLabel.getter();
      uint64_t v22 = v21;
      type metadata accessor for CATService();
      uint64_t v23 = swift_allocObject();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      *(void *)(v23 + 24) = [self bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log();
      *(void *)(v23 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v23 + 16) = 0;
      *id v13 = v23;
      outlined init with take of CATType(&v37, (uint64_t)(v13 + 1));
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))((char *)v13 + *(int *)(v10 + 24), v7, v17);
      uint64_t v25 = (uint64_t *)((char *)v13 + *(int *)(v10 + 28));
      *uint64_t v25 = v20;
      v25[1] = v22;
      uint64_t v15 = v13;
LABEL_10:
      uint64_t v35 = DeepLinkParams.makeDeepLink(device:)(a2);
      outlined destroy of DeepLinkParams((uint64_t)v15);
      return (uint64_t)v35;
    }
    __break(1u);
  }
  else
  {
    unint64_t v38 = &type metadata for LocationServices;
    char v39 = &protocol witness table for LocationServices;
    LOBYTE(v37) = 1;
    if (one-time initialization token for locationServicesURL != -1) {
      swift_once();
    }
    uint64_t v26 = __swift_project_value_buffer(v4, (uint64_t)static LocationServicesViews.locationServicesURL);
    outlined init with copy of URL?(v26, (uint64_t)v9);
    uint64_t v27 = type metadata accessor for URL();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v9, 1, v27);
    if (result != 1)
    {
      uint64_t v29 = specialized static LocationServicesViews.locationServiceLabel.getter();
      uint64_t v31 = v30;
      type metadata accessor for CATService();
      uint64_t v32 = swift_allocObject();
      uint64_t v33 = swift_getObjCClassFromMetadata();
      *(void *)(v32 + 24) = [self bundleForClass:v33];
      type metadata accessor for OS_os_log();
      *(void *)(v32 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v32 + 16) = 0;
      *uint64_t v15 = v32;
      outlined init with take of CATType(&v37, (uint64_t)(v15 + 1));
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))((char *)v15 + *(int *)(v10 + 24), v9, v27);
      uint64_t v34 = (uint64_t *)((char *)v15 + *(int *)(v10 + 28));
      *uint64_t v34 = v29;
      v34[1] = v31;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type LocationStatus and conformance LocationStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationStatus and conformance LocationStatus;
  if (!lazy protocol witness table cache variable for type LocationStatus and conformance LocationStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationStatus and conformance LocationStatus);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationServicesViews()
{
  return &type metadata for LocationServicesViews;
}

uint64_t initializeBufferWithCopyOfBuffer for DeepLinkParams(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_retain();
    v11(a1 + 8, v8, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = *(int *)(a3 + 28);
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DeepLinkParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DeepLinkParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  long long v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  v9(a1 + 8, v6, v8);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DeepLinkParams(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  uint64_t v6 = *(int *)(a3 + 24);
  long long v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DeepLinkParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for DeepLinkParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  void *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeepLinkParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_25CA8);
}

uint64_t sub_25CA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DeepLinkParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_25D6C);
}

void *sub_25D6C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for DeepLinkParams()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LocationStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationStatus()
{
  return &type metadata for LocationStatus;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DeepLinkParams(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeepLinkParams();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of Result<String, Error>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t ShareETAContactDisambiguationStrategy.catService.getter()
{
  return swift_retain();
}

unint64_t AnswerETAFlow.flowState.getter()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 32);
  outlined copy of AnswerETAFlow.State(v1);
  return v1;
}

unint64_t outlined copy of AnswerETAFlow.State(unint64_t result)
{
  if (result >= 4) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t AnswerETAFlow.flowState.setter(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = a1;
  return outlined consume of AnswerETAFlow.State(v3);
}

unint64_t outlined consume of AnswerETAFlow.State(unint64_t result)
{
  if (result >= 4) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t (*AnswerETAFlow.flowState.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t AnswerETAFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of DeviceState(v1 + 40, a1);
}

uint64_t AnswerETAFlow.flowHelper.setter(long long *a1)
{
  uint64_t v3 = v1 + 40;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, v3);
  return swift_endAccess();
}

uint64_t (*AnswerETAFlow.flowHelper.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t AnswerETAFlow.directInvocation.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t AnswerETAFlow.directInvocation.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 80) = a1;
  return result;
}

uint64_t (*AnswerETAFlow.directInvocation.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t AnswerETAFlow.checkNavigation.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 88);
}

uint64_t AnswerETAFlow.checkNavigation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + 96) = a2;
  return result;
}

uint64_t (*AnswerETAFlow.checkNavigation.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t AnswerETAFlow.isPOMMES.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t AnswerETAFlow.isPOMMES.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 104) = a1;
  return result;
}

uint64_t (*AnswerETAFlow.isPOMMES.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t AnswerETAFlow.duration.getter()
{
  return swift_retain();
}

uint64_t AnswerETAFlow.duration.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 112) = a1;
  return swift_release();
}

uint64_t (*AnswerETAFlow.duration.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t AnswerETAFlow.__allocating_init(with:checkNavigation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized AnswerETAFlow.init(with:checkNavigation:)((uint64_t)v11, a2, a3, v6, v7, v8);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v13;
}

uint64_t AnswerETAFlow.init(with:checkNavigation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized AnswerETAFlow.init(with:checkNavigation:)((uint64_t)v11, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v13;
}

uint64_t AnswerETAFlow.__allocating_init()()
{
  v2[3] = &type metadata for FlowHelperImpl;
  v2[4] = &protocol witness table for FlowHelperImpl;
  v2[0] = swift_allocObject();
  FlowHelperImpl.init()((void *)(v2[0] + 16));
  return (*(uint64_t (**)(void *, ValueMetadata *, _UNKNOWN **))(v0 + 288))(v2, &type metadata for AssistantProperties, &protocol witness table for AssistantProperties);
}

uint64_t AnswerETAFlow.executeState()(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return _swift_task_switch(AnswerETAFlow.executeState(), 0, 0);
}

uint64_t AnswerETAFlow.executeState()()
{
  uint64_t v27 = v0;
  unint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 40) + 144))();
  *(void *)(v0 + 48) = v1;
  switch(v1)
  {
    case 0uLL:
      uint64_t v2 = *(int **)(**(void **)(v0 + 40) + 312);
      uint64_t v22 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 56) = v3;
      *uint64_t v3 = v0;
      v3[1] = AnswerETAFlow.executeState();
      uint64_t v4 = *(void *)(v0 + 32);
      uint64_t v5 = v22;
      return v5(v4);
    case 1uLL:
      uint64_t v7 = *(int **)(**(void **)(v0 + 40) + 336);
      uint64_t v23 = (uint64_t (*)(void))((char *)v7 + *v7);
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v0 + 64) = v8;
      *uint64_t v8 = v0;
      v8[1] = AnswerETAFlow.executeState();
      uint64_t v9 = v23;
      goto LABEL_7;
    case 2uLL:
      uint64_t v10 = *(int **)(**(void **)(v0 + 40) + 328);
      uint64_t v24 = (uint64_t (*)(uint64_t))((char *)v10 + *v10);
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 80) = v11;
      void *v11 = v0;
      v11[1] = AnswerETAFlow.executeState();
      uint64_t v4 = *(void *)(v0 + 32);
      uint64_t v5 = v24;
      return v5(v4);
    case 3uLL:
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      static ExecuteResponse.complete()();
      uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
      uint64_t result = v9();
      break;
    default:
      uint64_t v12 = *(void *)(v0 + 40);
      os_log_type_t v13 = static os_log_type_t.default.getter();
      uint64_t v14 = *(NSObject **)(v12 + 16);
      os_log_type_t v15 = v13;
      if (os_log_type_enabled(v14, v13))
      {
        outlined copy of AnswerETAFlow.State(v1);
        outlined copy of AnswerETAFlow.State(v1);
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315138;
        *(void *)(v0 + 16) = v1;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v17 = String.init<A>(describing:)();
        *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of AnswerETAFlow.State(v1);
        outlined consume of AnswerETAFlow.State(v1);
        _os_log_impl(&dword_0, v14, v15, "AnswerETAFlow execute request unsupported with err: %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      uint64_t v19 = *(int **)(**(void **)(v0 + 40) + 320);
      uint64_t v25 = (uint64_t (*)(uint64_t))((char *)v19 + *v19);
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v20;
      *uint64_t v20 = v0;
      v20[1] = AnswerETAFlow.executeState();
      uint64_t v21 = *(void *)(v0 + 32);
      uint64_t result = v25(v21);
      break;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  unint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v2 + 304) + **(int **)(*(void *)v2 + 304));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 72) = v4;
  *uint64_t v4 = v3;
  v4[1] = AnswerETAFlow.executeState();
  uint64_t v5 = *(void *)(v1 + 32);
  return v7(v5);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(AnswerETAFlow.executeState(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of AnswerETAFlow.State(*(void *)(v0 + 48));
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AnswerETAFlow.preChecks()(uint64_t a1)
{
  v2[23] = a1;
  v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = *(void *)(v4 + 64);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  return _swift_task_switch(AnswerETAFlow.preChecks(), 0, 0);
}

uint64_t AnswerETAFlow.preChecks()()
{
  (*(void (**)(void))(**(void **)(v0 + 192) + 216))();
  if ((*(uint64_t (**)(void))(v1 + 8))())
  {
    (*(void (**)(uint64_t))(**(void **)(v0 + 192) + 152))(1);
    static ExecuteResponse.ongoing(requireInput:)();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + 192);
    uint64_t v5 = v4[3];
    *(void *)(v0 + 40) = &type metadata for NavigationControl;
    *(void *)(v0 + 48) = &protocol witness table for NavigationControl;
    *(void *)(v0 + 16) = 0;
    uint64_t v6 = *(void (**)(void))(*v4 + 168);
    unint64_t v7 = (*v4 + 168) & 0xFFFFFFFFFFFFLL | 0xA019000000000000;
    *(void *)(v0 + 240) = v6;
    *(void *)(v0 + 248) = v7;
    v6();
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 80))(v8, v9);
    *(void *)(v0 + 256) = v10;
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
    os_log_type_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v5 + 112)
                                                            + **(int **)(*(void *)v5 + 112));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v11;
    void *v11 = v0;
    v11[1] = AnswerETAFlow.preChecks();
    uint64_t v12 = *(void *)(v0 + 232);
    return v13(v12, v0 + 16, v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = AnswerETAFlow.preChecks();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = AnswerETAFlow.preChecks();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v13, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  outlined init with take of CATType((long long *)(v0 + 136), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  *(void *)(v0 + 176) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[34];
  uint64_t v2 = v0[24];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v3 = *(void (**)(uint64_t))(*(void *)v2 + 152);
  swift_errorRetain();
  v3(v1);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t AnswerETAFlow.errorDialog()(uint64_t a1)
{
  v2[23] = a1;
  v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = *(void *)(v4 + 64);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  return _swift_task_switch(AnswerETAFlow.errorDialog(), 0, 0);
}

uint64_t AnswerETAFlow.errorDialog()()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = v1[3];
  v0[5] = &type metadata for NavigationControl;
  v0[6] = &protocol witness table for NavigationControl;
  v0[2] = 1;
  uint64_t v3 = *(void (**)(void))(*v1 + 168);
  unint64_t v4 = (*v1 + 168) & 0xFFFFFFFFFFFFLL | 0xA019000000000000;
  v0[30] = v3;
  v0[31] = v4;
  v3();
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 80))(v5, v6);
  v0[32] = v7;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 7));
  uint64_t v11 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v2 + 112)
                                                           + **(int **)(*(void *)v2 + 112));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[33] = v8;
  *uint64_t v8 = v0;
  v8[1] = AnswerETAFlow.errorDialog();
  uint64_t v9 = v0[29];
  return v11(v9, v0 + 2, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = AnswerETAFlow.errorDialog();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = AnswerETAFlow.errorDialog();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 208);
  unint64_t v4 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v13, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  outlined init with take of CATType((long long *)(v0 + 136), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  *(void *)(v0 + 176) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[34];
  uint64_t v2 = v0[24];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v3 = *(void (**)(uint64_t))(*(void *)v2 + 152);
  swift_errorRetain();
  v3(v1);
  static ExecuteResponse.complete()();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t AnswerETAFlow.handleDialog()(uint64_t a1)
{
  v2[23] = a1;
  v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = *(void *)(v4 + 64);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  return _swift_task_switch(AnswerETAFlow.handleDialog(), 0, 0);
}

uint64_t AnswerETAFlow.handleDialog()()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = v1[3];
  (*(void (**)(void))(*v1 + 264))();
  uint64_t v3 = dispatch thunk of DialogDuration.Builder.build()();
  uint64_t v4 = swift_release();
  v0[5] = &type metadata for NavigationControl;
  v0[6] = &protocol witness table for NavigationControl;
  v0[2] = v3;
  uint64_t v5 = *(void (**)(uint64_t))(*v1 + 168);
  unint64_t v6 = (*v1 + 168) & 0xFFFFFFFFFFFFLL | 0xA019000000000000;
  v0[30] = v5;
  v0[31] = v6;
  v5(v4);
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 80))(v7, v8);
  v0[32] = v9;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 7));
  os_log_type_t v13 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v2 + 112)
                                                           + **(int **)(*(void *)v2 + 112));
  uint64_t v10 = (void *)swift_task_alloc();
  v0[33] = v10;
  *uint64_t v10 = v0;
  v10[1] = AnswerETAFlow.handleDialog();
  uint64_t v11 = v0[29];
  return v13(v11, v0 + 2, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = AnswerETAFlow.handleDialog();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = AnswerETAFlow.handleDialog();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  unint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v13, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  outlined init with take of CATType((long long *)(v0 + 136), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  *(void *)(v0 + 176) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[34];
  uint64_t v2 = v0[24];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v3 = *(void (**)(uint64_t))(*(void *)v2 + 152);
  swift_errorRetain();
  v3(v1);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t AnswerETAFlow.fetchETA()()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(AnswerETAFlow.fetchETA(), 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = [objc_allocWithZone((Class)SALocalSearchGetNavigationStatus) init];
  v0[17] = v2;
  static os_log_type_t.debug.getter();
  v0[18] = v1[2];
  uint64_t v3 = os_log(_:dso:log:_:_:)();
  (*(void (**)(uint64_t))(*v1 + 168))(v3);
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  unint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v6);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[19] = v8;
  uint64_t v9 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for SABaseCommand);
  *uint64_t v8 = v0;
  v8[1] = AnswerETAFlow.fetchETA();
  return AceServiceInvokerAsync.submit<A>(_:)(v2, v6, v9, v7);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void (*v11)(uint64_t);
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  os_log_type_t v15 = v0;
  uint64_t v1 = *(NSObject **)(v0 + 144);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 168);
    uint64_t v4 = *(NSObject **)(v0 + 144);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    unint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v14 = v6;
    *(void *)(v0 + 96) = v3;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v4, v2, "Ace Command submission failed with error: %s ", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v9 = *(void *)(v0 + 168);
  uint64_t v10 = *(void **)(v0 + 136);
  uint64_t v11 = *(void (**)(uint64_t))(**(void **)(v0 + 128) + 152);
  swift_errorRetain();
  v11(v9);

  swift_errorRelease();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t AnswerETAFlow.fetchETA()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = AnswerETAFlow.fetchETA();
  }
  else {
    uint64_t v4 = AnswerETAFlow.fetchETA();
  }
  return _swift_task_switch(v4, 0, 0);
}

void AnswerETAFlow.fetchETA()()
{
  uint64_t v41 = v0;
  uint64_t v1 = *(NSObject **)(v0 + 144);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    log = *(NSObject **)(v0 + 144);
    id v3 = *(id *)(v0 + 160);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    id v5 = v3;
    id v6 = [v5 description];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_0, log, v2, "fetchETA result: %s ", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  uint64_t v11 = *(void **)(v0 + 160);
  if (v10)
  {
    uint64_t v12 = (void *)v10;
    id v13 = v11;
    id v14 = [v12 overallEta];
    if (v14)
    {
      os_log_type_t v15 = v14;
      id v16 = [v14 timeEta];

      if (v16)
      {
        id v17 = [v16 value];

        if (v17)
        {
          unint64_t v18 = *(NSObject **)(v0 + 144);
          os_log_type_t v19 = static os_log_type_t.default.getter();
          uint64_t v20 = os_log_type_enabled(v18, v19);
          if (v20)
          {
            loga = *(NSObject **)(v0 + 144);
            id v21 = v17;
            uint64_t v22 = (uint8_t *)swift_slowAlloc();
            uint64_t v40 = swift_slowAlloc();
            *(_DWORD *)uint64_t v22 = 136315138;
            id v23 = v21;
            id v24 = [v23 description];
            uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v27 = v26;

            *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v40);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_0, loga, v19, "duration result: %s minutes", v22, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v20 = swift_slowDealloc();
          }
          uint64_t v11 = *(void **)(v0 + 160);
          uint64_t v28 = *(void *)(v0 + 128);
          uint64_t v29 = *(void **)(v0 + 136);
          (*(void (**)(uint64_t))(*(void *)v28 + 264))(v20);
          [v17 doubleValue];
          dispatch thunk of DialogDuration.Builder.withSecs(_:)();
          swift_release();
          swift_release();
          (*(void (**)(uint64_t))(*(void *)v28 + 152))(2);

          uint64_t v30 = v11;
        }
        else
        {
          uint64_t v11 = *(void **)(v0 + 160);
          uint64_t v34 = *(void *)(v0 + 128);
          uint64_t v30 = *(void **)(v0 + 136);
          lazy protocol witness table accessor for type Errors and conformance Errors();
          uint64_t v35 = swift_allocError();
          *(void *)uint64_t v36 = 0xD00000000000001CLL;
          *(void *)(v36 + 8) = 0x80000000000C77B0;
          *(unsigned char *)(v36 + 16) = 2;
          (*(void (**)(uint64_t))(*(void *)v34 + 152))(v35);
        }
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  uint64_t v31 = *(void *)(v0 + 128);
  uint64_t v30 = *(void **)(v0 + 136);
  lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v32 = swift_allocError();
  *(_OWORD *)uint64_t v33 = xmmword_C0E40;
  *(unsigned char *)(v33 + 16) = 3;
  (*(void (**)(uint64_t))(*(void *)v31 + 152))(v32);
LABEL_12:

  long long v37 = *(void (**)(void))(v0 + 8);
  v37();
}

uint64_t AnswerETAFlow.deinit()
{
  swift_release();
  outlined consume of AnswerETAFlow.State(*(void *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 40);
  swift_release();
  return v0;
}

uint64_t AnswerETAFlow.__deallocating_deinit()
{
  swift_release();
  outlined consume of AnswerETAFlow.State(*(void *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 40);
  swift_release();

  return _swift_deallocClassInstance(v0, 120, 7);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance AnswerETAFlow@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  *a1 = result;
  return result;
}

id protocol witness for FSMFlow.logObject.getter in conformance AnswerETAFlow()
{
  return *(id *)(*(void *)v0 + 16);
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance AnswerETAFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 296))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance AnswerETAFlow(uint64_t a1)
{
  id v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 304) + **(int **)(**(void **)v1 + 304));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance AnswerETAFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance AnswerETAFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance AnswerETAFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable();

  return FSMFlow.execute(completion:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute() in conformance AnswerETAFlow(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  void *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance AnswerETAFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AnswerETAFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t protocol witness for Flow.flexibleExecutionSupport.getter in conformance AnswerETAFlow()
{
  return Flow.flexibleExecutionSupport.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnswerETAFlow(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t specialized AnswerETAFlow.init(with:checkNavigation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[3] = a5;
  void v15[4] = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_0, a1, a5);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(a4 + 16) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for CATService();
  uint64_t v12 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v12 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v12 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v12 + 16) = 0;
  *(unsigned char *)(a4 + 80) = 0;
  *(unsigned char *)(a4 + 104) = 0;
  *(void *)(a4 + 24) = v12;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 88) = a2;
  *(void *)(a4 + 96) = a3;
  outlined init with copy of DeviceState((uint64_t)v15, a4 + 40);
  type metadata accessor for DialogDuration.Builder();
  swift_allocObject();
  *(void *)(a4 + 112) = DialogDuration.Builder.init()();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
  return a4;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_29BF4()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t partial apply for closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for TemplatingResult() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)(a1, v6, v7);
}

uint64_t closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for TemplatingResult() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)(a1, v6, v7);
}

uint64_t objectdestroy_9Tm()
{
  uint64_t v1 = type metadata accessor for TemplatingResult();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + v6);

  return _swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t instantiation function for generic protocol witness table for AnswerETAFlow(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AnswerETAFlow and conformance AnswerETAFlow(&lazy protocol witness table cache variable for type AnswerETAFlow and conformance AnswerETAFlow);
  uint64_t result = lazy protocol witness table accessor for type AnswerETAFlow and conformance AnswerETAFlow(&lazy protocol witness table cache variable for type AnswerETAFlow and conformance AnswerETAFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for AnswerETAFlow()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type AnswerETAFlow and conformance AnswerETAFlow(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AnswerETAFlow();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_29FF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_2A03C(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(unint64_t))(**(void **)a2 + 152);
  outlined copy of AnswerETAFlow.State(*a1);
  return v3(v2);
}

uint64_t sub_2A098(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 168))();
}

uint64_t sub_2A0DC(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 176))(v4);
}

uint64_t sub_2A138@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_2A188(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 200))(*a1);
}

uint64_t sub_2A1D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2A21C(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)a2 + 224))(*a1, a1[1]);
}

uint64_t sub_2A26C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 240))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_2A2BC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 248))(*a1);
}

uint64_t sub_2A304@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 264))();
  *a2 = result;
  return result;
}

uint64_t sub_2A358(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 272);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

void *initializeBufferWithCopyOfBuffer for AnswerETAFlow.State(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for AnswerETAFlow.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t *assignWithCopy for AnswerETAFlow.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v3 >= 0xFFFFFFFF) {
      swift_errorRetain();
    }
    *a1 = v3;
  }
  else if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain();
    *a1 = v3;
    swift_errorRelease();
  }
  return a1;
}

unint64_t *assignWithTake for AnswerETAFlow.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnswerETAFlow.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnswerETAFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnswerETAFlow.State()
{
  return &type metadata for AnswerETAFlow.State;
}

uint64_t key path setter for SaveParkingLocationBaseFlow.flowState : SaveParkingLocationBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SaveParkingLocationBaseFlow.State(0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SaveParkingLocationBaseFlow.State(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 120))(v6);
}

uint64_t SaveParkingLocationBaseFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState;
  swift_beginAccess();
  return outlined init with copy of SaveParkingLocationBaseFlow.State(v3, a1);
}

uint64_t outlined init with copy of SaveParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SaveParkingLocationBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SaveParkingLocationBaseFlow.State(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for SaveParkingLocationBaseFlow.State);
}

uint64_t SaveParkingLocationBaseFlow.flowState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState;
  swift_beginAccess();
  outlined assign with take of SaveParkingLocationBaseFlow.State(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of SaveParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SaveParkingLocationBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SaveParkingLocationBaseFlow.flowState.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t SaveParkingLocationBaseFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper;
  swift_beginAccess();
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t SaveParkingLocationBaseFlow.flowHelper.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, v3);
  return swift_endAccess();
}

uint64_t (*SaveParkingLocationBaseFlow.flowHelper.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t SaveParkingLocationBaseFlow.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES);
  swift_beginAccess();
  return *v1;
}

uint64_t SaveParkingLocationBaseFlow.isPOMMES.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*SaveParkingLocationBaseFlow.isPOMMES.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t SaveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v8 = specialized SaveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(v7, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v8;
}

uint64_t SaveParkingLocationBaseFlow.init(flowHelper:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = specialized SaveParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v9, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v11;
}

uint64_t SaveParkingLocationBaseFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SaveParkingLocationBaseFlow.State(0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t))(*(void *)v1 + 112))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *v6;
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v10 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(a1, v10, v11);
  }
  else if (EnumCaseMultiPayload == 3)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, v6, v8);
  }
  else
  {
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v12 = swift_allocError();
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(unsigned char *)(v13 + 16) = 3;
    *(void *)a1 = v12;
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v14 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(a1, v14, v15);
    return outlined destroy of SaveParkingLocationBaseFlow.State((uint64_t)v6);
  }
}

uint64_t SaveParkingLocationBaseFlow.onInput(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Input();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Parse();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (id *)((char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  int v12 = (*(uint64_t (**)(id *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v11, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    uint64_t v13 = v2[2];
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "SaveParkingLocationBaseFlow onInput returns true for NLv3IntentPlusServerConversion.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = type metadata accessor for NLIntent();
    (*(void (**)(id *, uint64_t))(*(void *)(v16 - 8) + 8))(v11, v16);
    return 1;
  }
  else if (v12 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v11, v8);

    uint64_t v17 = 1;
    (*(void (**)(uint64_t))(*v2 + 168))(1);
    unint64_t v18 = v2[2];
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "SaveParkingLocationBaseFlow onInput returns true for Pommes response.", v20, 2u);
      swift_slowDealloc();
      return 1;
    }
  }
  else
  {
    id v21 = v2[2];
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      os_log_t v29 = v21;
      id v24 = (uint8_t *)v23;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v32 = v30;
      *(_DWORD *)id v24 = 136315138;
      v28[1] = v24 + 4;
      uint64_t v25 = Input.description.getter();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl(&dword_0, v29, v22, "SiriGeo currently doesn't support parse type: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    (*(void (**)(id *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  return v17;
}

uint64_t SaveParkingLocationBaseFlow.executeState()(uint64_t a1)
{
  void v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for SaveParkingLocationBaseFlow.State(0);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return _swift_task_switch(SaveParkingLocationBaseFlow.executeState(), 0, 0);
}

uint64_t SaveParkingLocationBaseFlow.executeState()()
{
  uint64_t v47 = v0;
  (*(void (**)(void))(**(void **)(v0 + 48) + 112))();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      id v27 = **(id **)(v0 + 112);
      goto LABEL_18;
    case 2u:
      uint64_t v2 = *(void *)(v0 + 48);
      uint64_t v3 = **(void **)(v0 + 112);
      os_log_type_t v4 = static os_log_type_t.error.getter();
      uint64_t v5 = *(NSObject **)(v2 + 16);
      os_log_type_t v6 = v4;
      if (os_log_type_enabled(v5, v4))
      {
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 136315138;
        *(void *)(v0 + 24) = v3;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v8 = String.init<A>(describing:)();
        *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v5, v6, "SaveParkingLocationBaseFlow execute requestUnsupported with error %s", v7, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      static ExecuteResponse.complete()();
      swift_errorRelease();
      goto LABEL_12;
    case 3u:
      uint64_t v11 = *(void *)(v0 + 80);
      uint64_t v10 = *(void *)(v0 + 88);
      uint64_t v12 = *(void *)(v0 + 56);
      uint64_t v13 = *(void *)(v0 + 64);
      uint64_t v14 = *(void *)(v0 + 48);
      (*(void (**)(uint64_t, void, uint64_t))(v13 + 32))(v10, *(void *)(v0 + 112), v12);
      os_log_type_t v15 = static os_log_type_t.info.getter();
      uint64_t v16 = *(NSObject **)(v14 + 16);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
      v17(v11, v10, v12);
      BOOL v18 = os_log_type_enabled(v16, v15);
      uint64_t v19 = *(void *)(v0 + 80);
      if (v18)
      {
        log = v16;
        os_log_type_t typea = v15;
        uint64_t v20 = *(void *)(v0 + 64);
        uint64_t v21 = *(void *)(v0 + 72);
        uint64_t v22 = *(void *)(v0 + 56);
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        v17(v21, v19, v22);
        uint64_t v24 = String.init<A>(describing:)();
        *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
        v26(v19, v22);
        _os_log_impl(&dword_0, log, typea, "SaveParkingLocationBaseFlow execute rchComplete with result %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        unint64_t v26 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 64) + 8);
        v26(*(void *)(v0 + 80), *(void *)(v0 + 56));
      }
      uint64_t v28 = *(void *)(v0 + 88);
      uint64_t v29 = *(void *)(v0 + 56);
      static ExecuteResponse.complete()();
      v26(v28, v29);
      goto LABEL_12;
    default:
      uint64_t v1 = **(void ***)(v0 + 112);
      if ([self isSiriLocationServicesPromptingEnabled])
      {
        SaveParkingLocationBaseFlow.pushGuardFlows(intent:)(v1);

LABEL_12:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
        return v30();
      }
      else
      {
        uint64_t v32 = *(NSObject **)(*(void *)(v0 + 48) + 16);
        os_log_type_t v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v34 = 0;
          _os_log_impl(&dword_0, v32, v33, "SaveParkingLocationBaseFlow execute state fallthrough to handle.", v34, 2u);
          swift_slowDealloc();
        }
        uint64_t v35 = *(void **)(v0 + 104);
        uint64_t v36 = *(void *)(v0 + 48);
        *uint64_t v35 = v1;
        swift_storeEnumTagMultiPayload();
        long long v37 = *(void (**)(void *))(*(void *)v36 + 120);
        id v27 = v1;
        v37(v35);
LABEL_18:
        *(void *)(v0 + 120) = v27;
        unint64_t v38 = *(NSObject **)(*(void *)(v0 + 48) + 16);
        os_log_type_t v39 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v40 = 0;
          _os_log_impl(&dword_0, v38, v39, "SaveParkingLocationBaseFlow execute state handle.", v40, 2u);
          swift_slowDealloc();
        }
        type = (uint64_t (*)(uint64_t, id))(*(void *)(**(void **)(v0 + 48) + 216)
                                                   + **(int **)(**(void **)(v0 + 48) + 216));
        uint64_t v41 = (void *)swift_task_alloc();
        *(void *)(v0 + 128) = v41;
        *uint64_t v41 = v0;
        v41[1] = SaveParkingLocationBaseFlow.executeState();
        uint64_t v42 = *(void *)(v0 + 40);
        return type(v42, v27);
      }
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(SaveParkingLocationBaseFlow.executeState(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SaveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
  v3[28] = v4;
  v3[29] = *(void *)(v4 - 8);
  v3[30] = swift_task_alloc();
  return _swift_task_switch(SaveParkingLocationBaseFlow.makeRCHFlow(intent:), 0, 0);
}

uint64_t SaveParkingLocationBaseFlow.makeRCHFlow(intent:)()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 208);
  uint64_t v22 = *(void *)(v0 + 232);
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INSaveParkingLocationIntent);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INSaveParkingLocationIntentResponse);
  RCHChildFlowProducersAsync.init()();
  type metadata accessor for App();
  swift_allocObject();
  uint64_t v20 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  uint64_t v4 = RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  uint64_t v23 = *(void (**)(void))(*(void *)v3 + 136);
  ((void (*)(uint64_t))v23)(v4);
  type metadata accessor for SaveParkingLocationUnsupportedValueStrategy();
  uint64_t v5 = swift_allocObject();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v5 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType((long long *)(v0 + 16), v5 + 24);
  *(void *)(v0 + 184) = v5;
  lazy protocol witness table accessor for type SaveParkingLocationUnsupportedValueStrategy and conformance SaveParkingLocationUnsupportedValueStrategy(&lazy protocol witness table cache variable for type SaveParkingLocationUnsupportedValueStrategy and conformance SaveParkingLocationUnsupportedValueStrategy, (void (*)(uint64_t))type metadata accessor for SaveParkingLocationUnsupportedValueStrategy);
  static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
  swift_release();
  uint64_t v19 = v2;
  uint64_t v6 = RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  ((void (*)(uint64_t))v23)(v6);
  type metadata accessor for SaveParkingHandleIntentStrategy();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType((long long *)(v0 + 96), v7 + 24);
  *(unsigned char *)(v7 + 64) = 0;
  *(void *)(v0 + 176) = v7;
  lazy protocol witness table accessor for type SaveParkingLocationUnsupportedValueStrategy and conformance SaveParkingLocationUnsupportedValueStrategy(&lazy protocol witness table cache variable for type SaveParkingHandleIntentStrategy and conformance SaveParkingHandleIntentStrategy, (void (*)(uint64_t))type metadata accessor for SaveParkingHandleIntentStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  uint64_t v8 = v1;
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  uint64_t v9 = type metadata accessor for SaveParkingBaseRCHStrategy();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = OS_os_log.init(subsystem:category:)();
  v23();
  uint64_t v11 = *(void *)(v0 + 160);
  uint64_t v12 = *(void *)(v0 + 168);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 56))(v11, v12);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v14 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v13);
  *(void *)(v0 + 192) = v10;
  os_log_type_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8);
  uint64_t v16 = lazy protocol witness table accessor for type SaveParkingLocationUnsupportedValueStrategy and conformance SaveParkingLocationUnsupportedValueStrategy(&lazy protocol witness table cache variable for type SaveParkingBaseRCHStrategy and conformance SaveParkingBaseRCHStrategy, (void (*)(uint64_t))type metadata accessor for SaveParkingBaseRCHStrategy);
  v15(v0 + 192, v8, v20, v21, v9, v16, v13, v14);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v8, v19);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t closure #1 in SaveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SaveParkingLocationBaseFlow.State(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *))(*(void *)a2 + 120))(v6);
}

uint64_t SaveParkingLocationBaseFlow.pushGuardFlows(intent:)(void *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
  type metadata accessor for CommonFlowGuard();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_C0600;
  static CommonFlowGuard.ensuringSiriLocationAccess(needsPreciseLocation:)();
  static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = a1;
  type metadata accessor for GuardFlow();
  swift_retain();
  id v5 = a1;
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in SaveParkingLocationBaseFlow.pushGuardFlows(intent:)(unsigned char *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for SaveParkingLocationBaseFlow.State(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*a1 == 1)
  {
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v9 = swift_allocError();
    *(void *)uint64_t v10 = 0xD000000000000022;
    *(void *)(v10 + 8) = 0x80000000000C7900;
    *(unsigned char *)(v10 + 16) = 0;
    *uint64_t v8 = v9;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t *))(*a2 + 120))(v8);
  }
  else
  {
    uint64_t v12 = a2[2];
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "permitted to use location", v14, 2u);
      swift_slowDealloc();
    }
    *uint64_t v8 = (uint64_t)a3;
    swift_storeEnumTagMultiPayload();
    os_log_type_t v15 = *(uint64_t (**)(uint64_t *))(*a2 + 120);
    id v16 = a3;
    return v15(v8);
  }
}

uint64_t SaveParkingLocationBaseFlow.deinit()
{
  outlined destroy of SaveParkingLocationBaseFlow.State(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper);
  return v0;
}

uint64_t SaveParkingLocationBaseFlow.__deallocating_deinit()
{
  outlined destroy of SaveParkingLocationBaseFlow.State((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper);
  uint64_t v1 = *((unsigned int *)*v0 + 12);
  uint64_t v2 = *((unsigned __int16 *)*v0 + 26);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance SaveParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance SaveParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance SaveParkingLocationBaseFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 208) + **(int **)(**(void **)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance SaveParkingLocationBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance SaveParkingLocationBaseFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable();

  return FSMFlow.execute(completion:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute() in conformance SaveParkingLocationBaseFlow(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  void *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance SaveParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SaveParkingLocationBaseFlow(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t specialized SaveParkingLocationBaseFlow.init(flowHelper:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a1, a4);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(a3 + 16) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES) = 0;
  outlined init with take of CATType(&v11, a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper);
  *(void *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState) = a2;
  type metadata accessor for SaveParkingLocationBaseFlow.State(0);
  swift_storeEnumTagMultiPayload();
  return a3;
}

uint64_t specialized SaveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  long long v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SaveParkingLocationBaseFlow(0);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return specialized SaveParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v11, a2, v12, a4, a5);
}

uint64_t outlined destroy of SaveParkingLocationBaseFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SaveParkingLocationBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type SaveParkingLocationUnsupportedValueStrategy and conformance SaveParkingLocationUnsupportedValueStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in SaveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1)
{
  return closure #1 in SaveParkingLocationBaseFlow.makeRCHFlow(intent:)(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for SaveParkingLocationBaseFlow(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type SaveParkingLocationUnsupportedValueStrategy and conformance SaveParkingLocationUnsupportedValueStrategy(&lazy protocol witness table cache variable for type SaveParkingLocationBaseFlow and conformance SaveParkingLocationBaseFlow, (void (*)(uint64_t))type metadata accessor for SaveParkingLocationBaseFlow);
  uint64_t result = lazy protocol witness table accessor for type SaveParkingLocationUnsupportedValueStrategy and conformance SaveParkingLocationUnsupportedValueStrategy(&lazy protocol witness table cache variable for type SaveParkingLocationBaseFlow and conformance SaveParkingLocationBaseFlow, (void (*)(uint64_t))type metadata accessor for SaveParkingLocationBaseFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for SaveParkingLocationBaseFlow(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for SaveParkingLocationBaseFlow);
}

uint64_t sub_2CDC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112))();
}

uint64_t sub_2CE0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136))();
}

uint64_t sub_2CE50(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 144))(v4);
}

uint64_t sub_2CEAC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_2CEFC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168))(*a1);
}

uint64_t ObjC metadata update function for SaveParkingLocationBaseFlow()
{
  return type metadata accessor for SaveParkingLocationBaseFlow(0);
}

uint64_t type metadata completion function for SaveParkingLocationBaseFlow()
{
  uint64_t result = type metadata accessor for SaveParkingLocationBaseFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for SaveParkingLocationBaseFlow.State(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *(void *)a1 = *a2;
    a1 = &v6[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v7 = *a2;
        swift_errorRetain();
        *(void *)a1 = v7;
        break;
      case 3u:
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        break;
      default:
        uint64_t v9 = *a2;
        *(void *)a1 = *a2;
        uint64_t v10 = v9;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for SaveParkingLocationBaseFlow.State(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      uint64_t v2 = *a1;

      break;
    case 2u:
      swift_errorRelease();
      break;
    case 3u:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
      uint64_t v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    default:
      return;
  }
}

void **initializeWithCopy for SaveParkingLocationBaseFlow.State(void **a1, void **a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v4 = *a2;
      swift_errorRetain();
      *a1 = v4;
      break;
    case 3u:
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      break;
    default:
      uint64_t v6 = *a2;
      *a1 = *a2;
      id v7 = v6;
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for SaveParkingLocationBaseFlow.State(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of SaveParkingLocationBaseFlow.State((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v6 = *a2;
        swift_errorRetain();
        *a1 = v6;
        break;
      case 3u:
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        break;
      default:
        uint64_t v4 = *a2;
        *a1 = *a2;
        id v5 = v4;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for SaveParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for SaveParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SaveParkingLocationBaseFlow.State((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for SaveParkingLocationBaseFlow.State()
{
  type metadata accessor for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>()
{
  if (!lazy cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>)
  {
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INSaveParkingLocationIntent);
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INSaveParkingLocationIntentResponse);
    unint64_t v0 = type metadata accessor for RCHFlowResult();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RCHFlowResult<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
    }
  }
}

uint64_t sub_2D75C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in SaveParkingLocationBaseFlow.pushGuardFlows(intent:)(unsigned char *a1)
{
  return closure #1 in SaveParkingLocationBaseFlow.pushGuardFlows(intent:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t CATService.__allocating_init(with:)(char a1)
{
  return (*(uint64_t (**)(void))(v1 + 104))(a1 & 1);
}

uint64_t CATService.Mode.options.getter(char a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      return static CATOption.debugMode.getter();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CATOption>);
      type metadata accessor for CATOption();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_BFBF0;
      static CATOption.testMode.getter();
      static CATOption.resetState.getter();
      lazy protocol witness table accessor for type CATOption and conformance CATOption();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CATOption]);
      lazy protocol witness table accessor for type [CATOption] and conformance [A]();
      return dispatch thunk of SetAlgebra.init<A>(_:)();
    }
  }
  else
  {
    return static CATOption.defaultMode.getter();
  }
}

unint64_t lazy protocol witness table accessor for type CATOption and conformance CATOption()
{
  unint64_t result = lazy protocol witness table cache variable for type CATOption and conformance CATOption;
  if (!lazy protocol witness table cache variable for type CATOption and conformance CATOption)
  {
    type metadata accessor for CATOption();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CATOption and conformance CATOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CATOption] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CATOption] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CATOption] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CATOption]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CATOption] and conformance [A]);
  }
  return result;
}

uint64_t CATService.__allocating_init(withMode:)(char a1)
{
  uint64_t v2 = swift_allocObject();
  CATService.init(withMode:)(a1);
  return v2;
}

uint64_t CATService.init(withMode:)(char a1)
{
  uint64_t v2 = v1;
  type metadata accessor for CATService();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v2 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v2 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v2 + 16) = a1;
  return v2;
}

uint64_t type metadata accessor for CATService()
{
  return self;
}

uint64_t CATService.execute(model:globals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  v4[24] = type metadata accessor for BehaviorAfterSpeaking();
  v4[25] = swift_task_alloc();
  return _swift_task_switch(CATService.execute(model:globals:), 0, 0);
}

uint64_t CATService.execute(model:globals:)()
{
  uint64_t v34 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0 + 7;
  uint64_t v4 = v0 + 12;
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[21];
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  uint64_t v8 = *(NSObject **)(v5 + 32);
  outlined init with copy of DeviceState(v6, (uint64_t)v2);
  outlined init with copy of DeviceState(v6, (uint64_t)v3);
  outlined init with copy of DeviceState(v6, (uint64_t)v4);
  os_log_type_t v9 = v7;
  if (os_log_type_enabled(v8, v7))
  {
    uint64_t v30 = v1[25];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315650;
    log = v8;
    uint64_t v12 = v1[5];
    uint64_t v11 = v1[6];
    __swift_project_boxed_opaque_existential_1(v2, v12);
    os_log_type_t type = v9;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v12, v11);
    v1[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v2);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v16 = v1[10];
    uint64_t v15 = v1[11];
    __swift_project_boxed_opaque_existential_1(v3, v16);
    (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
    uint64_t v17 = Dictionary.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    v1[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v3);
    *(_WORD *)(v10 + 22) = 2080;
    uint64_t v20 = v1[15];
    __swift_project_boxed_opaque_existential_1(v4, v20);
    GeoCATModel.getBehaviorAfterSpeaking()(v20, v30);
    uint64_t v21 = String.init<A>(describing:)();
    v1[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v4);
    _os_log_impl(&dword_0, log, type, "catId %s\nwith parameters %s\nbehaviourAfterSpeaking %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v2);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v3);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v4);
  }
  uint64_t v23 = v1[23];
  uint64_t v24 = swift_task_alloc();
  v1[26] = v24;
  long long v25 = *(_OWORD *)(v1 + 21);
  *(void *)(v24 + 16) = v23;
  *(_OWORD *)(v24 + 24) = v25;
  unint64_t v26 = (void *)swift_task_alloc();
  v1[27] = v26;
  uint64_t v27 = type metadata accessor for TemplatingResult();
  *unint64_t v26 = v1;
  v26[1] = CATService.execute(model:globals:);
  uint64_t v28 = v1[20];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v28, 0, 0, 0xD000000000000017, 0x80000000000C7930, partial apply for closure #1 in CATService.execute(model:globals:), v24, v27);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(CATService.execute(model:globals:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in CATService.execute(model:globals:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v26 = a4;
  uint64_t v27 = a2;
  uint64_t v23 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking();
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a3[3];
  uint64_t v12 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v11);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  unint64_t v14 = v13;
  uint64_t v16 = a3[3];
  uint64_t v15 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v16);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
  uint64_t v18 = a3[3];
  __swift_project_boxed_opaque_existential_1(a3, v18);
  GeoCATModel.getBehaviorAfterSpeaking()(v18, (uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)(v22, v14, v17, v26, (uint64_t)v10, (uint64_t)partial apply for closure #1 in closure #1 in CATService.execute(model:globals:), v20);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v10, v25);
}

uint64_t closure #1 in closure #1 in CATService.execute(model:globals:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TemplatingResult();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v13 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v9);
  uint64_t v11 = (void *)((char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13[1] = *v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v3 + 32))(v8, v11, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
    CheckedContinuation.resume(returning:)();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
}

uint64_t CATService.execute(model:globals:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v44 = a2;
  uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  uint64_t v12 = *(NSObject **)(v5 + 32);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v54);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v51);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v49);
  if (os_log_type_enabled(v12, v11))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v42 = v5;
    uint64_t v14 = v13;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v48 = v41;
    *(_DWORD *)uint64_t v14 = 136315650;
    uint64_t v43 = v8;
    os_log_t v40 = v12;
    uint64_t v16 = v55;
    uint64_t v15 = v56;
    __swift_project_boxed_opaque_existential_1(v54, v55);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
    HIDWORD(v39) = v11;
    uint64_t v18 = v17(v16, v15);
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v54);
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v20 = v52;
    uint64_t v21 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    uint64_t v22 = Dictionary.description.getter();
    uint64_t v23 = v7;
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v25, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v7 = v23;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v51);
    *(_WORD *)(v14 + 22) = 2080;
    uint64_t v26 = v50;
    __swift_project_boxed_opaque_existential_1(v49, v50);
    GeoCATModel.getBehaviorAfterSpeaking()(v26, (uint64_t)v10);
    uint64_t v27 = String.init<A>(describing:)();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v48);
    uint64_t v8 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v49);
    _os_log_impl(&dword_0, v40, BYTE4(v39), "catId %s\nwith parameters %s\nbehaviourAfterSpeaking %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v54);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v51);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v49);
  }
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v29);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
  unint64_t v33 = v32;
  uint64_t v34 = a1[3];
  uint64_t v35 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v34);
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
  uint64_t v37 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v37);
  GeoCATModel.getBehaviorAfterSpeaking()(v37, (uint64_t)v10);
  CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)(v31, v33, v36, v44, (uint64_t)v10, v45, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v57 = a6;
  uint64_t v58 = a7;
  uint64_t v52 = a4;
  uint64_t v63 = a3;
  unint64_t v64 = a2;
  uint64_t v65 = type metadata accessor for CATOption();
  uint64_t v11 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BehaviorAfterSpeaking();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v61 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = v17;
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)v46 - v18;
  os_log_type_t v20 = static os_log_type_t.info.getter();
  uint64_t v21 = *(NSObject **)(v8 + 32);
  uint64_t v53 = v15;
  uint64_t v22 = v15 + 16;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v56 = a5;
  uint64_t v24 = a5;
  uint64_t v25 = v22;
  v23(v19, v24, v14);
  os_log_t v51 = v21;
  BOOL v26 = os_log_type_enabled(v21, v20);
  uint64_t v59 = v13;
  uint64_t v60 = a1;
  uint64_t v62 = v25;
  unint64_t v54 = v23;
  if (v26)
  {
    unint64_t v27 = v64;
    swift_bridgeObjectRetain_n();
    uint64_t v49 = v8;
    swift_bridgeObjectRetain_n();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(void *)&long long v67 = v48;
    *(_DWORD *)uint64_t v28 = 136315650;
    uint64_t v50 = v11;
    swift_bridgeObjectRetain();
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v27, (uint64_t *)&v67);
    int v47 = v20;
    uint64_t v29 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    v46[1] = (char *)&type metadata for Any + 8;
    uint64_t v30 = Dictionary.description.getter();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v8 = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 22) = 2080;
    v23(v29, (uint64_t)v19, v14);
    uint64_t v33 = String.init<A>(describing:)();
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = v53;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v19, v14);
    _os_log_impl(&dword_0, v51, (os_log_type_t)v47, "catId %s\nwith parameters %s\nbehaviourAfterSpeaking %s", (uint8_t *)v28, 0x20u);
    uint64_t v11 = v50;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v35 = v53;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v19, v14);
  }
  uint64_t v53 = *(void *)(v8 + 24);
  int v36 = *(unsigned __int8 *)(v8 + 16);
  if (v36 == 2)
  {
    type metadata accessor for CATGlobals.Builder();
    CATGlobals.Builder.__allocating_init(siriLocale:)();
    dispatch thunk of CATGlobals.Builder.withRandomSeed(_:)();
    swift_release();
    uint64_t v37 = (void *)dispatch thunk of CATGlobals.Builder.build()();
    swift_release();
    uint64_t v69 = 0;
    long long v67 = 0u;
    long long v68 = 0u;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CATOption>);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_BFBF0;
    static CATOption.testMode.getter();
    static CATOption.resetState.getter();
    uint64_t v66 = v38;
    lazy protocol witness table accessor for type CATOption and conformance CATOption();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CATOption]);
    lazy protocol witness table accessor for type [CATOption] and conformance [A]();
    uint64_t v39 = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)();
  }
  else
  {
    type metadata accessor for CATGlobals();
    swift_bridgeObjectRetain();
    uint64_t v37 = (void *)CATGlobals.__allocating_init(dictionary:)();
    uint64_t v69 = 0;
    long long v67 = 0u;
    long long v68 = 0u;
    uint64_t v39 = v59;
    if (v36) {
      static CATOption.debugMode.getter();
    }
    else {
      static CATOption.defaultMode.getter();
    }
  }
  os_log_t v40 = v54;
  type metadata accessor for CATExecutor();
  uint64_t v41 = v61;
  v40(v61, v56, v14);
  unint64_t v42 = (*(unsigned __int8 *)(v35 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v43 = (char *)swift_allocObject();
  uint64_t v44 = v57;
  *((void *)v43 + 2) = v8;
  *((void *)v43 + 3) = v44;
  *((void *)v43 + 4) = v58;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v43[v42], v41, v14);
  swift_retain();
  swift_retain();
  static CATExecutor.execute(bundle:catId:parameters:globals:callback:options:_:)();
  swift_release();

  (*(void (**)(char *, uint64_t))(v11 + 8))(v39, v65);
  return outlined destroy of (label: String?, value: Any)?((uint64_t)&v67, &demangling cache variable for type metadata for CatCallable?);
}

uint64_t closure #1 in CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  uint64_t v21 = a3;
  uint64_t v4 = type metadata accessor for TemplatingResult();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v20 - v12);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)&v20 - v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = *v13;
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_C0600;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    void *v11 = v14;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v21(v11);
    swift_errorRelease();
    return outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v13, v4);
    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
    TemplatingResult.withBehaviorAfterSpeaking(_:)();
    swift_storeEnumTagMultiPayload();
    v21(v11);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t CATService.getLabel(model:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  uint64_t v6 = v5;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  uint64_t v10 = CATService.getLabel(catId:params:)(v4, v6, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t CATService.getLabel(catId:params:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v33 = a1;
  uint64_t v4 = type metadata accessor for TemplatingResult();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CATOption();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v28 - v14;
  type metadata accessor for CATExecutor();
  uint64_t v29 = v3;
  type metadata accessor for CATGlobals();
  memset(v36, 0, sizeof(v36));
  uint64_t v37 = 0;
  uint64_t v16 = (void *)CATGlobals.__allocating_init()();
  static CATOption.defaultMode.getter();
  static CATExecutor.execute(bundle:catId:parameters:globals:callback:options:)();

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v36, &demangling cache variable for type metadata for CatCallable?);
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v15, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = *v13;
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_C0600;
    swift_getErrorValue();
    uint64_t v19 = Error.localizedDescription.getter();
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
LABEL_6:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v15, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return v17;
  }
  uint64_t v23 = v30;
  uint64_t v22 = v31;
  uint64_t v24 = v32;
  (*(void (**)(char *, uint64_t *, uint64_t))(v31 + 32))(v30, v13, v32);
  uint64_t v25 = TemplatingResult.print.getter();
  if (!*(void *)(v25 + 16))
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v17 = swift_allocError();
    *(void *)uint64_t v26 = 0xD000000000000014;
    *(void *)(v26 + 8) = 0x80000000000C79F0;
    *(unsigned char *)(v26 + 16) = 0;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)(v25 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v15, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  return v17;
}

uint64_t CATService.executeRF(model:globals:)(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return _swift_task_switch(CATService.executeRF(model:globals:), 0, 0);
}

uint64_t CATService.executeRF(model:globals:)()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = (void *)v0[16];
  type metadata accessor for CATGlobals();
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)CATGlobals.__allocating_init(dictionary:)();
  dispatch thunk of CATGlobals.toDictionary.getter();
  swift_bridgeObjectRelease();

  uint64_t v4 = self;
  uint64_t v15 = *(void *)(v1 + 24);
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  NSString v7 = String._bridgeToObjectiveC()();
  v0[19] = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = v2[3];
  uint64_t v8 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v9);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v9, v8);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v10);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[20] = isa;
  swift_bridgeObjectRelease();
  Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[21] = v12;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = CATService.executeRF(model:globals:);
  uint64_t v13 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned DialogExecutionResult, @unowned NSError?) -> () with result type DialogExecutionResult;
  v0[13] = &block_descriptor;
  v0[14] = v13;
  [v4 execute:v15 catId:v7 parameters:isa globals:v12 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    uint64_t v2 = CATService.executeRF(model:globals:);
  }
  else {
    uint64_t v2 = CATService.executeRF(model:globals:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v2 = *(void **)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 120);

  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[21];
  uint64_t v3 = (void *)v0[19];
  uint64_t v2 = (void *)v0[20];
  swift_willThrow();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    outlined init with take of Any(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : Any].Iterator._Variant();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned DialogExecutionResult, @unowned NSError?) -> () with result type DialogExecutionResult(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(void **)(*(void *)(v3 + 64) + 40) = a2;
    id v8 = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t CATService.deinit()
{
  return v0;
}

uint64_t CATService.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t partial apply for closure #1 in CATService.execute(model:globals:)(uint64_t a1)
{
  return closure #1 in CATService.execute(model:globals:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type CATService.Mode and conformance CATService.Mode()
{
  unint64_t result = lazy protocol witness table cache variable for type CATService.Mode and conformance CATService.Mode;
  if (!lazy protocol witness table cache variable for type CATService.Mode and conformance CATService.Mode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CATService.Mode and conformance CATService.Mode);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CATService.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x302E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CATService.Mode()
{
  return &type metadata for CATService.Mode;
}

uint64_t outlined init with copy of Result<TemplatingResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_30388()
{
  uint64_t v1 = type metadata accessor for BehaviorAfterSpeaking();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)(uint64_t a1)
{
  type metadata accessor for BehaviorAfterSpeaking();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void (**)(void *))(v1 + 24);

  return closure #1 in CATService.execute(catId:parameters:globals:behaviorAfterSpeaking:_:)(a1, v3, v4);
}

uint64_t sub_304D4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in CATService.execute(model:globals:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);

  return closure #1 in closure #1 in CATService.execute(model:globals:)(a1);
}

uint64_t RedirectToServerFlow.execute()(uint64_t a1)
{
  v2[63] = a1;
  v2[64] = v1;
  uint64_t v3 = type metadata accessor for FlowUnhandledReason();
  v2[65] = v3;
  v2[66] = *(void *)(v3 - 8);
  v2[67] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[68] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AceOutput();
  v2[69] = v4;
  v2[70] = *(void *)(v4 - 8);
  v2[71] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v2[72] = v5;
  v2[73] = *(void *)(v5 - 8);
  v2[74] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v2[75] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  v2[76] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v2[77] = v6;
  v2[78] = *(void *)(v6 - 8);
  v2[79] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for PommesContext.Source();
  v2[80] = v7;
  v2[81] = *(void *)(v7 - 8);
  v2[82] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PommesContext();
  v2[83] = v8;
  v2[84] = *(void *)(v8 - 8);
  v2[85] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for NLContextUpdate();
  v2[86] = v9;
  v2[87] = *(void *)(v9 - 8);
  v2[88] = swift_task_alloc();
  return _swift_task_switch(RedirectToServerFlow.execute(), 0, 0);
}

uint64_t RedirectToServerFlow.execute()()
{
  long long v33 = v0;
  uint64_t v1 = (uint64_t *)v0[82];
  uint64_t v2 = v0[81];
  uint64_t v3 = v0[80];
  uint64_t v4 = v0[78];
  uint64_t v5 = v0[77];
  uint64_t v6 = v0[76];
  static GeoNLContextUtils.makeNLContextFor(weightedPromptResponseTargets:)();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  NLContextUpdate.currentDomainName.setter();
  uint64_t v7 = Data.init(base64Encoded:options:)();
  unint64_t v9 = v8;
  v0[89] = v7;
  v0[90] = v8;
  *uint64_t v1 = v7;
  v1[1] = v8;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v1, enum case for PommesContext.Source.pegasusResponse(_:), v3);
  outlined copy of Data?(v7, v9);
  PommesContext.init(source:domain:listenAfterSpeaking:)();
  PommesContext.exportPromptContext()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    uint64_t v10 = v0[64];
    outlined destroy of (label: String?, value: Any)?(v0[76], &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    unint64_t v12 = *(NSObject **)(v10 + 16);
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)unint64_t v14 = 136315138;
      swift_beginAccess();
      lazy protocol witness table accessor for type PommesContext and conformance PommesContext(&lazy protocol witness table cache variable for type PommesContext and conformance PommesContext, 255, (void (*)(uint64_t))&type metadata accessor for PommesContext);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[62] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v12, v13, "No promptContext on %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v17 = v0[79];
    uint64_t v18 = v0[78];
    uint64_t v19 = v0[77];
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 32))(v17, v0[76], v19);
    Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.setter();
    Com_Apple_Siri_Product_Proto_PromptContext.strictPrompt.setter();
    Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.setter();
    PommesContext.update(with:)();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  uint64_t v20 = v0[85];
  uint64_t v21 = v0[84];
  uint64_t v22 = v0[83];
  uint64_t v23 = v0[75];
  uint64_t v24 = v0[64];
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v23, v20, v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v22);
  NLContextUpdate.pommesContext.setter();
  static os_log_type_t.info.getter();
  v0[91] = *(void *)(v24 + 16);
  os_log(_:dso:log:_:_:)();
  v0[92] = type metadata accessor for CATService();
  uint64_t v25 = swift_allocObject();
  v0[93] = v25;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v0[94] = ObjCClassFromMetadata;
  int64_t v27 = self;
  v0[95] = v27;
  *(void *)(v25 + 24) = [v27 bundleForClass:ObjCClassFromMetadata];
  v0[96] = type metadata accessor for OS_os_log();
  *(void *)(v25 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v25 + 16) = 0;
  v0[27] = &type metadata for LocationSearch;
  v0[28] = &protocol witness table for LocationSearch;
  v0[25] = 0;
  v0[24] = 0;
  uint64_t v28 = static DialogHelper.globals.getter();
  v0[97] = v28;
  long long v29 = (void *)swift_task_alloc();
  v0[98] = v29;
  *long long v29 = v0;
  v29[1] = RedirectToServerFlow.execute();
  uint64_t v30 = v0[74];
  return CATService.execute(model:globals:)(v30, (uint64_t)(v0 + 24), v28);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 792) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = RedirectToServerFlow.execute();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 192);
    uint64_t v3 = RedirectToServerFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_0;
  void *v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v15 = *(void *)(v0 + 752);
  unint64_t v14 = *(void **)(v0 + 760);
  uint64_t v1 = *(void *)(v0 + 704);
  uint64_t v2 = *(void *)(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 688);
  uint64_t v4 = *(void *)(v0 + 568);
  unint64_t v16 = *(void *)(v0 + 560);
  uint64_t v17 = *(void *)(v0 + 552);
  uint64_t v5 = *(void *)(v0 + 544);
  static Device.current.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v5, 0, 1, v3);
  *(void *)(v0 + 304) = 0;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of (label: String?, value: Any)?(v0 + 272, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 232);
  static Device.current.getter();
  uint64_t v6 = type metadata accessor for GeoRCHFlowFactoryImpl();
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 800) = inited;
  *(void *)(v0 + 80) = v6;
  *(void *)(v0 + 88) = &protocol witness table for GeoRCHFlowFactoryImpl;
  *(void *)(v0 + 56) = inited;
  *(void *)(v0 + 96) = static DialogHelper.globals.getter();
  static AceService.currentAsync.getter();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  unint64_t v8 = swift_initStackObject();
  *(void *)(v0 + 808) = v8;
  *(void *)(v8 + 24) = objc_msgSend(v14, "bundleForClass:", v15, v0 + 272);
  *(void *)(v8 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v8 + 16) = 0;
  *(void *)(v0 + 184) = v8;
  outlined init with copy of DeviceState(v0 + 144, v0 + 352);
  outlined destroy of FlowHelperImpl(v0 + 16);
  unint64_t v9 = *(void *)(v0 + 376);
  uint64_t v10 = *(void *)(v0 + 384);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 352), v9);
  *(void *)(v0 + 336) = v17;
  *(void *)(v0 + 344) = &protocol witness table for AceOutput;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 312));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(boxed_opaque_existential_0, v4, v17);
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 816) = v12;
  *unint64_t v12 = v0;
  v12[1] = RedirectToServerFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 312, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 824) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = RedirectToServerFlow.execute();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 312);
    uint64_t v3 = RedirectToServerFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[72];
  uint64_t v4 = v0[71];
  uint64_t v5 = v0[70];
  uint64_t v6 = v0[69];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 44));
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  unint64_t v16 = v0[89];
  uint64_t v17 = v0[90];
  uint64_t v7 = v0[88];
  unint64_t v8 = v0[87];
  unint64_t v9 = v0[85];
  uint64_t v10 = v0[84];
  uint64_t v18 = v0[86];
  uint64_t v19 = v0[83];
  os_log_type_t v11 = v0[67];
  unint64_t v12 = v0[66];
  os_log_type_t v13 = v0[65];
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v11, enum case for FlowUnhandledReason.needsInfoDomainFallback(_:), v13);
  static ExecuteResponse.unhandled(reason:isComplete:)();
  outlined consume of Data?(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v18);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 24));
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  swift_errorRelease();
  uint64_t v10 = v0[89];
  os_log_type_t v11 = v0[90];
  uint64_t v1 = v0[88];
  uint64_t v2 = v0[87];
  uint64_t v3 = v0[85];
  uint64_t v4 = v0[84];
  unint64_t v12 = v0[86];
  os_log_type_t v13 = v0[83];
  uint64_t v5 = v0[67];
  uint64_t v6 = v0[66];
  uint64_t v7 = v0[65];
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for FlowUnhandledReason.needsInfoDomainFallback(_:), v7);
  static ExecuteResponse.unhandled(reason:isComplete:)();
  outlined consume of Data?(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v12);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[72];
  (*(void (**)(void, void))(v0[70] + 8))(v0[71], v0[69]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 39));
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 44));
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  swift_errorRelease();
  os_log_type_t v13 = v0[89];
  unint64_t v14 = v0[90];
  uint64_t v4 = v0[88];
  uint64_t v5 = v0[87];
  uint64_t v6 = v0[85];
  uint64_t v7 = v0[84];
  uint64_t v15 = v0[86];
  unint64_t v16 = v0[83];
  unint64_t v8 = v0[67];
  unint64_t v9 = v0[66];
  uint64_t v10 = v0[65];
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for FlowUnhandledReason.needsInfoDomainFallback(_:), v10);
  static ExecuteResponse.unhandled(reason:isComplete:)();
  outlined consume of Data?(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v15);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t RedirectToServerFlow.execute(completion:)()
{
  type metadata accessor for RedirectToServerFlow();
  lazy protocol witness table accessor for type PommesContext and conformance PommesContext(&lazy protocol witness table cache variable for type RedirectToServerFlow and conformance RedirectToServerFlow, v0, (void (*)(uint64_t))type metadata accessor for RedirectToServerFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t TrafficIncidentBaseRCHStrategy.deinit()
{
  return v0;
}

uint64_t TrafficIncidentBaseRCHStrategy.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t RedirectToServerFlow.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t RedirectToServerFlow.init()()
{
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.getter in conformance RedirectToServerFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.setter in conformance RedirectToServerFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

void (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance RedirectToServerFlow(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance RedirectToServerFlow;
}

void protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance RedirectToServerFlow(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t protocol witness for Flow.on(input:) in conformance RedirectToServerFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance RedirectToServerFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for Flow.execute() in conformance RedirectToServerFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 96) + **(int **)(**(void **)v1 + 96));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance RedirectToServerFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for RedirectToServerFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for RedirectToServerFlow()
{
  return self;
}

uint64_t base witness table accessor for Flow in RedirectToServerFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext(&lazy protocol witness table cache variable for type RedirectToServerFlow and conformance RedirectToServerFlow, a2, (void (*)(uint64_t))type metadata accessor for RedirectToServerFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in RedirectToServerFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PommesContext and conformance PommesContext(&lazy protocol witness table cache variable for type RedirectToServerFlow and conformance RedirectToServerFlow, a2, (void (*)(uint64_t))type metadata accessor for RedirectToServerFlow);
}

uint64_t lazy protocol witness table accessor for type PommesContext and conformance PommesContext(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void static GeoParse.getDomainIntent(parse:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v121 = a2;
  uint64_t v122 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v2 - 8);
  uint64_t v111 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v5 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v112 = v6;
  uint64_t v113 = v7;
  __chkstk_darwin(v6);
  uint64_t v117 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for USOParse();
  uint64_t v119 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  v118 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNode();
  uint64_t v107 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v115 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  uint64_t v114 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v13 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for NLIntent();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  v106 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v120 = (char *)&v105 - v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v105 - v23;
  uint64_t v25 = type metadata accessor for Parse();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (void **)((char *)&v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void **, uint64_t, uint64_t))(v26 + 16))(v28, v122, v25);
  int v29 = (*(uint64_t (**)(void **, uint64_t))(v26 + 88))(v28, v25);
  if (v29 != enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v105 = v18;
    uint64_t v122 = v17;
    if (v29 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(void **, uint64_t))(v26 + 96))(v28, v25);
      uint64_t v35 = *v28;
      uint64_t v36 = PommesResponse.firstGeoExperience.getter();
      if (!v36)
      {
        long long v68 = (_OWORD *)v121;
        *(void *)(v121 + 32) = 0;
        *long long v68 = 0u;
        v68[1] = 0u;

        return;
      }
      uint64_t v37 = (void *)v36;
      GeoExperience.geoClientComponent.getter();
      char v38 = Apple_Parsec_Siri_V2alpha_GeoClientComponent.hasLocationSearchNode.getter();
      long long v39 = *(void (**)(char *, uint64_t))(v114 + 8);
      v39(v13, v11);
      if ((v38 & 1) == 0)
      {

LABEL_25:
        unint64_t v75 = (_OWORD *)v121;
        *(void *)(v121 + 32) = 0;
        *unint64_t v75 = 0u;
        v75[1] = 0u;
        return;
      }
      GeoExperience.geoClientComponent.getter();
      os_log_t v40 = v115;
      Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter();
      v39(v13, v11);
      type metadata accessor for LocationSearchIntentBuilder();
      swift_allocObject();
      uint64_t v41 = *LocationSearchIntentBuilder.init()();
      uint64_t v42 = (*(uint64_t (**)(char *))(v41 + 376))(v40);
      uint64_t v43 = swift_release();
      uint64_t v44 = v120;
      (*(void (**)(uint64_t))(*(void *)v42 + 456))(v43);
      swift_release();
      uint64_t v45 = v105;
      uint64_t v46 = v106;
      uint64_t v47 = v122;
      (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v106, v44, v122);
      uint64_t v48 = type metadata accessor for LocationSearchIntent();
      uint64_t v49 = swift_allocObject();
      uint64_t v50 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
      if (one-time initialization token for domainNode != -1) {
        swift_once();
      }
      *(void *)(v49 + v50) = static LocationSearchIntent.domainNode;
      (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v49 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v46, v47);
      os_log_t v51 = (uint64_t *)v121;
      *(void *)(v121 + 24) = v48;
      v51[4] = (uint64_t)&protocol witness table for LocationSearchIntent;
      swift_retain();

      *os_log_t v51 = v49;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v47);
      (*(void (**)(char *, uint64_t))(v107 + 8))(v115, v108);
      return;
    }
    if (v29 != enum case for Parse.uso(_:))
    {
      long long v67 = (_OWORD *)v121;
      *(void *)(v121 + 32) = 0;
      *long long v67 = 0u;
      v67[1] = 0u;
      (*(void (**)(void **, uint64_t))(v26 + 8))(v28, v25);
      return;
    }
    (*(void (**)(void **, uint64_t))(v26 + 96))(v28, v25);
    uint64_t v57 = v28;
    uint64_t v58 = v116;
    (*(void (**)(char *, void **, uint64_t))(v119 + 32))(v118, v57, v116);
    USOParse.userParse.getter();
    uint64_t v59 = Siri_Nlu_External_UserParse.userDialogActs.getter();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v5, v110);
    if (*(void *)(v59 + 16))
    {
      uint64_t v61 = v112;
      uint64_t v60 = v113;
      uint64_t v62 = (uint64_t)v111;
      (*(void (**)(char *, unint64_t, uint64_t))(v113 + 16))(v111, v59 + ((*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80)), v112);
      uint64_t v63 = 0;
      uint64_t v64 = v122;
      uint64_t v65 = v105;
      uint64_t v66 = v117;
    }
    else
    {
      uint64_t v63 = 1;
      uint64_t v64 = v122;
      uint64_t v65 = v105;
      uint64_t v61 = v112;
      uint64_t v60 = v113;
      uint64_t v66 = v117;
      uint64_t v62 = (uint64_t)v111;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v62, v63, 1, v61);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v62, 1, v61) == 1)
    {
      (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v58);
      outlined destroy of (label: String?, value: Any)?(v62, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v76 = v121;
      *(_OWORD *)uint64_t v121 = 0u;
      *(_OWORD *)(v76 + 16) = 0u;
      *(void *)(v76 + 32) = 0;
      return;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v66, v62, v61);
    type metadata accessor for LocationSearchIntentBuilder();
    swift_allocObject();
    uint64_t v77 = LocationSearchIntentBuilder.init()();
    swift_retain();
    if (Siri_Nlu_External_UserDialogAct.hasCancelled.getter())
    {
      uint64_t v78 = (*(uint64_t (**)(uint64_t))(*v77 + 408))(2);
    }
    else if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter())
    {
      uint64_t v78 = (*(uint64_t (**)(void))(*v77 + 408))(0);
    }
    else
    {
      if ((Siri_Nlu_External_UserDialogAct.hasRejected.getter() & 1) == 0)
      {
        swift_release();
LABEL_36:
        uint64_t v80 = (uint64_t)v66;
        unint64_t v81 = Siri_Nlu_External_UserDialogAct.getTasks()();
        uint64_t v82 = v81;
        if (v81 >> 62)
        {
          if (_CocoaArrayWrapper.endIndex.getter())
          {
LABEL_38:
            if ((v82 & 0xC000000000000001) != 0)
            {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
              uint64_t v83 = v120;
            }
            else
            {
              uint64_t v83 = v120;
              if (!*(void *)((char *)&dword_10 + (v82 & 0xFFFFFFFFFFFFFF8)))
              {
                __break(1u);
LABEL_68:
                swift_once();
LABEL_61:
                *(void *)(v82 + v25) = static LocationSearchIntent.domainNode;
                (*(void (**)(uint64_t, char *, uint64_t))(v105 + 32))(v82 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v83, v122);
                uint64_t v98 = (uint64_t *)v121;
                *(void *)(v121 + 24) = v80;
                v98[4] = (uint64_t)&protocol witness table for LocationSearchIntent;
                swift_retain();
                swift_release();
                swift_release();
                *uint64_t v98 = v82;
                outlined destroy of (label: String?, value: Any)?((uint64_t)v125, &demangling cache variable for type metadata for Any?);
                (*(void (**)(char *, uint64_t))(v60 + 8))(v117, v61);
                (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v116);
                return;
              }
              swift_retain();
            }
            swift_bridgeObjectRelease();
            swift_retain();
            static UsoTask_CodegenConverter.convert(task:)();
            swift_release();
            outlined init with copy of Any?((uint64_t)v125, (uint64_t)v123);
            if (v124)
            {
              type metadata accessor for UsoTask_noVerb_common_Person();
              if (swift_dynamicCast())
              {
                swift_retain();
                dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
                swift_release();
                if (v123[0])
                {
                  uint64_t v84 = dispatch thunk of UsoEntity_common_Person.name.getter();
                  uint64_t v86 = v85;
                  swift_release();
                  if (v86)
                  {
                    uint64_t v87 = (*(uint64_t (**)(uint64_t, uint64_t))(*v77 + 440))(v84, v86);
                    swift_bridgeObjectRelease();
                    swift_release();
                    uint64_t v77 = (void *)v87;
                  }
                }
                swift_retain();
                dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
                swift_release();
                if (v123[0]
                  && (uint64_t v88 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter(),
                      swift_release(),
                      v88)
                  && (uint64_t v89 = dispatch thunk of UsoEntity_common_PersonRelationship.relationshipType.getter(),
                      uint64_t v91 = v90,
                      swift_release(),
                      v91))
                {
                  uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t))(*v77 + 432))(v89, v91);
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  uint64_t v77 = (void *)v92;
                }
                else
                {
                  swift_release();
                }
              }
            }
            else
            {
              outlined destroy of (label: String?, value: Any)?((uint64_t)v123, &demangling cache variable for type metadata for Any?);
            }
            outlined init with copy of Any?((uint64_t)v125, (uint64_t)v123);
            if (v124)
            {
              type metadata accessor for UsoTask_noVerb_common_PersonRelationship();
              uint64_t v93 = swift_dynamicCast();
              if (v93)
              {
                swift_retain();
                dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
                swift_release();
                if (v123[0]
                  && (uint64_t v94 = dispatch thunk of UsoEntity_common_PersonRelationship.relationshipType.getter(),
                      uint64_t v96 = v95,
                      swift_release(),
                      v96))
                {
                  uint64_t v97 = (*(uint64_t (**)(uint64_t, uint64_t))(*v77 + 432))(v94, v96);
                  swift_bridgeObjectRelease();
                  swift_release();
                  uint64_t v93 = swift_release();
                  uint64_t v77 = (void *)v97;
                }
                else
                {
                  uint64_t v93 = swift_release();
                }
              }
            }
            else
            {
              uint64_t v93 = outlined destroy of (label: String?, value: Any)?((uint64_t)v123, &demangling cache variable for type metadata for Any?);
            }
            (*(void (**)(uint64_t))(*v77 + 456))(v93);
            uint64_t v80 = type metadata accessor for LocationSearchIntent();
            uint64_t v82 = swift_allocObject();
            uint64_t v25 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
            if (one-time initialization token for domainNode == -1) {
              goto LABEL_61;
            }
            goto LABEL_68;
          }
        }
        else if (*(void *)((char *)&dword_10 + (v81 & 0xFFFFFFFFFFFFFF8)))
        {
          goto LABEL_38;
        }
        uint64_t v99 = swift_bridgeObjectRelease();
        long long v100 = v120;
        (*(void (**)(uint64_t))(*v77 + 456))(v99);
        uint64_t v101 = type metadata accessor for LocationSearchIntent();
        uint64_t v102 = swift_allocObject();
        uint64_t v103 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
        if (one-time initialization token for domainNode != -1) {
          swift_once();
        }
        *(void *)(v102 + v103) = static LocationSearchIntent.domainNode;
        (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v102 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v100, v64);
        long long v104 = (uint64_t *)v121;
        *(void *)(v121 + 24) = v101;
        uint64_t v104[4] = (uint64_t)&protocol witness table for LocationSearchIntent;
        swift_retain();
        swift_release();
        uint64_t *v104 = v102;
        (*(void (**)(char *, uint64_t))(v113 + 8))(v117, v61);
        (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v58);
        return;
      }
      uint64_t v78 = (*(uint64_t (**)(uint64_t))(*v77 + 408))(1);
    }
    uint64_t v79 = (void *)v78;
    swift_release_n();
    uint64_t v77 = v79;
    goto LABEL_36;
  }
  (*(void (**)(void **, uint64_t))(v26 + 96))(v28, v25);
  uint64_t v30 = v18;
  uint64_t v31 = *(void (**)(char *, void **, uint64_t))(v18 + 32);
  v31(v24, v28, v17);
  NLIntent.domainNode.getter();
  uint64_t v32 = type metadata accessor for NonTerminalIntentNode();
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v16, 1, v32) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for NonTerminalIntentNode?);
    uint64_t v34 = v18;
LABEL_24:
    (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v17);
    goto LABEL_25;
  }
  uint64_t v52 = (void (*)(uint64_t, char *, uint64_t))v31;
  uint64_t v53 = NonTerminalIntentNode.ontologyNodeName.getter();
  uint64_t v55 = v54;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v32);
  uint64_t v34 = v30;
  uint64_t v56 = v120;
  if (!v55) {
    goto LABEL_24;
  }
  if (v53 == 0x6E6F697461636F6CLL && v55 == 0xEE00686372616553)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v69 & 1) == 0) {
      goto LABEL_24;
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v56, v24, v17);
  uint64_t v70 = type metadata accessor for LocationSearchIntent();
  uint64_t v71 = swift_allocObject();
  uint64_t v72 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  *(void *)(v71 + v72) = static LocationSearchIntent.domainNode;
  v52(v71 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v56, v17);
  uint64_t v73 = (uint64_t *)v121;
  *(void *)(v121 + 24) = v70;
  v73[4] = (uint64_t)&protocol witness table for LocationSearchIntent;
  uint64_t *v73 = v71;
  uint64_t v74 = *(void (**)(char *, uint64_t))(v34 + 8);
  swift_retain();
  v74(v24, v17);
}

GeoFlowDelegatePlugin::GeoIntentType_optional __swiftcall GeoIntentType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GeoIntentType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = GeoFlowDelegatePlugin_GeoIntentType_locationSearch;
  }
  else {
    v4.value = GeoFlowDelegatePlugin_GeoIntentType_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t GeoIntentType.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6E6F697461636F6CLL;
  }
  else {
    return 0x6165536C61636F6CLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GeoIntentType(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = GeoIntentType.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == GeoIntentType.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeoIntentType()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  GeoIntentType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GeoIntentType()
{
  GeoIntentType.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeoIntentType()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  GeoIntentType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GeoIntentType@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GeoIntentType.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GeoIntentType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GeoIntentType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static GeoParse.getDomainIntent(input:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Parse();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  static GeoParse.getDomainIntent(parse:)((uint64_t)v5, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t GeoParse.deinit()
{
  return v0;
}

uint64_t GeoParse.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t GeoParse.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GeoIntentType and conformance GeoIntentType()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoIntentType and conformance GeoIntentType;
  if (!lazy protocol witness table cache variable for type GeoIntentType and conformance GeoIntentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoIntentType and conformance GeoIntentType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GeoIntentType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GeoIntentType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x339B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for GeoIntentType(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GeoIntentType()
{
  return &type metadata for GeoIntentType;
}

uint64_t type metadata accessor for GeoParse()
{
  return self;
}

uint64_t ShareETAContactDisambiguationStrategy.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 32, a1);
}

id ShareETAContactDisambiguationStrategy.skeletonPerson.getter()
{
  return *(id *)(v0 + 72);
}

uint64_t ShareETAContactDisambiguationStrategy.isPOMMES.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t ShareETAContactDisambiguationStrategy.isUSO.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t ShareETAContactDisambiguationStrategy.isUSO.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 81) = a1;
  return result;
}

uint64_t (*ShareETAContactDisambiguationStrategy.isUSO.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAContactDisambiguationStrategy.disambiguationItems.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShareETAContactDisambiguationStrategy.disambiguationItems.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 88) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ShareETAContactDisambiguationStrategy.disambiguationItems.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t ShareETAContactDisambiguationStrategy.weightedPromptResponseTargets.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for Error._domain.getter in conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError()
{
  return Error._getEmbeddedNSError()();
}

uint64_t ShareETAContactDisambiguationStrategy.__allocating_init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a4 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a4, v11);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = specialized ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)(a1, a2, a3, (uint64_t)v15, a5, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_0Tm(a4);
  return v17;
}

uint64_t ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a4 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a4, v11);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = specialized ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)(a1, a2, a3, (uint64_t)v15, a5, v5, v11, v12);
  __swift_destroy_boxed_opaque_existential_0Tm(a4);
  return v17;
}

uint64_t ShareETAContactDisambiguationStrategy.paginationStyle()()
{
  return static PaginationStyle.noPagination()();
}

void ShareETAContactDisambiguationStrategy.actionForInput(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v115 = a2;
  uint64_t v107 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v109 = *(void *)(v107 - 8);
  uint64_t v4 = __chkstk_darwin(v107);
  v106 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v114 = (char *)&v92 - v6;
  uint64_t v101 = type metadata accessor for USOParse();
  uint64_t v100 = *(void *)(v101 - 8);
  uint64_t v7 = __chkstk_darwin(v101);
  uint64_t v96 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v92 - v9;
  uint64_t v11 = type metadata accessor for NLIntent();
  uint64_t v112 = *(void *)(v11 - 8);
  uint64_t v113 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v110 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v111 = (char *)&v92 - v14;
  uint64_t v15 = type metadata accessor for Parse();
  uint64_t v117 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v116 = (void **)((char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v92 - v18;
  uint64_t v20 = type metadata accessor for Input();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v99 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v105 = (char *)&v92 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v92 - v26;
  uint64_t v95 = v2;
  uint64_t v28 = *(NSObject **)(v2 + 16);
  int v29 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v104 = v21 + 16;
  uint64_t v103 = v29;
  v29((char *)&v92 - v26, a1, v20);
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v28, v30);
  uint64_t v102 = v21;
  uint64_t v98 = v19;
  if (v31)
  {
    uint64_t v108 = v20;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v94 = a1;
    uint64_t v33 = (uint8_t *)v32;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v97 = v10;
    uint64_t v121 = (char *)v34;
    uint64_t v93 = v28;
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v92 = v33 + 4;
    Input.parse.getter();
    uint64_t v35 = String.init<A>(describing:)();
    *(void *)&long long v119 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v121);
    uint64_t v28 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v20 = v108;
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v21 + 8);
    v37(v27, v20);
    _os_log_impl(&dword_0, v28, v30, "actionForInput %s", v33, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v97;
    swift_slowDealloc();
    a1 = v94;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v21 + 8);
    v37(v27, v20);
  }
  char v38 = v116;
  Input.parse.getter();
  uint64_t v39 = v117;
  int v40 = (*(uint64_t (**)(void **, uint64_t))(v117 + 88))(v38, v15);
  if (v40 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(void **, uint64_t))(v39 + 96))(v38, v15);
    uint64_t v42 = v111;
    uint64_t v41 = v112;
    uint64_t v43 = *(void (**)(char *, void **, uint64_t))(v112 + 32);
    uint64_t v44 = v113;
    v43(v111, v38, v113);
    uint64_t v45 = v110;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v110, v42, v44);
    type metadata accessor for LocationSearchIntent();
    uint64_t v46 = swift_allocObject();
    uint64_t v47 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once();
    }
    *(void *)(v46 + v47) = static LocationSearchIntent.domainNode;
    v43((char *)(v46 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), (void **)v45, v44);
    uint64_t v121 = (char *)v46;
    uint64_t v48 = one-time initialization token for confirmationNode;
    swift_retain();
    if (v48 != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent, (void (*)(uint64_t))type metadata accessor for LocationSearchIntent);
    IntentNodeTraversable.value<A>(forNode:)();
    swift_release();
    switch((char)v119)
    {
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      case 3:
        goto LABEL_11;
      default:
        char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v49) {
LABEL_21:
        }
          static ActionForInput.cancel()();
        else {
LABEL_11:
        }
          static ActionForInput.handle()();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v44);
        break;
    }
    return;
  }
  if (v40 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v108 = v20;
    uint64_t v50 = a1;
    uint64_t v51 = v109;
    (*(void (**)(void **, uint64_t))(v39 + 96))(v38, v15);
    uint64_t v52 = v107;
    (*(void (**)(char *, void **, uint64_t))(v51 + 32))(v114, v38, v107);
    if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000002CLL && v53 == 0x80000000000C6780)
    {
      uint64_t v54 = v28;
      swift_bridgeObjectRelease();
      uint64_t v55 = v106;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v106, v114, v52);
    }
    else
    {
      uint64_t v54 = v28;
      char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v55 = v106;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v106, v114, v52);
      if ((v61 & 1) == 0)
      {
        uint64_t v63 = *(void (**)(char *, uint64_t))(v51 + 8);
        v63(v55, v52);
LABEL_32:
        os_log_type_t v70 = static os_log_type_t.info.getter();
        uint64_t v71 = v105;
        uint64_t v72 = v50;
        uint64_t v73 = v108;
        v103(v105, v72, v108);
        os_log_type_t v74 = v70;
        if (os_log_type_enabled(v54, v70))
        {
          unint64_t v75 = (uint8_t *)swift_slowAlloc();
          uint64_t v121 = (char *)swift_slowAlloc();
          *(_DWORD *)unint64_t v75 = 136315138;
          uint64_t v76 = Input.description.getter();
          *(void *)&long long v119 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, (uint64_t *)&v121);
          uint64_t v52 = v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v37(v105, v73);
          _os_log_impl(&dword_0, v54, v74, "Received invalid directInvocation type for ShareETA %s.", v75, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          v37(v71, v73);
        }
        static ActionForInput.ignore()();
        v63(v114, v52);
        return;
      }
    }
    uint64_t v62 = Parse.DirectInvocation.userData.getter();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v51 + 8);
    v63(v55, v52);
    swift_bridgeObjectRelease();
    if (v62)
    {
      static ActionForInput.handle()();
      v63(v114, v52);
      return;
    }
    goto LABEL_32;
  }
  if (v40 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v39 + 96))(v38, v15);
    uint64_t v56 = *v38;
    type metadata accessor for LocationSearchIntent();
    swift_allocObject();
    id v57 = v56;
    uint64_t v58 = LocationSearchIntent.init(from:)(v57);
    char v59 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 152))(v58);
    swift_release();
    switch(v59)
    {
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_39;
      case 3:
        goto LABEL_19;
      default:
        char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v60)
        {
LABEL_39:
          static ActionForInput.cancel()();
        }
        else
        {
LABEL_19:
          static ActionForInput.handle()();
        }
        break;
    }
  }
  else if (v40 == enum case for Parse.uso(_:))
  {
    (*(void (**)(void **, uint64_t))(v39 + 96))(v38, v15);
    uint64_t v64 = v38;
    uint64_t v65 = v100;
    (*(void (**)(char *, void **, uint64_t))(v100 + 32))(v10, v64, v101);
    type metadata accessor for GeoParse();
    uint64_t v66 = (uint64_t)v98;
    Input.parse.getter();
    static GeoParse.getDomainIntent(parse:)(v66, (uint64_t)&v119);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v66, v15);
    if (v120)
    {
      outlined init with take of CATType(&v119, (uint64_t)&v121);
      outlined init with copy of DeviceState((uint64_t)&v121, (uint64_t)&v119);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
      type metadata accessor for LocationSearchIntent();
      uint64_t v67 = swift_dynamicCast();
      char v68 = (*(uint64_t (**)(uint64_t))(*(void *)v118 + 152))(v67);
      swift_release();
      switch(v68)
      {
        case 2:
          swift_bridgeObjectRelease();
          goto LABEL_47;
        case 3:
          goto LABEL_30;
        default:
          char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v69)
          {
LABEL_47:
            static ActionForInput.cancel()();
          }
          else
          {
LABEL_30:
            (*(void (**)(uint64_t))(*(void *)v95 + 152))(1);
            static ActionForInput.handle()();
          }
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v121);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v10, v101);
          break;
      }
    }
    else
    {
      outlined destroy of (label: String?, value: Any)?((uint64_t)&v119, &demangling cache variable for type metadata for GeoIntent?);
      os_log_type_t v83 = static os_log_type_t.info.getter();
      uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
      uint64_t v85 = v96;
      uint64_t v97 = v10;
      v84(v96, v10, v101);
      os_log_type_t v86 = v83;
      if (os_log_type_enabled(v28, v83))
      {
        uint64_t v87 = (uint8_t *)swift_slowAlloc();
        uint64_t v121 = (char *)swift_slowAlloc();
        *(_DWORD *)uint64_t v87 = 136315138;
        uint64_t v88 = USOParse.debugDescription.getter();
        *(void *)&long long v119 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, (uint64_t *)&v121);
        uint64_t v90 = v101;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v91 = *(void (**)(char *, uint64_t))(v65 + 8);
        v91(v85, v90);
        _os_log_impl(&dword_0, v28, v86, "SiriGeo received a USO parse it doesn't support %s.", v87, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v91 = *(void (**)(char *, uint64_t))(v65 + 8);
        v91(v85, v101);
      }
      static ActionForInput.ignore()();
      v91(v97, v101);
    }
  }
  else
  {
    os_log_type_t v78 = static os_log_type_t.info.getter();
    uint64_t v79 = v99;
    v103(v99, a1, v20);
    if (os_log_type_enabled(v28, v78))
    {
      uint64_t v80 = (uint8_t *)swift_slowAlloc();
      uint64_t v114 = (char *)swift_slowAlloc();
      uint64_t v121 = v114;
      *(_DWORD *)uint64_t v80 = 136315138;
      uint64_t v81 = Input.description.getter();
      *(void *)&long long v119 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      char v38 = v116;
      v37(v79, v20);
      uint64_t v39 = v117;
      _os_log_impl(&dword_0, v28, v78, "SiriGeo received unsupported parse type %s.", v80, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v37(v79, v20);
    }
    static ActionForInput.ignore()();
    (*(void (**)(void **, uint64_t))(v39 + 8))(v38, v15);
  }
}

uint64_t ShareETAContactDisambiguationStrategy.parseDisambiguationResponse(input:paginatedItems:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[35] = a3;
  v4[36] = v3;
  v4[33] = a1;
  v4[34] = a2;
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation();
  v4[37] = v5;
  v4[38] = *(void *)(v5 - 8);
  v4[39] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Google_Protobuf_StringValue();
  unsigned char v4[40] = v6;
  v4[41] = *(void *)(v6 - 8);
  v4[42] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v4[43] = v7;
  v4[44] = *(void *)(v7 - 8);
  v4[45] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v4[46] = v8;
  v4[47] = *(void *)(v8 - 8);
  v4[48] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v4[49] = v9;
  v4[50] = *(void *)(v9 - 8);
  v4[51] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4[52] = v10;
  v4[53] = *(void *)(v10 - 8);
  v4[54] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v4[55] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  v4[56] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for USOParse();
  v4[57] = v11;
  v4[58] = *(void *)(v11 - 8);
  v4[59] = swift_task_alloc();
  v4[60] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNode();
  v4[61] = v12;
  v4[62] = *(void *)(v12 - 8);
  v4[63] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  v4[64] = v13;
  v4[65] = *(void *)(v13 - 8);
  v4[66] = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  v4[67] = v14;
  v4[68] = *(void *)(v14 - 8);
  v4[69] = swift_task_alloc();
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Input();
  unsigned char v4[72] = v15;
  v4[73] = *(void *)(v15 - 8);
  v4[74] = swift_task_alloc();
  v4[75] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for NLIntent();
  v4[76] = v16;
  v4[77] = *(void *)(v16 - 8);
  v4[78] = swift_task_alloc();
  v4[79] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for Parse();
  v4[80] = v17;
  v4[81] = *(void *)(v17 - 8);
  v4[82] = swift_task_alloc();
  v4[83] = swift_task_alloc();
  return _swift_task_switch(ShareETAContactDisambiguationStrategy.parseDisambiguationResponse(input:paginatedItems:), 0, 0);
}

id ShareETAContactDisambiguationStrategy.parseDisambiguationResponse(input:paginatedItems:)()
{
  unint64_t v350 = v0;
  unint64_t v1 = v0;
  unint64_t v2 = v0 + 208;
  uint64_t v3 = *(void *)(v0 + 664);
  uint64_t v4 = *(void *)(v1 + 648);
  uint64_t v5 = *(void *)(v1 + 640);
  Input.parse.getter();
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v3, v5);
  if (v6 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v7 = *(void *)(v1 + 664);
    uint64_t v8 = *(void *)(v1 + 648);
    uint64_t v9 = *(void *)(v1 + 640);
    uint64_t v10 = *(void *)(v1 + 632);
    uint64_t v11 = *(void *)(v1 + 616);
    uint64_t v12 = *(void *)(v1 + 608);
    uint64_t v13 = *(void *)(v1 + 600);
    uint64_t v14 = (void *)v1;
    uint64_t v15 = *(void *)(v1 + 584);
    uint64_t v16 = v14[72];
    uint64_t v17 = v14[36];
    uint64_t v18 = v14[34];
    (*(void (**)(uint64_t, uint64_t))(v8 + 96))(v7, v9);
    v330 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    id v336 = (id)(v11 + 32);
    v330(v10, v7, v12);
    LOBYTE(v7) = static os_log_type_t.default.getter();
    uint64_t v19 = *(NSObject **)(v17 + 16);
    v348 = v19;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v18, v16);
    os_log_type_t v20 = v7;
    if (os_log_type_enabled(v19, (os_log_type_t)v7))
    {
      uint64_t v21 = v14[75];
      uint64_t v22 = v14[73];
      uint64_t v325 = v14[72];
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      v349[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      Input.parse.getter();
      uint64_t v24 = String.init<A>(describing:)();
      v14[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v349);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v325);
      _os_log_impl(&dword_0, v348, v20, "parseDisambiguationResponse NLv3IntentOnly input.parse: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v14[73] + 8))(v14[75], v14[72]);
    }
    unint64_t v1 = (unint64_t)v14;
    v326 = v14 + 4;
    (*(void (**)(void, void, void))(v14[77] + 16))(v14[78], v14[79], v14[76]);
    type metadata accessor for LocationSearchIntent();
    uint64_t v48 = swift_allocObject();
    uint64_t v49 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once();
    }
    uint64_t v50 = v14[78];
    uint64_t v51 = v14[76];
    uint64_t v52 = v14[71];
    uint64_t v53 = v14[68];
    uint64_t v54 = v14[67];
    uint64_t v55 = v14[35];
    *(void *)(v48 + v49) = static LocationSearchIntent.domainNode;
    v330(v48 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v50, v51);
    swift_retain();
    os_log_type_t v56 = static os_log_type_t.info.getter();
    id v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
    v57(v52, v55, v54);
    if (os_log_type_enabled(v348, v56))
    {
      uint64_t v58 = *(void *)(v1 + 560);
      uint64_t v332 = *(void *)(v1 + 544);
      uint64_t v321 = *(void *)(v1 + 536);
      uint64_t v315 = *(void *)(v1 + 568);
      swift_retain_n();
      uint64_t v59 = swift_slowAlloc();
      v349[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136315394;
      *(void *)(v1 + 232) = v48;
      lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent, (void (*)(uint64_t))type metadata accessor for LocationSearchIntent);
      uint64_t v60 = NLIntentWrapper.description.getter();
      *(void *)(v1 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, v349);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v59 + 12) = 2080;
      id v336 = (id)v48;
      v57(v58, v315, v321);
      uint64_t v62 = String.init<A>(describing:)();
      *(void *)(v1 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v349);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v332 + 8))(v315, v321);
      _os_log_impl(&dword_0, v348, v56, "intent %s, paginatedItems %s", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v1 + 544) + 8))(*(void *)(v1 + 568), *(void *)(v1 + 536));
    }
    uint64_t v77 = (uint64_t)v326;
    *(void *)(v1 + 208) = v48;
    type metadata accessor for AddressOntologyNode.PersonPlaceNode();
    os_log_type_t v78 = (void *)static AddressOntologyNode.PersonPlaceNode.personPlaceIdNode.getter();
    lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent, (void (*)(uint64_t))type metadata accessor for LocationSearchIntent);
    IntentNodeTraversable.value<A>(forNode:)();
    swift_release();
    unint64_t v33 = *(void *)(v1 + 40);
    unint64_t v79 = v48;
    if (v33)
    {
      unint64_t v2 = *(void *)(v1 + 32);
      v346 = (void *)v1;
      unint64_t v80 = PaginatedItemContainer.items.getter();
      unint64_t v1 = v80;
      if (v80 >> 62)
      {
        uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
        if (v81) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v81 = *(void *)((char *)&dword_10 + (v80 & 0xFFFFFFFFFFFFFF8));
        if (v81)
        {
LABEL_28:
          unint64_t v340 = v1 & 0xC000000000000001;
          if ((v1 & 0xC000000000000001) != 0)
          {
LABEL_189:
            id v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_31:
            os_log_type_t v83 = v82;
            if (INPerson.encodeBase64.getter() == v2 && v33 == v84)
            {
              uint64_t v85 = v348;
LABEL_34:
              swift_bridgeObjectRelease();
              goto LABEL_41;
            }
            uint64_t v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v77)
            {
              uint64_t v85 = v348;
LABEL_41:
              id v42 = v83;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              os_log_type_t v105 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v85, v105))
              {
                id v106 = v83;
                uint64_t v107 = (uint8_t *)swift_slowAlloc();
                v349[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v107 = 136315138;
                id v108 = v106;
                uint64_t v109 = v83;
                id v110 = [v108 description];
                uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v113 = v112;

                id v42 = v109;
                v346[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v113, v349);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_0, v348, v105, "chosen item %s", v107, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              uint64_t v114 = v346[79];
              uint64_t v115 = v346[77];
              uint64_t v116 = v346[76];
              v346[27] = v42;
              type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
              static DisambiguationResult.chosenItem(_:)();
              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v116);
              unint64_t v1 = (unint64_t)v346;
              goto LABEL_44;
            }
            id v336 = (id)v79;

            if (v81 != 1)
            {
              unint64_t v79 = 5;
              while (1)
              {
                os_log_type_t v78 = (void *)(v79 - 4);
                if (v340)
                {
                  id v171 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  unint64_t v172 = v79 - 3;
                  if (__OFADD__(v78, 1)) {
                    goto LABEL_187;
                  }
                }
                else
                {
                  if ((unint64_t)v78 >= *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8))) {
                    goto LABEL_192;
                  }
                  id v171 = *(id *)(v1 + 8 * v79);
                  unint64_t v172 = v79 - 3;
                  if (__OFADD__(v78, 1))
                  {
LABEL_187:
                    __break(1u);
                    goto LABEL_188;
                  }
                }
                os_log_type_t v83 = v171;
                if (INPerson.encodeBase64.getter() == v2 && v33 == v173)
                {
                  uint64_t v85 = v348;
                  goto LABEL_34;
                }
                uint64_t v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v77)
                {
                  uint64_t v85 = v348;
                  goto LABEL_41;
                }

                ++v79;
                if (v172 == v81) {
                  goto LABEL_185;
                }
              }
            }
            goto LABEL_185;
          }
          if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
          {
            id v82 = *(id *)(v1 + 32);
            goto LABEL_31;
          }
          __break(1u);
          goto LABEL_191;
        }
      }
LABEL_185:
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v1 = (unint64_t)v346;
      uint64_t v304 = v346[79];
      uint64_t v305 = v346[77];
      uint64_t v306 = v346[76];
LABEL_186:
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v305 + 8))(v304, v306);
      goto LABEL_214;
    }
    (*(void (**)(void, void))(*(void *)(v1 + 616) + 8))(*(void *)(v1 + 632), *(void *)(v1 + 608));
    swift_release();
LABEL_214:
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError();
    swift_allocError();
    unsigned char *v313 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v117 = *(uint64_t (**)(void))(v1 + 8);
    goto LABEL_215;
  }
  uint64_t v26 = (uint64_t *)(v1 + 104);
  unint64_t v27 = v1 + 152;
  if (v6 != enum case for Parse.directInvocation(_:))
  {
    if (v6 == enum case for Parse.pommesResponse(_:))
    {
      uint64_t v64 = *(void ***)(v1 + 664);
      uint64_t v65 = *(void *)(v1 + 592);
      uint64_t v66 = *(void *)(v1 + 584);
      uint64_t v67 = *(void *)(v1 + 576);
      uint64_t v68 = *(void *)(v1 + 288);
      uint64_t v69 = *(void *)(v1 + 272);
      (*(void (**)(void **, void))(*(void *)(v1 + 648) + 96))(v64, *(void *)(v1 + 640));
      v341 = *v64;
      LOBYTE(v64) = static os_log_type_t.default.getter();
      os_log_type_t v70 = *(NSObject **)(v68 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v65, v69, v67);
      os_log_type_t v71 = v64;
      v348 = v70;
      if (os_log_type_enabled(v70, (os_log_type_t)v64))
      {
        uint64_t v72 = *(void *)(v1 + 592);
        uint64_t v73 = *(void *)(v1 + 584);
        uint64_t v337 = *(void *)(v1 + 576);
        os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
        v349[0] = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v74 = 136315138;
        Input.parse.getter();
        uint64_t v75 = String.init<A>(describing:)();
        *(void *)(v1 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, v349);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v337);
        _os_log_impl(&dword_0, v70, v71, "parseDisambiguationResponse pommesResponse input.parse: %s", v74, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(*(void *)(v1 + 584) + 8))(*(void *)(v1 + 592), *(void *)(v1 + 576));
      }
      uint64_t v143 = *(void *)(v1 + 552);
      uint64_t v144 = *(void *)(v1 + 544);
      uint64_t v145 = *(void *)(v1 + 536);
      uint64_t v146 = *(void *)(v1 + 280);
      type metadata accessor for LocationSearchIntent();
      swift_allocObject();
      id v336 = v341;
      uint64_t v147 = LocationSearchIntent.init(from:)(v336);
      os_log_type_t v148 = static os_log_type_t.info.getter();
      unint64_t v149 = *(void (**)(uint64_t, uint64_t, uint64_t))(v144 + 16);
      v149(v143, v146, v145);
      if (os_log_type_enabled(v70, v148))
      {
        uint64_t v316 = *(void *)(v1 + 560);
        *(void *)os_log_type_t typea = *(void *)(v1 + 552);
        uint64_t v342 = *(void *)(v1 + 544);
        uint64_t v314 = *(void *)(v1 + 536);
        swift_retain_n();
        unint64_t v150 = (void *)v1;
        uint64_t v151 = swift_slowAlloc();
        v349[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v151 = 136315394;
        v150[21] = v147;
        lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent, (void (*)(uint64_t))type metadata accessor for LocationSearchIntent);
        uint64_t v152 = NLIntentWrapper.description.getter();
        v150[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v152, v153, v349);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v151 + 12) = 2080;
        v149(v316, *(void *)typea, v314);
        uint64_t v154 = String.init<A>(describing:)();
        v150[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v154, v155, v349);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(os_log_type_t *, uint64_t))(v342 + 8))(*(os_log_type_t **)typea, v314);
        _os_log_impl(&dword_0, v70, v148, "intent %s, paginatedItems %s", (uint8_t *)v151, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v1 = (unint64_t)v150;
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(*(void *)(v1 + 544) + 8))(*(void *)(v1 + 552), *(void *)(v1 + 536));
      }
      os_log_type_t v156 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v70, v156))
      {
        id v157 = v336;
        unint64_t v158 = (uint8_t *)swift_slowAlloc();
        v349[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v158 = 136315138;
        unint64_t v159 = (void *)PommesResponse.firstGeoExperience.getter();
        if (v159)
        {
          uint64_t v160 = *(void *)(v1 + 528);
          uint64_t v161 = *(void *)(v1 + 520);
          uint64_t v163 = *(void *)(v1 + 504);
          uint64_t v162 = *(void *)(v1 + 512);
          uint64_t v164 = *(void *)(v1 + 496);
          *(void *)typeb = *(void *)(v1 + 488);
          GeoExperience.geoClientComponent.getter();

          Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter();
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v160, v162);
          unint64_t v159 = (void *)Apple_Parsec_Siri_V2alpha_LocationSearchNode.personPlaceID.getter();
          uint64_t v166 = v165;
          uint64_t v167 = v163;
          os_log_type_t v70 = v348;
          (*(void (**)(uint64_t, os_log_type_t *))(v164 + 8))(v167, *(os_log_type_t **)typeb);
        }
        else
        {
          uint64_t v166 = 0;
        }
        *(void *)(v1 + 16) = v159;
        *(void *)(v1 + 24) = v166;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v182 = String.init<A>(describing:)();
        *(void *)(v1 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v182, v183, v349);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v70, v156, "PPID: %s", v158, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      uint64_t v184 = PommesResponse.firstGeoExperience.getter();
      v346 = (void *)v1;
      if (!v184)
      {
        uint64_t v203 = *(void *)(v1 + 288);
LABEL_196:
        uint64_t v335 = (*(uint64_t (**)(void))(*(void *)v203 + 168))();
        uint64_t v307 = *(void *)(v335 + 16);
        if (v307)
        {
          v308 = (unint64_t *)(v335 + 40);
          do
          {
            uint64_t v311 = *(v308 - 1);
            unint64_t v310 = *v308;
            swift_bridgeObjectRetain();
            os_log_type_t v312 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v312))
            {
              swift_bridgeObjectRetain();
              uint64_t v309 = swift_slowAlloc();
              v349[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v309 = 136315138;
              swift_bridgeObjectRetain();
              *(void *)(v309 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v311, v310, v349);
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_0, v348, v312, "handle %s", (uint8_t *)v309, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              os_log_type_t v70 = v348;
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            v308 += 2;
            --v307;
          }
          while (v307);
        }

        swift_bridgeObjectRelease();
        swift_release();
        unint64_t v1 = (unint64_t)v346;
        goto LABEL_214;
      }
      long long v185 = (void *)v184;
      uint64_t v186 = *(void *)(v1 + 528);
      unint64_t v187 = (void *)v1;
      uint64_t v188 = *(void *)(v1 + 520);
      uint64_t v190 = v187[63];
      uint64_t v189 = v187[64];
      uint64_t v191 = v187[61];
      uint64_t v192 = v187[62];
      uint64_t v193 = v187[36];
      GeoExperience.geoClientComponent.getter();

      Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter();
      (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v186, v189);
      uint64_t v77 = Apple_Parsec_Siri_V2alpha_LocationSearchNode.personPlaceID.getter();
      unint64_t v1 = v194;
      (*(void (**)(uint64_t, uint64_t))(v192 + 8))(v190, v191);
      unint64_t v79 = PaginatedItemContainer.items.getter();
      os_log_type_t v78 = (void *)(*(uint64_t (**)(void))(*(void *)v193 + 168))();
      if (!(v79 >> 62))
      {
        uint64_t v195 = *(void *)((char *)&dword_10 + (v79 & 0xFFFFFFFFFFFFFF8));
        os_log_type_t v70 = v348;
        if (!v195)
        {
LABEL_194:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_195;
        }
        goto LABEL_100;
      }
LABEL_193:
      swift_bridgeObjectRetain();
      uint64_t v195 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      os_log_type_t v70 = v348;
      if (!v195) {
        goto LABEL_194;
      }
LABEL_100:
      if ((v79 & 0xC000000000000001) != 0)
      {
        id v196 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_103:
        v197 = v196;
        uint64_t v198 = v78[2];
        if (!v198)
        {
LABEL_120:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

LABEL_195:
          swift_bridgeObjectRelease();
          uint64_t v203 = v346[36];
          goto LABEL_196;
        }
        unint64_t v199 = v1;
        unint64_t v200 = v78[5];
        uint64_t v323 = v78[4];
        v329 = v78;
        swift_bridgeObjectRetain();
        v333 = v197;
        unint64_t v343 = v200;
        if (INPerson.encodeBase64.getter() == v77 && v201 == v199)
        {
LABEL_106:
          swift_bridgeObjectRelease();
          v202 = v333;
          goto LABEL_126;
        }
        unint64_t v234 = v199;
        char v235 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v235 & 1) == 0)
        {
          if (v323 != v77 || v343 != v199)
          {
            v202 = v333;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {

              id result = (id)swift_bridgeObjectRelease();
              uint64_t v317 = v195 - 1;
              if (v195 != 1)
              {
                uint64_t v298 = 0;
                v299 = v78 + 7;
                while (1)
                {
                  unint64_t v300 = v298 + 1;
                  if ((v79 & 0xC000000000000001) != 0)
                  {
                    id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else
                  {
                    if (v300 >= *(void *)((char *)&dword_10 + (v79 & 0xFFFFFFFFFFFFFF8))) {
                      goto LABEL_219;
                    }
                    id result = *(id *)(v79 + 40 + 8 * v298);
                  }
                  v197 = result;
                  if (v198 - 1 == v298) {
                    goto LABEL_120;
                  }
                  if (v300 >= v329[2]) {
                    break;
                  }
                  uint64_t v323 = *(v299 - 1);
                  unint64_t v343 = *v299;
                  swift_bridgeObjectRetain();
                  v333 = v197;
                  if (INPerson.encodeBase64.getter() == v77 && v301 == v234) {
                    goto LABEL_106;
                  }
                  uint64_t v302 = v77;
                  char v303 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v303) {
                    goto LABEL_125;
                  }
                  uint64_t v77 = v302;
                  if (v323 == v302 && v343 == v234) {
                    goto LABEL_124;
                  }
                  v202 = v333;
                  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                    goto LABEL_126;
                  }

                  id result = (id)swift_bridgeObjectRelease();
                  v299 += 2;
                  if (v317 == ++v298) {
                    goto LABEL_194;
                  }
                }
                __break(1u);
LABEL_219:
                __break(1u);
                return result;
              }
              goto LABEL_194;
            }
LABEL_126:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            os_log_type_t v236 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v236))
            {
              id v237 = v202;
              unint64_t v238 = (uint8_t *)swift_slowAlloc();
              v349[0] = swift_slowAlloc();
              *(_DWORD *)unint64_t v238 = 136315138;
              id v239 = v237;
              id v240 = [v239 description];
              uint64_t v241 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v243 = v242;

              v346[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v241, v243, v349);
              os_log_type_t v70 = v348;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_0, v348, v236, "chosen item %s", v238, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            os_log_type_t v244 = static os_log_type_t.info.getter();
            id v42 = v202;
            swift_bridgeObjectRetain();
            if (os_log_type_enabled(v70, v244))
            {
              uint64_t v245 = swift_slowAlloc();
              v349[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v245 = 136315394;
              uint64_t v246 = INPerson.encodeBase64.getter();
              v346[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v246, v247, v349);
              unint64_t v1 = (unint64_t)v346;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v245 + 12) = 2080;
              swift_bridgeObjectRetain();
              v346[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v323, v343, v349);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_0, v348, v244, "sessionHandle: %s\nAlternateHandle: %s", (uint8_t *)v245, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease_n();

              unint64_t v1 = (unint64_t)v346;
            }
            *(void *)(v1 + 120) = v42;
            type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
            static DisambiguationResult.chosenItem(_:)();
            swift_release();

            goto LABEL_44;
          }
LABEL_124:
          uint64_t v323 = v77;
          unint64_t v343 = v234;
        }
LABEL_125:
        v202 = v333;
        goto LABEL_126;
      }
      if (*(void *)((char *)&dword_10 + (v79 & 0xFFFFFFFFFFFFFF8)))
      {
        id v196 = *(id *)(v79 + 32);
        goto LABEL_103;
      }
      __break(1u);
      goto LABEL_205;
    }
    uint64_t v86 = *(void *)(v1 + 664);
    uint64_t v87 = *(void *)(v1 + 648);
    uint64_t v88 = *(void *)(v1 + 640);
    if (v6 != enum case for Parse.uso(_:))
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
      goto LABEL_214;
    }
    v338 = (uint64_t *)(v1 + 112);
    uint64_t v90 = *(void *)(v1 + 472);
    uint64_t v89 = *(void *)(v1 + 480);
    uint64_t v91 = *(void *)(v1 + 464);
    v346 = (void *)v1;
    uint64_t v92 = *(void *)(v1 + 456);
    uint64_t v93 = (void *)v346[36];
    (*(void (**)(uint64_t, uint64_t))(v87 + 96))(v86, v88);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32))(v89, v86, v92);
    (*(void (**)(uint64_t))(*v93 + 152))(1);
    os_log_type_t v94 = static os_log_type_t.default.getter();
    v348 = v93[2];
    uint64_t v95 = v92;
    unint64_t v1 = (unint64_t)v346;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v90, v89, v95);
    os_log_type_t v96 = v94;
    BOOL v97 = os_log_type_enabled(v348, v94);
    uint64_t v99 = v346[58];
    uint64_t v98 = v346[59];
    uint64_t v100 = v346[57];
    v328 = v26;
    if (v97)
    {
      uint64_t v101 = (uint8_t *)swift_slowAlloc();
      v349[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v101 = 136315138;
      uint64_t v102 = USOParse.debugDescription.getter();
      uint64_t *v338 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, v349);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
      v104(v98, v100);
      _os_log_impl(&dword_0, v348, v96, "received parse: %s", v101, 0xCu);
      swift_arrayDestroy();
      unint64_t v1 = (unint64_t)v346;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
      v104(v98, v100);
    }
    uint64_t v174 = *(void *)(v1 + 424);
    uint64_t v175 = *(void *)(v1 + 432);
    uint64_t v176 = *(void *)(v1 + 416);
    USOParse.userParse.getter();
    uint64_t v177 = Siri_Nlu_External_UserParse.userDialogActs.getter();
    (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v175, v176);
    uint64_t v178 = *(void *)(v177 + 16);
    uint64_t v179 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    uint64_t v180 = *(void *)(v179 - 8);
    if (v178)
    {
      (*(void (**)(void, unint64_t, uint64_t))(*(void *)(v179 - 8) + 16))(*(void *)(v1 + 440), v177+ ((*(unsigned __int8 *)(*(void *)(v179 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v179 - 8) + 80)), v179);
      uint64_t v181 = 0;
    }
    else
    {
      uint64_t v181 = 1;
    }
    uint64_t v204 = *(void *)(v1 + 440);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 + 56))(v204, v181, 1, v179);
    swift_bridgeObjectRelease();
    int v205 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v180 + 48))(v204, 1, v179);
    uint64_t v206 = *(void *)(v1 + 440);
    if (v205 == 1)
    {
      outlined destroy of (label: String?, value: Any)?(*(void *)(v1 + 440), &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_213:
      v104(*(void *)(v1 + 480), *(void *)(v1 + 456));
      goto LABEL_214;
    }
    os_log_type_t type = v104;
    uint64_t v208 = *(void *)(v1 + 400);
    uint64_t v207 = *(void *)(v1 + 408);
    v209 = (void *)v1;
    unint64_t v212 = v1 + 384;
    uint64_t v211 = *(void *)(v1 + 384);
    uint64_t v210 = *(void *)(v212 + 8);
    uint64_t v214 = v209[46];
    uint64_t v213 = v209[47];
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v206, v179);
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v207, v210);
    uint64_t v215 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    (*(void (**)(uint64_t, uint64_t))(v213 + 8))(v211, v214);
    uint64_t v216 = *(void *)(v215 + 16);
    if (v216)
    {
      uint64_t v217 = v209[44];
      v219 = *(void (**)(uint64_t, unint64_t, void))(v217 + 16);
      uint64_t v218 = v217 + 16;
      v344 = v219;
      unint64_t v220 = v215 + ((*(unsigned __int8 *)(v218 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v218 + 64));
      long long v221 = (void (**)(uint64_t, uint64_t))(v209[41] + 8);
      uint64_t v222 = *(void *)(v218 + 56);
      swift_bridgeObjectRetain();
      unint64_t v1 = (unint64_t)v209;
      while (1)
      {
        uint64_t v223 = *(void *)(v1 + 360);
        unint64_t v224 = v1;
        unint64_t v226 = v1 + 336;
        uint64_t v225 = *(void *)(v1 + 336);
        uint64_t v227 = *(void *)(v224 + 320);
        v344(v223, v220, *(void *)(v226 + 8));
        Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
        uint64_t v228 = Google_Protobuf_StringValue.value.getter();
        uint64_t v230 = v229;
        (*v221)(v225, v227);
        if (v228 == 0x64695F6D657469 && v230 == 0xE700000000000000) {
          break;
        }
        char v232 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v232) {
          goto LABEL_136;
        }
        unint64_t v1 = (unint64_t)v346;
        (*(void (**)(void, void))(v218 - 8))(v346[45], v346[43]);
        v220 += v222;
        if (!--v216)
        {
          swift_bridgeObjectRelease();
          uint64_t v233 = 1;
          goto LABEL_137;
        }
      }
      swift_bridgeObjectRelease();
LABEL_136:
      swift_bridgeObjectRelease();
      unint64_t v1 = (unint64_t)v346;
      (*(void (**)(void, void, void))(v346[44] + 32))(v346[56], v346[45], v346[43]);
      uint64_t v233 = 0;
    }
    else
    {
      uint64_t v233 = 1;
      unint64_t v1 = (unint64_t)v209;
    }
LABEL_137:
    uint64_t v248 = *(void *)(v1 + 448);
    uint64_t v250 = *(void *)(v1 + 344);
    uint64_t v249 = *(void *)(v1 + 352);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v249 + 56))(v248, v233, 1, v250);
    swift_bridgeObjectRelease();
    int v251 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v249 + 48))(v248, 1, v250);
    uint64_t v252 = *(void *)(v1 + 448);
    if (v251 == 1)
    {
      outlined destroy of (label: String?, value: Any)?(*(void *)(v1 + 448), &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
LABEL_212:
      uint64_t v104 = type;
      goto LABEL_213;
    }
    uint64_t v254 = *(void *)(v1 + 344);
    uint64_t v253 = *(void *)(v1 + 352);
    uint64_t v345 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    unint64_t v327 = v255;
    v256 = *(void (**)(uint64_t, uint64_t))(v253 + 8);
    uint64_t v77 = v253 + 8;
    v256(v252, v254);
    os_log_type_t v257 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v348, v257))
    {
      swift_bridgeObjectRetain_n();
      v258 = (uint8_t *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      v349[0] = v77;
      *(_DWORD *)v258 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t *v328 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v345, v327, v349);
      unint64_t v1 = (unint64_t)v346;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v348, v257, "contactId on disambiguation is %s", v258, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    unint64_t v259 = PaginatedItemContainer.items.getter();
    unint64_t v79 = v259;
    if (v259 >> 62)
    {
      os_log_type_t v78 = (void *)_CocoaArrayWrapper.endIndex.getter();
      unint64_t v260 = v327;
      if (v78)
      {
LABEL_143:
        uint64_t v261 = 0;
        id v336 = (id)(v79 & 0xC000000000000001);
        v262 = v348;
        v334 = v78;
        while (1)
        {
          id v263 = v336
               ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
               : *(id *)(v79 + 8 * v261 + 32);
          v264 = v263;
          v265 = (void *)(v261 + 1);
          if (__OFADD__(v261, 1)) {
            break;
          }
          os_log_type_t v266 = static os_log_type_t.default.getter();
          id v42 = v264;
          if (os_log_type_enabled(v262, v266))
          {
            id v267 = v42;
            uint64_t v268 = swift_slowAlloc();
            v349[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v268 = 136315394;
            uint64_t v77 = (uint64_t)v267;
            id v269 = [(id)v77 description];
            uint64_t v270 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v272 = v271;

            *(void *)(v268 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v270, v272, v349);
            swift_bridgeObjectRelease();
            *(_WORD *)(v268 + 12) = 2080;
            id v273 = [(id)v77 contactIdentifier];
            if (v273)
            {
              v274 = v273;
              uint64_t v275 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v277 = v276;
            }
            else
            {
              uint64_t v275 = 0;
              uint64_t v277 = 0;
            }
            v346[8] = v275;
            v346[9] = v277;
            unint64_t v1 = (unint64_t)v346;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            uint64_t v278 = String.init<A>(describing:)();
            *(void *)(v268 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v278, v279, v349);

            swift_bridgeObjectRelease();
            v262 = v348;
            _os_log_impl(&dword_0, v348, v266, "%s has contactId %s", (uint8_t *)v268, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            unint64_t v260 = v327;
          }
          else
          {
          }
          id v280 = [v42 contactIdentifier];
          if (v280)
          {
            v281 = v280;
            uint64_t v282 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v284 = v283;

            if (v345 == v282 && v260 == v284)
            {
              swift_bridgeObjectRelease();
LABEL_160:
              uint64_t v285 = *(void *)(v1 + 480);
              uint64_t v286 = *(void *)(v1 + 456);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(void *)(v1 + 88) = v42;
              type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
              static DisambiguationResult.chosenItem(_:)();
              type(v285, v286);
              goto LABEL_44;
            }
            uint64_t v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v77) {
              goto LABEL_160;
            }
          }

          ++v261;
          os_log_type_t v78 = v334;
          if (v265 == v334) {
            goto LABEL_211;
          }
        }
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
        goto LABEL_193;
      }
    }
    else
    {
      os_log_type_t v78 = *(void **)((char *)&dword_10 + (v259 & 0xFFFFFFFFFFFFFF8));
      unint64_t v260 = v327;
      if (v78) {
        goto LABEL_143;
      }
    }
LABEL_211:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_212;
  }
  v331 = (uint64_t *)(v1 + 200);
  uint64_t v28 = *(void *)(v1 + 664);
  uint64_t v29 = *(void *)(v1 + 304);
  uint64_t v30 = *(void *)(v1 + 312);
  uint64_t v31 = *(void *)(v1 + 296);
  (*(void (**)(uint64_t, void))(*(void *)(v1 + 648) + 96))(v28, *(void *)(v1 + 640));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v30, v28, v31);
  uint64_t v32 = Parse.DirectInvocation.userData.getter();
  if (v32)
  {
    unint64_t v33 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v32);
    swift_bridgeObjectRelease();
    if (v33)
    {
      uint64_t v34 = *(NSObject **)(*(void *)(v1 + 288) + 16);
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        unint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v36 = 0;
        _os_log_impl(&dword_0, v34, v35, "choose by index", v36, 2u);
        swift_slowDealloc();
      }
      if (*(void *)(v33 + 16))
      {
        unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(0x7865646E69, 0xE500000000000000);
        if (v38)
        {
          unint64_t v39 = *(void *)(*(void *)(v33 + 56) + 8 * v37);
          swift_bridgeObjectRelease();
          uint64_t v40 = PaginatedItemContainer.items.getter();
          if ((v40 & 0xC000000000000001) != 0)
          {
LABEL_205:
            id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            goto LABEL_15;
          }
          if ((v39 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v39 < *(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFFF8)))
          {
            id v41 = *(id *)(v40 + 8 * v39 + 32);
LABEL_15:
            id v42 = v41;
            unint64_t v43 = v1;
            unint64_t v46 = v1 + 304;
            uint64_t v45 = *(void *)(v1 + 304);
            uint64_t v44 = *(void *)(v46 + 8);
            uint64_t v47 = *(void *)(v43 + 296);
            swift_bridgeObjectRelease();
            *(void *)(v43 + 80) = v42;
            type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
            static DisambiguationResult.chosenItem(_:)();
            (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v47);
            unint64_t v1 = v43;
            goto LABEL_44;
          }
          __break(1u);
          goto LABEL_208;
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v118 = Parse.DirectInvocation.userData.getter();
  if (!v118
    || (unint64_t v119 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v118), swift_bridgeObjectRelease(), !v119))
  {
    uint64_t v140 = *(void *)(v1 + 304);
    uint64_t v141 = *(void *)(v1 + 312);
    uint64_t v142 = *(void *)(v1 + 296);
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v141, v142);
    goto LABEL_214;
  }
  if (!*(void *)(v119 + 16)
    || (unint64_t v120 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E65697069636552, 0xE900000000000074),
        (v121 & 1) == 0))
  {
    uint64_t v168 = *(void *)(v1 + 304);
    uint64_t v169 = *(void *)(v1 + 312);
    uint64_t v170 = *(void *)(v1 + 296);
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v169, v170);
    goto LABEL_214;
  }
  unint64_t v340 = v2;
  uint64_t v122 = *(void *)(v1 + 288);
  uint64_t v123 = (unint64_t *)(*(void *)(v119 + 56) + 16 * v120);
  unint64_t v33 = *v123;
  unint64_t v2 = v123[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_log_type_t v124 = static os_log_type_t.default.getter();
  v348 = *(NSObject **)(v122 + 16);
  unint64_t v324 = v33;
  if (os_log_type_enabled(v348, v124))
  {
    swift_bridgeObjectRetain_n();
    v125 = (uint8_t *)swift_slowAlloc();
    v349[0] = swift_slowAlloc();
    *(_DWORD *)v125 = 136315138;
    *(void *)(v1 + 48) = v33;
    *(void *)(v1 + 56) = v2;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v126 = String.init<A>(describing:)();
    *(void *)(v1 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v126, v127, v349);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v348, v124, "From Payload person: %s", v125, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  unint64_t v128 = PaginatedItemContainer.items.getter();
  unint64_t v27 = v128;
  if (!(v128 >> 62))
  {
    uint64_t v129 = *(void *)((char *)&dword_10 + (v128 & 0xFFFFFFFFFFFFFF8));
    if (!v129)
    {
LABEL_209:
      uint64_t v305 = *(void *)(v1 + 304);
      uint64_t v304 = *(void *)(v1 + 312);
      uint64_t v306 = *(void *)(v1 + 296);
      swift_bridgeObjectRelease();
      goto LABEL_186;
    }
    goto LABEL_54;
  }
LABEL_208:
  uint64_t v129 = _CocoaArrayWrapper.endIndex.getter();
  if (!v129) {
    goto LABEL_209;
  }
LABEL_54:
  unint64_t v79 = 0;
  uint64_t v322 = v129;
  uint64_t v81 = (uint64_t)v348;
  while (1)
  {
    if ((v27 & 0xC000000000000001) != 0) {
      id v131 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v131 = *(id *)(v27 + 8 * v79 + 32);
    }
    uint64_t v132 = v131;
    if (__OFADD__(v79, 1))
    {
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    unint64_t v339 = v79 + 1;
    os_log_type_t v133 = static os_log_type_t.default.getter();
    id v134 = v132;
    if (os_log_type_enabled(v348, v133))
    {
      uint64_t v135 = swift_slowAlloc();
      v349[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v135 = 136315138;
      uint64_t v136 = INPerson.encodeBase64.getter();
      *(void *)(v135 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v137, v349);

      uint64_t v129 = v322;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v348, v133, "person from list: %s", (uint8_t *)v135, 0xCu);
      swift_arrayDestroy();
      unint64_t v33 = v324;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v138 = INPerson.encodeBase64.getter();
    if (!v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    if (v138 == v33 && v2 == v139) {
      break;
    }
    char v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v130) {
      goto LABEL_161;
    }
LABEL_56:

    ++v79;
    if (v339 == v129) {
      goto LABEL_209;
    }
  }
  swift_bridgeObjectRelease();
LABEL_161:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_log_type_t v287 = static os_log_type_t.default.getter();
  id v42 = v134;
  if (os_log_type_enabled(v348, v287))
  {
    v288 = (uint8_t *)swift_slowAlloc();
    v349[0] = swift_slowAlloc();
    *(_DWORD *)v288 = 136315138;
    unint64_t v347 = v1;
    id v289 = v42;
    id v290 = [v289 description];
    uint64_t v291 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v293 = v292;

    uint64_t *v331 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v291, v293, v349);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    unint64_t v1 = v347;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v348, v287, "chosen item %s", v288, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v295 = *(void *)(v1 + 304);
  uint64_t v294 = *(void *)(v1 + 312);
  uint64_t v296 = *(void *)(v1 + 296);
  *(void *)(v1 + 152) = v42;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
  static DisambiguationResult.chosenItem(_:)();
  (*(void (**)(uint64_t, uint64_t))(v295 + 8))(v294, v296);
LABEL_44:

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v117 = *(uint64_t (**)(void))(v1 + 8);
LABEL_215:
  return (id)v117();
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v31 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  int v6 = &v37;
  int64_t v30 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any);
  uint64_t v10 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v5)
    {
      uint64_t v32 = (v5 - 1) & v5;
      int64_t v33 = v8;
      unint64_t v16 = __clz(__rbit64(v5)) | (v8 << 6);
    }
    else
    {
      int64_t v17 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_37;
      }
      if (v17 >= v30)
      {
LABEL_33:
        outlined consume of [String : Any].Iterator._Variant();
        return (unint64_t)v2;
      }
      unint64_t v18 = *(void *)(v31 + 8 * v17);
      int64_t v19 = v8 + 1;
      if (!v18)
      {
        int64_t v19 = v8 + 2;
        if (v8 + 2 >= v30) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v31 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v8 + 3;
          if (v8 + 3 >= v30) {
            goto LABEL_33;
          }
          unint64_t v18 = *(void *)(v31 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = v8 + 4;
            if (v8 + 4 >= v30) {
              goto LABEL_33;
            }
            unint64_t v18 = *(void *)(v31 + 8 * v19);
            if (!v18)
            {
              uint64_t v20 = v8 + 5;
              if (v8 + 5 >= v30) {
                goto LABEL_33;
              }
              unint64_t v18 = *(void *)(v31 + 8 * v20);
              if (!v18)
              {
                while (1)
                {
                  int64_t v19 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_38;
                  }
                  if (v19 >= v30) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = *(void *)(v31 + 8 * v19);
                  ++v20;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v19 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v32 = (v18 - 1) & v18;
      int64_t v33 = v19;
      unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    }
    uint64_t v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v16);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v16, (uint64_t)v6);
    v36[0] = v23;
    v36[1] = v22;
    outlined init with copy of Any((uint64_t)v6, (uint64_t)v35);
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)v36, v9);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      outlined consume of [String : Any].Iterator._Variant();
      swift_release();
      return 0;
    }
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
    unint64_t v24 = result;
    if (v25)
    {
      uint64_t v11 = v10;
      uint64_t v12 = v6;
      uint64_t v13 = v1;
      uint64_t v14 = v9;
      uint64_t v15 = (uint64_t *)(v2[6] + 16 * result);
      unint64_t result = swift_bridgeObjectRelease();
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t v9 = v14;
      uint64_t v1 = v13;
      int v6 = v12;
      uint64_t v10 = v11;
      *(void *)(v2[7] + 8 * v24) = v34;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v26 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v26 = v23;
    v26[1] = v22;
    *(void *)(v2[7] + 8 * result) = v34;
    uint64_t v27 = v2[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_36;
    }
    v2[2] = v29;
LABEL_8:
    unint64_t v5 = v32;
    int64_t v8 = v33;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t result;
  int64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  _OWORD *v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  long long v33;
  char v34[32];
  void v35[2];
  uint64_t v36;

  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  int64_t v30 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  int v6 = &v36;
  uint64_t v29 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = &demangling cache variable for type metadata for String?;
  while (1)
  {
    if (v5)
    {
      uint64_t v32 = (v5 - 1) & v5;
      unint64_t v16 = __clz(__rbit64(v5)) | (v8 << 6);
      int64_t v17 = v8;
    }
    else
    {
      unint64_t v18 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_37;
      }
      if (v18 >= v29)
      {
LABEL_33:
        outlined consume of [String : Any].Iterator._Variant();
        return (unint64_t)v2;
      }
      int64_t v19 = *(void *)(v30 + 8 * v18);
      int64_t v17 = v8 + 1;
      if (!v19)
      {
        int64_t v17 = v8 + 2;
        if (v8 + 2 >= v29) {
          goto LABEL_33;
        }
        int64_t v19 = *(void *)(v30 + 8 * v17);
        if (!v19)
        {
          int64_t v17 = v8 + 3;
          if (v8 + 3 >= v29) {
            goto LABEL_33;
          }
          int64_t v19 = *(void *)(v30 + 8 * v17);
          if (!v19)
          {
            int64_t v17 = v8 + 4;
            if (v8 + 4 >= v29) {
              goto LABEL_33;
            }
            int64_t v19 = *(void *)(v30 + 8 * v17);
            if (!v19)
            {
              uint64_t v20 = v8 + 5;
              if (v8 + 5 >= v29) {
                goto LABEL_33;
              }
              int64_t v19 = *(void *)(v30 + 8 * v20);
              if (!v19)
              {
                while (1)
                {
                  int64_t v17 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_38;
                  }
                  if (v17 >= v29) {
                    goto LABEL_33;
                  }
                  int64_t v19 = *(void *)(v30 + 8 * v17);
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v17 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v32 = (v19 - 1) & v19;
      unint64_t v16 = __clz(__rbit64(v19)) + (v17 << 6);
    }
    uint64_t v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v16);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v16, (uint64_t)v6);
    v35[0] = v23;
    v35[1] = v22;
    outlined init with copy of Any((uint64_t)v6, (uint64_t)v34);
    swift_bridgeObjectRetain_n();
    outlined destroy of (label: String?, value: Any)?((uint64_t)v35, &demangling cache variable for type metadata for (key: String, value: Any));
    __swift_instantiateConcreteTypeFromMangledName(v9);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      outlined consume of String??(0, 1);
      outlined consume of [String : Any].Iterator._Variant();
      swift_release();
      return 0;
    }
    uint64_t v31 = v17;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
    if (v24)
    {
      uint64_t v10 = v9;
      uint64_t v11 = 16 * result;
      uint64_t v12 = v6;
      uint64_t v13 = v1;
      uint64_t v14 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v14 = v23;
      v14[1] = v22;
      uint64_t v15 = (_OWORD *)(v2[7] + v11);
      uint64_t v9 = v10;
      unint64_t result = swift_bridgeObjectRelease();
      *uint64_t v15 = v33;
      uint64_t v1 = v13;
      int v6 = v12;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v25 = (uint64_t *)(v2[6] + 16 * result);
    *char v25 = v23;
    v25[1] = v22;
    *(_OWORD *)(v2[7] + 16 * result) = v33;
    uint64_t v26 = v2[2];
    uint64_t v27 = __OFADD__(v26, 1);
    BOOL v28 = v26 + 1;
    if (v27) {
      goto LABEL_36;
    }
    v2[2] = v28;
LABEL_8:
    int64_t v8 = v31;
    unint64_t v5 = v32;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)(uint64_t a1, uint64_t a2)
{
  v3[83] = v2;
  v3[82] = a2;
  v3[81] = a1;
  uint64_t v4 = type metadata accessor for ContactResolution(0);
  v3[84] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[85] = v5;
  v3[86] = *(void *)(v5 + 64);
  v3[87] = swift_task_alloc();
  v3[88] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[89] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ResponseType();
  v3[90] = v6;
  v3[91] = *(void *)(v6 - 8);
  v3[92] = swift_task_alloc();
  type metadata accessor for DialogPhase();
  v3[93] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v3[94] = v7;
  v3[95] = *(void *)(v7 - 8);
  v3[96] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v3[97] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ActivityType();
  v3[98] = v8;
  v3[99] = *(void *)(v8 - 8);
  v3[100] = swift_task_alloc();
  v3[101] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  v3[102] = v9;
  v3[103] = *(void *)(v9 - 8);
  v3[104] = swift_task_alloc();
  v3[105] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for PommesContext.Source();
  v3[106] = v10;
  v3[107] = *(void *)(v10 - 8);
  v3[108] = swift_task_alloc();
  v3[109] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v3[110] = swift_task_alloc();
  v3[111] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  v3[112] = v11;
  v3[113] = *(void *)(v11 - 8);
  v3[114] = swift_task_alloc();
  v3[115] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ImageSize();
  v3[116] = v12;
  v3[117] = *(void *)(v12 - 8);
  v3[118] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Locale();
  v3[119] = v13;
  v3[120] = *(void *)(v13 - 8);
  v3[121] = swift_task_alloc();
  return _swift_task_switch(ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:), 0, 0);
}

uint64_t ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  uint64_t v62 = v0;
  uint64_t v59 = (void *)(v0 + 56);
  id v57 = (void *)(v0 + 96);
  uint64_t v1 = *(void **)(v0 + 664);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  unint64_t v2 = PaginatedItemContainer.items.getter();
  *(void *)(v0 + 976) = v2;
  unint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo8INPersonCGG_SSs5NeverOTg507_sSiSo8f34CSSIgygo_Si6offset_AB7elementtSSs5g162OIegnrzr_TR0150_s21GeoFlowDelegatePlugin37ShareETAContactDisambiguationStrategyC013makePromptForG014paginatedItems07SiriKitB06Output_pAF22PaginatedItemContainerVyJ34A21CG_tYaKFSSSi_AKtXEfU_Tf3nnnpf_nTf1cn_n(v3);
  swift_bridgeObjectRelease();
  (*(void (**)(void *))(*v1 + 176))(v4);
  specialized static RecipientDisambiguationHelper.allHaveSameIdentifier(recipients:)(v2);
  int v6 = v5 & 1;
  *(unsigned char *)(v0 + 1076) = v5 & 1;
  uint64_t v7 = v1[2];
  *(void *)(v0 + 984) = v7;
  swift_bridgeObjectRetain_n();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  oslog = v7;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    v61[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
    swift_bridgeObjectRetain();
    uint64_t v10 = Array.description.getter();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 640) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 1024;
    *(_DWORD *)(v0 + 1072) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v7, v8, "persons %s handleDisambiguation %{BOOL}d", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  unint64_t v13 = v2;
  uint64_t v14 = *(void *)(v0 + 960);
  uint64_t v55 = *(void *)(v0 + 968);
  uint64_t v56 = *(void *)(v0 + 952);
  uint64_t v15 = *(void **)(v0 + 664);
  uint64_t v17 = v15[7];
  uint64_t v16 = v15[8];
  __swift_project_boxed_opaque_existential_1(v15 + 4, v17);
  unint64_t v18 = *(void (**)(uint64_t, uint64_t))(v16 + 32);
  swift_bridgeObjectRetain();
  v18(v17, v16);
  __swift_project_boxed_opaque_existential_1(v59, *(void *)(v0 + 80));
  dispatch thunk of DeviceState.siriLocale.getter();
  specialized static DisambiguationListUtils.makeDisambiguationItems(persons:locale:)(v13, v55);
  swift_bridgeObjectRelease();
  int64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  *(void *)(v0 + 992) = v19;
  *(void *)(v0 + 1000) = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v20 = (void *)v0;
  v19(v55, v56);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v59);
  uint64_t v21 = v15[7];
  uint64_t v22 = v15[8];
  uint64_t v60 = v15 + 4;
  __swift_project_boxed_opaque_existential_1(v15 + 4, v21);
  (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
  __swift_project_boxed_opaque_existential_1(v57, *(void *)(v0 + 120));
  char v23 = dispatch thunk of DeviceState.isCarPlay.getter();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v57);
  if (v23)
  {
    unint64_t v24 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)();
    swift_bridgeObjectRelease();
LABEL_11:
    *(void *)(v0 + 1008) = v24;
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v35))
    {
      id v36 = v24;
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      id v38 = v36;
      id v39 = [v38 description];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v42 = v41;

      *(void *)(v0 + 632) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v20 = (void *)v0;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, oslog, v35, "disambiguation snippet is: %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    uint64_t v43 = v20[83];
    uint64_t v44 = v15[7];
    uint64_t v45 = v15[8];
    __swift_project_boxed_opaque_existential_1(v60, v44);
    unint64_t v46 = *(void (**)(uint64_t, uint64_t))(v45 + 32);
    swift_bridgeObjectRetain();
    v46(v44, v45);
    __swift_project_boxed_opaque_existential_1(v20 + 27, v20[30]);
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v47 = *(void *)(v43 + 96);
    uint64_t v48 = (void *)swift_task_alloc();
    v20[127] = v48;
    *uint64_t v48 = v20;
    v48[1] = ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:);
    uint64_t v49 = v20[121];
    uint64_t v50 = v20[115];
    return TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:)(v50, v49, v47, v13, 0);
  }
  uint64_t v25 = v15[7];
  uint64_t v26 = v15[8];
  __swift_project_boxed_opaque_existential_1(v60, v25);
  (*(void (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), *(void *)(v0 + 160));
  char v27 = dispatch thunk of DeviceState.isPad.getter();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
  if (v27)
  {
    uint64_t v28 = *(void *)(v0 + 944);
    uint64_t v29 = *(void *)(v0 + 936);
    uint64_t v30 = *(void *)(v0 + 928);
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v28, enum case for ImageSize.default(_:), v30);
    uint64_t v31 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPad(disambiguationItems:deviceIsLocked:imageSize:)();
LABEL_10:
    unint64_t v24 = (void *)v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    goto LABEL_11;
  }
  uint64_t v32 = v15[7];
  uint64_t v33 = v15[8];
  __swift_project_boxed_opaque_existential_1(v60, v32);
  (*(void (**)(uint64_t, uint64_t))(v33 + 32))(v32, v33);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), *(void *)(v0 + 200));
  char v34 = dispatch thunk of DeviceState.isPhone.getter();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 176);
  if (v34)
  {
    uint64_t v28 = *(void *)(v0 + 944);
    uint64_t v29 = *(void *)(v0 + 936);
    uint64_t v30 = *(void *)(v0 + 928);
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v28, enum case for ImageSize.default(_:), v30);
    uint64_t v31 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)();
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for RuntimeError();
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = 0xD000000000000012;
  *(void *)(v52 + 24) = 0x80000000000C7CA0;
  lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, (void (*)(uint64_t))type metadata accessor for RuntimeError);
  swift_allocError();
  *uint64_t v53 = v52;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v54 = *(uint64_t (**)(void))(v0 + 8);
  return v54();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)v0 + 216;
  unint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 992);
  unint64_t v3 = *(void *)(*(void *)v0 + 968);
  uint64_t v4 = *(void *)(*(void *)v0 + 952);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  v2(v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return _swift_task_switch(ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:), 0, 0);
}

{
  uint64_t v0;
  unsigned char *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id i;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  id v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  id v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_0;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  NSObject *v82;
  NSObject *v83;
  NSObject *v84;
  os_log_t v85;
  NSObject *log;
  os_log_t loga;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  uint64_t v92 = v0;
  uint64_t v88 = v0 + 608;
  uint64_t v1 = *(unsigned char **)(v0 + 664);
  if (v1[80] == 1)
  {
    unint64_t v2 = *(NSObject **)(v0 + 984);
    unint64_t v3 = *(void *)(v0 + 888);
    (*(void (**)(void, void, void))(*(void *)(v0 + 856) + 104))(*(void *)(v0 + 864), enum case for PommesContext.Source.pluginDefined(_:), *(void *)(v0 + 848));
    PommesContext.init(source:domain:listenAfterSpeaking:)();
    uint64_t v4 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
    NLContextUpdate.pommesContext.setter();
    char v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v5))
    {
      log = *(NSObject **)(v0 + 984);
      int v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      *(_DWORD *)int v6 = 136315138;
      swift_beginAccess();
      NLContextUpdate.pommesContext.getter();
      swift_endAccess();
      uint64_t v7 = String.init<A>(describing:)();
      *(void *)(v0 + 624) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, log, v5, "updated nl context with pommes context. pommesContext = %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else if ((*(uint64_t (**)(void))(*(void *)v1 + 144))())
  {
    uint64_t v9 = *(void *)(v0 + 840);
    uint64_t v10 = *(void *)(v0 + 832);
    unint64_t v11 = *(void *)(v0 + 824);
    unint64_t v12 = *(void *)(v0 + 816);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_C0600;
    type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
    swift_allocObject();
    unint64_t v13 = UsoTaskBuilder_noVerb_common_Person.init()();
    type metadata accessor for UsoEntityBuilder_common_Person();
    swift_allocObject();
    UsoEntityBuilder_common_Person.init()();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    static Siri_Nlu_External_SystemPrompted.from(_:)(v13, v9);
    Siri_Nlu_External_SystemDialogAct.init()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v12);
    Siri_Nlu_External_SystemDialogAct.prompted.setter();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v12);
    swift_release();
    swift_release();
    NLContextUpdate.nluSystemDialogActs.setter();
  }
  uint64_t v14 = *(NSObject **)(v0 + 984);
  uint64_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v83 = *(NSObject **)(v0 + 984);
    uint64_t v16 = *(void *)(v0 + 920);
    uint64_t v17 = *(void *)(v0 + 912);
    unint64_t v18 = *(void *)(v0 + 904);
    int64_t v19 = *(void *)(v0 + 896);
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v91 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v16, v19);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v14 = v22;
    *(void *)(v0 + 608) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v83, v15, "makePromptForDisambiguation nlContextUpdate is: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  char v23 = *(NSObject **)(v0 + 984);
  if (*(unsigned char *)(v0 + 1076) == 1)
  {
    unint64_t v24 = static os_log_type_t.default.getter();
    uint64_t v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 976);
    if (!v25)
    {
      id v38 = v26 & 0xC000000000000001;
      goto LABEL_20;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v14 = swift_slowAlloc();
    char v27 = (id)swift_slowAlloc();
    LODWORD(v14->isa) = 136315138;
    uint64_t v32 = *(void *)(v0 + 976);
    uint64_t v88 = v26 & 0xC000000000000001;
    uint64_t v91 = (uint64_t)v27;
    if ((v26 & 0xC000000000000001) != 0) {
      goto LABEL_29;
    }
    if (*(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFFF8)))
    {
      for (id i = *(id *)(v32 + 32); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
      {
        id v82 = *(NSObject **)(v0 + 984);
        char v34 = [i description];
        os_log_type_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v37 = v36;

        *(void *)(v0 + 592) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v82, v24, "handleDisambiguation %s", (uint8_t *)v14, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v26 = *(void *)(v0 + 976);
        id v38 = v88;
LABEL_20:
        if (v38) {
          break;
        }
        if (*(void *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFFF8)))
        {
          uint64_t v62 = *(id *)(v26 + 32);
          goto LABEL_23;
        }
        __break(1u);
LABEL_29:
        ;
      }
      specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_23:
      uint64_t v89 = *(void *)(v0 + 808);
      uint64_t v63 = *(void *)(v0 + 792);
      loga = *(os_log_t *)(v0 + 784);
      uint64_t v64 = *(void **)(v0 + 664);
      uint64_t v65 = v64 + 4;
      type metadata accessor for DialogPerson();
      uint64_t v67 = v64[7];
      uint64_t v66 = v64[8];
      __swift_project_boxed_opaque_existential_1(v65, v67);
      (*(void (**)(uint64_t, uint64_t))(v66 + 32))(v67, v66);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 416), *(void *)(v0 + 440));
      dispatch thunk of DeviceState.siriLocale.getter();
      *(void *)(v0 + 1024) = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 416);
      static SiriKitEventSender.current.getter();
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), *(void *)(v0 + 360));
      (*(void (**)(uint64_t, void, os_log_t))(v63 + 104))(v89, enum case for ActivityType.disambiguation(_:), loga);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
      char v27 = [(id)swift_getObjCClassFromMetadata() typeName];
      if (v27)
      {
        uint64_t v68 = v27;
        unint64_t v79 = *(void *)(v0 + 920);
        uint64_t v69 = *(void *)(v0 + 904);
        uint64_t v90 = *(void *)(v0 + 896);
        os_log_type_t v70 = *(void *)(v0 + 776);
        os_log_type_t v71 = *(void *)(v0 + 728);
        unint64_t v76 = *(void *)(v0 + 736);
        uint64_t v77 = *(void *)(v0 + 720);
        os_log_type_t v78 = *(void *)(v0 + 712);
        type metadata accessor for SiriKitEvent();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v72 = enum case for SiriKitReliabilityCodes.normal(_:);
        uint64_t v73 = type metadata accessor for SiriKitReliabilityCodes();
        os_log_type_t v74 = *(void *)(v73 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 104))(v70, v72, v73);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v70, 0, 1, v73);
        SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
        dispatch thunk of SiriKitEventSending.send(_:)();
        swift_release();
        __swift_destroy_boxed_opaque_existential_0Tm(v0 + 336);
        static DialogPhase.clarification.getter();
        OutputGenerationManifest.init(dialogPhase:_:)();
        OutputGenerationManifest.listenAfterSpeaking.setter();
        OutputGenerationManifest.responseViewId.setter();
        (*(void (**)(uint64_t, void, uint64_t))(v71 + 104))(v76, enum case for ResponseType.disambiguation(_:), v77);
        OutputGenerationManifest.responseType.setter();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v78, v79, v90);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v78, 0, 1, v90);
        OutputGenerationManifest.nlContextUpdate.setter();
        type metadata accessor for CATGlobals();
        CATGlobals.__allocating_init()();
        type metadata accessor for ContactResolutionSnippetGenerator();
        swift_allocObject();
        *(void *)(v0 + 1032) = ContactResolutionSnippetGenerator.init(appBundleId:globals:)();
        uint64_t v75 = (void *)swift_task_alloc();
        *(void *)(v0 + 1040) = v75;
        *uint64_t v75 = v0;
        v75[1] = ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:);
        uint64_t v28 = *(void *)(v0 + 976);
        uint64_t v31 = *(void *)(v0 + 768);
        char v27 = *(id *)(v0 + 648);
        uint64_t v30 = 0x80000000000C6780;
        uint64_t v29 = 0xD00000000000002CLL;
        return ContactResolutionSnippetGenerator.generateSimpleDisambiguationMixedLabels(contacts:directInvocationID:outputGenerationManifest:)(v27, v28, v29, v30, v31);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return ContactResolutionSnippetGenerator.generateSimpleDisambiguationMixedLabels(contacts:directInvocationID:outputGenerationManifest:)(v27, v28, v29, v30, v31);
  }
  swift_bridgeObjectRelease();
  id v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v39))
  {
    uint64_t v84 = *(NSObject **)(v0 + 984);
    uint64_t v40 = *(void *)(v0 + 664);
    swift_retain_n();
    unint64_t v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v91 = swift_slowAlloc();
    *(_DWORD *)unint64_t v41 = 136315138;
    unint64_t v42 = *(id *)(v40 + 72);
    uint64_t v43 = [v42 description];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v46 = v45;

    *(void *)(v0 + 600) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v84, v39, "contactDisambiguation %s", v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  unint64_t v80 = *(uint64_t **)(v0 + 704);
  uint64_t v81 = *(void *)(v0 + 672);
  uint64_t v47 = *(void **)(v0 + 664);
  type metadata accessor for DialogPerson();
  uint64_t v49 = v47[8];
  uint64_t v48 = (void *)v47[9];
  uint64_t v50 = v47[7];
  __swift_project_boxed_opaque_existential_1(v47 + 4, v50);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v49 + 32);
  uint64_t v52 = v48;
  v51(v50, v49);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 256), *(void *)(v0 + 280));
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v53 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
  *(void *)(v0 + 1056) = v53;
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 256);
  uint64_t v54 = (char *)v80
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
               + 48);
  *unint64_t v80 = v53;
  uint64_t v55 = enum case for BehaviorAfterSpeaking.listen(_:);
  uint64_t v56 = type metadata accessor for BehaviorAfterSpeaking();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 104))(v54, v55, v56);
  *(void *)(v0 + 400) = v81;
  *(void *)(v0 + 408) = &protocol witness table for ContactResolution;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 376));
  outlined init with copy of ContactResolution((uint64_t)v80, (uint64_t)boxed_opaque_existential_0);
  swift_beginAccess();
  uint64_t v85 = (os_log_t)(*(void *)(*v47 + 248) + **(int **)(*v47 + 248));
  swift_retain();
  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 1064) = v58;
  uint64_t *v58 = v0;
  v58[1] = ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:);
  uint64_t v59 = *(void *)(v0 + 920);
  uint64_t v60 = *(void *)(v0 + 656);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v85)(v0 + 16, v0 + 376, v60, v59);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1048) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    unint64_t v2 = ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:);
  }
  else {
    unint64_t v2 = ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = (void *)v0[126];
  unint64_t v2 = v0[115];
  unint64_t v3 = v0[113];
  uint64_t v4 = v0[112];
  char v5 = v0[96];
  int v6 = v0[95];
  uint64_t v7 = v0[94];
  swift_release();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *v0 + 376;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return _swift_task_switch(ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = (void *)v0[126];
  uint64_t v10 = v0[115];
  unint64_t v2 = v0[113];
  unint64_t v3 = v0[112];
  uint64_t v4 = v0[96];
  char v5 = v0[95];
  int v6 = v0[94];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  lazy protocol witness table accessor for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError();
  swift_allocError();
  NSObject *v7 = 0;
  swift_willThrow();
  swift_release();

  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v10, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

id ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  uint64_t v1 = (long long *)(v0 + 16);
  if (*(void *)(v0 + 40))
  {
    uint64_t v2 = *(void *)(v0 + 800);
    uint64_t v3 = *(void *)(v0 + 792);
    uint64_t v4 = *(void *)(v0 + 784);
    outlined init with take of CATType(v1, v0 + 296);
    static SiriKitEventSender.current.getter();
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 456), *(void *)(v0 + 480));
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ActivityType.disambiguation(_:), v4);
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
    id result = [(id)swift_getObjCClassFromMetadata() typeName];
    if (!result)
    {
      __break(1u);
      return result;
    }
    int v6 = result;
    char v23 = *(void **)(v0 + 1008);
    uint64_t v7 = *(void *)(v0 + 904);
    uint64_t v25 = *(void *)(v0 + 896);
    uint64_t v26 = *(void *)(v0 + 920);
    uint64_t v8 = *(void *)(v0 + 776);
    uint64_t v9 = *(void *)(v0 + 704);
    uint64_t v10 = *(void *)(v0 + 696);
    uint64_t v11 = *(void *)(v0 + 680);
    uint64_t v24 = *(void *)(v0 + 648);
    type metadata accessor for SiriKitEvent();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = enum case for SiriKitReliabilityCodes.normal(_:);
    uint64_t v13 = type metadata accessor for SiriKitReliabilityCodes();
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 104))(v8, v12, v13);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v8, 0, 1, v13);
    outlined init with copy of ContactResolution(v9, v10);
    unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v16 = swift_allocObject();
    outlined init with take of ContactResolution(v10, v16 + v15, type metadata accessor for ContactResolution);
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();

    swift_release();
    swift_release();
    outlined destroy of ContactResolution(v9);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 456);
    outlined init with take of CATType((long long *)(v0 + 296), v24);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v26, v25);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    unint64_t v18 = *(void **)(v0 + 1008);
    uint64_t v27 = *(void *)(v0 + 920);
    uint64_t v19 = *(void *)(v0 + 904);
    uint64_t v20 = *(void *)(v0 + 896);
    uint64_t v21 = *(void *)(v0 + 704);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v1, &demangling cache variable for type metadata for Output?);
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError();
    swift_allocError();
    *uint64_t v22 = 1;
    swift_willThrow();

    swift_release();
    outlined destroy of ContactResolution(v21);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v27, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  }
  return (id)v17();
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo8INPersonCGG_SSs5NeverOTg507_sSiSo8f34CSSIgygo_Si6offset_AB7elementtSSs5g162OIegnrzr_TR0150_s21GeoFlowDelegatePlugin37ShareETAContactDisambiguationStrategyC013makePromptForG014paginatedItems07SiriKitB06Output_pAF22PaginatedItemContainerVyJ34A21CG_tYaKFSSSi_AKtXEfU_Tf3nnnpf_nTf1cn_n(unint64_t a1)
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = a1 & 0xC000000000000001;
      unint64_t v14 = a1;
      while (v16)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        char v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_14;
        }
        uint64_t v7 = INPerson.encodeBase64.getter();
        uint64_t v9 = v8;

        unint64_t v11 = _swiftEmptyArrayStorage[2];
        unint64_t v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v11 + 1;
        uint64_t v12 = (char *)&_swiftEmptyArrayStorage[2 * v11];
        *((void *)v12 + 4) = v7;
        *((void *)v12 + 5) = v9;
        ++v3;
        a1 = v14;
        if (v6 == v2) {
          goto LABEL_16;
        }
      }
      if (v3 < *(void *)(v15 + 16)) {
        break;
      }
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        goto LABEL_16;
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_7;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ActivityType();
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v2[28] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[29] = v5;
  v2[30] = *(void *)(v5 + 64);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  return _swift_task_switch(ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse(), 0, 0);
}

uint64_t ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse()()
{
  uint64_t v1 = (void *)v0[23];
  uint64_t v2 = v1[3];
  v0[5] = type metadata accessor for ShareETA(0);
  v0[6] = (uint64_t)&protocol witness table for ShareETA;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 2);
  *(unsigned char *)boxed_opaque_existential_0 = 0;
  boxed_opaque_existential_0[1] = 0;
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = v1 + 4;
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 80))(v5, v6);
  v0[33] = v7;
  unint64_t v11 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v2 + 112)
                                                            + **(int **)(*(void *)v2 + 112));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[34] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse();
  uint64_t v9 = v0[32];
  return v11(v9, v0 + 2, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse()()
{
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  static SiriKitEventSender.current.getter();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), *(void *)(v0 + 80));
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ActivityType.canceled(_:), v3);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
  id result = [(id)swift_getObjCClassFromMetadata() typeName];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v7 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 192);
    unint64_t v11 = *(uint64_t **)(v0 + 176);
    type metadata accessor for SiriKitEvent();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = enum case for SiriKitReliabilityCodes.cancelDisambiguation(_:);
    uint64_t v13 = type metadata accessor for SiriKitReliabilityCodes();
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 104))(v10, v12, v13);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
    unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v16 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v16 + v15, v7, v9);
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
    static Device.current.getter();
    uint64_t v17 = type metadata accessor for AceOutput();
    *(_OWORD *)(v0 + 152) = 0u;
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    v11[3] = v17;
    v11[4] = (uint64_t)&protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_0(v11);
    static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)();
    outlined destroy of (label: String?, value: Any)?(v0 + 136, &demangling cache variable for type metadata for FlowActivity?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v18();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter();
  a3(v4);
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.responseId.setter();
}

uint64_t ShareETAContactDisambiguationStrategy.makeErrorResponse(_:)()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(ShareETAContactDisambiguationStrategy.makeErrorResponse(_:), 0, 0);
}

{
  uint64_t v0;
  unsigned char *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  lazy protocol witness table accessor for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError();
  swift_allocError();
  *uint64_t v1 = 0;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v5 = type metadata accessor for ResponseType();
  v4[17] = v5;
  v4[18] = *(void *)(v5 - 8);
  v4[19] = swift_task_alloc();
  type metadata accessor for DialogPhase();
  v4[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest();
  v4[21] = v6;
  v4[22] = *(void *)(v6 - 8);
  v4[23] = swift_task_alloc();
  return _swift_task_switch(ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:), 0, 0);
}

uint64_t ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)()
{
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v1[3];
  v0[24] = v2;
  uint64_t v3 = v1[7];
  uint64_t v4 = v1[8];
  __swift_project_boxed_opaque_existential_1(v1 + 4, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 80))(v3, v4);
  v0[25] = v5;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 152) + **(int **)(*(void *)v2 + 152));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[26] = v6;
  *uint64_t v6 = v0;
  v6[1] = ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:);
  uint64_t v7 = v0[14];
  return v9(v7, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 128);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  static DialogPhase.clarification.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for ResponseType.disambiguation(_:), v4);
  OutputGenerationManifest.responseType.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  uint64_t v6 = PaginatedItemContainer.items.getter();
  uint64_t v7 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo8INPersonCGG_21GeoFlowDelegatePlugin0G7ContactVs5NeverOTg507_sSiSo8f3C21ghi9Plugin0B7k32VIgygr_Si6offset_AB7elementtAEs5L11OIegnrzr_TRSiAiNIgygr_Tf1cn_nTf4ng_n(v6, (void (*)(unint64_t, id))partial apply for closure #1 in ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:), v5);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v0 + 16) = xmmword_C1370;
  *(void *)(v0 + 40) = &type metadata for GeoLabel;
  *(void *)(v0 + 48) = &protocol witness table for GeoLabel;
  *(unsigned char *)(v0 + 32) = 2;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 136))(v0 + 16);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  if (v12)
  {
    outlined consume of Result<String, Error>(v8, v10, 1);
    uint64_t v8 = 0;
    uint64_t v10 = 0xE000000000000000;
  }
  uint64_t v13 = *(void **)(v0 + 216);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  *(void *)(v0 + 232) = ResponseFactory.init()();
  *(void *)(v0 + 80) = &type metadata for GeoDataModels;
  *(void *)(v0 + 88) = lazy protocol witness table accessor for type GeoDataModels and conformance GeoDataModels();
  uint64_t v14 = swift_allocObject();
  *(void *)(v0 + 56) = v14;
  *(void *)(v14 + 16) = v8;
  *(void *)(v14 + 24) = v10;
  *(void *)(v14 + 32) = v7;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 81) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_C0AD0;
  *(void *)(v15 + 32) = v13;
  uint64_t v22 = v15;
  specialized Array._endMutation()();
  *(void *)(v0 + 240) = v22;
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)
                                                                   + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:));
  uint64_t v16 = v13;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v17;
  *uint64_t v17 = v0;
  v17[1] = ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:);
  unint64_t v18 = *(void *)(v0 + 184);
  uint64_t v19 = *(void *)(v0 + 104);
  return v21(v19, v0 + 56, v22, v18);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *v0 + 56;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return _swift_task_switch(ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 104);
  *(void *)(v1 + 32) = 0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 216) = a1;
  *(void *)(v3 + 224) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v4 = ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:);
  }
  else
  {
    uint64_t v4 = ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:);
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t closure #1 in ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v37 = type metadata accessor for ImageElement.ImageStyle();
  uint64_t v7 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ContactQuery();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  INPerson.toContactQuery()();
  uint64_t v14 = ContactQuery.id.getter();
  uint64_t v35 = v15;
  uint64_t v36 = v14;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  id v16 = [a2 displayName];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v18;
  uint64_t v34 = v17;

  Swift::String v19 = INPerson.getContactInitials()();
  uint64_t v20 = INPerson.encodeBase64.getter();
  uint64_t v22 = v21;
  char v23 = a3 + 4;
  uint64_t v25 = a3[7];
  uint64_t v24 = a3[8];
  __swift_project_boxed_opaque_existential_1(v23, v25);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v24 + 32))(v39, v25, v24);
  __swift_project_boxed_opaque_existential_1(v39, v39[3]);
  LOBYTE(v16) = dispatch thunk of DeviceState.isCarPlay.getter();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v39);
  uint64_t v26 = (unsigned int *)&enum case for ImageElement.ImageStyle.contactImage3(_:);
  if ((v16 & 1) == 0) {
    uint64_t v26 = (unsigned int *)&enum case for ImageElement.ImageStyle.contactImage4(_:);
  }
  uint64_t v27 = v37;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *v26, v37);
  uint64_t v28 = v36;
  *(void *)a4 = v38;
  *(void *)(a4 + 8) = v28;
  uint64_t v29 = v34;
  *(void *)(a4 + 16) = v35;
  *(void *)(a4 + 24) = v29;
  *(void *)(a4 + 32) = v33;
  *(Swift::String *)(a4 + 40) = v19;
  *(void *)(a4 + 56) = v20;
  *(void *)(a4 + 64) = v22;
  *(void *)(a4 + 72) = 0;
  uint64_t v30 = type metadata accessor for GeoContact();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a4 + *(int *)(v30 + 40), v9, v27);
}

uint64_t ShareETAContactDisambiguationStrategy.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 32);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ShareETAContactDisambiguationStrategy.__deallocating_deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 32);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 104, 7);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.paginationStyle() in conformance ShareETAContactDisambiguationStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.actionForInput(_:) in conformance ShareETAContactDisambiguationStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.parseDisambiguationResponse(input:paginatedItems:) in conformance ShareETAContactDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 216)
                                                          + **(int **)(*(void *)v3 + 216));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:) in conformance ShareETAContactDisambiguationStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 224) + **(int **)(*(void *)v2 + 224));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:) in conformance ShareETAContactDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ShareETAContactDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:) in conformance ShareETAContactDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ShareETAContactDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAContactDisambiguationStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 232) + **(int **)(*(void *)v1 + 232));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:) in conformance ShareETAContactDisambiguationStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 240) + **(int **)(*(void *)v2 + 240));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription.getter in conformance ShareETAContactDisambiguationStrategy()
{
  return PromptForDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription.getter();
}

uint64_t specialized ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v37);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(boxed_opaque_existential_0, a4, a7);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v15 = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(a6 + 81) = 0;
  *(void *)(a6 + 16) = v15;
  *(void *)(a6 + 88) = &_swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_BFBE0;
  if (one-time initialization token for referenceNode != -1) {
    swift_once();
  }
  swift_retain();
  unint64_t v17 = specialized OntologyNode.javaClassName.getter();
  uint64_t v19 = v18;
  swift_release();
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once();
  }
  swift_retain();
  unint64_t v20 = specialized OntologyNode.javaClassName.getter();
  uint64_t v22 = v21;
  swift_release();
  *(void *)(v16 + 48) = v20;
  *(void *)(v16 + 56) = v22;
  type metadata accessor for AddressOntologyNode.PersonPlaceNode();
  swift_allocObject();
  AddressOntologyNode.PersonPlaceNode.init(name:multicardinal:)();
  unint64_t v23 = specialized OntologyNode.javaClassName.getter();
  uint64_t v25 = v24;
  swift_release();
  *(void *)(v16 + 64) = v23;
  *(void *)(v16 + 72) = v25;
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  unint64_t v26 = specialized OntologyNode.javaClassName.getter();
  uint64_t v28 = v27;
  swift_release();
  *(void *)(v16 + 80) = v26;
  *(void *)(v16 + 88) = v28;
  static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter();
  unint64_t v29 = specialized OntologyNode.javaClassName.getter();
  uint64_t v31 = v30;
  swift_release();
  *(void *)(v16 + 96) = v29;
  *(void *)(v16 + 104) = v31;
  type metadata accessor for PersonOntologyNode();
  static PersonOntologyNode.personFullNameNode.getter();
  unint64_t v32 = specialized OntologyNode.javaClassName.getter();
  uint64_t v34 = v33;
  swift_release();
  *(void *)(v16 + 112) = v32;
  *(void *)(v16 + 120) = v34;
  *(void *)(a6 + 96) = v16;
  *(unsigned char *)(a6 + 80) = a1 & 1;
  swift_beginAccess();
  *(unsigned char *)(a6 + 81) = a2 & 1;
  *(void *)(a6 + 72) = a3;
  outlined init with take of CATType(&v37, a6 + 32);
  *(void *)(a6 + 24) = a5;
  return a6;
}

unint64_t lazy protocol witness table accessor for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError;
  if (!lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError;
  if (!lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError and conformance ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ContactResolution(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactResolution(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ContactResolution(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContactResolution(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_3D6F4()
{
  uint64_t v1 = *(void *)(type metadata accessor for ContactResolution(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_release();
  uint64_t v7 = v6
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
              + 48);
  uint64_t v8 = type metadata accessor for BehaviorAfterSpeaking();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t partial apply for closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)(uint64_t a1)
{
  return partial apply for closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)(a1, type metadata accessor for ContactResolution, (void (*)(uint64_t))specialized GeoCATModel.getID());
}

uint64_t sub_3D814()
{
  uint64_t v1 = type metadata accessor for TemplatingResult();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in ShareETAContactDisambiguationStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  return partial apply for closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)(a1, (uint64_t (*)(void))&type metadata accessor for TemplatingResult, (void (*)(uint64_t))&TemplatingResult.templateIdentifier.getter);
}

uint64_t partial apply for closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t))
{
  uint64_t v6 = *(void *)(a2(0) - 8);
  return closure #3 in ShareETAContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:)(a1, v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a3);
}

uint64_t partial apply for closure #1 in ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in ShareETAContactDisambiguationStrategy.disambiguateContactRF(dialog:paginatedItems:nlContext:)(a1, a2, v3, a3);
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo8INPersonCGG_21GeoFlowDelegatePlugin0G7ContactVs5NeverOTg507_sSiSo8f3C21ghi9Plugin0B7k32VIgygr_Si6offset_AB7elementtAEs5L11OIegnrzr_TRSiAiNIgygr_Tf1cn_nTf4ng_n(unint64_t a1, void (*a2)(unint64_t, id), uint64_t a3)
{
  unint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v4 = type metadata accessor for GeoContact();
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v7 = v22;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (v8)
  {
    while (1)
    {
      unint64_t v9 = 0;
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v18 = a1 & 0xC000000000000001;
      while (v18)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v11 = v10;
        unint64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_14;
        }
        v20(v9, v10);

        uint64_t v22 = v7;
        unint64_t v14 = v7[2];
        unint64_t v13 = v7[3];
        if (v14 >= v13 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          uint64_t v7 = v22;
        }
        v7[2] = v14 + 1;
        outlined init with take of ContactResolution((uint64_t)v6, (uint64_t)v7+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v14, (uint64_t (*)(void))type metadata accessor for GeoContact);
        ++v9;
        if (v12 == v8) {
          goto LABEL_16;
        }
      }
      if (v9 < *(void *)(v17 + 16)) {
        break;
      }
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      if (!v8) {
        goto LABEL_16;
      }
    }
    id v10 = *(id *)(a1 + 8 * v9 + 32);
    goto LABEL_7;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels and conformance GeoDataModels()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels;
  if (!lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels;
  if (!lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels;
  if (!lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels and conformance GeoDataModels);
  }
  return result;
}

uint64_t sub_3DBCC()
{
  outlined consume of GeoDataModels(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t outlined consume of GeoDataModels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result = a6;
  switch(a11)
  {
    case 0:
    case 2:
      goto LABEL_3;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_3:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_3DD3C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_3DD8C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 152))(*a1);
}

uint64_t sub_3DDD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_3DE20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for ShareETAContactDisambiguationStrategy()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x3DF64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError()
{
  return &type metadata for ShareETAContactDisambiguationStrategy.ContactDisambiguationStrategyError;
}

uint64_t outlined init with take of ContactResolution(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for DisplayHint() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8));
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((char *)&dword_18 + (v6 & 0xFFFFFFFFFFFFFF8)) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8));
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8)) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Sharing_Medium@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Sharing_Medium.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t ShareETAFlowDelegate.currentDeviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + direct field offset for ShareETAFlowDelegate.currentDeviceState, a1);
}

id ShareETAFlowDelegate.logObject.getter()
{
  return *(id *)(v0 + direct field offset for ShareETAFlowDelegate.logObject);
}

uint64_t ShareETAFlowDelegate.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for ShareETAFlowDelegate.isPOMMES);
  swift_beginAccess();
  return *v1;
}

uint64_t ShareETAFlowDelegate.isPOMMES.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for ShareETAFlowDelegate.isPOMMES);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ShareETAFlowDelegate.isPOMMES.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAFlowDelegate.isUSO.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for ShareETAFlowDelegate.isUSO);
  swift_beginAccess();
  return *v1;
}

uint64_t ShareETAFlowDelegate.isUSO.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for ShareETAFlowDelegate.isUSO);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ShareETAFlowDelegate.isUSO.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAFlowDelegate.__allocating_init(deviceState:isPOMMES:isUSO:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ShareETAFlowDelegate.__allocating_init(deviceState:isPOMMES:isUSO:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))ShareETAFlowDelegate.init(deviceState:isPOMMES:isUSO:));
}

uint64_t ShareETAFlowDelegate.init(deviceState:isPOMMES:isUSO:)(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = direct field offset for ShareETAFlowDelegate.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v3 + v8) = OS_os_log.init(subsystem:category:)();
  uint64_t v9 = (unsigned char *)(v3 + direct field offset for ShareETAFlowDelegate.isPOMMES);
  *uint64_t v9 = 0;
  uint64_t v10 = (unsigned char *)(v4 + direct field offset for ShareETAFlowDelegate.isUSO);
  *(unsigned char *)(v4 + direct field offset for ShareETAFlowDelegate.isUSO) = 0;
  *(void *)(v4 + direct field offset for ShareETAFlowDelegate.disambiguationState) = 0;
  outlined init with copy of DeviceState(a1, v4 + direct field offset for ShareETAFlowDelegate.currentDeviceState);
  swift_beginAccess();
  *uint64_t v9 = a2;
  swift_beginAccess();
  *uint64_t v10 = a3;
  swift_release();
  uint64_t v11 = BaseRCHFlowDelegate.init()();
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v11;
}

uint64_t ShareETAFlowDelegate.disambiguationState.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShareETAFlowDelegate.disambiguationState.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for ShareETAFlowDelegate.disambiguationState);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ShareETAFlowDelegate.disambiguationState.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

id ShareETAFlowDelegate.makeIntentFromParse(parse:previousIntent:)(uint64_t a1, void *a2)
{
  uint64_t v295 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v294 = *(void *)(v295 - 8);
  __chkstk_darwin(v295);
  uint64_t v296 = (char *)&v285 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v313 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v286 = *(void *)(v313 - 8);
  __chkstk_darwin(v313);
  os_log_type_t v312 = (char *)&v285 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v319 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v303 = *(void *)(v319 - 8);
  __chkstk_darwin(v319);
  *(void *)&long long v318 = (char *)&v285 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v293 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v292 = *(void *)(v293 - 8);
  __chkstk_darwin(v293);
  uint64_t v291 = (char *)&v285 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v290 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v289 = *(void *)(v290 - 8);
  __chkstk_darwin(v290);
  v288 = (char *)&v285 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v307 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v306 = *(void *)(v307 - 8);
  __chkstk_darwin(v307);
  uint64_t v305 = (char *)&v285 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v11 - 8);
  uint64_t v304 = (char *)&v285 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  __chkstk_darwin(v13 - 8);
  os_log_type_t v287 = (char *)&v285 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v311 = type metadata accessor for USOParse();
  uint64_t v310 = *(void *)(v311 - 8);
  __chkstk_darwin(v311);
  v320 = (char *)&v285 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v302 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNode();
  uint64_t v301 = *(void *)(v302 - 8);
  __chkstk_darwin(v302);
  unint64_t v300 = (char *)&v285 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v299 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  uint64_t v298 = *(void *)(v299 - 8);
  __chkstk_darwin(v299);
  v297 = (char *)&v285 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v327 = type metadata accessor for Parse();
  unint64_t v326 = *(void *)(v327 - 8);
  uint64_t v18 = __chkstk_darwin(v327);
  v308 = (char *)&v285 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v317 = (char *)&v285 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v324 = (uint64_t)&v285 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v314 = (char *)&v285 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v285 - v26;
  unint64_t v316 = type metadata accessor for NLIntent();
  *(void *)&long long v315 = *(void *)(v316 - 8);
  uint64_t v28 = __chkstk_darwin(v316);
  unint64_t v30 = (unint64_t)&v285 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v285 - v32;
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v285 - v34;
  uint64_t v323 = v2;
  uint64_t v36 = *(NSObject **)((char *)v2 + direct field offset for ShareETAFlowDelegate.logObject);
  id v37 = a2;
  os_log_type_t v38 = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v36, v38);
  os_log_t v332 = v36;
  uint64_t v325 = a1;
  uint64_t v322 = a2;
  id v321 = v37;
  uint64_t v309 = v35;
  if (v39)
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    v333[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315138;
    v331 = (uint8_t *)v33;
    uint64_t v334 = (uint64_t)a2;
    id v41 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INShareETAIntent?);
    uint64_t v42 = String.init<A>(describing:)();
    uint64_t v334 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v333);
    uint64_t v33 = (char *)v331;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v332, v38, "makeIntentFromParse previous intent %s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v44 = v325;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v44 = a1;
  }
  uint64_t v337 = 0;
  unint64_t v45 = v326;
  unint64_t v46 = *(void (**)(char *, uint64_t, void))(v326 + 16);
  uint64_t v47 = v327;
  v331 = (uint8_t *)(v326 + 16);
  *(void *)&long long v330 = v46;
  v46(v27, v44, v327);
  v328 = *(unsigned int (**)(char *, uint64_t))(v45 + 88);
  v329 = (char *)(v45 + 88);
  uint64_t v48 = &static LocationSearchIntent.domainNode;
  if (v328(v27, v47) != enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v47);
    uint64_t v54 = v314;
    goto LABEL_8;
  }
  uint64_t v285 = (char *)v30;
  (*(void (**)(char *, uint64_t))(v45 + 96))(v27, v47);
  unint64_t v45 = v315;
  unint64_t v30 = *(void *)(v315 + 32);
  uint64_t v49 = v309;
  unint64_t v50 = v316;
  ((void (*)(char *, char *, unint64_t))v30)(v309, v27, v316);
  (*(void (**)(char *, char *, unint64_t))(v45 + 16))(v33, v49, v50);
  type metadata accessor for LocationSearchIntent();
  uint64_t v51 = swift_allocObject();
  uint64_t v52 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode == -1) {
    goto LABEL_6;
  }
  while (1)
  {
    swift_once();
LABEL_6:
    *(void *)(v51 + v52) = *v48;
    ((void (*)(uint64_t, char *, unint64_t))v30)(v51 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v33, v50);
    uint64_t v53 = *(void (**)(char *, unint64_t))(v45 + 8);
    swift_retain();
    v53(v49, v50);
    swift_release();
    uint64_t v337 = v51;
    uint64_t v47 = v327;
    unint64_t v45 = v326;
    unint64_t v30 = (unint64_t)v285;
    uint64_t v54 = v314;
    uint64_t v44 = v325;
LABEL_8:
    ((void (*)(char *, uint64_t, uint64_t))v330)(v54, v44, v47);
    if (v328(v54, v47) == enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      uint64_t v55 = v33;
      (*(void (**)(char *, uint64_t))(v45 + 96))(v54, v47);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
      swift_release();
      uint64_t v56 = v315;
      id v57 = *(void (**)(unint64_t, char *, unint64_t))(v315 + 32);
      unint64_t v58 = v316;
      v57(v30, v54, v316);
      os_log_type_t v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v332, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v60 = 0;
        _os_log_impl(&dword_0, v332, v59, "makeIntentFromParse, parsing NLv3IntentPlusServerConversion)", v60, 2u);
        swift_slowDealloc();
      }
      (*(void (**)(char *, unint64_t, unint64_t))(v56 + 16))(v55, v30, v58);
      type metadata accessor for LocationSearchIntent();
      uint64_t v61 = swift_allocObject();
      uint64_t v62 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
      if (one-time initialization token for domainNode != -1) {
        swift_once();
      }
      *(void *)(v61 + v62) = static LocationSearchIntent.domainNode;
      v57(v61 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v55, v58);
      uint64_t v63 = *(void (**)(unint64_t, unint64_t))(v56 + 8);
      swift_retain();
      v63(v30, v58);
      swift_release();
      uint64_t v337 = v61;
      uint64_t v52 = (uint64_t)v323;
      uint64_t v64 = (uint64_t)v332;
      uint64_t v47 = v327;
      unint64_t v45 = v326;
      uint64_t v44 = v325;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v54, v47);
      uint64_t v52 = (uint64_t)v323;
      uint64_t v64 = (uint64_t)v332;
    }
    uint64_t v65 = v324;
    ((void (*)(uint64_t, uint64_t, uint64_t))v330)(v324, v44, v47);
    unint64_t v66 = (unint64_t)&unk_FA000;
    if (v328((char *)v65, v47) != enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v324, v47);
LABEL_32:
      uint64_t v75 = v317;
      goto LABEL_33;
    }
    uint64_t v67 = (void **)v324;
    (*(void (**)(uint64_t, uint64_t))(v45 + 96))(v324, v47);
    uint64_t v68 = *v67;
    os_log_type_t v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled((os_log_t)v64, v69))
    {
      os_log_type_t v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v70 = 0;
      _os_log_impl(&dword_0, (os_log_t)v64, v69, "makeIntentFromParse, POMMES)", v70, 2u);
      swift_slowDealloc();
    }
    type metadata accessor for LocationSearchIntent();
    swift_allocObject();
    uint64_t v49 = v68;
    uint64_t v71 = LocationSearchIntent.init(from:)(v49);
    uint64_t v72 = swift_release();
    uint64_t v337 = v71;
    uint64_t v73 = (*(uint64_t (**)(uint64_t))(class metadata base offset for ShareETAFlowDelegate + *(void *)v52 + 96))(v72);
    if (!v73)
    {

      uint64_t v44 = v325;
LABEL_31:
      unint64_t v45 = v326;
      goto LABEL_32;
    }
    unint64_t v66 = v73;
    uint64_t v74 = PommesResponse.firstGeoExperience.getter();
    uint64_t v75 = v317;
    if (!v74)
    {
      swift_bridgeObjectRelease();

      unint64_t v66 = 1024000;
      uint64_t v44 = v325;
      unint64_t v45 = v326;
      goto LABEL_33;
    }
    unint64_t v76 = (void *)v74;
    uint64_t v77 = v297;
    GeoExperience.geoClientComponent.getter();

    os_log_type_t v78 = v300;
    Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter();
    (*(void (**)(char *, uint64_t))(v298 + 8))(v77, v299);
    uint64_t v47 = Apple_Parsec_Siri_V2alpha_LocationSearchNode.personPlaceID.getter();
    uint64_t v80 = v79;
    (*(void (**)(char *, uint64_t))(v301 + 8))(v78, v302);
    uint64_t v81 = v66 & 0xFFFFFFFFFFFFFF8;
    if (v66 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v75 = v317;
      uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v81 = v66 & 0xFFFFFFFFFFFFFF8;
    }
    else
    {
      uint64_t v52 = *(void *)((char *)&dword_10 + (v66 & 0xFFFFFFFFFFFFFF8));
    }
    unint64_t v45 = v326;
    if (v52) {
      break;
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v52 = (uint64_t)v323;
    unint64_t v66 = 1024000;
    uint64_t v44 = v325;
    uint64_t v47 = v327;
LABEL_33:
    ((void (*)(char *, uint64_t, uint64_t))v330)(v75, v44, v47);
    if (v328(v75, v47) != enum case for Parse.uso(_:))
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v75, v47);
      goto LABEL_115;
    }
    (*(void (**)(char *, uint64_t))(v45 + 96))(v75, v47);
    (*(void (**)(char *, char *, uint64_t))(v310 + 32))(v320, v75, v311);
    os_log_type_t v85 = static os_log_type_t.default.getter();
    uint64_t v86 = os_log_type_enabled((os_log_t)v64, v85);
    if (v86)
    {
      uint64_t v87 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v87 = 0;
      _os_log_impl(&dword_0, (os_log_t)v64, v85, "makeIntentFromParse, parsing uso parse)", v87, 2u);
      uint64_t v86 = swift_slowDealloc();
    }
    uint64_t v88 = (*(uint64_t (**)(uint64_t))(*(void *)(v66 + 3144) + *(void *)v52 + 96))(v86);
    if (!v88) {
      goto LABEL_109;
    }
    unint64_t v30 = v88;
    uint64_t v89 = v305;
    USOParse.userParse.getter();
    uint64_t v90 = Siri_Nlu_External_UserParse.userDialogActs.getter();
    (*(void (**)(char *, uint64_t))(v306 + 8))(v89, v307);
    uint64_t v91 = *(void *)(v90 + 16);
    uint64_t v92 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    uint64_t v93 = *(void *)(v92 - 8);
    if (v91)
    {
      os_log_type_t v94 = v304;
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v92 - 8) + 16))(v304, v90+ ((*(unsigned __int8 *)(*(void *)(v92 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v92 - 8) + 80)), v92);
      uint64_t v95 = 0;
    }
    else
    {
      uint64_t v95 = 1;
      os_log_type_t v94 = v304;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56))(v94, v95, 1, v92);
    swift_bridgeObjectRelease();
    int v96 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 48))(v94, 1, v92);
    uint64_t v97 = (uint64_t)v94;
    uint64_t v47 = v327;
    if (v96 == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)?(v97, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      goto LABEL_109;
    }
    uint64_t v98 = v288;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v97, v92);
    uint64_t v99 = v291;
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v289 + 8))(v98, v290);
    uint64_t v100 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    (*(void (**)(char *, uint64_t))(v292 + 8))(v99, v293);
    uint64_t v101 = *(void *)(v100 + 16);
    uint64_t v317 = (char *)v30;
    if (v101)
    {
      uint64_t v102 = *(void (**)(uint64_t, unint64_t, unint64_t))(v303 + 16);
      unint64_t v103 = v100 + ((*(unsigned __int8 *)(v303 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v303 + 80));
      uint64_t v104 = (void (**)(char *, uint64_t))(v286 + 8);
      uint64_t v105 = v100;
      id v106 = (void (**)(void, unint64_t))(v303 + 8);
      uint64_t v107 = *(void *)(v303 + 72);
      uint64_t v324 = v105;
      swift_bridgeObjectRetain();
      unint64_t v108 = v319;
      uint64_t v109 = v318;
      id v110 = v312;
      while (1)
      {
        v102(v109, v103, v108);
        Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
        uint64_t v111 = Google_Protobuf_StringValue.value.getter();
        uint64_t v113 = v112;
        (*v104)(v110, v313);
        if (v111 == 0x64695F6D657469 && v113 == 0xE700000000000000) {
          break;
        }
        char v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v114) {
          goto LABEL_71;
        }
        uint64_t v109 = v318;
        unint64_t v108 = v319;
        (*v106)(v318, v319);
        v103 += v107;
        if (!--v101)
        {
          swift_bridgeObjectRelease();
          uint64_t v115 = 1;
          uint64_t v52 = (uint64_t)v323;
          uint64_t v64 = (uint64_t)v332;
          unint64_t v66 = 1024000;
          uint64_t v44 = v325;
          uint64_t v47 = v327;
          uint64_t v116 = v303;
          uint64_t v117 = (uint64_t)v287;
          goto LABEL_72;
        }
      }
      swift_bridgeObjectRelease();
LABEL_71:
      swift_bridgeObjectRelease();
      uint64_t v64 = (uint64_t)v332;
      unint64_t v66 = 1024000;
      unint64_t v108 = v319;
      uint64_t v116 = v303;
      uint64_t v117 = (uint64_t)v287;
      (*(void (**)(char *, void, unint64_t))(v303 + 32))(v287, v318, v319);
      uint64_t v115 = 0;
      uint64_t v52 = (uint64_t)v323;
      uint64_t v44 = v325;
      uint64_t v47 = v327;
LABEL_72:
      unint64_t v30 = (unint64_t)v317;
    }
    else
    {
      uint64_t v115 = 1;
      unint64_t v66 = 1024000;
      unint64_t v108 = v319;
      uint64_t v116 = v303;
      uint64_t v117 = (uint64_t)v287;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v116 + 56))(v117, v115, 1, v108);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v116 + 48))(v117, 1, v108) == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)?(v117, &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
      goto LABEL_109;
    }
    uint64_t v49 = (char *)v44;
    uint64_t v137 = v117;
    unint64_t v138 = v108;
    uint64_t v324 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    unint64_t v45 = v139;
    (*(void (**)(uint64_t, unint64_t))(v116 + 8))(v137, v138);
    os_log_type_t v140 = static os_log_type_t.default.getter();
    BOOL v141 = os_log_type_enabled((os_log_t)v64, v140);
    unint64_t v316 = v45;
    if (v141)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v143 = (uint8_t *)swift_slowAlloc();
      v333[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v143 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v334 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v324, v316, v333);
      unint64_t v66 = (unint64_t)&unk_FA000;
      unint64_t v45 = v316;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, (os_log_t)v64, v140, "contactId on disambiguation is %s", v143, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v47 = v327;
      swift_slowDealloc();
    }
    if (!(v30 >> 62))
    {
      uint64_t v48 = *(uint64_t **)((char *)&dword_10 + (v30 & 0xFFFFFFFFFFFFFF8));
      uint64_t v44 = (uint64_t)v49;
      if (!v48) {
        goto LABEL_108;
      }
      goto LABEL_79;
    }
LABEL_107:
    swift_bridgeObjectRetain();
    uint64_t v48 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v44 = (uint64_t)v49;
    if (!v48)
    {
LABEL_108:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_109:
      type metadata accessor for GeoParse();
      static GeoParse.getDomainIntent(parse:)(v44, (uint64_t)v333);
      (*(void (**)(char *, uint64_t))(v310 + 8))(v320, v311);
      if (v333[3])
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
        type metadata accessor for LocationSearchIntent();
        if (swift_dynamicCast()) {
          uint64_t v169 = v334;
        }
        else {
          uint64_t v169 = 0;
        }
      }
      else
      {
        outlined destroy of (label: String?, value: Any)?((uint64_t)v333, &demangling cache variable for type metadata for GeoIntent?);
        uint64_t v169 = 0;
      }
      swift_release();
      uint64_t v337 = v169;
LABEL_115:
      if (!v322) {
        goto LABEL_156;
      }
      uint64_t v170 = v44;
      unint64_t v319 = v52 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
      id v171 = *(uint64_t (**)(void))(*(void *)(v66 + 3144) + *(void *)v52 + 96);
      unint64_t v172 = (char *)v321;
      uint64_t v173 = v171();
      if (!v173)
      {

        goto LABEL_156;
      }
      unint64_t v174 = v173;
      os_log_type_t v175 = static os_log_type_t.info.getter();
      BOOL v176 = os_log_type_enabled((os_log_t)v64, v175);
      uint64_t v324 = v174;
      if (v176)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v177 = swift_slowAlloc();
        v333[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v177 = 136315394;
        swift_beginAccess();
        v335[0] = v337;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationSearchIntent?);
        uint64_t v178 = String.init<A>(describing:)();
        v335[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v178, v179, v333);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v177 + 12) = 2080;
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
        swift_bridgeObjectRetain();
        uint64_t v180 = Array.description.getter();
        unint64_t v182 = v181;
        swift_bridgeObjectRelease();
        uint64_t v183 = v180;
        uint64_t v52 = (uint64_t)v323;
        v335[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v183, v182, v333);
        uint64_t v64 = (uint64_t)v332;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        unint64_t v174 = v324;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, (os_log_t)v64, v175, "intent %s, paginatedItems %s", (uint8_t *)v177, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      swift_beginAccess();
      if (v337)
      {
        uint64_t v184 = *(uint64_t (**)(uint64_t))(*(void *)v337 + 216);
        uint64_t v185 = swift_retain();
        uint64_t v186 = v184(v185);
        unint64_t v188 = v187;
        swift_release();
        if (v188)
        {
          uint64_t v317 = v172;
          if (v174 >> 62) {
            goto LABEL_213;
          }
          uint64_t v189 = *(void *)((char *)&dword_10 + (v174 & 0xFFFFFFFFFFFFFF8));
          swift_bridgeObjectRetain();
          for (; v189; uint64_t v189 = _CocoaArrayWrapper.endIndex.getter())
          {
            v320 = (char *)v189;
            if ((v174 & 0xC000000000000001) == 0)
            {
              uint64_t v201 = 0;
              *(void *)&long long v190 = 136315394;
              long long v318 = v190;
              unint64_t v316 = (unint64_t)&type metadata for Any + 8;
              while (1)
              {
                v202 = (char *)(v201 + 1);
                if (__OFADD__(v201, 1)) {
                  goto LABEL_212;
                }
                id v203 = *(id *)(v174 + 8 * v201 + 32);
                swift_bridgeObjectRetain_n();
                id v194 = v203;
                os_log_type_t v204 = static os_log_type_t.default.getter();
                if (os_log_type_enabled((os_log_t)v64, v204))
                {
                  uint64_t v205 = swift_slowAlloc();
                  v335[0] = swift_slowAlloc();
                  *(_DWORD *)uint64_t v205 = v318;
                  swift_bridgeObjectRetain();
                  *(void *)(v205 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v186, v188, v335);
                  swift_bridgeObjectRelease_n();
                  *(_WORD *)(v205 + 12) = 2080;
                  uint64_t v206 = INPerson.encodeBase64.getter();
                  *(void *)(v205 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v206, v207, v335);

                  unint64_t v174 = v324;
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_0, (os_log_t)v64, v204, "selected node %s person encode %s", (uint8_t *)v205, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                }
                BOOL v209 = INPerson.encodeBase64.getter() == v186 && v188 == v208;
                uint64_t v64 = (uint64_t)v332;
                uint64_t v47 = v327;
                if (v209) {
                  break;
                }
                char v210 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v210)
                {
LABEL_165:
                  swift_bridgeObjectRelease_n();
                  goto LABEL_166;
                }

                ++v201;
                if (v202 == v320) {
                  goto LABEL_146;
                }
              }
LABEL_162:
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
LABEL_166:
              swift_bridgeObjectRelease();
              id v232 = v194;
              os_log_type_t v233 = static os_log_type_t.default.getter();
              if (os_log_type_enabled((os_log_t)v64, v233))
              {
                unint64_t v234 = (uint8_t *)swift_slowAlloc();
                v335[0] = swift_slowAlloc();
                *(_DWORD *)unint64_t v234 = 136315138;
                v331 = v234 + 4;
                id v235 = v232;
                id v236 = [v235 description];
                id v237 = v64;
                uint64_t v238 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v240 = v239;

                uint64_t v336 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v238, v240, v335);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_0, v237, v233, "chosen item %s", v234, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
              }
              uint64_t v241 = v317;
              (*(void (**)(void))(class metadata base offset for ShareETAFlowDelegate + *v323 + 104))(0);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              uint64_t v242 = swift_allocObject();
              *(_OWORD *)(v242 + 16) = xmmword_C0AD0;
              *(void *)(v242 + 32) = v232;
              v335[0] = v242;
              specialized Array._endMutation()();
              id v243 = objc_allocWithZone((Class)INShareETAIntent);
              type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
              Class isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              id v131 = [v243 initWithRecipients:isa];

              goto LABEL_170;
            }
            uint64_t v191 = 0;
            *(void *)&long long v190 = 136315394;
            long long v327 = v190;
            *(void *)&long long v318 = (char *)&type metadata for Any + 8;
            while (1)
            {
              uint64_t v192 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              uint64_t v193 = (char *)(v191 + 1);
              if (__OFADD__(v191, 1)) {
                break;
              }
              id v194 = (id)v192;
              swift_bridgeObjectRetain_n();
              swift_unknownObjectRetain_n();
              os_log_type_t v195 = static os_log_type_t.default.getter();
              if (os_log_type_enabled((os_log_t)v64, v195))
              {
                uint64_t v196 = swift_slowAlloc();
                v335[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v196 = v327;
                swift_bridgeObjectRetain();
                *(void *)(v196 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v186, v188, v335);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v196 + 12) = 2080;
                uint64_t v197 = INPerson.encodeBase64.getter();
                *(void *)(v196 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v198, v335);
                swift_unknownObjectRelease();

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_0, v332, v195, "selected node %s person encode %s", (uint8_t *)v196, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                uint64_t v64 = (uint64_t)v332;
                swift_slowDealloc();
              }
              else
              {
                swift_unknownObjectRelease();

                swift_bridgeObjectRelease_n();
              }
              if (INPerson.encodeBase64.getter() == v186 && v188 == v199) {
                goto LABEL_162;
              }
              char v200 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v200) {
                goto LABEL_165;
              }
              swift_unknownObjectRelease();
              ++v191;
              unint64_t v174 = v324;
              if (v193 == v320) {
                goto LABEL_146;
              }
            }
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            swift_bridgeObjectRetain();
          }
LABEL_146:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v52 = (uint64_t)v323;
          uint64_t v170 = v325;
          unint64_t v172 = v317;
        }
      }
      uint64_t v211 = v308;
      ((void (*)(char *, uint64_t, uint64_t))v330)(v308, v170, v47);
      if (v328(v211, v47) != enum case for Parse.directInvocation(_:))
      {
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v326 + 8))(v211, v47);
        goto LABEL_155;
      }
      (*(void (**)(char *, uint64_t))(v326 + 96))(v211, v47);
      uint64_t v212 = v294;
      uint64_t v213 = v296;
      uint64_t v214 = v295;
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v296, v211, v295);
      uint64_t v215 = Parse.DirectInvocation.userData.getter();
      if (v215
        && (unint64_t v216 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v215), swift_bridgeObjectRelease(), v216))
      {
        if (*(void *)(v216 + 16))
        {
          unint64_t v217 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E65697069636552, 0xE900000000000074);
          if (v218)
          {
            v219 = (uint64_t *)(*(void *)(v216 + 56) + 16 * v217);
            uint64_t v220 = *v219;
            os_log_type_t v83 = v219[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            os_log_type_t v221 = static os_log_type_t.default.getter();
            swift_bridgeObjectRetain_n();
            os_log_type_t v222 = v221;
            BOOL v223 = os_log_type_enabled((os_log_t)v64, v221);
            v331 = (uint8_t *)v220;
            uint64_t v317 = v172;
            if (v223)
            {
              unint64_t v224 = (uint8_t *)swift_slowAlloc();
              uint64_t v225 = swift_slowAlloc();
              v335[1] = (uint64_t)v83;
              uint64_t v336 = v225;
              *(_DWORD *)unint64_t v224 = 136315138;
              v335[0] = v220;
              swift_bridgeObjectRetain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
              uint64_t v226 = String.init<A>(describing:)();
              v335[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v226, v227, &v336);
              unint64_t v174 = v324;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              uint64_t v64 = (uint64_t)v332;
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_0, (os_log_t)v64, v222, "From Payload person: %s", v224, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }
            if (v174 >> 62) {
              goto LABEL_218;
            }
            uint64_t v245 = *(void *)((char *)&dword_10 + (v174 & 0xFFFFFFFFFFFFFF8));
            while (v245)
            {
              if ((v324 & 0xC000000000000001) == 0)
              {
                uint64_t v257 = 0;
                *(void *)&long long v228 = 136315138;
                long long v330 = v228;
                v329 = (char *)&type metadata for Any + 8;
                v258 = v332;
                while (1)
                {
                  uint64_t v259 = v257 + 1;
                  if (__OFADD__(v257, 1)) {
                    goto LABEL_217;
                  }
                  id v260 = *(id *)(v324 + 8 * v257 + 32);
                  os_log_type_t v261 = static os_log_type_t.default.getter();
                  id v249 = v260;
                  if (os_log_type_enabled(v258, v261))
                  {
                    uint64_t v262 = swift_slowAlloc();
                    v335[0] = swift_slowAlloc();
                    *(_DWORD *)uint64_t v262 = v330;
                    uint64_t v263 = INPerson.encodeBase64.getter();
                    *(void *)(v262 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v263, v264, v335);

                    swift_bridgeObjectRelease();
                    _os_log_impl(&dword_0, v258, v261, "person's contact handle from list: %s", (uint8_t *)v262, 0xCu);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {
                  }
                  uint64_t v265 = INPerson.encodeBase64.getter();
                  uint64_t v64 = (uint64_t)v266;
                  if (v83)
                  {
                    if ((uint8_t *)v265 == v331 && v83 == v266)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      goto LABEL_206;
                    }
                    char v268 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v268)
                    {
                      swift_bridgeObjectRelease();
LABEL_206:
                      swift_bridgeObjectRelease();
                      uint64_t v64 = (uint64_t)v332;
LABEL_207:
                      os_log_type_t v269 = static os_log_type_t.default.getter();
                      id v270 = v249;
                      if (os_log_type_enabled((os_log_t)v64, v269))
                      {
                        unint64_t v271 = (uint8_t *)swift_slowAlloc();
                        v335[0] = swift_slowAlloc();
                        *(_DWORD *)unint64_t v271 = 136315138;
                        v331 = v271 + 4;
                        id v272 = v270;
                        id v273 = [v272 description];
                        v274 = v64;
                        uint64_t v275 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        unint64_t v277 = v276;

                        uint64_t v336 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v275, v277, v335);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();

                        swift_bridgeObjectRelease();
                        _os_log_impl(&dword_0, v274, v269, "chosen item %s", v271, 0xCu);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_slowDealloc();
                      }
                      else
                      {
                      }
                      uint64_t v278 = v295;
                      uint64_t v279 = v294;
                      id v280 = v317;
                      (*(void (**)(void))(class metadata base offset for ShareETAFlowDelegate + *v323 + 104))(0);
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
                      uint64_t v281 = swift_allocObject();
                      *(_OWORD *)(v281 + 16) = xmmword_C0AD0;
                      *(void *)(v281 + 32) = v270;
                      v335[0] = v281;
                      specialized Array._endMutation()();
                      id v282 = objc_allocWithZone((Class)INShareETAIntent);
                      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
                      id v283 = v270;
                      Class v284 = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      id v131 = [v282 initWithRecipients:v284];

                      (*(void (**)(char *, uint64_t))(v279 + 8))(v296, v278);
                      goto LABEL_170;
                    }
                  }
                  else
                  {

                    swift_bridgeObjectRelease();
                  }
                  ++v257;
                  if (v259 == v245) {
                    goto LABEL_219;
                  }
                }
              }
              uint64_t v246 = 0;
              *(void *)&long long v228 = 136315138;
              long long v330 = v228;
              v329 = (char *)&type metadata for Any + 8;
              while (1)
              {
                uint64_t v247 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                uint64_t v248 = v246 + 1;
                if (__OFADD__(v246, 1)) {
                  break;
                }
                id v249 = (id)v247;
                os_log_type_t v250 = static os_log_type_t.default.getter();
                swift_unknownObjectRetain_n();
                if (os_log_type_enabled((os_log_t)v64, v250))
                {
                  uint64_t v251 = swift_slowAlloc();
                  v335[0] = swift_slowAlloc();
                  *(_DWORD *)uint64_t v251 = v330;
                  uint64_t v252 = INPerson.encodeBase64.getter();
                  *(void *)(v251 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v252, v253, v335);
                  swift_unknownObjectRelease();

                  uint64_t v64 = (uint64_t)v332;
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_0, (os_log_t)v64, v250, "person's contact handle from list: %s", (uint8_t *)v251, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {
                  swift_unknownObjectRelease();
                }
                uint64_t v254 = INPerson.encodeBase64.getter();
                if (v83)
                {
                  if ((uint8_t *)v254 == v331 && v83 == v255)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
LABEL_203:
                    swift_bridgeObjectRelease();
                    goto LABEL_207;
                  }
                  char v256 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v256)
                  {
                    swift_bridgeObjectRelease();
                    goto LABEL_203;
                  }
                  swift_unknownObjectRelease();
                }
                else
                {
                  swift_unknownObjectRelease();
                  swift_bridgeObjectRelease();
                }
                ++v246;
                if (v248 == v245) {
                  goto LABEL_219;
                }
              }
              __break(1u);
LABEL_216:
              __break(1u);
LABEL_217:
              __break(1u);
LABEL_218:
              swift_bridgeObjectRetain();
              uint64_t v245 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
LABEL_219:
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v294 + 8))(v296, v295);
            uint64_t v52 = (uint64_t)v323;
LABEL_155:
            unint64_t v66 = (unint64_t)&unk_FA000;
LABEL_156:
            (*(void (**)(void))(*(void *)(v66 + 3144) + *(void *)v52 + 104))(0);
            id v229 = v321;
LABEL_157:
            swift_release();
            return v322;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        static os_log_type_t.error.getter();
      }
      else
      {
        swift_bridgeObjectRelease();
        static os_log_type_t.error.getter();
      }
      os_log(_:dso:log:_:_:)();

      (*(void (**)(char *, uint64_t))(v212 + 8))(v213, v214);
      v231 = v172;
      goto LABEL_157;
    }
LABEL_79:
    unint64_t v319 = v30 & 0xC000000000000001;
    uint64_t v144 = 4;
    *(void *)&long long v142 = 136315394;
    long long v315 = v142;
    uint64_t v314 = (char *)&type metadata for Any + 8;
    *(void *)&long long v318 = v48;
    while (1)
    {
      uint64_t v51 = v144 - 4;
      uint64_t v146 = v319
           ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : (char *)*(id *)(v30 + 8 * v144);
      uint64_t v33 = v146;
      unint64_t v50 = v144 - 3;
      if (__OFADD__(v51, 1)) {
        break;
      }
      os_log_type_t v147 = static os_log_type_t.default.getter();
      uint64_t v49 = v33;
      if (os_log_type_enabled((os_log_t)v64, v147))
      {
        uint64_t v148 = swift_slowAlloc();
        uint64_t v334 = swift_slowAlloc();
        *(_DWORD *)uint64_t v148 = v315;
        unint64_t v149 = v49;
        id v150 = [v149 description];
        uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v153 = v152;

        *(void *)(v148 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v153, &v334);
        swift_bridgeObjectRelease();
        *(_WORD *)(v148 + 12) = 2080;
        id v154 = [v149 contactIdentifier];
        if (v154)
        {
          unint64_t v155 = v154;
          uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v158 = v157;
        }
        else
        {
          uint64_t v156 = 0;
          uint64_t v158 = 0;
        }
        unint64_t v45 = v316;
        v333[0] = v156;
        v333[1] = v158;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v159 = String.init<A>(describing:)();
        *(void *)(v148 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v160, &v334);

        swift_bridgeObjectRelease();
        uint64_t v64 = (uint64_t)v332;
        _os_log_impl(&dword_0, v332, v147, "%s has contactId %s", (uint8_t *)v148, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v52 = (uint64_t)v323;
        unint64_t v30 = (unint64_t)v317;
      }
      else
      {
      }
      id v161 = [v49 contactIdentifier];
      if (v161)
      {
        uint64_t v162 = v161;
        uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v165 = v164;

        if (v324 == v163 && v45 == v165)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_98:
          (*(void (**)(void))(class metadata base offset for ShareETAFlowDelegate + *(void *)v52 + 104))(0);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v166 = swift_allocObject();
          *(_OWORD *)(v166 + 16) = xmmword_C0AD0;
          *(void *)(v166 + 32) = v49;
          v333[0] = v166;
          specialized Array._endMutation()();
          id v167 = objc_allocWithZone((Class)INShareETAIntent);
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
          Class v168 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v131 = [v167 initWithRecipients:v168];

          (*(void (**)(char *, uint64_t))(v310 + 8))(v320, v311);
          goto LABEL_170;
        }
        char v145 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v145)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_98;
        }
      }

      ++v144;
      uint64_t v48 = (uint64_t *)v318;
      BOOL v209 = v50 == (void)v318;
      uint64_t v44 = v325;
      if (v209)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v66 = 1024000;
        uint64_t v47 = v327;
        goto LABEL_109;
      }
    }
    __break(1u);
  }
  uint64_t v324 = v66 & 0xC000000000000001;
  unint64_t v316 = v81;
  if ((v66 & 0xC000000000000001) == 0)
  {
    if (*(void *)(v81 + 16))
    {
      id v82 = *(id *)(v66 + 32);
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_107;
  }
  while (1)
  {
    id v82 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_26:
    os_log_type_t v83 = v82;
    if (INPerson.encodeBase64.getter() == v47 && v84 == v80)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_54;
    }
    char v118 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v118) {
      break;
    }

    if (v52 == 1)
    {
LABEL_69:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      uint64_t v52 = (uint64_t)v323;
      uint64_t v64 = (uint64_t)v332;
      unint64_t v66 = 1024000;
      uint64_t v44 = v325;
      uint64_t v47 = v327;
      goto LABEL_31;
    }
    uint64_t v64 = 5;
    while (1)
    {
      uint64_t v132 = (char *)(v64 - 4);
      if (v324)
      {
        os_log_type_t v133 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)v132 >= *(void *)(v316 + 16)) {
          goto LABEL_216;
        }
        os_log_type_t v133 = *(id *)(v66 + 8 * v64);
      }
      os_log_type_t v83 = v133;
      id v134 = (char *)(v64 - 3);
      if (__OFADD__(v132, 1)) {
        break;
      }
      if (INPerson.encodeBase64.getter() == v47 && v135 == v80)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v64 = (uint64_t)v332;
        goto LABEL_54;
      }
      char v136 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v136)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v64 = (uint64_t)v332;
        goto LABEL_54;
      }

      ++v64;
      if (v134 == (char *)v52) {
        goto LABEL_69;
      }
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_54:
  os_log_type_t v119 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v64, v119))
  {
    unint64_t v120 = v83;
    char v121 = (uint8_t *)swift_slowAlloc();
    v333[0] = swift_slowAlloc();
    *(_DWORD *)char v121 = 136315138;
    v331 = v121 + 4;
    uint64_t v122 = v120;
    id v123 = [v122 description];
    uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v126 = v125;

    uint64_t v334 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v126, v333);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v332, v119, "chosen item %s", v121, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  (*(void (**)(void))(class metadata base offset for ShareETAFlowDelegate + *v323 + 104))(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v127 = swift_allocObject();
  *(_OWORD *)(v127 + 16) = xmmword_C0AD0;
  *(void *)(v127 + 32) = v83;
  v333[0] = v127;
  specialized Array._endMutation()();
  id v128 = objc_allocWithZone((Class)INShareETAIntent);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
  uint64_t v129 = v83;
  Class v130 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v131 = [v128 initWithRecipients:v130];

LABEL_170:
  swift_release();
  return v131;
}

uint64_t ShareETAFlowDelegate.makeAppResolution()()
{
  return AppResolutionService.init()();
}

uint64_t ShareETAFlowDelegate.makeDialogTemplating()()
{
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  outlined init with copy of DeviceState(v0 + direct field offset for ShareETAFlowDelegate.currentDeviceState, (uint64_t)v2);
  type metadata accessor for ShareETATemplatingService(0);
  swift_allocObject();
  return ShareETATemplatingService.init(deviceState:)(v2);
}

uint64_t ShareETATemplatingService.__allocating_init(deviceState:)(void *a1)
{
  return ShareETATemplatingService.init(deviceState:)(a1);
}

uint64_t ShareETAFlowDelegate.makeUnsupportedValueBehavior(app:intent:parameterName:intentResolutionResult:)@<X0>(void *a1@<X4>, uint64_t a2@<X8>)
{
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_C0600;
  id v5 = [a1 unsupportedReason];
  *(void *)(v4 + 56) = &type metadata for Int;
  *(void *)(v4 + 64) = &protocol witness table for Int;
  *(void *)(v4 + 32) = v5;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v6 = [a1 unsupportedReason];
  uint64_t v7 = type metadata accessor for UnsupportedValueBehavior();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104);
  uint64_t v9 = (unsigned int *)&enum case for UnsupportedValueBehavior.dialogAndPrompt(_:);
  if ((uint64_t)v6 <= 5) {
    uint64_t v9 = (unsigned int *)&enum case for UnsupportedValueBehavior.dialogAndStop(_:);
  }
  uint64_t v10 = *v9;

  return v8(a2, v10, v7);
}

uint64_t ShareETAFlowDelegate.makeAceViewProvider()()
{
  uint64_t v1 = *(NSObject **)(v0 + direct field offset for ShareETAFlowDelegate.logObject);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "makeAceViewProvider executed", v3, 2u);
    swift_slowDealloc();
  }
  type metadata accessor for ShareETAAceViewProvider(0);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = direct field offset for ShareETAAceViewProvider.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v4 + v5) = OS_os_log.init(subsystem:category:)();
  swift_release();
  return DefaultAceViewProvider.init()();
}

uint64_t ShareETAAceViewProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = direct field offset for ShareETAAceViewProvider.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v0 + v1) = OS_os_log.init(subsystem:category:)();
  swift_release();
  return DefaultAceViewProvider.init()();
}

uint64_t ShareETAFlowDelegate.makeDisambiguationList(app:intent:parameterName:intentResolutionResult:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(void), uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v12 = type metadata accessor for Locale();
  uint64_t v32 = *(void *)(v12 - 8);
  uint64_t v33 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  uint64_t v15 = *(NSObject **)((char *)v7 + direct field offset for ShareETAFlowDelegate.logObject);
  os_log(_:dso:log:_:_:)();
  id v16 = [a5 disambiguationItems];
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease();
  if (v18)
  {
    uint64_t v31 = a6;
    id v19 = objc_msgSend(a5, "disambiguationItems", a7);
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = specialized _arrayConditionalCast<A, B>(_:)(v20, &lazy cache variable for type metadata for INPerson);
    swift_bridgeObjectRelease();
    if (v21)
    {
      uint64_t v23 = v34;
      uint64_t v22 = v35;
      if (v34 == 0x6E65697069636572 && v35 == 0xE900000000000074
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        os_log_type_t v24 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v15, v24))
        {
          uint64_t v25 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v25 = 0;
          _os_log_impl(&dword_0, v15, v24, "Building contacts disambiguation list", v25, 2u);
          swift_slowDealloc();
        }
        __swift_project_boxed_opaque_existential_1((void *)((char *)v8 + direct field offset for ShareETAFlowDelegate.currentDeviceState), *(void *)((char *)v8 + direct field offset for ShareETAFlowDelegate.currentDeviceState + 24));
        swift_bridgeObjectRetain();
        dispatch thunk of DeviceState.siriLocale.getter();
        specialized static DisambiguationListUtils.makeDisambiguationItems(persons:locale:)((unint64_t)v21, (uint64_t)v14);
        uint64_t v26 = *(void (**)(uint64_t))(class metadata base offset for ShareETAFlowDelegate + *v8 + 104);
        uint64_t v27 = swift_bridgeObjectRetain();
        v26(v27);
        specialized _arrayForceCast<A, B>(_:)((unint64_t)v21);
        type metadata accessor for SiriKitDisambiguationList();
        swift_allocObject();
        swift_bridgeObjectRetain();
        SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)();
        v31();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v14, v33);
      }
      swift_bridgeObjectRelease();
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_C0600;
      *(void *)(v29 + 56) = &type metadata for String;
      *(void *)(v29 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v29 + 32) = v23;
      *(void *)(v29 + 40) = v22;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for SiriKitDisambiguationList();
      swift_allocObject();
    }
    else
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for SiriKitDisambiguationList();
      swift_allocObject();
    }
    SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)();
    v31();
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SiriKitDisambiguationList();
    swift_allocObject();
    SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)();
    a6();
  }

  return swift_release();
}

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, &lazy cache variable for type metadata for INSupportedTrafficIncidentType);
}

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v4) {
    return v8;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v7);
    type metadata accessor for OS_os_log(0, a2);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v4) {
      return v8;
    }
  }
  swift_release();

  return 0;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        outlined init with take of Any(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        outlined init with take of Any(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t ShareETAFlowDelegate.makeNLContextProvider()()
{
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v1 = outlined init with copy of DeviceState((uint64_t)v0 + direct field offset for ShareETAFlowDelegate.currentDeviceState, (uint64_t)v8);
  char v2 = (*(uint64_t (**)(uint64_t))(class metadata base offset for ShareETAFlowDelegate + *v0 + 40))(v1);
  char v3 = (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + *v0 + 64))();
  type metadata accessor for ShareETAContextProvider(0);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = direct field offset for ShareETAContextProvider.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v4 + v5) = OS_os_log.init(subsystem:category:)();
  outlined init with copy of DeviceState((uint64_t)v8, v4 + direct field offset for ShareETAContextProvider.currentDeviceState);
  *(unsigned char *)(v4 + direct field offset for ShareETAContextProvider.isPOMMES) = v2 & 1;
  *(unsigned char *)(v4 + direct field offset for ShareETAContextProvider.isUSO) = v3 & 1;
  swift_release();
  uint64_t v6 = DefaultNLContextProvider.init()();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v8);
  return v6;
}

uint64_t ShareETAContextProvider.__allocating_init(deviceState:isPOMMES:isUSO:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ShareETAFlowDelegate.__allocating_init(deviceState:isPOMMES:isUSO:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))ShareETAContextProvider.init(deviceState:isPOMMES:isUSO:));
}

uint64_t ShareETAFlowDelegate.__allocating_init(deviceState:isPOMMES:isUSO:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  return a4(a1, a2, a3);
}

BOOL ShareETAFlowDelegate.shouldConfirmIntentWithUser(intent:intentResponse:)(uint64_t a1, void *a2)
{
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_C0600;
  uint64_t v4 = (char *)[a2 code];
  if (v4 == (unsigned char *)&dword_0 + 2) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (v4 == (unsigned char *)&dword_0 + 2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v6;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return [a2 code] == (char *)&dword_0 + 2;
}

uint64_t ShareETAFlowDelegate.makeConfirmationStateFromParse(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for USOParse();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v79 = v5;
  uint64_t v80 = v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v77 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v76 = (char *)&v74 - v10;
  __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v74 - v11;
  uint64_t v85 = type metadata accessor for NLIntent();
  uint64_t v83 = *(void *)(v85 - 8);
  uint64_t v12 = __chkstk_darwin(v85);
  uint64_t v84 = (void **)((char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  id v82 = (void **)((char *)&v74 - v14);
  uint64_t v15 = type metadata accessor for Parse();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v86 = (void **)((char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v74 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v74 - v22;
  os_log_type_t v24 = static os_log_type_t.info.getter();
  uint64_t v25 = *(NSObject **)(v2 + direct field offset for ShareETAFlowDelegate.logObject);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v87 = a1;
  v26(v23, a1, v15);
  if (os_log_type_enabled(v25, v24))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v75 = a2;
    uint64_t v28 = (uint8_t *)v27;
    v91[0] = swift_slowAlloc();
    os_log_t v78 = v25;
    *(_DWORD *)uint64_t v28 = 136315138;
    uint64_t v74 = v28 + 4;
    v26(v21, (uint64_t)v23, v15);
    uint64_t v29 = String.init<A>(describing:)();
    *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v91);
    uint64_t v25 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v16 + 8);
    v31(v23, v15);
    _os_log_impl(&dword_0, v25, v24, "share ETA makeConfirmationStateFromParse: %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v75;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v16 + 8);
    v31(v23, v15);
  }
  uint64_t v33 = v86;
  uint64_t v32 = v87;
  v26((char *)v86, v87, v15);
  int v34 = (*(uint64_t (**)(void **, uint64_t))(v16 + 88))(v33, v15);
  if (v34 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(void **, uint64_t))(v16 + 96))(v33, v15);
LABEL_8:
    uint64_t v35 = v82;
    uint64_t v36 = *(void (**)(char *, void **, uint64_t))(v83 + 32);
    id v37 = v33;
    uint64_t v38 = v85;
    v36((char *)v82, v37, v85);
    BOOL v39 = v84;
    v36((char *)v84, v35, v38);
    type metadata accessor for LocationSearchIntent();
    uint64_t v40 = swift_allocObject();
    uint64_t v41 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once();
    }
    *(void *)(v40 + v41) = static LocationSearchIntent.domainNode;
    v36((char *)(v40 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), v39, v38);
    v91[0] = v40;
    uint64_t v42 = one-time initialization token for confirmationNode;
    swift_retain();
    if (v42 != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent();
    IntentNodeTraversable.value<A>(forNode:)();
    switch((char)v89)
    {
      case 1:
        unint64_t v43 = (unsigned int *)&enum case for SiriKitConfirmationState.rejected(_:);
        break;
      case 2:
        unint64_t v43 = (unsigned int *)&enum case for SiriKitConfirmationState.cancelled(_:);
        break;
      case 3:
        unint64_t v43 = (unsigned int *)&enum case for SiriKitConfirmationState.unset(_:);
        break;
      default:
        unint64_t v43 = (unsigned int *)&enum case for SiriKitConfirmationState.confirmed(_:);
        break;
    }
    uint64_t v47 = *v43;
    uint64_t v48 = type metadata accessor for SiriKitConfirmationState();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104))(a2, v47, v48);
    return swift_release();
  }
  if (v34 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(void **, uint64_t))(v16 + 96))(v33, v15);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    goto LABEL_8;
  }
  if (v34 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v16 + 96))(v33, v15);
    uint64_t v44 = *v33;
    type metadata accessor for LocationSearchIntent();
    swift_allocObject();
    id v45 = v44;
    uint64_t v46 = *(void *)LocationSearchIntent.init(from:)(v45);
    (*(void (**)(void))(v46 + 256))();

    return swift_release();
  }
  if (v34 != enum case for Parse.uso(_:))
  {
    uint64_t v55 = enum case for SiriKitConfirmationState.unset(_:);
    uint64_t v56 = type metadata accessor for SiriKitConfirmationState();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 104))(a2, v55, v56);
    return ((uint64_t (*)(void **, uint64_t))v31)(v33, v15);
  }
  (*(void (**)(void **, uint64_t))(v16 + 96))(v33, v15);
  uint64_t v51 = v80;
  unint64_t v50 = v81;
  uint64_t v52 = v79;
  (*(void (**)(char *, void **, uint64_t))(v80 + 32))(v81, v33, v79);
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl(&dword_0, v25, v53, "makeConfirmationstateFromParse, parsing uso parse", v54, 2u);
    swift_slowDealloc();
  }
  type metadata accessor for GeoParse();
  static GeoParse.getDomainIntent(parse:)(v32, (uint64_t)&v89);
  if (v90)
  {
    outlined init with take of CATType(&v89, (uint64_t)v91);
    outlined init with copy of DeviceState((uint64_t)v91, (uint64_t)&v89);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
    type metadata accessor for LocationSearchIntent();
    if (swift_dynamicCast())
    {
      (*(void (**)(void))(*(void *)v88 + 256))();
      swift_release();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v91);
      return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    }
    os_log_type_t v64 = static os_log_type_t.info.getter();
    uint64_t v65 = v76;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v76, v50, v52);
    os_log_type_t v66 = v64;
    if (!os_log_type_enabled(v25, v64))
    {
      uint64_t v71 = *(void (**)(char *, uint64_t))(v51 + 8);
      v71(v65, v52);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v91);
      v71(v50, v52);
      goto LABEL_35;
    }
    os_log_t v78 = v25;
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v89 = swift_slowAlloc();
    *(_DWORD *)uint64_t v67 = 136315138;
    uint64_t v68 = USOParse.debugDescription.getter();
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, (uint64_t *)&v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v51 + 8);
    v63(v65, v52);
    _os_log_impl(&dword_0, v78, v66, "SiriGeo expected LocationSearchIntent, recieved %s.", v67, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v91);
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v89, &demangling cache variable for type metadata for GeoIntent?);
    os_log_type_t v57 = static os_log_type_t.info.getter();
    unint64_t v58 = v77;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v77, v50, v52);
    os_log_type_t v59 = v57;
    if (!os_log_type_enabled(v25, v57))
    {
      os_log_type_t v70 = *(void (**)(char *, uint64_t))(v51 + 8);
      v70(v58, v52);
      v70(v50, v52);
      goto LABEL_35;
    }
    os_log_t v78 = v25;
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    v91[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v60 = 136315138;
    uint64_t v61 = USOParse.debugDescription.getter();
    *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v51 + 8);
    v63(v58, v52);
    _os_log_impl(&dword_0, v78, v59, "SiriGeo received a USO parse it doesn't support %s.", v60, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  v63(v81, v52);
LABEL_35:
  uint64_t v72 = enum case for SiriKitConfirmationState.unset(_:);
  uint64_t v73 = type metadata accessor for SiriKitConfirmationState();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 104))(a2, v72, v73);
}

void ShareETAFlowDelegate.init()()
{
}

uint64_t ShareETAFlowDelegate.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for ShareETAFlowDelegate.currentDeviceState);

  return swift_bridgeObjectRelease();
}

uint64_t ShareETAFlowDelegate.deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for ShareETAFlowDelegate.currentDeviceState);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ShareETAFlowDelegate.__deallocating_deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for ShareETAFlowDelegate.currentDeviceState);

  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 80, 7);
}

id ShareETAAceViewProvider.logObject.getter()
{
  return *(id *)(v0 + direct field offset for ShareETAAceViewProvider.logObject);
}

uint64_t ShareETAAceViewProvider.makeAceViewsForResolveNeedsDisambiguation(app:parameterName:intent:utteranceViews:disambiguationList:deviceIsLocked:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void, void))
{
  uint64_t v22 = a8;
  uint64_t v9 = type metadata accessor for ImageSize();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v23, v23[3]);
  char v13 = dispatch thunk of DeviceState.isCarPlay.getter();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v23);
  if (v13)
  {
    uint64_t v14 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_C0AD0;
    SiriKitDisambiguationList.disambiguationItems.getter();
    uint64_t v16 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)();
    swift_bridgeObjectRelease();
    *(void *)(v15 + 32) = v16;
    v23[0] = v15;
    specialized Array._endMutation()();
    uint64_t v17 = v23[0];
    if (a5 >> 62)
    {
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for SAAceView);
      swift_bridgeObjectRetain();
      uint64_t v21 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
      a5 = v21;
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for SAAceView);
    }
    v23[0] = v17;
    specialized Array.append<A>(contentsOf:)(a5);
    v14(v23[0], 0);
  }
  else
  {
    SiriKitDisambiguationList.disambiguationItems.getter();
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for ImageSize.default(_:), v9);
    uint64_t v18 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    type metadata accessor for SiriKitAceViewBuilder();
    static Device.current.getter();
    dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v23);
    dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
    swift_release();
    dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
    swift_release();
    uint64_t v19 = dispatch thunk of SiriKitAceViewBuilder.build()();
    swift_release();
    v22(v19, 0);
  }
  return swift_bridgeObjectRelease();
}

uint64_t ShareETAAceViewProvider.init()()
{
  uint64_t v1 = direct field offset for ShareETAAceViewProvider.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v0 + v1) = OS_os_log.init(subsystem:category:)();
  swift_release();

  return DefaultAceViewProvider.init()();
}

void ShareETAAceViewProvider.__ivar_destroyer()
{
}

uint64_t ShareETAAceViewProvider.deinit()
{
  uint64_t v0 = DefaultAceViewProvider.deinit();

  return v0;
}

uint64_t ShareETAAceViewProvider.__deallocating_deinit()
{
  uint64_t v0 = DefaultAceViewProvider.deinit();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t ShareETAContextProvider.currentDeviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return ShareETAContextProvider.currentDeviceState.getter(&direct field offset for ShareETAContextProvider.currentDeviceState, a1);
}

uint64_t ShareETAContextProvider.currentDeviceState.setter(long long *a1)
{
  return ShareETAContextProvider.currentDeviceState.setter(a1, &direct field offset for ShareETAContextProvider.currentDeviceState);
}

uint64_t (*ShareETAContextProvider.currentDeviceState.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETAContextProvider.isPOMMES.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for ShareETAContextProvider.isPOMMES);
}

uint64_t ShareETAContextProvider.isUSO.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for ShareETAContextProvider.isUSO);
}

uint64_t ShareETAContextProvider.init(deviceState:isPOMMES:isUSO:)(uint64_t a1, char a2, char a3)
{
  uint64_t v7 = direct field offset for ShareETAContextProvider.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v3 + v7) = OS_os_log.init(subsystem:category:)();
  outlined init with copy of DeviceState(a1, v3 + direct field offset for ShareETAContextProvider.currentDeviceState);
  *(unsigned char *)(v3 + direct field offset for ShareETAContextProvider.isPOMMES) = a2;
  *(unsigned char *)(v3 + direct field offset for ShareETAContextProvider.isUSO) = a3;
  swift_release();
  uint64_t v8 = DefaultNLContextProvider.init()();
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v8;
}

id ShareETAContextProvider.logObject.getter()
{
  return *(id *)(v0 + direct field offset for ShareETAContextProvider.logObject);
}

void *ShareETAContextProvider.NLNodes.domain.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.domain;
}

unint64_t static ShareETAContextProvider.NLNodes.domain.getter()
{
  return 0xD000000000000020;
}

void *ShareETAContextProvider.NLNodes.confirmation.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.confirmation;
}

unint64_t static ShareETAContextProvider.NLNodes.confirmation.getter()
{
  return 0xD00000000000002CLL;
}

void *ShareETAContextProvider.NLNodes.occupant.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.occupant;
}

unint64_t static ShareETAContextProvider.NLNodes.occupant.getter()
{
  return 0xD00000000000001ALL;
}

void *ShareETAContextProvider.NLNodes.occupantFullName.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.occupantFullName;
}

unint64_t static ShareETAContextProvider.NLNodes.occupantFullName.getter()
{
  return 0xD000000000000022;
}

void *ShareETAContextProvider.NLNodes.personPlace.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.personPlace;
}

unint64_t static ShareETAContextProvider.NLNodes.personPlace.getter()
{
  return 0xD00000000000001DLL;
}

void *ShareETAContextProvider.NLNodes.personFullName.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.personFullName;
}

unint64_t static ShareETAContextProvider.NLNodes.personFullName.getter()
{
  return 0xD000000000000020;
}

void *ShareETAContextProvider.NLNodes.locationSearchReference.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.NLNodes.locationSearchReference;
}

unint64_t static ShareETAContextProvider.NLNodes.locationSearchReference.getter()
{
  return 0xD000000000000029;
}

void *ShareETAContextProvider.ConfirmationValues.abort.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.ConfirmationValues.abort;
}

unint64_t static ShareETAContextProvider.ConfirmationValues.abort.getter()
{
  return 0xD000000000000039;
}

void *ShareETAContextProvider.ConfirmationValues.yes.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.ConfirmationValues.yes;
}

unint64_t static ShareETAContextProvider.ConfirmationValues.yes.getter()
{
  return 0xD000000000000036;
}

void *ShareETAContextProvider.ConfirmationValues.no.unsafeMutableAddressor()
{
  return &static ShareETAContextProvider.ConfirmationValues.no;
}

unint64_t static ShareETAContextProvider.ConfirmationValues.no.getter()
{
  return 0xD000000000000035;
}

uint64_t ShareETAContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PommesContext.Source();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  __chkstk_darwin(v8);
  uint64_t v26 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v10 - 8);
  uint64_t v29 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NLContextUpdate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(NSObject **)(v3 + direct field offset for ShareETAContextProvider.logObject);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = v3;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "makeContextForHandleIntent", v18, 2u);
    uint64_t v3 = v25;
    swift_slowDealloc();
  }
  NLContextUpdate.init()();
  if (*(unsigned char *)(v3 + direct field offset for ShareETAContextProvider.isPOMMES) == 1)
  {
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v16, v19, "makeContextForHandleIntent adding pommesContext", v20, 2u);
      swift_slowDealloc();
    }
    (*(void (**)(char *, void, uint64_t))(v27 + 104))(v26, enum case for PommesContext.Source.pluginDefined(_:), v28);
    uint64_t v21 = v29;
    PommesContext.init(source:domain:listenAfterSpeaking:)();
    uint64_t v22 = type metadata accessor for PommesContext();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 0, 1, v22);
    NLContextUpdate.pommesContext.setter();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_C0AD0;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
  *(void *)(v23 + 32) = static ConversationStateAttachmentUtils.makeAttachmentToClearSlotResolutionState<A>(intent:)();
  uint64_t v30 = v23;
  specialized Array._endMutation()();
  NLContextUpdate.conversationStateAttachments.setter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v7, v15, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
  a3(v7);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v7, &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t ShareETAContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  uint64_t v42 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  id v37 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v36 = (uint64_t)&v35 - v12;
  uint64_t v13 = type metadata accessor for PommesContext.Source();
  uint64_t v41 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v40 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v15 - 8);
  os_log_type_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for NLContextUpdate();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(NSObject **)(v4 + direct field offset for ShareETAContextProvider.logObject);
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = v4;
    *(_WORD *)os_log_type_t v24 = 0;
    _os_log_impl(&dword_0, v22, v23, "makeContextForConfirmIntent", v24, 2u);
    uint64_t v4 = v35;
    swift_slowDealloc();
  }
  NLContextUpdate.init()();
  if (*(unsigned char *)(v4 + direct field offset for ShareETAContextProvider.isPOMMES) == 1)
  {
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v22, v25, "makeContextForConfirmIntent adding pommesContext", v26, 2u);
      swift_slowDealloc();
    }
    (*(void (**)(char *, void, uint64_t))(v41 + 104))(v40, enum case for PommesContext.Source.pluginDefined(_:), v13);
    PommesContext.init(source:domain:listenAfterSpeaking:)();
    uint64_t v27 = type metadata accessor for PommesContext();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v17, 0, 1, v27);
    NLContextUpdate.pommesContext.setter();
  }
  else if (*(unsigned char *)(v4 + direct field offset for ShareETAContextProvider.isUSO) == 1)
  {
    uint64_t v40 = v8;
    uint64_t v41 = v19;
    uint64_t v35 = a4;
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_0, v22, v28, "makeContextForConfirmIntent adding uso context", v29, 2u);
      swift_slowDealloc();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_C0600;
    type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
    swift_allocObject();
    uint64_t v30 = UsoTaskBuilder_noVerb_common_Person.init()();
    type metadata accessor for UsoEntityBuilder_common_Person();
    swift_allocObject();
    UsoEntityBuilder_common_Person.init()();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    uint64_t v31 = v36;
    static Siri_Nlu_External_SystemPrompted.from(_:)(v30, v36);
    Siri_Nlu_External_SystemDialogAct.init()();
    uint64_t v32 = v38;
    uint64_t v33 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v31, v39);
    Siri_Nlu_External_SystemDialogAct.prompted.setter();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    swift_release();
    swift_release();
    NLContextUpdate.nluSystemDialogActs.setter();
    uint64_t v8 = v40;
    uint64_t v19 = v41;
  }
  NLContextUpdate.weightedPromptTargetDomain.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  NLContextUpdate.weightedPromptAbortValues.setter();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v8, v21, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v8, 0, 1, v18);
  v42(v8);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v8, &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t ShareETAContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v29 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(NSObject **)((char *)v6 + direct field offset for ShareETAContextProvider.logObject);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "makeNeedsDisambiguationContextFor", v17, 2u);
    swift_slowDealloc();
  }
  id v18 = objc_msgSend(a4, "disambiguationItems", v29);
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = *(void *)(v19 + 16);
  swift_bridgeObjectRelease();
  if (v20
    && (id v21 = [a4 disambiguationItems],
        uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v21,
        os_log_type_t v23 = specialized _arrayConditionalCast<A, B>(_:)(v22, &lazy cache variable for type metadata for INPerson),
        swift_bridgeObjectRelease(),
        v23))
  {
    if (v30 == 0x6E65697069636572 && v31 == 0xE900000000000074
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      (*(void (**)(void *__return_ptr))(class metadata base offset for ShareETAContextProvider + *v7 + 32))(v34);
      __swift_project_boxed_opaque_existential_1(v34, v34[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      int v24 = *((unsigned __int8 *)v7 + direct field offset for ShareETAContextProvider.isPOMMES);
      int v25 = *((unsigned __int8 *)v7 + direct field offset for ShareETAContextProvider.isUSO);
      uint64_t v26 = v33;
      swift_retain();
      specialized TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:isPommes:isUSO:_:)((uint64_t)v11, (uint64_t)&outlined read-only object #0 of ShareETAContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:), v24, v25, (unint64_t)v23, 0, v32, v26);
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v9);
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v34);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v28 = type metadata accessor for NLContextUpdate();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v14, 1, 1, v28);
    v32(v14);
    return outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for NLContextUpdate?);
  }
}

uint64_t ShareETAContextProvider.makeNeedsValueContextFor(intent:parameter:resolutionResult:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PommesContext.Source();
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = v10;
  __chkstk_darwin(v10);
  uint64_t v27 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for NLContextUpdate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(NSObject **)(v5 + direct field offset for ShareETAContextProvider.logObject);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = v5;
    *(_WORD *)id v21 = 0;
    _os_log_impl(&dword_0, v19, v20, "makeNeedsValueContextFor", v21, 2u);
    uint64_t v5 = v26;
    swift_slowDealloc();
  }
  NLContextUpdate.init()();
  if (*(unsigned char *)(v5 + direct field offset for ShareETAContextProvider.isPOMMES) == 1)
  {
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v23 = 0;
      _os_log_impl(&dword_0, v19, v22, "makeNeedsValueContextFor adding pommesContext", v23, 2u);
      swift_slowDealloc();
    }
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v27, enum case for PommesContext.Source.pluginDefined(_:), v29);
    PommesContext.init(source:domain:listenAfterSpeaking:)();
    uint64_t v24 = type metadata accessor for PommesContext();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v14, 0, 1, v24);
    NLContextUpdate.pommesContext.setter();
  }
  NLContextUpdate.weightedPromptTargetDomain.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  NLContextUpdate.weightedPromptAbortValues.setter();
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v9, v18, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v9, 0, 1, v15);
  a5(v9);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v9, &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

void ShareETAContextProvider.init()()
{
}

void ShareETAContextProvider.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for ShareETAContextProvider.currentDeviceState);
  uint64_t v1 = *(void **)(v0 + direct field offset for ShareETAContextProvider.logObject);
}

uint64_t ShareETAContextProvider.deinit()
{
  uint64_t v0 = DefaultNLContextProvider.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for ShareETAContextProvider.currentDeviceState);

  return v0;
}

uint64_t ShareETAContextProvider.__deallocating_deinit()
{
  uint64_t v0 = DefaultNLContextProvider.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for ShareETAContextProvider.currentDeviceState);

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t ShareETATemplatingService.catService.getter()
{
  return swift_retain();
}

id ShareETATemplatingService.logObject.getter()
{
  return *(id *)(v0 + direct field offset for ShareETATemplatingService.logObject);
}

uint64_t ShareETATemplatingService.device.getter@<X0>(uint64_t a1@<X8>)
{
  return ShareETAContextProvider.currentDeviceState.getter(&direct field offset for ShareETATemplatingService.device, a1);
}

uint64_t ShareETAContextProvider.currentDeviceState.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  swift_beginAccess();
  return outlined init with copy of DeviceState(v4, a2);
}

uint64_t ShareETATemplatingService.device.setter(long long *a1)
{
  return ShareETAContextProvider.currentDeviceState.setter(a1, &direct field offset for ShareETATemplatingService.device);
}

uint64_t ShareETAContextProvider.currentDeviceState.setter(long long *a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0Tm(v4);
  outlined init with take of CATType(a1, v4);
  return swift_endAccess();
}

uint64_t (*ShareETATemplatingService.device.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETATemplatingService.init(deviceState:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  __chkstk_darwin(v4 - 8);
  int v25 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CATService();
  uint64_t v10 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v12 = self;
  swift_retain();
  *(void *)(v10 + 24) = [v12 bundleForClass:ObjCClassFromMetadata];
  uint64_t v13 = direct field offset for ShareETATemplatingService.catService;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v10 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v10 + 16) = 0;
  *(void *)(v2 + v13) = v10;
  uint64_t v14 = direct field offset for ShareETATemplatingService.logObject;
  uint64_t v15 = OS_os_log.init(subsystem:category:)();
  *(void *)(v2 + v14) = v15;
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "initializing", v17, 2u);
    swift_slowDealloc();
  }
  outlined init with copy of DeviceState((uint64_t)a1, v2 + direct field offset for ShareETATemplatingService.device);
  swift_release();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v18 = Locale.identifier.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v28 = v18;
  uint64_t v29 = v20;
  uint64_t v26 = 45;
  unint64_t v27 = 0xE100000000000000;
  uint64_t v30 = 95;
  unint64_t v31 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  static Device.current.getter();
  uint64_t v21 = type metadata accessor for DucTemplatingLocalContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v25, 1, 1, v21);
  specialized Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  static AceService.current.getter();
  uint64_t v22 = DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return v22;
}

uint64_t ShareETATemplatingService.makeFailureHandlingIntentDialog(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(NSObject **)(v5 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "makeFailureHandlingIntentDialog", v11, 2u);
    swift_slowDealloc();
  }
  if (a3 && ((uint64_t v12 = (int *)[a3 code], v12 == (int *)((char *)&dword_C + 1)) || v12 == &dword_C))
  {
    uint64_t v13 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
    uint64_t v17 = type metadata accessor for ShareETA(0);
    uint64_t v18 = &protocol witness table for ShareETA;
    __swift_allocate_boxed_opaque_existential_0(v16);
  }
  else
  {
    uint64_t v13 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
    uint64_t v17 = type metadata accessor for ShareETA(0);
    uint64_t v18 = &protocol witness table for ShareETA;
    *(unsigned char *)__swift_allocate_boxed_opaque_existential_0(v16) = 0;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = static DialogHelper.globals.getter();
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 120))(v16, v14, a4, a5);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v16);
}

void ShareETATemplatingService.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *), uint64_t a9)
{
  uint64_t v36 = a8;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for Locale();
  __chkstk_darwin(v15 - 8);
  os_log_type_t v16 = *(NSObject **)(v9 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "makeParameterValueUnsupportedDialog", v18, 2u);
    swift_slowDealloc();
  }
  if ([a4 resolutionResultCode] != (char *)&dword_0 + 1) {
    goto LABEL_7;
  }
  uint64_t v19 = (char *)[a4 unsupportedReason];
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_C0600;
  *(void *)(v20 + 56) = &type metadata for Int;
  *(void *)(v20 + 64) = &protocol witness table for Int;
  *(void *)(v20 + 32) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if ((unint64_t)(v19 - 1) < 3)
  {
    uint64_t v21 = *(void *)(v9 + direct field offset for ShareETATemplatingService.catService);
    uint64_t v39 = type metadata accessor for ShareETA(0);
    uint64_t v40 = &protocol witness table for ShareETA;
    __swift_allocate_boxed_opaque_existential_0(v38);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = static DialogHelper.globals.getter();
    (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v21 + 120))(v38, v22, v36, a9);
    swift_bridgeObjectRelease();
LABEL_9:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v38);
    return;
  }
  if (v19 == (unsigned char *)&dword_4 + 1)
  {
LABEL_7:
    uint64_t v21 = *(void *)(v9 + direct field offset for ShareETATemplatingService.catService);
    uint64_t v39 = type metadata accessor for ShareETA(0);
    uint64_t v40 = &protocol witness table for ShareETA;
    *(unsigned char *)__swift_allocate_boxed_opaque_existential_0(v38) = 0;
    goto LABEL_8;
  }
  id v23 = [a5 recipients];
  if (v23)
  {
    uint64_t v24 = v23;
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
    uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v25 & 0xC000000000000001) != 0)
    {
      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_14;
    }
    if (*(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFFF8)))
    {
      id v26 = *(id *)(v25 + 32);
LABEL_14:
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void *)(v9 + direct field offset for ShareETATemplatingService.catService);
      uint64_t v39 = type metadata accessor for ShareETA(0);
      uint64_t v40 = &protocol witness table for ShareETA;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v38);
      type metadata accessor for DialogPerson();
      id v30 = v27;
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v37, v37[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v31 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v37);
      uint64_t *boxed_opaque_existential_0 = v31;
      swift_storeEnumTagMultiPayload();
      uint64_t v32 = static DialogHelper.globals.getter();
      (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v28 + 120))(v38, v32, v36, a9);
      swift_bridgeObjectRelease();

      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError();
    uint64_t v33 = swift_allocError();
    *int v34 = 0xD000000000000017;
    v34[1] = 0x80000000000C8060;
    *uint64_t v14 = v33;
    swift_storeEnumTagMultiPayload();
    v36(v14);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }
}

uint64_t ShareETATemplatingService.makeParameterPromptDialog(app:parameterName:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(NSObject **)(v6 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "makeParameterPromptDialog", v11, 2u);
    swift_slowDealloc();
  }
  uint64_t v12 = *(void *)(v6 + direct field offset for ShareETATemplatingService.catService);
  v19[3] = type metadata accessor for ShareETA(0);
  v19[4] = (uint64_t)&protocol witness table for ShareETA;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v19);
  uint64_t v14 = (char *)boxed_opaque_existential_0
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (directInvocation: Bool, behaviourAfterSpeaking: BehaviorAfterSpeaking))
               + 48);
  *(unsigned char *)boxed_opaque_existential_0 = 0;
  uint64_t v15 = enum case for BehaviorAfterSpeaking.listen(_:);
  uint64_t v16 = type metadata accessor for BehaviorAfterSpeaking();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v14, v15, v16);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = static DialogHelper.globals.getter();
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 120))(v19, v17, a5, a6);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
}

void ShareETATemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for Locale();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = *(NSObject **)(v5 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "makeIntentHandledDialog", v15, 2u);
    swift_slowDealloc();
  }
  if (!a3)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError();
    uint64_t v24 = swift_allocError();
    *uint64_t v25 = 0xD000000000000015;
    v25[1] = 0x80000000000C8080;
    uint64_t *v11 = v24;
    swift_storeEnumTagMultiPayload();
    a4(v11);
LABEL_13:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return;
  }
  id v16 = a3;
  id v17 = [v16 recipients];
  if (!v17)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError();
    uint64_t v26 = swift_allocError();
    *unint64_t v27 = 0xD000000000000017;
    v27[1] = 0x80000000000C8060;
    uint64_t *v11 = v26;
    swift_storeEnumTagMultiPayload();
    a4(v11);

    goto LABEL_13;
  }
  uint64_t v18 = v17;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v19 & 0xC000000000000001) != 0)
  {
    id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return;
    }
    id v20 = *(id *)(v19 + 32);
  }
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  unsigned __int8 v22 = [v16 mediums];
  uint64_t v36 = a5;
  id v37 = a4;
  if ((v22 & 4) != 0)
  {
    unint64_t v23 = 3;
  }
  else if (([v16 mediums] & 8) != 0)
  {
    unint64_t v23 = 2;
  }
  else
  {
    unint64_t v23 = ((unint64_t)[v16 mediums] >> 1) & 1;
  }
  unint64_t v35 = v23;
  uint64_t v28 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
  v39[3] = type metadata accessor for ShareETA(0);
  void v39[4] = (uint64_t)&protocol witness table for ShareETA;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v39);
  type metadata accessor for DialogPerson();
  id v30 = v21;
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v38, v38[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v31 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v38);
  *(unsigned char *)boxed_opaque_existential_0 = 0;
  uint64_t v32 = v35;
  boxed_opaque_existential_0[1] = v31;
  boxed_opaque_existential_0[2] = v32;
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = static DialogHelper.globals.getter();
  (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v28 + 120))(v39, v33, v37, v36);
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v39);
}

void ShareETATemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(NSObject **)(v5 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "makeIntentConfirmationDialog", v14, 2u);
    swift_slowDealloc();
  }
  if (a3)
  {
    id v25 = a3;
    if ([v25 code] == (char *)&dword_0 + 2)
    {
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v15))
      {
        id v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v16 = 0;
        _os_log_impl(&dword_0, v12, v15, "intent needs confirmation", v16, 2u);
        swift_slowDealloc();
      }
      uint64_t v17 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
      v26[3] = type metadata accessor for ShareETA(0);
      v26[4] = (uint64_t)&protocol witness table for ShareETA;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v26);
      uint64_t v19 = enum case for BehaviorAfterSpeaking.listen(_:);
      uint64_t v20 = type metadata accessor for BehaviorAfterSpeaking();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(boxed_opaque_existential_0, v19, v20);
      swift_storeEnumTagMultiPayload();
      uint64_t v21 = static DialogHelper.globals.getter();
      (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v17 + 120))(v26, v21, a4, a5);
      swift_bridgeObjectRelease();

      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v26);
    }
    else
    {
      id v24 = v25;
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError();
    uint64_t v22 = swift_allocError();
    *unint64_t v23 = 0xD000000000000015;
    v23[1] = 0x80000000000C8080;
    uint64_t *v11 = v22;
    swift_storeEnumTagMultiPayload();
    a4(v11);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }
}

uint64_t ShareETATemplatingService.makeIntentConfirmationCancelledDialog(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(NSObject **)(v5 + direct field offset for ShareETATemplatingService.logObject);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "makeIntentConfirmationCancelledDialog", v14, 2u);
    swift_slowDealloc();
  }
  if (a3)
  {
    id v15 = a3;
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_C0600;
    *(void *)(v16 + 56) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntentResponse);
    *(void *)(v16 + 64) = lazy protocol witness table accessor for type INShareETAIntentResponse and conformance NSObject();
    *(void *)(v16 + 32) = v15;
    id v17 = v15;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (([v17 mediums] & 4) != 0)
    {
      unint64_t v18 = 3;
    }
    else if (([v17 mediums] & 8) != 0)
    {
      unint64_t v18 = 2;
    }
    else
    {
      unint64_t v18 = ((unint64_t)[v17 mediums] >> 1) & 1;
    }
    uint64_t v22 = *(void *)(v5 + direct field offset for ShareETATemplatingService.catService);
    v26[3] = type metadata accessor for ShareETA(0);
    v26[4] = (uint64_t)&protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v26);
    *(unsigned char *)boxed_opaque_existential_0 = 0;
    boxed_opaque_existential_0[1] = v18;
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = static DialogHelper.globals.getter();
    (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v22 + 120))(v26, v24, a4, a5);
    swift_bridgeObjectRelease();

    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v26);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError();
    uint64_t v19 = swift_allocError();
    *uint64_t v20 = 0xD000000000000015;
    v20[1] = 0x80000000000C8080;
    uint64_t *v11 = v19;
    swift_storeEnumTagMultiPayload();
    a4(v11);
    return outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }
}

uint64_t *ShareETATemplatingService.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = type metadata accessor for Locale();
  __chkstk_darwin(v12 - 8);
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  id v13 = [a4 disambiguationItems];
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v15 = specialized _arrayConditionalCast<A, B>(_:)(v14, &lazy cache variable for type metadata for INPerson);
  swift_bridgeObjectRelease();
  if (v15) {
    unint64_t v16 = (unint64_t)v15;
  }
  else {
    unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v17 = *(void *)(v9 + direct field offset for ShareETATemplatingService.catService);
  v28[3] = type metadata accessor for ShareETA(0);
  v28[4] = (uint64_t)&protocol witness table for ShareETA;
  uint64_t result = __swift_allocate_boxed_opaque_existential_0(v28);
  uint64_t v19 = result;
  uint64_t v26 = a8;
  if ((v16 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8)))
  {
    id v20 = *(id *)(v16 + 32);
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v21 = (char *)v19
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                 + 48);
    type metadata accessor for DialogPerson();
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v22 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v27);
    *uint64_t v19 = v22;
    uint64_t v23 = enum case for BehaviorAfterSpeaking.listen(_:);
    uint64_t v24 = type metadata accessor for BehaviorAfterSpeaking();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v21, v23, v24);
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = static DialogHelper.globals.getter();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 120))(v28, v25, v26, a9);
    swift_bridgeObjectRelease();
    return (uint64_t *)__swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v28);
  }
  __break(1u);
  return result;
}

void ShareETATemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:)()
{
}

void ShareETATemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)()
{
}

uint64_t ShareETATemplatingService.__ivar_destroyer()
{
  swift_release();

  uint64_t v1 = v0 + direct field offset for ShareETATemplatingService.device;

  return __swift_destroy_boxed_opaque_existential_0Tm(v1);
}

uint64_t ShareETATemplatingService.deinit()
{
  uint64_t v0 = DucTemplatingService.deinit();
  swift_release();

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for ShareETATemplatingService.device);
  return v0;
}

uint64_t ShareETATemplatingService.__deallocating_deinit()
{
  uint64_t v0 = DucTemplatingService.deinit();
  swift_release();

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for ShareETATemplatingService.device);

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SAAceView] and conformance [A]();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for SAAceView);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

unint64_t specialized Sharing_Medium.init(rawValue:)(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t type metadata accessor for ShareETATemplatingService(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for ShareETATemplatingService);
}

uint64_t type metadata accessor for ShareETAAceViewProvider(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for ShareETAAceViewProvider);
}

uint64_t type metadata accessor for ShareETAContextProvider(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for ShareETAContextProvider);
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent)
  {
    type metadata accessor for LocationSearchIntent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError;
  if (!lazy protocol witness table cache variable for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShareETATemplatingService.ShareETATemplatingServiceError and conformance ShareETATemplatingService.ShareETATemplatingServiceError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type INShareETAIntentResponse and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type INShareETAIntentResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INShareETAIntentResponse and conformance NSObject)
  {
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INShareETAIntentResponse);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type INShareETAIntentResponse and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Sharing_Medium and conformance Sharing_Medium()
{
  unint64_t result = lazy protocol witness table cache variable for type Sharing_Medium and conformance Sharing_Medium;
  if (!lazy protocol witness table cache variable for type Sharing_Medium and conformance Sharing_Medium)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Sharing_Medium and conformance Sharing_Medium);
  }
  return result;
}

uint64_t sub_47744@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + **a1 + 40))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_477B0(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + **a2 + 48))(*a1);
}

uint64_t sub_47814@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + **a1 + 64))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_47880(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + **a2 + 72))(*a1);
}

uint64_t sub_478E4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for ShareETAFlowDelegate + **a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_4794C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(class metadata base offset for ShareETAFlowDelegate + **a2 + 104);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_479BC(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for ShareETAContextProvider + **a1 + 32))();
}

uint64_t sub_47A1C(uint64_t a1, void **a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(class metadata base offset for ShareETAContextProvider + **a2 + 40))(v4);
}

uint64_t sub_47A94(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for ShareETATemplatingService + **a1 + 24))();
}

uint64_t sub_47AF4(uint64_t a1, void **a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(class metadata base offset for ShareETATemplatingService + **a2 + 32))(v4);
}

uint64_t getEnumTagSinglePayload for Sharing_Medium(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Sharing_Medium(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x47CC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Sharing_Medium()
{
  return &type metadata for Sharing_Medium;
}

uint64_t type metadata accessor for ShareETAFlowDelegate(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for ShareETAFlowDelegate);
}

uint64_t type metadata completion function for ShareETAFlowDelegate()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ShareETAFlowDelegate()
{
  return type metadata accessor for ShareETAFlowDelegate(0);
}

uint64_t type metadata completion function for ShareETAAceViewProvider()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ShareETAAceViewProvider()
{
  return type metadata accessor for ShareETAAceViewProvider(0);
}

uint64_t type metadata completion function for ShareETAContextProvider()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ShareETAContextProvider()
{
  return type metadata accessor for ShareETAContextProvider(0);
}

ValueMetadata *type metadata accessor for ShareETAContextProvider.NLNodes()
{
  return &type metadata for ShareETAContextProvider.NLNodes;
}

ValueMetadata *type metadata accessor for ShareETAContextProvider.ConfirmationValues()
{
  return &type metadata for ShareETAContextProvider.ConfirmationValues;
}

uint64_t type metadata completion function for ShareETATemplatingService()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ShareETATemplatingService()
{
  return type metadata accessor for ShareETATemplatingService(0);
}

void *initializeBufferWithCopyOfBuffer for ShareETATemplatingService.ShareETATemplatingServiceError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ShareETATemplatingService.ShareETATemplatingServiceError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ShareETATemplatingService.ShareETATemplatingServiceError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ShareETATemplatingService.ShareETATemplatingServiceError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareETATemplatingService.ShareETATemplatingServiceError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareETATemplatingService.ShareETATemplatingServiceError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareETATemplatingService.ShareETATemplatingServiceError()
{
  return &type metadata for ShareETATemplatingService.ShareETATemplatingServiceError;
}

unint64_t lazy protocol witness table accessor for type [SAAceView] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SAAceView] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SAAceView] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SAAceView]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SAAceView] and conformance [A]);
  }
  return result;
}

uint64_t key path setter for DeleteParkingLocationBaseFlow.flowState : DeleteParkingLocationBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DeleteParkingLocationBaseFlow.State(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 120))(v6);
}

uint64_t DeleteParkingLocationBaseFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState;
  swift_beginAccess();
  return outlined init with copy of DeleteParkingLocationBaseFlow.State(v3, a1);
}

uint64_t outlined init with copy of DeleteParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DeleteParkingLocationBaseFlow.State(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for DeleteParkingLocationBaseFlow.State);
}

uint64_t DeleteParkingLocationBaseFlow.flowState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState;
  swift_beginAccess();
  outlined assign with take of DeleteParkingLocationBaseFlow.State(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of DeleteParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*DeleteParkingLocationBaseFlow.flowState.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t DeleteParkingLocationBaseFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper;
  swift_beginAccess();
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t DeleteParkingLocationBaseFlow.flowHelper.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, v3);
  return swift_endAccess();
}

uint64_t (*DeleteParkingLocationBaseFlow.flowHelper.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t DeleteParkingLocationBaseFlow.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES);
  swift_beginAccess();
  return *v1;
}

uint64_t DeleteParkingLocationBaseFlow.isPOMMES.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*DeleteParkingLocationBaseFlow.isPOMMES.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t DeleteParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v8 = specialized DeleteParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(v7, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v8;
}

uint64_t DeleteParkingLocationBaseFlow.init(flowHelper:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = specialized DeleteParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v9, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v11;
}

uint64_t DeleteParkingLocationBaseFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t))(*(void *)v1 + 112))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *v6;
      *(unsigned char *)(a1 + 8) = 0;
      uint64_t v8 = enum case for RCHFlowResult.error<A, B>(_:);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(a1, v8, v9);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, v6, v15);
    }
  }
  else
  {
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v11 = swift_allocError();
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    *(unsigned char *)(v12 + 16) = 3;
    *(void *)a1 = v11;
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v13 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(a1, v13, v14);
    return outlined destroy of DeleteParkingLocationBaseFlow.State((uint64_t)v6);
  }
}

uint64_t DeleteParkingLocationBaseFlow.onInput(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Input();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Parse();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (id *)((char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  int v12 = (*(uint64_t (**)(id *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v11, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    uint64_t v13 = v2[2];
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "DeleteParkingLocationBaseFlow onInput returns true for NLv3IntentPlusServerConversion.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = type metadata accessor for NLIntent();
    (*(void (**)(id *, uint64_t))(*(void *)(v16 - 8) + 8))(v11, v16);
    return 1;
  }
  else if (v12 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v11, v8);

    uint64_t v17 = 1;
    (*(void (**)(uint64_t))(*v2 + 168))(1);
    unint64_t v18 = v2[2];
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "DeleteParkingLocationBaseFlow onInput returns true for Pommes response.", v20, 2u);
      swift_slowDealloc();
      return 1;
    }
  }
  else
  {
    uint64_t v21 = v2[2];
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      os_log_t v29 = v21;
      uint64_t v24 = (uint8_t *)v23;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v32 = v30;
      *(_DWORD *)uint64_t v24 = 136315138;
      v28[1] = v24 + 4;
      uint64_t v25 = Input.description.getter();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl(&dword_0, v29, v22, "SiriGeo currently doesn't support parse type: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    (*(void (**)(id *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  return v17;
}

uint64_t DeleteParkingLocationBaseFlow.executeState()(uint64_t a1)
{
  void v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for DeleteParkingLocationBaseFlow.State(0);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(DeleteParkingLocationBaseFlow.executeState(), 0, 0);
}

uint64_t DeleteParkingLocationBaseFlow.executeState()()
{
  uint64_t v43 = v0;
  (*(void (**)(void))(**(void **)(v0 + 48) + 112))();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v2 = *(void *)(v0 + 48);
      uint64_t v3 = **(void **)(v0 + 104);
      os_log_type_t v4 = static os_log_type_t.error.getter();
      uint64_t v5 = *(NSObject **)(v2 + 16);
      os_log_type_t v6 = v4;
      if (os_log_type_enabled(v5, v4))
      {
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 136315138;
        *(void *)(v0 + 24) = v3;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v8 = String.init<A>(describing:)();
        *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v5, v6, "DeleteParkingLocationBaseFlow execute requestUnsupported with error %s", v7, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      static ExecuteResponse.complete()();
      swift_errorRelease();
    }
    else
    {
      uint64_t v20 = *(void *)(v0 + 80);
      uint64_t v19 = *(void *)(v0 + 88);
      uint64_t v22 = *(void *)(v0 + 56);
      uint64_t v21 = *(void *)(v0 + 64);
      uint64_t v23 = *(void *)(v0 + 48);
      (*(void (**)(uint64_t, void, uint64_t))(v21 + 32))(v19, *(void *)(v0 + 104), v22);
      os_log_type_t v24 = static os_log_type_t.info.getter();
      uint64_t v25 = *(NSObject **)(v23 + 16);
      unint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
      v26(v20, v19, v22);
      os_log_type_t v27 = v24;
      BOOL v28 = os_log_type_enabled(v25, v24);
      uint64_t v29 = *(void *)(v0 + 80);
      if (v28)
      {
        log = v25;
        uint64_t v30 = *(void *)(v0 + 64);
        uint64_t v31 = *(void *)(v0 + 72);
        uint64_t v32 = *(void *)(v0 + 56);
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136315138;
        v26(v31, v29, v32);
        uint64_t v34 = String.init<A>(describing:)();
        *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
        v36(v29, v32);
        _os_log_impl(&dword_0, log, v27, "DeleteParkingLocationBaseFlow execute rchComplete with result %s", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v36 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 64) + 8);
        v36(*(void *)(v0 + 80), *(void *)(v0 + 56));
      }
      uint64_t v37 = *(void *)(v0 + 88);
      uint64_t v38 = *(void *)(v0 + 56);
      static ExecuteResponse.complete()();
      v36(v37, v38);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
  else
  {
    uint64_t v10 = *(uint64_t **)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v12 = *v10;
    *(void *)(v0 + 112) = *v10;
    uint64_t v13 = *(NSObject **)(v11 + 16);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "DeleteParkingLocationBaseFlow execute state handle.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 48) + 216)
                                                   + **(int **)(**(void **)(v0 + 48) + 216));
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v16;
    *uint64_t v16 = v0;
    v16[1] = DeleteParkingLocationBaseFlow.executeState();
    uint64_t v17 = *(void *)(v0 + 40);
    return v40(v17, v12);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(DeleteParkingLocationBaseFlow.executeState(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t DeleteParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
  v3[22] = v4;
  v3[23] = *(void *)(v4 - 8);
  v3[24] = swift_task_alloc();
  return _swift_task_switch(DeleteParkingLocationBaseFlow.makeRCHFlow(intent:), 0, 0);
}

uint64_t DeleteParkingLocationBaseFlow.makeRCHFlow(intent:)()
{
  uint64_t v1 = *(NSObject **)(*(void *)(v0 + 168) + 16);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "DeleteParkingLocationBaseFlow makeRCHflow.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v22 = *(void *)(v0 + 160);
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INDeleteParkingLocationIntent);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INDeleteParkingLocationIntentResponse);
  RCHChildFlowProducersAsync.init()();
  type metadata accessor for App();
  swift_allocObject();
  uint64_t v21 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  uint64_t v19 = v4;
  uint64_t v7 = RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  uint64_t v20 = *(void (**)(void))(*(void *)v6 + 136);
  ((void (*)(uint64_t))v20)(v7);
  type metadata accessor for DeleteParkingHandleIntentStrategy();
  uint64_t v8 = swift_allocObject();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v8 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType((long long *)(v0 + 16), v8 + 24);
  *(unsigned char *)(v8 + 64) = 0;
  *(void *)(v0 + 136) = v8;
  lazy protocol witness table accessor for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy(&lazy protocol witness table cache variable for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy, (void (*)(uint64_t))type metadata accessor for DeleteParkingHandleIntentStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  uint64_t v9 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = OS_os_log.init(subsystem:category:)();
  v20();
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 56))(v11, v12);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v13);
  *(void *)(v0 + 144) = v10;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8);
  uint64_t v16 = lazy protocol witness table accessor for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy(&lazy protocol witness table cache variable for type DeleteParkingBaseRCHStrategy and conformance DeleteParkingBaseRCHStrategy, (void (*)(uint64_t))type metadata accessor for DeleteParkingBaseRCHStrategy);
  v15(v0 + 144, v19, v21, v22, v9, v16, v13, v14);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v19, v5);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t closure #1 in DeleteParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *))(*(void *)a2 + 120))(v6);
}

uint64_t DeleteParkingLocationBaseFlow.deinit()
{
  outlined destroy of DeleteParkingLocationBaseFlow.State(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper);
  return v0;
}

uint64_t DeleteParkingLocationBaseFlow.__deallocating_deinit()
{
  outlined destroy of DeleteParkingLocationBaseFlow.State((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper);
  uint64_t v1 = *((unsigned int *)*v0 + 12);
  uint64_t v2 = *((unsigned __int16 *)*v0 + 26);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance DeleteParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance DeleteParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance DeleteParkingLocationBaseFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 208) + **(int **)(**(void **)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance DeleteParkingLocationBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance DeleteParkingLocationBaseFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable();

  return FSMFlow.execute(completion:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute() in conformance DeleteParkingLocationBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  void *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance DeleteParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DeleteParkingLocationBaseFlow(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t specialized DeleteParkingLocationBaseFlow.init(flowHelper:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a1, a4);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(a3 + 16) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES) = 0;
  outlined init with take of CATType(&v11, a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper);
  *(void *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState) = a2;
  type metadata accessor for DeleteParkingLocationBaseFlow.State(0);
  swift_storeEnumTagMultiPayload();
  return a3;
}

uint64_t specialized DeleteParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  long long v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DeleteParkingLocationBaseFlow(0);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return specialized DeleteParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v11, a2, v12, a4, a5);
}

uint64_t outlined destroy of DeleteParkingLocationBaseFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeleteParkingLocationBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in DeleteParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1)
{
  return closure #1 in DeleteParkingLocationBaseFlow.makeRCHFlow(intent:)(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for DeleteParkingLocationBaseFlow(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy(&lazy protocol witness table cache variable for type DeleteParkingLocationBaseFlow and conformance DeleteParkingLocationBaseFlow, (void (*)(uint64_t))type metadata accessor for DeleteParkingLocationBaseFlow);
  uint64_t result = lazy protocol witness table accessor for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy(&lazy protocol witness table cache variable for type DeleteParkingLocationBaseFlow and conformance DeleteParkingLocationBaseFlow, (void (*)(uint64_t))type metadata accessor for DeleteParkingLocationBaseFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for DeleteParkingLocationBaseFlow(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for DeleteParkingLocationBaseFlow);
}

uint64_t sub_4A374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112))();
}

uint64_t sub_4A3BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136))();
}

uint64_t sub_4A400(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 144))(v4);
}

uint64_t sub_4A45C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_4A4AC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168))(*a1);
}

uint64_t ObjC metadata update function for DeleteParkingLocationBaseFlow()
{
  return type metadata accessor for DeleteParkingLocationBaseFlow(0);
}

uint64_t type metadata completion function for DeleteParkingLocationBaseFlow()
{
  uint64_t result = type metadata accessor for DeleteParkingLocationBaseFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for DeleteParkingLocationBaseFlow.State(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *a2;
      swift_errorRetain();
      *(void *)a1 = v7;
    }
    else
    {
      uint64_t v10 = *a2;
      *(void *)a1 = *a2;
      long long v11 = v10;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for DeleteParkingLocationBaseFlow.State(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      int v5 = *(void (**)(void **, uint64_t))(*(void *)(v4 - 8) + 8);
      v5(a1, v4);
      break;
    case 1:
      swift_errorRelease();
      break;
    case 0:
      uint64_t v3 = *a1;

      break;
  }
}

void **initializeWithCopy for DeleteParkingLocationBaseFlow.State(void **a1, void **a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    int v5 = *a2;
    swift_errorRetain();
    *a1 = v5;
  }
  else
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    id v8 = v7;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for DeleteParkingLocationBaseFlow.State(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of DeleteParkingLocationBaseFlow.State((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      int v5 = *a2;
      swift_errorRetain();
      *a1 = v5;
    }
    else
    {
      uint64_t v7 = *a2;
      *a1 = *a2;
      id v8 = v7;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for DeleteParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for DeleteParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DeleteParkingLocationBaseFlow.State((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for DeleteParkingLocationBaseFlow.State()
{
  type metadata accessor for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>()
{
  if (!lazy cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>)
  {
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INDeleteParkingLocationIntent);
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INDeleteParkingLocationIntentResponse);
    unint64_t v0 = type metadata accessor for RCHFlowResult();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RCHFlowResult<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
    }
  }
}

uint64_t GeoFeatureFlags.isAltimeterEnabled.getter()
{
  uint64_t v3 = &type metadata for SiriGeoFeature;
  unint64_t v4 = lazy protocol witness table accessor for type SiriGeoFeature and conformance SiriGeoFeature();
  v2[0] = 1;
  char v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v2);
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type SiriGeoFeature and conformance SiriGeoFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature;
  if (!lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature;
  if (!lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriGeoFeature and conformance SiriGeoFeature);
  }
  return result;
}

const char *SiriGeoFeature.domain.getter()
{
  return "SiriGeo";
}

const char *SiriGeoFeature.feature.getter(char a1)
{
  if (a1) {
    return "Altimeter";
  }
  else {
    return "placeHolder";
  }
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriGeoFeature()
{
  if (*v0) {
    return "Altimeter";
  }
  else {
    return "placeHolder";
  }
}

ValueMetadata *type metadata accessor for GeoFeatureFlags()
{
  return &type metadata for GeoFeatureFlags;
}

unsigned char *storeEnumTagSinglePayload for SiriGeoFeature(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x4AE70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriGeoFeature()
{
  return &type metadata for SiriGeoFeature;
}

void one-time initialization function for bundleName()
{
  static GeoDataModels.bundleName = 0x756C5049556F6547;
  *(void *)algn_FACA8 = 0xEB000000006E6967;
}

uint64_t *GeoDataModels.bundleName.unsafeMutableAddressor()
{
  if (one-time initialization token for bundleName != -1) {
    swift_once();
  }
  return &static GeoDataModels.bundleName;
}

uint64_t static GeoDataModels.bundleName.getter()
{
  if (one-time initialization token for bundleName != -1) {
    swift_once();
  }
  uint64_t v0 = static GeoDataModels.bundleName;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t StandardMapData.label.getter(uint64_t a1)
{
  return a1;
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.systemText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t GeoDataModels.TrafficDisambiguationDataModel.candidates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.candidates.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*GeoDataModels.TrafficDisambiguationDataModel.candidates.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x74616469646E6163;
  }
  else {
    return 0x65546D6574737973;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys()
{
  return GeoDataModels.ContactDisambiguationDataModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GeoDataModels.ContactDisambiguationDataModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.ContactDisambiguationDataModel.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    v11[1] = v11[0];
    char v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GeoContact]);
    lazy protocol witness table accessor for type [GeoContact] and conformance <A> [A](&lazy protocol witness table cache variable for type [GeoContact] and conformance <A> [A], &lazy protocol witness table cache variable for type GeoContact and conformance GeoContact);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys);
  }
  return result;
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.init(from:)(uint64_t a1)
{
  return GeoDataModels.ContactDisambiguationDataModel.init(from:)(a1, (uint64_t (*)(void))specialized GeoDataModels.ContactDisambiguationDataModel.init(from:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance GeoDataModels.ContactDisambiguationDataModel@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance GeoDataModels.ContactDisambiguationDataModel((uint64_t (*)(void))specialized GeoDataModels.ContactDisambiguationDataModel.init(from:), a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoDataModels.ContactDisambiguationDataModel(void *a1)
{
  return GeoDataModels.ContactDisambiguationDataModel.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t GeoDataModels.ParkingLocationDataModel.parkedCar.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeoParkedCar(v1, a1);
}

uint64_t GeoDataModels.ParkingLocationDataModel.buttonLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall GeoDataModels.ParkingLocationDataModel.init(parkedCar:buttonLabel:)(GeoFlowDelegatePlugin::GeoDataModels::ParkingLocationDataModel *__return_ptr retstr, GeoFlowDelegatePlugin::GeoParkedCar *parkedCar, Swift::String buttonLabel)
{
  uint64_t countAndFlagsBits = parkedCar->locationInfo.label._countAndFlagsBits;
  object = parkedCar->locationInfo.label._object;
  Swift::String_optional localizedAddress = parkedCar->localizedAddress;
  retstr->parkedCar.note = parkedCar->note;
  retstr->parkedCar.Swift::String_optional localizedAddress = localizedAddress;
  retstr->parkedCar.locationInfo.label._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->parkedCar.locationInfo.label._object = object;
  *(_OWORD *)&retstr->parkedCar.locationInfo.latitude = *(_OWORD *)&parkedCar->locationInfo.latitude;
  retstr->buttonLabel = buttonLabel;
}

uint64_t GeoDataModels.ParkingLocationDataModel.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x614C6E6F74747562;
  }
  else {
    return 0x614364656B726170;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoDataModels.ParkingLocationDataModel.CodingKeys()
{
  return GeoDataModels.ParkingLocationDataModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoDataModels.ParkingLocationDataModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GeoDataModels.ParkingLocationDataModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.ParkingLocationDataModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.ParkingLocationDataModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoDataModels.ParkingLocationDataModel.encode(to:)(void *a1)
{
  int v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.ParkingLocationDataModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  long long v13 = *v3;
  long long v14 = v9;
  long long v10 = v3[3];
  long long v15 = v3[2];
  long long v16 = v10;
  v12[15] = 0;
  lazy protocol witness table accessor for type GeoParkedCar and conformance GeoParkedCar();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 GeoDataModels.ParkingLocationDataModel.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized GeoDataModels.ParkingLocationDataModel.init(from:)(a1, v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoDataModels.ParkingLocationDataModel(void *a1)
{
  return GeoDataModels.ParkingLocationDataModel.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoDataModels.TrafficDisambiguationDataModel.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.TrafficDisambiguationDataModel.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    v11[1] = v11[0];
    char v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GeoTrafficIncident]);
    lazy protocol witness table accessor for type [GeoTrafficIncident] and conformance <A> [A](&lazy protocol witness table cache variable for type [GeoTrafficIncident] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type GeoTrafficIncident and conformance GeoTrafficIncident);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t GeoDataModels.TrafficDisambiguationDataModel.init(from:)(uint64_t a1)
{
  return GeoDataModels.ContactDisambiguationDataModel.init(from:)(a1, (uint64_t (*)(void))specialized GeoDataModels.TrafficDisambiguationDataModel.init(from:));
}

uint64_t GeoDataModels.ContactDisambiguationDataModel.init(from:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GeoDataModels.TrafficDisambiguationDataModel@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance GeoDataModels.ContactDisambiguationDataModel((uint64_t (*)(void))specialized GeoDataModels.TrafficDisambiguationDataModel.init(from:), a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GeoDataModels.ContactDisambiguationDataModel@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoDataModels.TrafficDisambiguationDataModel(void *a1)
{
  return GeoDataModels.TrafficDisambiguationDataModel.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t GeoParkedCar.note.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RuntimeError.message.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeoParkedCar.label.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

double GeoDataModels.WhereAmIDataModel.currentLocation.getter()
{
  double v1 = *(double *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t GeoDataModels.WhereAmIDataModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614C6E6F74747562;
      break;
    case 2:
      return result;
    case 3:
      unint64_t result = 0x4C746E6572727563;
      break;
    default:
      unint64_t result = 1145660781;
      break;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoDataModels.WhereAmIDataModel.CodingKeys()
{
  return GeoDataModels.WhereAmIDataModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoDataModels.WhereAmIDataModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GeoDataModels.WhereAmIDataModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.WhereAmIDataModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.WhereAmIDataModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoDataModels.WhereAmIDataModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.WhereAmIDataModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 64);
    long long v12 = *(_OWORD *)(v3 + 48);
    long long v13 = v9;
    v11[15] = 3;
    lazy protocol witness table accessor for type StandardMapData and conformance StandardMapData();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 GeoDataModels.WhereAmIDataModel.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized GeoDataModels.WhereAmIDataModel.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

void __swiftcall GeoDataModels.WhereAmIDataModel.init(meID:buttonLabel:localizedAddress:currentLocation:)(GeoFlowDelegatePlugin::GeoDataModels::WhereAmIDataModel *__return_ptr retstr, Swift::String_optional meID, Swift::String buttonLabel, Swift::String_optional localizedAddress, GeoFlowDelegatePlugin::StandardMapData currentLocation)
{
  retstr->meID = meID;
  retstr->buttonLabel = buttonLabel;
  retstr->Swift::String_optional localizedAddress = localizedAddress;
  retstr->currentLocation = currentLocation;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoDataModels.WhereAmIDataModel(void *a1)
{
  return GeoDataModels.WhereAmIDataModel.encode(to:)(a1);
}

uint64_t GeoDataModels.snippetHidden(for:idiom:)()
{
  uint64_t v1 = type metadata accessor for DeviceIdiom();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with take of GeoDataModels(v0, (uint64_t)v8);
  if ((v8[80] | 2) == 2)
  {
    char v5 = 0;
  }
  else
  {
    (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, enum case for DeviceIdiom.car(_:), v1);
    char v5 = static DeviceIdiom.== infix(_:_:)();
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v5 & 1;
}

unint64_t GeoDataModels.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4C676E696B726170;
      break;
    case 3:
      unint64_t result = 0x496D416572656877;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoDataModels.CodingKeys()
{
  return GeoDataModels.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoDataModels.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GeoDataModels.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void protocol witness for CodingKey.init(intValue:) in conformance GeoDataModels.ContactDisambiguationCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.ContactDisambiguationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.ContactDisambiguationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.ParkingLocationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.ParkingLocationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.TrafficDisambiguationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.TrafficDisambiguationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeoDataModels.ContactDisambiguationCodingKeys()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GeoDataModels.WhereAmICodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeoDataModels.ContactDisambiguationCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoDataModels.WhereAmICodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GeoDataModels.ContactDisambiguationCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoDataModels.WhereAmICodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoDataModels.WhereAmICodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoDataModels.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.WhereAmICodingKeys>);
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2);
  BOOL v28 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.TrafficDisambiguationCodingKeys>);
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.ParkingLocationCodingKeys>);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  __chkstk_darwin(v7);
  long long v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.ContactDisambiguationCodingKeys>);
  uint64_t v23 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoDataModels.CodingKeys>);
  uint64_t v31 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  __chkstk_darwin(v13);
  long long v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of GeoDataModels(v58, (uint64_t)&v38);
  switch(v43)
  {
    case 1:
      long long v48 = v40;
      long long v49 = v41;
      long long v50 = v42;
      long long v46 = v38;
      long long v47 = v39;
      LOBYTE(v33) = 1;
      lazy protocol witness table accessor for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys();
      uint64_t v16 = v32;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v35 = v48;
      long long v36 = v49;
      long long v37 = v50;
      long long v33 = v46;
      long long v34 = v47;
      lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel();
      uint64_t v20 = v25;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v21 = v24;
      goto LABEL_6;
    case 2:
      long long v51 = v38;
      uint64_t v52 = v39;
      LOBYTE(v33) = 2;
      lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys();
      uint64_t v17 = v32;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v33 = v51;
      *(void *)&long long v34 = v52;
      lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel();
      uint64_t v18 = v27;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v18);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v15, v17);
    case 3:
      long long v55 = v40;
      long long v56 = v41;
      long long v57 = v42;
      long long v53 = v38;
      long long v54 = v39;
      LOBYTE(v33) = 3;
      lazy protocol witness table accessor for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys();
      long long v9 = v28;
      uint64_t v16 = v32;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v35 = v55;
      long long v36 = v56;
      long long v37 = v57;
      long long v33 = v53;
      long long v34 = v54;
      lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel();
      uint64_t v20 = v30;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v21 = v29;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v20);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v15, v16);
    default:
      long long v44 = v38;
      uint64_t v45 = v39;
      LOBYTE(v33) = 0;
      lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys();
      uint64_t v16 = v32;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v33 = v44;
      *(void *)&long long v34 = v45;
      lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v15, v16);
  }
}

void GeoDataModels.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized GeoDataModels.init(from:)(a1, v4);
  if (!v2) {
    outlined init with take of GeoDataModels((uint64_t)v4, a2);
  }
}

uint64_t protocol witness for SnippetPluginModel.snippetHidden(for:idiom:) in conformance GeoDataModels()
{
  uint64_t v1 = type metadata accessor for DeviceIdiom();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned __int8 *)(v0 + 80) | 2) == 2)
  {
    char v5 = 0;
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DeviceIdiom.car(_:), v1);
    char v5 = static DeviceIdiom.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v5 & 1;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoDataModels(void *a1)
{
  outlined init with take of GeoDataModels(v1, (uint64_t)v4);
  return GeoDataModels.encode(to:)(a1);
}

uint64_t specialized GeoDataModels.ContactDisambiguationDataModel.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.ContactDisambiguationDataModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel.CodingKeys and conformance GeoDataModels.ContactDisambiguationDataModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GeoContact]);
    v9[15] = 1;
    lazy protocol witness table accessor for type [GeoContact] and conformance <A> [A](&lazy protocol witness table cache variable for type [GeoContact] and conformance <A> [A], &lazy protocol witness table cache variable for type GeoContact and conformance GeoContact);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t outlined init with copy of GeoParkedCar(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoParkedCar and conformance GeoParkedCar()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar;
  if (!lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar;
  if (!lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar and conformance GeoParkedCar);
  }
  return result;
}

uint64_t specialized GeoDataModels.ParkingLocationDataModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x614364656B726170 && a2 == 0xE900000000000072;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614C6E6F74747562 && a2 == 0xEB000000006C6562)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized GeoDataModels.ParkingLocationDataModel.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.ParkingLocationDataModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel.CodingKeys and conformance GeoDataModels.ParkingLocationDataModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  char v34 = 0;
  lazy protocol witness table accessor for type GeoParkedCar and conformance GeoParkedCar();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v27;
  uint64_t v10 = v29;
  uint64_t v23 = v28;
  uint64_t v24 = v26;
  uint64_t v11 = v31;
  uint64_t v22 = v30;
  uint64_t v12 = v32;
  uint64_t v13 = v33;
  LOBYTE(v26) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v9;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v21 = v14;
  v17(v8, v5);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = v25;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v18;
  a2[2] = v23;
  a2[3] = v10;
  a2[4] = v22;
  a2[5] = v11;
  a2[6] = v12;
  a2[7] = v13;
  a2[8] = v21;
  a2[9] = v16;
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [GeoTrafficIncident] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GeoTrafficIncident]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized GeoDataModels.ContactDisambiguationDataModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65546D6574737973 && a2 == 0xEA00000000007478
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616469646E6163 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized GeoDataModels.TrafficDisambiguationDataModel.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.TrafficDisambiguationDataModel.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel.CodingKeys and conformance GeoDataModels.TrafficDisambiguationDataModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GeoTrafficIncident]);
    v9[15] = 1;
    lazy protocol witness table accessor for type [GeoTrafficIncident] and conformance <A> [A](&lazy protocol witness table cache variable for type [GeoTrafficIncident] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type GeoTrafficIncident and conformance GeoTrafficIncident);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StandardMapData and conformance StandardMapData()
{
  unint64_t result = lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData;
  if (!lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData;
  if (!lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData and conformance StandardMapData);
  }
  return result;
}

uint64_t specialized GeoDataModels.WhereAmIDataModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 1145660781 && a2 == 0xE400000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614C6E6F74747562 && a2 == 0xEB000000006C6562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000000000C83C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4C746E6572727563 && a2 == 0xEF6E6F697461636FLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized GeoDataModels.WhereAmIDataModel.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.WhereAmIDataModel.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel.CodingKeys and conformance GeoDataModels.WhereAmIDataModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  LOBYTE(v29) = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v27 = v9;
  LOBYTE(v29) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v28 = v13;
  uint64_t v26 = v12;
  LOBYTE(v29) = 2;
  swift_bridgeObjectRetain();
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v33 = 3;
  uint64_t v15 = v14;
  lazy protocol witness table accessor for type StandardMapData and conformance StandardMapData();
  uint64_t v25 = v15;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v29;
  uint64_t v16 = v30;
  uint64_t v18 = v31;
  uint64_t v19 = v32;
  swift_bridgeObjectRetain();
  uint64_t v20 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v21 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v27;
  a2[1] = v11;
  a2[2] = v26;
  a2[3] = v20;
  a2[4] = v24;
  a2[5] = v21;
  a2[6] = v17;
  a2[7] = v16;
  a2[8] = v18;
  a2[9] = v19;
  return result;
}

uint64_t outlined init with take of GeoDataModels(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(a2 + 80) = *(unsigned char *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  return a2;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel;
  if (!lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel);
  }
  return result;
}

uint64_t specialized GeoDataModels.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x80000000000C83E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4C676E696B726170 && a2 == 0xEF6E6F697461636FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000000000C8400 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x496D416572656877 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized GeoDataModels.ContactDisambiguationCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t specialized GeoDataModels.WhereAmICodingKeys.stringValue.getter()
{
  return 12383;
}

double specialized GeoDataModels.init(from:)@<D0>(void *a1@<X0>, void *a2@<X8>)
{
  long long v53 = a2;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.WhereAmICodingKeys>);
  uint64_t v52 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  long long v56 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.TrafficDisambiguationCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v51 = v5;
  __chkstk_darwin(v4);
  long long v55 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.ParkingLocationCodingKeys>);
  uint64_t v49 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.ContactDisambiguationCodingKeys>);
  uint64_t v47 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoDataModels.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  uint64_t v67 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type GeoDataModels.CodingKeys and conformance GeoDataModels.CodingKeys();
  uint64_t v17 = v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    goto LABEL_6;
  }
  long long v46 = v11;
  uint64_t v45 = v9;
  uint64_t v18 = v8;
  uint64_t v20 = v54;
  uint64_t v19 = v55;
  uint64_t v21 = v56;
  *(void *)&long long v57 = v13;
  uint64_t v22 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v22 + 16) != 1)
  {
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v29 = &type metadata for GeoDataModels;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, enum case for DecodingError.typeMismatch(_:), v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v12);
LABEL_6:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v67);
    return result;
  }
  uint64_t v23 = (char *)*(unsigned __int8 *)(v22 + 32);
  switch(*(unsigned char *)(v22 + 32))
  {
    case 1:
      LOBYTE(v58) = 1;
      lazy protocol witness table accessor for type GeoDataModels.ParkingLocationCodingKeys and conformance GeoDataModels.ParkingLocationCodingKeys();
      uint64_t v31 = v18;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type GeoDataModels.ParkingLocationDataModel and conformance GeoDataModels.ParkingLocationDataModel();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v34 = v57;
      long long v46 = v23;
      uint64_t v47 = 0;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v31, v20);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v12);
      goto LABEL_11;
    case 2:
      uint64_t v54 = v22;
      LOBYTE(v58) = 2;
      lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationCodingKeys and conformance GeoDataModels.TrafficDisambiguationCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type GeoDataModels.TrafficDisambiguationDataModel and conformance GeoDataModels.TrafficDisambiguationDataModel();
      uint64_t v32 = v50;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v33 = v57;
      long long v46 = v23;
      uint64_t v47 = 0;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v12);
      uint64_t v26 = 0;
      goto LABEL_10;
    case 3:
      uint64_t v54 = v22;
      LOBYTE(v58) = 3;
      lazy protocol witness table accessor for type GeoDataModels.WhereAmICodingKeys and conformance GeoDataModels.WhereAmICodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type GeoDataModels.WhereAmIDataModel and conformance GeoDataModels.WhereAmIDataModel();
      uint64_t v35 = v48;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v36 = v57;
      long long v46 = v23;
      uint64_t v47 = 0;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v21, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v12);
LABEL_11:
      uint64_t v43 = v58;
      long long v57 = v59;
      uint64_t v26 = v60;
      uint64_t v37 = v61;
      uint64_t v38 = v62;
      uint64_t v39 = v63;
      uint64_t v40 = v64;
      uint64_t v41 = v65;
      uint64_t v42 = v66;
      goto LABEL_12;
    default:
      uint64_t v54 = v22;
      LOBYTE(v58) = 0;
      lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationCodingKeys and conformance GeoDataModels.ContactDisambiguationCodingKeys();
      uint64_t v24 = v46;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type GeoDataModels.ContactDisambiguationDataModel and conformance GeoDataModels.ContactDisambiguationDataModel();
      uint64_t v25 = v45;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v26 = 0;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v24, v25);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v12);
      long long v46 = v23;
      uint64_t v47 = 0;
LABEL_10:
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = v58;
      long long v57 = v59;
LABEL_12:
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v67);
      long long v44 = v53;
      *long long v53 = v43;
      double result = *(double *)&v57;
      *(_OWORD *)(v44 + 1) = v57;
      v44[3] = v26;
      void v44[4] = v37;
      v44[5] = v38;
      v44[6] = v39;
      v44[7] = v40;
      v44[8] = v41;
      v44[9] = v42;
      *((unsigned char *)v44 + 80) = (_BYTE)v46;
      break;
  }
  return result;
}

uint64_t outlined copy of GeoDataModels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result = a4;
  switch(a11)
  {
    case 0:
    case 2:
      goto LABEL_3;
    case 1:
    case 3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_3:
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for GeoDataModels(uint64_t a1)
{
  return outlined consume of GeoDataModels(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
}

uint64_t initializeWithCopy for GeoDataModels(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  char v14 = *(unsigned char *)(a2 + 80);
  outlined copy of GeoDataModels(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for GeoDataModels(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  char v25 = *(unsigned char *)(a2 + 80);
  outlined copy of GeoDataModels(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(unsigned char *)(a1 + 80) = v25;
  outlined consume of GeoDataModels(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for GeoDataModels(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 80);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = v3;
  outlined consume of GeoDataModels(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoDataModels(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoDataModels(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for GeoDataModels(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t destructiveInjectEnumTag for GeoDataModels(uint64_t result, char a2)
{
  *(unsigned char *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GeoDataModels()
{
  return &type metadata for GeoDataModels;
}

ValueMetadata *type metadata accessor for GeoDataModels.ContactDisambiguationDataModel()
{
  return &type metadata for GeoDataModels.ContactDisambiguationDataModel;
}

uint64_t destroy for GeoDataModels.ParkingLocationDataModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GeoDataModels.ParkingLocationDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GeoDataModels.ParkingLocationDataModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for GeoDataModels.ParkingLocationDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoDataModels.ParkingLocationDataModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoDataModels.ParkingLocationDataModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoDataModels.ParkingLocationDataModel()
{
  return &type metadata for GeoDataModels.ParkingLocationDataModel;
}

uint64_t destroy for GeoDataModels.ContactDisambiguationDataModel()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for GeoDataModels.ContactDisambiguationDataModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GeoDataModels.ContactDisambiguationDataModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GeoDataModels.ContactDisambiguationDataModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoDataModels.ContactDisambiguationDataModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoDataModels.ContactDisambiguationDataModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoDataModels.TrafficDisambiguationDataModel()
{
  return &type metadata for GeoDataModels.TrafficDisambiguationDataModel;
}

uint64_t destroy for GeoDataModels.WhereAmIDataModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GeoDataModels.WhereAmIDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GeoDataModels.WhereAmIDataModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  return a1;
}

uint64_t assignWithTake for GeoDataModels.WhereAmIDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoDataModels.WhereAmIDataModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoDataModels.WhereAmIDataModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoDataModels.WhereAmIDataModel()
{
  return &type metadata for GeoDataModels.WhereAmIDataModel;
}

void *type metadata accessor for GeoDataModels.CodingKeys()
{
  return &unk_E5690;
}

void *type metadata accessor for GeoDataModels.ContactDisambiguationCodingKeys()
{
  return &unk_E5720;
}

void *type metadata accessor for GeoDataModels.ParkingLocationCodingKeys()
{
  return &unk_E57B0;
}

void *type metadata accessor for GeoDataModels.TrafficDisambiguationCodingKeys()
{
  return &unk_E5840;
}

uint64_t getEnumTagSinglePayload for GeoDataModels.ContactDisambiguationCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for GeoDataModels.ContactDisambiguationCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x4F950);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for GeoDataModels.WhereAmICodingKeys()
{
  return &unk_E58D0;
}

unsigned char *storeEnumTagSinglePayload for GeoDataModels.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x4FA54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for GeoDataModels.WhereAmIDataModel.CodingKeys()
{
  return &unk_E5960;
}

void *type metadata accessor for GeoDataModels.TrafficDisambiguationDataModel.CodingKeys()
{
  return &unk_E59F0;
}

void *type metadata accessor for GeoDataModels.ParkingLocationDataModel.CodingKeys()
{
  return &unk_E5A80;
}

unsigned char *storeEnumTagSinglePayload for GeoDataModels.TrafficDisambiguationDataModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x4FB80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for GeoDataModels.ContactDisambiguationDataModel.CodingKeys()
{
  return &unk_E5B10;
}

uint64_t lazy protocol witness table accessor for type [GeoContact] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GeoContact]);
    lazy protocol witness table accessor for type GeoContact and conformance GeoContact(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type GeoContact and conformance GeoContact(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for GeoContact();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ContactHandleResolver.__allocating_init(contactService:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  *(void *)(v2 + 24) = a1;
  return v2;
}

uint64_t ContactHandleResolver.init(contactService:)(uint64_t a1)
{
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)();
  *(void *)(v1 + 24) = a1;
  return v1;
}

uint64_t ContactHandleResolver.filterHandles(recipients:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(ContactHandleResolver.filterHandles(recipients:), 0, 0);
}

uint64_t ContactHandleResolver.filterHandles(recipients:)()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  *uint64_t v2 = v0;
  v2[1] = ContactHandleResolver.filterHandles(recipients:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000001ALL, 0x80000000000C8450, partial apply for closure #1 in ContactHandleResolver.filterHandles(recipients:), v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ContactHandleResolver.filterHandles(recipients:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = ContactHandleResolver.filterHandles(recipients:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in ContactHandleResolver.filterHandles(recipients:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[INPerson], Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, char), uint64_t))(*(void *)a2 + 112))(a3, partial apply for closure #1 in closure #1 in ContactHandleResolver.filterHandles(recipients:), v10);
  return swift_release();
}

uint64_t partial apply for closure #1 in ContactHandleResolver.filterHandles(recipients:)(uint64_t a1)
{
  return closure #1 in ContactHandleResolver.filterHandles(recipients:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in closure #1 in ContactHandleResolver.filterHandles(recipients:)(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[INPerson], Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[INPerson], Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

void ContactHandleResolver.filterHandles(recipients:_:)(unint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  unint64_t v5 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v35 = a2;
    uint64_t v36 = a3;
    if (v6) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v38 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  if (!v6) {
    goto LABEL_17;
  }
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v7 = 0;
  unint64_t v8 = v5 & 0xC000000000000001;
  uint64_t v38 = _swiftEmptyArrayStorage;
  unint64_t v9 = (SEL *)&unk_EC000;
  do
  {
    if (v8) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v5 + 8 * v7 + 32);
    }
    uint64_t v12 = v11;
    id v13 = objc_msgSend(v11, v9[52], v35);
    if (v13)
    {
      char v14 = v13;
      id v15 = [v13 value];

      if (v15)
      {
        unint64_t v16 = v8;
        unint64_t v17 = v5;
        uint64_t v18 = v9;
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        }
        unint64_t v23 = v38[2];
        unint64_t v22 = v38[3];
        if (v23 >= v22 >> 1) {
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v38);
        }
        _OWORD v38[2] = v23 + 1;
        uint64_t v10 = &v38[2 * v23];
        v10[4] = v19;
        v10[5] = v21;
        unint64_t v9 = v18;
        unint64_t v5 = v17;
        unint64_t v8 = v16;
      }
    }
    ++v7;
  }
  while (v6 != v7);
LABEL_18:
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v24 = *(NSObject **)(v37 + 16);
  os_log(_:dso:log:_:_:)();
  id v25 = [self sharedInstance];
  if (v25)
  {
    uint64_t v26 = v25;
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_0, v24, v27, "share ETA confirm ready", v28, 2u);
      swift_slowDealloc();
    }
    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = v37;
    v29[3] = v26;
    v29[4] = v38;
    v29[5] = v35;
    v29[6] = v36;
    v29[7] = v5;
    aBlock[4] = partial apply for specialized closure #1 in ContactHandleResolver.filterHandles(recipients:_:);
    aBlock[5] = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed MSPSharedTripService) -> ();
    aBlock[3] = &block_descriptor_0;
    uint64_t v30 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    id v31 = v26;
    swift_retain();
    swift_release();
    [v31 performBlockAfterInitialSync:v30];
    _Block_release(v30);
  }
  else
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for RuntimeError();
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = 0xD000000000000024;
    *(void *)(v32 + 24) = 0x80000000000C84A0;
    lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError();
    uint64_t v33 = swift_allocError();
    *uint64_t v34 = v32;
    v35(v33, 1);
    swift_errorRelease();
  }
}

uint64_t specialized closure #1 in ContactHandleResolver.filterHandles(recipients:_:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_C0600;
  *(void *)(v13 + 56) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MSPSharedTripService);
  *(void *)(v13 + 64) = lazy protocol witness table accessor for type MSPSharedTripService and conformance NSObject();
  *(void *)(v13 + 32) = a3;
  id v14 = a3;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 24);
  unint64_t v16 = (void *)swift_allocObject();
  v16[2] = a2;
  uint64_t v16[3] = a1;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = a7;
  unint64_t v17 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), void *))(*(void *)v15 + 144);
  swift_retain();
  id v18 = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  v17(a4, partial apply for closure #1 in closure #1 in ContactHandleResolver.filterHandles(recipients:_:), v16);

  return swift_release();
}

uint64_t closure #1 in closure #1 in ContactHandleResolver.filterHandles(recipients:_:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(void), uint64_t a5, unint64_t a6)
{
  static os_log_type_t.info.getter();
  id v11 = *(NSObject **)(a2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_C0600;
  uint64_t v41 = a1;
  uint64_t v13 = Array.debugDescription.getter();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v16 = a3;
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)id v18 = 136315138;
    id v19 = v16;
    unint64_t v20 = a6;
    uint64_t v21 = v11;
    id v22 = [v19 description];
    unint64_t v23 = a4;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    id v11 = v21;
    a6 = v20;
    uint64_t v27 = v24;
    a4 = v23;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v11, v17, "%s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (*(void *)(v41 + 16))
  {
    specialized ContactHandleResolver.phoneDisambiguationCandidates(_:)(v41);
    uint64_t v29 = v28;
    swift_bridgeObjectRetain();
    uint64_t v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriGeo28EnhancedMSPSharedTripContactVG_So8INPersonCs5NeverOTg504_s21e20FlowDelegatePlugin21i50HandleResolverC13filterHandles10recipients_ySaySo8j18CG_ys6ResultOyAHs5c11_pGctFySo20gh18ServiceCcfU_ySay04D30A008EnhancednoE0VGcfU_AgQXEfU_SayAKGTf1cn_nTf4ng_n(v29, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v31))
    {
      uint64_t v32 = a4;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 8) = 2080;
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
      uint64_t v34 = v11;
      swift_bridgeObjectRetain();
      uint64_t v35 = Array.description.getter();
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v34, v31, "disambiguation required %{BOOL}d disambiguation list %s", (uint8_t *)v33, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v32;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    ((void (*)(void *, void))a4)(v30, 0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for RuntimeError();
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = 0xD00000000000001DLL;
    *(void *)(v38 + 24) = 0x80000000000C8680;
    lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError();
    swift_allocError();
    *uint64_t v39 = v38;
    a4();
    return swift_errorRelease();
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed MSPSharedTripService) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t GeoFlowDelegatePlugin.deinit()
{
  swift_release();
  return v0;
}

uint64_t GeoFlowDelegatePlugin.__deallocating_deinit()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t protocol witness for HandleFilterProtocol.filterHandles(recipients:_:) in conformance ContactHandleResolver()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for HandleFilterProtocolAsync.filterHandles(recipients:) in conformance ContactHandleResolver(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 104) + **(int **)(**(void **)v1 + 104));
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *id v4 = v2;
  v4[1] = protocol witness for HandleFilterProtocolAsync.filterHandles(recipients:) in conformance ContactHandleResolver;
  return v6(a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v2;
  id v4 = swift_task_dealloc();
  unint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    id v4 = a1;
  }
  return v5(v4);
}

unint64_t lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError()
{
  unint64_t result = lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError;
  if (!lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError)
  {
    type metadata accessor for RuntimeError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError);
  }
  return result;
}

uint64_t sub_51AC8()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for specialized closure #1 in ContactHandleResolver.filterHandles(recipients:_:)(void *a1)
{
  return specialized closure #1 in ContactHandleResolver.filterHandles(recipients:_:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TerminalIntentNode>, (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode, (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>, (uint64_t (*)(void))&type metadata accessor for DisplayHint, (uint64_t (*)(void))&type metadata accessor for DisplayHint);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SemanticValue>, (uint64_t (*)(void))&type metadata accessor for SemanticValue, (uint64_t (*)(void))&type metadata accessor for SemanticValue);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EnhancedMSPSharedTripContact>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    id v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  id v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t type metadata accessor for ContactHandleResolver()
{
  return self;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentNode);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  if (a1 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      uint64_t v4 = 4;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v5 = *(id *)(a1 + 8 * v4);
        }
        unint64_t v6 = v5;
        uint64_t v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
        {
          __break(1u);
          goto LABEL_30;
        }
        id v8 = [v5 personHandle];
        uint64_t v9 = v8;
        if (v8)
        {
          id v10 = [v8 value];

          if (v10)
          {
            uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v9 = v12;
          }
          else
          {
            uint64_t v11 = 0;
            uint64_t v9 = 0;
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
        id v13 = [a2 value];
        if (!v13) {
          break;
        }
        uint64_t v14 = v13;
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v17 = v16;

        if (!v9)
        {
          if (!v17) {
            goto LABEL_28;
          }
          goto LABEL_5;
        }
        if (!v17) {
          goto LABEL_5;
        }
        if (v11 == v15 && v9 == v17)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_28:
          swift_bridgeObjectRelease();
          return v6;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_28;
        }

LABEL_6:
        ++v4;
        if (v7 == v3) {
          goto LABEL_31;
        }
      }
      if (!v9) {
        goto LABEL_28;
      }
LABEL_5:

      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
LABEL_31:
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t lazy protocol witness table accessor for type MSPSharedTripService and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type MSPSharedTripService and conformance NSObject;
  if (!lazy protocol witness table cache variable for type MSPSharedTripService and conformance NSObject)
  {
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for MSPSharedTripService);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MSPSharedTripService and conformance NSObject);
  }
  return result;
}

uint64_t sub_527BC()
{
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ContactHandleResolver.filterHandles(recipients:_:)(uint64_t a1)
{
  return closure #1 in closure #1 in ContactHandleResolver.filterHandles(recipients:_:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t specialized ContactHandleResolver.phoneDisambiguationCandidates(_:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 > 1)
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v13 = *(void **)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    double v15 = *(double *)(a1 + 64);
    uint64_t v16 = *(void **)(a1 + 72);
    *(void *)&long long v36 = v12;
    *((void *)&v36 + 1) = v11;
    *(void *)&long long v37 = v13;
    *((void *)&v37 + 1) = v14;
    *(double *)&long long v38 = v15;
    *((void *)&v38 + 1) = v16;
    id v17 = v16;
    swift_bridgeObjectRetain();
    id v18 = v13;
    LOBYTE(v13) = EnhancedMSPSharedTripContact.isPhoneNumber()();

    swift_bridgeObjectRelease();
    if (v13)
    {
      Swift::UInt v33 = EnhancedMSPSharedTripContact.getCapabilityType()();
      swift_bridgeObjectRetain();
      id v19 = v18;
      id v20 = v17;
      swift_bridgeObjectRetain();
      if (EnhancedMSPSharedTripContact.isPhoneNumber()())
      {
        uint64_t v35 = v14;
        uint64_t v21 = (void **)(a1 + 120);
        unint64_t v22 = _swiftEmptyArrayStorage;
        double v23 = v15;
        while (1)
        {
          id v34 = v16;
          swift_bridgeObjectRetain();
          id v24 = v19;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
          }
          unint64_t v26 = v22[2];
          unint64_t v25 = v22[3];
          if (v26 >= v25 >> 1) {
            unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v22);
          }
          uint64_t v22[2] = v26 + 1;
          uint64_t v27 = (double *)&v22[6 * v26];
          *((void *)v27 + 4) = v12;
          *((void *)v27 + 5) = v11;
          *((void *)v27 + 6) = v24;
          *((void *)v27 + 7) = v35;
          v27[8] = v23;
          *((void *)v27 + 9) = v16;

          swift_bridgeObjectRelease();
          if (!--v2) {
            break;
          }
          uint64_t v11 = (uint64_t)*(v21 - 4);
          uint64_t v28 = *(v21 - 3);
          double v23 = *((double *)v21 - 1);
          uint64_t v16 = *v21;
          uint64_t v12 = (uint64_t)*(v21 - 5);
          uint64_t v35 = (uint64_t)*(v21 - 2);
          if (v33 != EnhancedMSPSharedTripContact.getCapabilityType()() || v15 != v23) {
            break;
          }
          v21 += 6;
          id v29 = v16;
          swift_bridgeObjectRetain();
          id v19 = v28;
          if (!EnhancedMSPSharedTripContact.isPhoneNumber()())
          {
            swift_bridgeObjectRelease();

            break;
          }
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        unint64_t v22 = _swiftEmptyArrayStorage;
      }
      return v22[2] > 1uLL;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EnhancedMSPSharedTripContact>);
      uint64_t v30 = (_OWORD *)swift_allocObject();
      v30[1] = xmmword_C0600;
      void v30[2] = v36;
      v30[3] = v37;
      v30[4] = v38;
      swift_bridgeObjectRetain();
      id v31 = v18;
      id v32 = v17;
      return 0;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EnhancedMSPSharedTripContact>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_C0600;
    if (v2 == 1)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      unint64_t v6 = *(void **)(a1 + 48);
      uint64_t v5 = *(void *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 64);
      id v8 = *(void **)(a1 + 72);
      *(void *)(result + 32) = *(void *)(a1 + 32);
      *(void *)(result + 40) = v4;
      *(void *)(result + 48) = v6;
      *(void *)(result + 56) = v5;
      *(void *)(result + 64) = v7;
      *(void *)(result + 72) = v8;
      id v9 = v8;
      swift_bridgeObjectRetain();
      id v10 = v6;
      return 0;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriGeo28EnhancedMSPSharedTripContactVG_So8INPersonCs5NeverOTg504_s21e20FlowDelegatePlugin21i50HandleResolverC13filterHandles10recipients_ySaySo8j18CG_ys6ResultOyAHs5c11_pGctFySo20gh18ServiceCcfU_ySay04D30A008EnhancednoE0VGcfU_AgQXEfU_SayAKGTf1cn_nTf4ng_n(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v30 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v8)
  {
    id v31 = v7;
    long long v44 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    id v10 = (void **)(a1 + 72);
    do
    {
      uint64_t v14 = (uint64_t)*(v10 - 4);
      uint64_t v16 = *(v10 - 3);
      uint64_t v15 = (uint64_t)*(v10 - 2);
      uint64_t v17 = (uint64_t)*(v10 - 1);
      id v18 = *v10;
      uint64_t v32 = (uint64_t)*(v10 - 5);
      uint64_t v38 = v32;
      uint64_t v39 = v14;
      uint64_t v40 = v16;
      uint64_t v41 = v15;
      uint64_t v42 = v17;
      uint64_t v43 = v18;
      id v34 = v18;
      swift_bridgeObjectRetain();
      id v33 = v16;
      Class isa = EnhancedMSPSharedTripContact.getPersonHandle()().super.isa;
      id v20 = specialized Sequence.first(where:)(v30, isa);
      uint64_t v21 = type metadata accessor for PersonNameComponents();
      uint64_t v22 = *(void *)(v21 - 8);
      double v23 = v31;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v31, 1, 1, v21);
      Class v36 = isa;
      uint64_t v37 = v3;
      if (v20)
      {
        swift_bridgeObjectRetain();
        id v24 = [v20 contactIdentifier];
        if (v24)
        {
          unint64_t v25 = v24;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v27 = v26;
        }
        else
        {
          uint64_t v27 = 0;
        }
        double v23 = v31;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = 0;
      }
      id v35 = v20;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v23, 1, v21) == 1)
      {
        Class v28 = 0;
      }
      else
      {
        Class v28 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v21);
      }
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (v27)
      {
        NSString v11 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v11 = 0;
      }
      v10 += 6;
      id v12 = objc_allocWithZone((Class)INPerson);
      Class v13 = v36;
      [v12 initWithPersonHandle:v36 nameComponents:v28 displayName:v29 image:0 contactIdentifier:v11 customIdentifier:0];

      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v8;
      uint64_t v3 = v37;
    }
    while (v8);
    return v44;
  }
  return result;
}

uint64_t sub_52F64()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[INPerson], Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ContactHandleResolver.filterHandles(recipients:)(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[INPerson], Error>);

  return closure #1 in closure #1 in ContactHandleResolver.filterHandles(recipients:)(a1, v3);
}

uint64_t static GeoFeatureManager.shouldEnableAltimeter.getter()
{
  char v3 = &type metadata for SiriGeoFeature;
  unint64_t v4 = lazy protocol witness table accessor for type SiriGeoFeature and conformance SiriGeoFeature();
  v2[0] = 1;
  char v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v2);
  return v0 & 1;
}

ValueMetadata *type metadata accessor for GeoFeatureManager()
{
  return &type metadata for GeoFeatureManager;
}

uint64_t FSMFlow.on(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Input();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  NSString v11 = &v39[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t v13 = __chkstk_darwin(v9);
  long long v53 = &v39[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v16 = &v39[-v15];
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  uint64_t v51 = a3 + 40;
  uint64_t v17 = v50(a2, a3);
  uint64_t v52 = v12;
  uint64_t v49 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16);
  v49(v16, v3, a2);
  id v18 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
  long long v46 = v11;
  uint64_t v48 = v7;
  v18(v11, a1, v7);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  uint64_t v47 = v17;
  if (os_log_type_enabled(v17, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v42 = a1;
    uint64_t v43 = v3;
    uint64_t v22 = v21;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v55 = v41;
    *(_DWORD *)uint64_t v22 = 136315394;
    int v40 = v20;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v55);
    uint64_t v44 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v45 = *(void (**)(unsigned char *, uint64_t))(v52 + 8);
    v45(v16, a2);
    *(_WORD *)(v22 + 12) = 2080;
    lazy protocol witness table accessor for type Input and conformance Input();
    unint64_t v25 = v46;
    uint64_t v26 = v48;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v55);
    a3 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v25, v26);
    NSString v29 = v47;
    _os_log_impl(&dword_0, v47, (os_log_type_t)v40, "on %s input %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v42;
    uint64_t v3 = v43;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v45 = *(void (**)(unsigned char *, uint64_t))(v52 + 8);
    v45(v16, a2);
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v46, v48);
  }
  char v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 48))(a1, a2, a3);
  id v31 = v50(a2, a3);
  v49(v53, v3, a2);
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    id v34 = v53;
    uint64_t v35 = v33;
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v45(v34, a2);
    *(_WORD *)(v35 + 12) = 1024;
    LODWORD(v54) = v30 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v31, v32, "on exit %s return %{BOOL}d", (uint8_t *)v35, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    v45(v53, a2);
  }
  return v30 & 1;
}

uint64_t FSMFlow.execute(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(v11, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a3);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    v20[1] = a1;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc();
    v20[2] = a2;
    v20[3] = v3;
    uint64_t v21 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    v20[0] = v15 + 4;
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    _DWORD v20[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
    _os_log_impl(&dword_0, v12, v13, "execute %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  }
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t FSMFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[3] = a2;
  v4[6] = *(void *)(a2 - 8);
  v4[7] = swift_task_alloc();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 56) + **(int **)(a3 + 56));
  uint64_t v8 = (void *)swift_task_alloc();
  v4[8] = v8;
  *uint64_t v8 = v4;
  v8[1] = FSMFlow.execute();
  return v10(a1, a2, a3);
}

uint64_t FSMFlow.execute()()
{
  swift_task_dealloc();
  return _swift_task_switch(FSMFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  os_log_type_t v19 = v0;
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  unint64_t v4 = v0[5];
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v0[4] + 40))(v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v4, v1);
  uint64_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[6];
    uint64_t v8 = v0[3];
    uint64_t v17 = v0[7];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    unint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v8);
    _os_log_impl(&dword_0, v5, v6, "execute return %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    os_log_type_t v13 = v0[6];
    uint64_t v12 = v0[7];
    uint64_t v14 = v0[3];

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t FSMFlow.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  __chkstk_darwin(v5);
  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  strcpy((char *)v10, " flowState: ");
  BYTE5(v10[1]) = 0;
  HIWORD(v10[1]) = -5120;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v6._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0xEC000000203A6575;
  v7._uint64_t countAndFlagsBits = 0x6C61567469786520;
  String.append(_:)(v7);
  dispatch thunk of Flow.exitValue.getter();
  v8._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return v10[0];
}

uint64_t specialized String.init<A>(describing:)()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 32, a1);
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.__allocating_init(with:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  TrafficIncidentContinueInAppPunchoutStrategy.init(with:)(a1);
  return v2;
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.init(with:)(long long *a1)
{
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for CATService();
  uint64_t v3 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v3 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v3 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v3 + 16) = 1;
  *(void *)(v1 + 24) = v3;
  outlined init with take of CATType(a1, v1 + 32);
  return v1;
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.requireUnlock(intentResolutionRecord:)()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  [(id)static AssistantProperties.instance currentNavigationState];
  int IsNavigating = AFNavigationStateIsNavigating();
  uint64_t v2 = *(NSObject **)(v0 + 16);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 136315138;
    uint64_t v9 = v5;
    if (IsNavigating) {
      uint64_t v6 = 1702195828;
    }
    else {
      uint64_t v6 = 0x65736C6166;
    }
    if (IsNavigating) {
      unint64_t v7 = 0xE400000000000000;
    }
    else {
      unint64_t v7 = 0xE500000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v2, v3, "isNavigating returns %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  return IsNavigating ^ 1u;
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:)(uint64_t a1, uint64_t a2)
{
  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[36] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[37] = v4;
  v3[38] = *(void *)(v4 - 8);
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:), 0, 0);
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:)()
{
  char v30 = v0;
  uint64_t v1 = v0[35];
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INReportIncidentIntent, INReportIncidentIntentResponse>);
  IntentResolutionRecord.app.getter();
  uint64_t v2 = (void *)IntentResolutionRecord.intent.getter();
  os_log_type_t v3 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
  v0[41] = (uint64_t)v3;

  swift_release();
  uint64_t v4 = *(NSObject **)(v1 + 16);
  id v5 = v3;
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 136315138;
    id v8 = v5;
    id v9 = [v8 description];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_0, v4, v6, "appLaunch command is %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  os_log_type_t v13 = (void *)v0[35];
  uint64_t v14 = (void *)IntentResolutionRecord.intent.getter();
  char v15 = specialized static TrafficIncidentUtils.isUpdateIntent(intent:)(v14);

  uint64_t v16 = v13[3];
  uint64_t v17 = v13 + 4;
  if (v15)
  {
    unint64_t v18 = v0 + 17;
    v0[20] = type metadata accessor for TrafficIncident(0);
    v0[21] = (uint64_t)&protocol witness table for TrafficIncident;
    __swift_allocate_boxed_opaque_existential_0(v0 + 17);
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = v13[7];
    uint64_t v20 = v13[8];
    __swift_project_boxed_opaque_existential_1(v17, v19);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 80))(v19, v20);
    v0[42] = v21;
    unint64_t v28 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v16 + 112)
                                                              + **(int **)(*(void *)v16 + 112));
    uint64_t v22 = (void *)swift_task_alloc();
    v0[43] = (uint64_t)v22;
    *uint64_t v22 = v0;
    v22[1] = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
    uint64_t v23 = v0[40];
  }
  else
  {
    unint64_t v18 = v0 + 2;
    v0[5] = type metadata accessor for TrafficIncident(0);
    v0[6] = (uint64_t)&protocol witness table for TrafficIncident;
    __swift_allocate_boxed_opaque_existential_0(v0 + 2);
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = v13[7];
    uint64_t v25 = v13[8];
    __swift_project_boxed_opaque_existential_1(v17, v24);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 80))(v24, v25);
    v0[45] = v21;
    unint64_t v28 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v16 + 112)
                                                              + **(int **)(*(void *)v16 + 112));
    uint64_t v26 = (void *)swift_task_alloc();
    v0[46] = (uint64_t)v26;
    *uint64_t v26 = v0;
    v26[1] = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
    uint64_t v23 = v0[39];
  }
  return v28(v23, v18, v21);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 352) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    os_log_type_t v3 = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 136);
    os_log_type_t v3 = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void **)(v0 + 328);
  os_log_type_t v3 = *(void *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 296);
  uint64_t v4 = *(void **)(v0 + 280);
  id v5 = *(void *)(v0 + 288);
  os_log_type_t v6 = *(uint64_t **)(v0 + 264);
  unint64_t v7 = v4[7];
  id v8 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  id v9 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_C0AD0;
  *(void *)(v10 + 32) = v2;
  specialized Array._endMutation()();
  *(void *)(v0 + 248) = 0;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  unint64_t v11 = v2;
  static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)((uint64_t)_swiftEmptyArrayStorage, (uint8_t *)(v0 + 176), v6, v0 + 216);
  swift_bridgeObjectRelease();

  outlined destroy of (label: String?, value: Any)?(v0 + 216, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 176);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    os_log_type_t v3 = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    os_log_type_t v3 = TrafficIncidentContinueInAppPunchoutStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = *(void **)(v0 + 328);
  os_log_type_t v3 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v14 = *(void *)(v0 + 296);
  id v5 = *(void **)(v0 + 280);
  os_log_type_t v6 = *(uint64_t **)(v0 + 264);
  unint64_t v7 = v5[7];
  id v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  id v9 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_C0AD0;
  *(void *)(v10 + 32) = v1;
  specialized Array._endMutation()();
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  unint64_t v11 = v1;
  static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)((uint64_t)_swiftEmptyArrayStorage, (uint8_t *)(v0 + 56), v6, v0 + 96);
  swift_bridgeObjectRelease();

  outlined destroy of (label: String?, value: Any)?(v0 + 96, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock()(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  char v2[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock(), 0, 0);
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock()()
{
  uint64_t v1 = (void *)v0[23];
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v2 = v1[3];
  v0[5] = &type metadata for Common;
  v0[6] = &protocol witness table for Common;
  v0[2] = 1;
  uint64_t v3 = v1[7];
  uint64_t v4 = v1[8];
  __swift_project_boxed_opaque_existential_1(v1 + 4, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 80))(v3, v4);
  v0[28] = v5;
  id v9 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v2 + 112)
                                                          + **(int **)(*(void *)v2 + 112));
  os_log_type_t v6 = (void *)swift_task_alloc();
  v0[29] = v6;
  *os_log_type_t v6 = v0;
  v6[1] = TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock();
  uint64_t v7 = v0[27];
  return v9(v7, v0 + 2, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = TrafficIncidentContinueInAppPunchoutStrategy.makePromptForDeviceUnlock();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  unint64_t v12 = *(void *)(v0 + 216);
  os_log_type_t v13 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v14 = *(void *)(v0 + 200);
  uint64_t v3 = *(uint64_t **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 184);
  uint64_t v5 = v2[7];
  uint64_t v4 = v2[8];
  __swift_project_boxed_opaque_existential_1(v2 + 4, v5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v5, v4);
  os_log_type_t v6 = v2[7];
  uint64_t v7 = v2[8];
  __swift_project_boxed_opaque_existential_1(v2 + 4, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), *(void *)(v0 + 120));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  id v8 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 1, 1, v8);
  id v9 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 152) = 0u;
  *(void *)(v0 + 168) = 0;
  *(_OWORD *)(v0 + 136) = 0u;
  v3[3] = v9;
  v3[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v3);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of (label: String?, value: Any)?(v0 + 136, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 32);
  return v0;
}

uint64_t TrafficIncidentContinueInAppPunchoutStrategy.__deallocating_deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 32);

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.requireUnlock(intentResolutionRecord:) in conformance TrafficIncidentContinueInAppPunchoutStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))() & 1;
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:) in conformance TrafficIncidentContinueInAppPunchoutStrategy(uint64_t a1, uint64_t a2)
{
  id v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 120)
                                                + **(int **)(**(void **)v2 + 120));
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *os_log_type_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance TrafficIncidentContinueInAppPunchoutStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentContinueInAppPunchoutStrategy();
  *id v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.authenticationPolicy.getter in conformance TrafficIncidentContinueInAppPunchoutStrategy()
{
  return UnlockDeviceFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock() in conformance TrafficIncidentContinueInAppPunchoutStrategy(uint64_t a1)
{
  os_log_type_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 128) + **(int **)(**(void **)v1 + 128));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t base witness table accessor for ContinueInAppDialogFlowStrategyAsync in TrafficIncidentContinueInAppPunchoutStrategy()
{
  return lazy protocol witness table accessor for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy(&lazy protocol witness table cache variable for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy);
}

uint64_t type metadata accessor for TrafficIncidentContinueInAppPunchoutStrategy()
{
  return self;
}

uint64_t base witness table accessor for UnlockDeviceFlowStrategyAsync in TrafficIncidentContinueInAppPunchoutStrategy()
{
  return lazy protocol witness table accessor for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy(&lazy protocol witness table cache variable for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy);
}

uint64_t base witness table accessor for ContinueInAppFlowStrategy in TrafficIncidentContinueInAppPunchoutStrategy()
{
  return lazy protocol witness table accessor for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy(&lazy protocol witness table cache variable for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy);
}

uint64_t lazy protocol witness table accessor for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TrafficIncidentContinueInAppPunchoutStrategy();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t AnswerAltitudeFlow.flowState.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of AnswerAltitudeFlow.State(v1, *(unsigned char *)(v0 + 40));
  return v1;
}

uint64_t outlined copy of AnswerAltitudeFlow.State(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t AnswerAltitudeFlow.flowState.setter(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = a1;
  char v6 = *(unsigned char *)(v2 + 40);
  *(unsigned char *)(v2 + 40) = a2;
  return outlined consume of AnswerAltitudeFlow.State(v5, v6);
}

uint64_t outlined consume of AnswerAltitudeFlow.State(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t AnswerAltitudeFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of DeviceState(v1 + 48, a1);
}

uint64_t AnswerAltitudeFlow.flowHelper.setter(long long *a1)
{
  uint64_t v3 = v1 + 48;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, v3);
  return swift_endAccess();
}

uint64_t (*AnswerAltitudeFlow.flowHelper.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t AnswerAltitudeFlow.__allocating_init(with:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized AnswerAltitudeFlow.init(with:)((uint64_t)v7, v2, v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v9;
}

uint64_t AnswerAltitudeFlow.init(with:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized AnswerAltitudeFlow.init(with:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v9;
}

uint64_t AnswerAltitudeFlow.__allocating_init()()
{
  v2[3] = &type metadata for FlowHelperImpl;
  v2[4] = &protocol witness table for FlowHelperImpl;
  v2[0] = swift_allocObject();
  FlowHelperImpl.init()((void *)(v2[0] + 16));
  return (*(uint64_t (**)(void *))(v0 + 160))(v2);
}

uint64_t AnswerAltitudeFlow.onInput(input:)()
{
  return 1;
}

uint64_t AnswerAltitudeFlow.executeState()(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return _swift_task_switch(AnswerAltitudeFlow.executeState(), 0, 0);
}

uint64_t AnswerAltitudeFlow.executeState()()
{
  uint64_t v42 = v0;
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 128) + 112))();
  uint64_t v3 = v1;
  *(void *)(v0 + 136) = v1;
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v4 = *(void *)(v0 + 128);
      os_log_type_t v5 = static os_log_type_t.default.getter();
      uint64_t v6 = *(NSObject **)(v4 + 16);
      os_log_type_t v7 = v5;
      if (os_log_type_enabled(v6, v5))
      {
        outlined copy of AnswerAltitudeFlow.State(v3, 1);
        outlined copy of AnswerAltitudeFlow.State(v3, 1);
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136315138;
        *(void *)(v0 + 96) = v3;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v9 = String.init<A>(describing:)();
        *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of AnswerAltitudeFlow.State(v3, 1);
        outlined consume of AnswerAltitudeFlow.State(v3, 1);
        _os_log_impl(&dword_0, v6, v7, "AnswerAltitudeFlow execute request unsupported with err: %s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      unint64_t v37 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)(v0 + 128) + 208)
                                            + **(int **)(**(void **)(v0 + 128) + 208));
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 168) = v11;
      void *v11 = v0;
      v11[1] = AnswerAltitudeFlow.executeState();
      uint64_t v12 = *(void *)(v0 + 120);
      return v37(v12);
    }
    else
    {
      switch(v1)
      {
        case 1:
          uint64_t v21 = *(void *)(v0 + 128);
          static os_log_type_t.info.getter();
          os_log(_:dso:log:_:_:)();
          int v40 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v21 + 200)
                                                + **(int **)(*(void *)v21 + 200));
          uint64_t v22 = (void *)swift_task_alloc();
          *(void *)(v0 + 160) = v22;
          *uint64_t v22 = v0;
          v22[1] = AnswerAltitudeFlow.executeState();
          uint64_t v19 = *(void *)(v0 + 120);
          uint64_t v20 = v40;
          return v20(v19);
        case 2:
          uint64_t v23 = *(void *)(v0 + 128);
          os_log_type_t v24 = static os_log_type_t.default.getter();
          uint64_t v25 = *(NSObject **)(v23 + 16);
          os_log_type_t v26 = v24;
          if (os_log_type_enabled(v25, v24))
          {
            uint64_t v27 = (uint8_t *)swift_slowAlloc();
            uint64_t v41 = swift_slowAlloc();
            *(_DWORD *)uint64_t v27 = 136315138;
            *(void *)(v0 + 80) = &type metadata for SiriGeoFeature;
            *(void *)(v0 + 88) = lazy protocol witness table accessor for type SiriGeoFeature and conformance SiriGeoFeature();
            *(unsigned char *)(v0 + 56) = 1;
            char v28 = isFeatureEnabled(_:)();
            __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
            if (v28) {
              uint64_t v29 = 1702195828;
            }
            else {
              uint64_t v29 = 0x65736C6166;
            }
            if (v28) {
              unint64_t v30 = 0xE400000000000000;
            }
            else {
              unint64_t v30 = 0xE500000000000000;
            }
            *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v41);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_0, v25, v26, "Should answer altitude use the device's altimeter: %s", v27, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          *(void *)(v0 + 40) = &type metadata for SiriGeoFeature;
          *(void *)(v0 + 48) = lazy protocol witness table accessor for type SiriGeoFeature and conformance SiriGeoFeature();
          *(unsigned char *)(v0 + 16) = 1;
          char v31 = isFeatureEnabled(_:)();
          __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
          if (v31)
          {
            unsigned int v32 = [self isAbsoluteAltitudeAvailable];
            static os_log_type_t.info.getter();
            uint64_t v33 = *(void *)(v0 + 128);
            if (v32)
            {
              uint64_t v34 = os_log(_:dso:log:_:_:)();
              (*(void (**)(uint64_t))(*(void *)v33 + 184))(v34);
              goto LABEL_33;
            }
            os_log(_:dso:log:_:_:)();
            (*(void (**)(void, uint64_t))(*(void *)v33 + 120))(0, 2);
          }
          else
          {
            uint64_t v35 = *(void *)(v0 + 128);
            static os_log_type_t.info.getter();
            os_log(_:dso:log:_:_:)();
            (*(void (**)(void, uint64_t))(*(void *)v35 + 120))(0, 2);
          }
          static ExecuteResponse.ongoing(requireInput:)();
LABEL_33:
          uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
          uint64_t result = v36();
          break;
        case 3:
          static os_log_type_t.default.getter();
          os_log(_:dso:log:_:_:)();
          static ExecuteResponse.complete()();
          goto LABEL_33;
        default:
          uint64_t v17 = *(void *)(v0 + 128);
          static os_log_type_t.info.getter();
          os_log(_:dso:log:_:_:)();
          uint64_t v39 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v17 + 192)
                                                + **(int **)(*(void *)v17 + 192));
          unint64_t v18 = (void *)swift_task_alloc();
          *(void *)(v0 + 152) = v18;
          *unint64_t v18 = v0;
          v18[1] = AnswerAltitudeFlow.executeState();
          uint64_t v19 = *(void *)(v0 + 120);
          uint64_t v20 = v39;
          return v20(v19);
      }
    }
  }
  else
  {
    uint64_t v38 = (uint64_t (*)(uint64_t, __n128))(*(void *)(**(void **)(v0 + 128) + 216)
                                                  + **(int **)(**(void **)(v0 + 128) + 216));
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v14;
    *uint64_t v14 = v0;
    v14[1] = AnswerAltitudeFlow.executeState();
    uint64_t v15 = *(void *)(v0 + 120);
    v16.n128_u64[0] = v3;
    return v38(v15, v16);
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(AnswerAltitudeFlow.executeState(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of AnswerAltitudeFlow.State(*(void *)(v0 + 136), 1);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void AnswerAltitudeFlow.fetchAltitude()()
{
  id v1 = [objc_allocWithZone((Class)CMAltimeter) init];
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  id v2 = [self mainQueue];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  *(void *)(v3 + 24) = v1;
  v6[4] = partial apply for closure #1 in AnswerAltitudeFlow.fetchAltitude();
  _OWORD v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  _OWORD v6[2] = thunk for @escaping @callee_guaranteed (@guaranteed CMAbsoluteAltitudeData?, @guaranteed Error?) -> ();
  v6[3] = &block_descriptor_1;
  uint64_t v4 = _Block_copy(v6);
  swift_retain();
  id v5 = v1;
  swift_release();
  [v5 startAbsoluteAltitudeUpdatesToQueue:v2 withHandler:v4];
  _Block_release(v4);

  static ExecuteResponse.ongoing(requireInput:)();
}

id closure #1 in AnswerAltitudeFlow.fetchAltitude()(void *a1, uint64_t a2, void *a3, void *a4)
{
  if (a2)
  {
    swift_errorRetain();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    os_log_type_t v7 = a3[2];
    os_log_type_t v8 = v6;
    if (os_log_type_enabled(v7, v6))
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_getErrorValue();
      uint64_t v10 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v7, v8, "Error Fetching Altitude from CMAltimeter: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    (*(void (**)(void, uint64_t))(*a3 + 120))(0, 2);
    swift_errorRelease();
  }
  else if (a1)
  {
    id v12 = a1;
    os_log_type_t v13 = static os_log_type_t.info.getter();
    uint64_t v14 = a3[2];
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      id v16 = v12;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 134217984;
      [v16 altitude];
      uint64_t v21 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_0, v14, v15, "Altimeter retrived value: %f", v17, 0xCu);
      swift_slowDealloc();
    }
    [v12 altitude];
    (*(void (**)(uint64_t, void))(*a3 + 120))(v19, 0);
  }
  else
  {
    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
    (*(void (**)(void, uint64_t))(*a3 + 120))(0, 2);
  }
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  return [a4 stopAbsoluteAltitudeUpdates];
}

void thunk for @escaping @callee_guaranteed (@guaranteed CMAbsoluteAltitudeData?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t AnswerAltitudeFlow.fetchLocationCheck()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(AnswerAltitudeFlow.fetchLocationCheck(), 0, 0);
}

uint64_t AnswerAltitudeFlow.fetchLocationCheck()()
{
  if ([self isSiriLocationServicesPromptingEnabled])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
    type metadata accessor for CommonFlowGuard();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_C0600;
    static CommonFlowGuard.ensuringSiriLocationAccess(needsPreciseLocation:)();
    uint64_t v1 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v1;
    type metadata accessor for GuardFlow();
    swift_retain();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(**(void **)(v0 + 32) + 120))(1, 2);
    static ExecuteResponse.ongoing(requireInput:)();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in AnswerAltitudeFlow.fetchLocationCheck()(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *a1;
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  if (v3 == 1)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v4 = 3;
  }
  else
  {
    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v4 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(v4, 2);
}

uint64_t AnswerAltitudeFlow.fetchLocation()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(AnswerAltitudeFlow.fetchLocation(), 0, 0);
}

uint64_t AnswerAltitudeFlow.fetchLocation()()
{
  uint64_t v4 = v0;
  (*(void (**)(long long *__return_ptr))(**(void **)(v0 + 32) + 136))(v3);
  type metadata accessor for LocationFetchFlow();
  swift_allocObject();
  *(void *)(v0 + 16) = LocationFetchFlow.init(flowHelper:requiredAccess:)(v3, 2);
  lazy protocol witness table accessor for type LocationFetchFlow and conformance LocationFetchFlow(&lazy protocol witness table cache variable for type LocationFetchFlow and conformance LocationFetchFlow, 255, (void (*)(uint64_t))type metadata accessor for LocationFetchFlow);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in AnswerAltitudeFlow.fetchLocation()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)a1;
  switch(*(unsigned char *)(a1 + 8))
  {
    case 1:
    case 2:
    case 3:
      static os_log_type_t.info.getter();
      os_log(_:dso:log:_:_:)();
      (*(void (**)(uint64_t, uint64_t))(*a2 + 120))(3, 2);
      break;
    default:
      id v4 = v2;
      os_log_type_t v5 = static os_log_type_t.default.getter();
      id v6 = a2[2];
      os_log_type_t v7 = v5;
      if (os_log_type_enabled(v6, v5))
      {
        outlined copy of LocationFetchFlow.ExitValue(v2, 0);
        outlined copy of LocationFetchFlow.ExitValue(v2, 0);
        os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v8 = 136315138;
        [v4 verticalAccuracy];
        uint64_t v9 = Double.description.getter();
        uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of LocationFetchFlow.ExitValue(v2, 0);
        outlined consume of LocationFetchFlow.ExitValue(v2, 0);
        _os_log_impl(&dword_0, v6, v7, "altitude accuracy: %s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      objc_msgSend(v4, "verticalAccuracy", v15);
      if (v11 >= 0.0)
      {
        [v4 altitude];
        (*(void (**)(uint64_t, void))(*a2 + 120))(v14, 0);
      }
      else
      {
        lazy protocol witness table accessor for type Errors and conformance Errors();
        uint64_t v12 = swift_allocError();
        *(void *)uint64_t v13 = 0xD00000000000001FLL;
        *(void *)(v13 + 8) = 0x80000000000C8AB0;
        *(unsigned char *)(v13 + 16) = 2;
        (*(void (**)(uint64_t, uint64_t))(*a2 + 120))(v12, 1);
      }
      outlined consume of LocationFetchFlow.ExitValue(v2, 0);
      break;
  }
}

uint64_t AnswerAltitudeFlow.errorDialog()(uint64_t a1)
{
  v2[23] = a1;
  char v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = *(void *)(v4 + 64);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  return _swift_task_switch(AnswerAltitudeFlow.errorDialog(), 0, 0);
}

uint64_t AnswerAltitudeFlow.errorDialog()()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = v1[3];
  v0[5] = &type metadata for Compass;
  v0[6] = &protocol witness table for Compass;
  v0[2] = 0;
  uint64_t v3 = *(void (**)(void))(*v1 + 136);
  uint64_t v4 = (*v1 + 136) & 0xFFFFFFFFFFFFLL | 0x811000000000000;
  v0[30] = v3;
  v0[31] = v4;
  v3();
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 80))(v5, v6);
  v0[32] = v7;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 7));
  double v11 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v2 + 112)
                                                           + **(int **)(*(void *)v2 + 112));
  os_log_type_t v8 = (void *)swift_task_alloc();
  v0[33] = v8;
  *os_log_type_t v8 = v0;
  v8[1] = AnswerAltitudeFlow.errorDialog();
  uint64_t v9 = v0[29];
  return v11(v9, v0 + 2, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = AnswerAltitudeFlow.errorDialog();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = AnswerAltitudeFlow.errorDialog();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v13, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  os_log_type_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  outlined init with take of CATType((long long *)(v0 + 136), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  *(void *)(v0 + 176) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[34];
  uint64_t v2 = v0[24];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120);
  swift_errorRetain();
  v3(v1, 1);
  static ExecuteResponse.complete()();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t AnswerAltitudeFlow.handle(altitude:)(uint64_t a1, double a2)
{
  *(void *)(v3 + 200) = v2;
  *(double *)(v3 + 192) = a2;
  *(void *)(v3 + 184) = a1;
  uint64_t v4 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 208) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 216) = v5;
  *(void *)(v3 + 224) = *(void *)(v5 + 64);
  *(void *)(v3 + 232) = swift_task_alloc();
  *(void *)(v3 + 240) = swift_task_alloc();
  return _swift_task_switch(AnswerAltitudeFlow.handle(altitude:), 0, 0);
}

uint64_t AnswerAltitudeFlow.handle(altitude:)()
{
  uint64_t v1 = (void *)v0[25];
  static os_log_type_t.default.getter();
  v0[31] = v1[2];
  os_log(_:dso:log:_:_:)();
  uint64_t v2 = v1[3];
  uint64_t v3 = AnswerAltitudeFlow.convert(altitudeMeters:)();
  v0[5] = &type metadata for Compass;
  v0[6] = &protocol witness table for Compass;
  v0[2] = v3;
  uint64_t v4 = *(void (**)(void))(*v1 + 136);
  uint64_t v5 = (*v1 + 136) & 0xFFFFFFFFFFFFLL | 0x811000000000000;
  v0[32] = v4;
  v0[33] = v5;
  v4();
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7);
  v0[34] = v8;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 7));
  uint64_t v12 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v2 + 112)
                                                           + **(int **)(*(void *)v2 + 112));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[35] = v9;
  *uint64_t v9 = v0;
  v9[1] = AnswerAltitudeFlow.handle(altitude:);
  uint64_t v10 = v0[30];
  return v12(v10, v0 + 2, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 288) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = AnswerAltitudeFlow.handle(altitude:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = AnswerAltitudeFlow.handle(altitude:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v12 = *(void *)(v0 + 224);
  (*(void (**)(void))(v0 + 256))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v13, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  outlined init with take of CATType((long long *)(v0 + 136), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  *(void *)(v0 + 176) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[36];
  uint64_t v2 = v0[25];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120);
  swift_errorRetain();
  v3(v1, 1);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t AnswerAltitudeFlow.convert(altitudeMeters:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v1 - 8);
  uint64_t v54 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Locale.MeasurementSystem();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v50 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v46 - v7;
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v49 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  uint64_t v52 = *(void *)(v12 - 8);
  uint64_t v53 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v51 = self;
  id v15 = [v51 meters];
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSUnitLength);
  Measurement.init(value:unit:)();
  id v16 = [self standardUserDefaults];
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v16 valueForKey:v17];

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v57 = 0u;
    long long v58 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v57, (uint64_t)v59);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  uint64_t v20 = *(NSObject **)(v0 + 16);
  outlined init with copy of Any?((uint64_t)v59, (uint64_t)&v57);
  if (os_log_type_enabled(v20, v19))
  {
    uint64_t v47 = v10;
    uint64_t v21 = swift_slowAlloc();
    os_log_t v48 = v20;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    long long v46 = v22 + 4;
    outlined init with copy of Any?((uint64_t)&v57, (uint64_t)v55);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    uint64_t v23 = String.init<A>(describing:)();
    v55[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v10 = v47;
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v57, &demangling cache variable for type metadata for Any?);
    _os_log_impl(&dword_0, v48, v19, "%s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v20 = v48;
    swift_slowDealloc();
  }
  else
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v57, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v25 = v53;
  outlined init with copy of Any?((uint64_t)v59, (uint64_t)&v57);
  if (!*((void *)&v58 + 1))
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)&v57, &demangling cache variable for type metadata for Any?);
LABEL_15:
    unint64_t v30 = v49;
    static Locale.current.getter();
    Locale.measurementSystem.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v30, v9);
    char v31 = v50;
    static Locale.MeasurementSystem.us.getter();
    lazy protocol witness table accessor for type LocationFetchFlow and conformance LocationFetchFlow(&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem, 255, (void (*)(uint64_t))&type metadata accessor for Locale.MeasurementSystem);
    LOBYTE(v30) = dispatch thunk of static Equatable.== infix(_:_:)();
    unsigned int v32 = *(void (**)(char *, uint64_t))(v4 + 8);
    v32(v31, v3);
    if (v30)
    {
      v32(v8, v3);
    }
    else
    {
      static Locale.MeasurementSystem.uk.getter();
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v31, v3);
      v32(v8, v3);
      if ((v33 & 1) == 0)
      {
        uint64_t v34 = 0x73726574656DLL;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:_:_:)();
        goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v27 = v55[0];
  unint64_t v26 = v55[1];
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v28))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v57 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    swift_bridgeObjectRetain();
    v55[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v20, v28, "%s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  if (v27 == 0x736568636E49 && v26 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    uint64_t v34 = 1952802150;
    id v36 = [v51 feet];
    Measurement<>.convert(to:)();

    goto LABEL_21;
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v35) {
    goto LABEL_20;
  }
  uint64_t v34 = 0x73726574656DLL;
LABEL_21:
  Measurement.value.getter();
  Measurement.value.setter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v53 = v34;
    uint64_t v39 = (uint8_t *)v38;
    v55[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136315138;
    swift_beginAccess();
    Measurement.value.getter();
    swift_endAccess();
    uint64_t v40 = Double.description.getter();
    *(void *)&long long v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v20, v37, "altitude: %s", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  type metadata accessor for DialogLength.Builder();
  swift_allocObject();
  DialogLength.Builder.init()();
  swift_beginAccess();
  Measurement.value.getter();
  swift_endAccess();
  dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
  swift_release();
  uint64_t v42 = (uint64_t)v54;
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  uint64_t v43 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 0, 1, v43);
  dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
  swift_release();
  outlined destroy of (label: String?, value: Any)?(v42, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v44 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
  swift_release();
  outlined destroy of (label: String?, value: Any)?((uint64_t)v59, &demangling cache variable for type metadata for Any?);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v14, v25);
  return v44;
}

uint64_t AnswerAltitudeFlow.deinit()
{
  swift_release();
  outlined consume of AnswerAltitudeFlow.State(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 48);
  return v0;
}

uint64_t AnswerAltitudeFlow.__deallocating_deinit()
{
  swift_release();
  outlined consume of AnswerAltitudeFlow.State(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 48);

  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance AnswerAltitudeFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 112))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance AnswerAltitudeFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance AnswerAltitudeFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 176) + **(int **)(**(void **)v1 + 176));
  char v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *char v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance AnswerAltitudeFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance AnswerAltitudeFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable();

  return FSMFlow.execute(completion:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute() in conformance AnswerAltitudeFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  void *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance AnswerAltitudeFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AnswerAltitudeFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnswerAltitudeFlow(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t specialized AnswerAltitudeFlow.init(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[3] = a3;
  v11[4] = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_0, a1, a3);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for CATService();
  uint64_t v8 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v8 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v8 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v8 + 16) = 0;
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = 2;
  *(unsigned char *)(a2 + 40) = 2;
  outlined init with copy of DeviceState((uint64_t)v11, a2 + 48);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v11);
  return a2;
}

uint64_t sub_597A0()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t sub_59800()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

id partial apply for closure #1 in AnswerAltitudeFlow.fetchAltitude()(void *a1, uint64_t a2)
{
  return closure #1 in AnswerAltitudeFlow.fetchAltitude()(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in AnswerAltitudeFlow.fetchLocationCheck()(unsigned __int8 *a1)
{
  return closure #1 in AnswerAltitudeFlow.fetchLocationCheck()(a1, v1);
}

void partial apply for closure #1 in AnswerAltitudeFlow.fetchLocation()(uint64_t a1)
{
  closure #1 in AnswerAltitudeFlow.fetchLocation()(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for AnswerAltitudeFlow(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type LocationFetchFlow and conformance LocationFetchFlow(&lazy protocol witness table cache variable for type AnswerAltitudeFlow and conformance AnswerAltitudeFlow, a2, (void (*)(uint64_t))type metadata accessor for AnswerAltitudeFlow);
  uint64_t result = lazy protocol witness table accessor for type LocationFetchFlow and conformance LocationFetchFlow(&lazy protocol witness table cache variable for type AnswerAltitudeFlow and conformance AnswerAltitudeFlow, v3, (void (*)(uint64_t))type metadata accessor for AnswerAltitudeFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for AnswerAltitudeFlow()
{
  return self;
}

uint64_t sub_59920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_59970(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 120);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  outlined copy of AnswerAltitudeFlow.State(*(void *)a1, v4);
  return v3(v2, v4);
}

uint64_t sub_599E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136))();
}

uint64_t sub_59A24(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 144))(v4);
}

uint64_t initializeBufferWithCopyOfBuffer for AnswerAltitudeFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of AnswerAltitudeFlow.State(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for AnswerAltitudeFlow.State(uint64_t a1)
{
  return outlined consume of AnswerAltitudeFlow.State(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for AnswerAltitudeFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of AnswerAltitudeFlow.State(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of AnswerAltitudeFlow.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for AnswerAltitudeFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of AnswerAltitudeFlow.State(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnswerAltitudeFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnswerAltitudeFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AnswerAltitudeFlow.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for AnswerAltitudeFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnswerAltitudeFlow.State()
{
  return &type metadata for AnswerAltitudeFlow.State;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type LocationFetchFlow and conformance LocationFetchFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void outlined consume of LocationFetchFlow.ExitValue(id a1, unsigned __int8 a2)
{
  if (a2 == 2)
  {
    swift_errorRelease();
  }
  else if (a2 <= 1u)
  {
  }
}

id outlined copy of LocationFetchFlow.ExitValue(id result, unsigned __int8 a2)
{
  if (a2 == 2) {
    return (id)swift_errorRetain();
  }
  if (a2 <= 1u) {
    return result;
  }
  return result;
}

unint64_t ContactResolutionFlowError.errorDescription.getter()
{
  unint64_t result = 0xD000000000000016;
  switch(0x80000000000C8C80)
  {
    case 0uLL:
      unint64_t result = 0x696C616974696E69;
      break;
    case 1uLL:
      unint64_t result = 0x61707563634F6F6ELL;
      break;
    case 3uLL:
      unint64_t result = 0x6F636552656E6F6ELL;
      break;
    case 4uLL:
      unint64_t result = 1701736302;
      break;
    case 5uLL:
    case 6uLL:
      return result;
    case 7uLL:
      unint64_t result = 0xD000000000000015;
      break;
    case 8uLL:
      unint64_t result = 0xD000000000000017;
      break;
    case 9uLL:
      unint64_t result = 0xD000000000000014;
      break;
    case 0xAuLL:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      unint64_t result = 0x6361746E6F436F6ELL;
      break;
  }
  return result;
}

uint64_t ContactResolutionFlow.exitValue.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>(v1, *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), (uint64_t (*)(uint64_t, void))outlined copy of ContactResolutionOutput, (uint64_t (*)(void))outlined copy of ContactResolutionFlowError);
  return v1;
}

id outlined copy of ContactResolutionOutput(void *a1, char a2)
{
  if (a2) {
    return (id)swift_bridgeObjectRetain();
  }
  else {
    return a1;
  }
}

uint64_t outlined copy of ContactResolutionFlowError(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t ContactResolutionFlow.exitValue.setter(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  char v9 = *(unsigned char *)(v3 + 40);
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  *(unsigned char *)(v3 + 40) = a3 & 1;
  return outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>(v7, v8, v9, (uint64_t (*)(uint64_t, void))outlined consume of ContactResolutionOutput, (uint64_t (*)(void))outlined consume of ContactResolutionFlowError);
}

uint64_t outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>(uint64_t a1, char a2, char a3, uint64_t (*a4)(uint64_t, void), uint64_t (*a5)(void))
{
  if (a3) {
    return a5();
  }
  else {
    return a4(a1, a2 & 1);
  }
}

void outlined consume of ContactResolutionOutput(void *a1, char a2)
{
  if (a2) {
    swift_bridgeObjectRelease();
  }
  else {
}
  }

uint64_t outlined consume of ContactResolutionFlowError(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t key path setter for ContactResolutionFlow.flowState : <A, B>ContactResolutionFlow<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = *(_OWORD *)(a4 + a3 - 16);
  v12[0] = *(_OWORD *)(a4 + a3 - 32);
  v12[1] = v6;
  uint64_t v7 = type metadata accessor for ContactResolutionFlow.State();
  __chkstk_darwin(v7);
  char v9 = (char *)v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)v12 - v8, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 216))(v9);
}

uint64_t ContactResolutionFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 128);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for ContactResolutionFlow.State();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ContactResolutionFlow.State()
{
  return swift_getGenericMetadata();
}

uint64_t ContactResolutionFlow.flowState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 128);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for ContactResolutionFlow.State();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ContactResolutionFlow.flowState.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ContactResolutionFlow.disambiguationStrategy.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ContactResolutionFlow.confirmationStrategy.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ContactResolutionFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + *(void *)(*(void *)v1 + 152), a1);
}

uint64_t ContactResolutionFlow.handleResolver.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Mirror.DisplayStyle?(v1 + *(void *)(*(void *)v1 + 160), a1, &demangling cache variable for type metadata for HandleFilterProtocolAsync?);
}

uint64_t ContactResolutionFlow.contactResolverConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 176);
  uint64_t v4 = type metadata accessor for ContactResolverConfig();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ContactResolutionFlow.__allocating_init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  ContactResolutionFlow.init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t *ContactResolutionFlow.init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  unsigned int v32 = a5;
  uint64_t v33 = a6;
  uint64_t v27 = a4;
  uint64_t v28 = a2;
  uint64_t v31 = a1;
  uint64_t v8 = *v6;
  uint64_t v29 = a3;
  uint64_t v30 = v8;
  uint64_t v9 = type metadata accessor for RecommenderType();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SearchSuggestedContacts();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ContactResolverDomain();
  __chkstk_darwin(v17 - 8);
  uint64_t v18 = type metadata accessor for Locale();
  __chkstk_darwin(v18 - 8);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v19 = OS_os_log.init(subsystem:category:)();
  v6[3] = 0;
  v6[4] = 0;
  _OWORD v6[2] = v19;
  *((unsigned char *)v6 + 40) = 1;
  static Locale.current.getter();
  static ContactResolverDomain.all.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for SearchSuggestedContacts.ifOnlyMatchIsSuggested(_:), v13);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for RecommenderType.mlRecommender(_:), v9);
  ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)();
  uint64_t v20 = (uint64_t)v7 + *(void *)(*v7 + 168);
  uint64_t v21 = type metadata accessor for SiriKitContactResolver();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v20, v27, v21);
  *(uint64_t *)((char *)v7 + *(void *)(*v7 + 136)) = v28;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 + 144)) = v29;
  uint64_t v22 = (uint64_t)v7 + *(void *)(*v7 + 128);
  uint64_t v23 = type metadata accessor for OccupantIntentNode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v22, v31, v23);
  long long v24 = *(_OWORD *)(v30 + 96);
  long long v34 = *(_OWORD *)(v30 + 80);
  long long v35 = v24;
  type metadata accessor for ContactResolutionFlow.State();
  swift_storeEnumTagMultiPayload();
  outlined init with take of CATType(v32, (uint64_t)v7 + *(void *)(*v7 + 152));
  outlined init with take of HandleFilterProtocolAsync?(v33, (uint64_t)v7 + *(void *)(*v7 + 160), &demangling cache variable for type metadata for HandleFilterProtocolAsync?);
  return v7;
}

uint64_t ContactResolutionFlow.onInput(input:)()
{
  uint64_t v1 = type metadata accessor for Parse();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (id *)((char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  int v5 = (*(uint64_t (**)(id *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == enum case for Parse.NLv3IntentOnly(_:))
  {
    long long v6 = *(NSObject **)(v0 + 16);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      uint64_t v9 = "ContactResolutionFlow onInput returns true.";
      uint64_t v10 = v6;
      os_log_type_t v11 = v7;
LABEL_10:
      _os_log_impl(&dword_0, v10, v11, v9, v8, 2u);
      swift_slowDealloc();
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  int v12 = v5;
  if (v5 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v2 + 96))(v4, v1);

    uint64_t v13 = *(NSObject **)(v0 + 16);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "ContactResolutionFlow onInput returns true for POMMES.", v15, 2u);
      swift_slowDealloc();
    }
    return 1;
  }
  int v16 = enum case for Parse.uso(_:);
  uint64_t v17 = *(NSObject **)(v0 + 16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  if (v12 == v16)
  {
    if (v19)
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      os_log_type_t v11 = v18;
      uint64_t v9 = "ContactResolutionFlow onInput returns true for USO parse.";
      uint64_t v10 = v17;
      goto LABEL_10;
    }
LABEL_11:
    (*(void (**)(id *, uint64_t))(v2 + 8))(v4, v1);
    return 1;
  }
  if (v19)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_0, v17, v18, "SiriGeo currently doesn't support parse type.", v21, 2u);
    swift_slowDealloc();
  }
  (*(void (**)(id *, uint64_t))(v2 + 8))(v4, v1);
  return 0;
}

uint64_t ContactResolutionFlow.executeState()(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = (void *)*v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ContactQuery();
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SiriKitContactResolver();
  v2[23] = v5;
  char v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OccupantIntentNode();
  v2[27] = v6;
  v2[28] = *(void *)(v6 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  uint64_t v7 = v3[10];
  v2[33] = v7;
  uint64_t v8 = v3[11];
  v2[34] = v8;
  uint64_t v9 = v3[12];
  v2[35] = v9;
  uint64_t v10 = v3[13];
  v2[36] = v10;
  v2[2] = v7;
  v2[3] = v8;
  v2[4] = v9;
  void v2[5] = v10;
  v2[37] = type metadata accessor for ContactResolutionFlow.State();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  return _swift_task_switch(ContactResolutionFlow.executeState(), 0, 0);
}

uint64_t ContactResolutionFlow.executeState()()
{
  void (*v57)(void **__return_ptr, uint64_t, uint64_t);
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(void *, void, void);
  id v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint8_t *v75;
  id v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  id v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  void *v100;
  id v101;
  uint64_t v102;
  id v103;
  void *v104;
  id v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  os_log_type_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  id v120;
  os_log_type_t v121;
  NSObject *v122;
  os_log_type_t v123;
  id v124;
  uint8_t *v125;
  id v126;
  id v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(unint64_t *);
  void *v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(unint64_t, void, void);
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(void **__return_ptr, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(void);
  uint64_t v170;
  uint64_t v171;
  void (*v172)(char *, uint64_t, uint64_t);
  uint64_t *v173;
  unint64_t v174;
  os_log_t log;
  NSObject *loga;
  os_log_t logb;
  os_log_t logc;
  unint64_t *v179;
  NSObject *v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  void *v184;
  id v185;
  void *v186[6];
  unint64_t v187;
  uint64_t v188;

  unint64_t v187 = v0;
  unint64_t v1 = v0 + 48;
  uint64_t v173 = (uint64_t *)(v0 + 64);
  log = (os_log_t)(v0 + 56);
  unint64_t v2 = v0 + 80;
  LOBYTE(v3) = v0 + 88;
  uint64_t v4 = (v0 + 96);
  unint64_t v179 = (unint64_t *)(v0 + 104);
  uint64_t v184 = (void *)(v0 + 72);
  unint64_t v5 = v0 + 112;
  uint64_t v6 = (v0 + 120);
  uint64_t v7 = *(uint8_t **)(v0 + 328);
  (*(void (**)(void))(**(void **)(v0 + 136) + 208))();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v26 = *(os_log_t **)(v0 + 328);
      unint64_t v3 = *(void *)(v0 + 192);
      uint64_t v27 = *(void *)(v0 + 200);
      uint64_t v29 = *(void *)(v0 + 176);
      uint64_t v28 = *(void *)(v0 + 184);
      uint64_t v31 = *(void *)(v0 + 160);
      uint64_t v30 = *(void *)(v0 + 168);
      unsigned int v32 = (void *)v0;
      uint64_t v33 = *(void *)(v0 + 136);
      logb = *v26;
      INPerson.toContactQueryGeo()();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v27, v33 + *(void *)(*(void *)v33 + 168), v28);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
      unint64_t v34 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_C0600;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v30 + 16))(v35 + v34, v29, v31);
      uint64_t v36 = SiriKitContactResolver.resolve(queries:config:)();
      uint64_t v7 = (uint8_t *)v32[23];
      unint64_t v2 = v36;
      uint64_t v184 = v32;
      uint64_t v72 = v32[17];
      (*(void (**)(void, uint8_t *))(v32[24] + 8))(v32[25], v7);
      swift_bridgeObjectRelease();
      LOBYTE(v3) = static os_log_type_t.default.getter();
      uint64_t v6 = *(NSObject **)(v72 + 16);
      uint64_t v43 = v2 >> 62;
      if (!os_log_type_enabled(v6, (os_log_type_t)v3))
      {
        uint64_t v74 = v32;
        unint64_t v5 = (unint64_t)logb;
        goto LABEL_47;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134217984;
      unint64_t v5 = (unint64_t)logb;
      if (v43) {
        goto LABEL_131;
      }
      uint64_t v73 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
      goto LABEL_35;
    case 2u:
      os_log_type_t v37 = (void *)v0;
      unint64_t v0 = *(void *)(v0 + 328);
      uint64_t v38 = v37;
      uint64_t v39 = v37[19];
      uint64_t v4 = *(NSObject **)v0;
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INPerson, OccupantIntentNode?));
      outlined init with take of HandleFilterProtocolAsync?(v0 + *(int *)(v40 + 48), v39, &demangling cache variable for type metadata for OccupantIntentNode?);
      id v41 = [v4 scoredAlternatives];
      if (!v41) {
        goto LABEL_103;
      }
      uint64_t v42 = v41;
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INScoredPerson);
      unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v7 = (uint8_t *)(v5 >> 62);
      if (v5 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v43) {
          goto LABEL_8;
        }
LABEL_102:
        swift_bridgeObjectRelease();
LABEL_103:
        os_log_type_t v147 = v38[27];
        uint64_t v148 = v38[28];
        unint64_t v149 = v38[18];
        outlined init with copy of Mirror.DisplayStyle?(v38[19], v149, &demangling cache variable for type metadata for OccupantIntentNode?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v149, 1, v147) == 1)
        {
          outlined destroy of (label: String?, value: Any)?(v38[18], &demangling cache variable for type metadata for OccupantIntentNode?);
        }
        else
        {
          (*(void (**)(void, void, void))(v38[28] + 32))(v38[29], v38[18], v38[27]);
          id v150 = OccupantIntentNode.relationship.getter();
          unint64_t v152 = v38[28];
          unint64_t v153 = v38[29];
          id v154 = v38[27];
          if (v151) {
            unint64_t v155 = v151;
          }
          else {
            unint64_t v155 = 3;
          }
          uint64_t v156 = v38[17];
          if (v151) {
            uint64_t v157 = v150;
          }
          else {
            uint64_t v157 = 0;
          }
          static os_log_type_t.default.getter();
          os_log(_:dso:log:_:_:)();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v156 + 192))(v157, v155, 1);
          (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v153, v154);
        }
        unint64_t v0 = (unint64_t)v38;
        uint64_t v158 = v38[38];
        uint64_t v132 = v38[19];
        uint64_t v159 = v38[17];
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t))(*(void *)v159 + 216))(v158);
        static ExecuteResponse.complete()();

        goto LABEL_113;
      }
      uint64_t v43 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
      if (!v43) {
        goto LABEL_102;
      }
LABEL_8:
      uint64_t v180 = v4;
      if (v43 >= 1)
      {
        unint64_t v0 = v5 & 0xC000000000000001;
        swift_bridgeObjectRetain();
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        long long v46 = (uint8_t *)"scoredAlternative %s";
        do
        {
          if (v0) {
            id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v47 = *(id *)(v5 + 8 * v45 + 32);
          }
          os_log_t v48 = v47;
          uint64_t v49 = v38[17];
          ++v45;
          v186[0] = v47;
          closure #2 in ContactResolutionFlow.executeState()(v186, v49, "scoredAlternative %s");
        }
        while (v43 != v45);
        swift_bridgeObjectRelease();
        if (v0)
        {
          uint64_t v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v68 = (unint64_t)v180;
        }
        else
        {
          uint64_t v68 = (unint64_t)v180;
          if (!*(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)))
          {
            __break(1u);
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
          uint64_t v67 = *(id *)(v5 + 32);
        }
        uint64_t v93 = (char *)[v67 recommendation];

        if (!v93)
        {
          if (v7)
          {
            swift_bridgeObjectRetain();
            uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v44 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
          }
          unint64_t v1 = (unint64_t)_swiftEmptyArrayStorage;
          if (v44)
          {
            v186[0] = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)();
            if (v44 < 0)
            {
LABEL_135:
              __break(1u);
              goto LABEL_136;
            }
            uint64_t v102 = 0;
            do
            {
              if (v0) {
                unint64_t v103 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                unint64_t v103 = *(id *)(v5 + 8 * v102 + 32);
              }
              uint64_t v104 = v103;
              ++v102;
              uint64_t v105 = [v103 person];

              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            while (v44 != v102);
            unint64_t v1 = (unint64_t)v186[0];
          }
          id v106 = specialized ContactResolutionFlow.handleDisambiguationCase(_:)(v5);
          swift_bridgeObjectRelease();
          unint64_t v0 = (unint64_t)v38;
          if ((v106 & 1) == 0)
          {
            uint64_t v109 = v38[17];
            id v110 = static os_log_type_t.default.getter();
            uint64_t v111 = *(NSObject **)(v109 + 16);
            uint64_t v112 = v110;
            if (os_log_type_enabled(v111, v110))
            {
              swift_bridgeObjectRetain();
              uint64_t v113 = (uint8_t *)swift_slowAlloc();
              v186[0] = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v113 = 136315138;
              unint64_t v0 = (unint64_t)v38;
              type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
              swift_bridgeObjectRetain();
              char v114 = Array.description.getter();
              uint64_t v116 = v115;
              swift_bridgeObjectRelease();
              uint64_t v117 = v114;
              uint64_t v68 = (unint64_t)v180;
              *uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v116, (uint64_t *)v186);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_0, v111, v112, "Confident %s", v113, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            long long v142 = *(void *)(v0 + 304);
            uint64_t v143 = *(void *)(v0 + 152);
            uint64_t v144 = *(void *)(v0 + 136);
            char v145 = *(void (**)(unint64_t, void, void))(*(void *)v144 + 192);
            uint64_t v146 = (id)v68;
            v145(v68, 0, 0);
            unint64_t v0 = (unint64_t)v38;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t))(*(void *)v144 + 216))(v142);
            static ExecuteResponse.complete()();

            BOOL v141 = v143;
            goto LABEL_114;
          }
          uint64_t v107 = v38[38];
          int v96 = v38[19];
          unint64_t v108 = v38[17];
          *(void *)uint64_t v107 = v1;
          *(unsigned char *)(v107 + 8) = 1;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t))(*(void *)v108 + 216))(v107);
          static ExecuteResponse.ongoing(requireInput:)();
          goto LABEL_85;
        }
        if (v93 != (unsigned char *)&dword_0 + 1)
        {
          if (v93 == (unsigned char *)&dword_0 + 2)
          {
            if (v7)
            {
              swift_bridgeObjectRetain();
              uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v44 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
            }
            if (!v44)
            {
              swift_bridgeObjectRelease();
              uint64_t v68 = (unint64_t)_swiftEmptyArrayStorage;
              goto LABEL_93;
            }
            v186[0] = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)();
            if ((v44 & 0x8000000000000000) == 0)
            {
              uint64_t v98 = 0;
              do
              {
                if (v0) {
                  uint64_t v99 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  uint64_t v99 = *(id *)(v5 + 8 * v98 + 32);
                }
                uint64_t v100 = v99;
                ++v98;
                uint64_t v101 = [v99 person];

                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
              }
              while (v44 != v98);
              uint64_t v68 = (unint64_t)v186[0];
              swift_bridgeObjectRelease();
LABEL_93:
              unint64_t v0 = (unint64_t)v38;
              uint64_t v137 = v38[17];
              LOBYTE(v45) = static os_log_type_t.default.getter();
              uint64_t v44 = *(void *)(v137 + 16);
              if (!os_log_type_enabled((os_log_t)v44, (os_log_type_t)v45))
              {
LABEL_97:
                unint64_t v139 = *(void *)(v0 + 304);
                int v96 = *(void *)(v0 + 152);
                os_log_type_t v140 = *(void *)(v0 + 136);
                *(void *)unint64_t v139 = v68;
                *(unsigned char *)(v139 + 8) = 0;
                swift_storeEnumTagMultiPayload();
                (*(void (**)(uint64_t))(*(void *)v140 + 216))(v139);
                static ExecuteResponse.ongoing(requireInput:)();

                goto LABEL_98;
              }
              swift_bridgeObjectRetain_n();
              long long v46 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)long long v46 = 134217984;
              if (!(v68 >> 62))
              {
                unint64_t v138 = *(void *)((char *)&dword_10 + (v68 & 0xFFFFFFFFFFFFFF8));
LABEL_96:
                swift_bridgeObjectRelease();
                *(void *)unint64_t v1 = v138;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_0, (os_log_t)v44, (os_log_type_t)v45, "needs disambigaution %ld", v46, 0xCu);
                swift_slowDealloc();
                goto LABEL_97;
              }
LABEL_136:
              swift_bridgeObjectRetain();
              unint64_t v138 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_96;
            }
            goto LABEL_134;
          }
          unint64_t v0 = (unint64_t)v38;
          uint64_t v95 = v38[38];
          int v96 = v38[19];
          uint64_t v97 = v38[17];
          swift_bridgeObjectRelease();
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t))(*(void *)v97 + 216))(v95);
          (*(void (**)(void, uint64_t, uint64_t))(*(void *)v97 + 192))(0, 4, 1);
          static ExecuteResponse.complete()();
LABEL_85:

LABEL_98:
          BOOL v141 = v96;
LABEL_114:
          outlined destroy of (label: String?, value: Any)?(v141, &demangling cache variable for type metadata for OccupantIntentNode?);
          goto LABEL_118;
        }
        if (v0) {
          os_log_type_t v94 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          os_log_type_t v94 = *(id *)(v5 + 32);
        }
        char v118 = v94;
        os_log_type_t v119 = v38[17];
        swift_bridgeObjectRelease();
        unint64_t v120 = [v118 person];

        char v121 = static os_log_type_t.default.getter();
        uint64_t v122 = *(NSObject **)(v119 + 16);
        id v123 = v121;
        if (os_log_type_enabled(v122, v121))
        {
          uint64_t v185 = v120;
          uint64_t v124 = v120;
          unint64_t v125 = (uint8_t *)swift_slowAlloc();
          v186[0] = (void *)swift_slowAlloc();
          *(_DWORD *)unint64_t v125 = 136315138;
          unint64_t v126 = v124;
          uint64_t v127 = [v126 description];
          id v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          Class v130 = v129;

          unint64_t v120 = v185;
          log->Class isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v130, (uint64_t *)v186);
          uint64_t v68 = (unint64_t)v180;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_0, v122, v123, "needs confirmation %s", v125, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        id v131 = (unint64_t *)v38[38];
        uint64_t v132 = v38[19];
        os_log_type_t v133 = v38[17];
        *id v131 = v68;
        v131[1] = (unint64_t)v120;
        swift_storeEnumTagMultiPayload();
        id v134 = *(void (**)(unint64_t *))(*(void *)v133 + 216);
        uint64_t v135 = (id)v68;
        char v136 = v120;
        v134(v131);
        unint64_t v0 = (unint64_t)v38;
        static ExecuteResponse.ongoing(requireInput:)();

LABEL_113:
        BOOL v141 = v132;
        goto LABEL_114;
      }
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      swift_bridgeObjectRetain();
      uint64_t v170 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v170)
      {
LABEL_124:
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_125;
      }
LABEL_42:
      if ((v1 & 0xC000000000000001) != 0)
      {
LABEL_125:
        uint64_t v75 = v7;
        unint64_t v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_45;
      }
      if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
      {
        uint64_t v75 = v7;
        unint64_t v76 = *(id *)(v1 + 32);
LABEL_45:
        uint64_t v77 = v76;
        os_log_t v78 = *(void **)(v0 + 320);
        uint64_t v79 = *(void *)(v0 + 256);
        uint64_t v80 = v184[28];
        uint64_t v81 = v184[27];
        id v82 = v184[17];
        swift_bridgeObjectRelease();
        uint64_t v83 = (char *)v78
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INPerson, OccupantIntentNode?))
                     + 48);
        char *v78 = v77;
        v172(v83, v79, v81);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v83, 0, 1, v81);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *))(*(void *)v82 + 216))(v78);
        static ExecuteResponse.ongoing(requireInput:)();
        unint64_t v0 = (unint64_t)v184;
        ((void (*)(uint64_t, uint64_t))v75)(v79, v81);
        goto LABEL_118;
      }
      __break(1u);
      while (1)
      {
        __break(1u);
LABEL_131:
        swift_bridgeObjectRetain();
        uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_35:
        uint64_t v74 = v184;
        swift_bridgeObjectRelease();
        v4->Class isa = (Class)v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v6, (os_log_type_t)v3, "number of persons resolved %ld", v7, 0xCu);
        swift_slowDealloc();
LABEL_47:
        if (v43) {
          break;
        }
        if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8))) {
          goto LABEL_127;
        }
LABEL_49:
        if ((v2 & 0xC000000000000001) != 0) {
          goto LABEL_128;
        }
        if (*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8)))
        {
          uint64_t v84 = *(id *)(v2 + 32);
          goto LABEL_52;
        }
      }
      swift_bridgeObjectRetain();
      id v171 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v171) {
        goto LABEL_49;
      }
LABEL_127:
      swift_bridgeObjectRelease();
      __break(1u);
LABEL_128:
      uint64_t v84 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_52:
      uint64_t v85 = v84;
      uint64_t v86 = (void *)v74[39];
      uint64_t v87 = v74[27];
      uint64_t v88 = v74[28];
      long long v89 = v74[22];
      uint64_t v90 = v184[21];
      logc = (os_log_t)v184[20];
      uint64_t v183 = v89;
      uint64_t v91 = v184[17];
      swift_bridgeObjectRelease();
      uint64_t v92 = (char *)v86
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INPerson, OccupantIntentNode?))
                   + 48);
      *uint64_t v86 = v85;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v92, 1, 1, v87);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *))(*(void *)v91 + 216))(v86);
      static ExecuteResponse.ongoing(requireInput:)();

      (*(void (**)(uint64_t, os_log_t))(v90 + 8))(v183, logc);
      unint64_t v0 = (unint64_t)v184;
LABEL_118:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      Class v168 = *(uint64_t (**)(void))(v0 + 8);
      return v168();
    case 3u:
      uint64_t v50 = *(void *)(v0 + 328);
      id v51 = *(uint64_t **)(v0 + 136);
      uint64_t v52 = *(void **)(v50 + 8);

      uint64_t v53 = *v51;
      if (*(uint64_t *)((char *)v51 + *(void *)(*v51 + 144)))
      {
        unint64_t v181 = *(void *)(v0 + 136);
        type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INPerson);
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        type metadata accessor for PromptForConfirmationFlowAsync();
        *(void *)(v0 + 80) = v52;
        uint64_t v54 = (void *)(v181 + *(void *)(v53 + 152));
        uint64_t v55 = v54[3];
        uint64_t v56 = v54[4];
        __swift_project_boxed_opaque_existential_1(v54, v55);
        long long v57 = *(void (**)(void **__return_ptr, uint64_t, uint64_t))(v56 + 104);
        swift_unknownObjectRetain_n();
        long long v58 = v52;
        v57(v186, v55, v56);
        *(void *)(v0 + 88) = PromptForConfirmationFlowAsync.__allocating_init<A>(itemToConfirm:strategy:outputPublisher:)();
        long long v59 = swift_allocObject();
        *(void *)(v59 + 16) = v181;
        *(void *)(v59 + 24) = v58;
        uint64_t v60 = v58;
        swift_retain();
        swift_getWitnessTable();
        static ExecuteResponse.ongoing<A>(next:childCompletion:)();
        swift_release();
        swift_unknownObjectRelease();

        goto LABEL_117;
      }
      unint64_t v69 = v0;
      os_log_type_t v70 = *(void (**)(void *, void, void))(v53 + 192);
      uint64_t v71 = v52;
      v70(v52, 0, 0);
      unint64_t v0 = v69;
      static ExecuteResponse.complete()();

      goto LABEL_118;
    case 4u:
      uint64_t v61 = *(void *)(v0 + 328);
      uint64_t v62 = *(void *)(v0 + 136);
      unint64_t v3 = *(void *)v61;
      if (!*(void *)(v62 + *(void *)(*(void *)v62 + 136)))
      {
        (*(void (**)(unint64_t, uint64_t, void))(*(void *)v62 + 192))(v3, 1, 0);
        static ExecuteResponse.complete()();
        goto LABEL_118;
      }
      unint64_t v182 = *(unsigned char *)(v61 + 8);
      if (v3 >> 62)
      {
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
        if (!v43) {
          goto LABEL_116;
        }
      }
      else
      {
        uint64_t v43 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8));
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (!v43) {
          goto LABEL_116;
        }
      }
      if (v43 < 1) {
        goto LABEL_122;
      }
      uint64_t v63 = 0;
      do
      {
        if ((v3 & 0xC000000000000001) != 0) {
          uint64_t v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v64 = *(id *)(v3 + 8 * v63 + 32);
        }
        uint64_t v65 = v64;
        uint64_t v66 = *(void *)(v0 + 136);
        ++v63;
        v186[0] = v64;
        closure #2 in ContactResolutionFlow.executeState()(v186, v66, "disambiguation candidate %s");
      }
      while (v43 != v63);
LABEL_116:
      unint64_t v160 = *(void *)(v0 + 136);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<INPerson, INPerson>);
      id v161 = (void *)(v160 + *(void *)(*(void *)v160 + 152));
      uint64_t v162 = v0;
      uint64_t v164 = v161[3];
      uint64_t v163 = v161[4];
      __swift_project_boxed_opaque_existential_1(v161, v164);
      uint64_t v165 = *(void (**)(void **__return_ptr, uint64_t, uint64_t))(v163 + 104);
      swift_unknownObjectRetain();
      uint64_t v166 = v163;
      unint64_t v0 = v162;
      v165(v186, v164, v166);
      *(void *)(v162 + 72) = PromptForDisambiguationFlowAsync.__allocating_init<A>(items:strategy:outputPublisher:)();
      id v167 = swift_allocObject();
      *(void *)(v167 + 16) = v160;
      *(unsigned char *)(v167 + 24) = v182;
      lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>, &demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<INPerson, INPerson>);
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      swift_unknownObjectRelease();
LABEL_117:
      swift_release();
      goto LABEL_118;
    case 5u:
      static ExecuteResponse.complete()();
      goto LABEL_118;
    default:
      uint64_t v8 = *(void *)(v0 + 248);
      uint64_t v9 = *(void *)(v0 + 256);
      unint64_t v2 = *(void *)(v0 + 216);
      uint64_t v10 = *(void *)(v0 + 224);
      uint64_t v184 = (void *)v0;
      uint64_t v11 = *(void *)(v0 + 136);
      (*(void (**)(uint64_t, void, unint64_t))(v10 + 32))(v9, *(void *)(v0 + 328), v2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
      uint64_t v12 = swift_allocObject();
      LOBYTE(v3) = v12;
      *(_OWORD *)(v12 + 16) = xmmword_C0600;
      OccupantIntentNode.asContactQuery.getter();
      uint64_t v13 = *(NSObject **)(v11 + 16);
      os_log_type_t v14 = *(void (**)(uint64_t, uint64_t, unint64_t))(v10 + 16);
      v14(v8, v9, v2);
      swift_bridgeObjectRetain_n();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      loga = v13;
      BOOL v16 = os_log_type_enabled(v13, v15);
      uint64_t v17 = *(void *)(v0 + 248);
      unint64_t v172 = (void (*)(char *, uint64_t, uint64_t))v14;
      if (v16)
      {
        uint64_t v18 = *(void *)(v0 + 240);
        uint64_t v19 = *(void *)(v0 + 224);
        unint64_t v20 = v184[27];
        unint64_t v174 = v5;
        uint64_t v21 = swift_slowAlloc();
        v186[0] = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315394;
        v14(v18, v17, v20);
        uint64_t v22 = String.init<A>(describing:)();
        v184[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)v186);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v7 = *(uint8_t **)(v19 + 8);
        ((void (*)(uint64_t, unint64_t))v7)(v17, v20);
        unint64_t v0 = (unint64_t)v184;
        *(_WORD *)(v21 + 12) = 2080;
        swift_bridgeObjectRetain();
        unint64_t v2 = Array.description.getter();
        unint64_t v25 = v24;
        swift_bridgeObjectRelease();
        v184[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v25, (uint64_t *)v186);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v4 = loga;
        _os_log_impl(&dword_0, loga, v15, "occupant node %s contactQuery %s", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v5 = v174;
        swift_slowDealloc();
      }
      else
      {
        uint64_t v7 = *(uint8_t **)(*(void *)(v0 + 224) + 8);
        ((void (*)(uint64_t, void))v7)(v17, *(void *)(v0 + 216));
        swift_bridgeObjectRelease_n();
        uint64_t v4 = loga;
      }
      (*(void (**)(void, void, void))(*(void *)(v0 + 192) + 16))(*(void *)(v0 + 208), *(void *)(v0 + 136) + *(void *)(**(void **)(v0 + 136) + 168), *(void *)(v0 + 184));
      unint64_t v1 = SiriKitContactResolver.resolve(queries:config:)();
      (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 208), *(void *)(v0 + 184));
      swift_bridgeObjectRelease();
      uint64_t v6 = static os_log_type_t.default.getter();
      uint64_t v43 = v1 >> 62;
      if (os_log_type_enabled(v4, (os_log_type_t)v6))
      {
        swift_bridgeObjectRetain_n();
        unint64_t v2 = swift_slowAlloc();
        *(_DWORD *)unint64_t v2 = 134217984;
        if (v43)
        {
          swift_bridgeObjectRetain();
          unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v3 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
        }
        swift_bridgeObjectRelease();
        *unint64_t v179 = v3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v4, (os_log_type_t)v6, "number of persons resolved %ld", (uint8_t *)v2, 0xCu);
        swift_slowDealloc();
      }
      if (v43) {
        goto LABEL_123;
      }
      if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8))) {
        goto LABEL_42;
      }
      goto LABEL_124;
  }
}

uint64_t closure #1 in ContactResolutionFlow.executeState()(uint64_t a1, void *a2, void *a3)
{
  id v55 = a3;
  unint64_t v5 = (void *)*a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  __chkstk_darwin(v6 - 8);
  uint64_t v61 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for ConfirmationResponse();
  uint64_t v8 = *(void *)(v70 - 8);
  uint64_t v9 = __chkstk_darwin(v70);
  uint64_t v56 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v57 = (char *)&v54 - v11;
  uint64_t v12 = v5[13];
  uint64_t v13 = v5[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v62 = (char *)&v54 - v15;
  uint64_t v16 = v5[12];
  v73[0] = v5[10];
  v73[1] = v13;
  uint64_t v59 = v13;
  uint64_t v60 = v12;
  v73[2] = v16;
  v73[3] = v12;
  uint64_t v68 = type metadata accessor for ContactResolutionFlow.State();
  __chkstk_darwin(v68);
  uint64_t v67 = (char *)&v54 - v17;
  uint64_t v64 = AssociatedTypeWitness;
  uint64_t v18 = type metadata accessor for PromptResult();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  unint64_t v24 = (char *)&v54 - v23;
  os_log_type_t v25 = static os_log_type_t.info.getter();
  uint64_t v26 = a2[2];
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v69 = a1;
  uint64_t v66 = v27;
  v27(v24, a1, v18);
  os_log_t v58 = v26;
  BOOL v28 = os_log_type_enabled(v26, v25);
  uint64_t v65 = v8;
  uint64_t v71 = v22;
  if (v28)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    v73[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v54 = v29 + 4;
    swift_getWitnessTable();
    uint64_t v30 = specialized String.init<A>(describing:)();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unsigned int v32 = *(void (**)(char *, uint64_t))(v19 + 8);
    v32(v24, v18);
    _os_log_impl(&dword_0, v58, v25, "PromptForConfirmation childCompletion %s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unsigned int v32 = *(void (**)(char *, uint64_t))(v19 + 8);
    v32(v24, v18);
  }
  uint64_t v33 = v69;
  uint64_t v35 = v66;
  unint64_t v34 = v67;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *))(*a2 + 216))(v34);
  uint64_t v36 = v71;
  v35(v71, v33, v18);
  int v37 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v36, v18);
  if (v37 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v36, v18);
    uint64_t v39 = v62;
    uint64_t v38 = v63;
    uint64_t v40 = v64;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v36, v64);
    swift_getAssociatedConformanceWitness();
    uint64_t v41 = (uint64_t)v61;
    dispatch thunk of ConfirmationResponseProviding.confirmationResponse.getter();
    uint64_t v42 = v65;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v41, 1, v70) == 1)
    {
      outlined destroy of (label: String?, value: Any)?(v41, &demangling cache variable for type metadata for ConfirmationResponse?);
      (*(void (**)(void, uint64_t, uint64_t))(*a2 + 192))(0, 5, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    }
    uint64_t v45 = v57;
    uint64_t v46 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v57, v41, v70);
    id v47 = v56;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v56, v45, v46);
    if ((*(unsigned int (**)(char *, uint64_t))(v42 + 88))(v47, v46) == enum case for ConfirmationResponse.confirmed(_:))
    {
      os_log_t v48 = *(void (**)(id, void, void))(*a2 + 192);
      id v49 = v55;
      id v50 = v55;
      v48(v49, 0, 0);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v70);
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    }
    (*(void (**)(void, uint64_t, uint64_t))(*a2 + 192))(0, 6, 1);
    uint64_t v52 = *(void (**)(char *, uint64_t))(v42 + 8);
    uint64_t v53 = v70;
    v52(v45, v70);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    return ((uint64_t (*)(char *, uint64_t))v52)(v47, v53);
  }
  else
  {
    uint64_t v43 = *(uint64_t (**)(void, uint64_t, uint64_t))(*a2 + 192);
    if (v37 == enum case for PromptResult.cancelled<A>(_:) || v37 == enum case for PromptResult.unanswered<A>(_:))
    {
      return v43(0, 7, 1);
    }
    else
    {
      v43(0, 4, 1);
      return ((uint64_t (*)(char *, uint64_t))v32)(v36, v18);
    }
  }
}

void closure #3 in ContactResolutionFlow.executeState()(uint64_t a1, void *a2, int a3)
{
  int v34 = a3;
  long long v5 = *(_OWORD *)(*a2 + 96);
  v39[0] = *(_OWORD *)(*a2 + 80);
  v39[1] = v5;
  uint64_t v37 = type metadata accessor for ContactResolutionFlow.State();
  __chkstk_darwin(v37);
  uint64_t v7 = (void *)((char *)v30 - v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<INPerson>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (void **)((char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  os_log_type_t v14 = (char *)v30 - v13;
  os_log_type_t v15 = static os_log_type_t.info.getter();
  uint64_t v16 = a2[2];
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v36 = a1;
  v35(v14, a1, v8);
  os_log_t v33 = v16;
  if (os_log_type_enabled(v16, v15))
  {
    uint64_t v17 = swift_slowAlloc();
    unsigned int v32 = v7;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v31 = swift_slowAlloc();
    *(void *)&v39[0] = v31;
    *(_DWORD *)uint64_t v18 = 136315138;
    v30[1] = v18 + 4;
    lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type PromptResult<INPerson> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<INPerson>);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v14, v8);
    _os_log_impl(&dword_0, v33, v15, "prompt output %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v32;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v14, v8);
  }
  v35((char *)v12, v36, v8);
  int v22 = (*(uint64_t (**)(void **, uint64_t))(v9 + 88))(v12, v8);
  if (v22 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(void **, uint64_t))(v9 + 96))(v12, v8);
    uint64_t v23 = *v12;
    if (v34)
    {
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *))(*a2 + 216))(v7);
      unint64_t v24 = *(void (**)(void *, void, void))(*a2 + 192);
      id v25 = v23;
      v24(v23, 0, 0);
    }
    else
    {
      void *v7 = v23;
      swift_storeEnumTagMultiPayload();
      uint64_t v29 = *(void (**)(void *))(*a2 + 216);
      id v25 = v23;
      v29(v7);
    }
  }
  else
  {
    int v26 = v22;
    int v27 = enum case for PromptResult.cancelled<A>(_:);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *))(*a2 + 216))(v7);
    BOOL v28 = *(void (**)(void, uint64_t, uint64_t))(*a2 + 192);
    if (v26 == v27)
    {
      v28(0, 8, 1);
    }
    else
    {
      v28(0, 3, 1);
      v21((char *)v12, v8);
    }
  }
}

uint64_t closure #2 in ContactResolutionFlow.executeState()(void **a1, uint64_t a2, char *a3)
{
  long long v5 = *a1;
  os_log_type_t v6 = static os_log_type_t.info.getter();
  uint64_t v7 = *(NSObject **)(a2 + 16);
  os_log_type_t v8 = v6;
  uint64_t result = os_log_type_enabled(v7, v6);
  if (result)
  {
    id v10 = v5;
    format = a3;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    id v12 = v10;
    id v13 = [v12 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v7, v8, format, v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    return swift_slowDealloc();
  }
  return result;
}

uint64_t ContactResolutionFlow.deinit()
{
  outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), (uint64_t (*)(uint64_t, void))outlined consume of ContactResolutionOutput, (uint64_t (*)(void))outlined consume of ContactResolutionFlowError);
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t v2 = type metadata accessor for ContactResolutionFlow.State();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + *(void *)(*(void *)v0 + 152));
  outlined destroy of (label: String?, value: Any)?(v0 + *(void *)(*(void *)v0 + 160), &demangling cache variable for type metadata for HandleFilterProtocolAsync?);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 168);
  uint64_t v4 = type metadata accessor for SiriKitContactResolver();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 176);
  uint64_t v6 = type metadata accessor for ContactResolverConfig();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t ContactResolutionFlow.__deallocating_deinit()
{
  ContactResolutionFlow.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance ContactResolutionFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance ContactResolutionFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance ContactResolutionFlow<A, B>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 272) + **(int **)(**(void **)v1 + 272));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance ContactResolutionFlow<A1, B1>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ContactResolutionFlow<A1, B1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable();

  return FSMFlow.execute(completion:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute() in conformance ContactResolutionFlow<A1, B1>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  void *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ContactResolutionFlow<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 184))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactResolutionFlow<A1, B1>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t outlined init with take of HandleFilterProtocolAsync?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized ContactResolutionFlow.handleDisambiguationCase(_:)(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    unint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    if (v2 > 1)
    {
      swift_bridgeObjectRetain();
      goto LABEL_4;
    }
LABEL_25:
    char v17 = 0;
    return v17 & 1;
  }
LABEL_21:
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 <= 1) {
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (v2)
  {
LABEL_4:
    unint64_t v3 = a1 & 0xC000000000000001;
    uint64_t v4 = 4;
    do
    {
      if (v3) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4);
      }
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
      {
        __break(1u);
        goto LABEL_21;
      }
      id v8 = [v5 recommendation];

      if (v8)
      {
        char v17 = 0;
        goto LABEL_19;
      }
      ++v4;
    }
    while (v7 != v2);
    uint64_t result = swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_24;
    }
    goto LABEL_12;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_24:
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_14:
    uint64_t v11 = v10;
    id v12 = [v10 person];

    id v13 = [v12 contactIdentifier];
    if (v13)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    swift_bridgeObjectRetain();
    char v17 = specialized Sequence.allSatisfy(_:)(a1, v14, v16);
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    return v17 & 1;
  }
LABEL_12:
  if (*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
  {
    id v10 = *(id *)(a1 + 32);
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_5E3C8()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void partial apply for closure #3 in ContactResolutionFlow.executeState()(uint64_t a1)
{
  closure #3 in ContactResolutionFlow.executeState()(a1, *(void **)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_5E40C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in ContactResolutionFlow.executeState()(uint64_t a1)
{
  return closure #1 in ContactResolutionFlow.executeState()(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t instantiation function for generic protocol witness table for ContactResolutionFlow<A, B>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_5E4B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184))();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 & 1;
  return result;
}

uint64_t sub_5E508(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**(void **)a2 + 192);
  outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>(*(void *)a1, v3, v4, (uint64_t (*)(uint64_t, void))outlined copy of ContactResolutionOutput, (uint64_t (*)(void))outlined copy of ContactResolutionFlowError);
  return v5(v2, v3, v4);
}

uint64_t sub_5E5A8()
{
  return 32;
}

__n128 sub_5E5B4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_5E5C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 208))();
}

uint64_t sub_5E608()
{
  return 32;
}

__n128 sub_5E614(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unint64_t destroy for ContactResolutionFlowError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ContactResolutionFlowError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for ContactResolutionFlowError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ContactResolutionFlowError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactResolutionFlowError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF4 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483637);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 10;
  if (v4 >= 0xC) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ContactResolutionFlowError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF5)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483637;
    if (a3 >= 0x7FFFFFF5) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF5) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 10;
    }
  }
  return result;
}

uint64_t getEnumTag for ContactResolutionFlowError(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for ContactResolutionFlowError(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactResolutionFlowError()
{
  return &type metadata for ContactResolutionFlowError;
}

uint64_t initializeBufferWithCopyOfBuffer for ContactResolutionOutput(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ContactResolutionOutput(*(void **)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for ContactResolutionOutput(uint64_t a1)
{
}

uint64_t assignWithCopy for ContactResolutionOutput(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ContactResolutionOutput(*(void **)a2, v4);
  unsigned int v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ContactResolutionOutput(v5, v6);
  return a1;
}

uint64_t assignWithTake for ContactResolutionOutput(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  unsigned int v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ContactResolutionOutput(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ContactResolutionOutput()
{
  return &type metadata for ContactResolutionOutput;
}

uint64_t type metadata instantiation function for ContactResolutionFlow()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for ContactResolutionFlow()
{
  uint64_t result = type metadata accessor for ContactResolutionFlow.State();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SiriKitContactResolver();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ContactResolverConfig();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for ContactResolutionFlow()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata instantiation function for ContactResolutionFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void type metadata completion function for ContactResolutionFlow.State()
{
  uint64_t v0 = type metadata accessor for OccupantIntentNode();
  if (v1 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v0 - 8) + 64;
    unsigned int v5 = (char *)&value witness table for Builtin.UnknownObject + 64;
    type metadata accessor for OccupantIntentNode?();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      char v6 = &v3;
      uint64_t v7 = &unk_C2C10;
      id v8 = &unk_C2C28;
      swift_initEnumMetadataMultiPayload();
    }
  }
}

char *initializeBufferWithCopyOfBuffer for ContactResolutionFlow.State(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    id v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for OccupantIntentNode();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        id v10 = *a2;
        *(void *)a1 = *a2;
        uint64_t v11 = v10;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        id v12 = *a2;
        *(void *)a1 = *a2;
        id v13 = v12;
        uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INPerson, OccupantIntentNode?))
                     + 48);
        uint64_t v15 = &a1[v14];
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for OccupantIntentNode();
        uint64_t v18 = *(void *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        {
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
          memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        unint64_t v20 = *a2;
        uint64_t v21 = a2[1];
        *(void *)a1 = v20;
        *((void *)a1 + 1) = v21;
        int v22 = v20;
        uint64_t v23 = v21;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *(void *)a1 = *a2;
        a1[8] = *((unsigned char *)a2 + 8);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for ContactResolutionFlow.State(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v2 = type metadata accessor for OccupantIntentNode();
      char v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
      uint64_t v4 = v2;
      uint64_t v5 = a1;
      goto LABEL_14;
    case 1u:
      id v6 = *(id *)a1;
      goto LABEL_7;
    case 2u:

      uint64_t v7 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INPerson, OccupantIntentNode?))
                  + 48);
      uint64_t v8 = type metadata accessor for OccupantIntentNode();
      uint64_t v9 = *(void *)(v8 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      {
        char v3 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
        uint64_t v5 = v7;
        uint64_t v4 = v8;
LABEL_14:
        v3(v5, v4);
      }
      return;
    case 3u:

      id v6 = *(id *)(a1 + 8);
LABEL_7:

      break;
    case 4u:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

void *initializeWithCopy for ContactResolutionFlow.State(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for OccupantIntentNode();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_10;
    case 1u:
      uint64_t v7 = (void *)*a2;
      *a1 = *a2;
      id v8 = v7;
      goto LABEL_10;
    case 2u:
      uint64_t v9 = (void *)*a2;
      *a1 = *a2;
      id v10 = v9;
      uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INPerson, OccupantIntentNode?))
                   + 48);
      id v12 = (char *)a1 + v11;
      id v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for OccupantIntentNode();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      goto LABEL_10;
    case 3u:
      uint64_t v17 = (void *)*a2;
      uint64_t v18 = (void *)a2[1];
      *a1 = v17;
      a1[1] = v18;
      id v19 = v17;
      id v20 = v18;
      goto LABEL_10;
    case 4u:
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      swift_bridgeObjectRetain();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for ContactResolutionFlow.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, a3);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for OccupantIntentNode();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_11;
      case 1u:
        uint64_t v7 = (void *)*a2;
        *a1 = *a2;
        id v8 = v7;
        goto LABEL_11;
      case 2u:
        uint64_t v9 = (void *)*a2;
        *a1 = *a2;
        id v10 = v9;
        uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INPerson, OccupantIntentNode?))
                     + 48);
        id v12 = (char *)a1 + v11;
        id v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for OccupantIntentNode();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        goto LABEL_11;
      case 3u:
        uint64_t v17 = (void *)*a2;
        *a1 = *a2;
        uint64_t v18 = (void *)a2[1];
        a1[1] = v18;
        id v19 = v17;
        id v20 = v18;
        goto LABEL_11;
      case 4u:
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        swift_bridgeObjectRetain();
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for ContactResolutionFlow.State(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INPerson, OccupantIntentNode?))
                + 48);
    uint64_t v9 = (char *)a1 + v8;
    id v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for OccupantIntentNode();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    goto LABEL_8;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for OccupantIntentNode();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithTake for ContactResolutionFlow.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INPerson, OccupantIntentNode?))
                  + 48);
      uint64_t v9 = (char *)a1 + v8;
      id v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for OccupantIntentNode();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      goto LABEL_9;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for OccupantIntentNode();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v5 + 64));
  }
  return a1;
}

void type metadata accessor for OccupantIntentNode?()
{
  if (!lazy cache variable for type metadata for OccupantIntentNode?)
  {
    type metadata accessor for OccupantIntentNode();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for OccupantIntentNode?);
    }
  }
}

uint64_t lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t PommesResponse.firstGeoExperience.getter()
{
  unint64_t v0 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v1 = v0;
  if (v0 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      type metadata accessor for GeoExperience();
      uint64_t v7 = swift_dynamicCastClass();
      if (v7)
      {
        uint64_t v8 = v7;
        swift_bridgeObjectRelease_n();
        return v8;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t StopShareETAFlowDelegate.currentDeviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return ShareETAContextProvider.currentDeviceState.getter(&direct field offset for StopShareETAFlowDelegate.currentDeviceState, a1);
}

uint64_t StopShareETAFlowDelegate.currentDeviceState.setter(long long *a1)
{
  return ShareETAContextProvider.currentDeviceState.setter(a1, &direct field offset for StopShareETAFlowDelegate.currentDeviceState);
}

uint64_t (*StopShareETAFlowDelegate.currentDeviceState.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

id StopShareETAFlowDelegate.logObject.getter()
{
  return *(id *)(v0 + direct field offset for StopShareETAFlowDelegate.logObject);
}

void *StopShareETAFlowDelegate.stopShareETAIntent.getter()
{
  unint64_t v1 = (void **)(v0 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void StopShareETAFlowDelegate.stopShareETAIntent.setter(void *a1)
{
  id v3 = (void **)(v1 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
}

uint64_t (*StopShareETAFlowDelegate.stopShareETAIntent.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t StopShareETAFlowDelegate.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for StopShareETAFlowDelegate.isPOMMES);
  swift_beginAccess();
  return *v1;
}

uint64_t StopShareETAFlowDelegate.isPOMMES.setter(char a1)
{
  id v3 = (unsigned char *)(v1 + direct field offset for StopShareETAFlowDelegate.isPOMMES);
  uint64_t result = swift_beginAccess();
  *id v3 = a1;
  return result;
}

uint64_t (*StopShareETAFlowDelegate.isPOMMES.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t StopShareETAFlowDelegate.__allocating_init(stopShareETAIntent:isPOMMES:)(void *a1, char a2)
{
  swift_allocObject();
  uint64_t v4 = specialized StopShareETAFlowDelegate.init(stopShareETAIntent:isPOMMES:)(a1, a2);

  return v4;
}

uint64_t StopShareETAFlowDelegate.init(stopShareETAIntent:isPOMMES:)(void *a1, char a2)
{
  uint64_t v3 = specialized StopShareETAFlowDelegate.init(stopShareETAIntent:isPOMMES:)(a1, a2);

  return v3;
}

uint64_t StopShareETAFlowDelegate.__allocating_init(deviceState:isPOMMES:)(uint64_t a1, char a2)
{
  return StopShareETAFlowDelegate.init(deviceState:isPOMMES:)(a1, a2);
}

uint64_t StopShareETAFlowDelegate.init(deviceState:isPOMMES:)(uint64_t a1, char a2)
{
  uint64_t v5 = direct field offset for StopShareETAFlowDelegate.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v2 + v5) = OS_os_log.init(subsystem:category:)();
  *(void *)(v2 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent) = 0;
  outlined init with copy of DeviceState(a1, v2 + direct field offset for StopShareETAFlowDelegate.currentDeviceState);
  *(unsigned char *)(v2 + direct field offset for StopShareETAFlowDelegate.isPOMMES) = a2;
  swift_release();
  uint64_t v6 = BaseRCHFlowDelegate.init()();
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v6;
}

uint64_t StopShareETAFlowDelegate.makeIntentFromParse(parse:previousIntent:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for StopShareETAFlowDelegate + *v0 + 56))();
}

uint64_t StopShareETAFlowDelegate.makeUnsupportedValueBehavior(app:intent:parameterName:intentResolutionResult:)@<X0>(void *a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(NSObject **)(v2 + direct field offset for StopShareETAFlowDelegate.logObject);
  id v5 = a1;
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    [v5 unsupportedReason];
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v4, v6, "makeUnsupportedValueBehavior with result %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v10 = enum case for UnsupportedValueBehavior.dialogAndStop(_:);
  uint64_t v11 = type metadata accessor for UnsupportedValueBehavior();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(a2, v10, v11);
}

uint64_t StopShareETAFlowDelegate.makeAppResolution()()
{
  return AppResolutionService.init()();
}

uint64_t StopShareETAFlowDelegate.makeDialogTemplating()()
{
  static os_log_type_t.info.getter();
  uint64_t v1 = os_log(_:dso:log:_:_:)();
  (*(void (**)(void *__return_ptr, uint64_t))(class metadata base offset for StopShareETAFlowDelegate
                                                        + *v0
                                                        + 32))(v3, v1);
  type metadata accessor for StopShareETATemplatingService(0);
  swift_allocObject();
  return StopShareETATemplatingService.init(deviceState:)(v3);
}

uint64_t StopShareETATemplatingService.__allocating_init(deviceState:)(void *a1)
{
  return StopShareETATemplatingService.init(deviceState:)(a1);
}

BOOL StopShareETAFlowDelegate.shouldConfirmIntentWithUser(intent:intentResponse:)(void *a1, void *a2)
{
  static os_log_type_t.info.getter();
  id v5 = *(NSObject **)(v2 + direct field offset for StopShareETAFlowDelegate.logObject);
  os_log(_:dso:log:_:_:)();
  id v6 = [a1 recipients];
  if (v6)
  {
    uint64_t v7 = v6;
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v9 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    if (v9)
    {
      os_log_type_t v10 = static os_log_type_t.default.getter();
      BOOL result = os_log_type_enabled(v5, v10);
      if (!result) {
        return result;
      }
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_0, v5, v10, "specific contact in intent", v12, 2u);
      swift_slowDealloc();
      return 0;
    }
  }
  id v13 = [a2 recipients];
  if (!v13)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    return 0;
  }
  uint64_t v14 = v13;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  if (v16 < 2) {
    return 0;
  }
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v5, v17, "stop sharing ETA - recipients should confirm with user", v18, 2u);
    swift_slowDealloc();
  }
  return 1;
}

uint64_t StopShareETAFlowDelegate.makeConfirmationStateFromParse(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Parse();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void **)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for NLIntent();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - v13;
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  (*(void (**)(void **, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v15 = (*(uint64_t (**)(void **, uint64_t))(v5 + 88))(v7, v4);
  if (v15 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    goto LABEL_5;
  }
  if (v15 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
LABEL_5:
    uint64_t v16 = *(void (**)(char *, void **, uint64_t))(v9 + 32);
    v16(v14, v7, v8);
    v16(v12, (void **)v14, v8);
    type metadata accessor for LocationSearchIntent();
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once();
    }
    *(void *)(v17 + v18) = static LocationSearchIntent.domainNode;
    v16((char *)(v17 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), (void **)v12, v8);
    uint64_t v30 = v17;
    uint64_t v19 = one-time initialization token for confirmationNode;
    swift_retain();
    if (v19 != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent();
    IntentNodeTraversable.value<A>(forNode:)();
    swift_release();
    switch(v31)
    {
      case 1:
        goto LABEL_13;
      case 2:
        goto LABEL_14;
      case 3:
        goto LABEL_15;
      default:
        goto LABEL_10;
    }
  }
  if (v15 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v21 = *v7;
    type metadata accessor for LocationSearchIntent();
    swift_allocObject();
    id v22 = v21;
    uint64_t v23 = LocationSearchIntent.init(from:)(v22);
    char v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 152))(v23);
    swift_release();

    switch(v24)
    {
      case 1:
LABEL_13:
        id v20 = (unsigned int *)&enum case for SiriKitConfirmationState.rejected(_:);
        break;
      case 2:
LABEL_14:
        id v20 = (unsigned int *)&enum case for SiriKitConfirmationState.cancelled(_:);
        break;
      case 3:
LABEL_15:
        id v20 = (unsigned int *)&enum case for SiriKitConfirmationState.unset(_:);
        break;
      default:
LABEL_10:
        id v20 = (unsigned int *)&enum case for SiriKitConfirmationState.confirmed(_:);
        break;
    }
    uint64_t v25 = *v20;
    uint64_t v26 = type metadata accessor for SiriKitConfirmationState();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(a2, v25, v26);
  }
  else
  {
    uint64_t v28 = enum case for SiriKitConfirmationState.unset(_:);
    uint64_t v29 = type metadata accessor for SiriKitConfirmationState();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(a2, v28, v29);
    return (*(uint64_t (**)(void **, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t StopShareETAFlowDelegate.makeNLContextProvider()()
{
  static os_log_type_t.info.getter();
  uint64_t v1 = os_log(_:dso:log:_:_:)();
  char v2 = (*(uint64_t (**)(uint64_t))(class metadata base offset for StopShareETAFlowDelegate + *v0 + 80))(v1);
  type metadata accessor for StopShareETAContextProvider(0);
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = direct field offset for StopShareETAContextProvider.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v3 + v4) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v3 + direct field offset for StopShareETAContextProvider.isPOMMES) = v2 & 1;
  swift_release();
  return DefaultNLContextProvider.init()();
}

uint64_t StopShareETAContextProvider.__allocating_init(isPOMMES:)(char a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = direct field offset for StopShareETAContextProvider.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v2 + v3) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v2 + direct field offset for StopShareETAContextProvider.isPOMMES) = a1;
  swift_release();
  return DefaultNLContextProvider.init()();
}

void StopShareETAFlowDelegate.init()()
{
}

void StopShareETAFlowDelegate.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for StopShareETAFlowDelegate.currentDeviceState);

  uint64_t v1 = *(void **)(v0 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent);
}

uint64_t StopShareETAFlowDelegate.deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for StopShareETAFlowDelegate.currentDeviceState);

  return v0;
}

uint64_t StopShareETAFlowDelegate.__deallocating_deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for StopShareETAFlowDelegate.currentDeviceState);

  return _swift_deallocClassInstance(v0, 73, 7);
}

id StopShareETAContextProvider.logObject.getter()
{
  return *(id *)(v0 + direct field offset for StopShareETAContextProvider.logObject);
}

uint64_t StopShareETAContextProvider.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for StopShareETAContextProvider.isPOMMES);
  swift_beginAccess();
  return *v1;
}

uint64_t StopShareETAContextProvider.isPOMMES.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for StopShareETAContextProvider.isPOMMES);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*StopShareETAContextProvider.isPOMMES.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t StopShareETAContextProvider.init(isPOMMES:)(char a1)
{
  uint64_t v3 = direct field offset for StopShareETAContextProvider.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v1 + v3) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v1 + direct field offset for StopShareETAContextProvider.isPOMMES) = a1;
  swift_release();

  return DefaultNLContextProvider.init()();
}

uint64_t StopShareETAContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PommesContext.Source();
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  __chkstk_darwin(v8);
  int v27 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v10 - 8);
  uint64_t v30 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NLContextUpdate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(NSObject **)((char *)v3 + direct field offset for StopShareETAContextProvider.logObject);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = v13;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "makeContextForHandleIntent", v18, 2u);
    uint64_t v13 = v26;
    swift_slowDealloc();
  }
  uint64_t v19 = NLContextUpdate.init()();
  if ((*(uint64_t (**)(uint64_t))(class metadata base offset for StopShareETAContextProvider + *v3 + 16))(v19))
  {
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_0, v16, v20, "makeContextForHandleIntent adding pommesContext", v21, 2u);
      swift_slowDealloc();
    }
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v27, enum case for PommesContext.Source.pluginDefined(_:), v29);
    id v22 = v30;
    PommesContext.init(source:domain:listenAfterSpeaking:)();
    uint64_t v23 = type metadata accessor for PommesContext();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
    NLContextUpdate.pommesContext.setter();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_C0AD0;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INStopShareETAIntent);
  *(void *)(v24 + 32) = static ConversationStateAttachmentUtils.makeAttachmentToClearSlotResolutionState<A>(intent:)();
  uint64_t v31 = v24;
  specialized Array._endMutation()();
  NLContextUpdate.conversationStateAttachments.setter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v7, v15, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
  a3(v7);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v7, &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t StopShareETAContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for PommesContext.Source();
  uint64_t v9 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for NLContextUpdate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  uint64_t v19 = *(NSObject **)((char *)v4 + direct field offset for StopShareETAContextProvider.logObject);
  os_log(_:dso:log:_:_:)();
  uint64_t v20 = NLContextUpdate.init()();
  if ((*(uint64_t (**)(uint64_t))(class metadata base offset for StopShareETAContextProvider + *v4 + 16))(v20))
  {
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = a3;
      *(_WORD *)id v22 = 0;
      _os_log_impl(&dword_0, v19, v21, "makeContextForConfirmIntent adding pommesContext", v22, 2u);
      a3 = v26;
      swift_slowDealloc();
    }
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for PommesContext.Source.pluginDefined(_:), v27);
    PommesContext.init(source:domain:listenAfterSpeaking:)();
    uint64_t v23 = type metadata accessor for PommesContext();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v14, 0, 1, v23);
    NLContextUpdate.pommesContext.setter();
  }
  NLContextUpdate.weightedPromptTargetDomain.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  NLContextUpdate.weightedPromptAbortValues.setter();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v8, v18, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
  a3(v8);
  outlined destroy of (label: String?, value: Any)?((uint64_t)v8, &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

void StopShareETAContextProvider.init()()
{
}

void StopShareETAContextProvider.__ivar_destroyer()
{
}

uint64_t StopShareETAContextProvider.deinit()
{
  uint64_t v0 = DefaultNLContextProvider.deinit();

  return v0;
}

uint64_t StopShareETAContextProvider.__deallocating_deinit()
{
  uint64_t v0 = DefaultNLContextProvider.deinit();

  return _swift_deallocClassInstance(v0, 25, 7);
}

uint64_t StopShareETATemplatingService.catService.getter()
{
  return swift_retain();
}

id StopShareETATemplatingService.logObject.getter()
{
  return *(id *)(v0 + direct field offset for StopShareETATemplatingService.logObject);
}

uint64_t StopShareETATemplatingService.device.getter@<X0>(uint64_t a1@<X8>)
{
  return ShareETAContextProvider.currentDeviceState.getter(&direct field offset for StopShareETATemplatingService.device, a1);
}

uint64_t StopShareETATemplatingService.device.setter(long long *a1)
{
  return ShareETAContextProvider.currentDeviceState.setter(a1, &direct field offset for StopShareETATemplatingService.device);
}

uint64_t (*StopShareETATemplatingService.device.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t StopShareETATemplatingService.init(deviceState:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  __chkstk_darwin(v4 - 8);
  uint64_t v25 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CATService();
  uint64_t v10 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v12 = self;
  swift_retain();
  *(void *)(v10 + 24) = [v12 bundleForClass:ObjCClassFromMetadata];
  uint64_t v13 = direct field offset for StopShareETATemplatingService.catService;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v10 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v10 + 16) = 0;
  *(void *)(v2 + v13) = v10;
  uint64_t v14 = direct field offset for StopShareETATemplatingService.logObject;
  uint64_t v15 = OS_os_log.init(subsystem:category:)();
  *(void *)(v2 + v14) = v15;
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "initializing", v17, 2u);
    swift_slowDealloc();
  }
  outlined init with copy of DeviceState((uint64_t)a1, v2 + direct field offset for StopShareETATemplatingService.device);
  swift_release();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v18 = Locale.identifier.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v28 = v18;
  uint64_t v29 = v20;
  uint64_t v26 = 45;
  unint64_t v27 = 0xE100000000000000;
  uint64_t v30 = 95;
  unint64_t v31 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  static Device.current.getter();
  uint64_t v21 = type metadata accessor for DucTemplatingLocalContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v25, 1, 1, v21);
  specialized Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  static AceService.current.getter();
  uint64_t v22 = DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return v22;
}

void StopShareETATemplatingService.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *), uint64_t a9)
{
  uint64_t v37 = a8;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for Locale();
  __chkstk_darwin(v15 - 8);
  os_log_type_t v16 = *(NSObject **)(v9 + direct field offset for StopShareETATemplatingService.logObject);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "makeParameterValueUnsupportedDialog", v18, 2u);
    swift_slowDealloc();
  }
  if ([a4 resolutionResultCode] != (char *)&dword_0 + 1)
  {
LABEL_16:
    uint64_t v21 = *(void *)(v9 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v40 = type metadata accessor for ShareETA(0);
    uint64_t v41 = &protocol witness table for ShareETA;
    *(unsigned char *)__swift_allocate_boxed_opaque_existential_0(v39) = 1;
    goto LABEL_17;
  }
  unint64_t v19 = (unint64_t)[a4 unsupportedReason];
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_C0600;
  *(void *)(v20 + 56) = &type metadata for Int;
  *(void *)(v20 + 64) = &protocol witness table for Int;
  *(void *)(v20 + 32) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if ((v19 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    uint64_t v21 = *(void *)(v9 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v40 = type metadata accessor for ShareETA(0);
    uint64_t v41 = &protocol witness table for ShareETA;
    __swift_allocate_boxed_opaque_existential_0(v39);
LABEL_17:
    swift_storeEnumTagMultiPayload();
    uint64_t v32 = static DialogHelper.globals.getter();
    (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v21 + 120))(v39, v32, v37, a9);
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  id v22 = [a5 recipients];
  if (!v22) {
    goto LABEL_21;
  }
  uint64_t v23 = v22;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
  unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v33) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  if (!*(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError();
    uint64_t v34 = swift_allocError();
    *uint64_t v35 = 0xD000000000000020;
    v35[1] = 0x80000000000C8E90;
    *uint64_t v14 = v34;
    swift_storeEnumTagMultiPayload();
    v37(v14);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return;
  }
LABEL_9:
  if ((v24 & 0xC000000000000001) != 0)
  {
    id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_12:
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    if (v19 == 1 || v19 == 4)
    {
      uint64_t v27 = *(void *)(v9 + direct field offset for StopShareETATemplatingService.catService);
      uint64_t v40 = type metadata accessor for ShareETA(0);
      uint64_t v41 = &protocol witness table for ShareETA;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v39);
      type metadata accessor for DialogPerson();
      id v29 = v26;
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v38, v38[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v30 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v38);
      uint64_t *boxed_opaque_existential_0 = v30;
      swift_storeEnumTagMultiPayload();
      uint64_t v31 = static DialogHelper.globals.getter();
      (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v27 + 120))(v39, v31, v37, a9);
      swift_bridgeObjectRelease();

LABEL_18:
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v39);
      return;
    }

    goto LABEL_16;
  }
  if (*(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8)))
  {
    id v25 = *(id *)(v24 + 32);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t StopShareETATemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:)(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v28[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = [a2 recipients];
  if (!v12) {
    goto LABEL_6;
  }
  uint64_t v13 = v12;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  if (v15)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError();
    uint64_t v16 = swift_allocError();
    *os_log_type_t v17 = 0xD000000000000043;
    v17[1] = 0x80000000000C8F10;
    uint64_t *v11 = v16;
    swift_storeEnumTagMultiPayload();
    a4(v11);
    return outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }
  else
  {
LABEL_6:
    unint64_t v19 = *(NSObject **)(v5 + direct field offset for StopShareETATemplatingService.logObject);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_0, v19, v20, "stop sharing ETA - makeIntentConfirmationDialog", v21, 2u);
      swift_slowDealloc();
    }
    uint64_t v22 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    v28[3] = type metadata accessor for ShareETA(0);
    v28[4] = (uint64_t)&protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v28);
    uint64_t v24 = enum case for BehaviorAfterSpeaking.listen(_:);
    uint64_t v25 = type metadata accessor for BehaviorAfterSpeaking();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(boxed_opaque_existential_0, v24, v25);
    swift_storeEnumTagMultiPayload();
    uint64_t v26 = static DialogHelper.globals.getter();
    (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v22 + 120))(v28, v26, a4, a5);
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v28);
  }
}

uint64_t StopShareETATemplatingService.makeFailureHandlingIntentDialog(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(NSObject **)(v5 + direct field offset for StopShareETATemplatingService.logObject);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "makeFailureHandlingIntentDialog", v11, 2u);
    swift_slowDealloc();
  }
  if (a3
    && ((id v12 = (int *)[a3 code], v12 == (int *)((char *)&dword_C + 3))
     || v12 == (int *)((char *)&dword_C + 1)
     || v12 == &dword_C))
  {
    uint64_t v13 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v17 = type metadata accessor for ShareETA(0);
    uint64_t v18 = &protocol witness table for ShareETA;
    __swift_allocate_boxed_opaque_existential_0(v16);
  }
  else
  {
    uint64_t v13 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v17 = type metadata accessor for ShareETA(0);
    uint64_t v18 = &protocol witness table for ShareETA;
    *(unsigned char *)__swift_allocate_boxed_opaque_existential_0(v16) = 1;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = static DialogHelper.globals.getter();
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 120))(v16, v14, a4, a5);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v16);
}

void StopShareETATemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v9);
  uint64_t v11 = (void *)((char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for Locale();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = *(NSObject **)(v5 + direct field offset for StopShareETATemplatingService.logObject);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "stop sharing ETA - makeIntentHandledDialog", v15, 2u);
    swift_slowDealloc();
  }
  if (!a3)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    lazy protocol witness table accessor for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError();
    uint64_t v29 = swift_allocError();
    *uint64_t v30 = 0xD000000000000015;
    v30[1] = 0x80000000000C8080;
    uint64_t *v11 = v29;
    swift_storeEnumTagMultiPayload();
    a4(v11);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return;
  }
  id v16 = a3;
  id v17 = [v16 recipients];
  if (v17)
  {
    uint64_t v18 = v17;
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
    uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v19 & 0xC000000000000001) != 0)
    {
      id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFFF8)))
      {
        __break(1u);
        return;
      }
      id v20 = *(id *)(v19 + 32);
    }
    uint64_t v21 = v20;
    uint64_t v46 = a4;
    uint64_t v47 = a5;
    swift_bridgeObjectRelease();
    id v22 = v21;
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      v49[0] = v44;
      *(_DWORD *)uint64_t v24 = 136315138;
      v43[1] = v24 + 4;
      id v25 = [v22 displayName];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v45 = v16;
      unint64_t v28 = v27;

      v48[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      id v16 = v45;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v13, v23, "stop sharing ETA - stop sharing ETA to %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v38 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v50 = type metadata accessor for ShareETA(0);
    id v51 = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v49);
    type metadata accessor for DialogPerson();
    id v40 = v22;
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1(v48, v48[3]);
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v41 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v48);
    *(unsigned char *)boxed_opaque_existential_0 = 1;
    boxed_opaque_existential_0[1] = v41;
    boxed_opaque_existential_0[2] = 0;
    swift_storeEnumTagMultiPayload();
    uint64_t v42 = static DialogHelper.globals.getter();
    (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v38 + 120))(v49, v42, v46, v47);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = a5;
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_0, v13, v32, "recipients nil - stop sharing ETA for all", v33, 2u);
      swift_slowDealloc();
    }
    uint64_t v34 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
    uint64_t v50 = type metadata accessor for ShareETA(0);
    id v51 = &protocol witness table for ShareETA;
    uint64_t v35 = __swift_allocate_boxed_opaque_existential_0(v49);
    type metadata accessor for DialogPerson.Builder();
    swift_allocObject();
    DialogPerson.Builder.init()();
    uint64_t v36 = dispatch thunk of DialogPerson.Builder.build()();
    swift_release();
    *(unsigned char *)uint64_t v35 = 1;
    v35[1] = v36;
    _OWORD v35[2] = 0;
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = static DialogHelper.globals.getter();
    (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t *), uint64_t))(*(void *)v34 + 120))(v49, v37, a4, v31);
    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v49);
}

uint64_t StopShareETATemplatingService.makeIntentConfirmationCancelledDialog(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(NSObject **)(v5 + direct field offset for StopShareETATemplatingService.logObject);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "makeIntentConfirmationCancelledDialog", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = *(void *)(v5 + direct field offset for StopShareETATemplatingService.catService);
  v15[3] = type metadata accessor for ShareETA(0);
  void v15[4] = (uint64_t)&protocol witness table for ShareETA;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v15);
  *(unsigned char *)boxed_opaque_existential_0 = 1;
  boxed_opaque_existential_0[1] = 0;
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = static DialogHelper.globals.getter();
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 120))(v15, v13, a4, a5);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
}

void StopShareETATemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:)()
{
}

void StopShareETATemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)()
{
}

uint64_t StopShareETATemplatingService.__ivar_destroyer()
{
  swift_release();

  uint64_t v1 = v0 + direct field offset for StopShareETATemplatingService.device;

  return __swift_destroy_boxed_opaque_existential_0Tm(v1);
}

uint64_t StopShareETATemplatingService.deinit()
{
  uint64_t v0 = DucTemplatingService.deinit();
  swift_release();

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for StopShareETATemplatingService.device);
  return v0;
}

uint64_t StopShareETATemplatingService.__deallocating_deinit()
{
  uint64_t v0 = DucTemplatingService.deinit();
  swift_release();

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + direct field offset for StopShareETATemplatingService.device);

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t specialized StopShareETAFlowDelegate.init(stopShareETAIntent:isPOMMES:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = direct field offset for StopShareETAFlowDelegate.logObject;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_retain();
  *(void *)(v2 + v6) = OS_os_log.init(subsystem:category:)();
  uint64_t v7 = (void **)(v2 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent);
  char *v7 = 0;
  swift_beginAccess();
  uint64_t v8 = *v7;
  char *v7 = a1;
  id v9 = a1;

  static Device.current.getter();
  outlined init with take of CATType(&v11, v3 + direct field offset for StopShareETAFlowDelegate.currentDeviceState);
  *(unsigned char *)(v3 + direct field offset for StopShareETAFlowDelegate.isPOMMES) = a2;
  swift_release();
  return BaseRCHFlowDelegate.init()();
}

uint64_t type metadata accessor for StopShareETATemplatingService(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for StopShareETATemplatingService);
}

uint64_t type metadata accessor for StopShareETAContextProvider(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for StopShareETAContextProvider);
}

unint64_t lazy protocol witness table accessor for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError()
{
  unint64_t result = lazy protocol witness table cache variable for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError;
  if (!lazy protocol witness table cache variable for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopShareETATemplatingService.StopShareETATemplatingServiceError and conformance StopShareETATemplatingService.StopShareETATemplatingServiceError);
  }
  return result;
}

uint64_t sub_63254(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for StopShareETAFlowDelegate + **a1 + 32))();
}

uint64_t sub_632B4(uint64_t a1, void **a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(class metadata base offset for StopShareETAFlowDelegate + **a2 + 40))(v4);
}

uint64_t sub_6332C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for StopShareETAFlowDelegate + **a1 + 56))();
  *a2 = result;
  return result;
}

uint64_t sub_63394(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(class metadata base offset for StopShareETAFlowDelegate + **a2 + 64);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_63408@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for StopShareETAFlowDelegate + **a1 + 80))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_63474(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for StopShareETAFlowDelegate + **a2 + 88))(*a1);
}

uint64_t sub_634D8@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for StopShareETAContextProvider + **a1 + 16))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_63544(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for StopShareETAContextProvider + **a2 + 24))(*a1);
}

uint64_t sub_635A8(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for StopShareETATemplatingService + **a1 + 24))();
}

uint64_t sub_63608(uint64_t a1, void **a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(class metadata base offset for StopShareETATemplatingService + **a2 + 32))(v4);
}

uint64_t type metadata accessor for StopShareETAFlowDelegate(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for StopShareETAFlowDelegate);
}

uint64_t type metadata completion function for StopShareETAFlowDelegate()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for StopShareETAFlowDelegate()
{
  return type metadata accessor for StopShareETAFlowDelegate(0);
}

uint64_t type metadata completion function for StopShareETAContextProvider()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for StopShareETAContextProvider()
{
  return type metadata accessor for StopShareETAContextProvider(0);
}

uint64_t type metadata completion function for StopShareETATemplatingService()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for StopShareETATemplatingService()
{
  return type metadata accessor for StopShareETATemplatingService(0);
}

ValueMetadata *type metadata accessor for StopShareETATemplatingService.StopShareETATemplatingServiceError()
{
  return &type metadata for StopShareETATemplatingService.StopShareETATemplatingServiceError;
}

uint64_t GeoAppResolutionService.__allocating_init()()
{
  return AppResolutionService.init()();
}

uint64_t GeoAppResolutionService.resolveApp(intent:appResolutionState:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AppResolutionResult, Error>);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for App();
  swift_allocObject();
  *uint64_t v6 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
  uint64_t v7 = enum case for AppResolutionResult.selected(_:);
  uint64_t v8 = type metadata accessor for AppResolutionResult();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  a3(v6);
  return outlined destroy of Result<AppResolutionResult, Error>((uint64_t)v6);
}

uint64_t outlined destroy of Result<AppResolutionResult, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AppResolutionResult, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t GeoAppResolutionService.__deallocating_deinit()
{
  uint64_t v0 = AppResolutionService.deinit();

  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata completion function for GeoAppResolutionService()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for GeoAppResolutionService()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  if (*(void *)&aAny_1[8 * a1] == *(void *)&aAny_1[8 * a2] && qword_C2EF8[a1] == qword_C2EF8[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD00000000000002CLL;
  unint64_t v3 = 0x80000000000C6780;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD00000000000002ALL;
    }
    else {
      unint64_t v5 = 0xD000000000000033;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x80000000000C67B0;
    }
    else {
      unint64_t v6 = 0x80000000000C67E0;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD00000000000002CLL;
  unint64_t v6 = 0x80000000000C6780;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD00000000000002ALL;
    }
    else {
      unint64_t v2 = 0xD000000000000033;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x80000000000C67B0;
    }
    else {
      unint64_t v3 = 0x80000000000C67E0;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t FlowSelector.FlowSelectorKey.hash(into:)(uint64_t a1, char a2)
{
  LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(a2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static FlowSelector.FlowSelectorKey.== infix(_:_:)(__int16 a1, __int16 a2)
{
  char v3 = HIBYTE(a1);
  uint64_t v4 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(a1);
  uint64_t v6 = v5;
  if (v4 == LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(a2) && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      return 0;
    }
  }

  return specialized == infix<A>(_:_:)(v3, SHIBYTE(a2));
}

Swift::Int FlowSelector.FlowSelectorKey.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  FlowSelector.FlowSelectorKey.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

GeoFlowDelegatePlugin::FlowSelector::FlowSelectorKey __swiftcall FlowSelector.FlowSelectorKey.init(values:)(GeoFlowDelegatePlugin::FlowSelector::FlowSelectorKey values)
{
  return values;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FlowSelector.FlowSelectorKey()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  FlowSelector.FlowSelectorKey.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlowSelector.FlowSelectorKey(uint64_t a1)
{
  return FlowSelector.FlowSelectorKey.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FlowSelector.FlowSelectorKey()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  FlowSelector.FlowSelectorKey.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FlowSelector.FlowSelectorKey(char *a1, char *a2)
{
  char v2 = a1[1];
  char v3 = a2[1];
  char v4 = *a2;
  uint64_t v5 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(*a1);
  uint64_t v7 = v6;
  if (v5 == LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v4) && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 0;
    }
  }

  return specialized == infix<A>(_:_:)(v2, v3);
}

uint64_t FlowSelector.__allocating_init(with:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized FlowSelector.init(with:)((uint64_t)v7, v2, v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v9;
}

uint64_t FlowSelector.init(with:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized FlowSelector.init(with:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v9;
}

uint64_t closure #1 in FlowSelector.init(with:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a2, (uint64_t)v5);
  type metadata accessor for TrafficIncidentBaseFlow(0);
  swift_allocObject();
  uint64_t v2 = swift_retain();
  v5[0] = TrafficIncidentBaseFlow.init(with:flowHelper:)(v2, (uint64_t)v5);
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_0(&lazy protocol witness table cache variable for type TrafficIncidentBaseFlow and conformance TrafficIncidentBaseFlow, (void (*)(uint64_t))type metadata accessor for TrafficIncidentBaseFlow);
  uint64_t v3 = Flow.eraseToAnyFlow()();
  swift_release();
  return v3;
}

uint64_t closure #2 in FlowSelector.init(with:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in FlowSelector.init(with:)(a1, a2, 0);
}

uint64_t closure #3 in FlowSelector.init(with:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in FlowSelector.init(with:)(a1, a2, 1);
}

uint64_t closure #2 in FlowSelector.init(with:)(uint64_t a1, uint64_t a2, char a3)
{
  outlined init with copy of DeviceState(a2, (uint64_t)v7);
  type metadata accessor for ShareETABaseFlow();
  swift_allocObject();
  uint64_t v4 = swift_retain();
  *(void *)&v7[0] = ShareETABaseFlow.init(with:stopSharing:flowHelper:checkNavigation:)(v4, a3, v7, (uint64_t)&type metadata for AssistantProperties, (uint64_t)&protocol witness table for AssistantProperties);
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_0(&lazy protocol witness table cache variable for type ShareETABaseFlow and conformance ShareETABaseFlow, (void (*)(uint64_t))type metadata accessor for ShareETABaseFlow);
  uint64_t v5 = Flow.eraseToAnyFlow()();
  swift_release();
  return v5;
}

uint64_t closure #4 in FlowSelector.init(with:)(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 184))(a1) == 9) {
    return 0;
  }
  outlined init with copy of DeviceState(a2, (uint64_t)v6);
  type metadata accessor for TrafficIncidentBaseFlow(0);
  swift_allocObject();
  uint64_t v4 = swift_retain();
  v6[0] = TrafficIncidentBaseFlow.init(with:flowHelper:)(v4, (uint64_t)v6);
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_0(&lazy protocol witness table cache variable for type TrafficIncidentBaseFlow and conformance TrafficIncidentBaseFlow, (void (*)(uint64_t))type metadata accessor for TrafficIncidentBaseFlow);
  uint64_t v3 = Flow.eraseToAnyFlow()();
  swift_release();
  return v3;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed LocationSearchIntent) -> (@out AnyFlow?)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v4 = a1;
  a2(&v3, &v4);
  return v3;
}

uint64_t FlowSelector.chooseFlow(nlIntent:)(uint64_t a1)
{
  void (*v35)(uint64_t *__return_ptr, uint64_t *);
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  char *v48;
  os_log_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;

  uint64_t v3 = type metadata accessor for NLIntent();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v46 - v8;
  os_log_type_t v10 = static os_log_type_t.info.getter();
  uint64_t v50 = v1;
  uint64_t v11 = *(NSObject **)(v1 + 16);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12(v9, a1, v3);
  os_log_type_t v13 = v10;
  BOOL v14 = os_log_type_enabled(v11, v10);
  id v49 = v11;
  if (v14)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    os_log_t v48 = v7;
    uint64_t v53 = v16;
    uint64_t v47 = a1;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v46 = v15 + 4;
    _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_0(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, (void (*)(uint64_t))&type metadata accessor for NLIntent);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v53);
    a1 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v11 = v49;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    _os_log_impl(&dword_0, v11, v13, "chooseFlow - receives NL intent: %s", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v48;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  v12(v7, a1, v3);
  type metadata accessor for LocationSearchIntent();
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  *(void *)(v19 + v20) = static LocationSearchIntent.domainNode;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v19 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v7, v3);
  swift_retain_n();
  swift_retain();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v52 = v19;
    uint64_t v53 = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    if (one-time initialization token for verbNode != -1) {
      swift_once();
    }
    _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent, (void (*)(uint64_t))type metadata accessor for LocationSearchIntent);
    IntentNodeTraversable.value<A>(forNode:)();
    char v24 = v51;
    if (v51 == 10) {
      char v24 = 0;
    }
    LOBYTE(v52) = v24;
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v52 = v19;
    if (one-time initialization token for nounNode != -1) {
      swift_once();
    }
    IntentNodeTraversable.value<A>(forNode:)();
    char v27 = v51;
    if (v51 == 8) {
      char v27 = 0;
    }
    LOBYTE(v52) = v27;
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    uint64_t v11 = v49;
    _os_log_impl(&dword_0, v49, v21, "chooseFlow - receives NL intent with Verb: %s, Noun: %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
  uint64_t v53 = v19;
  if (one-time initialization token for verbNode != -1) {
    swift_once();
  }
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent, (void (*)(uint64_t))type metadata accessor for LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v52 == 10) {
    __int16 v30 = 0;
  }
  else {
    __int16 v30 = v52;
  }
  uint64_t v53 = v19;
  if (one-time initialization token for nounNode != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v52 == 8) {
    __int16 v31 = 0;
  }
  else {
    __int16 v31 = v52;
  }
  uint64_t v32 = *(void *)(v50 + 24);
  if (*(void *)(v32 + 16)
    && (unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v30 | (unsigned __int16)(v31 << 8)), (v34 & 1) != 0))
  {
    uint64_t v35 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(void *)(v32 + 56) + 16 * v33);
    uint64_t v53 = v19;
    swift_retain();
    v35(&v52, &v53);
    swift_release();
    swift_release();
    return v52;
  }
  else
  {
    uint64_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v37))
    {
      swift_retain_n();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315650;
      uint64_t v39 = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v30);
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v41 = (char)v31;
      uint64_t v42 = *(void *)&aAny_1[v41 * 8];
      *(_WORD *)(v38 + 12) = 2080;
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, qword_C2EF8[v41], &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 22) = 2080;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      lazy protocol witness table accessor for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey();
      uint64_t v43 = Dictionary.description.getter();
      id v45 = v44;
      swift_bridgeObjectRelease();
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v49, v37, "chooseFlow no flow found for (%s, %s) current dictionary %s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_release();
    return 0;
  }
}

uint64_t FlowSelector.chooseFlow(pommesResponse:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = PommesResponse.firstGeoExperience.getter();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    os_log_type_t v10 = static os_log_type_t.info.getter();
    uint64_t v11 = v1[2];
    int v12 = v10;
    if (os_log_type_enabled(v2[2], v10))
    {
      id v13 = a1;
      uint64_t v29 = v4;
      BOOL v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v31 = v28;
      *(_DWORD *)BOOL v14 = 136315138;
      unint64_t v26 = v14 + 4;
      id v15 = v13;
      id v16 = [v15 description];
      int v27 = v12;
      id v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_t v25 = v11;
      uint64_t v19 = v18;
      unint64_t v21 = v20;

      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v4 = v29;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v25, (os_log_type_t)v27, "chooseFlow - receives POMMES response: %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    GeoExperience.geoClientComponent.getter();
    uint64_t v22 = ((uint64_t (*)(char *))(*v2)[16].isa)(v7);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    return 0;
  }
  return v22;
}

uint64_t FlowSelector.chooseFlow(geoClientComponent:)()
{
  uint64_t v0 = (uint8_t *)type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocationActionType();
  uint64_t v85 = *((void *)v0 - 1);
  uint64_t v86 = v0;
  __chkstk_darwin(v0);
  uint64_t v83 = (char *)&v81 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocationAction();
  Class isa = (void (*)(void, void, void))v2[-1].isa;
  os_log_t v94 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v84 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v92 = (char *)&v81 - v5;
  uint64_t v6 = type metadata accessor for NLIntent();
  uint64_t v88 = *(void *)(v6 - 8);
  uint64_t v89 = v6;
  __chkstk_darwin(v6);
  uint64_t v87 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNode();
  uint64_t v91 = *(void *)(v95 - 8);
  uint64_t v8 = __chkstk_darwin(v95);
  id v82 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  int v12 = (char *)&v81 - v11;
  __chkstk_darwin(v10);
  BOOL v14 = (char *)&v81 - v13;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoExperienceType();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v81 - v20;
  (*(void (**)(char *, void, uint64_t))(v16 + 104))((char *)&v81 - v20, enum case for Apple_Parsec_Siri_V2alpha_GeoExperienceType.geoExperienceWhereAmI(_:), v15);
  Apple_Parsec_Siri_V2alpha_GeoClientComponent.experienceType.getter();
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_GeoExperienceType and conformance Apple_Parsec_Siri_V2alpha_GeoExperienceType, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoExperienceType);
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v19, v15);
  v23(v21, v15);
  if (v22)
  {
    static Device.current.getter();
    uint64_t v24 = type metadata accessor for GeoRCHFlowFactoryImpl();
    uint64_t v25 = swift_allocObject();
    uint64_t v99 = v24;
    uint64_t v100 = &protocol witness table for GeoRCHFlowFactoryImpl;
    uint64_t v98 = v25;
    uint64_t v101 = static DialogHelper.globals.getter();
    static AceService.currentAsync.getter();
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for CATService();
    uint64_t v26 = swift_allocObject();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    *(void *)(v26 + 24) = [self bundleForClass:ObjCClassFromMetadata];
    type metadata accessor for OS_os_log();
    *(void *)(v26 + 32) = OS_os_log.init(subsystem:category:)();
    *(unsigned char *)(v26 + 16) = 0;
    uint64_t v102 = v26;
    type metadata accessor for WhereAmIFlow();
    uint64_t v28 = swift_allocObject();
    outlined init with copy of FlowHelperImpl((uint64_t)v97, (uint64_t)v96);
    uint64_t v29 = specialized WhereAmIFlow.init(with:)(v96, v28);
    outlined destroy of FlowHelperImpl((uint64_t)v97);
    *(void *)&v97[0] = v29;
    uint64_t v30 = (unint64_t *)&lazy protocol witness table cache variable for type WhereAmIFlow and conformance WhereAmIFlow;
    uint64_t v31 = type metadata accessor for WhereAmIFlow;
LABEL_3:
    _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_0(v30, (void (*)(uint64_t))v31);
    uint64_t v32 = Flow.eraseToAnyFlow()();
    swift_release();
    return v32;
  }
  char v34 = v92;
  unint64_t v33 = isa;
  uint64_t v35 = v12;
  os_log_t v37 = v94;
  uint64_t v36 = v95;
  uint64_t v38 = v91;
  uint64_t v81 = v14;
  if ((Apple_Parsec_Siri_V2alpha_GeoClientComponent.hasLocationSearchNode.getter() & 1) == 0)
  {
    if ((Apple_Parsec_Siri_V2alpha_GeoClientComponent.hasParkingLocationAction.getter() & 1) == 0) {
      return 0;
    }
    Apple_Parsec_Siri_V2alpha_GeoClientComponent.parkingLocationAction.getter();
    uint64_t v95 = Apple_Parsec_Siri_V2alpha_ParkingLocationAction.note.getter();
    uint64_t v52 = (void (*)(char *, os_log_t))v33[1];
    v52(v34, v37);
    uint64_t v53 = v84;
    Apple_Parsec_Siri_V2alpha_GeoClientComponent.parkingLocationAction.getter();
    uint64_t v54 = v83;
    Apple_Parsec_Siri_V2alpha_ParkingLocationAction.parkingLocationActionType.getter();
    v52(v53, v37);
    uint64_t v55 = v85;
    uint64_t v56 = v54;
    long long v57 = v54;
    os_log_t v58 = v86;
    int v59 = (*(uint64_t (**)(char *, uint8_t *))(v85 + 88))(v57, v86);
    if (v59 == enum case for Apple_Parsec_Siri_V2alpha_ParkingLocationActionType.save(_:))
    {
      id v60 = objc_allocWithZone((Class)INSaveParkingLocationIntent);
      NSString v61 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v62 = [v60 initWithParkingLocation:0 parkingNote:v61];

      outlined init with copy of DeviceState(v90 + 32, (uint64_t)v97);
      type metadata accessor for SaveParkingLocationBaseFlow(0);
      uint64_t v63 = swift_allocObject();
      type metadata accessor for OS_os_log();
      id v64 = v62;
      *(void *)(v63 + 16) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v63 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES) = 0;
      outlined init with take of CATType(v97, v63 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper);
      *(void *)(v63 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState) = v64;
      type metadata accessor for SaveParkingLocationBaseFlow.State(0);
      swift_storeEnumTagMultiPayload();
      *(void *)&v97[0] = v63;
      uint64_t v65 = &lazy protocol witness table cache variable for type SaveParkingLocationBaseFlow and conformance SaveParkingLocationBaseFlow;
      uint64_t v66 = (void (*)(uint64_t))type metadata accessor for SaveParkingLocationBaseFlow;
    }
    else
    {
      int v71 = v59;
      if (v59 == enum case for Apple_Parsec_Siri_V2alpha_ParkingLocationActionType.retrieve(_:))
      {
        swift_bridgeObjectRelease();
        id v72 = [objc_allocWithZone((Class)INRetrieveParkingLocationIntent) init];
        outlined init with copy of DeviceState(v90 + 32, (uint64_t)v97);
        type metadata accessor for RetrieveParkingLocationBaseFlow(0);
        uint64_t v73 = swift_allocObject();
        type metadata accessor for OS_os_log();
        id v64 = v72;
        *(void *)(v73 + 16) = OS_os_log.init(subsystem:category:)();
        *(unsigned char *)(v73 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES) = 0;
        outlined init with take of CATType(v97, v73 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper);
        *(void *)(v73 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState) = v64;
        type metadata accessor for RetrieveParkingLocationBaseFlow.State(0);
        swift_storeEnumTagMultiPayload();
        *(void *)&v97[0] = v73;
        uint64_t v65 = (unint64_t *)&lazy protocol witness table cache variable for type RetrieveParkingLocationBaseFlow and conformance RetrieveParkingLocationBaseFlow;
        uint64_t v66 = (void (*)(uint64_t))type metadata accessor for RetrieveParkingLocationBaseFlow;
      }
      else
      {
        int v74 = enum case for Apple_Parsec_Siri_V2alpha_ParkingLocationActionType.delete(_:);
        swift_bridgeObjectRelease();
        BOOL v75 = v71 == v74;
        uint64_t v76 = v90;
        if (!v75)
        {
          static os_log_type_t.error.getter();
          os_log(_:dso:log:_:_:)();
          (*(void (**)(char *, uint8_t *))(v55 + 8))(v56, v58);
          type metadata accessor for UnsupportedRequestFlow();
          uint64_t v80 = swift_allocObject();
          type metadata accessor for OS_os_log();
          *(void *)(v80 + 16) = OS_os_log.init(subsystem:category:)();
          *(void *)&v97[0] = v80;
          uint64_t v30 = (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow;
          uint64_t v31 = type metadata accessor for UnsupportedRequestFlow;
          goto LABEL_3;
        }
        id v77 = [objc_allocWithZone((Class)INDeleteParkingLocationIntent) init];
        outlined init with copy of DeviceState(v76 + 32, (uint64_t)v97);
        type metadata accessor for DeleteParkingLocationBaseFlow(0);
        uint64_t v78 = swift_allocObject();
        type metadata accessor for OS_os_log();
        id v64 = v77;
        *(void *)(v78 + 16) = OS_os_log.init(subsystem:category:)();
        *(unsigned char *)(v78 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES) = 0;
        outlined init with take of CATType(v97, v78 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper);
        *(void *)(v78 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState) = v64;
        type metadata accessor for DeleteParkingLocationBaseFlow.State(0);
        swift_storeEnumTagMultiPayload();
        *(void *)&v97[0] = v78;
        uint64_t v65 = &lazy protocol witness table cache variable for type DeleteParkingLocationBaseFlow and conformance DeleteParkingLocationBaseFlow;
        uint64_t v66 = (void (*)(uint64_t))type metadata accessor for DeleteParkingLocationBaseFlow;
      }
    }
    _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_0(v65, v66);
    uint64_t v32 = Flow.eraseToAnyFlow()();
    swift_release();

    return v32;
  }
  uint64_t v39 = v81;
  Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter();
  os_log_type_t v40 = static os_log_type_t.info.getter();
  uint64_t v41 = v90;
  uint64_t v42 = *(NSObject **)(v90 + 16);
  uint64_t v43 = v36;
  Class isa = *(void (**)(void, void, void))(v38 + 16);
  isa(v35, v39, v36);
  os_log_t v94 = v42;
  if (os_log_type_enabled(v42, v40))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v92 = (char *)swift_slowAlloc();
    *(void *)&v97[0] = v92;
    uint64_t v86 = v44;
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v45 = v90;
    isa(v82, v35, v36);
    uint64_t v46 = String.init<A>(describing:)();
    *(void *)&v96[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v48 = *(void (**)(char *, uint64_t))(v38 + 8);
    v48(v35, v43);
    _os_log_impl(&dword_0, v94, v40, "chooseFlow - receives POMMES intent: %s", v86, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v50 = v88;
    uint64_t v49 = v89;
    id v51 = v87;
  }
  else
  {
    os_log_t v48 = *(void (**)(char *, uint64_t))(v38 + 8);
    v48(v35, v43);
    uint64_t v50 = v88;
    uint64_t v49 = v89;
    id v51 = v87;
    uint64_t v45 = v41;
  }
  type metadata accessor for LocationSearchIntentBuilder();
  swift_allocObject();
  uint64_t v67 = *LocationSearchIntentBuilder.init()();
  uint64_t v68 = v81;
  uint64_t v69 = (*(uint64_t (**)(char *))(v67 + 376))(v81);
  uint64_t v70 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v69 + 456))(v70);
  swift_release();
  uint64_t v32 = (*(uint64_t (**)(char *))(*(void *)v45 + 112))(v51);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v49);
  v48(v68, v95);
  return v32;
}

uint64_t FlowSelector.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 32);
  return v0;
}

uint64_t FlowSelector.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 32);

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t specialized WhereAmIFlow.init(with:)(_OWORD *a1, uint64_t a2)
{
  uint64_t v12[3] = &type metadata for FlowHelperImpl;
  v12[4] = &protocol witness table for FlowHelperImpl;
  uint64_t v4 = swift_allocObject();
  v12[0] = v4;
  long long v5 = a1[9];
  *(_OWORD *)(v4 + 144) = a1[8];
  *(_OWORD *)(v4 + 160) = v5;
  *(_OWORD *)(v4 + 176) = a1[10];
  long long v6 = a1[5];
  *(_OWORD *)(v4 + 80) = a1[4];
  *(_OWORD *)(v4 + 96) = v6;
  long long v7 = a1[7];
  *(_OWORD *)(v4 + 112) = a1[6];
  *(_OWORD *)(v4 + 128) = v7;
  long long v8 = a1[1];
  *(_OWORD *)(v4 + 16) = *a1;
  *(_OWORD *)(v4 + 32) = v8;
  long long v9 = a1[3];
  *(_OWORD *)(v4 + 48) = a1[2];
  *(_OWORD *)(v4 + 64) = v9;
  type metadata accessor for OS_os_log();
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)();
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 2;
  outlined init with copy of DeviceState((uint64_t)v12, a2 + 40);
  *(void *)(a2 + 80) = *(void *)(v4 + 184);
  swift_retain();
  static os_log_type_t.default.getter();
  id v10 = *(id *)(a2 + 16);
  os_log(_:dso:log:_:_:)();

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v12);
  return a2;
}

uint64_t specialized FlowSelector.init(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v60);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_0, a1, a3);
  type metadata accessor for OS_os_log();
  uint64_t v46 = a2;
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)();
  long long v58 = xmmword_C2DE0;
  outlined init with copy of DeviceState((uint64_t)&v60, (uint64_t)v57);
  uint64_t v8 = swift_allocObject();
  outlined init with take of CATType(v57, v8 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in FlowSelector.init(with:);
  *(void *)(v9 + 24) = v8;
  v59[0] = &outlined read-only object #0 of specialized FlowSelector.init(with:);
  v59[1] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  v59[2] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?);
  v59[3] = v9;
  outlined init with copy of DeviceState((uint64_t)&v60, (uint64_t)v56);
  uint64_t v10 = swift_allocObject();
  outlined init with take of CATType(v56, v10 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = partial apply for closure #2 in FlowSelector.init(with:);
  *(void *)(v11 + 24) = v10;
  v59[4] = &outlined read-only object #1 of specialized FlowSelector.init(with:);
  v59[5] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  v59[6] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v59[7] = v11;
  outlined init with copy of DeviceState((uint64_t)&v60, (uint64_t)v55);
  uint64_t v12 = swift_allocObject();
  outlined init with take of CATType(v55, v12 + 16);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = partial apply for closure #3 in FlowSelector.init(with:);
  *(void *)(v13 + 24) = v12;
  v59[8] = &outlined read-only object #2 of specialized FlowSelector.init(with:);
  v59[9] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  v59[10] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v59[11] = v13;
  outlined init with copy of DeviceState((uint64_t)&v60, (uint64_t)v54);
  uint64_t v14 = swift_allocObject();
  outlined init with take of CATType(v54, v14 + 16);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = partial apply for closure #4 in FlowSelector.init(with:);
  *(void *)(v15 + 24) = v14;
  v59[12] = &outlined read-only object #3 of specialized FlowSelector.init(with:);
  v59[13] = &outlined read-only object #4 of specialized FlowSelector.init(with:);
  v59[14] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v59[15] = v15;
  uint64_t v16 = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v17 = 0;
  while (1)
  {
    if (v17 >= (unint64_t)v58) {
      goto LABEL_30;
    }
    unint64_t v47 = v17;
    uint64_t v18 = &v59[4 * v17];
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v22 = v18[2];
    uint64_t v21 = v18[3];
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v21;
    uint64_t v50 = *(void *)(v19 + 16);
    if (v50) {
      break;
    }
    swift_retain();
    swift_release();
LABEL_3:
    unint64_t v17 = v47 + 1;
    if (v47 == 3) {
      goto LABEL_28;
    }
  }
  uint64_t v52 = *(void *)(v20 + 16);
  uint64_t v49 = v19 + 32;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v24 = 0;
  uint64_t v48 = v19;
  while (1)
  {
    if (v24 >= *(void *)(v19 + 16))
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v52) {
      break;
    }
LABEL_8:
    if (++v24 == v50)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_3;
    }
  }
  unint64_t v51 = v24;
  __int16 v53 = *(unsigned __int8 *)(v49 + v24);
  swift_bridgeObjectRetain();
  uint64_t v25 = 0;
  while (1)
  {
    uint64_t v27 = v20;
    __int16 v28 = *(unsigned __int8 *)(v20 + v25 + 32);
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LocationSearchIntent) -> (@out AnyFlow?);
    *(void *)(v29 + 24) = v23;
    uint64_t v30 = v23;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v57[0] = v16;
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v53 | (unsigned __int16)(v28 << 8));
    uint64_t v34 = v16[2];
    BOOL v35 = (v32 & 1) == 0;
    uint64_t v36 = v34 + v35;
    if (__OFADD__(v34, v35)) {
      break;
    }
    char v37 = v32;
    if (v16[3] >= v36)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v16 = *(void **)&v57[0];
        if (v32) {
          goto LABEL_12;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v16 = *(void **)&v57[0];
        if (v37) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v53 | (unsigned __int16)(v28 << 8));
      if ((v37 & 1) != (v39 & 1)) {
        goto LABEL_31;
      }
      unint64_t v33 = v38;
      uint64_t v16 = *(void **)&v57[0];
      if (v37)
      {
LABEL_12:
        uint64_t v26 = (void *)(v16[7] + 16 * v33);
        swift_release();
        *uint64_t v26 = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
        v26[1] = v29;
        goto LABEL_13;
      }
    }
    v16[(v33 >> 6) + 8] |= 1 << v33;
    os_log_type_t v40 = (unsigned char *)(v16[6] + 2 * v33);
    *os_log_type_t v40 = v53;
    v40[1] = v28;
    uint64_t v41 = (void *)(v16[7] + 16 * v33);
    *uint64_t v41 = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
    v41[1] = v29;
    uint64_t v42 = v16[2];
    BOOL v43 = __OFADD__(v42, 1);
    uint64_t v44 = v42 + 1;
    if (v43) {
      goto LABEL_27;
    }
    v16[2] = v44;
LABEL_13:
    ++v25;
    swift_bridgeObjectRelease();
    uint64_t v20 = v27;
    uint64_t v23 = v30;
    if (v52 == v25)
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = v48;
      unint64_t v24 = v51;
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([LocationSearchIntent.LocationSearchVerbValue], [LocationSearchIntent.LocationSearchNounValue], ()));
  swift_arrayDestroy();
  *(void *)(v46 + 24) = v16;
  outlined init with take of CATType(&v60, v46 + 32);
  return v46;
}

unint64_t lazy protocol witness table accessor for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey()
{
  unint64_t result = lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey;
  if (!lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey;
  if (!lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowSelector.FlowSelectorKey and conformance FlowSelector.FlowSelectorKey);
  }
  return result;
}

uint64_t type metadata accessor for FlowSelector()
{
  return self;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FlowSelector.FlowSelectorKey(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 65287 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65287 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65287;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65287;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65287;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FlowSelector.FlowSelectorKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65287 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65287 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 249;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x66754);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowSelector.FlowSelectorKey()
{
  return &type metadata for FlowSelector.FlowSelectorKey;
}

uint64_t _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_667D4()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t partial apply for closure #1 in FlowSelector.init(with:)(uint64_t a1)
{
  return closure #1 in FlowSelector.init(with:)(a1, v1 + 16);
}

uint64_t sub_6683C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)(a1, *(uint64_t (**)(void))(v2 + 16), a2);
}

uint64_t sub_6687C()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #2 in FlowSelector.init(with:)(uint64_t a1)
{
  return closure #2 in FlowSelector.init(with:)(a1, v1 + 16, 0);
}

uint64_t partial apply for closure #3 in FlowSelector.init(with:)(uint64_t a1)
{
  return closure #2 in FlowSelector.init(with:)(a1, v1 + 16, 1);
}

uint64_t partial apply for closure #4 in FlowSelector.init(with:)(uint64_t a1)
{
  return closure #4 in FlowSelector.init(with:)(a1, v1 + 16);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LocationSearchIntent) -> (@out AnyFlow?)(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t RuntimeError.__allocating_init(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t RuntimeError.init(message:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t RuntimeError.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RuntimeError()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UnsupportedError()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t static RuntimeError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t RuntimeError.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RuntimeError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16)
    && *(void *)(*(void *)a1 + 24) == *(void *)(*(void *)a2 + 24))
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DataMissingError()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t outlined copy of Errors(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for Errors(uint64_t a1)
{
  return outlined consume of Errors(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of Errors(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Errors(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Errors(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Errors(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Errors(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of Errors(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Errors(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Errors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Errors(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for Errors(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Errors()
{
  return &type metadata for Errors;
}

uint64_t type metadata accessor for RuntimeError()
{
  return self;
}

uint64_t type metadata accessor for UnsupportedError()
{
  return self;
}

uint64_t type metadata accessor for DataMissingError()
{
  return self;
}

uint64_t RetrieveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v8 = specialized RetrieveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(v7, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v8;
}

uint64_t key path setter for RetrieveParkingLocationBaseFlow.flowState : RetrieveParkingLocationBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0);
  __chkstk_darwin(ParkingLocationBase - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RetrieveParkingLocationBaseFlow.State(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 120))(v6);
}

uint64_t RetrieveParkingLocationBaseFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState;
  swift_beginAccess();
  return outlined init with copy of RetrieveParkingLocationBaseFlow.State(v3, a1);
}

uint64_t RetrieveParkingLocationBaseFlow.flowState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState;
  swift_beginAccess();
  outlined assign with take of RetrieveParkingLocationBaseFlow.State(a1, v3);
  return swift_endAccess();
}

uint64_t (*RetrieveParkingLocationBaseFlow.flowState.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t RetrieveParkingLocationBaseFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper;
  swift_beginAccess();
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t RetrieveParkingLocationBaseFlow.flowHelper.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, v3);
  return swift_endAccess();
}

uint64_t (*RetrieveParkingLocationBaseFlow.flowHelper.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t RetrieveParkingLocationBaseFlow.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES);
  swift_beginAccess();
  return *v1;
}

uint64_t RetrieveParkingLocationBaseFlow.isPOMMES.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*RetrieveParkingLocationBaseFlow.isPOMMES.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t RetrieveParkingLocationBaseFlow.init(flowHelper:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = specialized RetrieveParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v9, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v11;
}

uint64_t RetrieveParkingLocationBaseFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0);
  uint64_t v4 = __chkstk_darwin(ParkingLocationBase);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t))(*(void *)v1 + 112))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *v6;
      *(unsigned char *)(a1 + 8) = 0;
      uint64_t v8 = enum case for RCHFlowResult.error<A, B>(_:);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(a1, v8, v9);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, v6, v15);
    }
  }
  else
  {
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v11 = swift_allocError();
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    *(unsigned char *)(v12 + 16) = 3;
    *(void *)a1 = v11;
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v13 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(a1, v13, v14);
    return outlined destroy of RetrieveParkingLocationBaseFlow.State((uint64_t)v6);
  }
}

uint64_t RetrieveParkingLocationBaseFlow.onInput(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Input();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Parse();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (id *)((char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  int v12 = (*(uint64_t (**)(id *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v11, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    uint64_t v13 = v2[2];
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "RetrieveParkingLocationBaseFlow onInput returns true for NLv3IntentPlusServerConversion.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = type metadata accessor for NLIntent();
    (*(void (**)(id *, uint64_t))(*(void *)(v16 - 8) + 8))(v11, v16);
    return 1;
  }
  else if (v12 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v9 + 96))(v11, v8);

    uint64_t v17 = 1;
    (*(void (**)(uint64_t))(*v2 + 168))(1);
    uint64_t v18 = v2[2];
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "RetrieveParkingLocationBaseFlow onInput returns true for Pommes response.", v20, 2u);
      swift_slowDealloc();
      return 1;
    }
  }
  else
  {
    uint64_t v21 = v2[2];
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      os_log_t v29 = v21;
      unint64_t v24 = (uint8_t *)v23;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v32 = v30;
      *(_DWORD *)unint64_t v24 = 136315138;
      v28[1] = v24 + 4;
      uint64_t v25 = Input.description.getter();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl(&dword_0, v29, v22, "SiriGeo currently doesn't support parse type: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    (*(void (**)(id *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  return v17;
}

uint64_t RetrieveParkingLocationBaseFlow.executeState()(uint64_t a1)
{
  void v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(RetrieveParkingLocationBaseFlow.executeState(), 0, 0);
}

uint64_t RetrieveParkingLocationBaseFlow.executeState()()
{
  uint64_t v43 = v0;
  (*(void (**)(void))(**(void **)(v0 + 48) + 112))();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v2 = *(void *)(v0 + 48);
      uint64_t v3 = **(void **)(v0 + 104);
      os_log_type_t v4 = static os_log_type_t.error.getter();
      uint64_t v5 = *(NSObject **)(v2 + 16);
      os_log_type_t v6 = v4;
      if (os_log_type_enabled(v5, v4))
      {
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 136315138;
        *(void *)(v0 + 24) = v3;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v8 = String.init<A>(describing:)();
        *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v5, v6, "RetrieveParkingLocationBaseFlow execute requestUnsupported with error %s", v7, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      static ExecuteResponse.complete()();
      swift_errorRelease();
    }
    else
    {
      uint64_t v20 = *(void *)(v0 + 80);
      uint64_t v19 = *(void *)(v0 + 88);
      uint64_t v22 = *(void *)(v0 + 56);
      uint64_t v21 = *(void *)(v0 + 64);
      uint64_t v23 = *(void *)(v0 + 48);
      (*(void (**)(uint64_t, void, uint64_t))(v21 + 32))(v19, *(void *)(v0 + 104), v22);
      os_log_type_t v24 = static os_log_type_t.info.getter();
      uint64_t v25 = *(NSObject **)(v23 + 16);
      unint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
      v26(v20, v19, v22);
      os_log_type_t v27 = v24;
      BOOL v28 = os_log_type_enabled(v25, v24);
      uint64_t v29 = *(void *)(v0 + 80);
      if (v28)
      {
        log = v25;
        uint64_t v30 = *(void *)(v0 + 64);
        uint64_t v31 = *(void *)(v0 + 72);
        uint64_t v32 = *(void *)(v0 + 56);
        unint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)unint64_t v33 = 136315138;
        v26(v31, v29, v32);
        uint64_t v34 = String.init<A>(describing:)();
        *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
        v36(v29, v32);
        _os_log_impl(&dword_0, log, v27, "RetrieveParkingLocationBaseFlow execute rchComplete with result %s", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v36 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 64) + 8);
        v36(*(void *)(v0 + 80), *(void *)(v0 + 56));
      }
      uint64_t v37 = *(void *)(v0 + 88);
      uint64_t v38 = *(void *)(v0 + 56);
      static ExecuteResponse.complete()();
      v36(v37, v38);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
  else
  {
    uint64_t v10 = *(uint64_t **)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v12 = *v10;
    *(void *)(v0 + 112) = *v10;
    uint64_t v13 = *(NSObject **)(v11 + 16);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "RetrieveParkingLocationBaseFlow execute state handle.", v15, 2u);
      swift_slowDealloc();
    }
    os_log_type_t v40 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 48) + 216)
                                                   + **(int **)(**(void **)(v0 + 48) + 216));
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v16;
    *uint64_t v16 = v0;
    v16[1] = DeleteParkingLocationBaseFlow.executeState();
    uint64_t v17 = *(void *)(v0 + 40);
    return v40(v17, v12);
  }
}

uint64_t RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
  v3[22] = v4;
  v3[23] = *(void *)(v4 - 8);
  v3[24] = swift_task_alloc();
  return _swift_task_switch(RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:), 0, 0);
}

uint64_t RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:)()
{
  uint64_t v1 = *(NSObject **)(*(void *)(v0 + 168) + 16);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "RetrieveParkingLocationBaseFlow makeRCHflow.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v22 = *(void *)(v0 + 160);
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INRetrieveParkingLocationIntent);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INRetrieveParkingLocationIntentResponse);
  RCHChildFlowProducersAsync.init()();
  type metadata accessor for App();
  swift_allocObject();
  uint64_t v21 = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  uint64_t v19 = v4;
  uint64_t v7 = RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  uint64_t v20 = *(void (**)(void))(*(void *)v6 + 136);
  ((void (*)(uint64_t))v20)(v7);
  type metadata accessor for RetrieveParkingHandleIntentStrategy();
  uint64_t v8 = swift_allocObject();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v8 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType((long long *)(v0 + 16), v8 + 24);
  *(unsigned char *)(v8 + 64) = 0;
  *(void *)(v0 + 136) = v8;
  lazy protocol witness table accessor for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy(&lazy protocol witness table cache variable for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy, (void (*)(uint64_t))type metadata accessor for RetrieveParkingHandleIntentStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = OS_os_log.init(subsystem:category:)();
  v20();
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 56))(v11, v12);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v13);
  *(void *)(v0 + 144) = v10;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8);
  uint64_t ParkingHandleIntentStrategy = lazy protocol witness table accessor for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy(&lazy protocol witness table cache variable for type RetrieveParkingBaseRCHStrategy and conformance RetrieveParkingBaseRCHStrategy, (void (*)(uint64_t))type metadata accessor for RetrieveParkingBaseRCHStrategy);
  v15(v0 + 144, v19, v21, v22, ParkingBaseRCHStrategy, ParkingHandleIntentStrategy, v13, v14);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v19, v5);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t closure #1 in RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0);
  __chkstk_darwin(ParkingLocationBase);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *))(*(void *)a2 + 120))(v6);
}

uint64_t RetrieveParkingLocationBaseFlow.deinit()
{
  outlined destroy of RetrieveParkingLocationBaseFlow.State(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper);
  return v0;
}

uint64_t RetrieveParkingLocationBaseFlow.__deallocating_deinit()
{
  outlined destroy of RetrieveParkingLocationBaseFlow.State((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper);
  uint64_t v1 = *((unsigned int *)*v0 + 12);
  uint64_t v2 = *((unsigned __int16 *)*v0 + 26);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance RetrieveParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance RetrieveParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance RetrieveParkingLocationBaseFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 208) + **(int **)(**(void **)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance RetrieveParkingLocationBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance RetrieveParkingLocationBaseFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable();

  return FSMFlow.execute(completion:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute() in conformance RetrieveParkingLocationBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  void *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance RetrieveParkingLocationBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RetrieveParkingLocationBaseFlow(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t specialized RetrieveParkingLocationBaseFlow.init(flowHelper:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a1, a4);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(a3 + 16) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES) = 0;
  outlined init with take of CATType(&v11, a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper);
  *(void *)(a3 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState) = a2;
  type metadata accessor for RetrieveParkingLocationBaseFlow.State(0);
  swift_storeEnumTagMultiPayload();
  return a3;
}

uint64_t specialized RetrieveParkingLocationBaseFlow.__allocating_init(flowHelper:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  long long v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RetrieveParkingLocationBaseFlow(0);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return specialized RetrieveParkingLocationBaseFlow.init(flowHelper:intent:)((uint64_t)v11, a2, v12, a4, a5);
}

uint64_t outlined init with copy of RetrieveParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ParkingLocationBase - 8) + 16))(a2, a1, ParkingLocationBase);
  return a2;
}

uint64_t type metadata accessor for RetrieveParkingLocationBaseFlow.State(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for RetrieveParkingLocationBaseFlow.State);
}

uint64_t outlined assign with take of RetrieveParkingLocationBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ParkingLocationBase - 8) + 40))(a2, a1, ParkingLocationBase);
  return a2;
}

uint64_t outlined destroy of RetrieveParkingLocationBaseFlow.State(uint64_t a1)
{
  uint64_t ParkingLocationBase = type metadata accessor for RetrieveParkingLocationBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(ParkingLocationBase - 8) + 8))(a1, ParkingLocationBase);
  return a1;
}

uint64_t lazy protocol witness table accessor for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:)(uint64_t a1)
{
  return closure #1 in RetrieveParkingLocationBaseFlow.makeRCHFlow(intent:)(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for RetrieveParkingLocationBaseFlow(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy(&lazy protocol witness table cache variable for type RetrieveParkingLocationBaseFlow and conformance RetrieveParkingLocationBaseFlow, (void (*)(uint64_t))type metadata accessor for RetrieveParkingLocationBaseFlow);
  uint64_t result = lazy protocol witness table accessor for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy(&lazy protocol witness table cache variable for type RetrieveParkingLocationBaseFlow and conformance RetrieveParkingLocationBaseFlow, (void (*)(uint64_t))type metadata accessor for RetrieveParkingLocationBaseFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for RetrieveParkingLocationBaseFlow(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for RetrieveParkingLocationBaseFlow);
}

uint64_t sub_68F0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112))();
}

uint64_t sub_68F54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136))();
}

uint64_t sub_68F98(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 144))(v4);
}

uint64_t sub_68FF4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_69044(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168))(*a1);
}

uint64_t ObjC metadata update function for RetrieveParkingLocationBaseFlow()
{
  return type metadata accessor for RetrieveParkingLocationBaseFlow(0);
}

uint64_t type metadata completion function for RetrieveParkingLocationBaseFlow()
{
  uint64_t result = type metadata accessor for RetrieveParkingLocationBaseFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for RetrieveParkingLocationBaseFlow.State(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *a2;
      swift_errorRetain();
      *(void *)a1 = v7;
    }
    else
    {
      uint64_t v10 = *a2;
      *(void *)a1 = *a2;
      long long v11 = v10;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for RetrieveParkingLocationBaseFlow.State(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      int v5 = *(void (**)(void **, uint64_t))(*(void *)(v4 - 8) + 8);
      v5(a1, v4);
      break;
    case 1:
      swift_errorRelease();
      break;
    case 0:
      uint64_t v3 = *a1;

      break;
  }
}

void **initializeWithCopy for RetrieveParkingLocationBaseFlow.State(void **a1, void **a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    int v5 = *a2;
    swift_errorRetain();
    *a1 = v5;
  }
  else
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    id v8 = v7;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for RetrieveParkingLocationBaseFlow.State(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of RetrieveParkingLocationBaseFlow.State((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      int v5 = *a2;
      swift_errorRetain();
      *a1 = v5;
    }
    else
    {
      uint64_t v7 = *a2;
      *a1 = *a2;
      id v8 = v7;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for RetrieveParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for RetrieveParkingLocationBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of RetrieveParkingLocationBaseFlow.State((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for RetrieveParkingLocationBaseFlow.State()
{
  type metadata accessor for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>()
{
  if (!lazy cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>)
  {
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INRetrieveParkingLocationIntent);
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INRetrieveParkingLocationIntentResponse);
    unint64_t v0 = type metadata accessor for RCHFlowResult();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RCHFlowResult<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
    }
  }
}

unint64_t EndNavigationFlow.flowState.getter()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 32);
  outlined copy of EndNavigationFlow.State(v1);
  return v1;
}

unint64_t outlined copy of EndNavigationFlow.State(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t EndNavigationFlow.flowState.setter(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = a1;
  return outlined consume of EndNavigationFlow.State(v3);
}

unint64_t outlined consume of EndNavigationFlow.State(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t EndNavigationFlow.checkNavigation.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 80);
}

uint64_t EndNavigationFlow.checkNavigation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*TrafficIncidentRequestSupportedCheckFlow.exitValue.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

void *EndNavigationFlow.__allocating_init(with:checkNavigation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  __chkstk_darwin(v9);
  long long v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized EndNavigationFlow.init(with:checkNavigation:)((uint64_t)v11, a2, a3, v6, v7, v8);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v13;
}

void *EndNavigationFlow.init(with:checkNavigation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  __chkstk_darwin(v9);
  long long v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized EndNavigationFlow.init(with:checkNavigation:)((uint64_t)v11, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v13;
}

uint64_t EndNavigationFlow.__allocating_init()()
{
  v2[3] = &type metadata for FlowHelperImpl;
  v2[4] = &protocol witness table for FlowHelperImpl;
  v2[0] = swift_allocObject();
  FlowHelperImpl.init()((void *)(v2[0] + 16));
  return (*(uint64_t (**)(void *, ValueMetadata *, _UNKNOWN **))(v0 + 192))(v2, &type metadata for AssistantProperties, &protocol witness table for AssistantProperties);
}

uint64_t EndNavigationFlow.executeState()(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return _swift_task_switch(EndNavigationFlow.executeState(), 0, 0);
}

uint64_t EndNavigationFlow.executeState()()
{
  uint64_t v22 = v0;
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 48) + 120))();
  if (!v1)
  {
    uint64_t v19 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)(v0 + 48) + 216)
                                          + **(int **)(**(void **)(v0 + 48) + 216));
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v7;
    void *v7 = v0;
    v7[1] = AnswerETAFlow.executeState();
    uint64_t v4 = *(void *)(v0 + 40);
    int v5 = v19;
    return v5(v4);
  }
  unint64_t v2 = v1;
  if (v1 == 1)
  {
    uint64_t v20 = (uint64_t (*)(void))(*(void *)(**(void **)(v0 + 48) + 232) + **(int **)(**(void **)(v0 + 48) + 232));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v8;
    *uint64_t v8 = v0;
    v8[1] = EndNavigationFlow.executeState();
    return v20();
  }
  else
  {
    if (v1 == 2)
    {
      uint64_t v18 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)(v0 + 48) + 224)
                                            + **(int **)(**(void **)(v0 + 48) + 224));
      unint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 80) = v3;
      *unint64_t v3 = v0;
      v3[1] = AnswerETAFlow.executeState();
      uint64_t v4 = *(void *)(v0 + 40);
      int v5 = v18;
      return v5(v4);
    }
    uint64_t v9 = *(void *)(v0 + 48);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    long long v11 = *(NSObject **)(v9 + 16);
    os_log_type_t v12 = v10;
    if (os_log_type_enabled(v11, v10))
    {
      outlined copy of EndNavigationFlow.State(v2);
      outlined copy of EndNavigationFlow.State(v2);
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v0 + 24) = v2;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v14 = String.init<A>(describing:)();
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of EndNavigationFlow.State(v2);
      outlined consume of EndNavigationFlow.State(v2);
      _os_log_impl(&dword_0, v11, v12, "EndNavigationFlow execute request unsupported with err: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    type metadata accessor for UnsupportedRequestFlow();
    uint64_t v16 = swift_allocObject();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    *(void *)(v16 + 16) = OS_os_log.init(subsystem:category:)();
    *(void *)(v0 + 16) = v16;
    lazy protocol witness table accessor for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow((unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow);
    static ExecuteResponse.complete<A>(next:)();
    outlined consume of EndNavigationFlow.State(v2);
    swift_release();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 48);
  unint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v2 + 208) + **(int **)(*(void *)v2 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 72) = v4;
  *uint64_t v4 = v3;
  v4[1] = AnswerETAFlow.executeState();
  int v5 = *(void *)(v1 + 40);
  return v7(v5);
}

uint64_t EndNavigationFlow.preChecks()(uint64_t a1)
{
  v2[23] = a1;
  char v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = *(void *)(v4 + 64);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  return _swift_task_switch(EndNavigationFlow.preChecks(), 0, 0);
}

uint64_t EndNavigationFlow.preChecks()()
{
  (*(void (**)(void))(**(void **)(v0 + 192) + 168))();
  if ((*(uint64_t (**)(void))(v1 + 8))())
  {
    (*(void (**)(uint64_t))(**(void **)(v0 + 192) + 128))(1);
    static ExecuteResponse.ongoing(requireInput:)();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + 192);
    uint64_t v5 = v4[3];
    *(void *)(v0 + 40) = &type metadata for NavigationControl;
    *(void *)(v0 + 48) = &protocol witness table for NavigationControl;
    *(void *)(v0 + 16) = 0;
    uint64_t v6 = *(void (**)(void))(*v4 + 144);
    uint64_t v7 = (*v4 + 144) & 0xFFFFFFFFFFFFLL | 0x722A000000000000;
    *(void *)(v0 + 240) = v6;
    *(void *)(v0 + 248) = v7;
    v6();
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 80))(v8, v9);
    *(void *)(v0 + 256) = v10;
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v5 + 112)
                                                            + **(int **)(*(void *)v5 + 112));
    long long v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v11;
    void *v11 = v0;
    v11[1] = EndNavigationFlow.preChecks();
    uint64_t v12 = *(void *)(v0 + 232);
    return v13(v12, v0 + 16, v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  unint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = EndNavigationFlow.preChecks();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = EndNavigationFlow.preChecks();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  unint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v13, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  outlined init with take of CATType((long long *)(v0 + 136), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  *(void *)(v0 + 176) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[34];
  unint64_t v2 = v0[24];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v3 = *(void (**)(uint64_t))(*(void *)v2 + 128);
  swift_errorRetain();
  v3(v1);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t EndNavigationFlow.handleDialog()(uint64_t a1)
{
  v2[23] = a1;
  char v2[24] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = *(void *)(v4 + 64);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  return _swift_task_switch(EndNavigationFlow.handleDialog(), 0, 0);
}

uint64_t EndNavigationFlow.handleDialog()()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = v1[3];
  v0[5] = &type metadata for NavigationControl;
  v0[6] = &protocol witness table for NavigationControl;
  v0[2] = 2;
  uint64_t v3 = *(void (**)(void))(*v1 + 144);
  uint64_t v4 = (*v1 + 144) & 0xFFFFFFFFFFFFLL | 0x722A000000000000;
  v0[30] = v3;
  v0[31] = v4;
  v3();
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 80))(v5, v6);
  v0[32] = v7;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 7));
  long long v11 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v2 + 112)
                                                           + **(int **)(*(void *)v2 + 112));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[33] = v8;
  *uint64_t v8 = v0;
  v8[1] = EndNavigationFlow.handleDialog();
  uint64_t v9 = v0[29];
  return v11(v9, v0 + 2, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = EndNavigationFlow.handleDialog();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = EndNavigationFlow.handleDialog();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 240))();
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v13, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 96, v0 + 136);
  uint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  outlined init with take of CATType((long long *)(v0 + 136), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  *(void *)(v0 + 176) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[34];
  uint64_t v2 = v0[24];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v3 = *(void (**)(uint64_t))(*(void *)v2 + 128);
  swift_errorRetain();
  v3(v1);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t EndNavigationFlow.endNavigation()()
{
  *(void *)(v1 + 112) = v0;
  return _swift_task_switch(EndNavigationFlow.endNavigation(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[14];
  uint64_t v2 = [objc_allocWithZone((Class)SALocalSearchNavigationEnd) init];
  v0[15] = v2;
  (*(void (**)(void))(*(void *)v1 + 144))();
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v5);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[16] = v7;
  uint64_t v8 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for SABaseCommand);
  void *v7 = v0;
  v7[1] = EndNavigationFlow.endNavigation();
  return AceServiceInvokerAsync.submit<A>(_:)(v2, v5, v8, v6);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 7));
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  uint64_t v2 = (void *)v0[17];
  uint64_t v3 = v0[14];
  uint64_t v4 = (void *)v0[15];
  if (v1)
  {
    static os_log_type_t.default.getter();
    uint64_t v5 = 2;
    os_log(_:dso:log:_:_:)();
    uint64_t v6 = v4;
  }
  else
  {
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v5 = swift_allocError();
    *(_OWORD *)uint64_t v7 = xmmword_C0E40;
    *(unsigned char *)(v7 + 16) = 3;
    uint64_t v6 = v2;
    uint64_t v2 = v4;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 128))(v5);

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  os_log_type_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void (*v12)(uint64_t);
  uint64_t (*v13)(void);
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = v0[14];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 7));
  uint64_t v2 = static os_log_type_t.error.getter();
  uint64_t v3 = *(NSObject **)(v1 + 16);
  uint64_t v4 = v2;
  if (os_log_type_enabled(v3, v2))
  {
    uint64_t v5 = v0[18];
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    unint64_t v15 = v7;
    v0[12] = v5;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v8 = String.init<A>(describing:)();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v3, v4, "Ace Command submission failed with error: %s ", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v10 = v0[18];
  long long v11 = (void *)v0[15];
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v0[14] + 128);
  swift_errorRetain();
  v12(v10);

  swift_errorRelease();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t EndNavigationFlow.endNavigation()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = EndNavigationFlow.endNavigation();
  }
  else {
    uint64_t v4 = EndNavigationFlow.endNavigation();
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t EndNavigationFlow.deinit()
{
  swift_release();
  outlined consume of EndNavigationFlow.State(*(void *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 40);
  return v0;
}

uint64_t EndNavigationFlow.__deallocating_deinit()
{
  swift_release();
  outlined consume of EndNavigationFlow.State(*(void *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 40);

  return _swift_deallocClassInstance(v0, 96, 7);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance EndNavigationFlow@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 120))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance EndNavigationFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance EndNavigationFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 208) + **(int **)(**(void **)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance EndNavigationFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance EndNavigationFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable();

  return FSMFlow.execute(completion:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute() in conformance EndNavigationFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  void *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance EndNavigationFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for EndNavigationFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EndNavigationFlow(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.description.getter(a1, WitnessTable);
}

void *specialized EndNavigationFlow.init(with:checkNavigation:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  v15[3] = a5;
  void v15[4] = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_0, a1, a5);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  a4[2] = OS_os_log.init(subsystem:category:)();
  type metadata accessor for CATService();
  uint64_t v12 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v12 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v12 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v12 + 16) = 0;
  a4[3] = v12;
  a4[4] = 0;
  a4[10] = a2;
  a4[11] = a3;
  outlined init with copy of DeviceState((uint64_t)v15, (uint64_t)(a4 + 5));
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
  return a4;
}

uint64_t sub_6BD74()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t instantiation function for generic protocol witness table for EndNavigationFlow(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow(&lazy protocol witness table cache variable for type EndNavigationFlow and conformance EndNavigationFlow, a2, (void (*)(uint64_t))type metadata accessor for EndNavigationFlow);
  uint64_t result = lazy protocol witness table accessor for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow(&lazy protocol witness table cache variable for type EndNavigationFlow and conformance EndNavigationFlow, v3, (void (*)(uint64_t))type metadata accessor for EndNavigationFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for EndNavigationFlow()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_6BECC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_6BF18(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(unint64_t))(**(void **)a2 + 128);
  outlined copy of EndNavigationFlow.State(*a1);
  return v3(v2);
}

uint64_t sub_6BF74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 144))();
}

uint64_t sub_6BFB8(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 152))(v4);
}

uint64_t sub_6C014@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_6C060(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)a2 + 176))(*a1, a1[1]);
}

ValueMetadata *type metadata accessor for EndNavigationFlow.State()
{
  return &type metadata for EndNavigationFlow.State;
}

double StandardMapData.longitude.getter(double a1, double a2)
{
  return a2;
}

uint64_t StandardMapData.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aLabel_0[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StandardMapData.CodingKeys()
{
  return StandardMapData.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StandardMapData.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized StandardMapData.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance StandardMapData.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StandardMapData.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StandardMapData.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t StandardMapData.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StandardMapData.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v11 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v10 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys;
  if (!lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys;
  if (!lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys;
  if (!lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys;
  if (!lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys);
  }
  return result;
}

void StandardMapData.init(from:)(void *a1)
{
}

void protocol witness for Decodable.init(from:) in conformance StandardMapData(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v6 = specialized StandardMapData.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StandardMapData(void *a1)
{
  return StandardMapData.encode(to:)(a1);
}

uint64_t StandardMapData.makeAppPunchout(idiom:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  char v10 = VRXIdiom.isWatchOS.getter();
  unint64_t v11 = StandardMapData.makePunchoutURI(includeLabel:)((v10 & 1) == 0, a2, a3, a4, a5);
  uint64_t v13 = v12;
  if (one-time initialization token for appName != -1) {
    swift_once();
  }
  BOOL v14 = a1 == 6;
  if (a1 == 6) {
    unint64_t v15 = 0x80000000000C93D0;
  }
  else {
    unint64_t v15 = 0xEE007370614D2E65;
  }
  if (v14) {
    unint64_t v16 = 0xD000000000000012;
  }
  else {
    unint64_t v16 = 0x6C7070612E6D6F63;
  }
  uint64_t v17 = static MapsAppProperties.appName;
  uint64_t v18 = *(void *)algn_FAD48;
  swift_bridgeObjectRetain();

  return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)(v11, v13, v16, v15, v17, v18);
}

unint64_t StandardMapData.makePunchoutURI(includeLabel:)(char a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_C0600;
  *(void *)(v10 + 56) = &type metadata for Double;
  *(void *)(v10 + 64) = &protocol witness table for Double;
  *(double *)(v10 + 32) = a4;
  v11._uint64_t countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 44;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_C0600;
  *(void *)(v13 + 56) = &type metadata for Double;
  *(void *)(v13 + 64) = &protocol witness table for Double;
  *(double *)(v13 + 32) = a5;
  uint64_t v14 = String.init(format:_:)();
  unint64_t v16 = v15;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0 && (a2 || a3 != 0xE000000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    v20._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 15729;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v22._uint64_t countAndFlagsBits = 1030515750;
    v22._object = (void *)0xE400000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18._uint64_t countAndFlagsBits = 1030515750;
    v18._object = (void *)0xE400000000000000;
    String.append(_:)(v18);
  }
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

uint64_t StandardMapData.makePunchoutURL(idiom:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10 = type metadata accessor for CharacterSet();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = VRXIdiom.isWatchOS.getter();
  v20[0] = StandardMapData.makePunchoutURI(includeLabel:)((v14 & 1) == 0, a1, a2, a4, a5);
  v20[1] = v15;
  static CharacterSet.urlQueryAllowed.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRelease();
  if (v17)
  {
    URL.init(string:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a3, 1, 1, v19);
  }
}

id static StandardMapData.blueTint.getter()
{
  id v0 = [objc_allocWithZone((Class)RFColor) init];
  [v0 setName:8];
  return v0;
}

void one-time initialization function for radius()
{
  static GeoMapViewConstants.radius = 0x4030000000000000;
}

uint64_t *GeoMapViewConstants.radius.unsafeMutableAddressor()
{
  if (one-time initialization token for radius != -1) {
    swift_once();
  }
  return &static GeoMapViewConstants.radius;
}

double static GeoMapViewConstants.radius.getter()
{
  return static GeoMapViewConstants.radius.getter(&one-time initialization token for radius, (uint64_t)&static GeoMapViewConstants.radius);
}

void one-time initialization function for frameHeight()
{
  static GeoMapViewConstants.frameHeight = 0x4063A00000000000;
}

uint64_t *GeoMapViewConstants.frameHeight.unsafeMutableAddressor()
{
  if (one-time initialization token for frameHeight != -1) {
    swift_once();
  }
  return &static GeoMapViewConstants.frameHeight;
}

double static GeoMapViewConstants.frameHeight.getter()
{
  return static GeoMapViewConstants.radius.getter(&one-time initialization token for frameHeight, (uint64_t)&static GeoMapViewConstants.frameHeight);
}

double static GeoMapViewConstants.radius.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

double one-time initialization function for marginPadding()
{
  double result = 0.0;
  __asm { FMOV            V1.2D, #6.0 }
  static GeoMapViewConstants.marginPadding = _Q1;
  *(_OWORD *)&qword_FAD30 = xmmword_C3410;
  return result;
}

long long *GeoMapViewConstants.marginPadding.unsafeMutableAddressor()
{
  if (one-time initialization token for marginPadding != -1) {
    swift_once();
  }
  return &static GeoMapViewConstants.marginPadding;
}

double static GeoMapViewConstants.marginPadding.getter()
{
  if (one-time initialization token for marginPadding != -1) {
    swift_once();
  }
  return *(double *)&static GeoMapViewConstants.marginPadding;
}

uint64_t specialized StandardMapData.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

double specialized StandardMapData.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StandardMapData.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StandardMapData.CodingKeys and conformance StandardMapData.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    v10[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v10[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    double v2 = v9;
    v10[13] = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t initializeWithCopy for StandardMapData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for StandardMapData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for StandardMapData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StandardMapData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StandardMapData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StandardMapData()
{
  return &type metadata for StandardMapData;
}

ValueMetadata *type metadata accessor for GeoMapViewConstants()
{
  return &type metadata for GeoMapViewConstants;
}

unsigned char *storeEnumTagSinglePayload for StandardMapData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x6D194);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for StandardMapData.CodingKeys()
{
  return &unk_E67D0;
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.isPOMMES.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t ParkingCommon.__allocating_init(with:isPommes:)(long long *a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  ParkingCommon.init(with:isPommes:)(a1, a2);
  return v4;
}

uint64_t ParkingCommon.init(with:isPommes:)(long long *a1, char a2)
{
  type metadata accessor for OS_os_log();
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v2 + 24);
  *(unsigned char *)(v2 + 64) = a2;
  return v2;
}

uint64_t ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned char v6[40] = a5;
  v6[41] = v5;
  v6[38] = a3;
  v6[39] = a4;
  v6[36] = a1;
  v6[37] = a2;
  type metadata accessor for DialogPhase();
  v6[42] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v6[43] = v7;
  v6[44] = *(void *)(v7 - 8);
  v6[45] = swift_task_alloc();
  return _swift_task_switch(ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:), 0, 0);
}

uint64_t ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:)()
{
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = v1 + 3;
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 128))(v3, v4);
  v0[46] = v5;
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7);
  v0[47] = v8;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v5 + 152) + **(int **)(*(void *)v5 + 152));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[48] = v9;
  *uint64_t v9 = v0;
  v9[1] = ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:);
  uint64_t v10 = v0[37];
  return v12(v10, v8);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  int v71 = v0;
  uint64_t v1 = *(void **)(v0 + 328);
  uint64_t v2 = v1 + 3;
  static os_log_type_t.default.getter();
  oslog = v1[2];
  os_log(_:dso:log:_:_:)();
  static DialogPhase.summary.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 128))(v3, v4);
  *(void *)(v0 + 200) = 0;
  uint64_t v6 = v0 + 80;
  *(void *)(v0 + 224) = &type metadata for GeoLabel;
  *(void *)(v0 + 232) = &protocol witness table for GeoLabel;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 2;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 136))(v0 + 200);
  uint64_t v9 = v8;
  LOBYTE(v4) = v10;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 200);
  if (v4)
  {
    outlined consume of Result<String, Error>(v7, v9, 1);
    uint64_t v7 = 0;
    uint64_t v9 = 0xE000000000000000;
  }
  uint64_t v63 = v0 + 120;
  uint64_t v11 = *(void *)(v0 + 320);
  uint64_t v67 = v7;
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(v0 + 312);
  uint64_t v13 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v13 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    char v14 = *(void **)(v0 + 328);
    uint64_t v16 = v14[6];
    uint64_t v15 = v14[7];
    __swift_project_boxed_opaque_existential_1(v14 + 3, v16);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 128);
    swift_bridgeObjectRetain();
    Swift::String v18 = v17(v16, v15);
    *(void *)(v0 + 264) = &type metadata for GeoLabel;
    *(void *)(v0 + 272) = &protocol witness table for GeoLabel;
    *(void *)(v0 + 240) = v12;
    *(void *)(v0 + 248) = v11;
    *(unsigned char *)(v0 + 256) = 0;
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 136))(v0 + 240);
    Swift::String v21 = v20;
    uint64_t v23 = v22;
    swift_release();
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 240);
    if (v23)
    {
      outlined consume of Result<String, Error>(v19, v21, 1);
      uint64_t v19 = 0;
      uint64_t v65 = 0;
    }
    else
    {
      uint64_t v65 = v21;
    }
    uint64_t v6 = v0 + 80;
  }
  else
  {
LABEL_9:
    uint64_t v19 = 0;
    uint64_t v65 = 0;
  }
  uint64_t v24 = *(void **)(v0 + 328);
  uint64_t v25 = v24[6];
  unint64_t v26 = v24[7];
  __swift_project_boxed_opaque_existential_1(v24 + 3, v25);
  os_log_type_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 128))(v25, v26);
  *(void *)(v0 + 104) = &type metadata for GeoLabel;
  *(void *)(v0 + 112) = &protocol witness table for GeoLabel;
  *(_OWORD *)(v0 + 80) = xmmword_C3610;
  *(unsigned char *)(v0 + 96) = 2;
  BOOL v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 136))(v6);
  uint64_t v30 = v29;
  LOBYTE(v25) = v31;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v6);
  uint64_t v66 = v19;
  if (v25)
  {
    outlined consume of Result<String, Error>(v28, v30, 1);
    BOOL v28 = 0;
    uint64_t v30 = 0xE000000000000000;
  }
  uint64_t v32 = *(void **)(v0 + 328);
  unint64_t v33 = v32[6];
  uint64_t v34 = v32[7];
  __swift_project_boxed_opaque_existential_1(v32 + 3, v33);
  unint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 128))(v33, v34);
  uint64_t v36 = CLPlacemark.makeDialogLocation()();
  *(void *)(v0 + 144) = &type metadata for GeoLabel;
  *(void *)(v0 + 152) = &protocol witness table for GeoLabel;
  *(void *)(v0 + 120) = v36;
  *(void *)(v0 + 128) = 0;
  *(unsigned char *)(v0 + 136) = 1;
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 136))(v63);
  char v39 = v38;
  uint64_t v41 = v40;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v63);
  id v64 = v30;
  if (v41)
  {
    outlined consume of Result<String, Error>(v37, v39, 1);
    uint64_t v37 = 0;
    char v39 = 0xE000000000000000;
  }
  uint64_t v42 = [*(id *)(v0 + 304) location];
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (v42)
  {
    uint64_t v45 = v42;
    [v42 coordinate];
    uint64_t v44 = v46;
  }
  unint64_t v47 = [*(id *)(v0 + 304) location];
  if (v47)
  {
    uint64_t v48 = v47;
    [v47 coordinate];
    uint64_t v43 = v49;
  }
  uint64_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v50))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v51 = (uint8_t *)swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)unint64_t v51 = 136315138;
    *(void *)(v0 + 16) = v66;
    *(void *)(v0 + 24) = v65;
    *(void *)(v0 + 32) = v37;
    *(void *)(v0 + 40) = v39;
    *(void *)(v0 + 48) = v67;
    *(void *)(v0 + 56) = v9;
    *(void *)(v0 + 64) = v44;
    *(void *)(v0 + 72) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v52 = String.init<A>(describing:)();
    *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, oslog, v50, "RF: parking model car: %s", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v54 = *(void **)(v0 + 392);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  *(void *)(v0 + 400) = ResponseFactory.init()();
  *(void *)(v0 + 184) = &type metadata for GeoDataModels;
  *(void *)(v0 + 192) = lazy protocol witness table accessor for type GeoDataModels and conformance GeoDataModels();
  uint64_t v55 = swift_allocObject();
  *(void *)(v0 + 160) = v55;
  *(void *)(v55 + 16) = v66;
  *(void *)(v55 + 24) = v65;
  *(void *)(v55 + 32) = v37;
  *(void *)(v55 + 40) = v39;
  *(void *)(v55 + 48) = v67;
  *(void *)(v55 + 56) = v9;
  *(void *)(v55 + 64) = v44;
  *(void *)(v55 + 72) = v43;
  *(void *)(v55 + 80) = v28;
  *(void *)(v55 + 88) = v64;
  *(unsigned char *)(v55 + 96) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_C0AD0;
  *(void *)(v56 + 32) = v54;
  uint64_t v70 = v56;
  specialized Array._endMutation()();
  long long v57 = v70;
  *(void *)(v0 + 408) = v70;
  osloga = (os_log_t)((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)
                    + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:));
  long long v58 = v54;
  int v59 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v59;
  void *v59 = v0;
  v59[1] = ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:);
  long long v60 = *(void *)(v0 + 360);
  uint64_t v61 = *(void *)(v0 + 288);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))osloga)(v61, v0 + 160, v57, v60);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *v0 + 160;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return _swift_task_switch(ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 344);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 288);
  *(void *)(v1 + 32) = 0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:)(uint64_t a1)
{
  *(void *)(*(void *)v2 + 392) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v3 = ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:);
  }
  else
  {
    uint64_t v3 = ParkingCommon.parkingRFView(dialog:parkingLocation:parkingNote:);
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t RetrieveParkingHandleIntentStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 24);

  return _swift_deallocClassInstance(v0, 65, 7);
}

uint64_t CLLocation.makeDialogLocation()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DialogLocation.Builder();
  swift_allocObject();
  DialogLocation.Builder.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_C0AD0;
  type metadata accessor for DialogLocationValue.Builder();
  swift_allocObject();
  DialogLocationValue.Builder.init()();
  type metadata accessor for DialogLocationAddress.Builder();
  swift_allocObject();
  DialogLocationAddress.Builder.init()();
  id v5 = [v0 shortDescription];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 0, 1, v6);
  dispatch thunk of DialogLocationAddress.Builder.withFullThoroughfare(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v3);
  dispatch thunk of DialogLocationValue.Builder.withAddress(_:)();
  swift_release();
  swift_release();
  uint64_t v7 = dispatch thunk of DialogLocationValue.Builder.build()();
  swift_release();
  *(void *)(v4 + 32) = v7;
  v10[1] = v4;
  specialized Array._endMutation()();
  dispatch thunk of DialogLocation.Builder.withValues(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = dispatch thunk of DialogLocation.Builder.build()();
  swift_release();
  return v8;
}

uint64_t sub_6E3FC()
{
  outlined consume of GeoDataModels(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ParkingCommon()
{
  return self;
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.__allocating_init(with:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v2 + 24);
  return v2;
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.init(with:)(long long *a1)
{
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v1 + 24);
  return v1;
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return _swift_task_switch(SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:), 0, 0);
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v3 = v1[6];
  uint64_t v2 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  v0[5] = &type metadata for SaveParkingLocation;
  v0[6] = &protocol witness table for SaveParkingLocation;
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = 0;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  *uint64_t v4 = v0;
  v4[1] = SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  uint64_t v5 = v0[7];
  return FlowHelper.makeDialogOnlyOutput(model:)(v5, (uint64_t)(v0 + 2), v3, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:), 0, 0);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(SaveParkingLocationUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:), 0, 0);
}

uint64_t SaveParkingLocationUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSaveParkingLocationIntent>);
  uint64_t v1 = ParameterResolutionRecord.intent.getter();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance SaveParkingLocationUnsupportedValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 104)
                                                + **(int **)(**(void **)v2 + 104));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance SaveParkingLocationUnsupportedValueStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 112) + **(int **)(**(void **)v1 + 112));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for HandleFilterProtocolAsync.filterHandles(recipients:) in conformance ContactHandleResolver;
  return v6(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance SaveParkingLocationUnsupportedValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingLocationUnsupportedValueStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t type metadata accessor for SaveParkingLocationUnsupportedValueStrategy()
{
  return self;
}

uint64_t GeoRCHFlowFactoryImpl.makeRCHFlow<A>(strategy:childProducers:resolvedApp:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  v21[0] = a6;
  v21[1] = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for RCHChildFlowProducersAsync();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v12 = *(void *)(a5 - 8);
  __chkstk_darwin(v9);
  char v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for RCHFlowFactory();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  Swift::String v18 = (char *)v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v22, a5);
  type metadata accessor for RCHChildFlowFactory();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v23, v7);
  RCHChildFlowFactory.__allocating_init(producers:)();
  RCHFlowFactory.init(strategy:childFlowFactory:)();
  uint64_t v19 = RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  return v19;
}

uint64_t protocol witness for GeoRCHFlowFactory.makeRCHFlow<A>(strategy:childProducers:resolvedApp:intent:) in conformance GeoRCHFlowFactoryImpl()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t type metadata accessor for GeoRCHFlowFactoryImpl()
{
  return self;
}

uint64_t UnsupportedRequestFlow.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t UnsupportedRequestFlow.execute()(uint64_t a1)
{
  v1[17] = a1;
  uint64_t v2 = type metadata accessor for TemplatingResult();
  v1[18] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[19] = v3;
  v1[20] = *(void *)(v3 + 64);
  v1[21] = swift_task_alloc();
  uint64_t v4 = swift_task_alloc();
  v1[22] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v1[23] = v5;
  void *v5 = v1;
  v5[1] = UnsupportedRequestFlow.execute();
  return static ErrorTemplates.genericErrorLegacy()(v4);
}

uint64_t UnsupportedRequestFlow.execute()()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = UnsupportedRequestFlow.execute();
  }
  else {
    uint64_t v2 = UnsupportedRequestFlow.execute();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 144);
  *(void *)(v0 + 40) = &type metadata for FlowHelperImpl;
  *(void *)(v0 + 48) = &protocol witness table for FlowHelperImpl;
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 16) = v6;
  outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, v6 + 16);
  outlined init with copy of DeviceState(v6 + 144, v0 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v5);
  outlined init with copy of DeviceState(v0 + 16, v0 + 96);
  uint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v5);
  outlined init with take of CATType((long long *)(v0 + 96), v8 + ((v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 200) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v5);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v9;
  *uint64_t v9 = v0;
  v9[1] = UnsupportedRequestFlow.execute();
  uint64_t v10 = *(void *)(v0 + 136);
  return SimpleOutputFlowAsync.execute()(v10);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  static ExecuteResponse.complete()();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t UnsupportedRequestFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t UnsupportedRequestFlow.init()()
{
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t sub_6F6B0()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t protocol witness for Flow.on(input:) in conformance UnsupportedRequestFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance UnsupportedRequestFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for Flow.execute() in conformance UnsupportedRequestFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 96) + **(int **)(**(void **)v1 + 96));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance UnsupportedRequestFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UnsupportedRequestFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t sub_6F8E0()
{
  uint64_t v1 = type metadata accessor for TemplatingResult();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + v6);

  return _swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t type metadata accessor for UnsupportedRequestFlow()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow;
  if (!lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow)
  {
    type metadata accessor for UnsupportedRequestFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow);
  }
  return result;
}

uint64_t RetrieveParkingBaseRCHStrategy.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t RetrieveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Parse();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(RetrieveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:), 0, 0);
}

uint64_t RetrieveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  uint64_t v38 = v0;
  uint64_t v1 = (void *)v0[4];
  if (v1)
  {
    uint64_t v2 = v0[5];
    id v3 = v1;
    os_log_type_t v4 = static os_log_type_t.info.getter();
    uint64_t v5 = *(NSObject **)(v2 + 16);
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      id v7 = v3;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      id v3 = v7;
      id v9 = [v3 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v5, v6, "makeIntentFromParse with current intent: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    goto LABEL_10;
  }
  uint64_t v14 = v0[7];
  uint64_t v13 = v0[8];
  uint64_t v15 = v0[6];
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 16))(v13, v0[3], v15);
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v13, v15);
  if (v16 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(void, void))(v0[7] + 96))(v0[8], v0[6]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v17 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    self;
    uint64_t v18 = swift_dynamicCastObjCClass();

    uint64_t v19 = v0[8];
    if (v18)
    {
      Parse.ServerConversion.siriKitIntent.getter();
      swift_release();
      self;
      id v3 = (id)swift_dynamicCastObjCClassUnconditional();
      uint64_t v20 = type metadata accessor for NLIntent();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
LABEL_10:
      swift_task_dealloc();
      os_log_type_t v27 = (uint64_t (*)(id))v0[1];
      return v27(v3);
    }
    type metadata accessor for RuntimeError();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = 0xD000000000000039;
    *(void *)(v31 + 24) = 0x80000000000C9570;
    _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
    swift_allocError();
    *uint64_t v32 = v31;
    swift_willThrow();
    swift_release();
    uint64_t v33 = type metadata accessor for NLIntent();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v19, v33);
  }
  else
  {
    uint64_t v22 = v0[7];
    Swift::String v21 = (void **)v0[8];
    uint64_t v23 = v0[6];
    if (v16 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(void, void))(v22 + 96))(v0[8], v0[6]);
      uint64_t v24 = *v21;
      uint64_t v25 = PommesResponse.firstGeoExperience.getter();
      if (v25)
      {
        unint64_t v26 = (void *)v25;
        id v3 = [objc_allocWithZone((Class)INRetrieveParkingLocationIntent) init];

        goto LABEL_10;
      }
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for RuntimeError();
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = 0xD00000000000002BLL;
      *(void *)(v34 + 24) = 0x80000000000C95F0;
      _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
      swift_allocError();
      *unint64_t v35 = v34;
      swift_willThrow();
    }
    else
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for RuntimeError();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = 0xD000000000000049;
      *(void *)(v29 + 24) = 0x80000000000C9520;
      _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
      swift_allocError();
      *uint64_t v30 = v29;
      swift_willThrow();
      (*(void (**)(void **, uint64_t))(v22 + 8))(v21, v23);
    }
  }
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t RetrieveParkingBaseRCHStrategy.actionForInput(input:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  os_log_type_t v4 = (id *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  os_log_type_t v6 = (char *)&v11 - v5;
  Input.parse.getter();
  (*(void (**)(id *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  int v7 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v4, v0);
  if (v7 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(id *, uint64_t))(v1 + 96))(v4, v0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    static ActionForInput.handle()();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    uint64_t v8 = type metadata accessor for NLIntent();
    return (*(uint64_t (**)(id *, uint64_t))(*(void *)(v8 - 8) + 8))(v4, v8);
  }
  else if (v7 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v1 + 96))(v4, v0);

    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
    static ActionForInput.handle()();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    static ActionForInput.cancel()();
    uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
    v10(v6, v0);
    return ((uint64_t (*)(id *, uint64_t))v10)(v4, v0);
  }
}

uint64_t RetrieveParkingBaseRCHStrategy.init()()
{
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance RetrieveParkingBaseRCHStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 88)
                                                + **(int **)(**(void **)v2 + 88));
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *os_log_type_t v6 = v3;
  v6[1] = protocol witness for HandleFilterProtocolAsync.filterHandles(recipients:) in conformance ContactHandleResolver;
  return v8(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();

  return RCHFlowStrategyAsync.makeParameterMetadata(intent:)(a1, ParkingBaseRCHStrategy, a3);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeErrorResponse(error:) in conformance RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return RCHFlowStrategyAsync.makeErrorResponse(error:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, ParkingBaseRCHStrategy, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, ParkingBaseRCHStrategy, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, ParkingBaseRCHStrategy, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  *unint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)(a1, a2, a3, a4, ParkingBaseRCHStrategy, a6);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  *unint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(a1, a2, a3, a4, ParkingBaseRCHStrategy, a6);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingBaseRCHStrategy = type metadata accessor for RetrieveParkingBaseRCHStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, ParkingBaseRCHStrategy, a4);
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_0(&lazy protocol witness table cache variable for type RetrieveParkingBaseRCHStrategy and conformance RetrieveParkingBaseRCHStrategy, a2, (void (*)(uint64_t))type metadata accessor for RetrieveParkingBaseRCHStrategy);
}

uint64_t type metadata accessor for RetrieveParkingBaseRCHStrategy()
{
  return self;
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_0(&lazy protocol witness table cache variable for type RetrieveParkingBaseRCHStrategy and conformance RetrieveParkingBaseRCHStrategy, a2, (void (*)(uint64_t))type metadata accessor for RetrieveParkingBaseRCHStrategy);
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in RetrieveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_0(&lazy protocol witness table cache variable for type RetrieveParkingBaseRCHStrategy and conformance RetrieveParkingBaseRCHStrategy, a2, (void (*)(uint64_t))type metadata accessor for RetrieveParkingBaseRCHStrategy);
}

uint64_t _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void __swiftcall GeoParkedCar.init(note:localizedAddress:locationInfo:)(GeoFlowDelegatePlugin::GeoParkedCar *__return_ptr retstr, Swift::String_optional note, Swift::String_optional localizedAddress, GeoFlowDelegatePlugin::StandardMapData locationInfo)
{
  retstr->note = note;
  retstr->Swift::String_optional localizedAddress = localizedAddress;
  retstr->locationInfo = locationInfo;
}

double GeoParkedCar.locationInfo.getter()
{
  double v1 = *(double *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

double GeoParkedCar.latitude.getter()
{
  return *(double *)(v0 + 48);
}

double GeoParkedCar.longitude.getter()
{
  return *(double *)(v0 + 56);
}

uint64_t GeoParkedCar.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 1702129518;
  }
  if (a1 == 1) {
    return 0xD000000000000010;
  }
  return 0x6E6F697461636F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoParkedCar.CodingKeys()
{
  return GeoParkedCar.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoParkedCar.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GeoParkedCar.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoParkedCar.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoParkedCar.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoParkedCar.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoParkedCar.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 48);
    long long v12 = *(_OWORD *)(v3 + 32);
    long long v13 = v9;
    v11[15] = 2;
    lazy protocol witness table accessor for type StandardMapData and conformance StandardMapData();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys);
  }
  return result;
}

double GeoParkedCar.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized GeoParkedCar.init(from:)(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoParkedCar(void *a1)
{
  return GeoParkedCar.encode(to:)(a1);
}

uint64_t specialized GeoParkedCar.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 1702129518 && a2 == 0xE400000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000000000C83C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized GeoParkedCar.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoParkedCar.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoParkedCar.CodingKeys and conformance GeoParkedCar.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  LOBYTE(v25) = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v24 = v9;
  LOBYTE(v25) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v22 = v12;
  char v29 = 2;
  lazy protocol witness table accessor for type StandardMapData and conformance StandardMapData();
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = v25;
  uint64_t v15 = v26;
  uint64_t v17 = v27;
  uint64_t v18 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v23;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v16;
  a2[5] = v15;
  a2[6] = v17;
  a2[7] = v18;
  return result;
}

uint64_t destroy for GeoParkedCar()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GeoParkedCar(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GeoParkedCar(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GeoParkedCar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoParkedCar(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoParkedCar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoParkedCar()
{
  return &type metadata for GeoParkedCar;
}

unsigned char *storeEnumTagSinglePayload for GeoParkedCar.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x717FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for GeoParkedCar.CodingKeys()
{
  return &unk_E6970;
}

uint64_t TrafficIncidentUnsupportedValueStrategy.__allocating_init(with:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  TrafficIncidentUnsupportedValueStrategy.init(with:)(a1);
  return v2;
}

uint64_t TrafficIncidentUnsupportedValueStrategy.init(with:)(long long *a1)
{
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for CATService();
  uint64_t v3 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v3 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v3 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v3 + 16) = 1;
  *(void *)(v1 + 24) = v3;
  outlined init with take of CATType(a1, v1 + 32);
  return v1;
}

uint64_t TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[37] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[38] = v4;
  v3[39] = *(void *)(v4 - 8);
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:), 0, 0);
}

uint64_t TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v67 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
  uint64_t v1 = (void *)ParameterResolutionRecord.result.getter();
  v0[42] = (uint64_t)v1;
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v65 = v0;
    uint64_t v4 = *(NSObject **)(v0[36] + 16);
    id v5 = v1;
    os_log_type_t v6 = static os_log_type_t.default.getter();
    uint64_t v7 = (SEL *)&unk_EC000;
    if (os_log_type_enabled(v4, v6))
    {
      long long v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v8 = 136315138;
      v65[32] = (uint64_t)[v3 unsupportedReason];
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      v65[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v7 = (SEL *)&unk_EC000;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v4, v6, "INReportIncidentIncidentTypeUnsupportedReason is %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    if ([v3 v7[74]] != (char *)&dword_0 + 2)
    {
      uint64_t v30 = (void *)v65[36];
      uint64_t v31 = v30[3];
      v65[5] = type metadata accessor for TrafficIncident(0);
      v65[6] = (uint64_t)&protocol witness table for TrafficIncident;
      __swift_allocate_boxed_opaque_existential_0(v65 + 2);
      swift_storeEnumTagMultiPayload();
      uint64_t v32 = v30[7];
      uint64_t v33 = v30[8];
      __swift_project_boxed_opaque_existential_1(v30 + 4, v32);
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 80))(v32, v33);
      v65[46] = v34;
      id v64 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v31 + 112)
                                                                + **(int **)(*(void *)v31 + 112));
      unint64_t v35 = (void *)swift_task_alloc();
      v65[47] = (uint64_t)v35;
      *unint64_t v35 = v65;
      v35[1] = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      uint64_t v36 = v65[40];
      uint64_t v37 = v65 + 2;
      uint64_t v38 = v34;
LABEL_40:
      return v64(v36, v37, v38);
    }
    id v13 = [v3 alternatives];
    uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v15 = (unint64_t)specialized _arrayConditionalCast<A, B>(_:)(v14);
    swift_bridgeObjectRelease();
    if (!v15)
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for RuntimeError();
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = 0xD000000000000046;
      *(void *)(v49 + 24) = 0x80000000000C97A0;
      lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError();
      swift_allocError();
      uint64_t *v50 = v49;
      swift_willThrow();

LABEL_44:
      uint64_t v0 = v65;
      goto LABEL_45;
    }
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v63 = v5;
      if (v16)
      {
LABEL_10:
        uint64_t v66 = _swiftEmptyArrayStorage;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16 & ~(v16 >> 63), 0);
        if (v16 < 0)
        {
          __break(1u);
          return result;
        }
        uint64_t v18 = 0;
        uint64_t v19 = v66;
        do
        {
          if ((v15 & 0xC000000000000001) != 0) {
            id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v20 = *(id *)(v15 + 8 * v18 + 32);
          }
          uint64_t v21 = v20;
          id v22 = [v20 localizedDisplayString];
          if (v22)
          {
            uint64_t v23 = v22;
            uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v26 = v25;
          }
          else
          {

            uint64_t v24 = 0;
            unint64_t v26 = 0xE000000000000000;
          }
          uint64_t v66 = v19;
          unint64_t v28 = v19[2];
          unint64_t v27 = v19[3];
          if (v28 >= v27 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
            uint64_t v19 = v66;
          }
          ++v18;
          v19[2] = v28 + 1;
          char v29 = &v19[2 * v28];
          v29[4] = v24;
          v29[5] = v26;
        }
        while (v16 != v18);
        swift_bridgeObjectRelease();
        uint64_t v39 = v19[2];
        if (v39) {
          goto LABEL_24;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8));
      uint64_t v63 = v5;
      if (v16) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t v39 = _swiftEmptyArrayStorage[2];
    if (v39)
    {
LABEL_24:
      os_log_type_t v40 = v19 + 5;
      uint64_t v41 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v45 = *(v40 - 1);
        uint64_t v46 = *v40;
        uint64_t v47 = HIBYTE(*v40) & 0xF;
        if ((*v40 & 0x2000000000000000) == 0) {
          uint64_t v47 = v45 & 0xFFFFFFFFFFFFLL;
        }
        if (v47)
        {
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v66 = v41;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1);
            uint64_t v41 = v66;
          }
          unint64_t v43 = v41[2];
          unint64_t v42 = v41[3];
          if (v43 >= v42 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
            uint64_t v41 = v66;
          }
          v41[2] = v43 + 1;
          uint64_t v44 = &v41[2 * v43];
          void v44[4] = v45;
          v44[5] = v46;
        }
        v40 += 2;
        --v39;
      }
      while (v39);
      goto LABEL_38;
    }
LABEL_37:
    uint64_t v41 = _swiftEmptyArrayStorage;
LABEL_38:
    swift_bridgeObjectRelease();
    if (v41[2])
    {
      unint64_t v51 = (void *)v65[36];
      uint64_t v52 = v51[3];
      v65[20] = type metadata accessor for TrafficIncident(0);
      v65[21] = (uint64_t)&protocol witness table for TrafficIncident;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v65 + 17);
      uint64_t v54 = (void *)ParameterResolutionRecord.intent.getter();
      char v55 = specialized static TrafficIncidentUtils.isUpdateIntent(intent:)(v54);

      uint64_t *boxed_opaque_existential_0 = (uint64_t)v41;
      *((unsigned char *)boxed_opaque_existential_0 + 8) = v55 & 1;
      swift_storeEnumTagMultiPayload();
      uint64_t v56 = v51[7];
      uint64_t v57 = v51[8];
      __swift_project_boxed_opaque_existential_1(v51 + 4, v56);
      uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 80))(v56, v57);
      v65[43] = v58;
      id v64 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v52 + 112)
                                                                + **(int **)(*(void *)v52 + 112));
      int v59 = (void *)swift_task_alloc();
      v65[44] = (uint64_t)v59;
      void *v59 = v65;
      v59[1] = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      uint64_t v36 = v65[41];
      uint64_t v37 = v65 + 17;
      uint64_t v38 = v58;
      goto LABEL_40;
    }
    swift_release();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for RuntimeError();
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = 0xD000000000000042;
    *(void *)(v60 + 24) = 0x80000000000C9830;
    lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError();
    swift_allocError();
    uint64_t *v61 = v60;
    swift_willThrow();

    goto LABEL_44;
  }

  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for RuntimeError();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0xD00000000000005CLL;
  *(void *)(v11 + 24) = 0x80000000000C9700;
  lazy protocol witness table accessor for type RuntimeError and conformance RuntimeError();
  swift_allocError();
  *uint64_t v12 = v11;
  swift_willThrow();
LABEL_45:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v62 = (uint64_t (*)(void))v0[1];
  return v62();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 136);
    uint64_t v3 = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void **)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v12 = *(void *)(v0 + 304);
  uint64_t v4 = *(void **)(v0 + 288);
  id v5 = *(void *)(v0 + 296);
  os_log_type_t v6 = *(uint64_t **)(v0 + 272);
  uint64_t v7 = v4[7];
  long long v8 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  uint64_t v9 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
  *(void *)(v0 + 248) = 0;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)((uint64_t)_swiftEmptyArrayStorage, (uint8_t *)(v0 + 176), v6, v0 + 216);

  outlined destroy of (label: String?, value: Any)?(v0 + 216, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 176);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = TrafficIncidentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 304);
  id v5 = *(void **)(v0 + 288);
  os_log_type_t v6 = *(uint64_t **)(v0 + 272);
  uint64_t v7 = v5[7];
  long long v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  uint64_t v9 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)((uint64_t)_swiftEmptyArrayStorage, (uint8_t *)(v0 + 56), v6, v0 + 96);

  outlined destroy of (label: String?, value: Any)?(v0 + 96, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TrafficIncidentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(TrafficIncidentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:), 0, 0);
}

uint64_t TrafficIncidentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
  uint64_t v1 = ParameterResolutionRecord.intent.getter();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance TrafficIncidentUnsupportedValueStrategy(uint64_t a1, uint64_t a2)
{
  long long v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 112)
                                                + **(int **)(**(void **)v2 + 112));
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *os_log_type_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance TrafficIncidentUnsupportedValueStrategy(uint64_t a1)
{
  os_log_type_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 120) + **(int **)(**(void **)v1 + 120));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for HandleFilterProtocolAsync.filterHandles(recipients:) in conformance ContactHandleResolver;
  return v6(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance TrafficIncidentUnsupportedValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentUnsupportedValueStrategy();
  *long long v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    id v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GeoContact>);
  uint64_t v10 = *(void *)(type metadata accessor for GeoContact() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  id v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for GeoContact() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GeoTrafficIncident>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TrafficIncidentUnsupportedValueStrategy()
{
  return self;
}

uint64_t static MapsAppProperties.getBundleID(idiom:)(uint64_t a1)
{
  if (a1 == 6) {
    return 0xD000000000000012;
  }
  else {
    return 0x6C7070612E6D6F63;
  }
}

uint64_t *MapsAppProperties.appName.unsafeMutableAddressor()
{
  if (one-time initialization token for appName != -1) {
    swift_once();
  }
  return &static MapsAppProperties.appName;
}

void one-time initialization function for appName()
{
  static MapsAppProperties.appName = 1936744781;
  *(void *)algn_FAD48 = 0xE400000000000000;
}

uint64_t static MapsAppProperties.appName.getter()
{
  if (one-time initialization token for appName != -1) {
    swift_once();
  }
  uint64_t v0 = static MapsAppProperties.appName;
  swift_bridgeObjectRetain();
  return v0;
}

ValueMetadata *type metadata accessor for MapsAppProperties()
{
  return &type metadata for MapsAppProperties;
}

uint64_t *TrafficIncidentUtils.siriSupportedIncidents.unsafeMutableAddressor()
{
  if (one-time initialization token for siriSupportedIncidents != -1) {
    swift_once();
  }
  return &static TrafficIncidentUtils.siriSupportedIncidents;
}

uint64_t static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)@<X0>(uint64_t a1@<X1>, uint8_t *a2@<X2>, uint64_t *a3@<X8>, uint64_t a4)
{
  uint64_t v33 = a2;
  uint64_t v34 = a1;
  unint64_t v35 = a3;
  uint64_t v4 = type metadata accessor for AceOutput();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v32 = (char *)&v29 - v9;
  __chkstk_darwin(v8);
  uint64_t v36 = (char *)&v29 - v10;
  static os_log_type_t.info.getter();
  if (one-time initialization token for logObject != -1) {
    swift_once();
  }
  uint64_t v31 = a4;
  int64_t v11 = logObject;
  os_log(_:dso:log:_:_:)();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = v4;
    *(_WORD *)id v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "sendCompletionViewOutputSuccess", v13, 2u);
    uint64_t v4 = v29;
    swift_slowDealloc();
  }
  size_t v14 = v36;
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  uint64_t v16 = logObject;
  uint64_t v17 = v5;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v19 = v32;
  v18(v32, v14, v4);
  os_log_type_t v20 = v15;
  if (os_log_type_enabled(v16, v15))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v34 = v17;
    uint64_t v38 = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v33 = v21 + 4;
    v18(v30, v19, v4);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = v34;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v4);
    _os_log_impl(&dword_0, v16, v20, "sendCompletionViewOutput dialog final output is: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v17 = v25;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v4);
  }
  unint64_t v26 = v35;
  v35[3] = v4;
  v26[4] = (uint64_t)&protocol witness table for AceOutput;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v26);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v17 + 32))(boxed_opaque_existential_0, v36, v4);
}

uint64_t one-time initialization function for siriSupportedIncidents()
{
  uint64_t result = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for siriSupportedIncidents);
  static TrafficIncidentUtils.siriSupportedIncidents = result;
  return result;
}

uint64_t static TrafficIncidentUtils.siriSupportedIncidents.getter()
{
  if (one-time initialization token for siriSupportedIncidents != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static TrafficIncidentUtils.siriSupportedIncidents.setter(uint64_t a1)
{
  if (one-time initialization token for siriSupportedIncidents != -1) {
    swift_once();
  }
  swift_beginAccess();
  static TrafficIncidentUtils.siriSupportedIncidents = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static TrafficIncidentUtils.siriSupportedIncidents.modify())()
{
  if (one-time initialization token for siriSupportedIncidents != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t static TrafficIncidentUtils.convertINTrafficIncidentToLocationSearchValue(incidentType:)(unint64_t a1)
{
  if (a1 >= 6) {
    return 1;
  }
  else {
    return (0x40103020001uLL >> (8 * a1));
  }
}

uint64_t static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:_:)(uint64_t a1, uint8_t *a2, uint64_t a3, int a4, int a5, int a6, NSObject *a7, void (*a8)(char *, char *, uint64_t), uint64_t a9, void (*a10)(uint64_t *), uint64_t a11)
{
  os_log_t v49 = a7;
  uint64_t v50 = a8;
  int v45 = a4;
  int v46 = a6;
  int v44 = a5;
  uint64_t v47 = a3;
  uint64_t v48 = a2;
  uint64_t v55 = a11;
  uint64_t v12 = type metadata accessor for AceOutput();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v43 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v51 = (char *)&v41 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = type metadata accessor for TemplatingResult();
  uint64_t v53 = *(void *)(v20 - 8);
  uint64_t v54 = v20;
  __chkstk_darwin(v20);
  uint64_t v52 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v22);
  unint64_t v24 = (uint64_t *)((char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.info.getter();
  if (one-time initialization token for logObject != -1) {
    swift_once();
  }
  uint64_t v25 = logObject;
  os_log(_:dso:log:_:_:)();
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v24);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = *v24;
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    v57[0] = v26;
    char v58 = 1;
    swift_errorRetain();
    a10(v57);
    swift_errorRelease();
  }
  else
  {
    unint64_t v42 = a10;
    unint64_t v27 = v52;
    (*(void (**)(char *, uint64_t *, uint64_t))(v53 + 32))(v52, v24, v54);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_0, v25, v28, "sendCompletionViewOutputSuccess", v29, 2u);
      swift_slowDealloc();
    }
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    uint64_t v31 = logObject;
    uint64_t v32 = v51;
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v50(v51, v19, v12);
    os_log_type_t v33 = v30;
    if (os_log_type_enabled(v31, v30))
    {
      uint64_t v34 = swift_slowAlloc();
      os_log_t v49 = v31;
      unint64_t v35 = (uint8_t *)v34;
      v57[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v35 = 136315138;
      uint64_t v48 = v35 + 4;
      v50(v43, v32, v12);
      uint64_t v36 = String.init<A>(describing:)();
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v38 = *(void (**)(char *, uint64_t))(v13 + 8);
      v38(v32, v12);
      _os_log_impl(&dword_0, v49, v33, "sendCompletionViewOutput dialog final output is: %s", v35, 0xCu);
      swift_arrayDestroy();
      unint64_t v27 = v52;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v38 = *(void (**)(char *, uint64_t))(v13 + 8);
      v38(v32, v12);
    }
    v57[3] = v12;
    v57[4] = (uint64_t)&protocol witness table for AceOutput;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v57);
    v50((char *)boxed_opaque_existential_0, v19, v12);
    char v58 = 0;
    v42(v57);
    v38(v19, v12);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v54);
  }
  return outlined destroy of Result<Output, Error>((uint64_t)v57);
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<INTrafficIncidentType>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    Swift::Int v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::Int v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for INTrafficIncidentType(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<INTrafficIncidentType>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<INTrafficIncidentType>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized static TrafficIncidentUtils.convertNLIncidentTypeFromSupportedTrafficIncidentType(incidentType:)(void *a1)
{
  static os_log_type_t.info.getter();
  if (one-time initialization token for logObject != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v2 = (char *)[a1 type];
  if ((unint64_t)(v2 - 1) > 4) {
    return 0;
  }
  else {
    return *(void *)&aAccidenthazard_0[8 * (void)(v2 - 1)];
  }
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for INTrafficIncidentType(0);
  lazy protocol witness table accessor for type INTrafficIncidentType and conformance INTrafficIncidentType();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::UInt *)(a1 + 32);
    do
    {
      Swift::UInt v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

id specialized static TrafficIncidentUtils.convertIncidentTypeFromNLIntent(locationSearchIntent:)(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(a1);
  if (v3)
  {
    if (v2 == 0xD000000000000011 && v3 == 0x80000000000C6850)
    {
      uint64_t v2 = swift_bridgeObjectRelease();
    }
    else
    {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v2 = swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(v2);
    if (v2 == 9) {
      return [objc_allocWithZone((Class)INSupportedTrafficIncidentType) initWithType:0 localizedDisplayString:0];
    }
  }
LABEL_7:
  switch((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 160))(v2))
  {
    case 4u:
      uint64_t v5 = swift_bridgeObjectRelease();
      goto LABEL_10;
    default:
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v5 = swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_13;
      }
LABEL_10:
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(v5);
      if (v5 == 9) {
        return [objc_allocWithZone((Class)INSupportedTrafficIncidentType) initWithType:0 localizedDisplayString:0];
      }
LABEL_13:
      int v8 = (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 184))(v5);
      id result = 0;
      switch(v8)
      {
        case 0:
          id result = [objc_allocWithZone((Class)INSupportedTrafficIncidentType) initWithType:1 localizedDisplayString:0];
          break;
        case 1:
          return result;
        case 2:
          id result = [objc_allocWithZone((Class)INSupportedTrafficIncidentType) initWithType:2 localizedDisplayString:0];
          break;
        case 3:
          id result = [objc_allocWithZone((Class)INSupportedTrafficIncidentType) initWithType:3 localizedDisplayString:0];
          break;
        case 4:
          id result = [objc_allocWithZone((Class)INSupportedTrafficIncidentType) initWithType:5 localizedDisplayString:0];
          break;
        case 9:
          if (one-time initialization token for logObject != -1) {
            swift_once();
          }
          unint64_t v9 = logObject;
          os_log_type_t v10 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v9, v10))
          {
            uint64_t v11 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v11 = 0;
            _os_log_impl(&dword_0, v9, v10, "convertTrafficIncidentTypeFromNLIntent NLIntent incidentType is null", v11, 2u);
            swift_slowDealloc();
          }
          id result = 0;
          break;
        default:
          return [objc_allocWithZone((Class)INSupportedTrafficIncidentType) initWithType:0 localizedDisplayString:0];
      }
      break;
  }
  return result;
}

id specialized static TrafficIncidentUtils.makeSiriKitIntentWithUserLocation(locationSearchIntent:userLocation:)(uint64_t a1, uint64_t a2)
{
  id v4 = specialized static TrafficIncidentUtils.convertIncidentTypeFromNLIntent(locationSearchIntent:)(a1);
  if (one-time initialization token for logObject != -1) {
    swift_once();
  }
  uint64_t v5 = &off_EF000;
  char v6 = logObject;
  id v7 = v4;
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)unint64_t v9 = 136315138;
    id v10 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INSupportedTrafficIncidentType?);
    uint64_t v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v35);
    uint64_t v5 = &off_EF000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v6, v8, "makeSiriKitIntentWithUserLocation incidentType is %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v13 = swift_slowDealloc();
  }
  else
  {
  }
  unint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 168);
  char v15 = v14(v13);
  if (LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v15) == 0x7065527261656C63
    && v16 == 0xEB0000000074726FLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v19 = swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      goto LABEL_15;
    }
  }
  unint64_t v20 = v5[441];
  os_log_type_t v21 = static os_log_type_t.default.getter();
  uint64_t v19 = os_log_type_enabled(v20, v21);
  if (v19)
  {
    char v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v22 = 0;
    _os_log_impl(&dword_0, v20, v21, "makeSiriKitIntentWithUserLocation isClear=true", v22, 2u);
    uint64_t v19 = swift_slowDealloc();
  }
LABEL_15:
  char v23 = v14(v19);
  if (LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v23) == 0x526D7269666E6F63
    && v24 == 0xED000074726F7065)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v25)
  {
LABEL_19:
    uint64_t v26 = v5[441];
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl(&dword_0, v26, v27, "makeSiriKitIntentWithUserLocation isUpdate=true", v28, 2u);
      swift_slowDealloc();
    }
    char v29 = 0;
    if (a2) {
      goto LABEL_22;
    }
    goto LABEL_24;
  }
  char v29 = 1;
  if (a2)
  {
LABEL_22:
    id v30 = [self placemarkWithLocation:a2 name:0 postalAddress:0];
    goto LABEL_25;
  }
LABEL_24:
  id v30 = 0;
LABEL_25:
  v31.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  if (v29)
  {
    NSString v32 = 0;
  }
  else
  {
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v33 = [objc_allocWithZone((Class)INReportIncidentIntent) initWithIncidentType:v7 startTime:0 isClear:v31.super.super.isa userLocation:v30 additionalDetails:v32];

  return v33;
}

uint64_t specialized static TrafficIncidentUtils.isUpdateIntent(intent:)(void *a1)
{
  id v2 = [a1 isClear];
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber);
  v3.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  Class isa = v3.super.super.isa;
  if (v2)
  {
    id v5 = v2;
    char v6 = static NSObject.== infix(_:_:)();

    if (v6)
    {
      char v7 = 1;
      return v7 & 1;
    }
  }
  else
  {
  }
  id v8 = [a1 additionalDetails];
  if (v8 && (unint64_t v9 = v8, v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(), v12 = v11, v9, v12))
  {
    if (v10 == 0x657461647075 && v12 == 0xE600000000000000) {
      char v7 = 1;
    }
    else {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t outlined destroy of Result<Output, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Output, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for TrafficIncidentUtils()
{
  return &type metadata for TrafficIncidentUtils;
}

unint64_t lazy protocol witness table accessor for type INTrafficIncidentType and conformance INTrafficIncidentType()
{
  unint64_t result = lazy protocol witness table cache variable for type INTrafficIncidentType and conformance INTrafficIncidentType;
  if (!lazy protocol witness table cache variable for type INTrafficIncidentType and conformance INTrafficIncidentType)
  {
    type metadata accessor for INTrafficIncidentType(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type INTrafficIncidentType and conformance INTrafficIncidentType);
  }
  return result;
}

Swift::String __swiftcall INPerson.getContactInitials()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  id v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  char v6 = (char *)&v50 - v5;
  uint64_t v7 = type metadata accessor for PersonNameComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v50 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v50 - v12;
  __chkstk_darwin(v11);
  char v15 = (char *)&v50 - v14;
  id v51 = [objc_allocWithZone((Class)NSPersonNameComponentsFormatter) init];
  [v51 setStyle:4];
  id v16 = [v0 nameComponents];
  if (v16)
  {
    int64_t v17 = v16;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    char v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v18(v6, v13, v7);
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v19(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v18(v15, v6, v7);
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v21 = v51;
      id v22 = [v51 stringFromPersonNameComponents:isa];

      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v19(v6, 1, 1, v7);
  }
  outlined destroy of PersonNameComponents?((uint64_t)v6);
  id v26 = [v0 displayName];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v29 = v28;

  swift_bridgeObjectRelease();
  uint64_t v30 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000) == 0) {
    uint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (v30)
  {
    NSString v31 = [v0 displayName];
    if (!v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v32 = [v51 personNameComponentsFromString:v31];

    if (v32)
    {
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

      id v33 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v33(v4, v13, v7);
      v19(v4, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) != 1)
      {
        uint64_t v34 = v50;
        v33(v50, v4, v7);
        Class v35 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        id v36 = v51;
        id v37 = [v51 stringFromPersonNameComponents:v35];

        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v25 = v38;

        (*(void (**)(char *, uint64_t))(v8 + 8))(v34, v7);
        goto LABEL_24;
      }
    }
    else
    {
      v19(v4, 1, 1, v7);
    }
    outlined destroy of PersonNameComponents?((uint64_t)v4);
    id v41 = [v0 displayName];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v42;
  }
  else
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0xE000000000000000;
  }
  uint64_t v52 = v39;
  unint64_t v53 = v40;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v43 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  swift_bridgeObjectRelease();
  uint64_t v52 = 0;
  unint64_t v53 = 0xE000000000000000;
  uint64_t v44 = *(void *)(v43 + 16);
  if (v44)
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = v43 + 56;
    do
    {
      if ((*(void *)(v45 - 16) ^ *(void *)(v45 - 24)) >= 0x4000)
      {
        swift_bridgeObjectRetain();
        v46._uint64_t countAndFlagsBits = Substring.subscript.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v45 += 32;
      --v44;
    }
    while (v44);

    swift_bridgeObjectRelease_n();
    uint64_t v23 = v52;
    unint64_t v25 = v53;
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v23 = 0;
    unint64_t v25 = 0xE000000000000000;
  }
LABEL_24:
  uint64_t v47 = v23;
  uint64_t v48 = (void *)v25;
  result._object = v48;
  result._uint64_t countAndFlagsBits = v47;
  return result;
}

uint64_t outlined destroy of PersonNameComponents?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t GeoContact.init(index:id:displayName:initials:encodeBase64:shareLevel:imageStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  a9[9] = a11;
  uint64_t v12 = (char *)a9 + *(int *)(type metadata accessor for GeoContact() + 40);
  uint64_t v13 = type metadata accessor for ImageElement.ImageStyle();
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);

  return v14(v12, a12, v13);
}

uint64_t type metadata accessor for GeoContact()
{
  uint64_t result = type metadata singleton initialization cache for GeoContact;
  if (!type metadata singleton initialization cache for GeoContact) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GeoContact.initials.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeoContact.encodeBase64.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeoContact.shareLevel.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t GeoContact.imageStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GeoContact() + 40);
  uint64_t v4 = type metadata accessor for ImageElement.ImageStyle();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t GeoContact.imageStyle.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GeoContact() + 40);
  uint64_t v4 = type metadata accessor for ImageElement.ImageStyle();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*GeoContact.imageStyle.modify())()
{
  return AnswerETAIntentResponseCode.rawValue.getter;
}

uint64_t GeoContact.image.getter()
{
  uint64_t v1 = type metadata accessor for ImageElement.ImageStyle();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ImageElement.Contact.Content();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *((void *)v0 + 2);
  if (v9)
  {
    char v18 = v4;
    uint64_t v10 = *((void *)v0 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_C0600;
    *(void *)(v11 + 32) = v10;
    *(void *)(v11 + 40) = v9;
    uint64_t v4 = v18;
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v13 = *((void *)v0 + 6);
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0) {
      uint64_t v14 = *((void *)v0 + 5) & 0xFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      swift_bridgeObjectRetain();
      ImageElement.Contact.Monogram.init(letters:)();
      uint64_t v12 = (unsigned int *)&enum case for ImageElement.Contact.Content.monogram(_:);
      goto LABEL_8;
    }
  }
  ImageElement.Contact.Avatar.init(contactIds:)();
  uint64_t v12 = (unsigned int *)&enum case for ImageElement.Contact.Content.avatar(_:);
LABEL_8:
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *v12, v5);
  uint64_t v15 = type metadata accessor for GeoContact();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, &v0[*(int *)(v15 + 40)], v1);
  return ImageElement.Contact.init(_:imageStyle:)();
}

uint64_t GeoContact.app.getter()
{
  if ((*(void *)(v0 + 72) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    return 0xD000000000000013;
  }
  else {
    return 0x6C7070612E6D6F63;
  }
}

uint64_t AppID.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000013;
  }
  else {
    return 0x6C7070612E6D6F63;
  }
}

uint64_t GeoContact.supplamentalText.getter()
{
  if ((*(void *)(v0 + 72) & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    swift_bridgeObjectRelease();
    return 5459283;
  }
  char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v1) {
    return 5459283;
  }
  return 0;
}

uint64_t GeoContact.hash(into:)()
{
  Hasher._combine(_:)(*v0);
  if (v0[2])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v0[9]);
  type metadata accessor for GeoContact();
  type metadata accessor for ImageElement.ImageStyle();
  lazy protocol witness table accessor for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle(&lazy protocol witness table cache variable for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle, (void (*)(uint64_t))&type metadata accessor for ImageElement.ImageStyle);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t GeoContact.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aIndex_2[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GeoContact.CodingKeys()
{
  return GeoContact.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GeoContact.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GeoContact.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GeoContact.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeoContact.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GeoContact.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GeoContact.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GeoContact.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for GeoContact();
    v8[9] = 6;
    type metadata accessor for ImageElement.ImageStyle();
    lazy protocol witness table accessor for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle(&lazy protocol witness table cache variable for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle, (void (*)(uint64_t))&type metadata accessor for ImageElement.ImageStyle);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int GeoContact.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t GeoContact.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for ImageElement.ImageStyle();
  uint64_t v26 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GeoContact.CodingKeys>);
  uint64_t v7 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for GeoContact();
  __chkstk_darwin(v10);
  unint64_t v29 = a1;
  uint64_t v30 = (uint64_t *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v29);
  }
  uint64_t v24 = v10;
  uint64_t v25 = v4;
  uint64_t v12 = v6;
  char v37 = 0;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v30;
  *uint64_t v30 = v13;
  char v36 = 1;
  uint64_t v15 = v7;
  v14[1] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v14[2] = v16;
  char v35 = 2;
  v14[3] = KeyedDecodingContainer.decode(_:forKey:)();
  v14[4] = v17;
  char v34 = 3;
  v14[5] = KeyedDecodingContainer.decode(_:forKey:)();
  v14[6] = v18;
  char v33 = 4;
  v14[7] = KeyedDecodingContainer.decode(_:forKey:)();
  v14[8] = v19;
  char v32 = 5;
  v14[9] = KeyedDecodingContainer.decode(_:forKey:)();
  char v31 = 6;
  lazy protocol witness table accessor for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle(&lazy protocol witness table cache variable for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle, (void (*)(uint64_t))&type metadata accessor for ImageElement.ImageStyle);
  uint64_t v20 = v25;
  uint64_t v21 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v21);
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))((char *)v14 + *(int *)(v24 + 40), v12, v20);
  outlined init with copy of GeoContact((uint64_t)v14, v27);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v29);
  return outlined destroy of GeoContact((uint64_t)v14);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GeoContact@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GeoContact.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GeoContact(void *a1)
{
  return GeoContact.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeoContact()
{
  return Hasher._finalize()();
}

GeoFlowDelegatePlugin::AppID_optional __swiftcall AppID.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AppID.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = GeoFlowDelegatePlugin_AppID_messages;
  }
  else {
    v4.value = GeoFlowDelegatePlugin_AppID_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppID(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = AppID.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == AppID.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AppID()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  AppID.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AppID()
{
  AppID.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AppID()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  AppID.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AppID@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AppID.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AppID@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AppID.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t specialized static GeoContact.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[2];
  if (!v4)
  {
    if (!v5) {
      goto LABEL_11;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = a1[1] == a2[1] && v4 == v5;
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
LABEL_11:
  BOOL v7 = a1[3] == a2[3] && a1[4] == a2[4];
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (a1[5] != a2[5] || a1[6] != a2[6]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (a1[7] != a2[7] || a1[8] != a2[8]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || a1[9] != a2[9])
  {
    return 0;
  }
  uint64_t v8 = *(int *)(type metadata accessor for GeoContact() + 40);

  return static ImageElement.ImageStyle.== infix(_:_:)((char *)a1 + v8, (char *)a2 + v8);
}

unint64_t lazy protocol witness table accessor for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys;
  if (!lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoContact.CodingKeys and conformance GeoContact.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of GeoContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GeoContact();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GeoContact(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GeoContact();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for Equatable in GeoContact()
{
  return lazy protocol witness table accessor for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle(&lazy protocol witness table cache variable for type GeoContact and conformance GeoContact, (void (*)(uint64_t))type metadata accessor for GeoContact);
}

uint64_t lazy protocol witness table accessor for type ImageElement.ImageStyle and conformance ImageElement.ImageStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AppID and conformance AppID()
{
  unint64_t result = lazy protocol witness table cache variable for type AppID and conformance AppID;
  if (!lazy protocol witness table cache variable for type AppID and conformance AppID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppID and conformance AppID);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GeoContact(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  Swift::Int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *Swift::Int v3 = *a2;
    Swift::Int v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    uint64_t v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    uint64_t v7 = a2[7];
    a1[6] = a2[6];
    a1[7] = v7;
    uint64_t v8 = a2[9];
    uint64_t v9 = *(int *)(a3 + 40);
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = (char *)a1 + v9;
    a1[8] = a2[8];
    a1[9] = v8;
    uint64_t v12 = type metadata accessor for ImageElement.ImageStyle();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v10, v12);
  }
  return v3;
}

uint64_t destroy for GeoContact(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for ImageElement.ImageStyle();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for GeoContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = a2 + v8;
  uint64_t v10 = a1 + v8;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v11 = type metadata accessor for ImageElement.ImageStyle();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v9, v11);
  return a1;
}

void *assignWithCopy for GeoContact(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ImageElement.ImageStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for GeoContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v7 = type metadata accessor for ImageElement.ImageStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for GeoContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for ImageElement.ImageStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_77A28);
}

uint64_t sub_77A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for ImageElement.ImageStyle();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for GeoContact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_77AEC);
}

uint64_t sub_77AEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for ImageElement.ImageStyle();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for GeoContact()
{
  uint64_t result = type metadata accessor for ImageElement.ImageStyle();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AppID(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x77D14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppID()
{
  return &type metadata for AppID;
}

uint64_t getEnumTagSinglePayload for GeoContact.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GeoContact.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x77EA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for GeoContact.CodingKeys()
{
  return &unk_E6AD0;
}

uint64_t specialized GeoContact.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736C616974696E69 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x614265646F636E65 && a2 == 0xEC00000034366573 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x76654C6572616873 && a2 == 0xEA00000000006C65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7974536567616D69 && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t RetrieveParkingHandleIntentStrategy.__allocating_init(with:isPommes:)(long long *a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v4 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v4 + 24);
  *(unsigned char *)(v4 + 64) = a2;
  return v4;
}

uint64_t RetrieveParkingHandleIntentStrategy.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 24, a1);
}

uint64_t RetrieveParkingHandleIntentStrategy.init(with:isPommes:)(long long *a1, char a2)
{
  type metadata accessor for OS_os_log();
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v2 + 24);
  *(unsigned char *)(v2 + 64) = a2;
  return v2;
}

uint64_t RetrieveParkingHandleIntentStrategy.common.getter()
{
  outlined init with copy of DeviceState(v0 + 24, (uint64_t)v4);
  char v1 = *(unsigned char *)(v0 + 64);
  type metadata accessor for ParkingCommon();
  uint64_t v2 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(v4, v2 + 24);
  *(unsigned char *)(v2 + 64) = v1;
  return v2;
}

uint64_t RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  return _swift_task_switch(RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0, 0);
}

uint64_t RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRetrieveParkingLocationIntent, INRetrieveParkingLocationIntentResponse>);
  char v1 = (void *)IntentResolutionRecord.intentResponse.getter();
  id v2 = [v1 parkingLocation];
  *(void *)(v0 + 248) = v2;

  if (v2)
  {
    id v3 = [v2 location];
    *(void *)(v0 + 256) = v3;
    if (v3)
    {
      uint64_t v4 = CLLocation.makeDialogLocation()();
      *(void *)(v0 + 264) = v4;
      uint64_t v5 = (void *)IntentResolutionRecord.intentResponse.getter();
      id v6 = [v5 parkingNote];

      if (v6)
      {
        uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v9 = v8;
      }
      else
      {
        uint64_t v7 = 0;
        unint64_t v9 = 0xE000000000000000;
      }
      *(void *)(v0 + 272) = v9;
      uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v0 + 240) + 112))();
      *(void *)(v0 + 280) = v15;
      *(void *)(v0 + 120) = &type metadata for RetrieveParkingLocation;
      *(void *)(v0 + 128) = &protocol witness table for RetrieveParkingLocation;
      *(void *)(v0 + 96) = v4;
      *(void *)(v0 + 104) = v7;
      *(void *)(v0 + 112) = v9;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v16 = (void *)IntentResolutionRecord.intentResponse.getter();
      id v17 = [v16 parkingNote];

      if (v17)
      {
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v20 = 0;
      }
      *(void *)(v0 + 288) = v20;
      id v22 = (uint64_t (*)(uint64_t, uint64_t, id, uint64_t, uint64_t))(*(void *)(*(void *)v15 + 112)
                                                                           + **(int **)(*(void *)v15 + 112));
      uint64_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 296) = v21;
      *uint64_t v21 = v0;
      v21[1] = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
      return v22(v0 + 56, v0 + 96, v2, v18, v20);
    }
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 240) + 128)
                                                   + **(int **)(**(void **)(v0 + 240) + 128));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v10;
    *uint64_t v10 = v0;
    uint64_t v11 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else
  {
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 240) + 128)
                                                   + **(int **)(**(void **)(v0 + 240) + 128));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v10;
    *uint64_t v10 = v0;
    uint64_t v11 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  v10[1] = v11;
  uint64_t v12 = *(void *)(v0 + 232);
  uint64_t v13 = *(void *)(v0 + 224);
  return v23(v13, v12);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  char v1 = *v0 + 96;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return _swift_task_switch(RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0, 0);
}

{
  uint64_t v0;
  long long *v1;
  void *v2;
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v16)(void);
  void *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = v0;
  char v1 = (long long *)(v0 + 56);
  id v2 = *(void **)(v0 + 240);
  if (*(void *)(v0 + 80))
  {
    outlined init with take of CATType(v1, v0 + 16);
    id v3 = static os_log_type_t.default.getter();
    uint64_t v4 = v2[2];
    outlined init with copy of DeviceState(v0 + 16, v0 + 136);
    uint64_t v5 = v3;
    id v6 = os_log_type_enabled(v4, v3);
    uint64_t v7 = *(void **)(v0 + 248);
    unint64_t v8 = *(void **)(v0 + 256);
    if (v6)
    {
      id v17 = *(void **)(v0 + 248);
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)unint64_t v9 = 136315138;
      outlined init with copy of DeviceState(v0 + 136, v0 + 176);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
      uint64_t v10 = String.init<A>(describing:)();
      *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
      _os_log_impl(&dword_0, v4, v5, "buildRFoutput: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();

      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
    }
    outlined init with take of CATType((long long *)(v0 + 16), *(void *)(v0 + 224));
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    outlined destroy of Output?((uint64_t)v1);
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*v2 + 128) + **(int **)(*v2 + 128));
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v12;
    *uint64_t v12 = v0;
    v12[1] = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v13 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 224);
    return v18(v14, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else {
    id v2 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  id v2 = (void *)v0[31];
  char v1 = (void *)v0[32];
  swift_release();
  swift_bridgeObjectRelease();

  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else {
    id v2 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  id v3 = *v0;
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  id v2 = (void *)v0[31];
  char v1 = (void *)v0[32];
  swift_release();
  swift_bridgeObjectRelease();

  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t outlined destroy of Output?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t RetrieveParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return _swift_task_switch(RetrieveParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:), 0, 0);
}

uint64_t RetrieveParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v3 = v1[6];
  uint64_t v2 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  v0[5] = &type metadata for RetrieveParkingLocation;
  v0[6] = &protocol witness table for RetrieveParkingLocation;
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = 0;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  *uint64_t v4 = v0;
  v4[1] = SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  uint64_t v5 = v0[7];
  return FlowHelper.makeDialogOnlyOutput(model:)(v5, (uint64_t)(v0 + 2), v3, v2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, ParkingHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, ParkingHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, ParkingHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 120)
                                                + **(int **)(**(void **)v2 + 120));
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, ParkingHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, ParkingHandleIntentStrategy, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance RetrieveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 128)
                                                + **(int **)(**(void **)v2 + 128));
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance RetrieveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t ParkingHandleIntentStrategy = type metadata accessor for RetrieveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, ParkingHandleIntentStrategy, a4);
}

unint64_t lazy protocol witness table accessor for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy;
  if (!lazy protocol witness table cache variable for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy)
  {
    type metadata accessor for RetrieveParkingHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RetrieveParkingHandleIntentStrategy and conformance RetrieveParkingHandleIntentStrategy);
  }
  return result;
}

uint64_t type metadata accessor for RetrieveParkingHandleIntentStrategy()
{
  return self;
}

unint64_t OntologyNode.javaClassName.getter()
{
  uint64_t v0 = dispatch thunk of OntologyNode.name.getter();
  specialized Collection.first.getter(v0, v1);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  if (v3)
  {
    Swift::String v4 = Character.uppercased()();
    uint64_t countAndFlagsBits = v4._countAndFlagsBits;
    object = v4._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  v7._uint64_t countAndFlagsBits = countAndFlagsBits;
  v7._object = object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = dispatch thunk of OntologyNode.name.getter();
  specialized Collection.dropFirst(_:)(1, v8, v9);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t TerminalNodeBoundedSemanticValue<>.stringValue.getter()
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  return v1;
}

unint64_t TerminalNodeBoundedSemanticValue<>.javaValue.getter()
{
  swift_getDynamicType();
  swift_getMetatypeMetadata();
  uint64_t v0 = String.init<A>(describing:)();
  specialized BidirectionalCollection.dropLast(_:)(5, v0, v1, v2);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  dispatch thunk of RawRepresentable.rawValue.getter();
  Swift::String v4 = String.uppercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t OccupantIntentNode.asContactQuery.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactRelationshipQuery?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ContactQuery.init()();
  ContactQuery.givenName.setter();
  OccupantIntentNode.firstName.getter();
  if (v12) {
    ContactQuery.givenName.setter();
  }
  OccupantIntentNode.fullName.getter();
  if (v13)
  {
    if (!ContactQuery.givenName.getter() && v14 == 0xE000000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_8:
      ContactQuery.givenName.setter();
      goto LABEL_10;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
LABEL_10:
  OccupantIntentNode.fullName.getter();
  ContactQuery.fullName.setter();
  OccupantIntentNode.lastName.getter();
  ContactQuery.familyName.setter();
  OccupantIntentNode.nickname.getter();
  ContactQuery.nickname.setter();
  OccupantIntentNode.namePrefix.getter();
  uint64_t v16 = type metadata accessor for PersonOntologyNode.PersonNamePrefix();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v16) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  }
  else
  {
    PersonOntologyNode.PersonNamePrefix.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v16);
  }
  ContactQuery.namePrefix.setter();
  OccupantIntentNode.namePostfix.getter();
  uint64_t v18 = type metadata accessor for PersonOntologyNode.PersonNamePostfix();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v8, 1, v18) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v8, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  }
  else
  {
    PersonOntologyNode.PersonNamePostfix.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v18);
  }
  ContactQuery.nameSuffix.setter();
  OccupantIntentNode.company.getter();
  ContactQuery.organizationName.setter();
  OccupantIntentNode.relationship.getter();
  uint64_t v20 = type metadata accessor for ContactQuery();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v2, 1, 1, v20);
  ContactRelationshipQuery.init(label:fromContact:)();
  uint64_t v21 = type metadata accessor for ContactRelationshipQuery();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v5, 0, 1, v21);
  return ContactQuery.relationship.setter();
}

uint64_t OccupantIntentNode.displayName.getter()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = OccupantIntentNode.fullName.getter();
  if (!v5)
  {
LABEL_6:
    uint64_t v8 = OccupantIntentNode.firstName.getter();
    if (!v9) {
      return 0;
    }
    uint64_t v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      uint64_t v20 = v8;
      unint64_t v21 = v9;
      swift_bridgeObjectRetain();
      v11._uint64_t countAndFlagsBits = 32;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      uint64_t v13 = v20;
      unint64_t v12 = v21;
      uint64_t v14 = OccupantIntentNode.lastName.getter();
      if (v15) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = 0;
      }
      if (v15) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = (void *)0xE000000000000000;
      }
      uint64_t v20 = v13;
      unint64_t v21 = v12;
      swift_bridgeObjectRetain();
      v18._uint64_t countAndFlagsBits = v16;
      v18._object = v17;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      static CharacterSet.whitespaces.getter();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v6 = StringProtocol.trimmingCharacters(in:)();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    return v6;
  }
  uint64_t v6 = v4;
  uint64_t v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  return v6;
}

id OccupantIntentNode.asINPerson.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PersonNameComponents();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  PersonNameComponents.init()();
  OccupantIntentNode.lastName.getter();
  PersonNameComponents.familyName.setter();
  OccupantIntentNode.firstName.getter();
  PersonNameComponents.givenName.setter();
  OccupantIntentNode.nickname.getter();
  PersonNameComponents.nickname.setter();
  OccupantIntentNode.namePrefix.getter();
  uint64_t v13 = type metadata accessor for PersonOntologyNode.PersonNamePrefix();
  uint64_t v14 = *(void *)(v13 - 8);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v13);
  uint64_t v27 = v2;
  if (v15 == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v8, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  }
  else
  {
    PersonOntologyNode.PersonNamePrefix.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v13);
  }
  PersonNameComponents.namePrefix.setter();
  OccupantIntentNode.namePostfix.getter();
  uint64_t v16 = type metadata accessor for PersonOntologyNode.PersonNamePostfix();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v5, 1, v16) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v5, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  }
  else
  {
    PersonOntologyNode.PersonNamePostfix.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v16);
  }
  Swift::String v18 = v27;
  PersonNameComponents.nameSuffix.setter();
  id v19 = [objc_allocWithZone((Class)INPersonHandle) initWithValue:0 type:0 label:0];
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v18, v12, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
  OccupantIntentNode.displayName.getter();
  uint64_t v21 = v20;
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v18, 1, v9) != 1)
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
  }
  if (v21)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v23 = 0;
  }
  id v24 = [objc_allocWithZone((Class)INPerson) initWithPersonHandle:v19 nameComponents:isa displayName:v23 image:0 contactIdentifier:0 customIdentifier:0];

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v24;
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = String.index(_:offsetBy:limitedBy:)();
    if (v7) {
      a2 = 15;
    }
    else {
      a2 = v6;
    }
    a1 = 15;
    a3 = v5;
    a4 = v4;
  }
  return String.subscript.getter(a1, a2, a3, a4);
}

uint64_t *LocationSearchIntent.confirmationNode.unsafeMutableAddressor()
{
  if (one-time initialization token for confirmationNode != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.confirmationNode;
}

uint64_t *LocationSearchIntent.nounNode.unsafeMutableAddressor()
{
  if (one-time initialization token for nounNode != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.nounNode;
}

uint64_t *LocationSearchIntent.verbNode.unsafeMutableAddressor()
{
  if (one-time initialization token for verbNode != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.verbNode;
}

uint64_t *LocationSearchIntent.referenceNode.unsafeMutableAddressor()
{
  if (one-time initialization token for referenceNode != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.referenceNode;
}

uint64_t *LocationSearchIntent.incidentTypeNode.unsafeMutableAddressor()
{
  if (one-time initialization token for incidentTypeNode != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.incidentTypeNode;
}

uint64_t *LocationSearchIntent.domainNode.unsafeMutableAddressor()
{
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.domainNode;
}

uint64_t LocationSearchIntent.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  *(void *)(v2 + v3) = static LocationSearchIntent.domainNode;
  uint64_t v4 = v2 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v5 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
  swift_retain();
  return v2;
}

uint64_t LocationSearchIntent.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  LocationSearchIntent.init(from:)(a1);
  return v2;
}

_UNKNOWN **static LocationSearchIntent.LocationSearchNounValue.allCases.getter()
{
  return &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
}

uint64_t LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(char a1)
{
  return *(void *)&aAny_2[8 * a1];
}

uint64_t LocationSearchIntent.LocationSearchNounValue.rawValue.getter(char a1)
{
  return qword_C4960[a1];
}

uint64_t LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x746E656469636E69;
      break;
    case 2:
      uint64_t result = 0x6472617A6168;
      break;
    case 3:
      uint64_t result = 0x68635F6465657073;
      break;
    case 4:
      uint64_t result = 0x6B726F7764616F72;
      break;
    case 5:
      unsigned int v3 = 1701732716;
      goto LABEL_9;
    case 6:
      unsigned int v3 = 1684107122;
LABEL_9:
      uint64_t result = v3 | 0x6F6C635F00000000;
      break;
    case 7:
      return result;
    case 8:
      uint64_t result = 0x6D656C626F7270;
      break;
    default:
      uint64_t result = 0x746E656469636361;
      break;
  }
  return result;
}

_UNKNOWN **static LocationSearchIntent.LocationSearchConfirmationValue.allCases.getter()
{
  return &outlined read-only object #0 of static LocationSearchIntent.LocationSearchConfirmationValue.allCases.getter;
}

uint64_t LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter(char a1)
{
  return qword_C49E0[a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, a4, (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, (void (*)(uint64_t))LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (void (*)(void))LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (void (*)(uint64_t))LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocationSearchIntent.LocationSearchConfirmationValue@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized LocationSearchIntent.LocationSearchConfirmationValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LocationSearchIntent.LocationSearchConfirmationValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchNounValue(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, a4, (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchNounValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchNounValue(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, (void (*)(uint64_t))LocationSearchIntent.LocationSearchNounValue.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchNounValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (void (*)(void))LocationSearchIntent.LocationSearchNounValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchNounValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (void (*)(uint64_t))LocationSearchIntent.LocationSearchNounValue.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocationSearchIntent.LocationSearchNounValue@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized LocationSearchIntent.LocationSearchNounValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocationSearchIntent.LocationSearchNounValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LocationSearchIntent.LocationSearchNounValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchNounValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchNounValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
}

_UNKNOWN **static LocationSearchIntent.LocationSearchVerbValue.allCases.getter()
{
  return &outlined read-only object #0 of static LocationSearchIntent.LocationSearchVerbValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchVerbValue(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, a4, (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchVerbValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchVerbValue(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, (void (*)(uint64_t))LocationSearchIntent.LocationSearchVerbValue.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchVerbValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (void (*)(void))LocationSearchIntent.LocationSearchVerbValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchVerbValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (void (*)(uint64_t))LocationSearchIntent.LocationSearchVerbValue.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocationSearchIntent.LocationSearchVerbValue@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized LocationSearchIntent.LocationSearchVerbValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocationSearchIntent.LocationSearchVerbValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchVerbValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchVerbValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchVerbValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
}

_UNKNOWN **static LocationSearchIntent.LocationSearchIncidentTypeValue.allCases.getter()
{
  return &outlined read-only object #0 of static LocationSearchIntent.LocationSearchIncidentTypeValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchIncidentTypeValue(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, a4, (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchIncidentTypeValue(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, (void (*)(uint64_t))LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchIncidentTypeValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (void (*)(void))LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchIncidentTypeValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (void (*)(uint64_t))LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocationSearchIntent.LocationSearchIncidentTypeValue@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized LocationSearchIntent.LocationSearchIncidentTypeValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocationSearchIntent.LocationSearchIncidentTypeValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LocationSearchIntent.LocationSearchIncidentTypeValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchIncidentTypeValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchIncidentTypeValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchIncidentTypeValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
}

_UNKNOWN **static LocationSearchIntent.LocationSearchReferenceValue.allCases.getter()
{
  return &outlined read-only object #0 of static LocationSearchIntent.LocationSearchReferenceValue.allCases.getter;
}

uint64_t LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter(char a1)
{
  return *(void *)&aNotset_1[8 * a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchReferenceValue(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, a4, (uint64_t (*)(uint64_t))LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchReferenceValue(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, (void (*)(uint64_t))LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocationSearchIntent.LocationSearchConfirmationValue(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchReferenceValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (void (*)(void))LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchReferenceValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (void (*)(uint64_t))LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocationSearchIntent.LocationSearchReferenceValue@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized LocationSearchIntent.LocationSearchReferenceValue.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocationSearchIntent.LocationSearchReferenceValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LocationSearchIntent.LocationSearchReferenceValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocationSearchIntent.LocationSearchReferenceValue(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchReferenceValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchReferenceValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue, (uint64_t (*)(void))lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance LocationSearchIntent.LocationSearchConfirmationValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a4();
  uint64_t v11 = a5();
  uint64_t v12 = a6();

  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v10, v11, v12);
}

uint64_t LocationSearchIntent.intent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v4 = type metadata accessor for NLIntent();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t one-time initialization function for confirmationNode(uint64_t a1)
{
  return one-time initialization function for confirmationNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>, 0xD00000000000001ALL, 0x80000000000C9A30, &static LocationSearchIntent.confirmationNode);
}

uint64_t static LocationSearchIntent.confirmationNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for confirmationNode);
}

uint64_t one-time initialization function for nounNode(uint64_t a1)
{
  return one-time initialization function for confirmationNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchNounValue>, 0xD000000000000012, 0x80000000000C9A10, &static LocationSearchIntent.nounNode);
}

uint64_t static LocationSearchIntent.nounNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for nounNode);
}

uint64_t one-time initialization function for verbNode(uint64_t a1)
{
  return one-time initialization function for confirmationNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchVerbValue>, 0xD000000000000012, 0x80000000000C99F0, &static LocationSearchIntent.verbNode);
}

uint64_t static LocationSearchIntent.verbNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for verbNode);
}

uint64_t one-time initialization function for appName(uint64_t a1)
{
  return one-time initialization function for confirmationNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x656D614E707061, 0xE700000000000000, &static LocationSearchIntent.appName);
}

uint64_t *LocationSearchIntent.appName.unsafeMutableAddressor()
{
  if (one-time initialization token for appName != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.appName;
}

uint64_t static LocationSearchIntent.appName.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for appName);
}

uint64_t one-time initialization function for applicationId(uint64_t a1)
{
  return one-time initialization function for confirmationNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x746163696C707061, 0xED000064496E6F69, &static LocationSearchIntent.applicationId);
}

uint64_t *LocationSearchIntent.applicationId.unsafeMutableAddressor()
{
  if (one-time initialization token for applicationId != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.applicationId;
}

uint64_t static LocationSearchIntent.applicationId.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for applicationId);
}

uint64_t one-time initialization function for incidentTypeNode(uint64_t a1)
{
  return one-time initialization function for confirmationNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue>, 0xD00000000000001ALL, 0x80000000000C74F0, &static LocationSearchIntent.incidentTypeNode);
}

uint64_t static LocationSearchIntent.incidentTypeNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for incidentTypeNode);
}

uint64_t one-time initialization function for referenceNode(uint64_t a1)
{
  return one-time initialization function for confirmationNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>, 0xD000000000000017, 0x80000000000C99D0, &static LocationSearchIntent.referenceNode);
}

uint64_t one-time initialization function for confirmationNode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  swift_allocObject();
  uint64_t result = TerminalOntologyNode.init(name:multicardinal:)();
  *a5 = result;
  return result;
}

uint64_t static LocationSearchIntent.referenceNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for referenceNode);
}

uint64_t one-time initialization function for destinationNode()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_BFBF0;
  uint64_t v1 = type metadata accessor for AddressOntologyNode();
  swift_allocObject();
  uint64_t v2 = AddressOntologyNode.init(name:multicardinal:)();
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 32) = v2;
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  uint64_t v3 = static LocalSearchIntent.domainNode;
  *(void *)(v0 + 96) = type metadata accessor for DomainOntologyNode();
  *(void *)(v0 + 104) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 72) = v3;
  type metadata accessor for NonTerminalOntologyNode();
  swift_allocObject();
  swift_retain();
  uint64_t result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
  static LocationSearchIntent.destinationNode = result;
  return result;
}

uint64_t *LocationSearchIntent.destinationNode.unsafeMutableAddressor()
{
  if (one-time initialization token for destinationNode != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.destinationNode;
}

uint64_t static LocationSearchIntent.destinationNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for destinationNode);
}

uint64_t one-time initialization function for locationNode()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_C0600;
  if (one-time initialization token for destinationNode != -1) {
    swift_once();
  }
  uint64_t v1 = static LocationSearchIntent.destinationNode;
  *(void *)(v0 + 56) = type metadata accessor for NonTerminalOntologyNode();
  *(void *)(v0 + 64) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 32) = v1;
  swift_allocObject();
  swift_retain();
  uint64_t result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
  static LocationSearchIntent.locationNode = result;
  return result;
}

uint64_t *LocationSearchIntent.locationNode.unsafeMutableAddressor()
{
  if (one-time initialization token for locationNode != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.locationNode;
}

uint64_t static LocationSearchIntent.locationNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for locationNode);
}

uint64_t one-time initialization function for appNode()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_BFBF0;
  if (one-time initialization token for applicationId != -1) {
    swift_once();
  }
  uint64_t v1 = static LocationSearchIntent.applicationId;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 64) = v3;
  *(void *)(v0 + 32) = v1;
  uint64_t v4 = one-time initialization token for appName;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static LocationSearchIntent.appName;
  *(void *)(v0 + 96) = v2;
  *(void *)(v0 + 104) = v3;
  *(void *)(v0 + 72) = v5;
  type metadata accessor for NonTerminalOntologyNode();
  swift_allocObject();
  swift_retain();
  uint64_t result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
  static LocationSearchIntent.appNode = result;
  return result;
}

uint64_t *LocationSearchIntent.appNode.unsafeMutableAddressor()
{
  if (one-time initialization token for appNode != -1) {
    swift_once();
  }
  return &static LocationSearchIntent.appNode;
}

uint64_t static LocationSearchIntent.appNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for appNode);
}

uint64_t one-time initialization function for domainNode()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_C4130;
  if (one-time initialization token for nounNode != -1) {
    swift_once();
  }
  uint64_t v1 = static LocationSearchIntent.nounNode;
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchNounValue>);
  *(void *)(v0 + 64) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchNounValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchNounValue>);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = one-time initialization token for verbNode;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = static LocationSearchIntent.verbNode;
  *(void *)(v0 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchVerbValue>);
  *(void *)(v0 + 104) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchVerbValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchVerbValue>);
  *(void *)(v0 + 72) = v3;
  uint64_t v4 = one-time initialization token for incidentTypeNode;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static LocationSearchIntent.incidentTypeNode;
  *(void *)(v0 + 136) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue>);
  *(void *)(v0 + 144) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchIncidentTypeValue>);
  *(void *)(v0 + 112) = v5;
  uint64_t v6 = one-time initialization token for confirmationNode;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static LocationSearchIntent.confirmationNode;
  *(void *)(v0 + 176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>);
  *(void *)(v0 + 184) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchConfirmationValue>);
  *(void *)(v0 + 152) = v7;
  uint64_t v8 = one-time initialization token for locationNode;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = static LocationSearchIntent.locationNode;
  uint64_t v10 = type metadata accessor for NonTerminalOntologyNode();
  *(void *)(v0 + 216) = v10;
  *(void *)(v0 + 224) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 192) = v9;
  uint64_t v11 = one-time initialization token for referenceNode;
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = static LocationSearchIntent.referenceNode;
  *(void *)(v0 + 256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>);
  *(void *)(v0 + 264) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<LocationSearchIntent.LocationSearchReferenceValue>);
  *(void *)(v0 + 232) = v12;
  uint64_t v13 = one-time initialization token for appNode;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = static LocationSearchIntent.appNode;
  *(void *)(v0 + 296) = v10;
  *(void *)(v0 + 304) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 272) = v14;
  type metadata accessor for DomainOntologyNode();
  swift_allocObject();
  swift_retain();
  uint64_t result = DomainOntologyNode.init(name:childNodes:isInEventTree:)();
  static LocationSearchIntent.domainNode = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_C0600;
  if (one-time initialization token for categoryNode != -1) {
    swift_once();
  }
  uint64_t v1 = static LocalSearchIntent.categoryNode;
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 64) = lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 32) = v1;
  type metadata accessor for DomainOntologyNode();
  swift_allocObject();
  swift_retain();
  uint64_t result = DomainOntologyNode.init(name:childNodes:isInEventTree:)();
  static LocalSearchIntent.domainNode = result;
  return result;
}

uint64_t static LocationSearchIntent.domainNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for domainNode);
}

uint64_t LocationSearchIntent.init(from:)(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  *(void *)(v1 + v3) = static LocationSearchIntent.domainNode;
  uint64_t v4 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v5 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
  swift_retain();
  return v1;
}

uint64_t LocationSearchIntent.init(from:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNode();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for NLIntent();
  uint64_t v11 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  *(void *)(v2 + v14) = static LocationSearchIntent.domainNode;
  swift_retain();
  uint64_t v15 = PommesResponse.firstGeoExperience.getter();
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    id v25 = a1;
    GeoExperience.geoClientComponent.getter();
    char v17 = Apple_Parsec_Siri_V2alpha_GeoClientComponent.hasLocationSearchNode.getter();
    Swift::String v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v18(v10, v7);
    if (v17)
    {
      GeoExperience.geoClientComponent.getter();
      Apple_Parsec_Siri_V2alpha_GeoClientComponent.locationSearchNode.getter();
      v18(v10, v7);
      type metadata accessor for LocationSearchIntentBuilder();
      swift_allocObject();
      uint64_t v19 = *LocationSearchIntentBuilder.init()();
      uint64_t v20 = (*(uint64_t (**)(char *))(v19 + 376))(v6);
      uint64_t v21 = swift_release();
      (*(void (**)(uint64_t))(*(void *)v20 + 456))(v21);

      swift_release();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v27);
    }
    else
    {
      type metadata accessor for LocationSearchIntentBuilder();
      swift_allocObject();
      uint64_t v23 = *LocationSearchIntentBuilder.init()();
      (*(void (**)(void))(v23 + 456))();
      swift_release();
    }
  }
  else
  {
    type metadata accessor for LocationSearchIntentBuilder();
    swift_allocObject();
    uint64_t v22 = *LocationSearchIntentBuilder.init()();
    (*(void (**)(void))(v22 + 456))();
    swift_release();
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v2 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v13, v28);
  return v2;
}

uint64_t LocationSearchIntent.domainOntologyNode.getter()
{
  return swift_retain();
}

uint64_t LocationSearchIntent.domainOntologyNode.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*LocationSearchIntent.domainOntologyNode.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t LocationSearchIntent.domainName.getter()
{
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  return NonTerminalOntologyNode.name.getter();
}

uint64_t LocationSearchIntent.confirmation.getter()
{
  return LocationSearchIntent.confirmation.getter(&one-time initialization token for confirmationNode);
}

uint64_t LocationSearchIntent.noun.getter()
{
  if (one-time initialization token for nounNode != -1) {
    swift_once();
  }
  type metadata accessor for LocationSearchIntent();
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v1 == 8) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t LocationSearchIntent.verb.getter()
{
  if (one-time initialization token for verbNode != -1) {
    swift_once();
  }
  type metadata accessor for LocationSearchIntent();
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v1 == 10) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t LocationSearchIntent.reference.getter()
{
  if (one-time initialization token for referenceNode != -1) {
    swift_once();
  }
  type metadata accessor for LocationSearchIntent();
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v1 == 30) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t LocationSearchIntent.incidentType.getter()
{
  return LocationSearchIntent.confirmation.getter(&one-time initialization token for incidentTypeNode);
}

uint64_t LocationSearchIntent.confirmation.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  type metadata accessor for LocationSearchIntent();
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  return v2;
}

uint64_t LocationSearchIntent.appName.getter()
{
  return LocationSearchIntent.appName.getter(&one-time initialization token for appName);
}

uint64_t LocationSearchIntent.address.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NonTerminalIntentNode();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v17 = v1;
  type metadata accessor for AddressOntologyNode();
  swift_allocObject();
  AddressOntologyNode.init(name:multicardinal:)();
  type metadata accessor for LocationSearchIntent();
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of NonTerminalIntentNode?((uint64_t)v5);
    uint64_t v13 = type metadata accessor for AddressIntentNode();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    swift_allocObject();
    AddressOntologyNode.init(name:multicardinal:)();
    AddressIntentNode.init(intentNode:ontologyNode:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    uint64_t v15 = type metadata accessor for AddressIntentNode();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 0, 1, v15);
  }
}

uint64_t LocationSearchIntent.occupant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NonTerminalIntentNode();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v17 = v1;
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  type metadata accessor for LocationSearchIntent();
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of NonTerminalIntentNode?((uint64_t)v5);
    uint64_t v13 = type metadata accessor for OccupantIntentNode();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    swift_allocObject();
    AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
    OccupantIntentNode.init(intentNode:ontologyNode:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    uint64_t v15 = type metadata accessor for OccupantIntentNode();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 0, 1, v15);
  }
}

uint64_t LocationSearchIntent.personPlaceId.getter()
{
  return LocationSearchIntent.personPlaceId.getter((void (*)(void))&type metadata accessor for AddressOntologyNode.PersonPlaceNode, (void (*)(void))&static AddressOntologyNode.PersonPlaceNode.personPlaceIdNode.getter);
}

uint64_t LocationSearchIntent.personPlaceName.getter()
{
  return LocationSearchIntent.personPlaceId.getter((void (*)(void))&type metadata accessor for AddressOntologyNode.PersonPlaceNode, (void (*)(void))&static AddressOntologyNode.PersonPlaceNode.personPlaceNameNode.getter);
}

uint64_t LocationSearchIntent.personPlaceId.getter(void (*a1)(void), void (*a2)(void))
{
  a1(0);
  a2();
  type metadata accessor for LocationSearchIntent();
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  swift_release();
  return v4;
}

uint64_t LocationSearchIntent.category.getter()
{
  return LocationSearchIntent.appName.getter(&one-time initialization token for categoryNode);
}

uint64_t LocationSearchIntent.appName.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  type metadata accessor for LocationSearchIntent();
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  return v2;
}

uint64_t LocationSearchIntent.lontitude.getter()
{
  return LocationSearchIntent.personPlaceId.getter((void (*)(void))&type metadata accessor for AddressOntologyNode.CentroidNode, (void (*)(void))&static AddressOntologyNode.CentroidNode.longitudeNode.getter);
}

uint64_t LocationSearchIntent.latitude.getter()
{
  return LocationSearchIntent.personPlaceId.getter((void (*)(void))&type metadata accessor for AddressOntologyNode.CentroidNode, (void (*)(void))&static AddressOntologyNode.CentroidNode.latitudeNode.getter);
}

uint64_t LocationSearchIntent.getSiriKitConfirmationState()@<X0>(uint64_t a1@<X8>)
{
  switch((*(unsigned __int8 (**)(void))(*(void *)v1 + 152))())
  {
    case 1u:
      uint64_t v3 = (unsigned int *)&enum case for SiriKitConfirmationState.rejected(_:);
      break;
    case 2u:
      uint64_t v3 = (unsigned int *)&enum case for SiriKitConfirmationState.cancelled(_:);
      break;
    case 3u:
      uint64_t v3 = (unsigned int *)&enum case for SiriKitConfirmationState.unset(_:);
      break;
    default:
      uint64_t v3 = (unsigned int *)&enum case for SiriKitConfirmationState.confirmed(_:);
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for SiriKitConfirmationState();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a1, v4, v5);
}

uint64_t LocationSearchIntent.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v2 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t LocationSearchIntent.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v2 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t protocol witness for NLIntentWrapper.intent.getter in conformance LocationSearchIntent@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v4 = type metadata accessor for NLIntent();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t protocol witness for NLIntentWrapper.domainOntologyNode.getter in conformance LocationSearchIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for GeoIntent.getIntentType() in conformance LocationSearchIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))() & 1;
}

uint64_t protocol witness for GeoIntent.occupant.getter in conformance LocationSearchIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance LocationSearchIntent(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return NLIntentWrapper.traversableIntentNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance LocationSearchIntent(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return NLIntentWrapper.traversableOntologyNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LocationSearchIntent()
{
  swift_getWitnessTable();

  return NLIntentWrapper.description.getter();
}

unint64_t specialized LocationSearchIntent.LocationSearchConfirmationValue.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LocationSearchIntent.LocationSearchConfirmationValue.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t specialized LocationSearchIntent.LocationSearchNounValue.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LocationSearchIntent.LocationSearchNounValue.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

unint64_t specialized LocationSearchIntent.LocationSearchVerbValue.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LocationSearchIntent.LocationSearchVerbValue.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

unint64_t specialized LocationSearchIntent.LocationSearchIncidentTypeValue.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LocationSearchIntent.LocationSearchIncidentTypeValue.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t specialized LocationSearchIntent.LocationSearchReferenceValue.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1E) {
    return 30;
  }
  else {
    return v0;
  }
}

uint64_t type metadata accessor for LocationSearchIntent()
{
  uint64_t result = type metadata singleton initialization cache for LocationSearchIntent;
  if (!type metadata singleton initialization cache for LocationSearchIntent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined destroy of NonTerminalIntentNode?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchConfirmationValue and conformance LocationSearchIntent.LocationSearchConfirmationValue);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocationSearchIntent.LocationSearchConfirmationValue()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type [LocationSearchIntent.LocationSearchConfirmationValue] and conformance [A], &demangling cache variable for type metadata for [LocationSearchIntent.LocationSearchConfirmationValue]);
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchNounValue and conformance LocationSearchIntent.LocationSearchNounValue);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocationSearchIntent.LocationSearchNounValue()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type [LocationSearchIntent.LocationSearchNounValue] and conformance [A], &demangling cache variable for type metadata for [LocationSearchIntent.LocationSearchNounValue]);
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchVerbValue and conformance LocationSearchIntent.LocationSearchVerbValue);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocationSearchIntent.LocationSearchVerbValue()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type [LocationSearchIntent.LocationSearchVerbValue] and conformance [A], &demangling cache variable for type metadata for [LocationSearchIntent.LocationSearchVerbValue]);
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchIncidentTypeValue and conformance LocationSearchIntent.LocationSearchIncidentTypeValue);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocationSearchIntent.LocationSearchIncidentTypeValue()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type [LocationSearchIntent.LocationSearchIncidentTypeValue] and conformance [A], &demangling cache variable for type metadata for [LocationSearchIntent.LocationSearchIncidentTypeValue]);
}

unint64_t lazy protocol witness table accessor for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue;
  if (!lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent.LocationSearchReferenceValue and conformance LocationSearchIntent.LocationSearchReferenceValue);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocationSearchIntent.LocationSearchReferenceValue()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type [LocationSearchIntent.LocationSearchReferenceValue] and conformance [A], &demangling cache variable for type metadata for [LocationSearchIntent.LocationSearchReferenceValue]);
}

uint64_t base witness table accessor for IntentNodeTraversable in LocationSearchIntent()
{
  return _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
}

uint64_t base witness table accessor for CustomStringConvertible in LocationSearchIntent()
{
  return _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1(&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent);
}

uint64_t _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_1(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LocationSearchIntent();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_7E1B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_7E1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ObjC metadata update function for LocationSearchIntent()
{
  return type metadata accessor for LocationSearchIntent();
}

uint64_t type metadata completion function for LocationSearchIntent()
{
  uint64_t result = type metadata accessor for NLIntent();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LocationSearchIntent.LocationSearchConfirmationValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7E3C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchIntent.LocationSearchConfirmationValue()
{
  return &type metadata for LocationSearchIntent.LocationSearchConfirmationValue;
}

uint64_t getEnumTagSinglePayload for LocationSearchIntent.LocationSearchNounValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LocationSearchIntent.LocationSearchNounValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7E554);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchIntent.LocationSearchNounValue()
{
  return &type metadata for LocationSearchIntent.LocationSearchNounValue;
}

uint64_t getEnumTagSinglePayload for LocationSearchIntent.LocationSearchVerbValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LocationSearchIntent.LocationSearchVerbValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7E6E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchIntent.LocationSearchVerbValue()
{
  return &type metadata for LocationSearchIntent.LocationSearchVerbValue;
}

uint64_t getEnumTagSinglePayload for LocationSearchIntent.LocationSearchIncidentTypeValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LocationSearchIntent.LocationSearchIncidentTypeValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7E87CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchIntent.LocationSearchIncidentTypeValue()
{
  return &type metadata for LocationSearchIntent.LocationSearchIncidentTypeValue;
}

uint64_t getEnumTagSinglePayload for LocationSearchIntent.LocationSearchReferenceValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE3) {
    goto LABEL_17;
  }
  if (a2 + 29 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 29) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 29;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1E;
  int v8 = v6 - 30;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LocationSearchIntent.LocationSearchReferenceValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 29 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 29) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE2)
  {
    unsigned int v6 = ((a2 - 227) >> 8) + 1;
    *uint64_t result = a2 + 29;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7EA10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 29;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationSearchIntent.LocationSearchReferenceValue()
{
  return &type metadata for LocationSearchIntent.LocationSearchReferenceValue;
}

unint64_t GeoDirectInvocations.rawValue.getter(char a1)
{
  if (!a1) {
    return 0xD00000000000002CLL;
  }
  if (a1 == 1) {
    return 0xD00000000000002ALL;
  }
  return 0xD000000000000033;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1);
  *a3 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GeoDirectInvocations(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeoDirectInvocations()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GeoDirectInvocations()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeoDirectInvocations()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GeoDirectInvocations@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized GeoDirectInvocations.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GeoDirectInvocations@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = GeoDirectInvocations.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t GeoFlowDelegatePlugin.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  GeoFlowDelegatePlugin.init()();
  return v0;
}

uint64_t GeoFlowDelegatePlugin.init()()
{
  uint64_t v1 = v0;
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  static Device.current.getter();
  uint64_t v12 = type metadata accessor for GeoRCHFlowFactoryImpl();
  uint64_t v13 = &protocol witness table for GeoRCHFlowFactoryImpl;
  uint64_t v11 = swift_allocObject();
  uint64_t v14 = static DialogHelper.globals.getter();
  static AceService.currentAsync.getter();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for CATService();
  uint64_t v2 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  unint64_t v4 = self;
  *(void *)(v2 + 24) = [v4 bundleForClass:ObjCClassFromMetadata];
  *(void *)(v2 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v2 + 16) = 0;
  uint64_t v15 = v2;
  type metadata accessor for FlowSelector();
  uint64_t v5 = swift_allocObject();
  outlined init with copy of FlowHelperImpl((uint64_t)v10, (uint64_t)v9);
  uint64_t v6 = specialized FlowSelector.init(with:)(v9, v5);
  outlined destroy of FlowHelperImpl((uint64_t)v10);
  *(void *)(v1 + 24) = v6;
  type metadata accessor for CATExecutor();
  type metadata accessor for GeoFlowDelegatePlugin();
  id v7 = [v4 bundleForClass:swift_getObjCClassFromMetadata()];
  static CATExecutor.registerBundle(bundle:)();

  return v1;
}

uint64_t GeoFlowDelegatePlugin.__allocating_init(with:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  *(void *)(v2 + 24) = a1;
  return v2;
}

uint64_t GeoFlowDelegatePlugin.init(with:)(uint64_t a1)
{
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 16) = OS_os_log.init(subsystem:category:)();
  *(void *)(v1 + 24) = a1;
  return v1;
}

uint64_t GeoFlowDelegatePlugin.findFlowForX(parse:)@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v285 = a2;
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v271 = v4;
  uint64_t v272 = v5;
  __chkstk_darwin(v4);
  id v270 = (char *)&v255 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NLIntent();
  v288 = *(uint8_t **)(v7 - 8);
  uint64_t v289 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v279 = (char *)&v255 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  id v283 = (char *)&v255 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  id v260 = (char *)&v255 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_type_t v261 = (char *)&v255 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v269 = (char *)&v255 - v17;
  __chkstk_darwin(v16);
  v274 = (char *)&v255 - v18;
  uint64_t v280 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v275 = *(void *)(v280 - 8);
  uint64_t v19 = __chkstk_darwin(v280);
  uint64_t v262 = (char *)&v255 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  os_log_type_t v266 = (char *)&v255 - v22;
  __chkstk_darwin(v21);
  unint64_t v276 = (char *)&v255 - v23;
  uint64_t v24 = type metadata accessor for Parse();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  char v268 = (char *)&v255 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v263 = (char *)&v255 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v265 = (char *)&v255 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  unint64_t v264 = (char *)&v255 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  id v273 = (void **)((char *)&v255 - v35);
  uint64_t v36 = __chkstk_darwin(v34);
  unint64_t v277 = (char *)&v255 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  id v282 = (uint64_t (*)(char *, uint64_t))((char *)&v255 - v39);
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v278 = (char *)&v255 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v255 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  uint64_t v47 = (char *)&v255 - v46;
  __chkstk_darwin(v45);
  os_log_t v49 = (char *)&v255 - v48;
  os_log_type_t v50 = static os_log_type_t.info.getter();
  uint64_t v284 = v2;
  id v51 = *(NSObject **)(v2 + 16);
  uint64_t v290 = v25;
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  uint64_t v53 = v25 + 16;
  uint64_t v52 = v54;
  uint64_t v286 = a1;
  uint64_t v55 = a1;
  uint64_t v56 = v53;
  v54(v49, (char *)v55, v24);
  os_log_t v287 = v51;
  BOOL v57 = os_log_type_enabled(v51, v50);
  id v267 = v47;
  if (v57)
  {
    char v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    uint64_t v281 = v44;
    *(void *)&long long v292 = v59;
    *(_DWORD *)char v58 = 136315138;
    v258 = v58 + 4;
    uint64_t v259 = v58;
    v52(v47, v49, v24);
    uint64_t v60 = String.init<A>(describing:)();
    *(void *)&v291[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)&v292);
    uint64_t v56 = v53;
    uint64_t v62 = v289;
    uint64_t v63 = v290;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v64 = *(void (**)(char *, uint64_t))(v63 + 8);
    v64(v49, v24);
    uint64_t v65 = v287;
    _os_log_impl(&dword_0, v287, v50, "findFlowForX -- parse type: %s", v259, 0xCu);
    swift_arrayDestroy();
    uint64_t v44 = v281;
    swift_slowDealloc();
    uint64_t v66 = v288;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v66 = v288;
    id v64 = *(void (**)(char *, uint64_t))(v290 + 8);
    v64(v49, v24);
    uint64_t v65 = v287;
    uint64_t v62 = v289;
  }
  v52(v44, (char *)v286, v24);
  int v67 = (*(uint64_t (**)(char *, uint64_t))(v290 + 88))(v44, v24);
  if (v67 != enum case for Parse.NLv3IntentOnly(_:))
  {
    if (v67 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      uint64_t v74 = v24;
      BOOL v75 = v277;
      v52(v277, v44, v74);
      uint64_t v76 = v74;
      (*(void (**)(char *, uint64_t))(v290 + 96))(v75, v74);
      uint64_t v77 = *(void *)&v75[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion))
                                   + 48)];
      os_log_type_t v78 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v65, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v79 = 0;
        _os_log_impl(&dword_0, v65, v78, "findFlowForX - NLv3PlusServerConversion", v79, 2u);
        swift_slowDealloc();
      }
      uint64_t v80 = (void *)Parse.ServerConversion.siriKitIntent.getter();
      self;
      uint64_t v81 = swift_dynamicCastObjCClass();

      if (v81)
      {
        if (one-time initialization token for instance != -1) {
          swift_once();
        }
        Parse.ServerConversion.siriKitIntent.getter();
        self;
        uint64_t v82 = swift_dynamicCastObjCClassUnconditional();
        type metadata accessor for RetrieveParkingLocationBaseFlow(0);
        uint64_t v83 = swift_allocObject();
        *((void *)&v293 + 1) = &type metadata for FlowHelperImpl;
        uint64_t v294 = &protocol witness table for FlowHelperImpl;
        *(void *)&long long v292 = swift_allocObject();
        outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, v292 + 16);
        type metadata accessor for OS_os_log();
        *(void *)(v83 + 16) = OS_os_log.init(subsystem:category:)();
        *(unsigned char *)(v83 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_isPOMMES) = 0;
        outlined init with take of CATType(&v292, v83 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowHelper);
        *(void *)(v83 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin31RetrieveParkingLocationBaseFlow_flowState) = v82;
        type metadata accessor for RetrieveParkingLocationBaseFlow.State(0);
        swift_storeEnumTagMultiPayload();
        *(void *)&long long v292 = v83;
        uint64_t v84 = &lazy protocol witness table cache variable for type RetrieveParkingLocationBaseFlow and conformance RetrieveParkingLocationBaseFlow;
        uint64_t v85 = (void (*)(uint64_t))type metadata accessor for RetrieveParkingLocationBaseFlow;
      }
      else
      {
        unint64_t v120 = (void *)Parse.ServerConversion.siriKitIntent.getter();
        self;
        uint64_t v121 = swift_dynamicCastObjCClass();

        if (!v121)
        {
          id v282 = (uint64_t (*)(char *, uint64_t))v64;
          unint64_t v149 = (void *)Parse.ServerConversion.siriKitIntent.getter();
          self;
          uint64_t v150 = swift_dynamicCastObjCClass();

          if (v150)
          {
            if (one-time initialization token for instance != -1) {
              swift_once();
            }
            Parse.ServerConversion.siriKitIntent.getter();
            self;
            uint64_t v151 = swift_dynamicCastObjCClassUnconditional();
            type metadata accessor for SaveParkingLocationBaseFlow(0);
            uint64_t v152 = swift_allocObject();
            *((void *)&v293 + 1) = &type metadata for FlowHelperImpl;
            uint64_t v294 = &protocol witness table for FlowHelperImpl;
            *(void *)&long long v292 = swift_allocObject();
            outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, v292 + 16);
            type metadata accessor for OS_os_log();
            *(void *)(v152 + 16) = OS_os_log.init(subsystem:category:)();
            *(unsigned char *)(v152 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_isPOMMES) = 0;
            outlined init with take of CATType(&v292, v152 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowHelper);
            *(void *)(v152 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin27SaveParkingLocationBaseFlow_flowState) = v151;
            type metadata accessor for SaveParkingLocationBaseFlow.State(0);
            swift_storeEnumTagMultiPayload();
            *(void *)&long long v292 = v152;
            unint64_t v153 = &lazy protocol witness table cache variable for type SaveParkingLocationBaseFlow and conformance SaveParkingLocationBaseFlow;
            id v154 = (void (*)(uint64_t))type metadata accessor for SaveParkingLocationBaseFlow;
          }
          else
          {
            os_log_type_t v187 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v65, v187))
            {
              swift_retain_n();
              unint64_t v188 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long v292 = swift_slowAlloc();
              *(_DWORD *)unint64_t v188 = 136315138;
              *(void *)&v291[0] = v77;
              type metadata accessor for Parse.ServerConversion();
              uint64_t v281 = v44;
              swift_retain();
              uint64_t v189 = String.init<A>(describing:)();
              *(void *)&v291[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v189, v190, (uint64_t *)&v292);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              BOOL v75 = v277;
              uint64_t v44 = v281;
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_0, v287, v187, "findFlowForX - flow should not be nil here, received serverConversion %s", v188, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            type metadata accessor for UnsupportedRequestFlow();
            uint64_t v191 = swift_allocObject();
            type metadata accessor for OS_os_log();
            *(void *)(v191 + 16) = OS_os_log.init(subsystem:category:)();
            *(void *)&long long v292 = v191;
            unint64_t v153 = (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow;
            id v154 = (void (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow;
          }
          _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0(v153, 255, v154);
          Flow.eraseToAnyFlow()();
          swift_release();
          static FlowSearchResult.flow(_:)();
          swift_release();
          swift_release();
          (*((void (**)(char *, uint64_t))v288 + 1))(v75, v289);
          return v282(v44, v76);
        }
        if (one-time initialization token for instance != -1) {
          swift_once();
        }
        Parse.ServerConversion.siriKitIntent.getter();
        self;
        uint64_t v122 = swift_dynamicCastObjCClassUnconditional();
        type metadata accessor for DeleteParkingLocationBaseFlow(0);
        uint64_t v123 = swift_allocObject();
        *((void *)&v293 + 1) = &type metadata for FlowHelperImpl;
        uint64_t v294 = &protocol witness table for FlowHelperImpl;
        *(void *)&long long v292 = swift_allocObject();
        outlined init with copy of FlowHelperImpl((uint64_t)static FlowHelperImpl.instance, v292 + 16);
        type metadata accessor for OS_os_log();
        *(void *)(v123 + 16) = OS_os_log.init(subsystem:category:)();
        *(unsigned char *)(v123 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_isPOMMES) = 0;
        outlined init with take of CATType(&v292, v123 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowHelper);
        *(void *)(v123 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin29DeleteParkingLocationBaseFlow_flowState) = v122;
        type metadata accessor for DeleteParkingLocationBaseFlow.State(0);
        swift_storeEnumTagMultiPayload();
        *(void *)&long long v292 = v123;
        uint64_t v84 = &lazy protocol witness table cache variable for type DeleteParkingLocationBaseFlow and conformance DeleteParkingLocationBaseFlow;
        uint64_t v85 = (void (*)(uint64_t))type metadata accessor for DeleteParkingLocationBaseFlow;
      }
      _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0(v84, 255, v85);
      Flow.eraseToAnyFlow()();
      swift_release();
      static FlowSearchResult.flow(_:)();
      swift_release();
      swift_release();
      (*((void (**)(char *, uint64_t))v288 + 1))(v75, v289);
      uint64_t v24 = v76;
      return ((uint64_t (*)(char *, uint64_t))v64)(v44, v24);
    }
    if (v67 == enum case for Parse.directInvocation(_:))
    {
      uint64_t v86 = v278;
      char v256 = v52;
      uint64_t v257 = v56;
      v52(v278, v44, v24);
      (*(void (**)(char *, uint64_t))(v290 + 96))(v86, v24);
      uint64_t v87 = v275;
      uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v275 + 16);
      v88(v276, v86, v280);
      if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000002CLL && v89 == 0x80000000000C6780)
      {
        swift_bridgeObjectRelease();
LABEL_34:
        type metadata accessor for LocationSearchIntentBuilder();
        swift_allocObject();
        uint64_t v127 = *LocationSearchIntentBuilder.init()();
        uint64_t v128 = (*(uint64_t (**)(uint64_t))(v127 + 392))(1);
        swift_release();
        uint64_t v129 = (*(uint64_t (**)(uint64_t))(*(void *)v128 + 384))(6);
        uint64_t v130 = swift_release();
        id v131 = v274;
        (*(void (**)(uint64_t))(*(void *)v129 + 456))(v130);
        uint64_t v132 = swift_release();
        uint64_t v133 = (*(uint64_t (**)(uint64_t))(*(void *)v284 + 96))(v132);
        uint64_t v134 = (*(uint64_t (**)(char *))(*(void *)v133 + 112))(v131);
        swift_release();
        if (v134)
        {
          static FlowSearchResult.flow(_:)();
          swift_release();
          (*((void (**)(char *, uint64_t))v288 + 1))(v131, v289);
          uint64_t v135 = *(void (**)(char *, uint64_t))(v87 + 8);
          uint64_t v136 = v280;
          v135(v276, v280);
          v135(v278, v136);
          return ((uint64_t (*)(char *, uint64_t))v64)(v44, v24);
        }
        uint64_t v286 = (uint8_t *)v24;
        id v282 = (uint64_t (*)(char *, uint64_t))v64;
        uint64_t v155 = static os_log_type_t.error.getter();
        uint64_t v157 = v288;
        uint64_t v156 = v289;
        uint64_t v158 = v269;
        (*((void (**)(char *, char *, uint64_t))v288 + 2))(v269, v131, v289);
        os_log_type_t v159 = v155;
        unint64_t v160 = v287;
        if (os_log_type_enabled(v287, (os_log_type_t)v155))
        {
          id v161 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v292 = swift_slowAlloc();
          *(_DWORD *)id v161 = 136315138;
          uint64_t v284 = (uint64_t)(v161 + 4);
          _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, 255, (void (*)(uint64_t))&type metadata accessor for NLIntent);
          uint64_t v162 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&v291[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v162, v163, (uint64_t *)&v292);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v164 = (void (*)(char *, uint64_t))*((void *)v157 + 1);
          v164(v158, v289);
          uint64_t v165 = v164;
          _os_log_impl(&dword_0, v160, v159, "findFlowForX - flow should not be nil here, received nl intent %s", v161, 0xCu);
          swift_arrayDestroy();
          uint64_t v156 = v289;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          id v171 = (void (*)(char *, uint64_t))*((void *)v157 + 1);
          v171(v158, v156);
          uint64_t v165 = v171;
        }
        unint64_t v172 = v286;
        type metadata accessor for UnsupportedRequestFlow();
        uint64_t v173 = swift_allocObject();
        type metadata accessor for OS_os_log();
        *(void *)(v173 + 16) = OS_os_log.init(subsystem:category:)();
        *(void *)&long long v292 = v173;
        _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow);
        Flow.eraseToAnyFlow()();
        swift_release();
        static FlowSearchResult.flow(_:)();
        swift_release();
        v165(v274, v156);
        unint64_t v174 = *(void (**)(char *, uint64_t))(v275 + 8);
        uint64_t v175 = v280;
        v174(v276, v280);
        v174(v278, v175);
        return v282(v44, (uint64_t)v172);
      }
      char v126 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v126) {
        goto LABEL_34;
      }
      uint64_t v281 = v44;
      id v282 = (uint64_t (*)(char *, uint64_t))v64;
      uint64_t v166 = *(void (**)(char *, uint64_t))(v87 + 8);
      uint64_t v167 = v280;
      v166(v276, v280);
      Class v168 = v266;
      v88(v266, v278, v167);
      if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000002ALL && v169 == 0x80000000000C67B0)
      {
        swift_bridgeObjectRelease();
LABEL_57:
        type metadata accessor for RedirectToServerFlow();
        uint64_t v183 = swift_allocObject();
        type metadata accessor for OS_os_log();
        *(void *)(v183 + 16) = OS_os_log.init(subsystem:category:)();
        *(void *)&long long v292 = v183;
        _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0(&lazy protocol witness table cache variable for type RedirectToServerFlow and conformance RedirectToServerFlow, 255, (void (*)(uint64_t))type metadata accessor for RedirectToServerFlow);
        Flow.eraseToAnyFlow()();
        swift_release();
        static os_log_type_t.info.getter();
        os_log(_:dso:log:_:_:)();
        static FlowSearchResult.flow(_:)();
        swift_release();
        uint64_t v184 = v280;
        v166(v168, v280);
        uint64_t v185 = v278;
        uint64_t v186 = v184;
LABEL_58:
        v166(v185, v186);
        return v282(v281, v24);
      }
      char v182 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v65 = v287;
      if (v182) {
        goto LABEL_57;
      }
      uint64_t v199 = v280;
      v166(v168, v280);
      char v200 = v262;
      (*(void (**)(char *, char *, uint64_t))(v275 + 32))(v262, v278, v199);
      if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000033 && v201 == 0x80000000000C67E0)
      {
        swift_bridgeObjectRelease();
        uint64_t v202 = v289;
        id v203 = v261;
        goto LABEL_77;
      }
      char v222 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v202 = v289;
      id v203 = v261;
      if (v222)
      {
LABEL_77:
        uint64_t v223 = Parse.DirectInvocation.userData.getter();
        if (v223)
        {
          uint64_t v224 = v223;
          if (*(void *)(v223 + 16)
            && (unint64_t v225 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656469636E49, 0xEC00000065707954),
                (v226 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v224 + 56) + 32 * v225, (uint64_t)&v292);
          }
          else
          {
            long long v292 = 0u;
            long long v293 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v293 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0 && *(void *)&v291[0] <= 5uLL)
            {
              unint64_t v227 = 0x40103020001uLL >> (8 * LOBYTE(v291[0]));
LABEL_89:
              type metadata accessor for LocationSearchIntentBuilder();
              swift_allocObject();
              uint64_t v228 = *LocationSearchIntentBuilder.init()();
              uint64_t v229 = (*(uint64_t (**)(uint64_t))(v228 + 392))(3);
              swift_release();
              uint64_t v230 = (*(uint64_t (**)(uint64_t))(*(void *)v229 + 384))(5);
              swift_release();
              uint64_t v231 = (*(uint64_t (**)(unint64_t))(*(void *)v230 + 400))(v227);
              uint64_t v232 = swift_release();
              (*(void (**)(uint64_t))(*(void *)v231 + 456))(v232);
              uint64_t v233 = swift_release();
              uint64_t v234 = (*(uint64_t (**)(uint64_t))(*(void *)v284 + 96))(v233);
              uint64_t v235 = (*(uint64_t (**)(char *))(*(void *)v234 + 112))(v203);
              swift_release();
              if (v235)
              {
                static FlowSearchResult.flow(_:)();
                swift_release();
                (*((void (**)(char *, uint64_t))v288 + 1))(v203, v202);
              }
              else
              {
                os_log_type_t v236 = static os_log_type_t.error.getter();
                uint64_t v237 = v202;
                uint64_t v238 = v288;
                unint64_t v239 = v260;
                (*((void (**)(char *, char *, uint64_t))v288 + 2))(v260, v203, v237);
                if (os_log_type_enabled(v65, v236))
                {
                  LODWORD(v286) = v236;
                  unint64_t v240 = v239;
                  uint64_t v241 = (uint8_t *)swift_slowAlloc();
                  uint64_t v284 = swift_slowAlloc();
                  *(void *)&long long v292 = v284;
                  *(_DWORD *)uint64_t v241 = 136315138;
                  id v283 = (char *)(v241 + 4);
                  _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, 255, (void (*)(uint64_t))&type metadata accessor for NLIntent);
                  uint64_t v242 = dispatch thunk of CustomStringConvertible.description.getter();
                  *(void *)&v291[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v242, v243, (uint64_t *)&v292);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  os_log_type_t v244 = (void (*)(char *, uint64_t))*((void *)v238 + 1);
                  v244(v240, v237);
                  uint64_t v245 = v244;
                  id v203 = v261;
                  _os_log_impl(&dword_0, v287, (os_log_type_t)v286, "findFlowForX - flow should not be nil here, received nl intent %s", v241, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {
                  unint64_t v253 = (void (*)(char *, uint64_t))*((void *)v238 + 1);
                  v253(v239, v237);
                  uint64_t v245 = v253;
                }
                type metadata accessor for UnsupportedRequestFlow();
                uint64_t v254 = swift_allocObject();
                type metadata accessor for OS_os_log();
                *(void *)(v254 + 16) = OS_os_log.init(subsystem:category:)();
                *(void *)&long long v292 = v254;
                _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow);
                Flow.eraseToAnyFlow()();
                swift_release();
                static FlowSearchResult.flow(_:)();
                swift_release();
                v245(v203, v289);
              }
              uint64_t v185 = v262;
              uint64_t v186 = v280;
              goto LABEL_58;
            }
LABEL_88:
            unint64_t v227 = 1;
            goto LABEL_89;
          }
        }
        else
        {
          long long v292 = 0u;
          long long v293 = 0u;
        }
        outlined destroy of Any?((uint64_t)&v292);
        goto LABEL_88;
      }
      v166(v200, v280);
      uint64_t v44 = v281;
      id v64 = (void (*)(char *, uint64_t))v282;
      uint64_t v52 = v256;
      uint64_t v56 = v257;
    }
    else
    {
      if (v67 == enum case for Parse.pommesResponse(_:))
      {
        uint64_t v97 = v273;
        v52((char *)v273, v44, v24);
        (*(void (**)(void **, uint64_t))(v290 + 96))(v97, v24);
        uint64_t v98 = *v97;
        os_log_type_t v99 = static os_log_type_t.info.getter();
        int v100 = v99;
        uint64_t v101 = os_log_type_enabled(v65, v99);
        if (v101)
        {
          id v102 = v98;
          unint64_t v103 = (uint8_t *)swift_slowAlloc();
          uint64_t v289 = swift_slowAlloc();
          *(void *)&long long v292 = v289;
          id v282 = (uint64_t (*)(char *, uint64_t))v64;
          *(_DWORD *)unint64_t v103 = 136315138;
          uint64_t v286 = v103 + 4;
          id v104 = v102;
          id v105 = [v104 description];
          LODWORD(v288) = v100;
          id v106 = v44;
          id v107 = v105;
          unint64_t v108 = v98;
          uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v111 = v110;

          uint64_t v44 = v106;
          uint64_t v112 = v109;
          uint64_t v98 = v108;
          *(void *)&v291[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v111, (uint64_t *)&v292);
          id v64 = (void (*)(char *, uint64_t))v282;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          uint64_t v65 = v287;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v65, (os_log_type_t)v288, "findFlowForX - received POMMES input %s", v103, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v101 = swift_slowDealloc();
        }
        uint64_t v113 = (*(uint64_t (**)(uint64_t))(*(void *)v284 + 96))(v101);
        uint64_t v114 = (*(uint64_t (**)(void *))(*(void *)v113 + 120))(v98);
        swift_release();
        if (v114)
        {
          swift_retain_n();
          os_log_type_t v115 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v65, v115))
          {
            uint64_t v116 = (uint8_t *)swift_slowAlloc();
            uint64_t v117 = swift_slowAlloc();
            id v282 = (uint64_t (*)(char *, uint64_t))v64;
            *(void *)&long long v292 = v117;
            v288 = v116;
            *(_DWORD *)uint64_t v116 = 136315138;
            uint64_t v286 = v116 + 4;
            *(void *)&v291[0] = v114;
            type metadata accessor for AnyFlow();
            uint64_t v289 = (uint64_t)v98;
            _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (void (*)(uint64_t))&type metadata accessor for AnyFlow);
            uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)&v291[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v119, (uint64_t *)&v292);
            uint64_t v98 = (void *)v289;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_0, v65, v115, "POMMES flow: %s", v288, 0xCu);
            swift_arrayDestroy();
            id v64 = (void (*)(char *, uint64_t))v282;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
          }
          static FlowSearchResult.flow(_:)();
        }
        else
        {
          static os_log_type_t.error.getter();
          os_log(_:dso:log:_:_:)();
          type metadata accessor for UnsupportedRequestFlow();
          uint64_t v170 = swift_allocObject();
          type metadata accessor for OS_os_log();
          *(void *)(v170 + 16) = OS_os_log.init(subsystem:category:)();
          *(void *)&long long v292 = v170;
          _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow);
          Flow.eraseToAnyFlow()();
          swift_release();
          static FlowSearchResult.flow(_:)();
        }
        goto LABEL_98;
      }
      if (v67 == enum case for Parse.uso(_:))
      {
        uint64_t v137 = v264;
        v52(v264, v44, v24);
        (*(void (**)(char *, uint64_t))(v290 + 96))(v137, v24);
        (*(void (**)(char *, char *, uint64_t))(v272 + 32))(v270, v137, v271);
        uint64_t v138 = specialized static GeoParse.getUsoTask(usoParse:)();
        unint64_t v139 = v265;
        if (v138)
        {
          GeoFlowDelegatePlugin::OnDeviceExperience v140 = UsoTask.getGeoTaskType()();
          swift_release();
          switch(v140)
          {
            case GeoFlowDelegatePlugin_OnDeviceExperience_endNavigation:
              static os_log_type_t.default.getter();
              os_log(_:dso:log:_:_:)();
              static Device.current.getter();
              uint64_t v204 = type metadata accessor for GeoRCHFlowFactoryImpl();
              uint64_t v205 = swift_allocObject();
              v297 = &protocol witness table for GeoRCHFlowFactoryImpl;
              uint64_t v296 = v204;
              uint64_t v295 = v205;
              uint64_t v298 = static DialogHelper.globals.getter();
              static AceService.currentAsync.getter();
              static OutputPublisherFactory.makeOutputPublisherAsync()();
              type metadata accessor for CATService();
              uint64_t v206 = swift_allocObject();
              uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
              *(void *)(v206 + 24) = [self bundleForClass:ObjCClassFromMetadata];
              type metadata accessor for OS_os_log();
              *(void *)(v206 + 32) = OS_os_log.init(subsystem:category:)();
              *(unsigned char *)(v206 + 16) = 0;
              uint64_t v299 = v206;
              type metadata accessor for EndNavigationFlow();
              uint64_t v208 = (void *)swift_allocObject();
              outlined init with copy of FlowHelperImpl((uint64_t)&v292, (uint64_t)v291);
              BOOL v209 = specialized EndNavigationFlow.init(with:checkNavigation:)(v291, (uint64_t)&type metadata for AssistantProperties, (uint64_t)&protocol witness table for AssistantProperties, v208);
              outlined destroy of FlowHelperImpl((uint64_t)&v292);
              *(void *)&long long v292 = v209;
              os_log_type_t v147 = &lazy protocol witness table cache variable for type EndNavigationFlow and conformance EndNavigationFlow;
              uint64_t v148 = type metadata accessor for EndNavigationFlow;
              break;
            case GeoFlowDelegatePlugin_OnDeviceExperience_answerAltitude:
              static os_log_type_t.default.getter();
              os_log(_:dso:log:_:_:)();
              static Device.current.getter();
              uint64_t v210 = type metadata accessor for GeoRCHFlowFactoryImpl();
              uint64_t v211 = swift_allocObject();
              v297 = &protocol witness table for GeoRCHFlowFactoryImpl;
              uint64_t v296 = v210;
              uint64_t v295 = v211;
              uint64_t v298 = static DialogHelper.globals.getter();
              static AceService.currentAsync.getter();
              static OutputPublisherFactory.makeOutputPublisherAsync()();
              type metadata accessor for CATService();
              uint64_t v212 = swift_allocObject();
              uint64_t v213 = swift_getObjCClassFromMetadata();
              *(void *)(v212 + 24) = [self bundleForClass:v213];
              type metadata accessor for OS_os_log();
              *(void *)(v212 + 32) = OS_os_log.init(subsystem:category:)();
              *(unsigned char *)(v212 + 16) = 0;
              uint64_t v299 = v212;
              type metadata accessor for AnswerAltitudeFlow();
              uint64_t v214 = swift_allocObject();
              outlined init with copy of FlowHelperImpl((uint64_t)&v292, (uint64_t)v291);
              uint64_t v215 = specialized AnswerAltitudeFlow.init(with:)(v291, v214);
              outlined destroy of FlowHelperImpl((uint64_t)&v292);
              *(void *)&long long v292 = v215;
              os_log_type_t v147 = &lazy protocol witness table cache variable for type AnswerAltitudeFlow and conformance AnswerAltitudeFlow;
              uint64_t v148 = type metadata accessor for AnswerAltitudeFlow;
              break;
            case GeoFlowDelegatePlugin_OnDeviceExperience_whereAmI:
              static os_log_type_t.default.getter();
              os_log(_:dso:log:_:_:)();
              static Device.current.getter();
              uint64_t v216 = type metadata accessor for GeoRCHFlowFactoryImpl();
              uint64_t v217 = swift_allocObject();
              v297 = &protocol witness table for GeoRCHFlowFactoryImpl;
              uint64_t v296 = v216;
              uint64_t v295 = v217;
              uint64_t v298 = static DialogHelper.globals.getter();
              static AceService.currentAsync.getter();
              static OutputPublisherFactory.makeOutputPublisherAsync()();
              type metadata accessor for CATService();
              uint64_t v218 = swift_allocObject();
              uint64_t v219 = swift_getObjCClassFromMetadata();
              *(void *)(v218 + 24) = [self bundleForClass:v219];
              type metadata accessor for OS_os_log();
              *(void *)(v218 + 32) = OS_os_log.init(subsystem:category:)();
              *(unsigned char *)(v218 + 16) = 0;
              uint64_t v299 = v218;
              type metadata accessor for WhereAmIFlow();
              uint64_t v220 = swift_allocObject();
              outlined init with copy of FlowHelperImpl((uint64_t)&v292, (uint64_t)v291);
              uint64_t v221 = specialized WhereAmIFlow.init(with:)(v291, v220);
              outlined destroy of FlowHelperImpl((uint64_t)&v292);
              *(void *)&long long v292 = v221;
              os_log_type_t v147 = (unint64_t *)&lazy protocol witness table cache variable for type WhereAmIFlow and conformance WhereAmIFlow;
              uint64_t v148 = type metadata accessor for WhereAmIFlow;
              break;
            case GeoFlowDelegatePlugin_OnDeviceExperience_unknown:
              goto LABEL_54;
            default:
              static os_log_type_t.default.getter();
              os_log(_:dso:log:_:_:)();
              static Device.current.getter();
              uint64_t v141 = type metadata accessor for GeoRCHFlowFactoryImpl();
              uint64_t v142 = swift_allocObject();
              v297 = &protocol witness table for GeoRCHFlowFactoryImpl;
              uint64_t v296 = v141;
              uint64_t v295 = v142;
              uint64_t v298 = static DialogHelper.globals.getter();
              static AceService.currentAsync.getter();
              static OutputPublisherFactory.makeOutputPublisherAsync()();
              type metadata accessor for CATService();
              uint64_t v143 = swift_allocObject();
              uint64_t v144 = swift_getObjCClassFromMetadata();
              *(void *)(v143 + 24) = [self bundleForClass:v144];
              type metadata accessor for OS_os_log();
              *(void *)(v143 + 32) = OS_os_log.init(subsystem:category:)();
              *(unsigned char *)(v143 + 16) = 0;
              uint64_t v299 = v143;
              type metadata accessor for AnswerETAFlow();
              uint64_t v145 = swift_allocObject();
              outlined init with copy of FlowHelperImpl((uint64_t)&v292, (uint64_t)v291);
              uint64_t v146 = specialized AnswerETAFlow.init(with:checkNavigation:)(v291, (uint64_t)&type metadata for AssistantProperties, (uint64_t)&protocol witness table for AssistantProperties, v145);
              outlined destroy of FlowHelperImpl((uint64_t)&v292);
              *(void *)&long long v292 = v146;
              os_log_type_t v147 = &lazy protocol witness table cache variable for type AnswerETAFlow and conformance AnswerETAFlow;
              uint64_t v148 = type metadata accessor for AnswerETAFlow;
              break;
          }
          _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0(v147, 255, (void (*)(uint64_t))v148);
          Flow.eraseToAnyFlow()();
          swift_release();
          static FlowSearchResult.flow(_:)();
          swift_release();
        }
        else
        {
LABEL_54:
          char v256 = v52;
          os_log_type_t v176 = static os_log_type_t.default.getter();
          v52(v139, (char *)v286, v24);
          os_log_type_t v177 = v176;
          BOOL v178 = os_log_type_enabled(v65, v176);
          uint64_t v257 = v56;
          if (v178)
          {
            unint64_t v179 = (uint8_t *)swift_slowAlloc();
            uint64_t v289 = swift_slowAlloc();
            *(void *)&long long v292 = v289;
            *(_DWORD *)unint64_t v179 = 136315138;
            v288 = v179 + 4;
            v256(v267, v139, v24);
            uint64_t v180 = String.init<A>(describing:)();
            *(void *)&v291[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, v181, (uint64_t *)&v292);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v64(v139, v24);
            _os_log_impl(&dword_0, v65, v177, "uso parse does not conform to any geo experiences:  %s", v179, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            v64(v139, v24);
          }
          uint64_t v192 = v263;
          os_log_type_t v193 = static os_log_type_t.default.getter();
          id v194 = v256;
          v256(v192, (char *)v286, v24);
          os_log_type_t v195 = v193;
          if (os_log_type_enabled(v65, v193))
          {
            uint64_t v196 = (uint8_t *)swift_slowAlloc();
            uint64_t v289 = swift_slowAlloc();
            *(void *)&long long v292 = v289;
            *(_DWORD *)uint64_t v196 = 136315138;
            v288 = v196 + 4;
            v194(v267, v192, v24);
            uint64_t v197 = String.init<A>(describing:)();
            *(void *)&v291[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v198, (uint64_t *)&v292);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v64(v192, v24);
            _os_log_impl(&dword_0, v65, v195, "findFlowForX - not available %s", v196, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            v64(v192, v24);
          }
          static FlowSearchResult.noFlow.getter();
        }
        (*(void (**)(char *, uint64_t))(v272 + 8))(v270, v271);
        return ((uint64_t (*)(void, void))v64)(v44, v24);
      }
    }
    os_log_type_t v246 = static os_log_type_t.error.getter();
    uint64_t v247 = v268;
    v52(v268, (char *)v286, v24);
    os_log_type_t v248 = v246;
    if (os_log_type_enabled(v65, v246))
    {
      uint64_t v257 = v56;
      id v249 = (uint8_t *)swift_slowAlloc();
      uint64_t v289 = swift_slowAlloc();
      *(void *)&long long v292 = v289;
      *(_DWORD *)id v249 = 136315138;
      v288 = v249 + 4;
      v52(v267, v247, v24);
      uint64_t v250 = String.init<A>(describing:)();
      *(void *)&v291[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v250, v251, (uint64_t *)&v292);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v64(v247, v24);
      _os_log_impl(&dword_0, v287, v248, "findFlowForX - flow should not be nil here, received parse %s", v249, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v64(v247, v24);
    }
    type metadata accessor for UnsupportedRequestFlow();
    uint64_t v252 = swift_allocObject();
    type metadata accessor for OS_os_log();
    *(void *)(v252 + 16) = OS_os_log.init(subsystem:category:)();
    *(void *)&long long v292 = v252;
    _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow);
    Flow.eraseToAnyFlow()();
    swift_release();
    static FlowSearchResult.flow(_:)();
LABEL_98:
    swift_release();
    return ((uint64_t (*)(void, void))v64)(v44, v24);
  }
  uint64_t v68 = (char *)v282;
  v52((char *)v282, v44, v24);
  (*(void (**)(char *, uint64_t))(v290 + 96))(v68, v24);
  uint64_t v69 = v66;
  uint64_t v70 = v283;
  uint64_t v71 = (*((uint64_t (**)(char *, char *, uint64_t))v66 + 4))(v283, v68, v62);
  uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v284 + 96))(v71);
  uint64_t v73 = (*(uint64_t (**)(char *))(*(void *)v72 + 112))(v70);
  swift_release();
  if (v73)
  {
    static FlowSearchResult.flow(_:)();
    swift_release();
    (*((void (**)(char *, uint64_t))v69 + 1))(v70, v62);
    return ((uint64_t (*)(void, void))v64)(v44, v24);
  }
  uint64_t v281 = v44;
  id v282 = (uint64_t (*)(char *, uint64_t))v64;
  uint64_t v90 = static os_log_type_t.error.getter();
  uint64_t v91 = v279;
  (*((void (**)(char *, char *, uint64_t))v69 + 2))(v279, v70, v62);
  if (os_log_type_enabled(v65, (os_log_type_t)v90))
  {
    uint64_t v92 = (uint8_t *)swift_slowAlloc();
    uint64_t v93 = swift_slowAlloc();
    uint64_t v286 = (uint8_t *)v24;
    *(void *)&long long v292 = v93;
    *(_DWORD *)uint64_t v92 = 136315138;
    _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, 255, (void (*)(uint64_t))&type metadata accessor for NLIntent);
    uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&v291[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, (uint64_t *)&v292);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v96 = (void (*)(char *, uint64_t))*((void *)v69 + 1);
    v96(v279, v62);
    _os_log_impl(&dword_0, v287, (os_log_type_t)v90, "findFlowForX - flow should not be nil here, received nl intent %s", v92, 0xCu);
    swift_arrayDestroy();
    uint64_t v24 = (uint64_t)v286;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    int v96 = (void (*)(char *, uint64_t))*((void *)v69 + 1);
    v96(v91, v62);
  }
  type metadata accessor for UnsupportedRequestFlow();
  uint64_t v124 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v124 + 16) = OS_os_log.init(subsystem:category:)();
  *(void *)&long long v292 = v124;
  _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow);
  Flow.eraseToAnyFlow()();
  swift_release();
  static FlowSearchResult.flow(_:)();
  swift_release();
  v96(v70, v62);
  return v282(v281, v24);
}

uint64_t protocol witness for FlowPluginExtended.findFlowForX(parse:) in conformance GeoFlowDelegatePlugin()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for FlowPlugin.init() in conformance GeoFlowDelegatePlugin@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 120))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for FlowPlugin.makeFlowFrame(parse:) in conformance GeoFlowDelegatePlugin()
{
  return FlowPlugin.makeFlowFrame(parse:)();
}

uint64_t protocol witness for FlowPlugin.makeFlowFor(parse:) in conformance GeoFlowDelegatePlugin()
{
  return FlowPlugin.makeFlowFor(parse:)();
}

uint64_t protocol witness for FlowPlugin.findFlowFor(parse:) in conformance GeoFlowDelegatePlugin()
{
  return FlowPlugin.findFlowFor(parse:)();
}

uint64_t specialized FlowSelector.init(with:)(_OWORD *a1, uint64_t a2)
{
  uint64_t v63 = &type metadata for FlowHelperImpl;
  id v64 = &protocol witness table for FlowHelperImpl;
  uint64_t v4 = (_OWORD *)swift_allocObject();
  *(void *)&long long v62 = v4;
  long long v5 = a1[9];
  v4[9] = a1[8];
  v4[10] = v5;
  void v4[11] = a1[10];
  long long v6 = a1[5];
  v4[5] = a1[4];
  v4[6] = v6;
  long long v7 = a1[7];
  v4[7] = a1[6];
  v4[8] = v7;
  long long v8 = a1[1];
  v4[1] = *a1;
  long long v4[2] = v8;
  long long v9 = a1[3];
  v4[3] = a1[2];
  v4[4] = v9;
  type metadata accessor for OS_os_log();
  uint64_t v48 = a2;
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)();
  long long v60 = xmmword_C2DE0;
  outlined init with copy of DeviceState((uint64_t)&v62, (uint64_t)v59);
  uint64_t v10 = swift_allocObject();
  outlined init with take of CATType(v59, v10 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = partial apply for closure #1 in FlowSelector.init(with:);
  *(void *)(v11 + 24) = v10;
  v61[0] = &outlined read-only object #0 of specialized FlowSelector.init(with:);
  v61[1] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  uint64_t v61[2] = _s21GeoFlowDelegatePlugin20LocationSearchIntentC07SiriKitB003AnyB0CSgIeggo_AcGIegnr_TRTA_0;
  v61[3] = v11;
  outlined init with copy of DeviceState((uint64_t)&v62, (uint64_t)v58);
  uint64_t v12 = swift_allocObject();
  outlined init with take of CATType(v58, v12 + 16);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = _s21GeoFlowDelegatePlugin0B8SelectorC4withAcA0B6Helper_p_tcfc07SiriKitB003AnyB0CSgAA20LocationSearchIntentCcfU0_TA_0;
  *(void *)(v13 + 24) = v12;
  v61[4] = &outlined read-only object #1 of specialized FlowSelector.init(with:);
  v61[5] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  v61[6] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v61[7] = v13;
  outlined init with copy of DeviceState((uint64_t)&v62, (uint64_t)v57);
  uint64_t v14 = swift_allocObject();
  outlined init with take of CATType(v57, v14 + 16);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = _s21GeoFlowDelegatePlugin0B8SelectorC4withAcA0B6Helper_p_tcfc07SiriKitB003AnyB0CSgAA20LocationSearchIntentCcfU1_TA_0;
  *(void *)(v15 + 24) = v14;
  v61[8] = &outlined read-only object #2 of specialized FlowSelector.init(with:);
  v61[9] = &outlined read-only object #0 of static LocationSearchIntent.LocationSearchNounValue.allCases.getter;
  v61[10] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v61[11] = v15;
  outlined init with copy of DeviceState((uint64_t)&v62, (uint64_t)v56);
  uint64_t v16 = swift_allocObject();
  outlined init with take of CATType(v56, v16 + 16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #4 in FlowSelector.init(with:);
  *(void *)(v17 + 24) = v16;
  v61[12] = &outlined read-only object #3 of specialized FlowSelector.init(with:);
  v61[13] = &outlined read-only object #4 of specialized FlowSelector.init(with:);
  v61[14] = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
  v61[15] = v17;
  uint64_t v18 = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v19 = 0;
  while (1)
  {
    if (v19 >= (unint64_t)v60) {
      goto LABEL_30;
    }
    unint64_t v49 = v19;
    uint64_t v20 = &v61[4 * v19];
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v23 = v20[3];
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = v23;
    uint64_t v52 = *(void *)(v21 + 16);
    if (v52) {
      break;
    }
    swift_retain();
    swift_release();
LABEL_3:
    unint64_t v19 = v49 + 1;
    if (v49 == 3) {
      goto LABEL_28;
    }
  }
  uint64_t v54 = *(void *)(v22 + 16);
  uint64_t v51 = v21 + 32;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v26 = 0;
  uint64_t v50 = v21;
  while (1)
  {
    if (v26 >= *(void *)(v21 + 16))
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v54) {
      break;
    }
LABEL_8:
    if (++v26 == v52)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_3;
    }
  }
  unint64_t v53 = v26;
  __int16 v55 = *(unsigned __int8 *)(v51 + v26);
  swift_bridgeObjectRetain();
  uint64_t v27 = 0;
  while (1)
  {
    uint64_t v29 = v22;
    __int16 v30 = *(unsigned __int8 *)(v22 + v27 + 32);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = _s21GeoFlowDelegatePlugin20LocationSearchIntentC07SiriKitB003AnyB0CSgIegnr_AcGIeggo_TRTA_0;
    *(void *)(v31 + 24) = v25;
    uint64_t v32 = v25;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v59[0] = v18;
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v55 | (unsigned __int16)(v30 << 8));
    uint64_t v36 = v18[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (v18[3] >= v38)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v18 = *(void **)&v59[0];
        if (v34) {
          goto LABEL_12;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v18 = *(void **)&v59[0];
        if (v39) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v55 | (unsigned __int16)(v30 << 8));
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_31;
      }
      unint64_t v35 = v40;
      uint64_t v18 = *(void **)&v59[0];
      if (v39)
      {
LABEL_12:
        uint64_t v28 = (void *)(v18[7] + 16 * v35);
        swift_release();
        *uint64_t v28 = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
        v28[1] = v31;
        goto LABEL_13;
      }
    }
    v18[(v35 >> 6) + 8] |= 1 << v35;
    uint64_t v42 = (unsigned char *)(v18[6] + 2 * v35);
    *uint64_t v42 = v55;
    v42[1] = v30;
    uint64_t v43 = (void *)(v18[7] + 16 * v35);
    *uint64_t v43 = thunk for @escaping @callee_guaranteed (@guaranteed LocationSearchIntent) -> (@owned AnyFlow?)partial apply;
    v43[1] = v31;
    uint64_t v44 = v18[2];
    BOOL v45 = __OFADD__(v44, 1);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_27;
    }
    v18[2] = v46;
LABEL_13:
    ++v27;
    swift_bridgeObjectRelease();
    uint64_t v22 = v29;
    uint64_t v25 = v32;
    if (v54 == v27)
    {
      swift_bridgeObjectRelease();
      uint64_t v21 = v50;
      unint64_t v26 = v53;
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([LocationSearchIntent.LocationSearchVerbValue], [LocationSearchIntent.LocationSearchNounValue], ()));
  swift_arrayDestroy();
  *(void *)(v48 + 24) = v18;
  outlined init with take of CATType(&v62, v48 + 32);
  return v48;
}

uint64_t specialized AnswerETAFlow.init(with:checkNavigation:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[3] = &type metadata for FlowHelperImpl;
  v17[4] = &protocol witness table for FlowHelperImpl;
  long long v8 = (_OWORD *)swift_allocObject();
  v17[0] = v8;
  long long v9 = a1[9];
  v8[9] = a1[8];
  v8[10] = v9;
  v8[11] = a1[10];
  long long v10 = a1[5];
  v8[5] = a1[4];
  v8[6] = v10;
  long long v11 = a1[7];
  v8[7] = a1[6];
  v8[8] = v11;
  long long v12 = a1[1];
  v8[1] = *a1;
  v8[2] = v12;
  long long v13 = a1[3];
  _OWORD v8[3] = a1[2];
  v8[4] = v13;
  type metadata accessor for OS_os_log();
  *(void *)(a4 + 16) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for CATService();
  uint64_t v14 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v14 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v14 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v14 + 16) = 0;
  *(unsigned char *)(a4 + 80) = 0;
  *(unsigned char *)(a4 + 104) = 0;
  *(void *)(a4 + 24) = v14;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 88) = a2;
  *(void *)(a4 + 96) = a3;
  outlined init with copy of DeviceState((uint64_t)v17, a4 + 40);
  type metadata accessor for DialogDuration.Builder();
  swift_allocObject();
  *(void *)(a4 + 112) = DialogDuration.Builder.init()();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v17);
  return a4;
}

void *specialized EndNavigationFlow.init(with:checkNavigation:)(_OWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v17[3] = &type metadata for FlowHelperImpl;
  v17[4] = &protocol witness table for FlowHelperImpl;
  long long v8 = (_OWORD *)swift_allocObject();
  v17[0] = v8;
  long long v9 = a1[9];
  v8[9] = a1[8];
  v8[10] = v9;
  v8[11] = a1[10];
  long long v10 = a1[5];
  v8[5] = a1[4];
  v8[6] = v10;
  long long v11 = a1[7];
  v8[7] = a1[6];
  v8[8] = v11;
  long long v12 = a1[1];
  v8[1] = *a1;
  v8[2] = v12;
  long long v13 = a1[3];
  _OWORD v8[3] = a1[2];
  v8[4] = v13;
  type metadata accessor for OS_os_log();
  a4[2] = OS_os_log.init(subsystem:category:)();
  type metadata accessor for CATService();
  uint64_t v14 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v14 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v14 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v14 + 16) = 0;
  a4[3] = v14;
  a4[4] = 0;
  a4[10] = a2;
  a4[11] = a3;
  outlined init with copy of DeviceState((uint64_t)v17, (uint64_t)(a4 + 5));
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v17);
  return a4;
}

uint64_t specialized AnswerAltitudeFlow.init(with:)(_OWORD *a1, uint64_t a2)
{
  v13[3] = &type metadata for FlowHelperImpl;
  v13[4] = &protocol witness table for FlowHelperImpl;
  uint64_t v4 = (_OWORD *)swift_allocObject();
  v13[0] = v4;
  long long v5 = a1[9];
  v4[9] = a1[8];
  v4[10] = v5;
  void v4[11] = a1[10];
  long long v6 = a1[5];
  v4[5] = a1[4];
  v4[6] = v6;
  long long v7 = a1[7];
  v4[7] = a1[6];
  v4[8] = v7;
  long long v8 = a1[1];
  v4[1] = *a1;
  long long v4[2] = v8;
  long long v9 = a1[3];
  v4[3] = a1[2];
  v4[4] = v9;
  type metadata accessor for OS_os_log();
  *(void *)(a2 + 16) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for CATService();
  uint64_t v10 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v10 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v10 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v10 + 16) = 0;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = 2;
  *(unsigned char *)(a2 + 40) = 2;
  outlined init with copy of DeviceState((uint64_t)v13, a2 + 48);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v13);
  return a2;
}

unint64_t specialized GeoDirectInvocations.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GeoDirectInvocations.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for GeoFlowDelegatePlugin()
{
  return self;
}

uint64_t sub_8326C()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type GeoDirectInvocations and conformance GeoDirectInvocations()
{
  unint64_t result = lazy protocol witness table cache variable for type GeoDirectInvocations and conformance GeoDirectInvocations;
  if (!lazy protocol witness table cache variable for type GeoDirectInvocations and conformance GeoDirectInvocations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeoDirectInvocations and conformance GeoDirectInvocations);
  }
  return result;
}

uint64_t base witness table accessor for FlowPlugin in GeoFlowDelegatePlugin(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0(&lazy protocol witness table cache variable for type GeoFlowDelegatePlugin and conformance GeoFlowDelegatePlugin, a2, (void (*)(uint64_t))type metadata accessor for GeoFlowDelegatePlugin);
}

uint64_t _s21GeoFlowDelegatePlugin018UnsupportedRequestB0CAC07SiriKitB00B0AAWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_83414@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_83460(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 104);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

unsigned char *storeEnumTagSinglePayload for GeoDirectInvocations(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x83580);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoDirectInvocations()
{
  return &type metadata for GeoDirectInvocations;
}

uint64_t sub_835B8()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_835F0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _s21GeoFlowDelegatePlugin20LocationSearchIntentC07SiriKitB003AnyB0CSgIeggo_AcGIegnr_TRTA_0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t _s21GeoFlowDelegatePlugin0B8SelectorC4withAcA0B6Helper_p_tcfc07SiriKitB003AnyB0CSgAA20LocationSearchIntentCcfU0_TA_0(uint64_t a1)
{
  return closure #2 in FlowSelector.init(with:)(a1, v1 + 16);
}

uint64_t _s21GeoFlowDelegatePlugin0B8SelectorC4withAcA0B6Helper_p_tcfc07SiriKitB003AnyB0CSgAA20LocationSearchIntentCcfU1_TA_0(uint64_t a1)
{
  return closure #3 in FlowSelector.init(with:)(a1, v1 + 16);
}

uint64_t _s21GeoFlowDelegatePlugin20LocationSearchIntentC07SiriKitB003AnyB0CSgIegnr_AcGIeggo_TRTA_0(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed LocationSearchIntent) -> (@out AnyFlow?)(a1, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16));
}

uint64_t static GeoParse.getGeoExperience(parse:)()
{
  if (!specialized static GeoParse.getUsoTask(usoParse:)()) {
    return 4;
  }
  uint64_t v0 = UsoTask.getGeoTaskType()();
  swift_release();
  return v0;
}

uint64_t OnDeviceExperience.rawValue.getter(char a1)
{
  return *(void *)&aAnsweretendnav[8 * a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OnDeviceExperience(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = OnDeviceExperience.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == OnDeviceExperience.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OnDeviceExperience()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  OnDeviceExperience.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OnDeviceExperience()
{
  OnDeviceExperience.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OnDeviceExperience()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  OnDeviceExperience.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance OnDeviceExperience@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized OnDeviceExperience.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance OnDeviceExperience@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OnDeviceExperience.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

GeoFlowDelegatePlugin::OnDeviceExperience __swiftcall UsoTask.getGeoTaskType()()
{
  if (UsoTask.baseEntityAsString.getter() == 0x4A5F6E6F6D6D6F63 && v0 == 0xEE0079656E72756FLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0) {
      goto LABEL_10;
    }
  }
  if (UsoTask.verbString.getter() == 1886352499 && v2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v4) {
    return 1;
  }
LABEL_10:
  if (UsoTask.answerETATask()()) {
    return 0;
  }
  if (UsoTask.baseEntityAsString.getter() == 0x435F6E6F6D6D6F63 && v5 == 0xEE00737361706D6FLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      goto LABEL_21;
    }
  }
  if (UsoTask.verbString.getter() == 0x74736575716572 && v7 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v8) {
    return 2;
  }
LABEL_21:
  if (UsoTask.baseEntityAsString.getter() == 0xD000000000000016 && v9 == 0x80000000000C9B80)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 4;
    }
  }
  if (UsoTask.verbString.getter() == 0x736972616D6D7573 && v11 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v12) {
    return 3;
  }
  return 4;
}

uint64_t UsoTask.answerETATask()()
{
  if (UsoTask.baseEntityAsString.getter() == 0x4A5F6E6F6D6D6F63 && v0 == 0xEE0079656E72756FLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v1 & 1) == 0) {
      return result;
    }
  }
  if (UsoTask.verbString.getter() == 0x74736575716572 && v3 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v4 & 1) == 0) {
      return result;
    }
  }
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v10, (uint64_t)v9);
  if (!v9[3])
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
    goto LABEL_16;
  }
  type metadata accessor for UsoTask_request_common_Journey();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
    return 1;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
  swift_release();
  if (v9[0])
  {
    uint64_t v5 = dispatch thunk of UsoEntity_common_Journey.dateTimeRange.getter();
    swift_release();
    if (v5)
    {
      uint64_t v6 = dispatch thunk of UsoEntity_common_DateTimeRange.end.getter();
      swift_release();
      if (v6)
      {
        swift_release();
        outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
LABEL_20:
        swift_release();
        return 1;
      }
    }
  }
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
  if (v9[0] && (uint64_t v7 = dispatch thunk of UsoEntity_common_Journey.dateTimeRange.getter(), swift_release(), v7))
  {
    uint64_t v8 = dispatch thunk of UsoEntity_common_DateTimeRange.end.getter();
    swift_release();
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
    if (v8) {
      goto LABEL_20;
    }
  }
  else
  {
    swift_release();
    outlined destroy of (label: String?, value: Any)?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t specialized static GeoParse.getUsoTask(usoParse:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  USOParse.userParse.getter();
  uint64_t v7 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v10 = *(void *)(v9 - 8);
  if (v8)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v6, v7+ ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80)), v9);
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, v11, 1, v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v6, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    return 0;
  }
  unint64_t v13 = Siri_Nlu_External_UserDialogAct.getTasks()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v9);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8));
    if (!v12)
    {
LABEL_11:
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  if ((v13 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_11;
  }
  if (*(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8)))
  {
    uint64_t v12 = *(void *)(v13 + 32);
    swift_retain();
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

unint64_t specialized OnDeviceExperience.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of OnDeviceExperience.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type OnDeviceExperience and conformance OnDeviceExperience()
{
  unint64_t result = lazy protocol witness table cache variable for type OnDeviceExperience and conformance OnDeviceExperience;
  if (!lazy protocol witness table cache variable for type OnDeviceExperience and conformance OnDeviceExperience)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnDeviceExperience and conformance OnDeviceExperience);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OnDeviceExperience(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x84298);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnDeviceExperience()
{
  return &type metadata for OnDeviceExperience;
}

uint64_t DeleteParkingHandleIntentStrategy.__allocating_init(with:isPommes:)(long long *a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v4 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v4 + 24);
  *(unsigned char *)(v4 + 64) = a2;
  return v4;
}

uint64_t DeleteParkingHandleIntentStrategy.init(with:isPommes:)(long long *a1, char a2)
{
  type metadata accessor for OS_os_log();
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v2 + 24);
  *(unsigned char *)(v2 + 64) = a2;
  return v2;
}

uint64_t DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return _swift_task_switch(DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0, 0);
}

uint64_t DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INDeleteParkingLocationIntent, INDeleteParkingLocationIntentResponse>);
  uint64_t v1 = (void *)IntentResolutionRecord.intentResponse.getter();
  uint64_t v2 = (char *)[v1 code];

  if (v2 == (unsigned char *)&dword_0 + 3)
  {
    int v3 = *(void **)(v0 + 72);
    uint64_t v4 = v3[6];
    uint64_t v5 = v3[7];
    __swift_project_boxed_opaque_existential_1(v3 + 3, v4);
    type metadata accessor for DialogLocation.Builder();
    swift_allocObject();
    DialogLocation.Builder.init()();
    uint64_t v6 = dispatch thunk of DialogLocation.Builder.build()();
    swift_release();
    *(void *)(v0 + 40) = &type metadata for DeleteParkingLocation;
    *(void *)(v0 + 48) = &protocol witness table for DeleteParkingLocation;
    *(void *)(v0 + 16) = v6;
    *(_OWORD *)(v0 + 24) = xmmword_C4EA0;
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v7;
    void *v7 = v0;
    v7[1] = DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v8 = *(void *)(v0 + 56);
    return FlowHelper.makeDialogOnlyOutput(model:)(v8, v0 + 16, v4, v5);
  }
  else
  {
    unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 72) + 120)
                                                   + **(int **)(**(void **)(v0 + 72) + 120));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v10;
    *uint64_t v10 = v0;
    v10[1] = DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v11 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 56);
    return v13(v12, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(DeleteParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0, 0);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    int v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  int v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t DeleteParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return _swift_task_switch(DeleteParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:), 0, 0);
}

uint64_t DeleteParkingHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v3 = v1[6];
  uint64_t v2 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  v0[5] = &type metadata for DeleteParkingLocation;
  v0[6] = &protocol witness table for DeleteParkingLocation;
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = 0;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  *uint64_t v4 = v0;
  v4[1] = SaveParkingLocationUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  uint64_t v5 = v0[7];
  return FlowHelper.makeDialogOnlyOutput(model:)(v5, (uint64_t)(v0 + 2), v3, v2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance DeleteParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance DeleteParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance DeleteParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance DeleteParkingHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 112)
                                                + **(int **)(**(void **)v2 + 112));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance DeleteParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance DeleteParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance DeleteParkingHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 120)
                                                + **(int **)(**(void **)v2 + 120));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance DeleteParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingHandleIntentStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

unint64_t lazy protocol witness table accessor for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy;
  if (!lazy protocol witness table cache variable for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy)
  {
    type metadata accessor for DeleteParkingHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeleteParkingHandleIntentStrategy and conformance DeleteParkingHandleIntentStrategy);
  }
  return result;
}

uint64_t type metadata accessor for DeleteParkingHandleIntentStrategy()
{
  return self;
}

uint64_t LocationSearchIntentBuilder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  LocationSearchIntentBuilder.init()();
  return v0;
}

uint64_t LocationSearchIntentBuilder.noun.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t LocationSearchIntentBuilder.noun.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

uint64_t (*LocationSearchIntentBuilder.noun.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t LocationSearchIntentBuilder.verb.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t LocationSearchIntentBuilder.verb.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 17) = a1;
  return result;
}

uint64_t (*LocationSearchIntentBuilder.verb.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t LocationSearchIntentBuilder.incidentType.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t LocationSearchIntentBuilder.incidentType.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 18) = a1;
  return result;
}

uint64_t (*LocationSearchIntentBuilder.incidentType.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t LocationSearchIntentBuilder.confirmation.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t LocationSearchIntentBuilder.confirmation.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 19) = a1;
  return result;
}

uint64_t (*LocationSearchIntentBuilder.confirmation.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t LocationSearchIntentBuilder.appName.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocationSearchIntentBuilder.appName.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ShareETAContactConfirmationStrategy.isPOMMES.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t LocationSearchIntentBuilder.firstName.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocationSearchIntentBuilder.firstName.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t LocationSearchIntentBuilder.fullName.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocationSearchIntentBuilder.fullName.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t LocationSearchIntentBuilder.relationship.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocationSearchIntentBuilder.relationship.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*LocationSearchIntentBuilder.relationship.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t LocationSearchIntentBuilder.locationSearchVerbMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocationSearchIntentBuilder.locationSearchConfirmationMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocationSearchIntentBuilder.locationSearchIncidentTypeMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocationSearchIntentBuilder.fromLocationSearchNode(locationSearchNode:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType();
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v39 = v2;
  __chkstk_darwin(v2);
  BOOL v37 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb();
  uint64_t v7 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v0[12];
  Apple_Parsec_Siri_V2alpha_LocationSearchNode.locationSearchNoun.getter();
  if (*(void *)(v14 + 16) && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13), (v16 & 1) != 0)) {
    uint64_t v17 = *(unsigned __int8 *)(*(void *)(v14 + 56) + v15);
  }
  else {
    uint64_t v17 = 8;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(uint64_t))(*v1 + 184))(v17);
  uint64_t v18 = v1[11];
  Apple_Parsec_Siri_V2alpha_LocationSearchNode.locationSearchVerb.getter();
  if (*(void *)(v18 + 16) && (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v20 & 1) != 0)) {
    uint64_t v21 = *(unsigned __int8 *)(*(void *)(v18 + 56) + v19);
  }
  else {
    uint64_t v21 = 10;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v34);
  (*(void (**)(uint64_t))(*v1 + 208))(v21);
  uint64_t v22 = v1[13];
  Apple_Parsec_Siri_V2alpha_LocationSearchNode.locationSearchConfirmation.getter();
  if (*(void *)(v22 + 16))
  {
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    uint64_t v24 = (uint64_t)v37;
    if (v25) {
      uint64_t v26 = *(unsigned __int8 *)(*(void *)(v22 + 56) + v23);
    }
    else {
      uint64_t v26 = 3;
    }
  }
  else
  {
    uint64_t v26 = 3;
    uint64_t v24 = (uint64_t)v37;
  }
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v36);
  (*(void (**)(uint64_t))(*v1 + 256))(v26);
  uint64_t v27 = v1[14];
  Apple_Parsec_Siri_V2alpha_LocationSearchNode.locationSearchIncidentType.getter();
  if (*(void *)(v27 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v24), (v29 & 1) != 0)) {
    uint64_t v30 = *(unsigned __int8 *)(*(void *)(v27 + 56) + v28);
  }
  else {
    uint64_t v30 = 9;
  }
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v24, v39);
  (*(void (**)(uint64_t))(*v1 + 232))(v30);
  uint64_t v31 = Apple_Parsec_Siri_V2alpha_LocationSearchNode.occupantFullName.getter();
  (*(void (**)(uint64_t))(*v1 + 328))(v31);
  uint64_t v32 = Apple_Parsec_Siri_V2alpha_LocationSearchNode.personRelationship.getter();
  (*(void (**)(uint64_t))(*v1 + 352))(v32);
  return swift_retain();
}

uint64_t LocationSearchIntentBuilder.withNoun(noun:)()
{
  (*(void (**)(void))(*(void *)v0 + 184))();

  return swift_retain();
}

uint64_t LocationSearchIntentBuilder.withVerb(verb:)()
{
  (*(void (**)(void))(*(void *)v0 + 208))();

  return swift_retain();
}

uint64_t LocationSearchIntentBuilder.withIncidentType(incidentType:)()
{
  (*(void (**)(void))(*(void *)v0 + 232))();

  return swift_retain();
}

uint64_t LocationSearchIntentBuilder.withConfirmation(confirmation:)()
{
  (*(void (**)(void))(*(void *)v0 + 256))();

  return swift_retain();
}

uint64_t LocationSearchIntentBuilder.withAppName(appName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 280);
  swift_bridgeObjectRetain();
  v5(a1, a2);

  return swift_retain();
}

uint64_t LocationSearchIntentBuilder.withFirstName(firstName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 304);
  swift_bridgeObjectRetain();
  v5(a1, a2);

  return swift_retain();
}

uint64_t LocationSearchIntentBuilder.withRelationship(relationship:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 352);
  swift_bridgeObjectRetain();
  v5(a1, a2);

  return swift_retain();
}

uint64_t LocationSearchIntentBuilder.withFullName(fullName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 328);
  swift_bridgeObjectRetain();
  v5(a1, a2);

  return swift_retain();
}

void *LocationSearchIntentBuilder.buildOccupantNodes()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Value?);
  __chkstk_darwin(v1 - 8);
  uint64_t v59 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TerminalIntentNode();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  char v58 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  BOOL v57 = (char *)&v52 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  __int16 v55 = (char *)&v52 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v54 = (char *)&v52 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v52 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v52 - v16;
  uint64_t v18 = type metadata accessor for TerminalElement.Value();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v56 = (uint64_t *)((char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v53 = (uint64_t *)((char *)&v52 - v23);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v52 - v25;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 296))(v24);
  if (!v28) {
    goto LABEL_9;
  }
  uint64_t v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0) {
    uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (!v29)
  {
    uint64_t v27 = swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v32 = _swiftEmptyArrayStorage;
    goto LABEL_10;
  }
  TerminalElement.SemanticValue.init(_:javaPojoName:)();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v26, enum case for TerminalElement.Value.semantic(_:), v18);
  uint64_t v30 = v59;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v59, v26, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v30, 0, 1, v18);
  TerminalIntentNode.init(name:value:semanticTags:)();
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v52 = v3;
  v31(v15, v17, v3);
  uint64_t v32 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v34 = v32[2];
  unint64_t v33 = v32[3];
  if (v34 >= v33 >> 1) {
    uint64_t v32 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v32);
  }
  _OWORD v32[2] = v34 + 1;
  uint64_t v3 = v52;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v32+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v34, v15, v52);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v3);
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v26, v18);
LABEL_10:
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 320))(v27);
  if (v36)
  {
    uint64_t v37 = HIBYTE(v36) & 0xF;
    if ((v36 & 0x2000000000000000) == 0) {
      uint64_t v37 = v35 & 0xFFFFFFFFFFFFLL;
    }
    if (v37)
    {
      uint64_t v38 = v53;
      *unint64_t v53 = v35;
      v38[1] = v36;
      (*(void (**)(uint64_t *, void, uint64_t))(v19 + 104))(v38, enum case for TerminalElement.Value.string(_:), v18);
      uint64_t v39 = v59;
      (*(void (**)(char *, uint64_t *, uint64_t))(v19 + 16))(v59, v38, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v39, 0, 1, v18);
      unint64_t v40 = v54;
      TerminalIntentNode.init(name:value:semanticTags:)();
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v55, v40, v3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v32 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, (unint64_t)v32);
      }
      unint64_t v42 = v32[2];
      unint64_t v41 = v32[3];
      if (v42 >= v41 >> 1) {
        uint64_t v32 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, (unint64_t)v32);
      }
      _OWORD v32[2] = v42 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v32+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v42, v55, v3);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v54, v3);
      uint64_t v35 = (*(uint64_t (**)(uint64_t *, uint64_t))(v19 + 8))(v53, v18);
    }
    else
    {
      uint64_t v35 = swift_bridgeObjectRelease();
    }
  }
  uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 344))(v35);
  if (v44)
  {
    uint64_t v45 = HIBYTE(v44) & 0xF;
    if ((v44 & 0x2000000000000000) == 0) {
      uint64_t v45 = v43 & 0xFFFFFFFFFFFFLL;
    }
    if (v45)
    {
      uint64_t v46 = v56;
      *uint64_t v56 = v43;
      v46[1] = v44;
      (*(void (**)(uint64_t *, void, uint64_t))(v19 + 104))(v46, enum case for TerminalElement.Value.string(_:), v18);
      uint64_t v47 = v59;
      (*(void (**)(char *, uint64_t *, uint64_t))(v19 + 16))(v59, v46, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v47, 0, 1, v18);
      uint64_t v48 = v57;
      TerminalIntentNode.init(name:value:semanticTags:)();
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v58, v48, v3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v32 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, (unint64_t)v32);
      }
      unint64_t v50 = v32[2];
      unint64_t v49 = v32[3];
      if (v50 >= v49 >> 1) {
        uint64_t v32 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1, (unint64_t)v32);
      }
      _OWORD v32[2] = v50 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v32+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v50, v58, v3);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v57, v3);
      (*(void (**)(uint64_t *, uint64_t))(v19 + 8))(v56, v18);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return v32;
}

uint64_t LocationSearchIntentBuilder.build()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v131 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MitigatorClassification?);
  __chkstk_darwin(v3 - 8);
  uint64_t v130 = (char *)&v128 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLState?);
  __chkstk_darwin(v5 - 8);
  uint64_t v129 = (char *)&v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NonTerminalIntentNode();
  uint64_t v148 = *(uint64_t **)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v137 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v147 = (char *)&v128 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v128 - v12;
  uint64_t v141 = type metadata accessor for TerminalIntentNode();
  uint64_t v14 = *(void *)(v141 - 8);
  uint64_t v15 = __chkstk_darwin(v141);
  uint64_t v138 = (char *)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v146 = (uint64_t *)((char *)&v128 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v144 = (uint64_t *)((char *)&v128 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v128 - v22;
  __chkstk_darwin(v21);
  *(void *)&long long v150 = (char *)&v128 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Value?);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v145 = (char *)&v128 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v128 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  unint64_t v33 = (char *)&v128 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  unint64_t v36 = (char *)&v128 - v35;
  v154[0] = _swiftEmptyArrayStorage;
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 176))(v34);
  uint64_t v149 = v7;
  unint64_t v139 = v13;
  uint64_t v140 = v14;
  if (v37 != 8)
  {
    if (one-time initialization token for nounNode != -1) {
      swift_once();
    }
    TerminalOntologyNode.name.getter();
    TerminalElement.SemanticValue.init(_:javaPojoName:)();
    uint64_t v38 = enum case for TerminalElement.Value.semantic(_:);
    uint64_t v39 = type metadata accessor for TerminalElement.Value();
    uint64_t v40 = *(void *)(v39 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 104))(v36, v38, v39);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
    uint64_t v152 = v141;
    unint64_t v153 = &protocol witness table for TerminalIntentNode;
    __swift_allocate_boxed_opaque_existential_0(v151);
    TerminalIntentNode.init(name:value:semanticTags:)();
    unint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, _swiftEmptyArrayStorage);
    v154[0] = v41;
    unint64_t v43 = v41[2];
    unint64_t v42 = v41[3];
    if (v43 >= v42 >> 1) {
      v154[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v41);
    }
    uint64_t v44 = v152;
    uint64_t v45 = (uint64_t)v153;
    uint64_t v46 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v151, v152);
    __chkstk_darwin(v46);
    uint64_t v48 = (char *)&v128 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v49 + 16))(v48);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, (uint64_t)v48, (uint64_t *)v154, v44, v45);
    uint64_t v37 = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v151);
    uint64_t v7 = v149;
    uint64_t v13 = v139;
    uint64_t v14 = v140;
  }
  uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 200))(v37);
  if (v50 != 10)
  {
    char v51 = v50;
    if (one-time initialization token for verbNode != -1) {
      swift_once();
    }
    TerminalOntologyNode.name.getter();
    LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v51);
    TerminalElement.SemanticValue.init(_:javaPojoName:)();
    uint64_t v52 = enum case for TerminalElement.Value.semantic(_:);
    uint64_t v53 = type metadata accessor for TerminalElement.Value();
    uint64_t v54 = *(void *)(v53 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 104))(v33, v52, v53);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v33, 0, 1, v53);
    specialized static Array._allocateUninitialized(_:)(0);
    uint64_t v55 = v150;
    TerminalIntentNode.init(name:value:semanticTags:)();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v57 = v154[0][2];
    unint64_t v56 = v154[0][3];
    if (v57 >= v56 >> 1) {
      v154[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v154[0]);
    }
    uint64_t v14 = v140;
    uint64_t v58 = v141;
    (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v23, v55, v141);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, (uint64_t)v23, (uint64_t *)v154, (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode, (uint64_t)&protocol witness table for TerminalIntentNode);
    uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v55, v58);
    uint64_t v13 = v139;
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 248))(v50);
  if (v59 != 3)
  {
    if (one-time initialization token for confirmationNode != -1) {
      swift_once();
    }
    TerminalOntologyNode.name.getter();
    TerminalElement.SemanticValue.init(_:javaPojoName:)();
    uint64_t v60 = enum case for TerminalElement.Value.semantic(_:);
    uint64_t v61 = type metadata accessor for TerminalElement.Value();
    uint64_t v62 = *(void *)(v61 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 104))(v30, v60, v61);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v30, 0, 1, v61);
    specialized static Array._allocateUninitialized(_:)(0);
    uint64_t v63 = v144;
    TerminalIntentNode.init(name:value:semanticTags:)();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v65 = v154[0][2];
    unint64_t v64 = v154[0][3];
    if (v65 >= v64 >> 1) {
      v154[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v64 > 1), v65 + 1, 1, v154[0]);
    }
    uint64_t v14 = v140;
    uint64_t v66 = v141;
    uint64_t v67 = v150;
    (*(void (**)(void, uint64_t *, uint64_t))(v140 + 16))(v150, v63, v141);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v67, (uint64_t *)v154, (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode, (uint64_t)&protocol witness table for TerminalIntentNode);
    uint64_t v59 = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v63, v66);
  }
  int v68 = (*(unsigned __int8 (**)(uint64_t))(*(void *)v2 + 224))(v59);
  if (one-time initialization token for incidentTypeNode != -1) {
    swift_once();
  }
  TerminalOntologyNode.name.getter();
  unint64_t v69 = 0x80000000000C6670;
  uint64_t v70 = 0xD000000000000010;
  switch(v68)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      uint64_t v71 = v145;
      TerminalElement.SemanticValue.init(_:javaPojoName:)();
      uint64_t v72 = enum case for TerminalElement.Value.semantic(_:);
      uint64_t v73 = type metadata accessor for TerminalElement.Value();
      uint64_t v74 = *(void *)(v73 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v74 + 104))(v71, v72, v73);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      specialized static Array._allocateUninitialized(_:)(0);
      BOOL v75 = v146;
      TerminalIntentNode.init(name:value:semanticTags:)();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v77 = v154[0][2];
      unint64_t v76 = v154[0][3];
      if (v77 >= v76 >> 1) {
        v154[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v76 > 1), v77 + 1, 1, v154[0]);
      }
      uint64_t v78 = v150;
      uint64_t v79 = v141;
      (*(void (**)(void, uint64_t *, uint64_t))(v14 + 16))(v150, v75, v141);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v77, v78, (uint64_t *)v154, (uint64_t (*)(void))&type metadata accessor for TerminalIntentNode, (uint64_t)&protocol witness table for TerminalIntentNode);
      uint64_t v70 = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v75, v79);
      uint64_t v7 = v149;
      break;
    default:
      break;
  }
  (*(void (**)(uint64_t, unint64_t))(*(void *)v2 + 272))(v70, v69);
  uint64_t v80 = (_OWORD *)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode;
  if (v81)
  {
    if (one-time initialization token for appName != -1) {
      swift_once();
    }
    TerminalOntologyNode.name.getter();
    TerminalElement.SemanticValue.init(_:javaPojoName:)();
    uint64_t v82 = enum case for TerminalElement.Value.semantic(_:);
    uint64_t v83 = type metadata accessor for TerminalElement.Value();
    uint64_t v84 = *(void *)(v83 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 104))(v33, v82, v83);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v33, 0, 1, v83);
    specialized static Array._allocateUninitialized(_:)(0);
    uint64_t v85 = v150;
    TerminalIntentNode.init(name:value:semanticTags:)();
    if (one-time initialization token for appNode != -1) {
      swift_once();
    }
    NonTerminalOntologyNode.name.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
    uint64_t v86 = swift_allocObject();
    uint64_t v80 = &protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode;
    *(_OWORD *)(v86 + 16) = xmmword_C0600;
    uint64_t v87 = v141;
    *(void *)(v86 + 56) = v141;
    *(void *)(v86 + 64) = &protocol witness table for TerminalIntentNode;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v86 + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(boxed_opaque_existential_0, v85, v87);
    specialized static Array._allocateUninitialized(_:)(0);
    NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v90 = v154[0][2];
    unint64_t v89 = v154[0][3];
    if (v90 >= v89 >> 1) {
      v154[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v89 > 1), v90 + 1, 1, v154[0]);
    }
    uint64_t v92 = (uint64_t)v147;
    uint64_t v91 = v148;
    ((void (*)(char *, char *, uint64_t))v148[2])(v147, v13, v7);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v90, v92, (uint64_t *)v154, (uint64_t (*)(void))&type metadata accessor for NonTerminalIntentNode, (uint64_t)&protocol witness table for NonTerminalIntentNode);
    ((void (*)(char *, uint64_t))v91[1])(v13, v7);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v85, v87);
  }
  uint64_t v93 = LocationSearchIntentBuilder.buildOccupantNodes()();
  uint64_t v94 = (uint64_t *)v93[2];
  if (v94)
  {
    int v96 = *(void (**)(uint64_t *, char *, uint64_t))(v14 + 16);
    uint64_t v95 = v14 + 16;
    uint64_t v136 = v96;
    unint64_t v97 = (*(unsigned __int8 *)(v95 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 64);
    uint64_t v128 = v93;
    uint64_t v98 = (char *)v93 + v97;
    uint64_t v135 = *(void *)(v95 + 56);
    uint64_t v134 = v148 + 2;
    uint64_t v133 = v148 + 1;
    uint64_t v132 = (void (**)(char *, uint64_t))(v95 - 8);
    long long v150 = v80[96];
    uint64_t v99 = v141;
    int v100 = v138;
    uint64_t v140 = v95;
    do
    {
      os_log_type_t v147 = v98;
      uint64_t v148 = v94;
      uint64_t v101 = v136;
      v136((uint64_t *)v100, v98, v99);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
      uint64_t v102 = swift_allocObject();
      *(_OWORD *)(v102 + 16) = v150;
      uint64_t v145 = (char *)v102;
      uint64_t v146 = (uint64_t *)(v102 + 32);
      uint64_t v103 = swift_allocObject();
      *(_OWORD *)(v103 + 16) = v150;
      uint64_t v144 = (uint64_t *)(v103 + 32);
      uint64_t v104 = swift_allocObject();
      *(_OWORD *)(v104 + 16) = v150;
      uint64_t v143 = (uint64_t *)(v104 + 32);
      uint64_t v105 = swift_allocObject();
      *(_OWORD *)(v105 + 16) = v150;
      uint64_t v142 = (uint64_t *)(v105 + 32);
      uint64_t v106 = swift_allocObject();
      *(_OWORD *)(v106 + 16) = v150;
      uint64_t v107 = swift_allocObject();
      *(_OWORD *)(v107 + 16) = v150;
      *(void *)(v107 + 56) = v99;
      *(void *)(v107 + 64) = &protocol witness table for TerminalIntentNode;
      unint64_t v108 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v107 + 32));
      v101(v108, v100, v99);
      specialized static Array._allocateUninitialized(_:)(0);
      *(void *)(v106 + 56) = v149;
      *(void *)(v106 + 64) = &protocol witness table for NonTerminalIntentNode;
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v106 + 32));
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
      specialized static Array._allocateUninitialized(_:)(0);
      *(void *)(v105 + 56) = v149;
      *(void *)(v105 + 64) = &protocol witness table for NonTerminalIntentNode;
      __swift_allocate_boxed_opaque_existential_0(v142);
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
      specialized static Array._allocateUninitialized(_:)(0);
      *(void *)(v104 + 56) = v149;
      *(void *)(v104 + 64) = &protocol witness table for NonTerminalIntentNode;
      __swift_allocate_boxed_opaque_existential_0(v143);
      uint64_t v109 = v149;
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
      specialized static Array._allocateUninitialized(_:)(0);
      *(void *)(v103 + 56) = v109;
      *(void *)(v103 + 64) = &protocol witness table for NonTerminalIntentNode;
      __swift_allocate_boxed_opaque_existential_0(v144);
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
      specialized static Array._allocateUninitialized(_:)(0);
      unint64_t v111 = v145;
      unint64_t v110 = v146;
      *((void *)v145 + 7) = v109;
      *((void *)v111 + 8) = &protocol witness table for NonTerminalIntentNode;
      __swift_allocate_boxed_opaque_existential_0(v110);
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
      specialized static Array._allocateUninitialized(_:)(0);
      uint64_t v112 = v137;
      NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v114 = v154[0][2];
      unint64_t v113 = v154[0][3];
      os_log_type_t v115 = v112;
      if (v114 >= v113 >> 1) {
        v154[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v113 > 1), v114 + 1, 1, v154[0]);
      }
      uint64_t v116 = (uint64_t)v139;
      ((void (*)(char *, char *, uint64_t))*v134)(v139, v115, v109);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v114, v116, (uint64_t *)v154, (uint64_t (*)(void))&type metadata accessor for NonTerminalIntentNode, (uint64_t)&protocol witness table for NonTerminalIntentNode);
      ((void (*)(char *, uint64_t))*v133)(v115, v109);
      int v100 = v138;
      uint64_t v99 = v141;
      (*v132)(v138, v141);
      uint64_t v98 = &v147[v135];
      uint64_t v94 = (uint64_t *)((char *)v148 - 1);
    }
    while (v148 != (uint64_t *)((char *)&dword_0 + 1));
    swift_bridgeObjectRelease();
    uint64_t v80 = (_OWORD *)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
  uint64_t v117 = swift_allocObject();
  long long v150 = v80[96];
  *(_OWORD *)(v117 + 16) = v150;
  uint64_t v118 = v117;
  os_log_type_t v147 = (char *)v117;
  uint64_t v119 = swift_allocObject();
  *(_OWORD *)(v119 + 16) = v150;
  uint64_t v120 = swift_allocObject();
  *(_OWORD *)(v120 + 16) = v150;
  uint64_t v121 = swift_allocObject();
  *(_OWORD *)(v121 + 16) = v150;
  uint64_t v122 = swift_allocObject();
  *(_OWORD *)(v122 + 16) = v150;
  uint64_t v146 = (uint64_t *)(v120 + 32);
  uint64_t v148 = (uint64_t *)(v119 + 32);
  *(void *)&long long v150 = v118 + 32;
  specialized static Array._allocateUninitialized(_:)(0);
  uint64_t v123 = v149;
  *(void *)(v122 + 56) = v149;
  *(void *)(v122 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v122 + 32));
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  specialized static Array._allocateUninitialized(_:)(0);
  *(void *)(v121 + 56) = v123;
  *(void *)(v121 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v121 + 32));
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  specialized static Array._allocateUninitialized(_:)(0);
  *(void *)(v120 + 56) = v123;
  *(void *)(v120 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0(v146);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  specialized static Array._allocateUninitialized(_:)(0);
  *(void *)(v119 + 56) = v123;
  *(void *)(v119 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0(v148);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  specialized static Array._allocateUninitialized(_:)(0);
  uint64_t v124 = v147;
  *((void *)v147 + 7) = v123;
  *((void *)v124 + 8) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)v150);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  specialized static Array._allocateUninitialized(_:)(0);
  uint64_t v152 = v123;
  unint64_t v153 = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_0(v151);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  uint64_t v125 = type metadata accessor for NLState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 56))(v129, 1, 1, v125);
  uint64_t v126 = type metadata accessor for MitigatorClassification();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v126 - 8) + 56))(v130, 1, 1, v126);
  type metadata accessor for MetaDomainAction();
  return NLIntent.init(rootNode:score:originalInput:allWordsMatched:primary:usingExplicitInput:intentRank:isNERBasedParse:intentID:nlState:mitigatorClassification:strippedVoiceTrigger:isInvalidVoiceTrigger:isSuggested:metaDomainActions:)();
}

uint64_t LocationSearchIntentBuilder.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LocationSearchIntentBuilder.__deallocating_deinit()
{
  LocationSearchIntentBuilder.deinit();

  return _swift_deallocClassInstance(v0, 120, 7);
}

void *LocationSearchIntentBuilder.init()()
{
  *(_DWORD *)(v0 + 16) = 50924040;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchVerb, LocationSearchIntent.LocationSearchVerbValue))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_BFBE0;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v1[14];
  uint64_t v7 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.unknown(_:);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchVerb();
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);
  v9(v5, v7, v8);
  *(unsigned char *)(v5 + v6) = 0;
  uint64_t v10 = v1[14];
  v9(v5 + v2, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.share(_:), v8);
  *(unsigned char *)(v5 + v2 + v10) = 1;
  uint64_t v11 = v1[14];
  v9(v5 + 2 * v2, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.stopShare(_:), v8);
  *(unsigned char *)(v5 + 2 * v2 + v11) = 2;
  uint64_t v12 = v1[14];
  v9(v5 + 3 * v2, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.report(_:), v8);
  *(unsigned char *)(v5 + 3 * v2 + v12) = 3;
  uint64_t v13 = v1[14];
  v9(v5 + 4 * v2, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.confirmReport(_:), v8);
  *(unsigned char *)(v5 + 4 * v2 + v13) = 5;
  unint64_t v14 = v5 + 5 * v2;
  uint64_t v15 = v1[14];
  v9(v14, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchVerb.clearReport(_:), v8);
  *(unsigned char *)(v14 + v15) = 4;
  v60[11] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue)>);
  uint64_t v16 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchNoun, LocationSearchIntent.LocationSearchNounValue))
              - 8);
  uint64_t v17 = *(void *)(*(void *)v16 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(*(void *)v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v16 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_BFBF0;
  unint64_t v20 = v19 + v18;
  uint64_t v21 = v16[14];
  uint64_t v22 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchNoun.unknown(_:);
  uint64_t v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchNoun();
  uint64_t v24 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104);
  v24(v20, v22, v23);
  *(unsigned char *)(v20 + v21) = 0;
  unint64_t v25 = v20 + v17;
  uint64_t v26 = v16[14];
  v24(v25, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchNoun.eta(_:), v23);
  *(unsigned char *)(v25 + v26) = 6;
  v60[12] = specialized Dictionary.init(dictionaryLiteral:)(v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue)>);
  uint64_t v27 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation, LocationSearchIntent.LocationSearchConfirmationValue))
              - 8);
  uint64_t v28 = *(void *)(*(void *)v27 + 72);
  unint64_t v29 = (*(unsigned __int8 *)(*(void *)v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v27 + 80);
  uint64_t v30 = 2 * v28;
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_BFBD0;
  unint64_t v32 = v31 + v29;
  uint64_t v33 = v27[14];
  uint64_t v34 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.yes(_:);
  uint64_t v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation();
  unint64_t v36 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104);
  v36(v32, v34, v35);
  *(unsigned char *)(v32 + v33) = 0;
  unint64_t v37 = v32 + v28;
  uint64_t v38 = v27[14];
  v36(v37, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.no(_:), v35);
  *(unsigned char *)(v37 + v38) = 1;
  unint64_t v39 = v32 + v30;
  uint64_t v40 = v27[14];
  v36(v39, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchConfirmation.cancel(_:), v35);
  *(unsigned char *)(v39 + v40) = 2;
  v60[13] = specialized Dictionary.init(dictionaryLiteral:)(v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue)>);
  unint64_t v41 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType, LocationSearchIntent.LocationSearchIncidentTypeValue))
              - 8);
  uint64_t v42 = *(void *)(*(void *)v41 + 72);
  unint64_t v43 = (*(unsigned __int8 *)(*(void *)v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v41 + 80);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_BFC00;
  unint64_t v44 = v59 + v43;
  uint64_t v45 = v41[14];
  uint64_t v46 = enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.accident(_:);
  uint64_t v47 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType();
  uint64_t v48 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104);
  v48(v44, v46, v47);
  *(unsigned char *)(v44 + v45) = 0;
  uint64_t v49 = v41[14];
  v48(v44 + v42, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.hazard(_:), v47);
  *(unsigned char *)(v44 + v42 + v49) = 2;
  uint64_t v50 = v41[14];
  v48(v44 + 2 * v42, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.incident(_:), v47);
  *(unsigned char *)(v44 + 2 * v42 + v50) = 1;
  uint64_t v51 = v41[14];
  v48(v44 + 3 * v42, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.laneClosed(_:), v47);
  *(unsigned char *)(v44 + 3 * v42 + v51) = 5;
  uint64_t v52 = v41[14];
  v48(v44 + 4 * v42, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.problem(_:), v47);
  *(unsigned char *)(v44 + 4 * v42 + v52) = 8;
  uint64_t v53 = v41[14];
  v48(v44 + 5 * v42, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.redLightCamera(_:), v47);
  *(unsigned char *)(v44 + 5 * v42 + v53) = 7;
  uint64_t v54 = v41[14];
  v48(v44 + 6 * v42, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.roadClosed(_:), v47);
  *(unsigned char *)(v44 + 6 * v42 + v54) = 6;
  uint64_t v55 = v41[14];
  v48(v44 + 7 * v42, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.roadwork(_:), v47);
  *(unsigned char *)(v44 + 7 * v42 + v55) = 4;
  unint64_t v56 = v44 + 8 * v42;
  uint64_t v57 = v41[14];
  v48(v56, enum case for Apple_Parsec_Siri_V2alpha_LocationSearchIncidentType.speedCheck(_:), v47);
  *(unsigned char *)(v56 + v57) = 3;
  v60[14] = specialized Dictionary.init(dictionaryLiteral:)(v59);
  return v60;
}

void *specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v1 = *v0;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if (!result)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v1[2] + 1, 1, v1);
    *uint64_t v0 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v9 = a4(0);
  uint64_t v14 = v9;
  uint64_t v15 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(boxed_opaque_existential_0, a2, v9);
  uint64_t v11 = *a3;
  *(void *)(v11 + 16) = a1 + 1;
  return outlined init with take of CATType(&v13, v11 + 40 * a1 + 32);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of CATType(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_888C4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_88910(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 184))(*a1);
}

uint64_t sub_88958@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_889A4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 208))(*a1);
}

uint64_t sub_889EC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_88A38(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 232))(*a1);
}

uint64_t sub_88A80@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_88ACC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 256))(*a1);
}

uint64_t sub_88B1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 272))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_88B70(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 280);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_88BE0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 296))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_88C34(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 304);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_88CA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 320))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_88CF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 328);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_88D68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 344))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_88DBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 352);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t type metadata accessor for LocationSearchIntentBuilder()
{
  return self;
}

uint64_t LocationFetchFlow.__allocating_init(flowHelper:requiredAccess:)(long long *a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  LocationFetchFlow.init(flowHelper:requiredAccess:)(a1, a2);
  return v4;
}

void *LocationFetchFlow.exitValue.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 80);
  outlined copy of LocationFetchFlow.ExitValue(v1, *(unsigned char *)(v0 + 88));
  return v1;
}

void LocationFetchFlow.exitValue.setter(uint64_t a1, char a2)
{
  swift_beginAccess();
  unint64_t v5 = *(void **)(v2 + 80);
  *(void *)(v2 + 80) = a1;
  unsigned __int8 v6 = *(unsigned char *)(v2 + 88);
  *(unsigned char *)(v2 + 88) = a2;
  outlined consume of LocationFetchFlow.ExitValue(v5, v6);
}

uint64_t LocationFetchFlow.init(flowHelper:requiredAccess:)(long long *a1, char a2)
{
  uint64_t v3 = v2;
  type metadata accessor for CATService();
  uint64_t v6 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v6 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v6 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v6 + 16) = 0;
  *(void *)(v3 + 16) = v6;
  *(void *)(v3 + 72) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for RuntimeError();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0xD000000000000019;
  *(void *)(v8 + 24) = 0x80000000000C6CD0;
  _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
  uint64_t v9 = swift_allocError();
  *uint64_t v10 = v8;
  *(void *)(v3 + 80) = v9;
  *(unsigned char *)(v3 + 88) = 2;
  outlined init with take of CATType(a1, v3 + 24);
  *(unsigned char *)(v3 + 64) = a2;
  return v3;
}

uint64_t LocationFetchFlow.__allocating_init()()
{
  v2[3] = &type metadata for FlowHelperImpl;
  v2[4] = &protocol witness table for FlowHelperImpl;
  v2[0] = swift_allocObject();
  FlowHelperImpl.init()((void *)(v2[0] + 16));
  return (*(uint64_t (**)(void *, void))(v0 + 168))(v2, 0);
}

uint64_t sub_89170()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t LocationFetchFlow.execute(completion:)()
{
  type metadata accessor for LocationFetchFlow();
  _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_1(&lazy protocol witness table cache variable for type LocationFetchFlow and conformance LocationFetchFlow, v0, (void (*)(uint64_t))type metadata accessor for LocationFetchFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t type metadata accessor for LocationFetchFlow()
{
  return self;
}

uint64_t LocationFetchFlow.execute()(uint64_t a1)
{
  v2[114] = v1;
  v2[113] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[115] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AceOutput();
  v2[116] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[117] = v4;
  v2[118] = *(void *)(v4 + 64);
  v2[119] = swift_task_alloc();
  v2[120] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v2[121] = v5;
  v2[122] = *(void *)(v5 - 8);
  v2[123] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v2[124] = swift_task_alloc();
  v2[125] = swift_task_alloc();
  v2[126] = swift_task_alloc();
  v2[127] = swift_task_alloc();
  v2[128] = swift_task_alloc();
  v2[129] = swift_task_alloc();
  v2[130] = swift_task_alloc();
  v2[131] = swift_task_alloc();
  return _swift_task_switch(LocationFetchFlow.execute(), 0, 0);
}

uint64_t LocationFetchFlow.execute()()
{
  id v1 = [objc_allocWithZone((Class)AFLocationService) init];
  v0[132] = v1;
  if ([self isSiriLocationServicesPromptingEnabled])
  {
    uint64_t v2 = v0 + 18;
    uint64_t v3 = (void *)v0[132];
    double v4 = *(double *)*(&off_E7330 + *(char *)(v0[114] + 64));
    v0[18] = v0;
    v0[23] = v0 + 109;
    v0[19] = LocationFetchFlow.execute();
    uint64_t v5 = swift_continuation_init();
    v0[46] = _NSConcreteStackBlock;
    v0[47] = 0x40000000;
    v0[48] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    v0[49] = &block_descriptor_1;
    v0[50] = v5;
    [v3 currentLocationWithAccuracy:v0 + 46 timeout:v4 completion:2.0];
  }
  else
  {
    uint64_t v2 = v0 + 10;
    uint64_t v6 = v0[131];
    uint64_t v7 = v0[122];
    uint64_t v8 = v0[121];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v0[133] = v9;
    v0[134] = (v7 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v9(v6, 1, 1, v8);
    v0[10] = v0;
    v0[15] = v0 + 96;
    v0[11] = LocationFetchFlow.execute();
    uint64_t v10 = swift_continuation_init();
    v0[41] = _NSConcreteStackBlock;
    v0[42] = 0x40000000;
    v0[43] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFLocationAuthorizationStyle, @unowned CLAccuracyAuthorization, @unowned NSError?) -> () with result type (AFLocationAuthorizationStyle, CLAccuracyAuthorization);
    v0[44] = &block_descriptor_2;
    v0[45] = v10;
    [v1 currentAuthorizationStyle:v0 + 41];
  }
  return _swift_continuation_await(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  id v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 1080) = v1;
  if (v1) {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  else {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjCClassFromMetadata;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(void);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  void *v61;
  uint64_t v62;
  uint64_t v63;

  id v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 776);
  uint64_t v3 = *(NSObject **)(*(void *)(v0 + 912) + 72);
  double v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v0 + 896) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v3, v4, "LocationService Auth level: %lu", v5, 0xCu);
    swift_slowDealloc();
  }
  switch(v1)
  {
    case 0:
    case 2:
      uint64_t v6 = v0 + 288;
      uint64_t v7 = *(void *)(v0 + 912);
      lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v8 = swift_allocError();
      *(void *)uint64_t v9 = 0xD000000000000022;
      *(void *)(v9 + 8) = 0x80000000000C9E80;
      *(unsigned char *)(v9 + 16) = 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 152))(v8, 2);
      type metadata accessor for CATService();
      uint64_t v10 = swift_allocObject();
      *(void *)(v0 + 1120) = v10;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      *(void *)(v10 + 24) = [self bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log();
      *(void *)(v10 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v10 + 16) = 0;
      *(void *)(v0 + 312) = &type metadata for LocationServices;
      *(void *)(v0 + 320) = &protocol witness table for LocationServices;
      *(unsigned char *)(v0 + 288) = 2;
      uint64_t v12 = static DialogHelper.globals.getter();
      *(void *)(v0 + 1128) = v12;
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 1136) = v13;
      *uint64_t v13 = v0;
      v13[1] = LocationFetchFlow.execute();
      uint64_t v14 = *(void *)(v0 + 1032);
      goto LABEL_15;
    case 1:
      uint64_t v23 = *(void **)(v0 + 912);
      (*(void (**)(void, uint64_t))(*v23 + 152))(0, 3);
      uint64_t v24 = v23[6];
      unint64_t v25 = v23[7];
      __swift_project_boxed_opaque_existential_1(v23 + 3, v24);
      (*(void (**)(uint64_t, uint64_t))(v25 + 32))(v24, v25);
      *(void *)(v0 + 1088) = specialized static LocationServicesViews.makeDeepLink(status:device:)(2u, (void *)(v0 + 248));
      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 248);
      type metadata accessor for CATService();
      uint64_t v26 = swift_allocObject();
      *(void *)(v0 + 1096) = v26;
      uint64_t v27 = swift_getObjCClassFromMetadata();
      *(void *)(v26 + 24) = [self bundleForClass:v27];
      type metadata accessor for OS_os_log();
      *(void *)(v26 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v26 + 16) = 0;
      *(void *)(v0 + 232) = &type metadata for LocationServices;
      *(void *)(v0 + 240) = &protocol witness table for LocationServices;
      *(unsigned char *)(v0 + 208) = 0;
      uint64_t v28 = static DialogHelper.globals.getter();
      *(void *)(v0 + 1104) = v28;
      unint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v0 + 1112) = v29;
      *unint64_t v29 = v0;
      v29[1] = LocationFetchFlow.execute();
      uint64_t v14 = *(void *)(v0 + 1040);
      uint64_t v30 = v0 + 208;
      uint64_t v31 = v28;
      goto LABEL_16;
    case 3:
    case 4:
      if (v2 == 1)
      {
        uint64_t v15 = *(void **)(v0 + 912);
        uint64_t v16 = v15[6];
        uint64_t v17 = v15[7];
        __swift_project_boxed_opaque_existential_1(v15 + 3, v16);
        (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
        *(void *)(v0 + 1152) = specialized static LocationServicesViews.makeDeepLink(status:device:)(0, (void *)(v0 + 528));
        __swift_destroy_boxed_opaque_existential_0Tm(v0 + 528);
        unint64_t v18 = v15[2];
        *(void *)(v0 + 432) = &type metadata for LocationServices;
        *(void *)(v0 + 440) = &protocol witness table for LocationServices;
        *(unsigned char *)(v0 + 408) = 1;
        uint64_t v19 = static DialogHelper.globals.getter();
        *(void *)(v0 + 1160) = v19;
        uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v18 + 112)
                                                                + **(int **)(*(void *)v18 + 112));
        unint64_t v20 = (void *)swift_task_alloc();
        *(void *)(v0 + 1168) = v20;
        *unint64_t v20 = v0;
        v20[1] = LocationFetchFlow.execute();
        uint64_t v21 = *(void *)(v0 + 1024);
        return v60(v21, v0 + 408, v19);
      }
      else
      {
        unint64_t v32 = *(void *)(v0 + 1008);
        uint64_t v33 = *(void *)(v0 + 976);
        uint64_t v34 = *(void *)(v0 + 968);
        outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v32);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v32, 1, v34) == 1)
        {
          uint64_t v35 = *(void *)(v0 + 1008);
          outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
          swift_bridgeObjectRelease();
          outlined destroy of (label: String?, value: Any)?(v35, &demangling cache variable for type metadata for TemplatingResult?);
          unint64_t v36 = *(void **)(v0 + 1056);
          unint64_t v37 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
          *(void *)(v0 + 144) = v0;
          *(void *)(v0 + 184) = v0 + 872;
          *(void *)(v0 + 152) = LocationFetchFlow.execute();
          uint64_t v38 = swift_continuation_init();
          *(void *)(v0 + 368) = _NSConcreteStackBlock;
          *(void *)(v0 + 376) = 0x40000000;
          *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
          *(void *)(v0 + 392) = &block_descriptor_1;
          *(void *)(v0 + 400) = v38;
          [v36 currentLocationWithAccuracy:v0 + 368 timeout:v37 completion:2.0];
          return _swift_continuation_await(v0 + 144);
        }
        else
        {
          uint64_t v61 = *(void **)(v0 + 1056);
          uint64_t v62 = *(void *)(v0 + 1048);
          uint64_t v45 = *(void *)(v0 + 984);
          uint64_t v46 = *(void *)(v0 + 976);
          uint64_t v59 = *(void *)(v0 + 968);
          uint64_t v58 = *(void *)(v0 + 952);
          uint64_t v47 = *(void *)(v0 + 936);
          unint64_t v56 = *(void *)(v0 + 960);
          uint64_t v57 = *(void *)(v0 + 928);
          uint64_t v48 = *(void *)(v0 + 920);
          uint64_t v49 = *(void **)(v0 + 912);
          (*(void (**)(uint64_t, void))(v46 + 32))(v45, *(void *)(v0 + 1008));
          uint64_t v51 = v49[6];
          uint64_t v50 = v49[7];
          __swift_project_boxed_opaque_existential_1(v49 + 3, v51);
          (*(void (**)(uint64_t, uint64_t))(v50 + 32))(v51, v50);
          uint64_t v52 = type metadata accessor for NLContextUpdate();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v48, 1, 1, v52);
          *(void *)(v0 + 760) = 0;
          *(_OWORD *)(v0 + 728) = 0u;
          *(_OWORD *)(v0 + 744) = 0u;
          static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
          swift_bridgeObjectRelease();
          outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
          outlined destroy of (label: String?, value: Any)?(v48, &demangling cache variable for type metadata for NLContextUpdate?);
          __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v58, v56, v57);
          uint64_t v53 = (*(unsigned __int8 *)(v47 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
          uint64_t v54 = swift_allocObject();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v47 + 32))(v54 + v53, v58, v57);
          static OutputPublisherFactory.makeOutputPublisherAsync()();
          type metadata accessor for SimpleOutputFlowAsync();
          swift_allocObject();
          *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
          static ExecuteResponse.complete<A>(next:)();

          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v56, v57);
          (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v59);
          outlined destroy of (label: String?, value: Any)?(v62, &demangling cache variable for type metadata for TemplatingResult?);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v55 = *(uint64_t (**)(void))(v0 + 8);
          return v55();
        }
      }
    default:
      uint64_t v6 = v0 + 568;
      unint64_t v39 = *(void *)(v0 + 912);
      lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v40 = swift_allocError();
      *(void *)unint64_t v41 = 0xD000000000000019;
      *(void *)(v41 + 8) = 0x80000000000C9E60;
      *(unsigned char *)(v41 + 16) = 1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 152))(v40, 2);
      type metadata accessor for CATService();
      uint64_t v42 = swift_allocObject();
      *(void *)(v0 + 1184) = v42;
      unint64_t v43 = swift_getObjCClassFromMetadata();
      *(void *)(v42 + 24) = [self bundleForClass:v43];
      type metadata accessor for OS_os_log();
      *(void *)(v42 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v42 + 16) = 0;
      *(void *)(v0 + 592) = &type metadata for LocationServices;
      *(void *)(v0 + 600) = &protocol witness table for LocationServices;
      *(unsigned char *)(v0 + 568) = 2;
      uint64_t v12 = static DialogHelper.globals.getter();
      *(void *)(v0 + 1192) = v12;
      unint64_t v44 = (void *)swift_task_alloc();
      *(void *)(v0 + 1200) = v44;
      *unint64_t v44 = v0;
      v44[1] = LocationFetchFlow.execute();
      uint64_t v14 = *(void *)(v0 + 1016);
LABEL_15:
      uint64_t v30 = v6;
      uint64_t v31 = v12;
LABEL_16:
      return CATService.execute(model:globals:)(v14, v30, v31);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = LocationFetchFlow.execute();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 208);
    uint64_t v3 = LocationFetchFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
  id v1 = *(void *)(v0 + 1048);
  uint64_t v2 = *(void *)(v0 + 1040);
  (*(void (**)(uint64_t, void, uint64_t, void))(v0 + 1064))(v2, 0, 1, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v2, v1);
  uint64_t v3 = *(void *)(v0 + 1008);
  double v4 = *(void *)(v0 + 976);
  uint64_t v5 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5) == 1)
  {
    uint64_t v6 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v6, &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v7 = *(void **)(v0 + 1056);
    uint64_t v8 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 152) = LocationFetchFlow.execute();
    uint64_t v9 = swift_continuation_init();
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 392) = &block_descriptor_1;
    *(void *)(v0 + 400) = v9;
    [v7 currentLocationWithAccuracy:v0 + 368 timeout:v8 completion:2.0];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    uint64_t v26 = *(void **)(v0 + 1056);
    uint64_t v27 = *(void *)(v0 + 1048);
    uint64_t v10 = *(void *)(v0 + 984);
    unint64_t v25 = *(void *)(v0 + 976);
    uint64_t v24 = *(void *)(v0 + 968);
    uint64_t v23 = *(void *)(v0 + 952);
    uint64_t v11 = *(void *)(v0 + 936);
    uint64_t v21 = *(void *)(v0 + 960);
    uint64_t v22 = *(void *)(v0 + 928);
    uint64_t v12 = *(void *)(v0 + 920);
    uint64_t v13 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v25 + 32))(v10, *(void *)(v0 + 1008));
    uint64_t v14 = v13[6];
    uint64_t v15 = v13[7];
    __swift_project_boxed_opaque_existential_1(v13 + 3, v14);
    (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
    uint64_t v16 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 1, 1, v16);
    *(void *)(v0 + 760) = 0;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v12, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v23, v21, v22);
    uint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v18 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v18 + v17, v23, v22);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    swift_allocObject();
    *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    static ExecuteResponse.complete<A>(next:)();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v10, v24);
    outlined destroy of (label: String?, value: Any)?(v27, &demangling cache variable for type metadata for TemplatingResult?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = LocationFetchFlow.execute();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 288);
    uint64_t v3 = LocationFetchFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  id v1 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1064);
  uint64_t v2 = *(void *)(v0 + 1048);
  uint64_t v3 = *(void *)(v0 + 1032);
  double v4 = *(void *)(v0 + 968);
  outlined destroy of (label: String?, value: Any)?(v2, &demangling cache variable for type metadata for TemplatingResult?);
  v1(v3, 0, 1, v4);
  outlined init with take of TemplatingResult?(v3, v2);
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 976);
  uint64_t v7 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v7) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v8, &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v9 = *(void **)(v0 + 1056);
    uint64_t v10 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 152) = LocationFetchFlow.execute();
    uint64_t v11 = swift_continuation_init();
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 392) = &block_descriptor_1;
    *(void *)(v0 + 400) = v11;
    [v9 currentLocationWithAccuracy:v0 + 368 timeout:v10 completion:2.0];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    uint64_t v28 = *(void **)(v0 + 1056);
    unint64_t v29 = *(void *)(v0 + 1048);
    uint64_t v12 = *(void *)(v0 + 984);
    uint64_t v13 = *(void *)(v0 + 976);
    uint64_t v27 = *(void *)(v0 + 968);
    uint64_t v26 = *(void *)(v0 + 952);
    uint64_t v14 = *(void *)(v0 + 936);
    uint64_t v24 = *(void *)(v0 + 960);
    unint64_t v25 = *(void *)(v0 + 928);
    uint64_t v15 = *(void *)(v0 + 920);
    uint64_t v16 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v13 + 32))(v12, *(void *)(v0 + 1008));
    unint64_t v18 = v16[6];
    uint64_t v17 = v16[7];
    __swift_project_boxed_opaque_existential_1(v16 + 3, v18);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v18, v17);
    uint64_t v19 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v15, 1, 1, v19);
    *(void *)(v0 + 760) = 0;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v15, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v26, v24, v25);
    unint64_t v20 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v21 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 32))(v21 + v20, v26, v25);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    swift_allocObject();
    *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    static ExecuteResponse.complete<A>(next:)();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v27);
    outlined destroy of (label: String?, value: Any)?(v29, &demangling cache variable for type metadata for TemplatingResult?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1176) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = LocationFetchFlow.execute();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 408);
    uint64_t v3 = LocationFetchFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  id v1 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1064);
  uint64_t v2 = *(void *)(v0 + 1048);
  uint64_t v3 = *(void *)(v0 + 1024);
  double v4 = *(void *)(v0 + 968);
  outlined destroy of (label: String?, value: Any)?(v2, &demangling cache variable for type metadata for TemplatingResult?);
  v1(v3, 0, 1, v4);
  outlined init with take of TemplatingResult?(v3, v2);
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 976);
  uint64_t v7 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v7) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v8, &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v9 = *(void **)(v0 + 1056);
    uint64_t v10 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 152) = LocationFetchFlow.execute();
    uint64_t v11 = swift_continuation_init();
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 392) = &block_descriptor_1;
    *(void *)(v0 + 400) = v11;
    [v9 currentLocationWithAccuracy:v0 + 368 timeout:v10 completion:2.0];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    uint64_t v28 = *(void **)(v0 + 1056);
    unint64_t v29 = *(void *)(v0 + 1048);
    uint64_t v12 = *(void *)(v0 + 984);
    uint64_t v27 = *(void *)(v0 + 976);
    uint64_t v26 = *(void *)(v0 + 968);
    unint64_t v25 = *(void *)(v0 + 952);
    uint64_t v13 = *(void *)(v0 + 936);
    uint64_t v23 = *(void *)(v0 + 960);
    uint64_t v24 = *(void *)(v0 + 928);
    uint64_t v14 = *(void *)(v0 + 920);
    uint64_t v15 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v27 + 32))(v12, *(void *)(v0 + 1008));
    uint64_t v16 = v15[6];
    uint64_t v17 = v15[7];
    __swift_project_boxed_opaque_existential_1(v15 + 3, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    unint64_t v18 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v14, 1, 1, v18);
    *(void *)(v0 + 760) = 0;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v14, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v25, v23, v24);
    uint64_t v19 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    unint64_t v20 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))(v20 + v19, v25, v24);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    swift_allocObject();
    *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    static ExecuteResponse.complete<A>(next:)();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v12, v26);
    outlined destroy of (label: String?, value: Any)?(v29, &demangling cache variable for type metadata for TemplatingResult?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = LocationFetchFlow.execute();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 568);
    uint64_t v3 = LocationFetchFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
  id v1 = *(void *)(v0 + 1048);
  uint64_t v2 = *(void *)(v0 + 1016);
  (*(void (**)(uint64_t, void, uint64_t, void))(v0 + 1064))(v2, 0, 1, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v2, v1);
  uint64_t v3 = *(void *)(v0 + 1008);
  double v4 = *(void *)(v0 + 976);
  uint64_t v5 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5) == 1)
  {
    uint64_t v6 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v6, &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v7 = *(void **)(v0 + 1056);
    uint64_t v8 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 152) = LocationFetchFlow.execute();
    uint64_t v9 = swift_continuation_init();
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 392) = &block_descriptor_1;
    *(void *)(v0 + 400) = v9;
    [v7 currentLocationWithAccuracy:v0 + 368 timeout:v8 completion:2.0];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    uint64_t v26 = *(void **)(v0 + 1056);
    uint64_t v27 = *(void *)(v0 + 1048);
    uint64_t v10 = *(void *)(v0 + 984);
    uint64_t v11 = *(void *)(v0 + 976);
    unint64_t v25 = *(void *)(v0 + 968);
    uint64_t v24 = *(void *)(v0 + 952);
    uint64_t v12 = *(void *)(v0 + 936);
    uint64_t v22 = *(void *)(v0 + 960);
    uint64_t v23 = *(void *)(v0 + 928);
    uint64_t v13 = *(void *)(v0 + 920);
    uint64_t v14 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v11 + 32))(v10, *(void *)(v0 + 1008));
    uint64_t v16 = v14[6];
    uint64_t v15 = v14[7];
    __swift_project_boxed_opaque_existential_1(v14 + 3, v16);
    (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v16, v15);
    uint64_t v17 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 1, 1, v17);
    *(void *)(v0 + 760) = 0;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v13, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v24, v22, v23);
    unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v19 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 32))(v19 + v18, v24, v23);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    swift_allocObject();
    *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    static ExecuteResponse.complete<A>(next:)();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v25);
    outlined destroy of (label: String?, value: Any)?(v27, &demangling cache variable for type metadata for TemplatingResult?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  id v1 = *(void *)(*(void *)v0 + 176);
  *(void *)(*(void *)v0 + 1208) = v1;
  if (v1) {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  else {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  id v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  id v19;
  os_log_type_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void (*v28)(void *, void);
  void *v29;
  void *v30;
  id v31;
  uint64_t (*v32)(void);
  os_log_t log;
  uint64_t v34;

  id v1 = *(void **)(v0 + 872);
  *(void *)(v0 + 1216) = v1;
  uint64_t v2 = *(NSObject **)(*(void *)(v0 + 912) + 72);
  if (v1)
  {
    *(void *)(v0 + 1224) = v2;
    uint64_t v3 = v1;
    double v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      log = (os_log_t)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      *(void *)(v0 + 816) = v3;
      uint64_t v6 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->Class isa = (Class)v1;

      _os_log_impl(&dword_0, v2, v4, "location info: %@", v5, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v15 = *(void *)(v0 + 912);
    [v3 horizontalAccuracy];
    uint64_t v17 = v16;
    unint64_t v18 = *(double *)*(&off_E7350 + *(char *)(v15 + 64));
    uint64_t v19 = v3;
    swift_retain();
    unint64_t v20 = static os_log_type_t.default.getter();
    uint64_t v21 = os_log_type_enabled(v2, v20);
    uint64_t v22 = *(void *)(v0 + 912);
    if (v17 <= v18)
    {
      if (v21)
      {
        unint64_t v25 = swift_slowAlloc();
        *(_DWORD *)unint64_t v25 = 134218240;
        [v19 horizontalAccuracy];
        *(void *)(v0 + 832) = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v25 + 12) = 2048;
        *(double *)(v0 + 824) = round(*(double *)*(&off_E7350 + *(char *)(v22 + 64)));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_0, v2, v20, "horizontal accuracy is within required access threshold: %f <= %f", (uint8_t *)v25, 0x16u);
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      uint64_t v28 = *(void (**)(void *, void))(**(void **)(v0 + 912) + 152);
      unint64_t v29 = *(void **)(v0 + 1216);
      uint64_t v30 = *(void **)(v0 + 1056);
      uint64_t v31 = v19;
      v28(v1, 0);
      static ExecuteResponse.complete()();

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
      return v32();
    }
    else
    {
      if (v21)
      {
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 134218240;
        [v19 horizontalAccuracy];
        *(void *)(v0 + 856) = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v23 + 12) = 2048;
        *(double *)(v0 + 848) = round(*(double *)*(&off_E7350 + *(char *)(v22 + 64)));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_0, v2, v20, "horizontal accuracy is too high, we cannot reliably use this location value: %f > %f", (uint8_t *)v23, 0x16u);
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      uint64_t v27 = *(void **)(v0 + 1056);
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 784;
      *(void *)(v0 + 24) = LocationFetchFlow.execute();
      *(void *)(v0 + 520) = swift_continuation_init();
      *(void *)(v0 + 488) = _NSConcreteStackBlock;
      *(void *)(v0 + 496) = 0x40000000;
      *(void *)(v0 + 504) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFLocationAuthorizationStyle, @unowned CLAccuracyAuthorization, @unowned NSError?) -> () with result type (AFLocationAuthorizationStyle, CLAccuracyAuthorization);
      *(void *)(v0 + 512) = &block_descriptor_3;
      [v27 currentAuthorizationStyle:v0 + 488];
      return _swift_continuation_await(v0 + 16);
    }
  }
  else
  {
    uint64_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, (os_log_type_t)v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_0, v2, (os_log_type_t)v7, "Location Service could not get requested accuracy within timeout", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = *(void *)(v0 + 912);
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v10 = swift_allocError();
    *(void *)uint64_t v11 = 0xD000000000000021;
    *(void *)(v11 + 8) = 0x80000000000C9DE0;
    *(unsigned char *)(v11 + 16) = 2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 152))(v10, 2);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 1256) = v12;
    *uint64_t v12 = v0;
    v12[1] = LocationFetchFlow.execute();
    uint64_t v13 = *(void *)(v0 + 904);
    return LocationFetchFlow.unknownLocationOutput()(v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  id v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 1232) = v1;
  if (v1) {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  else {
    uint64_t v2 = LocationFetchFlow.execute();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  NSObject *v7;
  os_log_type_t v8;
  NSObject *v9;
  uint8_t *v10;
  void *v11;
  void (*v12)(void *, uint64_t);
  void *v13;
  id v14;
  uint64_t (*v15)(void);
  NSObject *v17;
  os_log_type_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;

  id v1 = *(void *)(v0 + 792);
  if (v1 == 1)
  {
    uint64_t v7 = *(NSObject **)(v0 + 1224);
    uint64_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = *(NSObject **)(v0 + 1224);
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_0, v9, v8, "precise location is not enabled", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void **)(v0 + 1216);
    uint64_t v12 = *(void (**)(void *, uint64_t))(**(void **)(v0 + 912) + 152);
    uint64_t v13 = *(void **)(v0 + 1056);
    uint64_t v14 = v11;
    v12(v11, 1);
    static ExecuteResponse.complete()();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    if (v1)
    {
      uint64_t v17 = *(NSObject **)(v0 + 1224);
      unint64_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = *(NSObject **)(v0 + 1224);
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v20 = 0;
        _os_log_impl(&dword_0, v19, v18, "unknown location accuracy level, support for it has not been implemented", v20, 2u);
        swift_slowDealloc();
      }
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 1248) = v5;
      void *v5 = v0;
      uint64_t v6 = LocationFetchFlow.execute();
    }
    else
    {
      uint64_t v2 = *(void *)(v0 + 912);
      lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v3 = swift_allocError();
      *(void *)double v4 = 0xD00000000000002ALL;
      *(void *)(v4 + 8) = 0x80000000000C9E10;
      *(unsigned char *)(v4 + 16) = 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 152))(v3, 2);
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 1240) = v5;
      void *v5 = v0;
      uint64_t v6 = LocationFetchFlow.execute();
    }
    v5[1] = v6;
    uint64_t v21 = *(void *)(v0 + 904);
    return LocationFetchFlow.unknownLocationOutput()(v21);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(LocationFetchFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  id v1 = *(void **)(v0 + 1056);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  NSObject *v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  id v1 = v0[153];
  swift_willThrow();
  swift_errorRelease();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[153];
    double v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v4 = 0;
    _os_log_impl(&dword_0, v3, v2, "location accuracy level is inaccessible", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[114];
  lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v6 = swift_allocError();
  *(void *)uint64_t v7 = 0xD000000000000038;
  *(void *)(v7 + 8) = 0x80000000000C9D70;
  *(unsigned char *)(v7 + 16) = 0;
  uint64_t v8 = (void *)v0[152];
  uint64_t v9 = (void *)v0[132];
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 152))(v6, 2);
  static ExecuteResponse.complete()();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(LocationFetchFlow.execute(), 0, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(LocationFetchFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v3 = LocationFetchFlow.execute();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 648);
    uint64_t v3 = LocationFetchFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
  id v1 = *(void **)(v0 + 1272);
  uint64_t v2 = *(void *)(v0 + 1048);
  uint64_t v3 = *(void *)(v0 + 1000);
  double v4 = *(void **)(v0 + 912);
  (*(void (**)(uint64_t, void, uint64_t, void))(v0 + 1064))(v3, 0, 1, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v3, v2);
  uint64_t v5 = v4 + 3;
  uint64_t v6 = v4[6];
  uint64_t v7 = v4[7];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  specialized static LocationServicesViews.makeDeepLink(status:device:)(1u, (void *)(v0 + 608));

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 608);
  swift_errorRelease();
  uint64_t v8 = *(void *)(v0 + 1008);
  uint64_t v9 = *(void *)(v0 + 976);
  uint64_t v10 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v8, 1, v10) == 1)
  {
    uint64_t v11 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v11, &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v12 = *(void **)(v0 + 1056);
    uint64_t v13 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 152) = LocationFetchFlow.execute();
    uint64_t v14 = swift_continuation_init();
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 392) = &block_descriptor_1;
    *(void *)(v0 + 400) = v14;
    [v12 currentLocationWithAccuracy:v0 + 368 timeout:v13 completion:2.0];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    uint64_t v31 = *(void **)(v0 + 1056);
    unint64_t v32 = *(void *)(v0 + 1048);
    uint64_t v15 = *(void *)(v0 + 984);
    uint64_t v30 = *(void *)(v0 + 976);
    unint64_t v29 = *(void *)(v0 + 968);
    uint64_t v28 = *(void *)(v0 + 952);
    uint64_t v16 = *(void *)(v0 + 936);
    uint64_t v26 = *(void *)(v0 + 960);
    uint64_t v27 = *(void *)(v0 + 928);
    uint64_t v17 = *(void *)(v0 + 920);
    unint64_t v18 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v30 + 32))(v15, *(void *)(v0 + 1008));
    uint64_t v19 = v18[6];
    unint64_t v20 = v18[7];
    __swift_project_boxed_opaque_existential_1(v18 + 3, v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
    uint64_t v21 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v17, 1, 1, v21);
    *(void *)(v0 + 760) = 0;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v17, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v28, v26, v27);
    uint64_t v22 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v23 = swift_allocObject() + v22;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v23, v28, v27);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    swift_allocObject();
    *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    static ExecuteResponse.complete<A>(next:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v15, v29);
    outlined destroy of (label: String?, value: Any)?(v32, &demangling cache variable for type metadata for TemplatingResult?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v3 = LocationFetchFlow.execute();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 688);
    uint64_t v3 = LocationFetchFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  id v1 = *(void *)(v0 + 1048);

  outlined destroy of (label: String?, value: Any)?(v1, &demangling cache variable for type metadata for TemplatingResult?);
  uint64_t v2 = *(void *)(v0 + 1048);
  uint64_t v3 = *(void *)(v0 + 992);
  (*(void (**)(uint64_t, void, uint64_t, void))(v0 + 1064))(v3, 0, 1, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v3, v2);
  swift_errorRelease();
  double v4 = *(void *)(v0 + 1008);
  uint64_t v5 = *(void *)(v0 + 976);
  uint64_t v6 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v6) == 1)
  {
    uint64_t v7 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v7, &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v8 = *(void **)(v0 + 1056);
    uint64_t v9 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 152) = LocationFetchFlow.execute();
    uint64_t v10 = swift_continuation_init();
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 392) = &block_descriptor_1;
    *(void *)(v0 + 400) = v10;
    [v8 currentLocationWithAccuracy:v0 + 368 timeout:v9 completion:2.0];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    uint64_t v27 = *(void **)(v0 + 1056);
    uint64_t v28 = *(void *)(v0 + 1048);
    uint64_t v11 = *(void *)(v0 + 984);
    uint64_t v26 = *(void *)(v0 + 976);
    unint64_t v25 = *(void *)(v0 + 968);
    uint64_t v24 = *(void *)(v0 + 952);
    uint64_t v12 = *(void *)(v0 + 936);
    uint64_t v22 = *(void *)(v0 + 960);
    uint64_t v23 = *(void *)(v0 + 928);
    uint64_t v13 = *(void *)(v0 + 920);
    uint64_t v14 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v26 + 32))(v11, *(void *)(v0 + 1008));
    uint64_t v15 = v14[6];
    uint64_t v16 = v14[7];
    __swift_project_boxed_opaque_existential_1(v14 + 3, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    uint64_t v17 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 1, 1, v17);
    *(void *)(v0 + 760) = 0;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v13, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v24, v22, v23);
    unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v19 = swift_allocObject() + v18;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 32))(v19, v24, v23);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    swift_allocObject();
    *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    static ExecuteResponse.complete<A>(next:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v11, v25);
    outlined destroy of (label: String?, value: Any)?(v28, &demangling cache variable for type metadata for TemplatingResult?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  uint8_t *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjCClassFromMetadata;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *log;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;

  swift_willThrow();
  id v1 = *(void *)(v0 + 1080);
  *(void *)(v0 + 1264) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 888) = v1;
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(0);
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = *(void **)(v0 + 912);
  if (v2)
  {
    double v4 = (void *)(v0 + 800);
    uint64_t v5 = (void *)(v0 + 808);
    swift_errorRelease();
    uint64_t v6 = *(void **)(v0 + 880);
    *(void *)(v0 + 1272) = v6;
    uint64_t v7 = static os_log_type_t.error.getter();
    uint64_t v8 = v3[9];
    uint64_t v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      uint64_t v10 = v6;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      uint64_t v13 = v10;
      log = v8;
      uint64_t v14 = v6;
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 840) = v15;
      double v4 = (void *)(v0 + 800);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v15;
      uint64_t v6 = v14;

      _os_log_impl(&dword_0, log, v9, "AFLocationServiceError: %@", v11, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      uint64_t v5 = (void *)(v0 + 808);
      swift_slowDealloc();
      swift_slowDealloc();
    }
    void *v5 = v6;
    _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_1(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, 255, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
    _BridgedStoredNSError.code.getter();
    if (*v4 == 5)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = v0 + 648;
      type metadata accessor for CATService();
      uint64_t v17 = swift_allocObject();
      *(void *)(v0 + 1280) = v17;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      *(void *)(v17 + 24) = [self bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log();
      *(void *)(v17 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v17 + 16) = 0;
      *(void *)(v0 + 672) = &type metadata for LocationServices;
      *(void *)(v0 + 680) = &protocol witness table for LocationServices;
      *(unsigned char *)(v0 + 648) = 0;
      uint64_t v19 = static DialogHelper.globals.getter();
      *(void *)(v0 + 1288) = v19;
      unint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 1296) = v20;
      *unint64_t v20 = v0;
      v20[1] = LocationFetchFlow.execute();
      uint64_t v21 = *(void *)(v0 + 1000);
    }
    else
    {
      uint64_t v16 = v0 + 688;
      uint64_t v31 = *(void *)(v0 + 912);
      lazy protocol witness table accessor for type Errors and conformance Errors();
      unint64_t v32 = swift_allocError();
      *(void *)uint64_t v33 = 0xD00000000000001FLL;
      *(void *)(v33 + 8) = 0x80000000000C9E40;
      *(unsigned char *)(v33 + 16) = 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 152))(v32, 2);
      type metadata accessor for CATService();
      uint64_t v34 = swift_allocObject();
      *(void *)(v0 + 1304) = v34;
      uint64_t v35 = swift_getObjCClassFromMetadata();
      *(void *)(v34 + 24) = [self bundleForClass:v35];
      type metadata accessor for OS_os_log();
      *(void *)(v34 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v34 + 16) = 0;
      *(void *)(v0 + 712) = &type metadata for LocationServices;
      *(void *)(v0 + 720) = &protocol witness table for LocationServices;
      *(unsigned char *)(v0 + 688) = 2;
      uint64_t v19 = static DialogHelper.globals.getter();
      *(void *)(v0 + 1312) = v19;
      unint64_t v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 1320) = v36;
      *unint64_t v36 = v0;
      v36[1] = LocationFetchFlow.execute();
      uint64_t v21 = *(void *)(v0 + 992);
    }
    return CATService.execute(model:globals:)(v21, v16, v19);
  }
  else
  {
    swift_errorRelease();
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v22 = swift_allocError();
    *(void *)uint64_t v23 = 0xD000000000000038;
    *(void *)(v23 + 8) = 0x80000000000C9D70;
    *(unsigned char *)(v23 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*v3 + 152))(v22, 2);
    swift_errorRelease();
    uint64_t v24 = *(void *)(v0 + 1008);
    unint64_t v25 = *(void *)(v0 + 976);
    uint64_t v26 = *(void *)(v0 + 968);
    outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v24);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v26) == 1)
    {
      uint64_t v27 = *(void *)(v0 + 1008);
      outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)?(v27, &demangling cache variable for type metadata for TemplatingResult?);
      uint64_t v28 = *(void **)(v0 + 1056);
      unint64_t v29 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
      *(void *)(v0 + 144) = v0;
      *(void *)(v0 + 184) = v0 + 872;
      *(void *)(v0 + 152) = LocationFetchFlow.execute();
      uint64_t v30 = swift_continuation_init();
      *(void *)(v0 + 368) = _NSConcreteStackBlock;
      *(void *)(v0 + 376) = 0x40000000;
      *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
      *(void *)(v0 + 392) = &block_descriptor_1;
      *(void *)(v0 + 400) = v30;
      [v28 currentLocationWithAccuracy:v0 + 368 timeout:v29 completion:2.0];
      return _swift_continuation_await(v0 + 144);
    }
    else
    {
      uint64_t v54 = *(void **)(v0 + 1056);
      uint64_t v55 = *(void *)(v0 + 1048);
      unint64_t v37 = *(void *)(v0 + 984);
      uint64_t v38 = *(void *)(v0 + 976);
      uint64_t v53 = *(void *)(v0 + 968);
      uint64_t v51 = *(void *)(v0 + 952);
      unint64_t v39 = *(void *)(v0 + 936);
      uint64_t v49 = *(void *)(v0 + 960);
      uint64_t v50 = *(void *)(v0 + 928);
      uint64_t v40 = *(void *)(v0 + 920);
      unint64_t v41 = *(void **)(v0 + 912);
      (*(void (**)(uint64_t, void))(v38 + 32))(v37, *(void *)(v0 + 1008));
      unint64_t v43 = v41[6];
      uint64_t v42 = v41[7];
      __swift_project_boxed_opaque_existential_1(v41 + 3, v43);
      (*(void (**)(uint64_t, uint64_t))(v42 + 32))(v43, v42);
      unint64_t v44 = type metadata accessor for NLContextUpdate();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v40, 1, 1, v44);
      *(void *)(v0 + 760) = 0;
      *(_OWORD *)(v0 + 728) = 0u;
      *(_OWORD *)(v0 + 744) = 0u;
      static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
      outlined destroy of (label: String?, value: Any)?(v40, &demangling cache variable for type metadata for NLContextUpdate?);
      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v51, v49, v50);
      uint64_t v45 = (*(unsigned __int8 *)(v39 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v46 = swift_allocObject();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v46 + v45, v51, v50);
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      type metadata accessor for SimpleOutputFlowAsync();
      swift_allocObject();
      *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
      static ExecuteResponse.complete<A>(next:)();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v49, v50);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v53);
      outlined destroy of (label: String?, value: Any)?(v55, &demangling cache variable for type metadata for TemplatingResult?);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
      return v47();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 208);
  id v1 = *(void *)(v0 + 1048);
  uint64_t v2 = *(void *)(v0 + 1040);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 1064))(v2, 1, 1, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v2, v1);
  uint64_t v3 = *(void *)(v0 + 1008);
  double v4 = *(void *)(v0 + 976);
  uint64_t v5 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5) == 1)
  {
    uint64_t v6 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v6, &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v7 = *(void **)(v0 + 1056);
    uint64_t v8 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 152) = LocationFetchFlow.execute();
    uint64_t v9 = swift_continuation_init();
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 392) = &block_descriptor_1;
    *(void *)(v0 + 400) = v9;
    [v7 currentLocationWithAccuracy:v0 + 368 timeout:v8 completion:2.0];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    uint64_t v26 = *(void **)(v0 + 1056);
    uint64_t v27 = *(void *)(v0 + 1048);
    uint64_t v10 = *(void *)(v0 + 984);
    unint64_t v25 = *(void *)(v0 + 976);
    uint64_t v24 = *(void *)(v0 + 968);
    uint64_t v23 = *(void *)(v0 + 952);
    uint64_t v11 = *(void *)(v0 + 936);
    uint64_t v21 = *(void *)(v0 + 960);
    uint64_t v22 = *(void *)(v0 + 928);
    uint64_t v12 = *(void *)(v0 + 920);
    uint64_t v13 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v25 + 32))(v10, *(void *)(v0 + 1008));
    uint64_t v14 = v13[6];
    uint64_t v15 = v13[7];
    __swift_project_boxed_opaque_existential_1(v13 + 3, v14);
    (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
    uint64_t v16 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 1, 1, v16);
    *(void *)(v0 + 760) = 0;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v12, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v23, v21, v22);
    uint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v18 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v18 + v17, v23, v22);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    swift_allocObject();
    *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    static ExecuteResponse.complete<A>(next:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v10, v24);
    outlined destroy of (label: String?, value: Any)?(v27, &demangling cache variable for type metadata for TemplatingResult?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 568);
  id v1 = *(void *)(v0 + 1048);
  uint64_t v2 = *(void *)(v0 + 1016);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 1064))(v2, 1, 1, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v2, v1);
  uint64_t v3 = *(void *)(v0 + 1008);
  double v4 = *(void *)(v0 + 976);
  uint64_t v5 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5) == 1)
  {
    uint64_t v6 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v6, &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v7 = *(void **)(v0 + 1056);
    uint64_t v8 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 152) = LocationFetchFlow.execute();
    uint64_t v9 = swift_continuation_init();
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 392) = &block_descriptor_1;
    *(void *)(v0 + 400) = v9;
    [v7 currentLocationWithAccuracy:v0 + 368 timeout:v8 completion:2.0];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    uint64_t v26 = *(void **)(v0 + 1056);
    uint64_t v27 = *(void *)(v0 + 1048);
    uint64_t v10 = *(void *)(v0 + 984);
    uint64_t v11 = *(void *)(v0 + 976);
    unint64_t v25 = *(void *)(v0 + 968);
    uint64_t v24 = *(void *)(v0 + 952);
    uint64_t v12 = *(void *)(v0 + 936);
    uint64_t v22 = *(void *)(v0 + 960);
    uint64_t v23 = *(void *)(v0 + 928);
    uint64_t v13 = *(void *)(v0 + 920);
    uint64_t v14 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v11 + 32))(v10, *(void *)(v0 + 1008));
    uint64_t v16 = v14[6];
    uint64_t v15 = v14[7];
    __swift_project_boxed_opaque_existential_1(v14 + 3, v16);
    (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v16, v15);
    uint64_t v17 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 1, 1, v17);
    *(void *)(v0 + 760) = 0;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v13, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v24, v22, v23);
    unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v19 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 32))(v19 + v18, v24, v23);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    swift_allocObject();
    *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    static ExecuteResponse.complete<A>(next:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v25);
    outlined destroy of (label: String?, value: Any)?(v27, &demangling cache variable for type metadata for TemplatingResult?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  uint8_t *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjCClassFromMetadata;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *log;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 288);
  id v1 = *(void *)(v0 + 1144);
  *(void *)(v0 + 1264) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 888) = v1;
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(0);
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = *(void **)(v0 + 912);
  if (v2)
  {
    double v4 = (void *)(v0 + 800);
    uint64_t v5 = (void *)(v0 + 808);
    swift_errorRelease();
    uint64_t v6 = *(void **)(v0 + 880);
    *(void *)(v0 + 1272) = v6;
    uint64_t v7 = static os_log_type_t.error.getter();
    uint64_t v8 = v3[9];
    uint64_t v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      uint64_t v10 = v6;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      uint64_t v13 = v10;
      log = v8;
      uint64_t v14 = v6;
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 840) = v15;
      double v4 = (void *)(v0 + 800);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v15;
      uint64_t v6 = v14;

      _os_log_impl(&dword_0, log, v9, "AFLocationServiceError: %@", v11, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      uint64_t v5 = (void *)(v0 + 808);
      swift_slowDealloc();
      swift_slowDealloc();
    }
    void *v5 = v6;
    _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_1(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, 255, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
    _BridgedStoredNSError.code.getter();
    if (*v4 == 5)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = v0 + 648;
      type metadata accessor for CATService();
      uint64_t v17 = swift_allocObject();
      *(void *)(v0 + 1280) = v17;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      *(void *)(v17 + 24) = [self bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log();
      *(void *)(v17 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v17 + 16) = 0;
      *(void *)(v0 + 672) = &type metadata for LocationServices;
      *(void *)(v0 + 680) = &protocol witness table for LocationServices;
      *(unsigned char *)(v0 + 648) = 0;
      uint64_t v19 = static DialogHelper.globals.getter();
      *(void *)(v0 + 1288) = v19;
      unint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 1296) = v20;
      *unint64_t v20 = v0;
      v20[1] = LocationFetchFlow.execute();
      uint64_t v21 = *(void *)(v0 + 1000);
    }
    else
    {
      uint64_t v16 = v0 + 688;
      uint64_t v31 = *(void *)(v0 + 912);
      lazy protocol witness table accessor for type Errors and conformance Errors();
      unint64_t v32 = swift_allocError();
      *(void *)uint64_t v33 = 0xD00000000000001FLL;
      *(void *)(v33 + 8) = 0x80000000000C9E40;
      *(unsigned char *)(v33 + 16) = 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 152))(v32, 2);
      type metadata accessor for CATService();
      uint64_t v34 = swift_allocObject();
      *(void *)(v0 + 1304) = v34;
      uint64_t v35 = swift_getObjCClassFromMetadata();
      *(void *)(v34 + 24) = [self bundleForClass:v35];
      type metadata accessor for OS_os_log();
      *(void *)(v34 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v34 + 16) = 0;
      *(void *)(v0 + 712) = &type metadata for LocationServices;
      *(void *)(v0 + 720) = &protocol witness table for LocationServices;
      *(unsigned char *)(v0 + 688) = 2;
      uint64_t v19 = static DialogHelper.globals.getter();
      *(void *)(v0 + 1312) = v19;
      unint64_t v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 1320) = v36;
      *unint64_t v36 = v0;
      v36[1] = LocationFetchFlow.execute();
      uint64_t v21 = *(void *)(v0 + 992);
    }
    return CATService.execute(model:globals:)(v21, v16, v19);
  }
  else
  {
    swift_errorRelease();
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v22 = swift_allocError();
    *(void *)uint64_t v23 = 0xD000000000000038;
    *(void *)(v23 + 8) = 0x80000000000C9D70;
    *(unsigned char *)(v23 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*v3 + 152))(v22, 2);
    swift_errorRelease();
    uint64_t v24 = *(void *)(v0 + 1008);
    unint64_t v25 = *(void *)(v0 + 976);
    uint64_t v26 = *(void *)(v0 + 968);
    outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v24);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v26) == 1)
    {
      uint64_t v27 = *(void *)(v0 + 1008);
      outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)?(v27, &demangling cache variable for type metadata for TemplatingResult?);
      uint64_t v28 = *(void **)(v0 + 1056);
      unint64_t v29 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
      *(void *)(v0 + 144) = v0;
      *(void *)(v0 + 184) = v0 + 872;
      *(void *)(v0 + 152) = LocationFetchFlow.execute();
      uint64_t v30 = swift_continuation_init();
      *(void *)(v0 + 368) = _NSConcreteStackBlock;
      *(void *)(v0 + 376) = 0x40000000;
      *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
      *(void *)(v0 + 392) = &block_descriptor_1;
      *(void *)(v0 + 400) = v30;
      [v28 currentLocationWithAccuracy:v0 + 368 timeout:v29 completion:2.0];
      return _swift_continuation_await(v0 + 144);
    }
    else
    {
      uint64_t v54 = *(void **)(v0 + 1056);
      uint64_t v55 = *(void *)(v0 + 1048);
      unint64_t v37 = *(void *)(v0 + 984);
      uint64_t v38 = *(void *)(v0 + 976);
      uint64_t v53 = *(void *)(v0 + 968);
      uint64_t v51 = *(void *)(v0 + 952);
      unint64_t v39 = *(void *)(v0 + 936);
      uint64_t v49 = *(void *)(v0 + 960);
      uint64_t v50 = *(void *)(v0 + 928);
      uint64_t v40 = *(void *)(v0 + 920);
      unint64_t v41 = *(void **)(v0 + 912);
      (*(void (**)(uint64_t, void))(v38 + 32))(v37, *(void *)(v0 + 1008));
      unint64_t v43 = v41[6];
      uint64_t v42 = v41[7];
      __swift_project_boxed_opaque_existential_1(v41 + 3, v43);
      (*(void (**)(uint64_t, uint64_t))(v42 + 32))(v43, v42);
      unint64_t v44 = type metadata accessor for NLContextUpdate();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v40, 1, 1, v44);
      *(void *)(v0 + 760) = 0;
      *(_OWORD *)(v0 + 728) = 0u;
      *(_OWORD *)(v0 + 744) = 0u;
      static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
      outlined destroy of (label: String?, value: Any)?(v40, &demangling cache variable for type metadata for NLContextUpdate?);
      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v51, v49, v50);
      uint64_t v45 = (*(unsigned __int8 *)(v39 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v46 = swift_allocObject();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v46 + v45, v51, v50);
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      type metadata accessor for SimpleOutputFlowAsync();
      swift_allocObject();
      *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
      static ExecuteResponse.complete<A>(next:)();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v49, v50);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v53);
      outlined destroy of (label: String?, value: Any)?(v55, &demangling cache variable for type metadata for TemplatingResult?);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
      return v47();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  uint8_t *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjCClassFromMetadata;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 408);
  id v1 = *(void *)(v0 + 1176);
  *(void *)(v0 + 1264) = *(void *)(v0 + 1152);
  *(void *)(v0 + 888) = v1;
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(0);
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = *(void **)(v0 + 912);
  if (v2)
  {
    double v4 = (void *)(v0 + 800);
    uint64_t v5 = (void *)(v0 + 808);
    swift_errorRelease();
    uint64_t v6 = *(void **)(v0 + 880);
    *(void *)(v0 + 1272) = v6;
    uint64_t v7 = static os_log_type_t.error.getter();
    uint64_t v8 = v3[9];
    uint64_t v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      uint64_t v10 = v6;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      uint64_t v13 = v10;
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 840) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v14;

      _os_log_impl(&dword_0, v8, v9, "AFLocationServiceError: %@", v11, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      uint64_t v5 = (void *)(v0 + 808);
      swift_slowDealloc();
      double v4 = (void *)(v0 + 800);
      swift_slowDealloc();
    }
    void *v5 = v6;
    _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_1(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, 255, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
    _BridgedStoredNSError.code.getter();
    if (*v4 == 5)
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = v0 + 648;
      type metadata accessor for CATService();
      uint64_t v16 = swift_allocObject();
      *(void *)(v0 + 1280) = v16;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      *(void *)(v16 + 24) = [self bundleForClass:ObjCClassFromMetadata];
      type metadata accessor for OS_os_log();
      *(void *)(v16 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v16 + 16) = 0;
      *(void *)(v0 + 672) = &type metadata for LocationServices;
      *(void *)(v0 + 680) = &protocol witness table for LocationServices;
      *(unsigned char *)(v0 + 648) = 0;
      unint64_t v18 = static DialogHelper.globals.getter();
      *(void *)(v0 + 1288) = v18;
      uint64_t v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 1296) = v19;
      *uint64_t v19 = v0;
      v19[1] = LocationFetchFlow.execute();
      unint64_t v20 = *(void *)(v0 + 1000);
    }
    else
    {
      uint64_t v15 = v0 + 688;
      uint64_t v30 = *(void *)(v0 + 912);
      lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v31 = swift_allocError();
      *(void *)unint64_t v32 = 0xD00000000000001FLL;
      *(void *)(v32 + 8) = 0x80000000000C9E40;
      *(unsigned char *)(v32 + 16) = 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 152))(v31, 2);
      type metadata accessor for CATService();
      uint64_t v33 = swift_allocObject();
      *(void *)(v0 + 1304) = v33;
      uint64_t v34 = swift_getObjCClassFromMetadata();
      *(void *)(v33 + 24) = [self bundleForClass:v34];
      type metadata accessor for OS_os_log();
      *(void *)(v33 + 32) = OS_os_log.init(subsystem:category:)();
      *(unsigned char *)(v33 + 16) = 0;
      *(void *)(v0 + 712) = &type metadata for LocationServices;
      *(void *)(v0 + 720) = &protocol witness table for LocationServices;
      *(unsigned char *)(v0 + 688) = 2;
      unint64_t v18 = static DialogHelper.globals.getter();
      *(void *)(v0 + 1312) = v18;
      uint64_t v35 = (void *)swift_task_alloc();
      *(void *)(v0 + 1320) = v35;
      *uint64_t v35 = v0;
      v35[1] = LocationFetchFlow.execute();
      unint64_t v20 = *(void *)(v0 + 992);
    }
    return CATService.execute(model:globals:)(v20, v15, v18);
  }
  else
  {
    swift_errorRelease();
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v21 = swift_allocError();
    *(void *)uint64_t v22 = 0xD000000000000038;
    *(void *)(v22 + 8) = 0x80000000000C9D70;
    *(unsigned char *)(v22 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*v3 + 152))(v21, 2);
    swift_errorRelease();
    uint64_t v23 = *(void *)(v0 + 1008);
    uint64_t v24 = *(void *)(v0 + 976);
    unint64_t v25 = *(void *)(v0 + 968);
    outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v23);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v25) == 1)
    {
      uint64_t v26 = *(void *)(v0 + 1008);
      outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)?(v26, &demangling cache variable for type metadata for TemplatingResult?);
      uint64_t v27 = *(void **)(v0 + 1056);
      uint64_t v28 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
      *(void *)(v0 + 144) = v0;
      *(void *)(v0 + 184) = v0 + 872;
      *(void *)(v0 + 152) = LocationFetchFlow.execute();
      unint64_t v29 = swift_continuation_init();
      *(void *)(v0 + 368) = _NSConcreteStackBlock;
      *(void *)(v0 + 376) = 0x40000000;
      *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
      *(void *)(v0 + 392) = &block_descriptor_1;
      *(void *)(v0 + 400) = v29;
      [v27 currentLocationWithAccuracy:v0 + 368 timeout:v28 completion:2.0];
      return _swift_continuation_await(v0 + 144);
    }
    else
    {
      uint64_t v52 = *(void **)(v0 + 1056);
      uint64_t v53 = *(void *)(v0 + 1048);
      unint64_t v36 = *(void *)(v0 + 984);
      uint64_t v51 = *(void *)(v0 + 976);
      uint64_t v50 = *(void *)(v0 + 968);
      uint64_t v49 = *(void *)(v0 + 952);
      unint64_t v37 = *(void *)(v0 + 936);
      uint64_t v47 = *(void *)(v0 + 960);
      uint64_t v48 = *(void *)(v0 + 928);
      uint64_t v38 = *(void *)(v0 + 920);
      unint64_t v39 = *(void **)(v0 + 912);
      (*(void (**)(uint64_t, void))(v51 + 32))(v36, *(void *)(v0 + 1008));
      uint64_t v40 = v39[6];
      unint64_t v41 = v39[7];
      __swift_project_boxed_opaque_existential_1(v39 + 3, v40);
      (*(void (**)(uint64_t, uint64_t))(v41 + 32))(v40, v41);
      uint64_t v42 = type metadata accessor for NLContextUpdate();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v38, 1, 1, v42);
      *(void *)(v0 + 760) = 0;
      *(_OWORD *)(v0 + 728) = 0u;
      *(_OWORD *)(v0 + 744) = 0u;
      static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
      outlined destroy of (label: String?, value: Any)?(v38, &demangling cache variable for type metadata for NLContextUpdate?);
      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v49, v47, v48);
      unint64_t v43 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      unint64_t v44 = swift_allocObject() + v43;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v37 + 32))(v44, v49, v48);
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      type metadata accessor for SimpleOutputFlowAsync();
      swift_allocObject();
      *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
      static ExecuteResponse.complete<A>(next:)();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v47, v48);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v36, v50);
      outlined destroy of (label: String?, value: Any)?(v53, &demangling cache variable for type metadata for TemplatingResult?);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
      return v45();
    }
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 648);
  id v1 = *(void **)(v0 + 1272);
  uint64_t v2 = *(void *)(v0 + 1048);
  uint64_t v3 = *(void *)(v0 + 1000);
  double v4 = *(void **)(v0 + 912);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 1064))(v3, 1, 1, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v3, v2);
  uint64_t v5 = v4 + 3;
  uint64_t v6 = v4[6];
  uint64_t v7 = v4[7];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  specialized static LocationServicesViews.makeDeepLink(status:device:)(1u, (void *)(v0 + 608));

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 608);
  swift_errorRelease();
  uint64_t v8 = *(void *)(v0 + 1008);
  uint64_t v9 = *(void *)(v0 + 976);
  uint64_t v10 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v8, 1, v10) == 1)
  {
    uint64_t v11 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v11, &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v12 = *(void **)(v0 + 1056);
    uint64_t v13 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 152) = LocationFetchFlow.execute();
    uint64_t v14 = swift_continuation_init();
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 392) = &block_descriptor_1;
    *(void *)(v0 + 400) = v14;
    [v12 currentLocationWithAccuracy:v0 + 368 timeout:v13 completion:2.0];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    uint64_t v31 = *(void **)(v0 + 1056);
    unint64_t v32 = *(void *)(v0 + 1048);
    uint64_t v15 = *(void *)(v0 + 984);
    uint64_t v30 = *(void *)(v0 + 976);
    unint64_t v29 = *(void *)(v0 + 968);
    uint64_t v28 = *(void *)(v0 + 952);
    uint64_t v16 = *(void *)(v0 + 936);
    uint64_t v26 = *(void *)(v0 + 960);
    uint64_t v27 = *(void *)(v0 + 928);
    uint64_t v17 = *(void *)(v0 + 920);
    unint64_t v18 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v30 + 32))(v15, *(void *)(v0 + 1008));
    uint64_t v19 = v18[6];
    unint64_t v20 = v18[7];
    __swift_project_boxed_opaque_existential_1(v18 + 3, v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
    uint64_t v21 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v17, 1, 1, v21);
    *(void *)(v0 + 760) = 0;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v17, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v28, v26, v27);
    uint64_t v22 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v23 = swift_allocObject() + v22;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v23, v28, v27);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    swift_allocObject();
    *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    static ExecuteResponse.complete<A>(next:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v15, v29);
    outlined destroy of (label: String?, value: Any)?(v32, &demangling cache variable for type metadata for TemplatingResult?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  id v1 = *(void *)(v0 + 1048);

  outlined destroy of (label: String?, value: Any)?(v1, &demangling cache variable for type metadata for TemplatingResult?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 688);
  uint64_t v2 = *(void *)(v0 + 1048);
  uint64_t v3 = *(void *)(v0 + 992);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 1064))(v3, 1, 1, *(void *)(v0 + 968));
  outlined init with take of TemplatingResult?(v3, v2);
  swift_errorRelease();
  double v4 = *(void *)(v0 + 1008);
  uint64_t v5 = *(void *)(v0 + 976);
  uint64_t v6 = *(void *)(v0 + 968);
  outlined init with copy of TemplatingResult?(*(void *)(v0 + 1048), v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v6) == 1)
  {
    uint64_t v7 = *(void *)(v0 + 1008);
    outlined destroy of (label: String?, value: Any)?(*(void *)(v0 + 1048), &demangling cache variable for type metadata for TemplatingResult?);
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v7, &demangling cache variable for type metadata for TemplatingResult?);
    uint64_t v8 = *(void **)(v0 + 1056);
    uint64_t v9 = *(double *)*(&off_E7330 + *(char *)(*(void *)(v0 + 912) + 64));
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 872;
    *(void *)(v0 + 152) = LocationFetchFlow.execute();
    uint64_t v10 = swift_continuation_init();
    *(void *)(v0 + 368) = _NSConcreteStackBlock;
    *(void *)(v0 + 376) = 0x40000000;
    *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation;
    *(void *)(v0 + 392) = &block_descriptor_1;
    *(void *)(v0 + 400) = v10;
    [v8 currentLocationWithAccuracy:v0 + 368 timeout:v9 completion:2.0];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    uint64_t v27 = *(void **)(v0 + 1056);
    uint64_t v28 = *(void *)(v0 + 1048);
    uint64_t v11 = *(void *)(v0 + 984);
    uint64_t v26 = *(void *)(v0 + 976);
    unint64_t v25 = *(void *)(v0 + 968);
    uint64_t v24 = *(void *)(v0 + 952);
    uint64_t v12 = *(void *)(v0 + 936);
    uint64_t v22 = *(void *)(v0 + 960);
    uint64_t v23 = *(void *)(v0 + 928);
    uint64_t v13 = *(void *)(v0 + 920);
    uint64_t v14 = *(void **)(v0 + 912);
    (*(void (**)(uint64_t, void))(v26 + 32))(v11, *(void *)(v0 + 1008));
    uint64_t v15 = v14[6];
    uint64_t v16 = v14[7];
    __swift_project_boxed_opaque_existential_1(v14 + 3, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    uint64_t v17 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 1, 1, v17);
    *(void *)(v0 + 760) = 0;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_OWORD *)(v0 + 744) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    swift_bridgeObjectRelease();
    outlined destroy of (label: String?, value: Any)?(v0 + 728, &demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of (label: String?, value: Any)?(v13, &demangling cache variable for type metadata for NLContextUpdate?);
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 448);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v24, v22, v23);
    unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v19 = swift_allocObject() + v18;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 32))(v19, v24, v23);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    swift_allocObject();
    *(void *)(v0 + 864) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    static ExecuteResponse.complete<A>(next:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v11, v25);
    outlined destroy of (label: String?, value: Any)?(v28, &demangling cache variable for type metadata for TemplatingResult?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  swift_willThrow();
  swift_errorRelease();
  id v1 = *(NSObject **)(v0[114] + 72);
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "Location Service could not get requested accuracy within timeout", v3, 2u);
    swift_slowDealloc();
  }
  double v4 = v0[114];
  lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v5 = swift_allocError();
  *(void *)uint64_t v6 = 0xD000000000000021;
  *(void *)(v6 + 8) = 0x80000000000C9DE0;
  *(unsigned char *)(v6 + 16) = 2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 152))(v5, 2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[157] = v7;
  void *v7 = v0;
  v7[1] = LocationFetchFlow.execute();
  uint64_t v8 = v0[113];
  return LocationFetchFlow.unknownLocationOutput()(v8);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFLocationAuthorizationStyle, @unowned CLAccuracyAuthorization, @unowned NSError?) -> () with result type (AFLocationAuthorizationStyle, CLAccuracyAuthorization)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v6 = swift_allocError();
    void *v7 = a4;
    id v8 = a4;
    return _swift_continuation_throwingResumeWithError(v4, v6);
  }
  else
  {
    uint64_t v9 = *(void **)(*(void *)(v4 + 64) + 40);
    *uint64_t v9 = a2;
    v9[1] = a3;
    return _swift_continuation_throwingResume(v4);
  }
}

uint64_t closure #1 in LocationFetchFlow.execute()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(closure #1 in LocationFetchFlow.execute(), 0, 0);
}

double LocationAccessLevelFor.requestingAccuracy.getter(char a1)
{
  return *(double *)*(&off_E7330 + a1);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CLLocation?, @unowned NSError?) -> () with result type CLLocation(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

double LocationAccessLevelFor.minimalViableAccuracy.getter(char a1)
{
  return *(double *)*(&off_E7350 + a1);
}

uint64_t LocationFetchFlow.unknownLocationOutput()(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[20] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AceOutput();
  v2[21] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[22] = v4;
  v2[23] = *(void *)(v4 + 64);
  char v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v2[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v2[27] = v5;
  v2[28] = *(void *)(v5 - 8);
  v2[29] = swift_task_alloc();
  return _swift_task_switch(LocationFetchFlow.unknownLocationOutput(), 0, 0);
}

uint64_t LocationFetchFlow.unknownLocationOutput()()
{
  type metadata accessor for CATService();
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 240) = v1;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v1 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log();
  *(void *)(v1 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v0 + 40) = &type metadata for LocationServices;
  *(void *)(v0 + 48) = &protocol witness table for LocationServices;
  *(unsigned char *)(v0 + 16) = 2;
  uint64_t v3 = static DialogHelper.globals.getter();
  *(void *)(v0 + 248) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v4;
  *uint64_t v4 = v0;
  v4[1] = LocationFetchFlow.unknownLocationOutput();
  uint64_t v5 = *(void *)(v0 + 208);
  return CATService.execute(model:globals:)(v5, v0 + 16, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = LocationFetchFlow.unknownLocationOutput();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = LocationFetchFlow.unknownLocationOutput();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 176);
  unint64_t v18 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v16 = *(void *)(v0 + 200);
  uint64_t v17 = *(void *)(v0 + 168);
  uint64_t v7 = *(void **)(v0 + 152);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v3, 0, 1, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v3, v4);
  id v8 = v7 + 3;
  uint64_t v10 = v7[6];
  uint64_t v9 = v7[7];
  __swift_project_boxed_opaque_existential_1(v8, v10);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v10, v9);
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of (label: String?, value: Any)?(v0 + 96, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v6, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v18, v16, v17);
  uint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v12, v18, v17);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 136) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[26];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  outlined destroy of (label: String?, value: Any)?(v3, &demangling cache variable for type metadata for TemplatingResult?);
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  static ExecuteResponse.complete()();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #1 in LocationFetchFlow.unknownLocationOutput()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(closure #1 in LocationFetchFlow.unknownLocationOutput(), 0, 0);
}

uint64_t closure #1 in LocationFetchFlow.unknownLocationOutput()()
{
  uint64_t v1 = (uint64_t *)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = type metadata accessor for AceOutput();
  v1[3] = v3;
  v1[4] = (uint64_t)&protocol witness table for AceOutput;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v1);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(boxed_opaque_existential_0, v2, v3);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t LocationFetchFlow.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 24);

  outlined consume of LocationFetchFlow.ExitValue(*(id *)(v0 + 80), *(unsigned char *)(v0 + 88));
  return v0;
}

uint64_t LocationFetchFlow.__deallocating_deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 24);

  outlined consume of LocationFetchFlow.ExitValue(*(id *)(v0 + 80), *(unsigned char *)(v0 + 88));

  return _swift_deallocClassInstance(v0, 89, 7);
}

uint64_t protocol witness for Flow.on(input:) in conformance LocationFetchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance LocationFetchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t protocol witness for Flow.execute() in conformance LocationFetchFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 192) + **(int **)(**(void **)v1 + 192));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance LocationFetchFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

uint64_t outlined init with copy of TemplatingResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  id v8 = *a2;
  if (*a2)
  {
    *id v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t partial apply for closure #1 in LocationFetchFlow.execute()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AceOutput() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  _OWORD v6[2] = a1;
  v6[3] = v5;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return _swift_task_switch(closure #1 in LocationFetchFlow.execute(), 0, 0);
}

uint64_t _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_1(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of TemplatingResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type LocationAccessLevelFor and conformance LocationAccessLevelFor()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationAccessLevelFor and conformance LocationAccessLevelFor;
  if (!lazy protocol witness table cache variable for type LocationAccessLevelFor and conformance LocationAccessLevelFor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationAccessLevelFor and conformance LocationAccessLevelFor);
  }
  return result;
}

uint64_t sub_92690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_926E0(uint64_t a1, uint64_t a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(uint64_t (**)(id, uint64_t))(**(void **)a2 + 152);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  outlined copy of LocationFetchFlow.ExitValue(*(id *)a1, v4);
  return v3(v2, v4);
}

uint64_t initializeBufferWithCopyOfBuffer for LocationFetchFlow.ExitValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of LocationFetchFlow.ExitValue(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for LocationFetchFlow.ExitValue(uint64_t a1)
{
}

uint64_t assignWithCopy for LocationFetchFlow.ExitValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of LocationFetchFlow.ExitValue(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of LocationFetchFlow.ExitValue(v5, v6);
  return a1;
}

uint64_t assignWithTake for LocationFetchFlow.ExitValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of LocationFetchFlow.ExitValue(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationFetchFlow.ExitValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationFetchFlow.ExitValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for LocationFetchFlow.ExitValue(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for LocationFetchFlow.ExitValue(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LocationFetchFlow.ExitValue()
{
  return &type metadata for LocationFetchFlow.ExitValue;
}

unsigned char *storeEnumTagSinglePayload for LocationAccessLevelFor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x929D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationAccessLevelFor()
{
  return &type metadata for LocationAccessLevelFor;
}

uint64_t objectdestroy_7Tm()
{
  uint64_t v1 = type metadata accessor for AceOutput();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in LocationFetchFlow.unknownLocationOutput()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AceOutput() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  _OWORD v6[2] = a1;
  v6[3] = v5;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return _swift_task_switch(closure #1 in LocationFetchFlow.unknownLocationOutput(), 0, 0);
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo30INSupportedTrafficIncidentTypeCGG_21GeoFlowDelegatePlugin0jgH0Vs5NeverOTg508_sSiSo30fghi3C21jkl43Plugin0ebC0VIgygo_Si6offset_AB7elementtAEs5N263OIegnrzr_TR04_s21efg8Plugin42bc171NeedsDisambiguationStrategyC23disambiguateIncidentsRF6dialog14paginatedItems9nlContext07SiriKitB06Output_pSgAA0A8CATModel_p_AH22PaginatedItemContainerVySo011INSupportedeF4D45CGAH15NLContextUpdateVtYaFAA0aeF0VSi_AOtXEfU_Tf3nnnpf_nTf1cn_n(unint64_t a1)
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v25 = a1 & 0xC000000000000001;
      uint64_t v4 = (SEL *)&unk_EC000;
      unint64_t v23 = a1;
      while (v25)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v6 = v5;
        unint64_t v7 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_20;
        }
        id v8 = [v5 v4[50]];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v26 = v11;
          uint64_t v27 = v10;
        }
        else
        {
          uint64_t v26 = 0;
          uint64_t v27 = 0;
        }
        uint64_t v12 = v4;
        id v13 = [v6 v4[50]];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v17 = v16;
        }
        else
        {
          uint64_t v15 = 0;
          unint64_t v17 = 0xE000000000000000;
        }
        id v18 = [v6 type];

        unint64_t v20 = _swiftEmptyArrayStorage[2];
        unint64_t v19 = _swiftEmptyArrayStorage[3];
        if (v20 >= v19 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v20 + 1;
        uint64_t v21 = &_swiftEmptyArrayStorage[6 * v20];
        v21[4] = v3;
        v21[5] = v27;
        v21[6] = v26;
        v21[7] = v15;
        v21[8] = v17;
        v21[9] = v18;
        ++v3;
        a1 = v23;
        uint64_t v4 = v12;
        if (v7 == v2) {
          goto LABEL_22;
        }
      }
      if (v3 < *(void *)(v24 + 16)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        goto LABEL_22;
      }
    }
    id v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_7;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.__allocating_init(isPommes:with:)(char a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  TrafficIncidentNeedsDisambiguationStrategy.init(isPommes:with:)(a1, a2);
  return v4;
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.init(isPommes:with:)(char a1, long long *a2)
{
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for CATService();
  uint64_t v5 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v5 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v5 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v5 + 16) = 1;
  *(void *)(v2 + 72) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_BFBD0;
  if (one-time initialization token for incidentTypeNode != -1) {
    swift_once();
  }
  swift_retain();
  unint64_t v8 = specialized OntologyNode.javaClassName.getter();
  uint64_t v10 = v9;
  swift_release();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  if (one-time initialization token for referenceNode != -1) {
    swift_once();
  }
  swift_retain();
  unint64_t v11 = specialized OntologyNode.javaClassName.getter();
  uint64_t v13 = v12;
  swift_release();
  *(void *)(v7 + 48) = v11;
  *(void *)(v7 + 56) = v13;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once();
  }
  swift_retain();
  unint64_t v14 = specialized OntologyNode.javaClassName.getter();
  uint64_t v16 = v15;
  swift_release();
  *(void *)(v7 + 64) = v14;
  *(void *)(v7 + 72) = v16;
  *(void *)(v2 + 80) = v7;
  *(unsigned char *)(v2 + 64) = a1 & 1;
  outlined init with take of CATType(a2, v2 + 24);
  return v2;
}

void TrafficIncidentNeedsDisambiguationStrategy.actionForInput(_:resolveRecord:)(uint64_t a1@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v59 = *(void *)(v1 - 8);
  uint64_t v60 = v1;
  __chkstk_darwin(v1);
  uint64_t v58 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v61 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (void **)((char *)&v57 - v8);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v57 - v10;
  uint64_t v12 = type metadata accessor for NLIntent();
  uint64_t v62 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v57 - v16;
  Input.parse.getter();
  id v18 = *(unsigned int (**)(char *, uint64_t))(v4 + 88);
  if (v18(v11, v3) == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v11, v3);
    uint64_t v19 = v62;
    unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    v20(v17, v11, v12);
    static os_log_type_t.info.getter();
    Class isa = isa[2].isa;
    os_log(_:dso:log:_:_:)();
    uint64_t v21 = v17;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v15, v17, v12);
    type metadata accessor for LocationSearchIntent();
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    uint64_t v24 = v19;
    if (one-time initialization token for domainNode != -1) {
      swift_once();
    }
    *(void *)(v22 + v23) = static LocationSearchIntent.domainNode;
    v20((char *)(v22 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent), v15, v12);
    uint64_t v65 = v22;
    uint64_t v25 = one-time initialization token for confirmationNode;
    swift_retain();
    if (v25 != -1) {
      swift_once();
    }
    _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent, 255, (void (*)(uint64_t))type metadata accessor for LocationSearchIntent);
    IntentNodeTraversable.value<A>(forNode:)();
    swift_release();
    uint64_t v26 = v21;
    uint64_t v27 = isa;
    switch(v66)
    {
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_22;
      case 3:
        goto LABEL_8;
      default:
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v28)
        {
LABEL_22:
          os_log_type_t v46 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v27, v46))
          {
            uint64_t v47 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v47 = 0;
            _os_log_impl(&dword_0, v27, v46, "Traffic incident cancelation from NLv3IntentOnly parse.", v47, 2u);
            swift_slowDealloc();
          }
          static ActionForInput.cancel()();
        }
        else
        {
LABEL_8:
          os_log_type_t v29 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v27, v29))
          {
            uint64_t v30 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v30 = 0;
            _os_log_impl(&dword_0, v27, v29, "Traffic incident handling NLv3IntentOnly parse.", v30, 2u);
            swift_slowDealloc();
          }
          static ActionForInput.handle()();
        }
        (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v12);
        break;
    }
    return;
  }
  uint64_t v31 = isa;
  unint64_t v32 = *(void (**)(char *, uint64_t))(v4 + 8);
  v32(v11, v3);
  Input.parse.getter();
  if (v18((char *)v9, v3) == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v4 + 96))(v9, v3);
    uint64_t v33 = *v9;
    static os_log_type_t.info.getter();
    uint64_t v34 = v31[2].isa;
    os_log(_:dso:log:_:_:)();
    type metadata accessor for LocationSearchIntent();
    swift_allocObject();
    id v35 = v33;
    uint64_t v36 = LocationSearchIntent.init(from:)(v35);
    char v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 152))(v36);
    swift_release();
    switch(v37)
    {
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_31;
      case 3:
        goto LABEL_14;
      default:
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v38)
        {
LABEL_31:
          os_log_type_t v51 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v34, v51))
          {
            uint64_t v52 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v52 = 0;
            _os_log_impl(&dword_0, v34, v51, "Traffic incident cancelation from POMMES parse.", v52, 2u);
            swift_slowDealloc();
          }
          static ActionForInput.cancel()();
        }
        else
        {
LABEL_14:
          os_log_type_t v39 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v34, v39))
          {
            uint64_t v40 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v40 = 0;
            _os_log_impl(&dword_0, v34, v39, "Traffic incident handling POMMES parse.", v40, 2u);
            swift_slowDealloc();
          }
          static ActionForInput.handle()();
        }
        break;
    }
    return;
  }
  v32((char *)v9, v3);
  unint64_t v41 = v61;
  Input.parse.getter();
  if (v18(v41, v3) == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v41, v3);
    unint64_t v43 = v58;
    uint64_t v42 = v59;
    uint64_t v44 = v60;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v41, v60);
    if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000033 && v45 == 0x80000000000C67E0)
    {
      swift_bridgeObjectRelease();
LABEL_35:
      uint64_t v54 = v31[2].isa;
      os_log_type_t v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        unint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v56 = 0;
        _os_log_impl(&dword_0, v54, v55, "TrafficIncidentBaseFlow onInput returns true for directInvocation.", v56, 2u);
        swift_slowDealloc();
      }
      static ActionForInput.handle()();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
      return;
    }
    char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v53) {
      goto LABEL_35;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
  }
  else
  {
    v32(v41, v3);
  }
  uint64_t v48 = v31[2].isa;
  os_log_type_t v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl(&dword_0, v48, v49, "SiriGeo currently doesn't support parse type.", v50, 2u);
    swift_slowDealloc();
  }
  static ActionForInput.ignore()();
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(TrafficIncidentNeedsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:), 0, 0);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  id v18 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
  uint64_t v1 = (void *)ParameterResolutionRecord.result.getter();
  id v2 = [v1 disambiguationItems];

  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = specialized _arrayConditionalCast<A, B>(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = v0[4];
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<INSupportedTrafficIncidentType>);
    swift_allocObject();
    uint64_t v6 = BasicDisambiguationItemContainer.init(_:_:)();
    uint64_t v7 = *(NSObject **)(v5 + 16);
    swift_retain_n();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      v0[2] = v6;
      swift_retain();
      uint64_t v10 = String.init<A>(describing:)();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v7, v8, "makeDisambiguationItemContainer with container: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
    uint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
    return v16(v6);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for RuntimeError();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = 0xD000000000000044;
    *(void *)(v12 + 24) = 0x80000000000C9FA0;
    _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
    swift_allocError();
    *uint64_t v13 = v12;
    swift_willThrow();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:)(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[19] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[20] = v3;
  v2[21] = *(void *)(v3 - 8);
  v2[22] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:), 0, 0);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:)()
{
  uint64_t v1 = *(NSObject **)(v0[18] + 16);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "makeFlowCancelledResponse", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void *)v0[18];
  uint64_t v5 = v4[9];
  v0[5] = &type metadata for Common;
  v0[6] = &protocol witness table for Common;
  v0[2] = 0;
  uint64_t v6 = v4[6];
  uint64_t v7 = v4[7];
  __swift_project_boxed_opaque_existential_1(v4 + 3, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7);
  v0[23] = v8;
  uint64_t v12 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v5 + 112)
                                                           + **(int **)(*(void *)v5 + 112));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[24] = v9;
  *uint64_t v9 = v0;
  v9[1] = TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:);
  uint64_t v10 = v0[22];
  return v12(v10, v0 + 2, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  os_log_type_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    uint64_t v3 = TrafficIncidentNeedsDisambiguationStrategy.makeFlowCancelledResponse(app:intent:parameterName:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  os_log_type_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v6 = *(uint64_t **)(v0 + 136);
  uint64_t v5 = *(void **)(v0 + 144);
  uint64_t v7 = v5[6];
  uint64_t v8 = v5[7];
  __swift_project_boxed_opaque_existential_1(v5 + 3, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  uint64_t v9 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  static TrafficIncidentUtils.sendCompletionViewOutput(result:snippets:device:listenAfterSpeaking:ttsEnabled:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)((uint64_t)_swiftEmptyArrayStorage, (uint8_t *)(v0 + 56), v6, v0 + 96);
  outlined destroy of (label: String?, value: Any)?(v0 + 96, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[20] = a4;
  v5[21] = v4;
  v5[18] = a1;
  v5[19] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INReportIncidentIntent>);
  v5[22] = v6;
  v5[23] = *(void *)(v6 - 8);
  v5[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Parse.DirectInvocation();
  v5[25] = v7;
  v5[26] = *(void *)(v7 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for NLIntent();
  v5[29] = v8;
  v5[30] = *(void *)(v8 - 8);
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Parse();
  v5[33] = v9;
  v5[34] = *(void *)(v9 - 8);
  v5[35] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentNeedsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:), 0, 0);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  uint64_t v103 = v0;
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  Input.parse.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v5 = *(void *)(v0 + 280);
    uint64_t v6 = *(void *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v7 = *(void *)(v0 + 248);
    uint64_t v9 = *(void *)(v0 + 232);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 272) + 96))(v5, *(void *)(v0 + 264));
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v10(v6, v5, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
    type metadata accessor for LocationSearchIntent();
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_domainOntologyNode;
    if (one-time initialization token for domainNode != -1) {
      swift_once();
    }
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v14 = *(void *)(v0 + 256);
    uint64_t v15 = *(void *)(v0 + 232);
    uint64_t v16 = *(void *)(v0 + 240);
    *(void *)(v11 + v12) = static LocationSearchIntent.domainNode;
    v10(v11 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent, v13, v15);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    swift_retain();
    v17(v14, v15);
    goto LABEL_5;
  }
  if (v4 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v29 = *(void *)(v0 + 224);
    uint64_t v30 = *(void *)(v0 + 280);
    uint64_t v31 = *(void *)(v0 + 208);
    uint64_t v32 = *(void *)(v0 + 216);
    uint64_t v34 = (void *)(v0 + 200);
    uint64_t v33 = *(void *)(v0 + 200);
    uint64_t v35 = *(void *)(v0 + 168);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 272) + 96))(v30, *(void *)(v0 + 264));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v29, v30, v33);
    os_log_type_t v36 = static os_log_type_t.default.getter();
    char v37 = *(NSObject **)(v35 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v32, v29, v33);
    log = v37;
    if (os_log_type_enabled(v37, v36))
    {
      char v38 = (uint8_t *)swift_slowAlloc();
      v101[0] = swift_slowAlloc();
      *(_DWORD *)char v38 = 136315138;
      uint64_t result = Parse.DirectInvocation.userData.getter();
      if (!result) {
        goto LABEL_39;
      }
      uint64_t v40 = result;
      if (*(void *)(result + 16)
        && (unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656469636E49, 0xEC00000065707954),
            (v42 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v40 + 56) + 32 * v41, v0 + 80);
      }
      else
      {
        *(_OWORD *)(v0 + 80) = 0u;
        *(_OWORD *)(v0 + 96) = 0u;
      }
      swift_bridgeObjectRelease();
      uint64_t v68 = *(void *)(v0 + 208);
      uint64_t v67 = *(void *)(v0 + 216);
      uint64_t v69 = *(void *)(v0 + 200);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      uint64_t v70 = String.init<A>(describing:)();
      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      v72(v67, v69);
      unint64_t v64 = v72;
      _os_log_impl(&dword_0, log, v36, "recieved directInvocation: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v34 = (void *)(v0 + 200);
    }
    else
    {
      unint64_t v64 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 208) + 8);
      v64(*(void *)(v0 + 216), *(void *)(v0 + 200));
    }
    uint64_t result = Parse.DirectInvocation.userData.getter();
    if (result)
    {
      uint64_t v73 = result;
      if (*(void *)(result + 16)
        && (unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656469636E49, 0xEC00000065707954),
            (v75 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v73 + 56) + 32 * v74, v0 + 48);
      }
      else
      {
        *(_OWORD *)(v0 + 48) = 0u;
        *(_OWORD *)(v0 + 64) = 0u;
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (*(void *)(v0 + 72))
      {
        outlined init with take of Any((_OWORD *)(v0 + 48), (_OWORD *)(v0 + 16));
        swift_dynamicCast();
        uint64_t v76 = *(void *)(v0 + 112);
        if ((unint64_t)(v76 - 1) >= 3)
        {
          uint64_t v89 = *(void *)(v0 + 224);
          uint64_t v90 = *(void *)(v0 + 200);
          id v91 = [objc_allocWithZone((Class)INSupportedTrafficIncidentType) initWithType:0 localizedDisplayString:0];
          static os_log_type_t.error.getter();
          os_log(_:dso:log:_:_:)();
          type metadata accessor for RuntimeError();
          uint64_t v92 = swift_allocObject();
          *(void *)(v92 + 16) = 0xD00000000000002FLL;
          *(void *)(v92 + 24) = 0x80000000000CA0A0;
          _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
          swift_allocError();
          *uint64_t v93 = v92;
          swift_willThrow();

          v64(v89, v90);
        }
        else
        {
          uint64_t v77 = *(void *)(v0 + 192);
          uint64_t v97 = *(void *)(v0 + 184);
          uint64_t v78 = v34;
          uint64_t v96 = *(void *)(v0 + 176);
          id v79 = [objc_allocWithZone((Class)INSupportedTrafficIncidentType) initWithType:v76 localizedDisplayString:0];
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber);
          uint64_t v80 = v64;
          id v81 = v79;
          Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
          uint64_t v83 = (void *)ParameterResolutionRecord.intent.getter();
          id v84 = [v83 userLocation];

          id v85 = [objc_allocWithZone((Class)INReportIncidentIntent) initWithIncidentType:v81 startTime:0 isClear:isa userLocation:v84 additionalDetails:0];
          uint64_t v86 = v80;

          uint64_t v102 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INSupportedTrafficIncidentType);
          v101[0] = (uint64_t)v81;
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INReportIncidentIntent);
          id v87 = v81;
          id v88 = v85;
          IntentPromptAnswer.init(answeredValue:updatedIntent:)();
          static DisambiguationResult.chosenItem(_:)();

          (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v77, v96);
          v86(*(void *)(v0 + 224), *v78);
        }
        goto LABEL_34;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }
  uint64_t v44 = *(void *)(v0 + 272);
  unint64_t v43 = *(void ***)(v0 + 280);
  uint64_t v45 = *(void *)(v0 + 264);
  if (v4 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void, void))(v44 + 96))(*(void *)(v0 + 280), *(void *)(v0 + 264));
    os_log_type_t v46 = *v43;
    type metadata accessor for LocationSearchIntent();
    swift_allocObject();
    uint64_t v11 = LocationSearchIntent.init(from:)(v46);
LABEL_5:
    uint64_t v18 = *(void *)(v0 + 168);
    id v19 = specialized static TrafficIncidentUtils.convertIncidentTypeFromNLIntent(locationSearchIntent:)(v11);
    if (v19)
    {
      unint64_t v20 = *(NSObject **)(v18 + 16);
      id v21 = v19;
      os_log_type_t v22 = static os_log_type_t.default.getter();
      uint64_t v95 = v21;
      if (os_log_type_enabled(v20, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        v101[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        id v24 = v21;
        id v25 = [v24 description];
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        logb = v20;
        unint64_t v28 = v27;

        *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        unint64_t v20 = logb;
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_0, logb, v22, "parseDisambiguationResult updated supportedIncidentType is %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
      os_log_type_t v49 = (void *)ParameterResolutionRecord.intent.getter();
      id v50 = [v49 userLocation];

      id v51 = [v50 location];
      os_log_t loga = (os_log_t)specialized static TrafficIncidentUtils.makeSiriKitIntentWithUserLocation(locationSearchIntent:userLocation:)(v11, (uint64_t)v51);

      os_log_type_t v52 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v20, v52))
      {
        char v53 = loga;
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        v101[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 136315138;
        os_log_type_t v55 = v53;
        unint64_t v56 = v20;
        id v57 = [v55 description];
        uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v60 = v59;

        *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_0, v56, v52, "parseDisambiguationResult - updated sirikit intent: %s", v54, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      uint64_t v61 = *(void *)(v0 + 184);
      uint64_t v102 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INSupportedTrafficIncidentType);
      v101[0] = (uint64_t)v95;
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INReportIncidentIntent);
      id v62 = v95;
      uint64_t v63 = loga;
      IntentPromptAnswer.init(answeredValue:updatedIntent:)();
      static DisambiguationResult.chosenItem(_:)();

      swift_release();
      (*(void (**)(void, void))(v61 + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
    }
    else
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for RuntimeError();
      uint64_t v47 = swift_allocObject();
      *(void *)(v47 + 16) = 0xD000000000000038;
      *(void *)(v47 + 24) = 0x80000000000CA0D0;
      _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
      swift_allocError();
      *uint64_t v48 = v47;
      swift_willThrow();
      swift_release();
    }
    goto LABEL_34;
  }
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for RuntimeError();
  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = 0xD00000000000002FLL;
  *(void *)(v65 + 24) = 0x80000000000C9FF0;
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
  swift_allocError();
  *char v66 = v65;
  swift_willThrow();
  (*(void (**)(void **, uint64_t))(v44 + 8))(v43, v45);
LABEL_34:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v94 = *(uint64_t (**)(void))(v0 + 8);
  return v94();
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[59] = a3;
  v4[60] = v3;
  v4[57] = a1;
  v4[58] = a2;
  v4[61] = type metadata accessor for TrafficIncident(0);
  v4[62] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PommesContext.Source();
  v4[63] = v5;
  v4[64] = *(void *)(v5 - 8);
  v4[65] = swift_task_alloc();
  v4[66] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v4[67] = swift_task_alloc();
  v4[68] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  v4[69] = v6;
  v4[70] = *(void *)(v6 - 8);
  v4[71] = swift_task_alloc();
  unsigned char v4[72] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ImageSize();
  v4[73] = v7;
  v4[74] = *(void *)(v7 - 8);
  v4[75] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Locale();
  v4[76] = v8;
  v4[77] = *(void *)(v8 - 8);
  v4[78] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ParameterIdentifier();
  v4[79] = v9;
  v4[80] = *(void *)(v9 - 8);
  v4[81] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INReportIncidentIntent>);
  v4[82] = v10;
  v4[83] = *(void *)(v10 - 8);
  v4[84] = swift_task_alloc();
  v4[85] = swift_task_alloc();
  v4[86] = swift_task_alloc();
  v4[87] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:), 0, 0);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  uint64_t v118 = v0;
  uint64_t v1 = *(void *)(v0 + 696);
  uint64_t v2 = *(void *)(v0 + 688);
  uint64_t v3 = *(void *)(v0 + 680);
  uint64_t v111 = *(void *)(v0 + 672);
  uint64_t v4 = *(void *)(v0 + 664);
  uint64_t v5 = *(void *)(v0 + 656);
  uint64_t v6 = *(void *)(v0 + 472);
  uint64_t v7 = *(void *)(v0 + 480);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  uint64_t v9 = *(NSObject **)(v7 + 16);
  *(void *)(v0 + 704) = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v10(v1, v6, v5);
  v10(v2, v6, v5);
  v10(v3, v6, v5);
  v10(v111, v6, v5);
  uint64_t v11 = v9;
  os_log_type_t v115 = v9;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v12 = *(void *)(v0 + 696);
    uint64_t v104 = *(void *)(v0 + 688);
    uint64_t v106 = *(void *)(v0 + 680);
    uint64_t v107 = *(void *)(v0 + 672);
    uint64_t v109 = *(void *)(v0 + 656);
    uint64_t v13 = *(void *)(v0 + 648);
    uint64_t v110 = *(void *)(v0 + 640);
    uint64_t v112 = *(void *)(v0 + 664);
    uint64_t v105 = *(void *)(v0 + 632);
    uint64_t v14 = swift_slowAlloc();
    uint64_t v116 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315906;
    uint64_t v15 = (void *)ParameterResolutionRecord.intent.getter();
    id v16 = [v15 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    *(void *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
    v20(v12, v109);
    id v21 = v20;
    unint64_t v108 = v20;
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v103 = v14 + 14;
    ParameterResolutionRecord.parameter.getter();
    uint64_t v22 = ParameterIdentifier.name.getter();
    unint64_t v24 = v23;
    id v25 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    v25(v13, v105);
    *(void *)(v0 + 432) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v21(v104, v109);
    *(_WORD *)(v14 + 22) = 2080;
    ParameterResolutionRecord.parameter.getter();
    uint64_t v26 = ParameterIdentifier.multicardinalIndex.getter();
    LOBYTE(v24) = v27;
    v25(v13, v105);
    uint64_t v11 = v115;
    *(void *)(v0 + 368) = v26;
    *(unsigned char *)(v0 + 376) = v24 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    uint64_t v28 = String.init<A>(describing:)();
    *(void *)(v0 + 440) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v108(v106, v109);
    *(_WORD *)(v14 + 32) = 2080;
    uint64_t v30 = (void *)ParameterResolutionRecord.result.getter();
    id v31 = [v30 description];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    *(void *)(v0 + 448) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v108(v107, v109);
    _os_log_impl(&dword_0, v115, v8, "inputs: %s, %s,\n%s, %s", (uint8_t *)v14, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v35 = *(void *)(v0 + 688);
    uint64_t v36 = *(void *)(v0 + 680);
    uint64_t v37 = *(void *)(v0 + 672);
    uint64_t v38 = *(void *)(v0 + 656);
    os_log_type_t v39 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 664) + 8);
    v39(*(void *)(v0 + 696), v38);
    v39(v35, v38);
    v39(v36, v38);
    v39(v37, v38);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INSupportedTrafficIncidentType>);
  unint64_t v40 = PaginatedItemContainer.items.getter();
  if (v40 >> 62) {
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v41 = *(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  if (!v41)
  {
    uint64_t v116 = 0;
    unint64_t v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(71);
    v49._uint64_t countAndFlagsBits = 0xD000000000000045;
    v49._object = (void *)0x80000000000CA1B0;
    String.append(_:)(v49);
    PaginatedItemContainer.items.getter();
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INSupportedTrafficIncidentType);
    uint64_t v50 = Array.description.getter();
    os_log_type_t v52 = v51;
    swift_bridgeObjectRelease();
    v53._uint64_t countAndFlagsBits = v50;
    v53._object = v52;
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    uint64_t v54 = v116;
    unint64_t v55 = v117;
    goto LABEL_10;
  }
  unint64_t v42 = PaginatedItemContainer.items.getter();
  swift_bridgeObjectRetain_n();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v116 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315138;
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INSupportedTrafficIncidentType);
    swift_bridgeObjectRetain();
    uint64_t v45 = Array.description.getter();
    unint64_t v47 = v46;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v115, v43, "list of supportedIncidentTypes for disambiguation: %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t result = swift_slowDealloc();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease_n();
  }
  uint64_t v116 = _swiftEmptyArrayStorage;
  if (v42 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v59) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v59 = *(void *)((char *)&dword_10 + (v42 & 0xFFFFFFFFFFFFFF8));
    if (v59)
    {
LABEL_16:
      if (v59 < 1)
      {
        __break(1u);
        return result;
      }
      for (uint64_t i = 0; i != v59; ++i)
      {
        if ((v42 & 0xC000000000000001) != 0) {
          id v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v61 = *(id *)(v42 + 8 * i + 32);
        }
        id v62 = v61;
        id v63 = objc_msgSend(v61, "localizedDisplayString", v103);
        if (v63)
        {
          unint64_t v64 = v63;
          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v67 = v66;
        }
        else
        {
          uint64_t v65 = 0;
          unint64_t v67 = 0xE000000000000000;
        }
        swift_bridgeObjectRelease();
        uint64_t v68 = HIBYTE(v67) & 0xF;
        if ((v67 & 0x2000000000000000) == 0) {
          uint64_t v68 = v65 & 0xFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v69 = v116;
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v69 = _swiftEmptyArrayStorage;
LABEL_34:
  unint64_t v113 = (void *)(v0 + 56);
  *(void *)(v0 + 712) = v69;
  uint64_t v70 = *(void *)(v0 + 624);
  uint64_t v71 = *(void *)(v0 + 616);
  uint64_t v72 = *(void *)(v0 + 608);
  swift_retain();
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  dispatch thunk of DeviceState.siriLocale.getter();
  specialized static DisambiguationListUtils.makeDisambiguationItems(incidentTypes:locale:)((unint64_t)v69);
  swift_release();
  uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
  *(void *)(v0 + 720) = v73;
  *(void *)(v0 + 728) = (v71 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v73(v70, v72);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  swift_bridgeObjectRetain_n();
  os_log_type_t v74 = static os_log_type_t.default.getter();
  char v75 = v115;
  if (os_log_type_enabled(v115, v74))
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    uint64_t v116 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v76 = 136315138;
    type metadata accessor for SiriKitDisambiguationItem();
    uint64_t v77 = v69;
    swift_bridgeObjectRetain();
    uint64_t v78 = Array.description.getter();
    unint64_t v80 = v79;
    swift_bridgeObjectRelease();
    uint64_t v81 = v78;
    uint64_t v69 = v77;
    *(void *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v80, (uint64_t *)&v116);
    char v75 = v115;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v115, v74, "makePromptForDisambiguation incidentType disambiguationItems are: %s", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v113, *(void *)(v0 + 80));
  char v82 = dispatch thunk of DeviceState.isCarPlay.getter();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v113);
  if (v82)
  {
    uint64_t v83 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)();
    swift_bridgeObjectRelease();
LABEL_44:
    uint64_t v114 = (uint64_t)v69;
    *(void *)(v0 + 736) = v83;
    id v90 = v83;
    os_log_type_t v91 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v75, v91))
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc();
      uint64_t v116 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v92 = 136315138;
      id v93 = v90;
      id v94 = [v93 description];
      uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v97 = v96;

      *(void *)(v0 + 400) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v97, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v115, v91, "disambiguation snippet is: %s", v92, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v98 = *(void *)(v0 + 480);
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), *(void *)(v0 + 200));
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v99 = *(void *)(v98 + 80);
    int v100 = (void *)swift_task_alloc();
    *(void *)(v0 + 744) = v100;
    *int v100 = v0;
    v100[1] = TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    uint64_t v101 = *(void *)(v0 + 624);
    uint64_t v102 = *(void *)(v0 + 576);
    return TypedDisambiguationItems.makeNLContextUpdate(locale:weightedPromptResponseTargets:)(v102, v101, v99, v114, 1);
  }
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), *(void *)(v0 + 120));
  char v84 = dispatch thunk of DeviceState.isPad.getter();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  if (v84)
  {
    uint64_t v85 = *(void *)(v0 + 600);
    uint64_t v86 = *(void *)(v0 + 592);
    uint64_t v87 = *(void *)(v0 + 584);
    (*(void (**)(uint64_t, void, uint64_t))(v86 + 104))(v85, enum case for ImageSize.default(_:), v87);
    uint64_t v88 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPad(disambiguationItems:deviceIsLocked:imageSize:)();
LABEL_43:
    uint64_t v83 = (void *)v88;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v87);
    goto LABEL_44;
  }
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), *(void *)(v0 + 160));
  char v89 = dispatch thunk of DeviceState.isPhone.getter();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
  if (v89)
  {
    uint64_t v85 = *(void *)(v0 + 600);
    uint64_t v86 = *(void *)(v0 + 592);
    uint64_t v87 = *(void *)(v0 + 584);
    (*(void (**)(uint64_t, void, uint64_t))(v86 + 104))(v85, enum case for ImageSize.default(_:), v87);
    uint64_t v88 = static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)();
    goto LABEL_43;
  }
  swift_release();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  unint64_t v55 = 0x80000000000C7CA0;
  uint64_t v54 = (void *)0xD000000000000012;
LABEL_10:
  type metadata accessor for RuntimeError();
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = v54;
  *(void *)(v56 + 24) = v55;
  _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
  swift_allocError();
  *id v57 = v56;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v58 = *(uint64_t (**)(void))(v0 + 8);
  return v58();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)v0 + 176;
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 720);
  uint64_t v3 = *(void *)(*(void *)v0 + 624);
  uint64_t v4 = *(void *)(*(void *)v0 + 608);
  swift_task_dealloc();
  swift_release();
  v2(v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return _swift_task_switch(TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:), 0, 0);
}

{
  uint64_t *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_0;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *loga;
  NSObject *logb;
  os_log_t log;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  id v31 = v0;
  if (*(unsigned char *)(v0[60] + 64) == 1)
  {
    uint64_t v1 = v0[88];
    uint64_t v2 = v0[68];
    (*(void (**)(uint64_t, void, uint64_t))(v0[64] + 104))(v0[65], enum case for PommesContext.Source.pluginDefined(_:), v0[63]);
    PommesContext.init(source:domain:listenAfterSpeaking:)();
    uint64_t v3 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
    NLContextUpdate.pommesContext.setter();
    uint64_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v1, v4))
    {
      os_log_t loga = v0[88];
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_beginAccess();
      NLContextUpdate.pommesContext.getter();
      swift_endAccess();
      uint64_t v6 = String.init<A>(describing:)();
      v0[49] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, loga, v4, "updated nl context with pommesContext: %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  os_log_type_t v8 = v0[88];
  uint64_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    logb = v0[88];
    uint64_t v10 = v0[72];
    uint64_t v11 = v0[71];
    uint64_t v12 = v0[70];
    uint64_t v13 = v0[69];
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v13);
    uint64_t v15 = String.init<A>(describing:)();
    v0[48] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, logb, v9, "makePromptForDisambiguation nlContextUpdate is: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  unint64_t v18 = v0[61];
  uint64_t v17 = v0[62];
  unint64_t v19 = v0[60];
  unint64_t v20 = enum case for BehaviorAfterSpeaking.listen(_:);
  id v21 = type metadata accessor for BehaviorAfterSpeaking();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v17, v20, v21);
  swift_storeEnumTagMultiPayload();
  v0[35] = v18;
  v0[36] = (uint64_t)&protocol witness table for TrafficIncident;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 32);
  outlined init with copy of TrafficIncident(v17, (uint64_t)boxed_opaque_existential_0);
  swift_beginAccess();
  log = (os_log_t)(*(void *)(*(void *)v19 + 168) + **(int **)(*(void *)v19 + 168));
  unint64_t v23 = (void *)swift_task_alloc();
  v0[94] = (uint64_t)v23;
  *unint64_t v23 = v0;
  v23[1] = TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  unint64_t v24 = v0[72];
  id v25 = v0[58];
  return ((uint64_t (*)(uint64_t *, uint64_t *, uint64_t, uint64_t))log)(v0 + 27, v0 + 32, v25, v24);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *v0 + 256;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return _swift_task_switch(TrafficIncidentNeedsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 736);
  if (*(void *)(v0 + 240))
  {
    uint64_t v2 = *(void *)(v0 + 576);
    uint64_t v3 = *(void *)(v0 + 560);
    uint64_t v4 = *(void *)(v0 + 552);
    uint64_t v5 = *(void *)(v0 + 456);
    outlined destroy of TrafficIncident(*(void *)(v0 + 496));

    outlined init with take of CATType((long long *)(v0 + 216), v5);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 576);
    os_log_type_t v8 = *(void *)(v0 + 560);
    uint64_t v9 = *(void *)(v0 + 552);
    uint64_t v10 = *(void *)(v0 + 496);
    outlined destroy of (label: String?, value: Any)?(v0 + 216, &demangling cache variable for type metadata for Output?);
    lazy protocol witness table accessor for type Errors and conformance Errors();
    swift_allocError();
    *(void *)uint64_t v11 = 0xD00000000000002BLL;
    *(void *)(v11 + 8) = 0x80000000000CA180;
    *(unsigned char *)(v11 + 16) = 0;
    swift_willThrow();

    outlined destroy of TrafficIncident(v10);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  _OWORD v5[11] = a3;
  v5[9] = a1;
  uint64_t v6 = type metadata accessor for ResponseType();
  v5[14] = v6;
  v5[15] = *(void *)(v6 - 8);
  v5[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v5[17] = swift_task_alloc();
  type metadata accessor for DialogPhase();
  v5[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v5[19] = v7;
  v5[20] = *(void *)(v7 - 8);
  v5[21] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:), 0, 0);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:)()
{
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = v1[9];
  v0[22] = v2;
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 80))(v3, v4);
  v0[23] = v5;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 152) + **(int **)(*(void *)v2 + 152));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[24] = v6;
  *uint64_t v6 = v0;
  v6[1] = TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:);
  uint64_t v7 = v0[10];
  return v9(v7, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  id v8;
  uint8_t *v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *updated;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *log;
  os_log_t loga;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v38 = v0;
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 176) + 136))(*(void *)(v0 + 80));
  if (v3)
  {
    outlined consume of Result<String, Error>(v1, v2, 1);
    unint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
  }
  else
  {
    unint64_t v33 = v1;
    unint64_t v34 = v2;
  }
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = *(NSObject **)(v4 + 16);
  uint64_t v7 = v5;
  log = v6;
  if (os_log_type_enabled(v6, v5))
  {
    os_log_type_t v8 = *(id *)(v0 + 200);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v10 = v8;
    uint64_t v11 = [v10 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_0, log, v7, "RF: dialogResult success %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v32 = *(void **)(v0 + 200);
  uint64_t v15 = *(void *)(v0 + 136);
  id v16 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 128);
  unint64_t v18 = *(void *)(v0 + 112);
  unint64_t v19 = *(void *)(v0 + 96);
  static DialogPhase.clarification.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.responseViewId.setter();
  unint64_t v20 = type metadata accessor for NLContextUpdate();
  id v21 = *(void *)(v20 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v15, v19, v20);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v15, 0, 1, v20);
  OutputGenerationManifest.nlContextUpdate.setter();
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v17, enum case for ResponseType.disambiguation(_:), v18);
  OutputGenerationManifest.responseType.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INSupportedTrafficIncidentType>);
  uint64_t v22 = PaginatedItemContainer.items.getter();
  updated = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo30INSupportedTrafficIncidentTypeCGG_21GeoFlowDelegatePlugin0jgH0Vs5NeverOTg508_sSiSo30fghi3C21jkl43Plugin0ebC0VIgygo_Si6offset_AB7elementtAEs5N263OIegnrzr_TR04_s21efg8Plugin42bc171NeedsDisambiguationStrategyC23disambiguateIncidentsRF6dialog14paginatedItems9nlContext07SiriKitB06Output_pSgAA0A8CATModel_p_AH22PaginatedItemContainerVySo011INSupportedeF4D45CGAH15NLContextUpdateVtYaFAA0aeF0VSi_AOtXEfU_Tf3nnnpf_nTf1cn_n(v22);
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  *(void *)(v0 + 216) = ResponseFactory.init()();
  *(void *)(v0 + 40) = &type metadata for GeoDataModels;
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type GeoDataModels and conformance GeoDataModels();
  unint64_t v24 = swift_allocObject();
  *(void *)(v0 + 16) = v24;
  *(void *)(v24 + 16) = v33;
  *(void *)(v24 + 24) = v34;
  *(void *)(v24 + 32) = updated;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *(void *)(v24 + 88) = 0;
  *(unsigned char *)(v24 + 96) = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  id v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_C0AD0;
  *(void *)(v25 + 32) = v32;
  uint64_t v37 = v25;
  specialized Array._endMutation()();
  uint64_t v26 = v37;
  *(void *)(v0 + 224) = v37;
  os_log_t loga = (os_log_t)((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)
                  + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:));
  char v27 = v32;
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v28;
  *uint64_t v28 = v0;
  v28[1] = TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:);
  unint64_t v29 = *(void *)(v0 + 168);
  uint64_t v30 = *(void *)(v0 + 72);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))loga)(v30, v0 + 16, v26, v29);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *v0 + 16;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return _swift_task_switch(TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 72);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  *(void *)(v1 + 32) = 0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v4 = TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:);
  }
  else
  {
    uint64_t v4 = TrafficIncidentNeedsDisambiguationStrategy.disambiguateIncidentsRF(dialog:paginatedItems:nlContext:);
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TrafficIncidentNeedsDisambiguationStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 24);
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter in conformance TrafficIncidentNeedsDisambiguationStrategy()
{
  return NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();

  return NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:)(a1, v5, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v2 + 136) + **(int **)(**(void **)v2 + 136));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  void *v5 = v3;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShareETAPromptForContactStrategy;
  return v7(a2);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v4 + 152)
                                                                   + **(int **)(**(void **)v4 + 152));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v12(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 160)
                                                          + **(int **)(**(void **)v3 + 160));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();

  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)(a1, v5, a3);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  *uint64_t v14 = v7;
  v14[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

uint64_t outlined init with copy of TrafficIncident(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrafficIncident(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TrafficIncident(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TrafficIncident(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_98684()
{
  outlined consume of GeoDataModels(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in TrafficIncidentNeedsDisambiguationStrategy(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_2(&lazy protocol witness table cache variable for type TrafficIncidentNeedsDisambiguationStrategy and conformance TrafficIncidentNeedsDisambiguationStrategy, a2, (void (*)(uint64_t))type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy);
}

uint64_t _s21GeoFlowDelegatePlugin20LocationSearchIntentCAC12SiriOntology0G15NodeTraversableAAWlTm_2(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type BasicDisambiguationItemContainer<INSupportedTrafficIncidentType> and conformance BasicDisambiguationItemContainer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type BasicDisambiguationItemContainer<INSupportedTrafficIncidentType> and conformance BasicDisambiguationItemContainer<A>;
  if (!lazy protocol witness table cache variable for type BasicDisambiguationItemContainer<INSupportedTrafficIncidentType> and conformance BasicDisambiguationItemContainer<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<INSupportedTrafficIncidentType>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicDisambiguationItemContainer<INSupportedTrafficIncidentType> and conformance BasicDisambiguationItemContainer<A>);
  }
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.geoClientComponent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  uint64_t v24 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.clientDrivenExperience.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = Apple_Parsec_Siri_V2alpha_ClientDrivenExperience.components.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
  uint64_t v18 = *(void *)(v17 - 8);
  if (v16)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v14, v15+ ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80)), v17);
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v14, v19, 1, v17);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17) == 1)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_ClientComponent?((uint64_t)v14);
    uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v25, 1, 1, v20);
  }
  else
  {
    Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v17);
    uint64_t v22 = v25;
    Apple_Parsec_Siri_V2alpha_DomainClientComponent.geoClientComponent.getter();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v1);
    uint64_t v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
  }
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_ClientComponent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized ContactResolutionFlow.init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v24 = a4;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v8 = type metadata accessor for RecommenderType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SearchSuggestedContacts();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ContactResolverDomain();
  __chkstk_darwin(v16 - 8);
  uint64_t v17 = type metadata accessor for Locale();
  __chkstk_darwin(v17 - 8);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v18 = OS_os_log.init(subsystem:category:)();
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 16) = v18;
  *(unsigned char *)(v6 + 40) = 1;
  static Locale.current.getter();
  static ContactResolverDomain.all.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for SearchSuggestedContacts.ifOnlyMatchIsSuggested(_:), v12);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for RecommenderType.mlRecommender(_:), v8);
  ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)();
  uint64_t v19 = v7 + *(void *)(*(void *)v7 + 168);
  uint64_t v20 = type metadata accessor for SiriKitContactResolver();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, v24, v20);
  *(void *)(v7 + *(void *)(*(void *)v7 + 136)) = v25;
  *(void *)(v7 + *(void *)(*(void *)v7 + 144)) = v26;
  uint64_t v21 = v7 + *(void *)(*(void *)v7 + 128);
  uint64_t v22 = type metadata accessor for OccupantIntentNode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v21, v27, v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactResolutionFlow<ShareETAContactDisambiguationStrategy, ShareETAContactConfirmationStrategy>.State);
  swift_storeEnumTagMultiPayload();
  outlined init with take of CATType(v28, v7 + *(void *)(*(void *)v7 + 152));
  outlined init with take of HandleFilterProtocolAsync?(v29, v7 + *(void *)(*(void *)v7 + 160));
  return v7;
}

uint64_t ShareETABaseFlow.__allocating_init(with:stopSharing:flowHelper:checkNavigation:)(uint64_t a1, char a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  ShareETABaseFlow.init(with:stopSharing:flowHelper:checkNavigation:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t one-time initialization function for kShareETAAuthenticationPolicy()
{
  uint64_t v0 = type metadata accessor for UnlockDevicePolicy();
  __swift_allocate_value_buffer(v0, kShareETAAuthenticationPolicy);
  __swift_project_value_buffer(v0, (uint64_t)kShareETAAuthenticationPolicy);
  return static UnlockDevicePolicy.default.getter();
}

uint64_t ShareETABaseFlow.flowState.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of ShareETABaseFlow.State(v1, *(unsigned char *)(v0 + 40));
  return v1;
}

uint64_t ShareETABaseFlow.flowState.setter(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = a1;
  char v6 = *(unsigned char *)(v2 + 40);
  *(unsigned char *)(v2 + 40) = a2;
  return outlined consume of ShareETABaseFlow.State(v5, v6);
}

uint64_t ShareETABaseFlow.stopSharing.getter()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t ShareETABaseFlow.directInvocation.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t ShareETABaseFlow.directInvocation.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 88) = a1;
  return result;
}

uint64_t ShareETABaseFlow.checkNavigation.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 96);
}

uint64_t ShareETABaseFlow.checkNavigation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return result;
}

uint64_t ShareETABaseFlow.isPOMMES.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t ShareETABaseFlow.isPOMMES.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 112) = a1;
  return result;
}

uint64_t ShareETABaseFlow.isUSO.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 113);
}

uint64_t ShareETABaseFlow.isUSO.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 113) = a1;
  return result;
}

uint64_t (*ShareETABaseFlow.isUSO.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t ShareETABaseFlow.init(with:stopSharing:flowHelper:checkNavigation:)(uint64_t a1, char a2, long long *a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v10 = (void *)OS_os_log.init(subsystem:category:)();
  *(void *)(v5 + 16) = v10;
  type metadata accessor for CATService();
  uint64_t v11 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v11 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v11 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v11 + 16) = 0;
  *(void *)(v5 + 24) = v11;
  *(unsigned char *)(v5 + 88) = 0;
  *(_WORD *)(v5 + 112) = 0;
  static os_log_type_t.info.getter();
  id v13 = v10;
  os_log(_:dso:log:_:_:)();

  *(void *)(v5 + 32) = a1;
  *(unsigned char *)(v5 + 40) = 0;
  *(unsigned char *)(v5 + 41) = a2;
  outlined init with take of CATType(a3, v5 + 48);
  *(void *)(v5 + 96) = a4;
  *(void *)(v5 + 104) = a5;
  return v5;
}

uint64_t outlined copy of ShareETABaseFlow.State(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
      uint64_t result = swift_retain();
      break;
    case 2:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 3:
      uint64_t result = swift_errorRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of ShareETABaseFlow.State(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
      uint64_t result = swift_release();
      break;
    case 2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t result = swift_errorRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ShareETABaseFlow.onInput(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v55 = *(void *)(v2 - 8);
  uint64_t v56 = v2;
  __chkstk_darwin(v2);
  uint64_t v54 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Parse();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v57 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v58 = (id *)((char *)&v53 - v9);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v53 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v15 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = a1;
  Input.parse.getter();
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t))(v5 + 88);
  if (v19(v14, v4) == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v14, v4);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000002CLL && v20 == 0x80000000000C6780)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      unint64_t v33 = v60;
      (*(void (**)(uint64_t))(*v60 + 208))(1);
      unint64_t v34 = v33[2];
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl(&dword_0, v34, v35, "ShareETABaseFlow onInput returns true for directInvocation parse", v36, 2u);
        swift_slowDealloc();
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return 1;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v32) {
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  uint64_t v21 = v59;
  Input.parse.getter();
  unsigned int v22 = v19(v12, v4);
  int v23 = enum case for Parse.NLv3IntentOnly(_:);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v12, v4);
  if (v22 == v23)
  {
    uint64_t v25 = v60[2];
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v25, v26)) {
      return 1;
    }
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    uint64_t v28 = "ShareETABaseFlow onInput returns true for NLv3IntentOnly parse";
    goto LABEL_12;
  }
  uint64_t v29 = v58;
  Input.parse.getter();
  if (v19((char *)v29, v4) == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v5 + 96))(v29, v4);

    uint64_t v30 = v60;
    uint64_t v31 = 1;
    (*(void (**)(uint64_t))(*v60 + 256))(1);
    uint64_t v25 = v30[2];
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      uint64_t v28 = "ShareETABaseFlow onInput returns true for pommesResponse parse";
LABEL_12:
      _os_log_impl(&dword_0, v25, v26, v28, v27, 2u);
      swift_slowDealloc();
      return 1;
    }
  }
  else
  {
    v24((char *)v29, v4);
    uint64_t v38 = v57;
    Input.parse.getter();
    unsigned int v39 = v19(v38, v4);
    int v40 = enum case for Parse.uso(_:);
    v24(v38, v4);
    uint64_t v41 = v60;
    unint64_t v42 = v60[2];
    if (v39 == v40)
    {
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_0, v42, v43, "ShareETABaseFlow onInput returns true for USO parse", v44, 2u);
        swift_slowDealloc();
      }
      uint64_t v31 = 1;
      (*(void (**)(uint64_t))(*v41 + 280))(1);
    }
    else
    {
      uint64_t v45 = v54;
      uint64_t v46 = v55;
      uint64_t v47 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v21, v56);
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v48))
      {
        Swift::String v49 = v45;
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v62 = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 136315138;
        uint64_t v51 = Input.description.getter();
        uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v47);
        _os_log_impl(&dword_0, v42, v48, "SiriGeo currently doesn't support parse type: %s", v50, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
      }
      return 0;
    }
  }
  return v31;
}

uint64_t ShareETABaseFlow.executeState()(uint64_t a1)
{
  v2[205] = v1;
  v2[204] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INShareETAIntent, INShareETAIntentResponse>?);
  v2[206] = swift_task_alloc();
  type metadata accessor for Locale();
  v2[207] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStopShareETAIntent, INStopShareETAIntentResponse>?);
  v2[208] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[209] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[210] = v4;
  v2[211] = *(void *)(v4 + 64);
  v2[212] = swift_task_alloc();
  v2[213] = swift_task_alloc();
  v2[214] = swift_task_alloc();
  v2[215] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[216] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ActivityType();
  v2[217] = v5;
  v2[218] = *(void *)(v5 - 8);
  v2[219] = swift_task_alloc();
  v2[220] = swift_task_alloc();
  v2[221] = swift_task_alloc();
  v2[222] = type metadata accessor for ShareETA(0);
  v2[223] = swift_task_alloc();
  type metadata accessor for SiriKitContactResolver();
  v2[224] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OccupantIntentNode?);
  v2[225] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OccupantIntentNode();
  v2[226] = v6;
  v2[227] = *(void *)(v6 - 8);
  v2[228] = swift_task_alloc();
  v2[229] = swift_task_alloc();
  return _swift_task_switch(ShareETABaseFlow.executeState(), 0, 0);
}

uint64_t ShareETABaseFlow.executeState()()
{
  void (*v83)(long long *__return_ptr, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  uint64_t (*v89)(void);
  id v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  void **v94;
  void *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  os_log_type_t v101;
  uint8_t *v102;
  NSObject *v103;
  id v104;
  id v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  unsigned char *v119;
  unsigned char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(void);
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  void *v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char v149;
  void *v150;
  void (*v151)(long long *__return_ptr);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  void *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t (*v177)(uint64_t, uint64_t *, uint64_t);
  id v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  long long *v191;
  uint64_t v192;
  void *v193;
  _OWORD *v194;
  uint64_t v195;
  uint64_t *v196;
  id v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t (*v201)(void);
  long long *v202;
  uint64_t v203;
  uint64_t (*v204)(uint64_t);
  uint64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t (*v218)(uint64_t, uint64_t *, uint64_t);
  void *v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t (*v223)(uint64_t, uint64_t *, uint64_t);
  uint64_t v224;
  long long v225[3];
  void *v226;
  uint64_t v227;

  char v226 = v0;
  id v194 = v0 + 2;
  os_log_type_t v195 = (uint64_t)(v0 + 24);
  os_log_type_t v187 = v0 + 46;
  uint64_t v1 = v0 + 51;
  uint64_t v211 = (uint64_t)(v0 + 56);
  uint64_t v208 = (uint64_t)(v0 + 61);
  uint64_t v219 = v0 + 66;
  uint64_t v196 = v0 + 71;
  unint64_t v190 = v0 + 76;
  unint64_t v188 = v0 + 81;
  uint64_t v213 = (uint64_t)(v0 + 91);
  uint64_t v191 = (long long *)(v0 + 131);
  uint64_t v192 = (uint64_t)(v0 + 136);
  os_log_type_t v193 = v0 + 126;
  uint64_t v189 = v0 + 171;
  unint64_t v198 = (uint64_t)(v0 + 106);
  uint64_t v202 = (long long *)(v0 + 116);
  uint64_t v2 = (void *)v0[205];
  static os_log_type_t.info.getter();
  uint64_t v3 = v2[2];
  uint64_t v4 = os_log(_:dso:log:_:_:)();
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*v2 + 152))(v4);
  v0[230] = v5;
  unint64_t v6 = v5;
  switch(v7)
  {
    case 1:
      static os_log_type_t.info.getter();
      os_log(_:dso:log:_:_:)();
      os_log_type_t v11 = static os_log_type_t.info.getter();
      uint64_t v12 = os_log_type_enabled(v3, v11);
      if (v12)
      {
        unint64_t v13 = v6;
        uint64_t v14 = v0[205];
        swift_retain();
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 67109120;
        *((_DWORD *)v0 + 501) = (*(uint64_t (**)(void))(*(void *)v14 + 248))() & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        unint64_t v6 = v13;
        swift_release();
        _os_log_impl(&dword_0, v3, v11, "Is POMMES ShareETA request? : %{BOOL}d", v15, 8u);
        uint64_t v12 = swift_slowDealloc();
      }
      uint64_t v16 = v0;
      uint64_t v17 = v0[227];
      uint64_t v18 = v16[226];
      uint64_t v19 = v16[225];
      uint64_t v215 = v6;
      (*(void (**)(uint64_t))(*(void *)v6 + 208))(v12);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v18) == 1)
      {
        uint64_t v20 = (uint64_t *)v16[205];
        uint64_t v21 = outlined destroy of (label: String?, value: Any)?(v16[225], &demangling cache variable for type metadata for OccupantIntentNode?);
        uint64_t v22 = *v20;
        uint64_t v0 = v16;
        if (*((unsigned char *)v20 + 41) == 1)
        {
          (*(void (**)(void, uint64_t))(v22 + 160))(0, 2);
          static ExecuteResponse.ongoing(requireInput:)();
          outlined consume of ShareETABaseFlow.State(v215, 1);
          goto LABEL_48;
        }
        id v57 = (char *)v16[223];
        uint64_t v58 = v16[205];
        uint64_t v214 = (*(uint64_t (**)(uint64_t))(v22 + 248))(v21);
        char v59 = (*(uint64_t (**)(void))(*(void *)v58 + 200))();
        unint64_t v60 = *(void (**)(void))(*(void *)v58 + 176);
        v60();
        outlined init with copy of DeviceState(v192, (uint64_t)v191);
        uint64_t v61 = &v57[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (directInvocation: Bool, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                          + 48)];
        v59 &= 1u;
        *id v57 = v59;
        uint64_t v62 = enum case for BehaviorAfterSpeaking.listen(_:);
        uint64_t v63 = type metadata accessor for BehaviorAfterSpeaking();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 104))(v61, v62, v63);
        swift_storeEnumTagMultiPayload();
        type metadata accessor for ShareETAPromptForContactStrategy();
        swift_allocObject();
        ShareETAPromptForContactStrategy.init(isPommes:directInvocation:flowHelper:catModel:)(v214 & 1, v59, v191, (uint64_t)v57);
        __swift_destroy_boxed_opaque_existential_0Tm(v192);
        uint64_t v64 = swift_retain();
        ((void (*)(uint64_t))v60)(v64);
        uint64_t v0 = v16;
        uint64_t v65 = v16[129];
        uint64_t v66 = v16[130];
        __swift_project_boxed_opaque_existential_1(v193, v65);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v66 + 104))(v225, v65, v66);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v193);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForValueFlowAsync<LocationSearchIntent>);
        swift_allocObject();
        lazy protocol witness table accessor for type ShareETAFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(&lazy protocol witness table cache variable for type ShareETAPromptForContactStrategy and conformance ShareETAPromptForContactStrategy, 255, (void (*)(uint64_t))type metadata accessor for ShareETAPromptForContactStrategy);
        v16[198] = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)();
        lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type PromptForValueFlowAsync<LocationSearchIntent> and conformance PromptForValueFlowAsync<A>, &demangling cache variable for type metadata for PromptForValueFlowAsync<LocationSearchIntent>);
        swift_retain();
        static ExecuteResponse.ongoing<A>(next:childCompletion:)();
        outlined consume of ShareETABaseFlow.State(v215, 1);
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v30 = v16[205];
        uint64_t v31 = (*(uint64_t (**)(void, void, void))(v16[227] + 32))(v16[229], v16[225], v16[226]);
        if (*(unsigned char *)(v30 + 41))
        {
          id v203 = 0;
          uint64_t v205 = 0;
        }
        else
        {
          uint64_t v67 = v16[205];
          uint64_t v204 = *(uint64_t (**)(uint64_t))(*(void *)v67 + 248);
          uint64_t v206 = v204(v31);
          uint64_t v201 = *(uint64_t (**)(void))(*(void *)v67 + 272);
          uint64_t v199 = v201();
          uint64_t v197 = OccupantIntentNode.asINPerson.getter();
          static Device.current.getter();
          uint64_t v68 = type metadata accessor for GeoRCHFlowFactoryImpl();
          uint64_t v69 = swift_allocObject();
          v16[32] = v68;
          v16[33] = &protocol witness table for GeoRCHFlowFactoryImpl;
          v16[29] = v69;
          v16[34] = static DialogHelper.globals.getter();
          static AceService.currentAsync.getter();
          static OutputPublisherFactory.makeOutputPublisherAsync()();
          type metadata accessor for CATService();
          uint64_t v70 = swift_allocObject();
          uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          uint64_t v72 = self;
          *(void *)(v70 + 24) = [v72 bundleForClass:ObjCClassFromMetadata];
          type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
          *(void *)(v70 + 32) = OS_os_log.init(subsystem:category:)();
          *(unsigned char *)(v70 + 16) = 0;
          v16[45] = v70;
          uint64_t v73 = swift_allocObject();
          *(void *)(v73 + 24) = [v72 bundleForClass:ObjCClassFromMetadata];
          *(void *)(v73 + 32) = OS_os_log.init(subsystem:category:)();
          *(unsigned char *)(v73 + 16) = 1;
          type metadata accessor for ShareETAContactDisambiguationStrategy();
          uint64_t v74 = swift_allocObject();
          outlined init with copy of FlowHelperImpl(v195, (uint64_t)v194);
          uint64_t v205 = specialized ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)(v206 & 1, v199 & 1, (uint64_t)v197, v194, v73, v74);
          uint64_t v75 = outlined destroy of FlowHelperImpl(v195);
          LOBYTE(v73) = v204(v75);
          LOBYTE(v74) = v201();
          type metadata accessor for ShareETAContactConfirmationStrategy();
          swift_allocObject();
          id v203 = ShareETAContactConfirmationStrategy.init(isPOMMES:isUSO:)(v73 & 1, v74 & 1);
        }
        uint64_t v221 = v16[229];
        uint64_t v76 = v16[228];
        uint64_t v0 = v16;
        uint64_t v77 = v16[227];
        uint64_t v78 = v16[226];
        uint64_t v79 = v16[205];
        char v200 = v16[224];
        *(_OWORD *)uint64_t v213 = 0u;
        *(_OWORD *)(v213 + 16) = 0u;
        *(void *)(v213 + 32) = 0;
        type metadata accessor for ContactService();
        swift_allocObject();
        uint64_t v80 = ContactService.init()();
        uint64_t v81 = type metadata accessor for ContactHandleResolver();
        uint64_t v82 = swift_allocObject();
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        *(void *)(v82 + 16) = OS_os_log.init(subsystem:category:)();
        *(void *)(v82 + 24) = v80;
        v0[64] = v81;
        v0[65] = &protocol witness table for ContactHandleResolver;
        v0[61] = v82;
        outlined destroy of (label: String?, value: Any)?(v213, &demangling cache variable for type metadata for HandleFilterProtocolAsync?);
        outlined init with take of HandleFilterProtocolAsync?(v208, v213);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v76, v221, v78);
        uint64_t v83 = *(void (**)(long long *__return_ptr, uint64_t))(*(void *)v79 + 176);
        swift_retain();
        char v84 = swift_retain();
        v83(v225, v84);
        outlined init with copy of HandleFilterProtocolAsync?(v213, v211);
        SiriKitContactResolver.init()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactResolutionFlow<ShareETAContactDisambiguationStrategy, ShareETAContactConfirmationStrategy>);
        swift_allocObject();
        v0[203] = specialized ContactResolutionFlow.init(occupantNode:disambiguationStrategy:confirmationStrategy:contactResolver:flowHelper:handleResolver:)(v76, v205, v203, v200, v225, v211);
        lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type ContactResolutionFlow<ShareETAContactDisambiguationStrategy, ShareETAContactConfirmationStrategy> and conformance ContactResolutionFlow<A, B>, &demangling cache variable for type metadata for ContactResolutionFlow<ShareETAContactDisambiguationStrategy, ShareETAContactConfirmationStrategy>);
        swift_retain();
        static ExecuteResponse.ongoing<A>(next:childCompletion:)();
        swift_release();
        outlined consume of ShareETABaseFlow.State(v215, 1);
        swift_release();
        swift_release();
        outlined destroy of (label: String?, value: Any)?(v213, &demangling cache variable for type metadata for HandleFilterProtocolAsync?);
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v221, v78);
      }
      goto LABEL_47;
    case 2:
      swift_bridgeObjectRetain_n();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(void *)&v225[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136315138;
        v0[197] = v6;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
        uint64_t v25 = String.init<A>(describing:)();
        v0[196] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of ShareETABaseFlow.State(v6, 2);
        outlined consume of ShareETABaseFlow.State(v6, 2);
        _os_log_impl(&dword_0, v3, v23, "ShareETABaseFlow contactResolved %s", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        outlined consume of ShareETABaseFlow.State(v6, 2);
        outlined consume of ShareETABaseFlow.State(v6, 2);
      }
      if (*(unsigned char *)(v0[205] + 41) == 1)
      {
        unint64_t v32 = specialized ShareETABaseFlow.makeSkeletonINPerson(inpersons:)(v6);
        outlined consume of ShareETABaseFlow.State(v6, 2);
        if (v32)
        {
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
          v33.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        else
        {
          v33.super.Class isa = 0;
        }
        uint64_t v85 = v0[208];
        uint64_t v86 = v0[205];
        uint64_t v87 = [objc_allocWithZone((Class)INStopShareETAIntent) initWithRecipients:v33.super.isa];

        uint64_t v88 = v0;
        char v89 = *(uint64_t (**)(void))(*(void *)v86 + 248);
        id v90 = v87;
        os_log_type_t v91 = v89();
        type metadata accessor for StopShareETAFlowDelegate(0);
        uint64_t v92 = swift_allocObject();
        id v93 = direct field offset for StopShareETAFlowDelegate.logObject;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        swift_retain();
        *(void *)(v92 + v93) = OS_os_log.init(subsystem:category:)();
        id v94 = (void **)(v92 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent);
        *(void *)(v92 + direct field offset for StopShareETAFlowDelegate.stopShareETAIntent) = 0;
        swift_beginAccess();
        uint64_t v95 = *v94;
        *id v94 = v90;
        unint64_t v96 = v90;

        static Device.current.getter();
        outlined init with take of CATType(v202, v92 + direct field offset for StopShareETAFlowDelegate.currentDeviceState);
        *(unsigned char *)(v92 + direct field offset for StopShareETAFlowDelegate.isPOMMES) = v91 & 1;
        swift_release();
        BaseRCHFlowDelegate.init()();

        type metadata accessor for App();
        swift_allocObject();
        uint64_t v0 = v88;
        App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
        unint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStopShareETAIntent, INStopShareETAIntentResponse>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v85, 1, 1, v97);
        lazy protocol witness table accessor for type ShareETAFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(&lazy protocol witness table cache variable for type StopShareETAFlowDelegate and conformance BaseRCHFlowDelegate<A, B>, 255, (void (*)(uint64_t))type metadata accessor for StopShareETAFlowDelegate);
        uint64_t v98 = RCHFlowDelegate.makeRCHFlow(app:intent:producers:)();
        swift_release();
        swift_release();
        outlined destroy of (label: String?, value: Any)?(v85, &demangling cache variable for type metadata for RCHChildFlowProducers<INStopShareETAIntent, INStopShareETAIntentResponse>?);
        v88[199] = v98;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlow<RCHDelegateToRCHFlowStrategyAdapter<StopShareETAFlowDelegate>>);
        lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type RCHFlow<RCHDelegateToRCHFlowStrategyAdapter<StopShareETAFlowDelegate>> and conformance RCHFlow<A>, &demangling cache variable for type metadata for RCHFlow<RCHDelegateToRCHFlowStrategyAdapter<StopShareETAFlowDelegate>>);
        static ExecuteResponse.complete<A>(next:childCompletion:)();

        swift_release();
        goto LABEL_47;
      }
      unint64_t v35 = v6;
      if (!v6
        || (outlined copy of ShareETABaseFlow.State(v6, 2),
            specialized ShareETABaseFlow.missingContactInformation(persons:)(v6),
            char v37 = v36,
            outlined consume of ShareETABaseFlow.State(v35, 2),
            (v37 & 1) == 0))
      {
        unint64_t v55 = specialized ShareETABaseFlow.makeSkeletonINPerson(inpersons:)(v35);
        outlined consume of ShareETABaseFlow.State(v35, 2);
        if (v55)
        {
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
          v56.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        else
        {
          v56.super.Class isa = 0;
        }
        uint64_t v99 = [objc_allocWithZone((Class)INShareETAIntent) initWithRecipients:v56.super.isa];

        int v100 = v99;
        uint64_t v101 = static os_log_type_t.default.getter();
        char v222 = v100;
        if (os_log_type_enabled(v3, v101))
        {
          uint64_t v102 = (uint8_t *)swift_slowAlloc();
          *(void *)&v225[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v102 = 136315138;
          uint64_t v103 = v3;
          uint64_t v104 = v100;
          uint64_t v105 = [v104 description];
          uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v108 = v107;

          v0[202] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v108, (uint64_t *)v225);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          uint64_t v3 = v103;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v103, v101, "Converted Sirikit Intent %s", v102, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v109 = static os_log_type_t.info.getter();
        uint64_t v110 = os_log_type_enabled(v3, v109);
        if (v110)
        {
          uint64_t v111 = v0[205];
          swift_retain();
          uint64_t v112 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v112 = 67109120;
          *((_DWORD *)v0 + 500) = (*(uint64_t (**)(void))(*(void *)v111 + 248))() & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_0, v3, v109, "is POMMES ShareETA .complete? %{BOOL}d", v112, 8u);
          uint64_t v110 = swift_slowDealloc();
        }
        unint64_t v113 = v0[206];
        uint64_t v114 = v0[205];
        os_log_type_t v115 = (*(uint64_t (**)(uint64_t))(*(void *)v114 + 248))(v110);
        uint64_t v116 = (*(uint64_t (**)(void))(*(void *)v114 + 272))();
        static Device.current.getter();
        type metadata accessor for ShareETAFlowDelegate(0);
        unint64_t v117 = swift_allocObject();
        uint64_t v118 = direct field offset for ShareETAFlowDelegate.logObject;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        swift_retain();
        *(void *)(v117 + v118) = OS_os_log.init(subsystem:category:)();
        uint64_t v119 = (unsigned char *)(v117 + direct field offset for ShareETAFlowDelegate.isPOMMES);
        *(unsigned char *)(v117 + direct field offset for ShareETAFlowDelegate.isPOMMES) = 0;
        uint64_t v120 = (unsigned char *)(v117 + direct field offset for ShareETAFlowDelegate.isUSO);
        *(unsigned char *)(v117 + direct field offset for ShareETAFlowDelegate.isUSO) = 0;
        *(void *)(v117 + direct field offset for ShareETAFlowDelegate.disambiguationState) = 0;
        outlined init with copy of DeviceState(v198, v117 + direct field offset for ShareETAFlowDelegate.currentDeviceState);
        swift_beginAccess();
        *uint64_t v119 = v115 & 1;
        swift_beginAccess();
        *uint64_t v120 = v116 & 1;
        swift_release();
        BaseRCHFlowDelegate.init()();
        __swift_destroy_boxed_opaque_existential_0Tm(v198);
        type metadata accessor for App();
        swift_allocObject();
        App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
        uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INShareETAIntent, INShareETAIntentResponse>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v113, 1, 1, v121);
        lazy protocol witness table accessor for type ShareETAFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(&lazy protocol witness table cache variable for type ShareETAFlowDelegate and conformance BaseRCHFlowDelegate<A, B>, 255, (void (*)(uint64_t))type metadata accessor for ShareETAFlowDelegate);
        uint64_t v122 = RCHFlowDelegate.makeRCHFlow(app:intent:producers:)();
        swift_release();
        swift_release();
        outlined destroy of (label: String?, value: Any)?(v113, &demangling cache variable for type metadata for RCHChildFlowProducers<INShareETAIntent, INShareETAIntentResponse>?);
        v0[189] = v122;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlow<RCHDelegateToRCHFlowStrategyAdapter<ShareETAFlowDelegate>>);
        lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type RCHFlow<RCHDelegateToRCHFlowStrategyAdapter<ShareETAFlowDelegate>> and conformance RCHFlow<A>, &demangling cache variable for type metadata for RCHFlow<RCHDelegateToRCHFlowStrategyAdapter<ShareETAFlowDelegate>>);
        static ExecuteResponse.complete<A>(next:childCompletion:)();

        swift_release();
LABEL_47:
        swift_release();
LABEL_48:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v123 = (uint64_t (*)(void))v0[1];
        return v123();
      }
      uint64_t v216 = v35;
      uint64_t v38 = v0[219];
      unsigned int v39 = v0;
      uint64_t v40 = v0[218];
      uint64_t v41 = v39[217];
      static SiriKitEventSender.current.getter();
      __swift_project_boxed_opaque_existential_1(v219, v39[69]);
      (*(void (**)(uint64_t, void, uint64_t))(v40 + 104))(v38, enum case for ActivityType.failed(_:), v41);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
      id v42 = [(id)swift_getObjCClassFromMetadata() typeName];
      if (!v42) {
        goto LABEL_68;
      }
      os_log_type_t v43 = v42;
      uint64_t v212 = v39[222];
      uint64_t v44 = v39[216];
      BOOL v209 = v39[205];
      type metadata accessor for SiriKitEvent();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v45 = enum case for SiriKitReliabilityCodes.contactNotFoundFromConverter(_:);
      uint64_t v46 = type metadata accessor for SiriKitReliabilityCodes();
      uint64_t v47 = *(void *)(v46 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 104))(v44, v45, v46);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
      dispatch thunk of SiriKitEventSending.send(_:)();
      swift_release();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v219);
      uint64_t v48 = *(void *)(v209 + 24);
      v39[74] = v212;
      Swift::String v49 = v39;
      v39[75] = (uint64_t)&protocol witness table for ShareETA;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v196);
      uint64_t v220 = v48;
      if ((v216 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((char *)&dword_10 + (v216 & 0xFFFFFFFFFFFFFF8)))
        {
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          JUMPOUT(0x9C988);
        }
        id v51 = *(id *)(v216 + 32);
      }
      type metadata accessor for DialogPerson();
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v190, v49[79]);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v190);
      uint64_t v52 = DialogPerson.__allocating_init(person:locale:useConversationalName:)();
      if (v52)
      {
        uint64_t v53 = v52;
        outlined consume of ShareETABaseFlow.State(v216, 2);
        uint64_t v54 = v49;
      }
      else
      {
        if ((v216 & 0xC000000000000001) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          BOOL v178 = *(id *)(v216 + 32);
        }
        uint64_t v54 = v49;
        outlined consume of ShareETABaseFlow.State(v216, 2);
        static Device.current.getter();
        __swift_project_boxed_opaque_existential_1(v188, v49[84]);
        dispatch thunk of DeviceState.siriLocale.getter();
        uint64_t v53 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v188);
      }
      unint64_t v179 = v54[205];
      uint64_t *boxed_opaque_existential_0 = v53;
      uint64_t v180 = swift_storeEnumTagMultiPayload();
      unint64_t v181 = *(void (**)(uint64_t))(*(void *)v179 + 176);
      char v182 = *(void *)v179 + 176;
      v54[245] = (uint64_t)v181;
      v54[246] = v182 & 0xFFFFFFFFFFFFLL | 0x55F0000000000000;
      v181(v180);
      uint64_t v183 = v54[89];
      uint64_t v184 = v54[90];
      __swift_project_boxed_opaque_existential_1(v54 + 86, v183);
      uint64_t v185 = (*(uint64_t (**)(uint64_t, uint64_t))(v184 + 80))(v183, v184);
      v54[247] = v185;
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v54 + 86));
      uint64_t v218 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v220 + 112)
                                                                 + **(int **)(*(void *)v220 + 112));
      uint64_t v186 = (void *)swift_task_alloc();
      v54[248] = (uint64_t)v186;
      *uint64_t v186 = v54;
      v186[1] = ShareETABaseFlow.executeState();
      uint64_t v143 = v54[212];
      uint64_t v144 = v196;
      uint64_t v145 = v185;
      os_log_type_t v177 = v218;
LABEL_63:
      return v177(v143, v144, v145);
    case 3:
      v0[195] = v5;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      if ((swift_dynamicCast() & 1) == 0)
      {
        static OutputPublisherFactory.makeOutputPublisherAsync()();
        type metadata accessor for SimpleOutputFlowAsync();
        swift_allocObject();
        uint64_t v34 = v6;
        v0[193] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
LABEL_23:
        static ExecuteResponse.complete<A>(next:)();
        outlined consume of ShareETABaseFlow.State(v34, 3);
        goto LABEL_47;
      }
      uint64_t v27 = v0[185];
      v0[232] = v27;
      unint64_t v28 = v0[186];
      v0[233] = v28;
      switch(v28)
      {
        case 0uLL:
        case 1uLL:
        case 4uLL:
        case 5uLL:
        case 9uLL:
        case 0xAuLL:
          type metadata accessor for UnsupportedRequestFlow();
          uint64_t v29 = swift_allocObject();
          type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
          *(void *)(v29 + 16) = OS_os_log.init(subsystem:category:)();
          v0[192] = v29;
          lazy protocol witness table accessor for type ShareETAFlowDelegate and conformance BaseRCHFlowDelegate<A, B>((unint64_t *)&lazy protocol witness table cache variable for type UnsupportedRequestFlow and conformance UnsupportedRequestFlow, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedRequestFlow);
          static ExecuteResponse.complete<A>(next:)();
          outlined consume of ContactResolutionFlowError(v27, v28);
          outlined consume of ShareETABaseFlow.State(v6, 3);
          goto LABEL_47;
        case 2uLL:
        case 3uLL:
          uint64_t v124 = v0[220];
          uint64_t v125 = v0;
          uint64_t v126 = v0[218];
          uint64_t v127 = v125[217];
          static SiriKitEventSender.current.getter();
          __swift_project_boxed_opaque_existential_1(v1, v125[54]);
          (*(void (**)(uint64_t, void, uint64_t))(v126 + 104))(v124, enum case for ActivityType.failed(_:), v127);
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
          uint64_t v128 = [(id)swift_getObjCClassFromMetadata() typeName];
          if (!v128) {
            goto LABEL_69;
          }
          uint64_t v129 = v128;
          uint64_t v210 = v125[222];
          uint64_t v130 = v125[216];
          uint64_t v131 = (void *)v125[205];
          type metadata accessor for SiriKitEvent();
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v132 = enum case for SiriKitReliabilityCodes.contactNotFoundFromConverter(_:);
          uint64_t v133 = type metadata accessor for SiriKitReliabilityCodes();
          uint64_t v134 = *(void *)(v133 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 104))(v130, v132, v133);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v134 + 56))(v130, 0, 1, v133);
          SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
          dispatch thunk of SiriKitEventSending.send(_:)();
          swift_release();
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v1);
          uint64_t v135 = v131[3];
          v125[164] = v210;
          v125[165] = (uint64_t)&protocol witness table for ShareETA;
          __swift_allocate_boxed_opaque_existential_0(v125 + 161);
          uint64_t v136 = swift_storeEnumTagMultiPayload();
          uint64_t v137 = *(void (**)(uint64_t))(*v131 + 176);
          uint64_t v138 = *v131 + 176;
          v125[240] = (uint64_t)v137;
          v125[241] = v138 & 0xFFFFFFFFFFFFLL | 0x55F0000000000000;
          v137(v136);
          unint64_t v139 = v125[144];
          uint64_t v140 = v125[145];
          __swift_project_boxed_opaque_existential_1(v125 + 141, v139);
          uint64_t v141 = (*(uint64_t (**)(uint64_t, uint64_t))(v140 + 80))(v139, v140);
          v125[242] = v141;
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v125 + 141));
          uint64_t v223 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v135 + 112)
                                                                     + **(int **)(*(void *)v135 + 112));
          uint64_t v142 = (void *)swift_task_alloc();
          v125[243] = (uint64_t)v142;
          uint64_t *v142 = v125;
          v142[1] = ShareETABaseFlow.executeState();
          uint64_t v143 = v125[213];
          uint64_t v144 = v125 + 161;
          uint64_t v145 = v141;
          break;
        case 6uLL:
          uint64_t v146 = v0[223];
          os_log_type_t v147 = v0[205];
          uint64_t v217 = v6;
          uint64_t v148 = (*(uint64_t (**)(void))(*(void *)v147 + 248))();
          uint64_t v149 = (*(uint64_t (**)(void))(*(void *)v147 + 200))();
          long long v150 = v0;
          uint64_t v151 = *(void (**)(long long *__return_ptr))(*(void *)v147 + 176);
          v151(v225);
          uint64_t v152 = enum case for BehaviorAfterSpeaking.listen(_:);
          unint64_t v153 = type metadata accessor for BehaviorAfterSpeaking();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 104))(v146, v152, v153);
          swift_storeEnumTagMultiPayload();
          type metadata accessor for ShareETAPromptForContactStrategy();
          swift_allocObject();
          ShareETAPromptForContactStrategy.init(isPommes:directInvocation:flowHelper:catModel:)(v148 & 1, v149 & 1, v225, v146);
          id v154 = swift_retain();
          v151((long long *)v154);
          uint64_t v0 = v150;
          uint64_t v155 = v150[49];
          uint64_t v156 = v150[50];
          __swift_project_boxed_opaque_existential_1(v187, v155);
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v156 + 104))(v225, v155, v156);
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v187);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForValueFlowAsync<LocationSearchIntent>);
          swift_allocObject();
          lazy protocol witness table accessor for type ShareETAFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(&lazy protocol witness table cache variable for type ShareETAPromptForContactStrategy and conformance ShareETAPromptForContactStrategy, 255, (void (*)(uint64_t))type metadata accessor for ShareETAPromptForContactStrategy);
          v150[190] = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)();
          lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type PromptForValueFlowAsync<LocationSearchIntent> and conformance PromptForValueFlowAsync<A>, &demangling cache variable for type metadata for PromptForValueFlowAsync<LocationSearchIntent>);
          swift_retain();
          static ExecuteResponse.ongoing<A>(next:childCompletion:)();
          swift_release();
          swift_release();
          outlined consume of ShareETABaseFlow.State(v217, 3);
          goto LABEL_47;
        case 7uLL:
        case 8uLL:
          static OutputPublisherFactory.makeOutputPublisherAsync()();
          type metadata accessor for SimpleOutputFlowAsync();
          swift_allocObject();
          uint64_t v34 = v6;
          v0[191] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
          goto LABEL_23;
        default:
          uint64_t v157 = v0[221];
          uint64_t v158 = v0;
          os_log_type_t v159 = v0[218];
          unint64_t v160 = v158[217];
          type metadata accessor for DialogPerson.Builder();
          swift_allocObject();
          swift_bridgeObjectRetain();
          DialogPerson.Builder.init()();
          dispatch thunk of DialogPerson.Builder.withRelated(_:)();
          swift_release();
          dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)();
          swift_release();
          dispatch thunk of DialogPerson.Builder.withGivenName(print:speak:)();
          swift_release();
          uint64_t v224 = dispatch thunk of DialogPerson.Builder.build()();
          v158[234] = v224;
          swift_release();
          static SiriKitEventSender.current.getter();
          __swift_project_boxed_opaque_existential_1(v189, v158[174]);
          (*(void (**)(uint64_t, void, uint64_t))(v159 + 104))(v157, enum case for ActivityType.failed(_:), v160);
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
          id v161 = [(id)swift_getObjCClassFromMetadata() typeName];
          if (!v161) {
            goto LABEL_70;
          }
          uint64_t v162 = v161;
          unint64_t v207 = v158[222];
          unint64_t v163 = v158[216];
          uint64_t v164 = (void *)v158[205];
          type metadata accessor for SiriKitEvent();
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v165 = enum case for SiriKitReliabilityCodes.relationshipNotFoundFromSkeletonContact(_:);
          uint64_t v166 = type metadata accessor for SiriKitReliabilityCodes();
          uint64_t v167 = *(void *)(v166 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 104))(v163, v165, v166);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v167 + 56))(v163, 0, 1, v166);
          Class v168 = swift_allocObject();
          *(void *)(v168 + 16) = v27;
          *(void *)(v168 + 24) = v28;
          SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
          dispatch thunk of SiriKitEventSending.send(_:)();
          swift_release();
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v189);
          uint64_t v169 = v164[3];
          v158[169] = v207;
          v158[170] = &protocol witness table for ShareETA;
          *__swift_allocate_boxed_opaque_existential_0(v158 + 166) = v224;
          swift_storeEnumTagMultiPayload();
          uint64_t v170 = *(void (**)(uint64_t))(*v164 + 176);
          id v171 = *v164 + 176;
          v158[235] = v170;
          v158[236] = v171 & 0xFFFFFFFFFFFFLL | 0x55F0000000000000;
          unint64_t v172 = swift_retain();
          v170(v172);
          uint64_t v173 = v158[159];
          unint64_t v174 = v158[160];
          __swift_project_boxed_opaque_existential_1(v158 + 156, v173);
          uint64_t v175 = (*(uint64_t (**)(uint64_t, uint64_t))(v174 + 80))(v173, v174);
          v158[237] = v175;
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v158 + 156));
          uint64_t v223 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v169 + 112)
                                                                     + **(int **)(*(void *)v169 + 112));
          os_log_type_t v176 = (void *)swift_task_alloc();
          v158[238] = v176;
          char *v176 = v158;
          v176[1] = ShareETABaseFlow.executeState();
          uint64_t v143 = v158[215];
          uint64_t v144 = v158 + 166;
          uint64_t v145 = v175;
          break;
      }
      os_log_type_t v177 = v223;
      goto LABEL_63;
    case 4:
      static ExecuteResponse.complete()();
      goto LABEL_48;
    default:
      uint64_t v8 = (void *)swift_task_alloc();
      v0[231] = v8;
      *uint64_t v8 = v0;
      v8[1] = ShareETABaseFlow.executeState();
      uint64_t v9 = v0[204];
      return ShareETABaseFlow.preChecks(intent:)(v9, v6);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(ShareETABaseFlow.executeState(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of ShareETABaseFlow.State(*(void *)(v0 + 1840), 0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1912) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = ShareETABaseFlow.executeState();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 1328);
    uint64_t v3 = ShareETABaseFlow.executeState();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void v16[5];
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  uint64_t v14 = *(void *)(v0 + 1864);
  unint64_t v13 = *(void *)(v0 + 1856);
  uint64_t v15 = *(void *)(v0 + 1840);
  uint64_t v1 = *(void *)(v0 + 1720);
  uint64_t v2 = *(void *)(v0 + 1712);
  uint64_t v3 = *(void *)(v0 + 1680);
  uint64_t v4 = *(void *)(v0 + 1672);
  uint64_t v12 = *(void *)(v0 + 1688);
  (*(void (**)(void))(v0 + 1880))();
  uint64_t v5 = *(void *)(v0 + 1232);
  unint64_t v6 = *(void *)(v0 + 1240);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 1208), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v16, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 1208, v0 + 1168);
  char v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  outlined init with take of CATType((long long *)(v0 + 1168), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 1208);
  *(void *)(v0 + 1552) = v9;
  static ExecuteResponse.complete<A>(next:)();
  outlined consume of ContactResolutionFlowError(v13, v14);
  swift_release();
  outlined consume of ShareETABaseFlow.State(v15, 3);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1952) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = ShareETABaseFlow.executeState();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 1288);
    uint64_t v3 = ShareETABaseFlow.executeState();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  void v14[5];
  uint64_t v15;
  uint64_t v16;

  uint64_t v15 = v0;
  unint64_t v13 = *(void *)(v0 + 1840);
  uint64_t v1 = *(void *)(v0 + 1712);
  uint64_t v2 = *(void *)(v0 + 1704);
  uint64_t v3 = *(void *)(v0 + 1680);
  uint64_t v4 = *(void *)(v0 + 1672);
  uint64_t v12 = *(void *)(v0 + 1688);
  (*(void (**)(void))(v0 + 1920))();
  uint64_t v5 = *(void *)(v0 + 992);
  unint64_t v6 = *(void *)(v0 + 1000);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 968), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v14, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v0 + 968, v0 + 888);
  char v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  outlined init with take of CATType((long long *)(v0 + 888), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 968);
  *(void *)(v0 + 1504) = v9;
  static ExecuteResponse.complete<A>(next:)();
  outlined consume of ShareETABaseFlow.State(v13, 3);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1992) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = ShareETABaseFlow.executeState();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 568);
    uint64_t v3 = ShareETABaseFlow.executeState();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v1 = *(void *)(v0 + 1712);
  uint64_t v2 = *(void *)(v0 + 1696);
  uint64_t v12 = *(void *)(v0 + 1688);
  uint64_t v3 = *(void *)(v0 + 1680);
  uint64_t v4 = *(void *)(v0 + 1672);
  (*(void (**)(void))(v0 + 1960))();
  uint64_t v5 = *(void *)(v0 + 792);
  unint64_t v6 = *(void *)(v0 + 800);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 768), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v13, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v0 + 768, v0 + 808);
  char v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  outlined init with take of CATType((long long *)(v0 + 808), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 768);
  *(void *)(v0 + 1600) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[233];
  uint64_t v2 = v0[232];
  swift_release();
  outlined consume of ContactResolutionFlowError(v2, v1);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 166));
  uint64_t v3 = v0[230];
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  v0[187] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  static ExecuteResponse.complete<A>(next:)();
  swift_errorRelease();
  outlined consume of ShareETABaseFlow.State(v3, 3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 161));
  uint64_t v1 = v0[230];
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  v0[187] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  static ExecuteResponse.complete<A>(next:)();
  swift_errorRelease();
  outlined consume of ShareETABaseFlow.State(v1, 3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 568);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 1608) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  static ExecuteResponse.complete<A>(next:)();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #2 in ShareETABaseFlow.executeState()(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 16))
  {
    outlined copy of ContactResolutionFlowError(*(void *)a1, v3);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    unint64_t v6 = a2[2];
    os_log_type_t v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>((uint64_t)v4, v3, 1, (uint64_t (*)(uint64_t, void))outlined copy of ContactResolutionOutput, (uint64_t (*)(void))outlined copy of ContactResolutionFlowError);
      outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>((uint64_t)v4, v3, 1, (uint64_t (*)(uint64_t, void))outlined copy of ContactResolutionOutput, (uint64_t (*)(void))outlined copy of ContactResolutionFlowError);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      outlined copy of ContactResolutionFlowError((uint64_t)v4, v3);
      uint64_t v9 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>((uint64_t)v4, v3, 1, (uint64_t (*)(uint64_t, void))outlined consume of ContactResolutionOutput, (uint64_t (*)(void))outlined consume of ContactResolutionFlowError);
      outlined copy of Result<ContactResolutionOutput, ContactResolutionFlowError>((uint64_t)v4, v3, 1, (uint64_t (*)(uint64_t, void))outlined consume of ContactResolutionOutput, (uint64_t (*)(void))outlined consume of ContactResolutionFlowError);
      _os_log_impl(&dword_0, v6, v7, "Contact Resolution Failed: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    lazy protocol witness table accessor for type ContactResolutionFlowError and conformance ContactResolutionFlowError();
    uint64_t v11 = swift_allocError();
    *uint64_t v12 = v4;
    v12[1] = v3;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*a2 + 160))(v11, 3);
  }
  else if (v3)
  {
    uint64_t v16 = *(uint64_t (**)(void *, uint64_t))(*a2 + 160);
    outlined copy of ContactResolutionOutput(*(void **)a1, 1);
    return v16(v4, 2);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_C0AD0;
    *(void *)(v14 + 32) = v4;
    uint64_t v17 = v14;
    specialized Array._endMutation()();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*a2 + 160);
    outlined copy of ContactResolutionOutput(v4, 0);
    return v15(v17, 2);
  }
}

uint64_t closure #1 in ShareETABaseFlow.executeState()(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<LocationSearchIntent>);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v7, v4);
  if (result == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*a2 + 160);
    uint64_t v10 = swift_retain();
    v9(v10, 1);
    return swift_release();
  }
  else if (result == enum case for PromptResult.error<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v11 = *v7;
    os_log_type_t v12 = static os_log_type_t.error.getter();
    unint64_t v13 = a2[2];
    os_log_type_t v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v19 = v11;
      uint64_t v20 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v13, v14, "PromptForValueFlow error %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    (*(void (**)(void, uint64_t))(*a2 + 160))(0, 4);
    return swift_errorRelease();
  }
  else if (result == enum case for PromptResult.cancelled<A>(_:))
  {
    return (*(uint64_t (**)(void, uint64_t))(*a2 + 160))(0, 4);
  }
  else if (result != enum case for PromptResult.unanswered<A>(_:))
  {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t closure #4 in ShareETABaseFlow.executeState()()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
}

uint64_t closure #6 in ShareETABaseFlow.executeState()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(closure #6 in ShareETABaseFlow.executeState(), 0, 0);
}

uint64_t closure #6 in ShareETABaseFlow.executeState()()
{
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #7 in ShareETABaseFlow.executeState()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(closure #7 in ShareETABaseFlow.executeState(), 0, 0);
}

uint64_t closure #9 in ShareETABaseFlow.executeState()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a2 + 16);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  uint64_t result = os_log_type_enabled(v2, v3);
  if (result)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v2, v3, "Completed ShareETA RCH", v5, 2u);
    return swift_slowDealloc();
  }
  return result;
}

uint64_t ShareETABaseFlow.preChecks(intent:)(uint64_t a1, uint64_t a2)
{
  v3[110] = v2;
  v3[109] = a2;
  v3[108] = a1;
  uint64_t v4 = type metadata accessor for UnlockDevicePolicy();
  v3[111] = v4;
  v3[112] = *(void *)(v4 - 8);
  v3[113] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v3[114] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[115] = v6;
  v3[116] = *(void *)(v6 + 64);
  v3[117] = swift_task_alloc();
  v3[118] = swift_task_alloc();
  v3[119] = swift_task_alloc();
  v3[120] = swift_task_alloc();
  v3[121] = swift_task_alloc();
  return _swift_task_switch(ShareETABaseFlow.preChecks(intent:), 0, 0);
}

uint64_t ShareETABaseFlow.preChecks(intent:)()
{
  uint64_t v74 = v0;
  if ((*(uint64_t (**)(void))(**(void **)(v0 + 880) + 328))())
  {
    (*(void (**)(void))(**(void **)(v0 + 880) + 224))();
    if ((*(uint64_t (**)(void))(v1 + 8))())
    {
      uint64_t v2 = *(void *)(v0 + 880);
      type metadata accessor for MapsService();
      os_log_type_t v3 = *(NSObject **)(v2 + 16);
      char v4 = static MapsService.shareETAConfigurationCheck(_:)();
      if (v4 == 2)
      {
        (*(void (**)(void))(**(void **)(v0 + 880) + 176))();
        uint64_t v5 = *(void *)(v0 + 520);
        uint64_t v6 = *(void *)(v0 + 528);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 496), v5);
        (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
        __swift_destroy_boxed_opaque_existential_0Tm(v0 + 496);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 536), *(void *)(v0 + 560));
        if (one-time initialization token for kShareETAAuthenticationPolicy != -1) {
          swift_once();
        }
        __swift_project_value_buffer(*(void *)(v0 + 888), (uint64_t)kShareETAAuthenticationPolicy);
        char v7 = dispatch thunk of DeviceState.isAuthenticated(for:)();
        __swift_destroy_boxed_opaque_existential_0Tm(v0 + 536);
        if (v7)
        {
          uint64_t v8 = *(void (**)(uint64_t, uint64_t))(**(void **)(v0 + 880) + 160);
          uint64_t v9 = swift_retain();
          v8(v9, 1);
          static ExecuteResponse.ongoing(requireInput:)();
        }
        else
        {
          os_log_type_t v52 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v3, v52))
          {
            uint64_t v53 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v53 = 0;
            _os_log_impl(&dword_0, v3, v52, "share eta requires device unlocked", v53, 2u);
            swift_slowDealloc();
          }
          uint64_t v54 = *(void *)(v0 + 904);
          uint64_t v55 = *(void *)(v0 + 896);
          uint64_t v56 = *(void *)(v0 + 888);
          uint64_t v57 = *(void *)(v0 + 880);
          uint64_t v58 = *(void *)(v0 + 872);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
          type metadata accessor for CommonFlowGuard();
          *(_OWORD *)(swift_allocObject() + 16) = xmmword_C0600;
          static UnlockDevicePolicy.requiringDeviceUnlock.getter();
          static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)();
          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
          uint64_t v59 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
          swift_bridgeObjectRelease();
          *(void *)(v0 + 824) = v59;
          uint64_t v60 = swift_allocObject();
          *(void *)(v60 + 16) = v57;
          *(void *)(v60 + 24) = v58;
          type metadata accessor for GuardFlow();
          swift_retain();
          swift_retain();
          static ExecuteResponse.ongoing<A>(next:childCompletion:)();
          swift_release();
          swift_release();
        }
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
        return v61();
      }
      int v37 = v4 & 1;
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v38))
      {
        unsigned int v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v73 = swift_slowAlloc();
        *(_DWORD *)unsigned int v39 = 136315138;
        *(unsigned char *)(v0 + 1144) = v37;
        uint64_t v40 = String.init<A>(describing:)();
        *(void *)(v0 + 856) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v3, v38, "share eta configuration check error %s", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      id v42 = *(void **)(v0 + 880);
      uint64_t v43 = v42[3];
      if (v37)
      {
        uint64_t v44 = v0 + 616;
        *(void *)(v0 + 640) = type metadata accessor for ShareETA(0);
        *(void *)(v0 + 648) = &protocol witness table for ShareETA;
        __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 616));
        uint64_t v63 = swift_storeEnumTagMultiPayload();
        uint64_t v64 = *(void (**)(uint64_t))(*v42 + 176);
        uint64_t v65 = *v42 + 176;
        *(void *)(v0 + 1104) = v64;
        *(void *)(v0 + 1112) = v65 & 0xFFFFFFFFFFFFLL | 0x55F0000000000000;
        v64(v63);
        uint64_t v66 = *(void *)(v0 + 680);
        uint64_t v67 = *(void *)(v0 + 688);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 656), v66);
        uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 80))(v66, v67);
        *(void *)(v0 + 1120) = v50;
        __swift_destroy_boxed_opaque_existential_0Tm(v0 + 656);
        uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v43 + 112)
                                                                + **(int **)(*(void *)v43 + 112));
        uint64_t v68 = (void *)swift_task_alloc();
        *(void *)(v0 + 1128) = v68;
        *uint64_t v68 = v0;
        v68[1] = ShareETABaseFlow.preChecks(intent:);
        uint64_t v24 = *(void *)(v0 + 936);
      }
      else
      {
        uint64_t v44 = v0 + 776;
        *(void *)(v0 + 800) = type metadata accessor for ShareETA(0);
        *(void *)(v0 + 808) = &protocol witness table for ShareETA;
        __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 776));
        uint64_t v45 = swift_storeEnumTagMultiPayload();
        uint64_t v46 = *(void (**)(uint64_t))(*v42 + 176);
        uint64_t v47 = *v42 + 176;
        *(void *)(v0 + 1064) = v46;
        *(void *)(v0 + 1072) = v47 & 0xFFFFFFFFFFFFLL | 0x55F0000000000000;
        v46(v45);
        uint64_t v48 = *(void *)(v0 + 600);
        uint64_t v49 = *(void *)(v0 + 608);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 576), v48);
        uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 80))(v48, v49);
        *(void *)(v0 + 1080) = v50;
        __swift_destroy_boxed_opaque_existential_0Tm(v0 + 576);
        uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v43 + 112)
                                                                + **(int **)(*(void *)v43 + 112));
        id v51 = (void *)swift_task_alloc();
        *(void *)(v0 + 1088) = v51;
        *id v51 = v0;
        v51[1] = ShareETABaseFlow.preChecks(intent:);
        uint64_t v24 = *(void *)(v0 + 944);
      }
      uint64_t v25 = v44;
      uint64_t v26 = v50;
    }
    else
    {
      unint64_t v28 = *(void **)(v0 + 880);
      uint64_t v29 = v28[3];
      *(void *)(v0 + 320) = type metadata accessor for ShareETA(0);
      *(void *)(v0 + 328) = &protocol witness table for ShareETA;
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 296));
      uint64_t v30 = swift_storeEnumTagMultiPayload();
      uint64_t v31 = *(void (**)(uint64_t))(*v28 + 176);
      uint64_t v32 = *v28 + 176;
      *(void *)(v0 + 1024) = v31;
      *(void *)(v0 + 1032) = v32 & 0xFFFFFFFFFFFFLL | 0x55F0000000000000;
      v31(v30);
      uint64_t v33 = *(void *)(v0 + 360);
      uint64_t v34 = *(void *)(v0 + 368);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), v33);
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 80))(v33, v34);
      *(void *)(v0 + 1040) = v35;
      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 336);
      uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v29 + 112)
                                                              + **(int **)(*(void *)v29 + 112));
      char v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 1048) = v36;
      *char v36 = v0;
      v36[1] = ShareETABaseFlow.preChecks(intent:);
      uint64_t v24 = *(void *)(v0 + 952);
      uint64_t v25 = v0 + 296;
      uint64_t v26 = v35;
    }
    uint64_t v27 = v72;
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 880);
    uint64_t v71 = v10[3];
    *(void *)(v0 + 40) = type metadata accessor for ShareETA(0);
    *(void *)(v0 + 48) = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 16));
    uint64_t v11 = *(void (**)(void))(*v10 + 176);
    uint64_t v12 = *v10 + 176;
    *(void *)(v0 + 976) = v11;
    *(void *)(v0 + 984) = v12 & 0xFFFFFFFFFFFFLL | 0x55F0000000000000;
    v11();
    uint64_t v13 = *(void *)(v0 + 80);
    uint64_t v14 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    uint64_t v15 = *(void *)(v0 + 120);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v15);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = swift_task_alloc();
    *(void *)(v0 + 992) = v17;
    (*(void (**)(void))(v16 + 16))();
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
    unsigned __int8 v18 = DeviceState.deviceType.getter();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v15);
    uint64_t *boxed_opaque_existential_0 = v18;
    uint64_t v19 = swift_storeEnumTagMultiPayload();
    ((void (*)(uint64_t))v11)(v19);
    uint64_t v20 = *(void *)(v0 + 160);
    uint64_t v21 = *(void *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v20);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 80))(v20, v21);
    *(void *)(v0 + 1000) = v22;
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
    uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v71 + 112)
                                                            + **(int **)(*(void *)v71 + 112));
    os_log_type_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 1008) = v23;
    *os_log_type_t v23 = v0;
    v23[1] = ShareETABaseFlow.preChecks(intent:);
    uint64_t v24 = *(void *)(v0 + 968);
    uint64_t v25 = v0 + 16;
    uint64_t v26 = v22;
    uint64_t v27 = v70;
  }
  return v27(v24, v25, v26);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1016) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    os_log_type_t v3 = ShareETABaseFlow.preChecks(intent:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 16);
    swift_task_dealloc();
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 96);
    os_log_type_t v3 = ShareETABaseFlow.preChecks(intent:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v1 = *(void *)(v0 + 968);
  uint64_t v2 = *(void *)(v0 + 960);
  uint64_t v12 = *(void *)(v0 + 928);
  os_log_type_t v3 = *(void *)(v0 + 920);
  char v4 = *(void *)(v0 + 912);
  (*(void (**)(void))(v0 + 976))();
  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 208);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 104))(v13, v6, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v0 + 176, v0 + 216);
  char v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  outlined init with take of CATType((long long *)(v0 + 216), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 176);
  *(void *)(v0 + 840) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1056) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    os_log_type_t v3 = ShareETABaseFlow.preChecks(intent:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 296);
    os_log_type_t v3 = ShareETABaseFlow.preChecks(intent:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v1 = *(void *)(v0 + 960);
  uint64_t v2 = *(void *)(v0 + 952);
  uint64_t v12 = *(void *)(v0 + 928);
  os_log_type_t v3 = *(void *)(v0 + 920);
  char v4 = *(void *)(v0 + 912);
  (*(void (**)(void))(v0 + 1024))();
  uint64_t v6 = *(void *)(v0 + 400);
  uint64_t v5 = *(void *)(v0 + 408);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 376), v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 104))(v13, v6, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v0 + 376, v0 + 416);
  char v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  outlined init with take of CATType((long long *)(v0 + 416), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 376);
  *(void *)(v0 + 832) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1096) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    os_log_type_t v3 = ShareETABaseFlow.preChecks(intent:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 776);
    os_log_type_t v3 = ShareETABaseFlow.preChecks(intent:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v1 = *(void *)(v0 + 960);
  uint64_t v2 = *(void *)(v0 + 944);
  uint64_t v12 = *(void *)(v0 + 928);
  os_log_type_t v3 = *(void *)(v0 + 920);
  char v4 = *(void *)(v0 + 912);
  (*(void (**)(void))(v0 + 1064))();
  uint64_t v6 = *(void *)(v0 + 480);
  uint64_t v5 = *(void *)(v0 + 488);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 456), v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 104))(v13, v6, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v0 + 456, v0 + 256);
  char v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  outlined init with take of CATType((long long *)(v0 + 256), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 456);
  *(void *)(v0 + 848) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1136) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    os_log_type_t v3 = ShareETABaseFlow.preChecks(intent:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 616);
    os_log_type_t v3 = ShareETABaseFlow.preChecks(intent:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void v13[5];
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v1 = *(void *)(v0 + 960);
  uint64_t v2 = *(void *)(v0 + 936);
  uint64_t v12 = *(void *)(v0 + 928);
  os_log_type_t v3 = *(void *)(v0 + 920);
  char v4 = *(void *)(v0 + 912);
  (*(void (**)(void))(v0 + 1104))();
  uint64_t v5 = *(void *)(v0 + 720);
  uint64_t v6 = *(void *)(v0 + 728);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 696), v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 104))(v13, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v0 + 696, v0 + 736);
  char v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  outlined init with take of CATType((long long *)(v0 + 736), v8 + ((v12 + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v9 = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 696);
  *(void *)(v0 + 816) = v9;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 880);
  lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v2 = swift_allocError();
  *(void *)os_log_type_t v3 = 0xD000000000000013;
  *(void *)(v3 + 8) = 0x80000000000CA360;
  *(unsigned char *)(v3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 160))(v2, 3);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 296);
  uint64_t v1 = *(void *)(v0 + 880);
  lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v2 = swift_allocError();
  *(void *)os_log_type_t v3 = 0xD000000000000013;
  *(void *)(v3 + 8) = 0x80000000000CA360;
  *(unsigned char *)(v3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 160))(v2, 3);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 776);
  uint64_t v1 = *(void *)(v0 + 880);
  lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v2 = swift_allocError();
  *(void *)os_log_type_t v3 = 0xD000000000000013;
  *(void *)(v3 + 8) = 0x80000000000CA360;
  *(unsigned char *)(v3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 160))(v2, 3);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 616);
  uint64_t v1 = *(void *)(v0 + 880);
  lazy protocol witness table accessor for type Errors and conformance Errors();
  uint64_t v2 = swift_allocError();
  *(void *)os_log_type_t v3 = 0xD000000000000013;
  *(void *)(v3 + 8) = 0x80000000000CA360;
  *(unsigned char *)(v3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 160))(v2, 3);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #1 in ShareETABaseFlow.preChecks(intent:)(unsigned __int8 *a1, void *a2)
{
  int v3 = *a1;
  char v4 = a2[2];
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  if (v3 == 1)
  {
    if (v6)
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v7 = 0;
      _os_log_impl(&dword_0, v4, v5, "unlock flow error", v7, 2u);
      swift_slowDealloc();
    }
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v8 = swift_allocError();
    *(void *)uint64_t v9 = 0xD000000000000011;
    *(void *)(v9 + 8) = 0x80000000000CA380;
    *(unsigned char *)(v9 + 16) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*a2 + 160))(v8, 3);
  }
  else
  {
    if (v6)
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_0, v4, v5, "successfully unlocked the device", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*a2 + 160);
    uint64_t v13 = swift_retain();
    return v12(v13, 1);
  }
}

uint64_t ShareETABaseFlow.isDeviceSupported()()
{
  void (*v1)(void *__return_ptr);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void v43[3];
  uint64_t v44;
  void v45[3];
  uint64_t v46;
  uint64_t v47;
  void v48[3];
  uint64_t v49;
  void v50[3];
  uint64_t v51;
  uint64_t v52;

  uint64_t v1 = *(void (**)(void *__return_ptr))(*(void *)v0 + 176);
  v1(v50);
  uint64_t v2 = v51;
  int v3 = v52;
  __swift_project_boxed_opaque_existential_1(v50, v51);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 32))(v48, v2, v3);
  char v4 = v49;
  os_log_type_t v5 = __swift_project_boxed_opaque_existential_1(v48, v49);
  BOOL v6 = *(void *)(v4 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v8);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v50);
  LOBYTE(v3) = dispatch thunk of DeviceState.isXRDevice.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  uint64_t v9 = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v48);
  if (v3)
  {
    uint64_t v10 = 0;
  }
  else
  {
    ((void (*)(void *__return_ptr, uint64_t))v1)(v50, v9);
    uint64_t v11 = v51;
    uint64_t v12 = v52;
    __swift_project_boxed_opaque_existential_1(v50, v51);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 32))(v48, v11, v12);
    uint64_t v13 = v49;
    uint64_t v14 = __swift_project_boxed_opaque_existential_1(v48, v49);
    uint64_t v15 = *(void *)(v13 - 8);
    __chkstk_darwin(v14);
    uint64_t v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v50);
    LOBYTE(v12) = dispatch thunk of DeviceState.isPhone.getter();
    unsigned __int8 v18 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    if (v12)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v48);
      uint64_t v10 = 1;
    }
    else
    {
      ((void (*)(void *__return_ptr, uint64_t))v1)(v45, v18);
      uint64_t v19 = v46;
      uint64_t v20 = v47;
      __swift_project_boxed_opaque_existential_1(v45, v46);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 32))(v43, v19, v20);
      uint64_t v21 = v44;
      uint64_t v22 = __swift_project_boxed_opaque_existential_1(v43, v44);
      os_log_type_t v23 = *(void *)(v21 - 8);
      __chkstk_darwin(v22);
      uint64_t v25 = (char *)v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v23 + 16))(v25);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v45);
      LOBYTE(v20) = dispatch thunk of DeviceState.isPad.getter();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v21);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v43);
      uint64_t v26 = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v48);
      if (v20) {
        goto LABEL_7;
      }
      ((void (*)(void *__return_ptr, uint64_t))v1)(v50, v26);
      uint64_t v27 = v51;
      unint64_t v28 = v52;
      __swift_project_boxed_opaque_existential_1(v50, v51);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v28 + 32))(v48, v27, v28);
      uint64_t v29 = v49;
      uint64_t v30 = __swift_project_boxed_opaque_existential_1(v48, v49);
      uint64_t v31 = *(void *)(v29 - 8);
      __chkstk_darwin(v30);
      uint64_t v33 = (char *)v43 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v31 + 16))(v33);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v50);
      LOBYTE(v28) = dispatch thunk of DeviceState.isCarPlay.getter();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v29);
      uint64_t v34 = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v48);
      if (v28)
      {
LABEL_7:
        uint64_t v10 = 1;
      }
      else
      {
        ((void (*)(void *__return_ptr, uint64_t))v1)(v50, v34);
        uint64_t v35 = v51;
        char v36 = v52;
        __swift_project_boxed_opaque_existential_1(v50, v51);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v36 + 32))(v48, v35, v36);
        int v37 = v49;
        os_log_type_t v38 = __swift_project_boxed_opaque_existential_1(v48, v49);
        unsigned int v39 = *(void *)(v37 - 8);
        __chkstk_darwin(v38);
        unint64_t v41 = (char *)v43 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v39 + 16))(v41);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v50);
        uint64_t v10 = dispatch thunk of DeviceState.isPod.getter();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v37);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v48);
      }
    }
  }
  return v10 & 1;
}

uint64_t MockShareETABaseFlow.deinit()
{
  swift_release();
  outlined consume of ShareETABaseFlow.State(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 48);
  return v0;
}

uint64_t MockShareETABaseFlow.__deallocating_deinit()
{
  swift_release();
  outlined consume of ShareETABaseFlow.State(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 48);

  return _swift_deallocClassInstance(v0, 114, 7);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance ShareETABaseFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 152))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance ShareETABaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 304))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance ShareETABaseFlow(uint64_t a1)
{
  BOOL v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 312) + **(int **)(**(void **)v1 + 312));
  char v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *char v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance ShareETABaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ShareETABaseFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable();

  return FSMFlow.execute(completion:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute() in conformance ShareETABaseFlow(uint64_t a1, uint64_t a2)
{
  os_log_type_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  void *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ShareETABaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ShareETABaseFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShareETABaseFlow(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t MockShareETABaseFlow.__allocating_init(with:stopSharing:flowHelper:checkNavigation:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  outlined init with copy of DeviceState(a3, (uint64_t)v12);
  ShareETABaseFlow.init(with:stopSharing:flowHelper:checkNavigation:)(a1, a2, v12, a4, a5);
  __swift_destroy_boxed_opaque_existential_0Tm(a3);
  return v10;
}

uint64_t MockShareETABaseFlow.init(with:stopSharing:flowHelper:checkNavigation:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  outlined init with copy of DeviceState(a3, (uint64_t)v12);
  ShareETABaseFlow.init(with:stopSharing:flowHelper:checkNavigation:)(a1, a2, v12, a4, a5);
  __swift_destroy_boxed_opaque_existential_0Tm(a3);
  return v5;
}

uint64_t vtable thunk for ShareETABaseFlow.isDeviceSupported() dispatching to MockShareETABaseFlow.isDeviceSupported()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t specialized ShareETAContactDisambiguationStrategy.init(isPommes:isUSO:skeletonPerson:flowHelper:catService:)(char a1, char a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = &type metadata for FlowHelperImpl;
  unint64_t v41 = &protocol witness table for FlowHelperImpl;
  uint64_t v11 = (_OWORD *)swift_allocObject();
  *(void *)&long long v39 = v11;
  long long v12 = a4[9];
  v11[9] = a4[8];
  v11[10] = v12;
  v11[11] = a4[10];
  long long v13 = a4[5];
  uint64_t v11[5] = a4[4];
  v11[6] = v13;
  long long v14 = a4[7];
  v11[7] = a4[6];
  v11[8] = v14;
  long long v15 = a4[1];
  v11[1] = *a4;
  void v11[2] = v15;
  long long v16 = a4[3];
  v11[3] = a4[2];
  v11[4] = v16;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v17 = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(a6 + 81) = 0;
  *(void *)(a6 + 16) = v17;
  *(void *)(a6 + 88) = _swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_BFBE0;
  if (one-time initialization token for referenceNode != -1) {
    swift_once();
  }
  swift_retain();
  unint64_t v19 = specialized OntologyNode.javaClassName.getter();
  uint64_t v21 = v20;
  swift_release();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v21;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once();
  }
  swift_retain();
  unint64_t v22 = specialized OntologyNode.javaClassName.getter();
  uint64_t v24 = v23;
  swift_release();
  *(void *)(v18 + 48) = v22;
  *(void *)(v18 + 56) = v24;
  type metadata accessor for AddressOntologyNode.PersonPlaceNode();
  swift_allocObject();
  AddressOntologyNode.PersonPlaceNode.init(name:multicardinal:)();
  unint64_t v25 = specialized OntologyNode.javaClassName.getter();
  uint64_t v27 = v26;
  swift_release();
  *(void *)(v18 + 64) = v25;
  *(void *)(v18 + 72) = v27;
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  unint64_t v28 = specialized OntologyNode.javaClassName.getter();
  uint64_t v30 = v29;
  swift_release();
  *(void *)(v18 + 80) = v28;
  *(void *)(v18 + 88) = v30;
  static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter();
  unint64_t v31 = specialized OntologyNode.javaClassName.getter();
  uint64_t v33 = v32;
  swift_release();
  *(void *)(v18 + 96) = v31;
  *(void *)(v18 + 104) = v33;
  type metadata accessor for PersonOntologyNode();
  static PersonOntologyNode.personFullNameNode.getter();
  unint64_t v34 = specialized OntologyNode.javaClassName.getter();
  uint64_t v36 = v35;
  swift_release();
  *(void *)(v18 + 112) = v34;
  *(void *)(v18 + 120) = v36;
  *(void *)(a6 + 96) = v18;
  *(unsigned char *)(a6 + 80) = a1 & 1;
  swift_beginAccess();
  *(unsigned char *)(a6 + 81) = a2 & 1;
  *(void *)(a6 + 72) = a3;
  outlined init with take of CATType(&v39, a6 + 32);
  *(void *)(a6 + 24) = a5;
  return a6;
}

unint64_t specialized ShareETABaseFlow.makeSkeletonINPerson(inpersons:)(unint64_t a1)
{
  if (!a1) {
    return a1;
  }
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v2) {
      return a1;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  if (v9 < 0) {
    __break(1u);
  }
  uint64_t v2 = v9;
  if (v9)
  {
LABEL_4:
    uint64_t v3 = 0;
    unint64_t v4 = a1 & 0xC000000000000001;
    do
    {
      if (v4) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v8 = v7;
      [v7 setIsMe:0];

      if (v4) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v3 + 32);
      }
      BOOL v6 = v5;
      ++v3;
      [v5 setSourceAppBundleIdentifier:0];
    }
    while (v2 != v3);
  }
  return a1;
}

uint64_t partial apply for closure #12 in ShareETABaseFlow.executeState()(uint64_t a1)
{
  return closure #9 in ShareETABaseFlow.executeState()(a1, v1);
}

void specialized ShareETABaseFlow.missingContactInformation(persons:)(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_37;
  }
LABEL_3:
  unint64_t v3 = 0;
  unint64_t v4 = a1 & 0xC000000000000001;
  id v5 = (SEL *)&unk_EC000;
  uint64_t v23 = v2;
  while (1)
  {
    if (v4)
    {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_8;
    }
    if (v3 >= *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
      break;
    }
    id v6 = *(id *)(a1 + 32 + 8 * v3);
LABEL_8:
    id v7 = v6;
    if (__OFADD__(v3++, 1))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    id v9 = [v6 v5[117]];
    if (v9)
    {
      uint64_t v10 = v9;
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INPerson);
      unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v12)
        {
LABEL_12:
          if ((v11 & 0xC000000000000001) != 0)
          {
            id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8))) {
              goto LABEL_39;
            }
            id v13 = *(id *)(v11 + 32);
          }
          long long v14 = v13;
          char v15 = INPerson.hasUsefulHandleValue.getter();

          if (v15)
          {
LABEL_31:
            swift_bridgeObjectRelease();

            goto LABEL_37;
          }
          uint64_t v16 = 0;
          uint64_t v17 = v12 - 1;
          while (v17 != v16)
          {
            unint64_t v18 = v16 + 1;
            if ((v11 & 0xC000000000000001) != 0)
            {
              id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (v18 >= *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8))) {
                goto LABEL_34;
              }
              id v19 = *(id *)(v11 + 8 * v16 + 40);
            }
            uint64_t v20 = v19;
            if (__OFADD__(v18, 1))
            {
              __break(1u);
LABEL_34:
              __break(1u);
              goto LABEL_35;
            }
            char v21 = INPerson.hasUsefulHandleValue.getter();

            ++v16;
            if (v21) {
              goto LABEL_31;
            }
          }
        }
      }
      else
      {
        uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
        if (v12) {
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v4 = a1 & 0xC000000000000001;
      uint64_t v2 = v23;
      id v5 = (SEL *)&unk_EC000;
    }
    char v22 = INPerson.hasUsefulHandleValue.getter();

    if ((v22 & 1) != 0 || v3 == v2) {
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t partial apply for closure #5 in ShareETABaseFlow.executeState()(uint64_t a1)
{
  return closure #1 in ShareETABaseFlow.executeState()(a1, v1);
}

uint64_t sub_A1B84()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t outlined init with take of HandleFilterProtocolAsync?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandleFilterProtocolAsync?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of HandleFilterProtocolAsync?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandleFilterProtocolAsync?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in ShareETABaseFlow.executeState()(uint64_t a1)
{
  return closure #2 in ShareETABaseFlow.executeState()(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for ShareETABaseFlow(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type ShareETAFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(&lazy protocol witness table cache variable for type ShareETABaseFlow and conformance ShareETABaseFlow, a2, (void (*)(uint64_t))type metadata accessor for ShareETABaseFlow);
  uint64_t result = lazy protocol witness table accessor for type ShareETAFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(&lazy protocol witness table cache variable for type ShareETABaseFlow and conformance ShareETABaseFlow, v3, (void (*)(uint64_t))type metadata accessor for ShareETABaseFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for ShareETABaseFlow()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type ShareETAFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_A1D88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_A1DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 160);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  outlined copy of ShareETABaseFlow.State(*(void *)a1, v4);
  return v3(v2, v4);
}

uint64_t sub_A1E48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 176))();
}

uint64_t sub_A1E8C(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 184))(v4);
}

uint64_t sub_A1EE8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_A1F38(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 208))(*a1);
}

uint64_t sub_A1F80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_A1FCC(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)a2 + 232))(*a1, a1[1]);
}

uint64_t sub_A201C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_A206C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 256))(*a1);
}

uint64_t sub_A20BC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 272))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_A2114(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 280))(*a1);
}

uint64_t initializeBufferWithCopyOfBuffer for ShareETABaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ShareETABaseFlow.State(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ShareETABaseFlow.State(uint64_t a1)
{
  return outlined consume of ShareETABaseFlow.State(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for ShareETABaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ShareETABaseFlow.State(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ShareETABaseFlow.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for ShareETABaseFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of ShareETABaseFlow.State(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareETABaseFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareETABaseFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ShareETABaseFlow.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 3u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveInjectEnumTag for ShareETABaseFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShareETABaseFlow.State()
{
  return &type metadata for ShareETABaseFlow.State;
}

uint64_t type metadata accessor for MockShareETABaseFlow()
{
  return self;
}

uint64_t sub_A2348()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in ShareETABaseFlow.preChecks(intent:)(unsigned __int8 *a1)
{
  return closure #1 in ShareETABaseFlow.preChecks(intent:)(a1, *(void **)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type ContactResolutionFlowError and conformance ContactResolutionFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactResolutionFlowError and conformance ContactResolutionFlowError;
  if (!lazy protocol witness table cache variable for type ContactResolutionFlowError and conformance ContactResolutionFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactResolutionFlowError and conformance ContactResolutionFlowError);
  }
  return result;
}

uint64_t sub_A23EC()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t LocalSearchIntent.LocalSearchCategory.rawValue.getter(char a1)
{
  if (a1) {
    return 0x797265636F7267;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t *LocalSearchIntent.domainNode.unsafeMutableAddressor()
{
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  return &static LocalSearchIntent.domainNode;
}

uint64_t *LocalSearchIntent.categoryNode.unsafeMutableAddressor()
{
  if (one-time initialization token for categoryNode != -1) {
    swift_once();
  }
  return &static LocalSearchIntent.categoryNode;
}

GeoFlowDelegatePlugin::LocalSearchIntent::LocalSearchCategory_optional __swiftcall LocalSearchIntent.LocalSearchCategory.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LocalSearchIntent.LocalSearchCategory.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = GeoFlowDelegatePlugin_LocalSearchIntent_LocalSearchCategory_grocery;
  }
  else {
    v4.value = GeoFlowDelegatePlugin_LocalSearchIntent_LocalSearchCategory_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

_UNKNOWN **static LocalSearchIntent.LocalSearchCategory.allCases.getter()
{
  return &outlined read-only object #0 of static LocalSearchIntent.LocalSearchCategory.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocalSearchIntent.LocalSearchCategory(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = LocalSearchIntent.LocalSearchCategory.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == LocalSearchIntent.LocalSearchCategory.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocalSearchIntent.LocalSearchCategory()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  LocalSearchIntent.LocalSearchCategory.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocalSearchIntent.LocalSearchCategory()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalSearchIntent.LocalSearchCategory()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  LocalSearchIntent.LocalSearchCategory.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocalSearchIntent.LocalSearchCategory@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LocalSearchIntent.LocalSearchCategory.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LocalSearchIntent.LocalSearchCategory@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LocalSearchIntent.LocalSearchCategory.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance LocalSearchIntent.LocalSearchCategory(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance LocalSearchIntent.LocalSearchCategory;
}

uint64_t LocalSearchIntent.intent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v4 = type metadata accessor for NLIntent();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t one-time initialization function for categoryNode()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  swift_allocObject();
  uint64_t result = TerminalOntologyNode.init(name:multicardinal:)();
  static LocalSearchIntent.categoryNode = result;
  return result;
}

uint64_t static LocalSearchIntent.categoryNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for categoryNode);
}

uint64_t static LocalSearchIntent.domainNode.getter()
{
  return variable initialization expression of LocationSearchIntent.domainOntologyNode(&one-time initialization token for domainNode);
}

uint64_t LocalSearchIntent.domainOntologyNode.getter()
{
  return swift_retain();
}

uint64_t LocalSearchIntent.domainOntologyNode.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_domainOntologyNode);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*LocalSearchIntent.domainOntologyNode.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t LocalSearchIntent.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  *(void *)(v2 + v3) = static LocalSearchIntent.domainNode;
  uint64_t v4 = v2 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v5 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
  swift_retain();
  return v2;
}

uint64_t LocalSearchIntent.init(from:)(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_domainOntologyNode;
  if (one-time initialization token for domainNode != -1) {
    swift_once();
  }
  *(void *)(v1 + v3) = static LocalSearchIntent.domainNode;
  uint64_t v4 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v5 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
  swift_retain();
  return v1;
}

uint64_t LocalSearchIntent.category.getter()
{
  if (one-time initialization token for categoryNode != -1) {
    swift_once();
  }
  type metadata accessor for LocalSearchIntent();
  lazy protocol witness table accessor for type LocalSearchIntent and conformance LocalSearchIntent(&lazy protocol witness table cache variable for type LocalSearchIntent and conformance LocalSearchIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  return v1;
}

uint64_t type metadata accessor for LocalSearchIntent()
{
  uint64_t result = type metadata singleton initialization cache for LocalSearchIntent;
  if (!type metadata singleton initialization cache for LocalSearchIntent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t LocalSearchIntent.occupant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NonTerminalIntentNode();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v17 = v1;
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  type metadata accessor for LocalSearchIntent();
  lazy protocol witness table accessor for type LocalSearchIntent and conformance LocalSearchIntent(&lazy protocol witness table cache variable for type LocalSearchIntent and conformance LocalSearchIntent);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of NonTerminalIntentNode?((uint64_t)v5);
    uint64_t v13 = type metadata accessor for OccupantIntentNode();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    swift_allocObject();
    AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
    OccupantIntentNode.init(intentNode:ontologyNode:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    uint64_t v15 = type metadata accessor for OccupantIntentNode();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 0, 1, v15);
  }
}

uint64_t LocalSearchIntent.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v2 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t LocalSearchIntent.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v2 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

unint64_t lazy protocol witness table accessor for type LocalSearchIntent.LocalSearchCategory and conformance LocalSearchIntent.LocalSearchCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalSearchIntent.LocalSearchCategory and conformance LocalSearchIntent.LocalSearchCategory;
  if (!lazy protocol witness table cache variable for type LocalSearchIntent.LocalSearchCategory and conformance LocalSearchIntent.LocalSearchCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalSearchIntent.LocalSearchCategory and conformance LocalSearchIntent.LocalSearchCategory);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LocalSearchIntent.LocalSearchCategory()
{
  return lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<INPerson, INPerson> and conformance PromptForDisambiguationFlowAsync<A, B>(&lazy protocol witness table cache variable for type [LocalSearchIntent.LocalSearchCategory] and conformance [A], &demangling cache variable for type metadata for [LocalSearchIntent.LocalSearchCategory]);
}

uint64_t base witness table accessor for IntentNodeTraversable in LocalSearchIntent()
{
  return lazy protocol witness table accessor for type LocalSearchIntent and conformance LocalSearchIntent(&lazy protocol witness table cache variable for type LocalSearchIntent and conformance LocalSearchIntent);
}

uint64_t base witness table accessor for CustomStringConvertible in LocalSearchIntent()
{
  return lazy protocol witness table accessor for type LocalSearchIntent and conformance LocalSearchIntent(&lazy protocol witness table cache variable for type LocalSearchIntent and conformance LocalSearchIntent);
}

uint64_t lazy protocol witness table accessor for type LocalSearchIntent and conformance LocalSearchIntent(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LocalSearchIntent();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for NLIntentWrapper.intent.getter in conformance LocalSearchIntent@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin17LocalSearchIntent_intent;
  uint64_t v4 = type metadata accessor for NLIntent();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t protocol witness for NLIntentWrapper.domainOntologyNode.getter in conformance LocalSearchIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for GeoIntent.getIntentType() in conformance LocalSearchIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for GeoIntent.occupant.getter in conformance LocalSearchIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance LocalSearchIntent(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return NLIntentWrapper.traversableIntentNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance LocalSearchIntent(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return NLIntentWrapper.traversableOntologyNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LocalSearchIntent()
{
  swift_getWitnessTable();

  return NLIntentWrapper.description.getter();
}

uint64_t sub_A34E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_A3534(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 104);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ObjC metadata update function for LocalSearchIntent()
{
  return type metadata accessor for LocalSearchIntent();
}

unsigned char *storeEnumTagSinglePayload for LocalSearchIntent.LocalSearchCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xA365CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalSearchIntent.LocalSearchCategory()
{
  return &type metadata for LocalSearchIntent.LocalSearchCategory;
}

uint64_t DeleteParkingBaseRCHStrategy.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t DeleteParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Parse();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(DeleteParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:), 0, 0);
}

uint64_t DeleteParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  os_log_type_t v38 = v0;
  uint64_t v1 = (void *)v0[4];
  if (v1)
  {
    uint64_t v2 = v0[5];
    id v3 = v1;
    os_log_type_t v4 = static os_log_type_t.info.getter();
    uint64_t v5 = *(NSObject **)(v2 + 16);
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      id v7 = v3;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      id v3 = v7;
      id v9 = [v3 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v5, v6, "makeIntentFromParse with current intent: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    goto LABEL_10;
  }
  uint64_t v14 = v0[7];
  uint64_t v13 = v0[8];
  uint64_t v15 = v0[6];
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 16))(v13, v0[3], v15);
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v13, v15);
  if (v16 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(void, void))(v0[7] + 96))(v0[8], v0[6]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v17 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    self;
    uint64_t v18 = swift_dynamicCastObjCClass();

    uint64_t v19 = v0[8];
    if (v18)
    {
      Parse.ServerConversion.siriKitIntent.getter();
      swift_release();
      self;
      id v3 = (id)swift_dynamicCastObjCClassUnconditional();
      uint64_t v20 = type metadata accessor for NLIntent();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
LABEL_10:
      swift_task_dealloc();
      uint64_t v27 = (uint64_t (*)(id))v0[1];
      return v27(v3);
    }
    type metadata accessor for RuntimeError();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = 0xD000000000000039;
    *(void *)(v31 + 24) = 0x80000000000C9570;
    _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
    swift_allocError();
    *uint64_t v32 = v31;
    swift_willThrow();
    swift_release();
    uint64_t v33 = type metadata accessor for NLIntent();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v19, v33);
  }
  else
  {
    uint64_t v22 = v0[7];
    char v21 = (void **)v0[8];
    uint64_t v23 = v0[6];
    if (v16 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(void, void))(v22 + 96))(v0[8], v0[6]);
      uint64_t v24 = *v21;
      uint64_t v25 = PommesResponse.firstGeoExperience.getter();
      if (v25)
      {
        uint64_t v26 = (void *)v25;
        id v3 = [objc_allocWithZone((Class)INDeleteParkingLocationIntent) init];

        goto LABEL_10;
      }
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for RuntimeError();
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = 0xD00000000000002BLL;
      *(void *)(v34 + 24) = 0x80000000000C95F0;
      _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
      swift_allocError();
      *uint64_t v35 = v34;
      swift_willThrow();
    }
    else
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for RuntimeError();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = 0xD000000000000047;
      *(void *)(v29 + 24) = 0x80000000000CA3F0;
      _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
      swift_allocError();
      *uint64_t v30 = v29;
      swift_willThrow();
      (*(void (**)(void **, uint64_t))(v22 + 8))(v21, v23);
    }
  }
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t DeleteParkingBaseRCHStrategy.actionForInput(input:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  os_log_type_t v4 = (id *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  os_log_type_t v6 = (char *)&v11 - v5;
  Input.parse.getter();
  (*(void (**)(id *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  int v7 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v4, v0);
  if (v7 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(id *, uint64_t))(v1 + 96))(v4, v0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    static ActionForInput.handle()();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    uint64_t v8 = type metadata accessor for NLIntent();
    return (*(uint64_t (**)(id *, uint64_t))(*(void *)(v8 - 8) + 8))(v4, v8);
  }
  else if (v7 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v1 + 96))(v4, v0);

    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
    static ActionForInput.handle()();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    static ActionForInput.cancel()();
    uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
    v10(v6, v0);
    return ((uint64_t (*)(id *, uint64_t))v10)(v4, v0);
  }
}

uint64_t DeleteParkingBaseRCHStrategy.init()()
{
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance DeleteParkingBaseRCHStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 88)
                                                + **(int **)(**(void **)v2 + 88));
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *os_log_type_t v6 = v3;
  v6[1] = protocol witness for HandleFilterProtocolAsync.filterHandles(recipients:) in conformance ContactHandleResolver;
  return v8(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DeleteParkingBaseRCHStrategy();

  return RCHFlowStrategyAsync.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  *unint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  *unint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for DeleteParkingBaseRCHStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_2(&lazy protocol witness table cache variable for type DeleteParkingBaseRCHStrategy and conformance DeleteParkingBaseRCHStrategy, a2, (void (*)(uint64_t))type metadata accessor for DeleteParkingBaseRCHStrategy);
}

uint64_t type metadata accessor for DeleteParkingBaseRCHStrategy()
{
  return self;
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_2(&lazy protocol witness table cache variable for type DeleteParkingBaseRCHStrategy and conformance DeleteParkingBaseRCHStrategy, a2, (void (*)(uint64_t))type metadata accessor for DeleteParkingBaseRCHStrategy);
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in DeleteParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_2(&lazy protocol witness table cache variable for type DeleteParkingBaseRCHStrategy and conformance DeleteParkingBaseRCHStrategy, a2, (void (*)(uint64_t))type metadata accessor for DeleteParkingBaseRCHStrategy);
}

uint64_t _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_2(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t SaveParkingBaseRCHStrategy.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t SaveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocationAction();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Parse();
  v3[12] = v6;
  v3[13] = *(void *)(v6 - 8);
  v3[14] = swift_task_alloc();
  return _swift_task_switch(SaveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:), 0, 0);
}

uint64_t SaveParkingBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  uint64_t v46 = v0;
  uint64_t v1 = (void *)v0[4];
  if (v1)
  {
    uint64_t v2 = v0[5];
    id v3 = v1;
    os_log_type_t v4 = static os_log_type_t.info.getter();
    uint64_t v5 = *(NSObject **)(v2 + 16);
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      id v7 = v3;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      id v3 = v7;
      id v9 = [v3 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v5, v6, "makeIntentFromParse with current intent: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    goto LABEL_10;
  }
  uint64_t v14 = v0[13];
  uint64_t v13 = v0[14];
  uint64_t v15 = v0[12];
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 16))(v13, v0[3], v15);
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v13, v15);
  if (v16 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(void, void))(v0[13] + 96))(v0[14], v0[12]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v17 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    self;
    uint64_t v18 = swift_dynamicCastObjCClass();

    uint64_t v19 = v0[14];
    if (v18)
    {
      Parse.ServerConversion.siriKitIntent.getter();
      swift_release();
      self;
      id v3 = (id)swift_dynamicCastObjCClassUnconditional();
      uint64_t v20 = type metadata accessor for NLIntent();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
LABEL_10:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v34 = (uint64_t (*)(id))v0[1];
      return v34(v3);
    }
    type metadata accessor for RuntimeError();
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = 0xD000000000000039;
    *(void *)(v38 + 24) = 0x80000000000C9570;
    _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
    swift_allocError();
    *uint64_t v39 = v38;
    swift_willThrow();
    swift_release();
    uint64_t v40 = type metadata accessor for NLIntent();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v19, v40);
  }
  else
  {
    uint64_t v22 = v0[13];
    char v21 = (void **)v0[14];
    uint64_t v23 = v0[12];
    if (v16 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(void, void))(v22 + 96))(v0[14], v0[12]);
      uint64_t v24 = *v21;
      uint64_t v25 = PommesResponse.firstGeoExperience.getter();
      if (v25)
      {
        uint64_t v26 = (void *)v25;
        uint64_t v28 = v0[10];
        uint64_t v27 = v0[11];
        uint64_t v29 = v0[8];
        uint64_t v44 = v0[9];
        uint64_t v31 = v0[6];
        uint64_t v30 = v0[7];
        GeoExperience.geoClientComponent.getter();
        Apple_Parsec_Siri_V2alpha_GeoClientComponent.parkingLocationAction.getter();
        Apple_Parsec_Siri_V2alpha_ParkingLocationAction.note.getter();
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
        id v32 = objc_allocWithZone((Class)INSaveParkingLocationIntent);
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v3 = [v32 initWithParkingLocation:0 parkingNote:v33];

        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v44);
        goto LABEL_10;
      }
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for RuntimeError();
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = 0xD00000000000002BLL;
      *(void *)(v41 + 24) = 0x80000000000C95F0;
      _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
      swift_allocError();
      *id v42 = v41;
      swift_willThrow();
    }
    else
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for RuntimeError();
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = 0xD000000000000045;
      *(void *)(v36 + 24) = 0x80000000000CA480;
      _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
      swift_allocError();
      *uint64_t v37 = v36;
      swift_willThrow();
      (*(void (**)(void **, uint64_t))(v22 + 8))(v21, v23);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = (uint64_t (*)(void))v0[1];
  return v43();
}

uint64_t SaveParkingBaseRCHStrategy.actionForInput(input:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  os_log_type_t v4 = (id *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  os_log_type_t v6 = (char *)&v11 - v5;
  Input.parse.getter();
  (*(void (**)(id *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  int v7 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v4, v0);
  if (v7 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(id *, uint64_t))(v1 + 96))(v4, v0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    static ActionForInput.handle()();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    uint64_t v8 = type metadata accessor for NLIntent();
    return (*(uint64_t (**)(id *, uint64_t))(*(void *)(v8 - 8) + 8))(v4, v8);
  }
  else if (v7 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(id *, uint64_t))(v1 + 96))(v4, v0);

    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
    static ActionForInput.handle()();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    static ActionForInput.cancel()();
    uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
    v10(v6, v0);
    return ((uint64_t (*)(id *, uint64_t))v10)(v4, v0);
  }
}

uint64_t SaveParkingBaseRCHStrategy.init()()
{
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance SaveParkingBaseRCHStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 88)
                                                + **(int **)(**(void **)v2 + 88));
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *os_log_type_t v6 = v3;
  v6[1] = protocol witness for HandleFilterProtocolAsync.filterHandles(recipients:) in conformance ContactHandleResolver;
  return v8(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for SaveParkingBaseRCHStrategy();

  return RCHFlowStrategyAsync.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for SaveParkingBaseRCHStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for SaveParkingBaseRCHStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for SaveParkingBaseRCHStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for SaveParkingBaseRCHStrategy();
  *unint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for SaveParkingBaseRCHStrategy();
  *unint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingBaseRCHStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_3(&lazy protocol witness table cache variable for type SaveParkingBaseRCHStrategy and conformance SaveParkingBaseRCHStrategy, a2, (void (*)(uint64_t))type metadata accessor for SaveParkingBaseRCHStrategy);
}

uint64_t type metadata accessor for SaveParkingBaseRCHStrategy()
{
  return self;
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_3(&lazy protocol witness table cache variable for type SaveParkingBaseRCHStrategy and conformance SaveParkingBaseRCHStrategy, a2, (void (*)(uint64_t))type metadata accessor for SaveParkingBaseRCHStrategy);
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in SaveParkingBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  return _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_3(&lazy protocol witness table cache variable for type SaveParkingBaseRCHStrategy and conformance SaveParkingBaseRCHStrategy, a2, (void (*)(uint64_t))type metadata accessor for SaveParkingBaseRCHStrategy);
}

uint64_t _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_3(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t TrafficIncidentBaseFlow.__allocating_init(with:flowHelper:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  TrafficIncidentBaseFlow.init(with:flowHelper:)(a1, a2);
  return v4;
}

uint64_t key path setter for TrafficIncidentBaseFlow.flowState : TrafficIncidentBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TrafficIncidentBaseFlow.State(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 120))(v6);
}

uint64_t TrafficIncidentBaseFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState;
  swift_beginAccess();
  return outlined init with copy of TrafficIncidentBaseFlow.State(v3, a1);
}

uint64_t TrafficIncidentBaseFlow.flowState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState;
  swift_beginAccess();
  outlined assign with take of TrafficIncidentBaseFlow.State(a1, v3);
  return swift_endAccess();
}

uint64_t (*TrafficIncidentBaseFlow.flowState.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t TrafficIncidentBaseFlow.flowHelper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowHelper;
  swift_beginAccess();
  return outlined init with copy of DeviceState(v3, a1);
}

uint64_t TrafficIncidentBaseFlow.flowHelper.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowHelper;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of CATType(a1, v3);
  return swift_endAccess();
}

uint64_t (*TrafficIncidentBaseFlow.flowHelper.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t TrafficIncidentBaseFlow.isPOMMES.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_isPOMMES);
  swift_beginAccess();
  return *v1;
}

uint64_t TrafficIncidentBaseFlow.isPOMMES.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_isPOMMES);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*TrafficIncidentBaseFlow.isPOMMES.modify())()
{
  return ShareETAPromptForContactStrategy.locationSearchIntent.modify;
}

uint64_t TrafficIncidentBaseFlow.init(with:flowHelper:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_isPOMMES) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState) = a1;
  type metadata accessor for TrafficIncidentBaseFlow.State(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of DeviceState(a2, v2 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowHelper);
  swift_retain();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  uint64_t v6 = *(NSObject **)(v2 + 16);
  os_log_type_t v7 = v5;
  if (os_log_type_enabled(v6, v5))
  {
    swift_retain_n();
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    type metadata accessor for LocationSearchIntent();
    lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent, (void (*)(uint64_t))type metadata accessor for LocationSearchIntent);
    uint64_t v9 = NLIntentWrapper.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v6, v7, "TrafficIncidentBaseFlow initialized with intent\n%s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_0Tm(a2);
  return v2;
}

uint64_t outlined init with copy of TrafficIncidentBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TrafficIncidentBaseFlow.State(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for TrafficIncidentBaseFlow.State);
}

uint64_t outlined assign with take of TrafficIncidentBaseFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t TrafficIncidentBaseFlow.__allocating_init(with:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  __chkstk_darwin(v3);
  os_log_type_t v5 = (uint64_t *)((char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18[3] = (uint64_t)&type metadata for FlowHelperImpl;
  v18[4] = (uint64_t)&protocol witness table for FlowHelperImpl;
  uint64_t v6 = swift_allocObject();
  os_log_type_t v7 = (void *)(v6 + 16);
  v18[0] = v6;
  swift_retain();
  FlowHelperImpl.init()(v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(v1 + 184))(a1, v18);
  uint64_t *v5 = a1;
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = v8 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  outlined assign with take of TrafficIncidentBaseFlow.State((uint64_t)v5, v9);
  swift_endAccess();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  uint64_t v11 = *(id *)(v8 + 16);
  swift_release();
  if (os_log_type_enabled(v11, v10))
  {
    swift_retain_n();
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v17 = a1;
    v18[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    type metadata accessor for LocationSearchIntent();
    lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type LocationSearchIntent and conformance LocationSearchIntent, (void (*)(uint64_t))type metadata accessor for LocationSearchIntent);
    uint64_t v14 = NLIntentWrapper.description.getter();
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v11, v10, "TrafficIncidentBaseFlow initialized with intent\n%s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {
    swift_release();
  }
  return v8;
}

uint64_t TrafficIncidentBaseFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t))(*(void *)v1 + 112))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    *(void *)a1 = *v6;
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v10 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(a1, v10, v11);
  }
  else if (EnumCaseMultiPayload == 5)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, v6, v8);
  }
  else
  {
    lazy protocol witness table accessor for type Errors and conformance Errors();
    uint64_t v12 = swift_allocError();
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(unsigned char *)(v13 + 16) = 3;
    *(void *)a1 = v12;
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v14 = enum case for RCHFlowResult.error<A, B>(_:);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(a1, v14, v15);
    return outlined destroy of TrafficIncidentBaseFlow.State((uint64_t)v6);
  }
}

uint64_t TrafficIncidentBaseFlow.onInput(input:)(uint64_t a1)
{
  uint64_t v41 = type metadata accessor for Input();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation();
  id v42 = *(uint8_t **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Parse();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (id *)((char *)&v39 - v13);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v39 - v15;
  Input.parse.getter();
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v16, v7);
  if (v17 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v18 = v1[2];
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "TrafficIncidentBaseFlow onInput returns true for Nlv3Only.", v20, 2u);
LABEL_12:
      swift_slowDealloc();
      uint64_t v22 = 1;
      goto LABEL_22;
    }
    uint64_t v22 = 1;
    goto LABEL_22;
  }
  if (v17 == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v7);
    (*(void (**)(char *, uint64_t))(v8 + 96))(v11, v7);
    (*((void (**)(char *, char *, uint64_t))v42 + 4))(v6, v11, v4);
    if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000033 && v21 == 0x80000000000C67E0)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      uint64_t v27 = v1[2];
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl(&dword_0, v27, v28, "TrafficIncidentBaseFlow onInput returns true for directInvocation.", v29, 2u);
        swift_slowDealloc();
      }
      (*((void (**)(char *, uint64_t))v42 + 1))(v6, v4);
      uint64_t v22 = 1;
      goto LABEL_22;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_14;
    }
    (*((void (**)(char *, uint64_t))v42 + 1))(v6, v4);
LABEL_18:
    uint64_t v30 = v1[2];
    uint64_t v32 = v39;
    uint64_t v31 = v40;
    uint64_t v33 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v40, a1, v41);
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      id v42 = v35 + 4;
      uint64_t v36 = Input.description.getter();
      uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v40, v41);
      _os_log_impl(&dword_0, v30, v34, "SiriGeo currently doesn't support parse type: %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
    }
    uint64_t v22 = 0;
    goto LABEL_22;
  }
  if (v17 != enum case for Parse.pommesResponse(_:)) {
    goto LABEL_18;
  }
  (*(void (**)(id *, char *, uint64_t))(v8 + 16))(v14, v16, v7);
  (*(void (**)(id *, uint64_t))(v8 + 96))(v14, v7);

  uint64_t v22 = 1;
  (*(void (**)(uint64_t))(*v1 + 168))(1);
  uint64_t v23 = v1[2];
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "TrafficIncidentBaseFlow onInput returns true for Pommes response.", v25, 2u);
    goto LABEL_12;
  }
LABEL_22:
  (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
  return v22;
}

uint64_t TrafficIncidentBaseFlow.executeState()(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentBaseFlow.executeState(), 0, 0);
}

uint64_t TrafficIncidentBaseFlow.executeState()()
{
  void (*v45)(long long *__return_ptr, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  uint8_t *buf;
  uint64_t (*type)(uint64_t, uint64_t, uint64_t);
  os_log_type_t typea;
  NSObject *log;
  long long v55[2];
  uint64_t v56;
  uint64_t v57;

  uint64_t v56 = v0;
  (*(void (**)(void))(**(void **)(v0 + 72) + 112))();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v1 = **(void **)(v0 + 136);
      goto LABEL_16;
    case 2u:
      uint64_t v5 = *(void *)(v0 + 72);
      uint64_t v6 = **(void **)(v0 + 136);
      (*(void (**)(long long *__return_ptr))(*(void *)v5 + 136))(v55);
      type metadata accessor for LocationFetchFlow();
      swift_allocObject();
      *(void *)(v0 + 40) = LocationFetchFlow.init(flowHelper:requiredAccess:)(v55, 1);
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v5;
      *(void *)(v7 + 24) = v6;
      lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type LocationFetchFlow and conformance LocationFetchFlow, (void (*)(uint64_t))type metadata accessor for LocationFetchFlow);
      swift_retain();
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_19;
    case 3u:
      uint64_t v8 = *(uint64_t **)(v0 + 136);
      uint64_t v9 = *(void *)(v0 + 72);
      uint64_t v10 = *v8;
      *(void *)(v0 + 144) = *v8;
      uint64_t v11 = v8[1];
      *(void *)(v0 + 152) = v11;
      os_log_type_t type = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v9 + 216)
                                                               + **(int **)(*(void *)v9 + 216));
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 160) = v12;
      *uint64_t v12 = v0;
      v12[1] = TrafficIncidentBaseFlow.executeState();
      uint64_t v13 = *(void *)(v0 + 64);
      return type(v13, v10, v11);
    case 4u:
      uint64_t v15 = *(void *)(v0 + 72);
      uint64_t v16 = **(void **)(v0 + 136);
      os_log_type_t v17 = static os_log_type_t.error.getter();
      uint64_t v18 = *(NSObject **)(v15 + 16);
      os_log_type_t v19 = v17;
      if (os_log_type_enabled(v18, v17))
      {
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(void *)&v55[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315138;
        *(void *)(v0 + 24) = v16;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v21 = String.init<A>(describing:)();
        *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v18, v19, "TrafficIncidentBaseFlow execute requestUnsupported with error %s", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      static ExecuteResponse.complete()();
      swift_errorRelease();
      goto LABEL_19;
    case 5u:
      uint64_t v24 = *(void *)(v0 + 104);
      uint64_t v23 = *(void *)(v0 + 112);
      uint64_t v26 = *(void *)(v0 + 80);
      uint64_t v25 = *(void *)(v0 + 88);
      uint64_t v27 = *(void *)(v0 + 72);
      (*(void (**)(uint64_t, void, uint64_t))(v25 + 32))(v23, *(void *)(v0 + 136), v26);
      os_log_type_t v28 = static os_log_type_t.info.getter();
      uint64_t v29 = *(NSObject **)(v27 + 16);
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
      v30(v24, v23, v26);
      os_log_type_t v31 = v28;
      BOOL v32 = os_log_type_enabled(v29, v28);
      uint64_t v33 = *(void *)(v0 + 104);
      if (v32)
      {
        log = v29;
        uint64_t v35 = *(void *)(v0 + 88);
        uint64_t v34 = *(void *)(v0 + 96);
        os_log_type_t typea = v31;
        uint64_t v36 = *(void *)(v0 + 80);
        unint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(void *)&v55[0] = swift_slowAlloc();
        buf = v37;
        *(_DWORD *)unint64_t v37 = 136315138;
        v30(v34, v33, v36);
        uint64_t v38 = String.init<A>(describing:)();
        *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
        v40(v33, v36);
        _os_log_impl(&dword_0, log, typea, "TrafficIncidentBaseFlow execute rchComplete with result %s", buf, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v40 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 88) + 8);
        v40(*(void *)(v0 + 104), *(void *)(v0 + 80));
      }
      uint64_t v48 = *(void *)(v0 + 112);
      uint64_t v49 = *(void *)(v0 + 80);
      static ExecuteResponse.complete()();
      v40(v48, v49);
      goto LABEL_19;
    case 6u:
      static ExecuteResponse.complete()();
      goto LABEL_19;
    default:
      uint64_t v1 = **(void **)(v0 + 136);
      if ([self isSiriLocationServicesPromptingEnabled])
      {
        uint64_t v2 = *(void *)(v0 + 72);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
        type metadata accessor for CommonFlowGuard();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_C0600;
        static CommonFlowGuard.ensuringSiriLocationAccess(needsPreciseLocation:)();
        uint64_t v3 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 56) = v3;
        uint64_t v4 = swift_allocObject();
        *(void *)(v4 + 16) = v2;
        *(void *)(v4 + 24) = v1;
        type metadata accessor for GuardFlow();
        swift_retain();
        swift_retain();
        static ExecuteResponse.ongoing<A>(next:childCompletion:)();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v41 = *(uint64_t **)(v0 + 128);
        uint64_t v42 = *(void *)(v0 + 72);
        *uint64_t v41 = v1;
        swift_storeEnumTagMultiPayload();
        uint64_t v43 = *(void (**)(uint64_t *))(*(void *)v42 + 120);
        swift_retain();
        v43(v41);
LABEL_16:
        uint64_t v44 = *(void *)(v0 + 72);
        uint64_t v45 = *(void (**)(long long *__return_ptr, uint64_t))(*(void *)v44 + 136);
        uint64_t v46 = swift_retain();
        v45(v55, v46);
        type metadata accessor for TrafficIncidentRequestSupportedCheckFlow();
        swift_allocObject();
        *(void *)(v0 + 48) = TrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(v1, v55);
        uint64_t v47 = swift_allocObject();
        *(void *)(v47 + 16) = v44;
        *(void *)(v47 + 24) = v1;
        lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type TrafficIncidentRequestSupportedCheckFlow and conformance TrafficIncidentRequestSupportedCheckFlow, (void (*)(uint64_t))type metadata accessor for TrafficIncidentRequestSupportedCheckFlow);
        swift_retain();
        static ExecuteResponse.ongoing<A>(next:childCompletion:)();
        swift_release();
        swift_release();
      }
LABEL_19:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
      return v50();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(TrafficIncidentBaseFlow.executeState(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in TrafficIncidentBaseFlow.executeState()(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v9 = *a1;
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  if (v9 == 1)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *))(*(void *)a2 + 120))(v8);
  }
  else
  {
    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
    *uint64_t v8 = a3;
    swift_storeEnumTagMultiPayload();
    uint64_t v11 = *(uint64_t (**)(void *))(*(void *)a2 + 120);
    swift_retain();
    return v11(v8);
  }
}

void closure #3 in TrafficIncidentBaseFlow.executeState()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(unsigned char *)(a1 + 8))
  {
    type metadata accessor for UnsupportedError();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = 0xD000000000000014;
    *(void *)(v9 + 24) = 0x80000000000CA5C0;
    lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type UnsupportedError and conformance UnsupportedError, (void (*)(uint64_t))type metadata accessor for UnsupportedError);
    uint64_t v10 = swift_allocError();
    uint64_t *v11 = v9;
    *uint64_t v8 = v10;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *))(*a2 + 120))(v8);
  }
  else
  {
    uint64_t v12 = *(void **)a1;
    id v13 = v12;
    os_log_type_t v14 = static os_log_type_t.default.getter();
    uint64_t v15 = a2[2];
    int v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      outlined copy of LocationFetchFlow.ExitValue(v12, 0);
      outlined copy of LocationFetchFlow.ExitValue(v12, 0);
      uint64_t v47 = a3;
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v49 = v46;
      uint64_t v45 = v17;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      uint64_t v43 = v17 + 4;
      id v18 = [v13 description];
      LODWORD(v44) = v16;
      os_log_type_t v19 = v15;
      uint64_t v20 = v12;
      id v21 = v13;
      id v22 = v18;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      id v13 = v21;
      uint64_t v12 = v20;
      uint64_t v15 = v19;
      outlined consume of LocationFetchFlow.ExitValue(v12, 0);
      uint64_t v26 = v23;
      a3 = v47;
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of LocationFetchFlow.ExitValue(v12, 0);
      outlined consume of LocationFetchFlow.ExitValue(v12, 0);
      _os_log_impl(&dword_0, v19, (os_log_type_t)v44, "location: %s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    [v13 horizontalAccuracy];
    if (v27 >= 0.0)
    {
      os_log_type_t v30 = static os_log_type_t.default.getter();
      int v31 = v30;
      if (os_log_type_enabled(v15, v30))
      {
        outlined copy of LocationFetchFlow.ExitValue(v12, 0);
        outlined copy of LocationFetchFlow.ExitValue(v12, 0);
        uint64_t v47 = a3;
        BOOL v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        uint64_t v49 = v46;
        LODWORD(v45) = v31;
        *(_DWORD *)BOOL v32 = 136315138;
        uint64_t v43 = v32 + 4;
        id v33 = [v13 description];
        os_log_t v44 = v15;
        uint64_t v34 = v12;
        id v35 = v13;
        id v36 = v33;
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v39 = v38;

        id v13 = v35;
        uint64_t v12 = v34;
        outlined consume of LocationFetchFlow.ExitValue(v34, 0);
        uint64_t v40 = v37;
        a3 = v47;
        uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of LocationFetchFlow.ExitValue(v34, 0);
        outlined consume of LocationFetchFlow.ExitValue(v34, 0);
        _os_log_impl(&dword_0, v44, (os_log_type_t)v45, "returning success: %s", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      *uint64_t v8 = a3;
      v8[1] = (uint64_t)v13;
      swift_storeEnumTagMultiPayload();
      uint64_t v41 = *(void (**)(uint64_t *))(*a2 + 120);
      outlined copy of LocationFetchFlow.ExitValue(v12, 0);
      swift_retain();
      v41(v8);
    }
    else
    {
      lazy protocol witness table accessor for type Errors and conformance Errors();
      uint64_t v28 = swift_allocError();
      *(void *)uint64_t v29 = 0xD00000000000001ELL;
      *(void *)(v29 + 8) = 0x80000000000CA5E0;
      *(unsigned char *)(v29 + 16) = 2;
      *uint64_t v8 = v28;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *))(*a2 + 120))(v8);
    }
    outlined consume of LocationFetchFlow.ExitValue(v12, 0);
  }
}

void closure #2 in TrafficIncidentBaseFlow.executeState()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (os_log_t *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)a1;
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 8) == 1)
    {
      swift_errorRetain();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      uint64_t v11 = a2[2];
      os_log_type_t v12 = v10;
      if (os_log_type_enabled(v11, v10))
      {
        outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
        outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
        v19[0] = v11;
        id v13 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v14 = (void *)swift_slowAlloc();
        *(_DWORD *)id v13 = 138412290;
        swift_errorRetain();
        uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
        v19[1] = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v14 = v15;
        outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
        outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
        _os_log_impl(&dword_0, v19[0], v12, "exitValue error: %@", v13, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      *uint64_t v8 = v9;
      swift_storeEnumTagMultiPayload();
      int v16 = *(void (**)(void *))(*a2 + 120);
      swift_errorRetain();
      v16(v8);
      outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 1);
    }
    else
    {
      *uint64_t v8 = a3;
      swift_storeEnumTagMultiPayload();
      id v18 = *(void (**)(void *))(*a2 + 120);
      swift_retain();
      v18(v8);
    }
  }
  else
  {
    *uint64_t v8 = a3;
    v8[1] = v9;
    swift_storeEnumTagMultiPayload();
    os_log_type_t v17 = *(void (**)(void *))(*a2 + 120);
    swift_retain();
    outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v9, 0);
    v17(v8);
  }
}

uint64_t TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[26] = a3;
  v4[27] = v3;
  v4[24] = a1;
  v4[25] = a2;
  uint64_t v5 = type metadata accessor for Parse();
  v4[28] = v5;
  v4[29] = *(void *)(v5 - 8);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Input();
  v4[32] = v6;
  v4[33] = *(void *)(v6 - 8);
  v4[34] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INReportIncidentIntent, INReportIncidentIntentResponse>);
  v4[35] = v7;
  v4[36] = *(void *)(v7 - 8);
  v4[37] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:), 0, 0);
}

uint64_t TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)()
{
  uint64_t v28 = v0;
  uint64_t v22 = *(void *)(v0 + 248);
  uint64_t v23 = *(void *)(v0 + 232);
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v24 = *(void *)(v0 + 224);
  uint64_t v25 = *(void *)(v0 + 208);
  uint64_t v26 = *(void *)(v0 + 240);
  uint64_t v21 = *(void *)(v0 + 200);
  static os_log_type_t.info.getter();
  *(void *)(v0 + 304) = v1[2];
  os_log(_:dso:log:_:_:)();
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INReportIncidentIntent);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INReportIncidentIntentResponse);
  RCHChildFlowProducersAsync.init()();
  type metadata accessor for App();
  swift_allocObject();
  *(void *)(v0 + 312) = App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  uint64_t v2 = RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  uint64_t v3 = *(void (**)(uint64_t))(*v1 + 136);
  unint64_t v4 = (*v1 + 136) & 0xFFFFFFFFFFFFLL | 0x94CB000000000000;
  *(void *)(v0 + 320) = v3;
  *(void *)(v0 + 328) = v4;
  v3(v2);
  type metadata accessor for TrafficIncidentHandleIntentStrategy();
  uint64_t v5 = swift_allocObject();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v5 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType((long long *)(v0 + 16), v5 + 24);
  *(void *)(v0 + 176) = v5;
  lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type TrafficIncidentHandleIntentStrategy and conformance TrafficIncidentHandleIntentStrategy, (void (*)(uint64_t))type metadata accessor for TrafficIncidentHandleIntentStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  uint64_t v6 = RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  ((void (*)(long long *__return_ptr, uint64_t))v3)(v27, v6);
  type metadata accessor for TrafficIncidentContinueInAppPunchoutStrategy();
  swift_allocObject();
  *(void *)(v0 + 168) = TrafficIncidentContinueInAppPunchoutStrategy.init(with:)(v27);
  lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type TrafficIncidentContinueInAppPunchoutStrategy and conformance TrafficIncidentContinueInAppPunchoutStrategy, (void (*)(uint64_t))type metadata accessor for TrafficIncidentContinueInAppPunchoutStrategy);
  static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)();
  swift_release();
  uint64_t v7 = RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  char v8 = (*(uint64_t (**)(uint64_t))(*v1 + 160))(v7);
  v3((uint64_t)v27);
  type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy();
  swift_allocObject();
  *(void *)(v0 + 136) = TrafficIncidentNeedsDisambiguationStrategy.init(isPommes:with:)(v8 & 1, v27);
  lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type TrafficIncidentNeedsDisambiguationStrategy and conformance TrafficIncidentNeedsDisambiguationStrategy, (void (*)(uint64_t))type metadata accessor for TrafficIncidentNeedsDisambiguationStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  swift_release();
  uint64_t v9 = RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  ((void (*)(long long *__return_ptr, uint64_t))v3)(v27, v9);
  type metadata accessor for TrafficIncidentUnsupportedValueStrategy();
  swift_allocObject();
  *(void *)(v0 + 144) = TrafficIncidentUnsupportedValueStrategy.init(with:)(v27);
  lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type TrafficIncidentUnsupportedValueStrategy and conformance TrafficIncidentUnsupportedValueStrategy, (void (*)(uint64_t))type metadata accessor for TrafficIncidentUnsupportedValueStrategy);
  static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  uint64_t v10 = v21 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v20 = v21 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin20LocationSearchIntent_intent;
  uint64_t v11 = type metadata accessor for NLIntent();
  os_log_type_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v19(v22, v10, v11);
  uint64_t v12 = enum case for Parse.NLv3IntentOnly(_:);
  id v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 104);
  v13(v22, enum case for Parse.NLv3IntentOnly(_:), v24);
  Input.init(parse:)();
  *(void *)(v0 + 336) = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  uint64_t v14 = swift_allocObject();
  *(void *)(v0 + 344) = v14;
  *(void *)(v14 + 16) = OS_os_log.init(subsystem:category:)();
  id v15 = specialized static TrafficIncidentUtils.makeSiriKitIntentWithUserLocation(locationSearchIntent:userLocation:)(v21, v25);
  *(void *)(v0 + 352) = v15;
  v19(v26, v20, v11);
  v13(v26, v12, v24);
  int v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 360) = v16;
  *int v16 = v0;
  v16[1] = TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:);
  uint64_t v17 = *(void *)(v0 + 240);
  return TrafficIncidentBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(v17, (uint64_t)v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v14 = *(void **)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 336);
  id v13 = *(void **)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v11 = *(void *)(v0 + 296);
  int v16 = *(void *)(v0 + 288);
  os_log_type_t v19 = *(void *)(v0 + 280);
  id v15 = *(void *)(v0 + 264);
  uint64_t v17 = *(void *)(v0 + 256);
  id v18 = *(void *)(v0 + 272);
  (*(void (**)(void))(v0 + 320))();
  uint64_t v3 = *(void *)(v0 + 120);
  unint64_t v4 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v6);
  *(void *)(v0 + 184) = v1;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8);
  char v8 = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type TrafficIncidentBaseRCHStrategy and conformance TrafficIncidentBaseRCHStrategy, (void (*)(uint64_t))type metadata accessor for TrafficIncidentBaseRCHStrategy);
  v7(v0 + 184, v11, v2, v13, v12, v8, v6, v5);
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v17);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v11, v19);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  os_log_type_t v19 = v0;
  uint64_t v1 = v0[38];
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[46];
    unint64_t v4 = v0[38];
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    id v18 = v6;
    v0[19] = v3;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = String.init<A>(describing:)();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v4, v2, "TrafficIncidentBaseFlow makeRCHFlow failure: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v9 = (void *)v0[44];
  uint64_t v10 = v0[36];
  uint64_t v17 = v0[37];
  uint64_t v12 = v0[34];
  uint64_t v11 = v0[35];
  uint64_t v14 = v0[32];
  id v13 = v0[33];
  static ExecuteResponse.complete()();
  swift_release();
  swift_release();
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v17, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)(uint64_t a1)
{
  unint64_t v4 = (void *)*v2;
  v4[46] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[30];
  uint64_t v6 = v4[29];
  uint64_t v7 = v4[28];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    char v8 = TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:);
  }
  else
  {
    v4[47] = a1;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    char v8 = TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:);
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t closure #1 in TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *))(*(void *)a2 + 120))(v6);
}

uint64_t TrafficIncidentBaseFlow.deinit()
{
  outlined destroy of TrafficIncidentBaseFlow.State(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowHelper);
  return v0;
}

uint64_t TrafficIncidentBaseFlow.__deallocating_deinit()
{
  outlined destroy of TrafficIncidentBaseFlow.State((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowState);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v0 + OBJC_IVAR____TtC21GeoFlowDelegatePlugin23TrafficIncidentBaseFlow_flowHelper);
  uint64_t v1 = *((unsigned int *)*v0 + 12);
  uint64_t v2 = *((unsigned __int16 *)*v0 + 26);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for FSMFlow.flowState.getter in conformance TrafficIncidentBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for FSMFlow.onInput(input:) in conformance TrafficIncidentBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))() & 1;
}

uint64_t protocol witness for FSMFlow.executeState() in conformance TrafficIncidentBaseFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 208) + **(int **)(**(void **)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.on(input:) in conformance TrafficIncidentBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.on(input:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance TrafficIncidentBaseFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable();

  return FSMFlow.execute(completion:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute() in conformance TrafficIncidentBaseFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  void *v5 = v2;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return FSMFlow.execute()(a1, a2, WitnessTable);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance TrafficIncidentBaseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TrafficIncidentBaseFlow(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return FSMFlow.description.getter(a1, WitnessTable);
}

uint64_t sub_A988C()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t outlined destroy of TrafficIncidentBaseFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TrafficIncidentBaseFlow.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #3 in TrafficIncidentBaseFlow.executeState()(uint64_t a1)
{
  closure #3 in TrafficIncidentBaseFlow.executeState()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #2 in TrafficIncidentBaseFlow.executeState()(uint64_t a1)
{
  closure #2 in TrafficIncidentBaseFlow.executeState()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t objectdestroy_3Tm()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in TrafficIncidentBaseFlow.executeState()(unsigned __int8 *a1)
{
  return closure #1 in TrafficIncidentBaseFlow.executeState()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)(uint64_t a1)
{
  return closure #1 in TrafficIncidentBaseFlow.makeRCHFlow(locationSearchIntent:userLocation:)(a1, v1);
}

uint64_t instantiation function for generic protocol witness table for TrafficIncidentBaseFlow(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type TrafficIncidentBaseFlow and conformance TrafficIncidentBaseFlow, (void (*)(uint64_t))type metadata accessor for TrafficIncidentBaseFlow);
  uint64_t result = lazy protocol witness table accessor for type LocationSearchIntent and conformance LocationSearchIntent(&lazy protocol witness table cache variable for type TrafficIncidentBaseFlow and conformance TrafficIncidentBaseFlow, (void (*)(uint64_t))type metadata accessor for TrafficIncidentBaseFlow);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for TrafficIncidentBaseFlow(uint64_t a1)
{
  return type metadata accessor for ShareETA(a1, (uint64_t *)&type metadata singleton initialization cache for TrafficIncidentBaseFlow);
}

uint64_t sub_A9AA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112))();
}

uint64_t sub_A9AE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136))();
}

uint64_t sub_A9B2C(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 144))(v4);
}

uint64_t sub_A9B88@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_A9BD8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168))(*a1);
}

uint64_t ObjC metadata update function for TrafficIncidentBaseFlow()
{
  return type metadata accessor for TrafficIncidentBaseFlow(0);
}

uint64_t type metadata completion function for TrafficIncidentBaseFlow()
{
  uint64_t result = type metadata accessor for TrafficIncidentBaseFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrafficIncidentBaseFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v9 = *a2;
        uint64_t v10 = (void *)a2[1];
        *a1 = v9;
        a1[1] = (uint64_t)v10;
        swift_retain();
        id v11 = v10;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v12 = *a2;
        swift_errorRetain();
        *a1 = v12;
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for TrafficIncidentBaseFlow.State(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      uint64_t v2 = *(void **)(a1 + 8);

      break;
    case 4u:
      swift_errorRelease();
      break;
    case 5u:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    default:
      return;
  }
}

void *initializeWithCopy for TrafficIncidentBaseFlow.State(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
      *a1 = *a2;
      swift_retain();
      goto LABEL_7;
    case 3u:
      uint64_t v6 = *a2;
      uint64_t v7 = (void *)a2[1];
      *a1 = v6;
      a1[1] = v7;
      swift_retain();
      id v8 = v7;
      goto LABEL_7;
    case 4u:
      uint64_t v9 = *a2;
      swift_errorRetain();
      *a1 = v9;
      goto LABEL_7;
    case 5u:
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for TrafficIncidentBaseFlow.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TrafficIncidentBaseFlow.State((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *a1 = *a2;
        uint64_t v6 = (void *)a2[1];
        a1[1] = v6;
        swift_retain();
        id v7 = v6;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v8 = *a2;
        swift_errorRetain();
        *a1 = v8;
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for TrafficIncidentBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for TrafficIncidentBaseFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TrafficIncidentBaseFlow.State((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for TrafficIncidentBaseFlow.State()
{
  type metadata accessor for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>()
{
  if (!lazy cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>)
  {
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INReportIncidentIntent);
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for INReportIncidentIntentResponse);
    unint64_t v0 = type metadata accessor for RCHFlowResult();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RCHFlowResult<INReportIncidentIntent, INReportIncidentIntentResponse>);
    }
  }
}

void outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(id a1, char a2)
{
  if (a2 == 1)
  {
    swift_errorRelease();
  }
  else if (!a2)
  {
  }
}

id outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(id result, char a2)
{
  if (a2 == 1) {
    return (id)swift_errorRetain();
  }
  if (!a2) {
    return result;
  }
  return result;
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.__allocating_init(intent:flowHelper:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  TrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(a1, a2);
  return v4;
}

void *TrafficIncidentRequestSupportedCheckFlow.exitValue.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 80);
  outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v1, *(unsigned char *)(v0 + 88));
  return v1;
}

void TrafficIncidentRequestSupportedCheckFlow.exitValue.setter(uint64_t a1, char a2)
{
  swift_beginAccess();
  int v5 = *(void **)(v2 + 80);
  *(void *)(v2 + 80) = a1;
  char v6 = *(unsigned char *)(v2 + 88);
  *(unsigned char *)(v2 + 88) = a2;
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v5, v6);
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(uint64_t a1, long long *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for CATService();
  uint64_t v6 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v6 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(v6 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v6 + 16) = 0;
  *(void *)(v3 + 24) = v6;
  *(void *)(v3 + 72) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for RuntimeError();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0xD00000000000002CLL;
  *(void *)(v8 + 24) = 0x80000000000C6DD0;
  _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
  uint64_t v9 = swift_allocError();
  *uint64_t v10 = v8;
  *(void *)(v3 + 80) = v9;
  *(unsigned char *)(v3 + 88) = 1;
  *(void *)(v3 + 16) = a1;
  outlined init with take of CATType(a2, v3 + 32);
  return v3;
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.__allocating_init(intent:)(uint64_t a1)
{
  v4[3] = &type metadata for FlowHelperImpl;
  v4[4] = &protocol witness table for FlowHelperImpl;
  v4[0] = swift_allocObject();
  FlowHelperImpl.init()((void *)(v4[0] + 16));
  return (*(uint64_t (**)(uint64_t, void *))(v1 + 144))(a1, v4);
}

uint64_t sub_AA95C()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 144);
  swift_release();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.execute(completion:)()
{
  type metadata accessor for TrafficIncidentRequestSupportedCheckFlow();
  _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_4(&lazy protocol witness table cache variable for type TrafficIncidentRequestSupportedCheckFlow and conformance TrafficIncidentRequestSupportedCheckFlow, v0, (void (*)(uint64_t))type metadata accessor for TrafficIncidentRequestSupportedCheckFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t type metadata accessor for TrafficIncidentRequestSupportedCheckFlow()
{
  return self;
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.execute()(uint64_t a1)
{
  v2[69] = v1;
  v2[68] = a1;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[70] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[71] = v4;
  v2[72] = *(void *)(v4 + 64);
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  v2[75] = swift_task_alloc();
  v2[76] = swift_task_alloc();
  v2[77] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[78] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ActivityType();
  v2[79] = v5;
  v2[80] = *(void *)(v5 - 8);
  v2[81] = swift_task_alloc();
  v2[82] = swift_task_alloc();
  v2[83] = swift_task_alloc();
  v2[84] = swift_task_alloc();
  return _swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.execute(), 0, 0);
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.execute()()
{
  char v1 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v0 + 552) + 16) + 168))();
  if (LocationSearchIntent.LocationSearchVerbValue.rawValue.getter(v1) == 0x796669646F6DLL
    && v2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v4)
  {
LABEL_10:
    uint64_t v28 = *(void *)(v0 + 672);
    uint64_t v29 = *(void *)(v0 + 640);
    uint64_t v30 = *(void *)(v0 + 632);
    static SiriKitEventSender.current.getter();
    uint64_t v94 = v0 + 456;
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 456), *(void *)(v0 + 480));
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v28, enum case for ActivityType.failed(_:), v30);
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INReportIncidentIntent);
    uint64_t v8 = (uint64_t (*)())[(id)swift_getObjCClassFromMetadata() typeName];
    if (v8)
    {
      int v31 = v8;
      id v90 = (uint64_t *)(v0 + 496);
      uint64_t v32 = *(void *)(v0 + 624);
      id v33 = *(void **)(v0 + 552);
      type metadata accessor for SiriKitEvent();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v34 = enum case for SiriKitReliabilityCodes.unsupportedParameter(_:);
      id v35 = (void *)v0;
      uint64_t v36 = type metadata accessor for SiriKitReliabilityCodes();
      uint64_t v37 = *(void *)(v36 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 104))(v32, v34, v36);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v32, 0, 1, v36);
      SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
      dispatch thunk of SiriKitEventSending.send(_:)();
      swift_release();
      __swift_destroy_boxed_opaque_existential_0Tm(v94);
      type metadata accessor for UnsupportedError();
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = 0xD000000000000027;
      *(void *)(v38 + 24) = 0x80000000000CA670;
      _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_4(&lazy protocol witness table cache variable for type UnsupportedError and conformance UnsupportedError, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedError);
      uint64_t v39 = swift_allocError();
      *uint64_t v40 = v38;
      (*(void (**)(uint64_t, uint64_t))(*v33 + 128))(v39, 1);
      uint64_t v41 = v33[3];
      v35[65] = type metadata accessor for TrafficIncident(0);
      v35[66] = &protocol witness table for TrafficIncident;
      uint64_t v22 = v90;
      __swift_allocate_boxed_opaque_existential_0(v90);
      swift_storeEnumTagMultiPayload();
      uint64_t v43 = v33[7];
      uint64_t v42 = v33[8];
      __swift_project_boxed_opaque_existential_1(v33 + 4, v43);
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 80))(v43, v42);
      v35[85] = v25;
      id v93 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v41 + 112)
                                                                + **(int **)(*(void *)v41 + 112));
      os_log_t v44 = (void *)swift_task_alloc();
      v35[86] = v44;
      *os_log_t v44 = v35;
      v44[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
      uint64_t v27 = v35[77];
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_26;
  }
  if ((TrafficIncidentRequestSupportedCheckFlow.isReportMapsProblems()() & 1) == 0)
  {
    if (TrafficIncidentRequestSupportedCheckFlow.isAppSupported()())
    {
      if ((*(uint64_t (**)(void))(**(void **)(v0 + 552) + 176))())
      {
        uint64_t v49 = swift_task_alloc();
        *(void *)(v0 + 840) = v49;
        *(void *)uint64_t v49 = v0;
        *(void *)(v49 + 8) = TrafficIncidentRequestSupportedCheckFlow.execute();
        *(_OWORD *)(v49 + 48) = *(_OWORD *)(v0 + 544);
        uint64_t v8 = TrafficIncidentRequestSupportedCheckFlow.getPreciseLocation();
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        return _swift_task_switch(v8, v9, v10);
      }
      uint64_t v67 = *(void *)(v0 + 648);
      uint64_t v68 = *(void *)(v0 + 640);
      uint64_t v69 = *(void *)(v0 + 632);
      static SiriKitEventSender.current.getter();
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), *(void *)(v0 + 200));
      (*(void (**)(uint64_t, void, uint64_t))(v68 + 104))(v67, enum case for ActivityType.failed(_:), v69);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INReportIncidentIntent);
      uint64_t v8 = (uint64_t (*)())[(id)swift_getObjCClassFromMetadata() typeName];
      if (v8)
      {
        uint64_t v70 = v8;
        uint64_t v95 = (uint64_t *)(v0 + 216);
        uint64_t v88 = (void *)(v0 + 256);
        uint64_t v71 = *(void *)(v0 + 624);
        uint64_t v72 = *(void **)(v0 + 552);
        type metadata accessor for SiriKitEvent();
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v73 = (void *)v0;

        uint64_t v74 = enum case for SiriKitReliabilityCodes.targetDeviceIncompatible(_:);
        uint64_t v75 = type metadata accessor for SiriKitReliabilityCodes();
        uint64_t v76 = *(void *)(v75 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 104))(v71, v74, v75);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v76 + 56))(v71, 0, 1, v75);
        swift_retain();
        SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
        dispatch thunk of SiriKitEventSending.send(_:)();
        swift_release();
        __swift_destroy_boxed_opaque_existential_0Tm(v0 + 176);
        type metadata accessor for UnsupportedError();
        uint64_t v77 = swift_allocObject();
        *(void *)(v77 + 16) = 0xD000000000000014;
        *(void *)(v77 + 24) = 0x80000000000CA620;
        _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_4(&lazy protocol witness table cache variable for type UnsupportedError and conformance UnsupportedError, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedError);
        uint64_t v78 = swift_allocError();
        *uint64_t v79 = v77;
        (*(void (**)(uint64_t, uint64_t))(*v72 + 128))(v78, 1);
        uint64_t v80 = v72[3];
        v73[30] = type metadata accessor for TrafficIncident(0);
        v73[31] = &protocol witness table for TrafficIncident;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v95);
        uint64_t v82 = v72[7];
        uint64_t v83 = v72[8];
        __swift_project_boxed_opaque_existential_1(v72 + 4, v82);
        (*(void (**)(uint64_t, uint64_t))(v83 + 32))(v82, v83);
        __swift_project_boxed_opaque_existential_1(v88, v73[35]);
        uint64_t *boxed_opaque_existential_0 = DeviceState.deviceType.getter();
        swift_storeEnumTagMultiPayload();
        uint64_t v85 = v72[7];
        uint64_t v84 = v72[8];
        __swift_project_boxed_opaque_existential_1(v72 + 4, v85);
        uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 80))(v85, v84);
        v73[100] = v86;
        uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v80 + 112)
                                                                  + **(int **)(*(void *)v80 + 112));
        uint64_t v87 = (void *)swift_task_alloc();
        v73[101] = v87;
        *uint64_t v87 = v73;
        v87[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
        uint64_t v27 = v73[73];
        uint64_t v45 = v95;
        uint64_t v46 = v86;
        uint64_t v47 = v92;
        goto LABEL_13;
      }
LABEL_28:
      __break(1u);
      return _swift_task_switch(v8, v9, v10);
    }
    uint64_t v50 = *(void *)(v0 + 656);
    uint64_t v51 = *(void *)(v0 + 640);
    uint64_t v52 = *(void *)(v0 + 632);
    static SiriKitEventSender.current.getter();
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
    (*(void (**)(uint64_t, void, uint64_t))(v51 + 104))(v50, enum case for ActivityType.failed(_:), v52);
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INReportIncidentIntent);
    uint64_t v8 = (uint64_t (*)())[(id)swift_getObjCClassFromMetadata() typeName];
    if (v8)
    {
      uint64_t v53 = v8;
      os_log_type_t v91 = (uint64_t *)(v0 + 56);
      uint64_t v54 = *(void *)(v0 + 624);
      uint64_t v55 = *(void **)(v0 + 552);
      type metadata accessor for SiriKitEvent();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v56 = enum case for SiriKitReliabilityCodes.intentNotSupportedByApp(_:);
      uint64_t v57 = type metadata accessor for SiriKitReliabilityCodes();
      uint64_t v58 = (void *)v0;
      uint64_t v59 = *(void *)(v57 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 104))(v54, v56, v57);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v54, 0, 1, v57);
      swift_retain();
      SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
      dispatch thunk of SiriKitEventSending.send(_:)();
      swift_release();
      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
      type metadata accessor for UnsupportedError();
      uint64_t v60 = swift_allocObject();
      *(void *)(v60 + 16) = 0xD000000000000011;
      *(void *)(v60 + 24) = 0x80000000000CA600;
      _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_4(&lazy protocol witness table cache variable for type UnsupportedError and conformance UnsupportedError, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedError);
      uint64_t v61 = swift_allocError();
      *uint64_t v62 = v60;
      (*(void (**)(uint64_t, uint64_t))(*v55 + 128))(v61, 1);
      uint64_t v63 = v55[3];
      v58[10] = type metadata accessor for TrafficIncident(0);
      v58[11] = &protocol witness table for TrafficIncident;
      uint64_t v22 = v91;
      __swift_allocate_boxed_opaque_existential_0(v91);
      swift_storeEnumTagMultiPayload();
      uint64_t v65 = v55[7];
      uint64_t v64 = v55[8];
      __swift_project_boxed_opaque_existential_1(v55 + 4, v65);
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 80))(v65, v64);
      v58[95] = v25;
      id v93 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v63 + 112)
                                                                + **(int **)(*(void *)v63 + 112));
      uint64_t v66 = (void *)swift_task_alloc();
      v58[96] = v66;
      *uint64_t v66 = v58;
      v66[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
      uint64_t v27 = v58[74];
      goto LABEL_12;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v5 = *(void *)(v0 + 664);
  uint64_t v6 = *(void *)(v0 + 640);
  uint64_t v7 = *(void *)(v0 + 632);
  static SiriKitEventSender.current.getter();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), *(void *)(v0 + 360));
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for ActivityType.failed(_:), v7);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INReportIncidentIntent);
  uint64_t v8 = (uint64_t (*)())[(id)swift_getObjCClassFromMetadata() typeName];
  if (!v8)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v11 = v8;
  char v89 = (uint64_t *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 624);
  uint64_t v13 = *(void **)(v0 + 552);
  type metadata accessor for SiriKitEvent();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = enum case for SiriKitReliabilityCodes.unsupportedParameter(_:);
  uint64_t v15 = type metadata accessor for SiriKitReliabilityCodes();
  int v16 = (void *)v0;
  uint64_t v17 = *(void *)(v15 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104))(v12, v14, v15);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v15);
  SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 336);
  type metadata accessor for UnsupportedError();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0xD000000000000025;
  *(void *)(v18 + 24) = 0x80000000000CA640;
  _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_4(&lazy protocol witness table cache variable for type UnsupportedError and conformance UnsupportedError, 255, (void (*)(uint64_t))type metadata accessor for UnsupportedError);
  uint64_t v19 = swift_allocError();
  *uint64_t v20 = v18;
  (*(void (**)(uint64_t, uint64_t))(*v13 + 128))(v19, 1);
  uint64_t v21 = v13[3];
  v16[50] = type metadata accessor for TrafficIncident(0);
  v16[51] = &protocol witness table for TrafficIncident;
  uint64_t v22 = v89;
  __swift_allocate_boxed_opaque_existential_0(v89);
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = v13[7];
  uint64_t v23 = v13[8];
  __swift_project_boxed_opaque_existential_1(v13 + 4, v24);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 80))(v24, v23);
  v16[90] = v25;
  id v93 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))(*(void *)(*(void *)v21 + 112)
                                                            + **(int **)(*(void *)v21 + 112));
  uint64_t v26 = (void *)swift_task_alloc();
  v16[91] = v26;
  *uint64_t v26 = v16;
  v26[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
  uint64_t v27 = v16[75];
LABEL_12:
  uint64_t v45 = v22;
  uint64_t v46 = v25;
  uint64_t v47 = v93;
LABEL_13:
  return v47(v27, v45, v46);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 696) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 496);
    uint64_t v3 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  void v15[5];
  uint64_t v16;
  uint64_t v17;

  int v16 = v0;
  char v1 = *(void *)(v0 + 616);
  uint64_t v2 = *(void *)(v0 + 608);
  uint64_t v14 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  char v4 = *(void *)(v0 + 560);
  uint64_t v5 = *(void **)(v0 + 552);
  uint64_t v6 = (uint64_t)(v5 + 4);
  uint64_t v7 = v5[7];
  uint64_t v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 104))(v15, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  outlined init with copy of DeviceState(v6, v0 + 96);
  uint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v2, v4);
  outlined init with take of CATType((long long *)(v0 + 96), v10 + ((v14 + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 704) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  id v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 712) = v11;
  NSObject *v11 = v0;
  v11[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
  uint64_t v12 = *(void *)(v0 + 544);
  return SimpleOutputFlowAsync.execute()(v12);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[71] + 8))(v0[77], v0[70]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 736) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 376);
    uint64_t v3 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  void v15[5];
  uint64_t v16;
  uint64_t v17;

  int v16 = v0;
  char v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 600);
  uint64_t v14 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  char v4 = *(void *)(v0 + 560);
  uint64_t v5 = *(void **)(v0 + 552);
  uint64_t v6 = (uint64_t)(v5 + 4);
  uint64_t v7 = v5[7];
  uint64_t v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 104))(v15, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v6, v0 + 416);
  uint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v4);
  outlined init with take of CATType((long long *)(v0 + 416), v10 + ((v14 + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 744) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  id v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 752) = v11;
  NSObject *v11 = v0;
  v11[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
  uint64_t v12 = *(void *)(v0 + 544);
  return SimpleOutputFlowAsync.execute()(v12);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[71] + 8))(v0[75], v0[70]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 776) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 56);
    uint64_t v3 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  void v15[5];
  uint64_t v16;
  uint64_t v17;

  int v16 = v0;
  char v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 592);
  uint64_t v14 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  char v4 = *(void *)(v0 + 560);
  uint64_t v5 = *(void **)(v0 + 552);
  uint64_t v6 = (uint64_t)(v5 + 4);
  uint64_t v7 = v5[7];
  uint64_t v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 104))(v15, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v6, v0 + 136);
  uint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v4);
  outlined init with take of CATType((long long *)(v0 + 136), v10 + ((v14 + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 784) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  id v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 792) = v11;
  NSObject *v11 = v0;
  v11[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
  uint64_t v12 = *(void *)(v0 + 544);
  return SimpleOutputFlowAsync.execute()(v12);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[71] + 8))(v0[74], v0[70]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 816) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 216);
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 256);
    uint64_t v3 = TrafficIncidentRequestSupportedCheckFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  void v15[5];
  uint64_t v16;
  uint64_t v17;

  int v16 = v0;
  char v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 584);
  uint64_t v14 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  char v4 = *(void *)(v0 + 560);
  uint64_t v5 = *(void **)(v0 + 552);
  uint64_t v6 = (uint64_t)(v5 + 4);
  uint64_t v7 = v5[7];
  uint64_t v8 = v5[8];
  __swift_project_boxed_opaque_existential_1(v5 + 4, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 104))(v15, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  outlined init with copy of DeviceState(v6, v0 + 296);
  uint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v4);
  outlined init with take of CATType((long long *)(v0 + 296), v10 + ((v14 + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 824) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  id v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 832) = v11;
  NSObject *v11 = v0;
  v11[1] = TrafficIncidentRequestSupportedCheckFlow.execute();
  uint64_t v12 = *(void *)(v0 + 544);
  return SimpleOutputFlowAsync.execute()(v12);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[71] + 8))(v0[73], v0[70]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 496);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 536) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  static ExecuteResponse.complete<A>(next:)();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 376);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 536) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  static ExecuteResponse.complete<A>(next:)();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 536) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  static ExecuteResponse.complete<A>(next:)();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 216);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 256);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  *(void *)(v0 + 536) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  static ExecuteResponse.complete<A>(next:)();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in TrafficIncidentRequestSupportedCheckFlow.execute()()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
}

uint64_t closure #2 in TrafficIncidentRequestSupportedCheckFlow.execute()()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
}

uint64_t closure #3 in TrafficIncidentRequestSupportedCheckFlow.execute()(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.isDeviceSupported()()
{
  char v1 = v0;
  uint64_t v2 = v0 + 4;
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  __swift_project_boxed_opaque_existential_1(v0 + 4, v3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 32))(v19, v3, v4);
  __swift_project_boxed_opaque_existential_1(v19, v20);
  char v5 = dispatch thunk of DeviceState.isXRDevice.getter();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
  if (v5)
  {
    char v6 = 0;
  }
  else
  {
    uint64_t v7 = v1[7];
    uint64_t v8 = v1[8];
    __swift_project_boxed_opaque_existential_1(v2, v7);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 32))(v19, v7, v8);
    __swift_project_boxed_opaque_existential_1(v19, v20);
    if (dispatch thunk of DeviceState.isPhone.getter())
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
      char v6 = 1;
    }
    else
    {
      uint64_t v9 = v1[7];
      uint64_t v10 = v1[8];
      __swift_project_boxed_opaque_existential_1(v2, v9);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 32))(v18, v9, v10);
      __swift_project_boxed_opaque_existential_1(v18, v18[3]);
      char v11 = dispatch thunk of DeviceState.isPad.getter();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
      if ((v11 & 1) != 0
        || (uint64_t v12 = v1[7],
            uint64_t v13 = v1[8],
            __swift_project_boxed_opaque_existential_1(v2, v12),
            (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 32))(v19, v12, v13),
            __swift_project_boxed_opaque_existential_1(v19, v20),
            char v14 = dispatch thunk of DeviceState.isCarPlay.getter(),
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19),
            (v14 & 1) != 0))
      {
        char v6 = 1;
      }
      else
      {
        uint64_t v16 = v1[7];
        uint64_t v15 = v1[8];
        __swift_project_boxed_opaque_existential_1(v2, v16);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v15 + 32))(v19, v16, v15);
        __swift_project_boxed_opaque_existential_1(v19, v20);
        char v6 = dispatch thunk of DeviceState.isPod.getter();
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
      }
    }
  }
  return v6 & 1;
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.getPreciseLocation()(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = v1;
  return _swift_task_switch(TrafficIncidentRequestSupportedCheckFlow.getPreciseLocation(), 0, 0);
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.getPreciseLocation()()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 16);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 240))();
  *(void *)(v0 + 40) = 0;
  uint64_t v4 = (double *)(v0 + 40);
  if (v3) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v3) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE000000000000000;
  }
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = v4;
  if ((v6 & 0x1000000000000000) != 0 || !(v6 & 0x2000000000000000 | v5 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    int v11 = *(unsigned __int8 *)(v0 + 64);
  }
  else
  {
    uint64_t v8 = swift_task_alloc();
    *(void *)(v8 + 16) = partial apply for closure #1 in closure #1 in Double.init<A>(_:);
    *(void *)(v8 + 24) = v7;
    if ((v6 & 0x2000000000000000) != 0)
    {
      *(void *)(v0 + 16) = v5;
      *(void *)(v0 + 24) = v6 & 0xFFFFFFFFFFFFFFLL;
      int v11 = (v5 > 0x20u || ((0x100003E01uLL >> v5) & 1) == 0)
         && (uint64_t v12 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
         && *v12 == 0;
      swift_bridgeObjectRelease();
      swift_task_dealloc();
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v10 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v9 = _StringObject.sharedUTF8.getter();
      }
      int v11 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v9, v10, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_task_dealloc();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v13 = (void *)(v0 + 32);
  uint64_t v14 = swift_task_dealloc();
  double v15 = *v4;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 248))(v14);
  if (v17) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17) {
    unint64_t v19 = v17;
  }
  else {
    unint64_t v19 = 0xE000000000000000;
  }
  *uint64_t v13 = 0;
  uint64_t v20 = swift_task_alloc();
  *(void *)(v20 + 16) = v13;
  if ((v19 & 0x1000000000000000) != 0 || !(v19 & 0x2000000000000000 | v18 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    int v24 = *(unsigned __int8 *)(v0 + 65);
  }
  else
  {
    uint64_t v21 = swift_task_alloc();
    *(void *)(v21 + 16) = partial apply for closure #1 in closure #1 in Double.init<A>(_:);
    *(void *)(v21 + 24) = v20;
    if ((v19 & 0x2000000000000000) != 0)
    {
      *(void *)(v0 + 16) = v18;
      *(void *)(v0 + 24) = v19 & 0xFFFFFFFFFFFFFFLL;
      int v24 = (v18 > 0x20u || ((0x100003E01uLL >> v18) & 1) == 0)
         && (uint64_t v25 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
         && *v25 == 0;
      swift_bridgeObjectRelease();
      swift_task_dealloc();
    }
    else
    {
      if ((v18 & 0x1000000000000000) != 0)
      {
        uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v23 = v18 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v22 = _StringObject.sharedUTF8.getter();
      }
      int v24 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v22, v23, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_task_dealloc();
      swift_bridgeObjectRelease();
    }
  }
  swift_task_dealloc();
  uint64_t v26 = *(void **)(v0 + 56);
  if (v11 & v24)
  {
    id v27 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:*(double *)(v0 + 32) longitude:v15];
    os_log_type_t v28 = static os_log_type_t.info.getter();
    uint64_t v29 = v26[9];
    os_log_type_t v30 = v28;
    if (os_log_type_enabled(v29, v28))
    {
      id v31 = v27;
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412290;
      *(void *)(v0 + 16) = v31;
      id v33 = v27;
      id v34 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v39 = v31;

      id v27 = v33;
      _os_log_impl(&dword_0, v29, v30, "location from NL intent is: %@", v32, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v31 = v27;
    }
    id v35 = *(void (**)(id, void))(**(void **)(v0 + 56) + 128);
    id v36 = v27;
    v35(v31, 0);
    static ExecuteResponse.complete()();
  }
  else
  {
    (*(void (**)(void, uint64_t))(*v26 + 128))(0, 2);
    static ExecuteResponse.complete()();
  }
  uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.isAppSupported()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 192))();
  uint64_t v3 = v2;
  os_log_type_t v4 = static os_log_type_t.info.getter();
  uint64_t v5 = *(NSObject **)(v0 + 72);
  os_log_type_t v6 = v4;
  if (os_log_type_enabled(v5, v4))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    v14[0] = v1;
    v14[1] = v3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v8 = String.init<A>(describing:)();
    v14[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v5, v6, "appName is %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  if (v3)
  {
    v14[0] = 1936744813;
    v14[1] = 0xE400000000000000;
    uint64_t v12 = v1;
    uint64_t v13 = v3;
    lazy protocol witness table accessor for type String and conformance String();
    if (StringProtocol.caseInsensitiveCompare<A>(_:)())
    {
      strcpy((char *)v14, "com.apple.Maps");
      HIBYTE(v14[1]) = -18;
      uint64_t v12 = v1;
      uint64_t v13 = v3;
      uint64_t v10 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (v10) {
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return 1;
}

uint64_t TrafficIncidentRequestSupportedCheckFlow.isReportMapsProblems()()
{
  char v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 184))();
  char v2 = 1;
  char v3 = 0;
  switch(v1)
  {
    case 8:
      goto LABEL_3;
    case 9:
      return v3 & 1;
    default:
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_3:
      swift_bridgeObjectRelease();
      char v3 = v2;
      break;
  }
  return v3 & 1;
}

uint64_t partial apply for closure #3 in TrafficIncidentRequestSupportedCheckFlow.execute()(uint64_t a1)
{
  return closure #3 in TrafficIncidentRequestSupportedCheckFlow.execute()(a1, v1);
}

uint64_t _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MockTrafficIncidentRequestSupportedCheckFlow.deinit()
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 32);

  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(*(id *)(v0 + 80), *(unsigned char *)(v0 + 88));
  return v0;
}

uint64_t MockTrafficIncidentRequestSupportedCheckFlow.__deallocating_deinit()
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 32);

  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(*(id *)(v0 + 80), *(unsigned char *)(v0 + 88));

  return _swift_deallocClassInstance(v0, 89, 7);
}

uint64_t protocol witness for Flow.on(input:) in conformance TrafficIncidentRequestSupportedCheckFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance TrafficIncidentRequestSupportedCheckFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t protocol witness for Flow.execute() in conformance TrafficIncidentRequestSupportedCheckFlow(uint64_t a1)
{
  os_log_type_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 168) + **(int **)(**(void **)v1 + 168));
  os_log_type_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *os_log_type_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance TrafficIncidentRequestSupportedCheckFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 120))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t MockTrafficIncidentRequestSupportedCheckFlow.__allocating_init(intent:flowHelper:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with copy of DeviceState(a2, (uint64_t)v6);
  TrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(a1, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a2);
  return v4;
}

uint64_t MockTrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DeviceState(a2, (uint64_t)v6);
  TrafficIncidentRequestSupportedCheckFlow.init(intent:flowHelper:)(a1, v6);
  __swift_destroy_boxed_opaque_existential_0Tm(a2);
  return v2;
}

uint64_t vtable thunk for TrafficIncidentRequestSupportedCheckFlow.isDeviceSupported() dispatching to MockTrafficIncidentRequestSupportedCheckFlow.isDeviceSupported()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t partial apply for closure #4 in TrafficIncidentRequestSupportedCheckFlow.execute()(uint64_t a1)
{
  return closure #3 in TrafficIncidentRequestSupportedCheckFlow.execute()(a1, v1);
}

uint64_t sub_AEA2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_AEA7C(uint64_t a1, uint64_t a2)
{
  id v2 = *(id *)a1;
  char v3 = *(uint64_t (**)(id, uint64_t))(**(void **)a2 + 128);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(*(id *)a1, v4);
  return v3(v2, v4);
}

uint64_t initializeBufferWithCopyOfBuffer for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(uint64_t a1)
{
}

uint64_t assignWithCopy for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v5, v6);
  return a1;
}

uint64_t assignWithTake for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue()
{
  return &type metadata for TrafficIncidentRequestSupportedCheckFlow.RequestSupportedExitValue;
}

uint64_t type metadata accessor for MockTrafficIncidentRequestSupportedCheckFlow()
{
  return self;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unsigned char *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

unsigned char *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  void *result;
  uint64_t v5;

  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t DeviceState.deviceType.getter()
{
  if (dispatch thunk of DeviceState.isHomePod.getter()) {
    return 1;
  }
  if (dispatch thunk of DeviceState.isMac.getter()) {
    return 2;
  }
  if (dispatch thunk of DeviceState.isWatch.getter()) {
    return 3;
  }
  return 0;
}

void one-time initialization function for currentTask()
{
  static TaskMetricsConst.currentTask = 0x54746E6572727543;
  unk_FAE00 = 0xEB000000006B7361;
}

uint64_t *TaskMetricsConst.currentTask.unsafeMutableAddressor()
{
  if (one-time initialization token for currentTask != -1) {
    swift_once();
  }
  return &static TaskMetricsConst.currentTask;
}

uint64_t static TaskMetricsConst.currentTask.getter()
{
  return static TaskMetricsConst.currentTask.getter(&one-time initialization token for currentTask, &static TaskMetricsConst.currentTask);
}

void one-time initialization function for none()
{
  static ErrorMessageConst.none = 1701736302;
  unk_FAE10 = 0xE400000000000000;
}

uint64_t *ErrorMessageConst.none.unsafeMutableAddressor()
{
  if (one-time initialization token for none != -1) {
    swift_once();
  }
  return &static ErrorMessageConst.none;
}

uint64_t static ErrorMessageConst.none.getter()
{
  return static TaskMetricsConst.currentTask.getter(&one-time initialization token for none, &static ErrorMessageConst.none);
}

uint64_t static TaskMetricsConst.currentTask.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

ValueMetadata *type metadata accessor for TaskMetricsConst()
{
  return &type metadata for TaskMetricsConst;
}

ValueMetadata *type metadata accessor for ErrorMessageConst()
{
  return &type metadata for ErrorMessageConst;
}

uint64_t TemplatingResult.getDialogAsSummaryOutput(nlContext:deviceState:)@<X0>(uint64_t *a1@<X8>)
{
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = 0;
  a1[3] = type metadata accessor for AceOutput();
  a1[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(a1);
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  return outlined destroy of (label: String?, value: Any)?((uint64_t)v3, &demangling cache variable for type metadata for FlowActivity?);
}

uint64_t TemplatingResult.getDialogAsSimpleOutputFlow(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for TemplatingResult();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 104))(v12, v6, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v3);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v11);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  outlined init with take of CATType(v11, v9 + ((v5 + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  return SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
}

uint64_t closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:), 0, 0);
}

uint64_t closure #1 in TemplatingResult.getDialogAsSimpleOutputFlow(_:)()
{
  id v2 = *(void **)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(uint64_t **)(v0 + 96);
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v7 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 72) = 0u;
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  v3[3] = v7;
  v3[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v3);
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of (label: String?, value: Any)?(v0 + 56, &demangling cache variable for type metadata for FlowActivity?);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  outlined destroy of (label: String?, value: Any)?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_AF400()
{
  uint64_t v1 = type metadata accessor for TemplatingResult();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + v6);

  return _swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t static UsoRequest.makeSDAForPromptForContactValue()()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v9 - v5;
  type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
  swift_allocObject();
  uint64_t v7 = UsoTaskBuilder_noVerb_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  UsoEntityBuilder_common_Person.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  static Siri_Nlu_External_SystemPrompted.from(_:)(v7, (uint64_t)v6);
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  swift_release();
  return swift_release();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static Siri_Nlu_External_SystemPrompted.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static Siri_Nlu_External_SystemPrompted.from(_:)(a1, (void (*)(uint64_t))&Siri_Nlu_External_SystemPrompted.init(), (void (*)(char *))&Siri_Nlu_External_SystemPrompted.target.setter, a2);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(uint64_t a1)
{
  return Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemPrompted, (void (*)(uint64_t))&Siri_Nlu_External_SystemDialogAct.init(), (void (*)(char *))&Siri_Nlu_External_SystemDialogAct.prompted.setter);
}

uint64_t outlined init with copy of Siri_Nlu_External_UsoGraph?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static UsoRequest.makeSDAForYesNoCancel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v25 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  uint64_t v1 = *(void *)(v25 - 8);
  uint64_t v2 = __chkstk_darwin(v25);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v23 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserCancelled();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserAccepted();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v24 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v23 - v17;
  Siri_Nlu_External_UserDialogAct.init()();
  Siri_Nlu_External_UserAccepted.init()();
  Siri_Nlu_External_UserDialogAct.accepted.setter();
  Siri_Nlu_External_UserCancelled.init()();
  Siri_Nlu_External_UserDialogAct.cancelled.setter();
  Siri_Nlu_External_SystemOffered.init()();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  unint64_t v19 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  uint64_t v20 = v25;
  v19(v7, v9, v25);
  Siri_Nlu_External_SystemDialogAct.init()();
  v19(v4, v7, v20);
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v1 + 8);
  v21(v7, v20);
  v21(v9, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v24);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(systemOffered:)(uint64_t a1)
{
  return Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemOffered, (void (*)(uint64_t))&Siri_Nlu_External_SystemDialogAct.init(), (void (*)(char *))&Siri_Nlu_External_SystemDialogAct.offered.setter);
}

uint64_t Siri_Nlu_External_SystemGaveOptions.init(choices:)()
{
  return Siri_Nlu_External_SystemGaveOptions.choices.setter();
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(gaveOptions:)(uint64_t a1)
{
  return Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemGaveOptions, (void (*)(uint64_t))&Siri_Nlu_External_SystemDialogAct.init(), (void (*)(char *))&Siri_Nlu_External_SystemDialogAct.gaveOptions.setter);
}

uint64_t Siri_Nlu_External_UserDialogAct.init(_:)(uint64_t a1)
{
  return Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserStatedTask, (void (*)(uint64_t))&Siri_Nlu_External_UserDialogAct.init(), (void (*)(char *))&Siri_Nlu_External_UserDialogAct.userStatedTask.setter);
}

{
  return Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserWantedToProceed, (void (*)(uint64_t))&Siri_Nlu_External_UserDialogAct.init(), (void (*)(char *))&Siri_Nlu_External_UserDialogAct.wantedToProceed.setter);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t), void (*a4)(char *))
{
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin();
  uint64_t v11 = (char *)&v13 - v10;
  a3(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  a4(v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
}

uint64_t static Siri_Nlu_External_UserDialogAct.from(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v10 - v7;
  static Siri_Nlu_External_UserStatedTask.from(_:)(a1, (uint64_t)&v10 - v7);
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t static Siri_Nlu_External_UserStatedTask.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v25 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v26 = (char *)&v24 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v24 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin(v17 - 8);
  unint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_C0AD0;
  *(void *)(v20 + 32) = a1;
  uint64_t v28 = v20;
  specialized Array._endMutation()();
  uint64_t v21 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
  swift_retain();
  static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of (label: String?, value: Any)?((uint64_t)v19, &demangling cache variable for type metadata for UsoBuilderOptions?);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v16, 0, 1, v3);
  outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v16, (uint64_t)v14);
  Siri_Nlu_External_UserStatedTask.init()();
  outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v14, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  }
  else
  {
    uint64_t v22 = v26;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v26, v11, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v25, v22, v3);
    Siri_Nlu_External_UserStatedTask.task.setter();
    outlined destroy of (label: String?, value: Any)?((uint64_t)v14, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v22, v3);
  }
  swift_release();
  return outlined destroy of (label: String?, value: Any)?((uint64_t)v16, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
}

uint64_t static Siri_Nlu_External_UserDialogAct.from(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  os_log_type_t v30 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v31 = (char *)&v29 - v5;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v32 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v29 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v29 - v22;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v23, 0, 1, v1);
  outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v23, (uint64_t)v21);
  Siri_Nlu_External_UserStatedTask.init()();
  outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v21, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v18, 1, v1) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v21, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v18, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  }
  else
  {
    uint64_t v24 = v31;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v31, v18, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v30, v24, v1);
    Siri_Nlu_External_UserStatedTask.task.setter();
    outlined destroy of (label: String?, value: Any)?((uint64_t)v21, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v24, v1);
  }
  uint64_t v25 = v32;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v26(v12, v14, v6);
  Siri_Nlu_External_UserDialogAct.init()();
  v26(v25, v12, v6);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 8);
  v27(v12, v6);
  v27(v14, v6);
  return outlined destroy of (label: String?, value: Any)?((uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
}

uint64_t Siri_Nlu_External_UserStatedTask.init(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v13 - v10;
  Siri_Nlu_External_UserStatedTask.init()();
  outlined init with copy of Siri_Nlu_External_UsoGraph?(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of (label: String?, value: Any)?(a1, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    return outlined destroy of (label: String?, value: Any)?((uint64_t)v4, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    Siri_Nlu_External_UserStatedTask.task.setter();
    outlined destroy of (label: String?, value: Any)?(a1, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
}

unint64_t Siri_Nlu_External_UserDialogAct.usoTask.getter()
{
  unint64_t result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v1 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8));
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t Siri_Nlu_External_UserDialogAct.contactId.getter()
{
  uint64_t v41 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v43 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v36 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v36 - v5;
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  __chkstk_darwin(v15 - 8);
  uint64_t v38 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v17 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v18 = *(void *)(v17 + 16);
  if (!v18)
  {
    uint64_t v32 = 1;
LABEL_15:
    uint64_t v33 = (uint64_t)v38;
    goto LABEL_18;
  }
  uint64_t v36 = v17;
  uint64_t v37 = v2;
  uint64_t v19 = v2 + 16;
  uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  unint64_t v21 = v17 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64));
  uint64_t v22 = (void (**)(char *, uint64_t))(v19 - 8);
  uint64_t v39 = (void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v43 = *(void *)(v19 + 56);
  swift_bridgeObjectRetain();
  uint64_t v23 = v42;
  while (1)
  {
    v20(v6, v21, v1);
    if (Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter() == 0x73746361746E6F43
      && v25 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      v20(v23, (unint64_t)v6, v1);
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v20(v23, (unint64_t)v6, v1);
      if ((v26 & 1) == 0)
      {
        uint64_t v24 = *v22;
        (*v22)(v23, v1);
        goto LABEL_4;
      }
    }
    uint64_t v27 = v40;
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v28 = Google_Protobuf_StringValue.value.getter();
    uint64_t v30 = v29;
    (*v39)(v27, v41);
    if (v28 == 0x64695F6D657469 && v30 == 0xE700000000000000) {
      break;
    }
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = *v22;
    uint64_t v23 = v42;
    (*v22)(v42, v1);
    if (v31) {
      goto LABEL_17;
    }
LABEL_4:
    v24(v6, v1);
    v21 += v43;
    if (!--v18)
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = 1;
      uint64_t v2 = v37;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  (*v22)(v42, v1);
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v2 = v37;
  uint64_t v33 = (uint64_t)v38;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v38, v6, v1);
  uint64_t v32 = 0;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v33, v32, 1, v1);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v33, 1, v1) == 1)
  {
    outlined destroy of (label: String?, value: Any)?(v33, &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
    return 0;
  }
  else
  {
    uint64_t v34 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v33, v1);
  }
  return v34;
}

uint64_t UsoIdentifierAppBundle.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000015;
  }
  else {
    return 0x73746361746E6F43;
  }
}

uint64_t UsoIdentifierNamespace.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x64695F6D657469;
  }
  if (a1 == 1) {
    return 0xD000000000000012;
  }
  return 0x6369746E616D6573;
}

uint64_t static Siri_Nlu_External_UserWantedToProceed.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static Siri_Nlu_External_SystemPrompted.from(_:)(a1, (void (*)(uint64_t))&Siri_Nlu_External_UserWantedToProceed.init(), (void (*)(char *))&Siri_Nlu_External_UserWantedToProceed.reference.setter, a2);
}

uint64_t static Siri_Nlu_External_SystemPrompted.from(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a2;
  uint64_t v31 = a4;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v28 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v28 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v28 - v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_C0AD0;
  *(void *)(v23 + 32) = a1;
  uint64_t v32 = v23;
  specialized Array._endMutation()();
  uint64_t v24 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v13, 1, 1, v24);
  swift_retain();
  static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of (label: String?, value: Any)?((uint64_t)v13, &demangling cache variable for type metadata for UsoBuilderOptions?);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  swift_release();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v22, 0, 1, v5);
  uint64_t v25 = outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v22, (uint64_t)v20);
  v30(v25);
  outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v20, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5) == 1)
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v20, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v17, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v17, v5);
    char v26 = v28;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v28, v10, v5);
    v29(v26);
    outlined destroy of (label: String?, value: Any)?((uint64_t)v20, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
  return outlined destroy of (label: String?, value: Any)?((uint64_t)v22, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
}

uint64_t static Siri_Nlu_External_SystemOffered.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v18[0] = a1;
  v18[1] = a2;
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v18 - v7;
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v18 - v14;
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v16(v8, (char *)v18[0], v2);
  Siri_Nlu_External_UserDialogAct.init()();
  v16(v6, v8, v2);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  Siri_Nlu_External_SystemOffered.init()();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

GeoFlowDelegatePlugin::UsoIdentifierAppBundle_optional __swiftcall UsoIdentifierAppBundle.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UsoIdentifierAppBundle.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = GeoFlowDelegatePlugin_UsoIdentifierAppBundle_siriNL;
  }
  else {
    v4.value = GeoFlowDelegatePlugin_UsoIdentifierAppBundle_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UsoIdentifierAppBundle(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = UsoIdentifierAppBundle.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == UsoIdentifierAppBundle.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UsoIdentifierAppBundle()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  UsoIdentifierAppBundle.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UsoIdentifierAppBundle()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UsoIdentifierAppBundle()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  UsoIdentifierAppBundle.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UsoIdentifierAppBundle@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UsoIdentifierAppBundle.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UsoIdentifierAppBundle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UsoIdentifierAppBundle.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UsoIdentifierNamespace(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = UsoIdentifierNamespace.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == UsoIdentifierNamespace.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UsoIdentifierNamespace()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  UsoIdentifierNamespace.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UsoIdentifierNamespace()
{
  UsoIdentifierNamespace.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UsoIdentifierNamespace()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  UsoIdentifierNamespace.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UsoIdentifierNamespace@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized UsoIdentifierNamespace.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UsoIdentifierNamespace@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UsoIdentifierNamespace.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t specialized UsoIdentifierNamespace.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UsoIdentifierNamespace.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type UsoIdentifierAppBundle and conformance UsoIdentifierAppBundle()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoIdentifierAppBundle and conformance UsoIdentifierAppBundle;
  if (!lazy protocol witness table cache variable for type UsoIdentifierAppBundle and conformance UsoIdentifierAppBundle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifierAppBundle and conformance UsoIdentifierAppBundle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace;
  if (!lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace);
  }
  return result;
}

ValueMetadata *type metadata accessor for UsoRequest()
{
  return &type metadata for UsoRequest;
}

unsigned char *storeEnumTagSinglePayload for UsoIdentifierAppBundle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xB1C0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UsoIdentifierAppBundle()
{
  return &type metadata for UsoIdentifierAppBundle;
}

unsigned char *storeEnumTagSinglePayload for UsoIdentifierNamespace(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xB1D10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UsoIdentifierNamespace()
{
  return &type metadata for UsoIdentifierNamespace;
}

uint64_t SaveParkingHandleIntentStrategy.__allocating_init(with:isPommes:)(long long *a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v4 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v4 + 24);
  *(unsigned char *)(v4 + 64) = a2;
  return v4;
}

uint64_t SaveParkingHandleIntentStrategy.init(with:isPommes:)(long long *a1, char a2)
{
  type metadata accessor for OS_os_log();
  *(void *)(v2 + 16) = OS_os_log.init(subsystem:category:)();
  outlined init with take of CATType(a1, v2 + 24);
  *(unsigned char *)(v2 + 64) = a2;
  return v2;
}

uint64_t SaveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  return _swift_task_switch(SaveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0, 0);
}

uint64_t SaveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSaveParkingLocationIntent, INSaveParkingLocationIntentResponse>);
  char v1 = (void *)IntentResolutionRecord.intentResponse.getter();
  id v2 = [v1 parkingLocation];
  *(void *)(v0 + 248) = v2;

  if (v2)
  {
    id v3 = [v2 location];
    *(void *)(v0 + 256) = v3;
    if (v3)
    {
      uint64_t v4 = CLLocation.makeDialogLocation()();
      *(void *)(v0 + 264) = v4;
      uint64_t v5 = (void *)IntentResolutionRecord.intentResponse.getter();
      id v6 = [v5 parkingNote];

      if (v6)
      {
        uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v9 = v8;
      }
      else
      {
        uint64_t v7 = 0;
        unint64_t v9 = 0xE000000000000000;
      }
      *(void *)(v0 + 272) = v9;
      uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v0 + 240) + 112))();
      *(void *)(v0 + 280) = v15;
      *(void *)(v0 + 120) = &type metadata for SaveParkingLocation;
      *(void *)(v0 + 128) = &protocol witness table for SaveParkingLocation;
      *(void *)(v0 + 96) = v4;
      *(void *)(v0 + 104) = v7;
      *(void *)(v0 + 112) = v9;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v16 = (void *)IntentResolutionRecord.intentResponse.getter();
      id v17 = [v16 parkingNote];

      if (v17)
      {
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v20 = 0;
      }
      *(void *)(v0 + 288) = v20;
      uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, id, uint64_t, uint64_t))(*(void *)(*(void *)v15 + 112)
                                                                           + **(int **)(*(void *)v15 + 112));
      uint64_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 296) = v21;
      *uint64_t v21 = v0;
      v21[1] = SaveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
      return v22(v0 + 56, v0 + 96, v2, v18, v20);
    }
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 240) + 128)
                                                   + **(int **)(**(void **)(v0 + 240) + 128));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v10;
    *uint64_t v10 = v0;
    uint64_t v11 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else
  {
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 240) + 128)
                                                   + **(int **)(**(void **)(v0 + 240) + 128));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v10;
    *uint64_t v10 = v0;
    uint64_t v11 = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  v10[1] = v11;
  uint64_t v12 = *(void *)(v0 + 232);
  uint64_t v13 = *(void *)(v0 + 224);
  return v23(v13, v12);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  char v1 = *v0 + 96;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v1);
  return _swift_task_switch(SaveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0, 0);
}

{
  uint64_t v0;
  long long *v1;
  void *v2;
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v16)(void);
  void *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = v0;
  char v1 = (long long *)(v0 + 56);
  id v2 = *(void **)(v0 + 240);
  if (*(void *)(v0 + 80))
  {
    outlined init with take of CATType(v1, v0 + 16);
    id v3 = static os_log_type_t.default.getter();
    uint64_t v4 = v2[2];
    outlined init with copy of DeviceState(v0 + 16, v0 + 136);
    uint64_t v5 = v3;
    id v6 = os_log_type_enabled(v4, v3);
    uint64_t v7 = *(void **)(v0 + 248);
    unint64_t v8 = *(void **)(v0 + 256);
    if (v6)
    {
      id v17 = *(void **)(v0 + 248);
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)unint64_t v9 = 136315138;
      outlined init with copy of DeviceState(v0 + 136, v0 + 176);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
      uint64_t v10 = String.init<A>(describing:)();
      *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
      _os_log_impl(&dword_0, v4, v5, "buildRFoutput: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();

      __swift_destroy_boxed_opaque_existential_0Tm(v0 + 136);
    }
    outlined init with take of CATType((long long *)(v0 + 16), *(void *)(v0 + 224));
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    outlined destroy of Output?((uint64_t)v1);
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*v2 + 128) + **(int **)(*v2 + 128));
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v12;
    *uint64_t v12 = v0;
    v12[1] = RetrieveParkingHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v13 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 224);
    return v18(v14, v13);
  }
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance SaveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance SaveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance SaveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance SaveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 120)
                                                + **(int **)(**(void **)v2 + 120));
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance SaveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance SaveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance SaveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 128)
                                                + **(int **)(**(void **)v2 + 128));
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance SaveParkingHandleIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for SaveParkingHandleIntentStrategy();
  *unint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance TrafficIncidentHandleIntentStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

unint64_t lazy protocol witness table accessor for type SaveParkingHandleIntentStrategy and conformance SaveParkingHandleIntentStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type SaveParkingHandleIntentStrategy and conformance SaveParkingHandleIntentStrategy;
  if (!lazy protocol witness table cache variable for type SaveParkingHandleIntentStrategy and conformance SaveParkingHandleIntentStrategy)
  {
    type metadata accessor for SaveParkingHandleIntentStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SaveParkingHandleIntentStrategy and conformance SaveParkingHandleIntentStrategy);
  }
  return result;
}

uint64_t type metadata accessor for SaveParkingHandleIntentStrategy()
{
  return self;
}

uint64_t ShareETAContactConfirmationStrategy.__allocating_init(isPOMMES:isUSO:)(char a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  ShareETAContactConfirmationStrategy.init(isPOMMES:isUSO:)(a1, a2);
  return v4;
}

uint64_t ShareETAContactConfirmationStrategy.isPOMMES.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t ShareETAContactConfirmationStrategy.isPOMMES.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 24) = a1;
  return result;
}

uint64_t ShareETAContactConfirmationStrategy.isUSO.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t ShareETAContactConfirmationStrategy.isUSO.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 25) = a1;
  return result;
}

uint64_t (*ShareETAContactConfirmationStrategy.isUSO.modify())()
{
  return ShareETAPromptForContactStrategy.catService.modify;
}

uint64_t ShareETAContactConfirmationStrategy.init(isPOMMES:isUSO:)(char a1, char a2)
{
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v5 = OS_os_log.init(subsystem:category:)();
  *(_WORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = v5;
  type metadata accessor for CATService();
  uint64_t v6 = swift_allocObject();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(void *)(v6 + 24) = [self bundleForClass:ObjCClassFromMetadata];
  *(void *)(v6 + 32) = OS_os_log.init(subsystem:category:)();
  *(unsigned char *)(v6 + 16) = 0;
  *(void *)(v2 + 32) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_BFBD0;
  if (one-time initialization token for confirmationNode != -1) {
    swift_once();
  }
  swift_retain();
  unint64_t v9 = specialized OntologyNode.javaClassName.getter();
  uint64_t v11 = v10;
  swift_release();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  unint64_t v12 = specialized OntologyNode.javaClassName.getter();
  uint64_t v14 = v13;
  swift_release();
  *(void *)(v8 + 48) = v12;
  *(void *)(v8 + 56) = v14;
  static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter();
  unint64_t v15 = specialized OntologyNode.javaClassName.getter();
  uint64_t v17 = v16;
  swift_release();
  *(void *)(v8 + 64) = v15;
  *(void *)(v8 + 72) = v17;
  *(void *)(v2 + 40) = v8;
  swift_beginAccess();
  *(unsigned char *)(v2 + 24) = a1 & 1;
  swift_beginAccess();
  *(unsigned char *)(v2 + 25) = a2 & 1;
  return v2;
}

uint64_t ShareETAContactConfirmationStrategy.catService.getter()
{
  return swift_retain();
}

uint64_t ShareETAContactConfirmationStrategy.weightedPromptResponseTargets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShareETAContactConfirmationStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Parse();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (id *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  int v10 = (*(uint64_t (**)(id *, uint64_t))(v7 + 88))(v9, v6);
  if (v10 == enum case for Parse.NLv3IntentOnly(_:))
  {
    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
LABEL_7:
    (*(void (**)(id *, uint64_t))(v7 + 8))(v9, v6);
    return ShareETAContactConfirmationStrategy.confirmationHandle(input:)(a1, a2);
  }
  int v11 = v10;
  if (v10 != enum case for Parse.pommesResponse(_:))
  {
    int v12 = enum case for Parse.uso(_:);
    static os_log_type_t.info.getter();
    if (v11 != v12)
    {
      os_log(_:dso:log:_:_:)();
      static ActionForInput.ignore()();
      return (*(uint64_t (**)(id *, uint64_t))(v7 + 8))(v9, v6);
    }
    os_log(_:dso:log:_:_:)();
    (*(void (**)(uint64_t))(*(void *)v3 + 152))(1);
    goto LABEL_7;
  }
  (*(void (**)(id *, uint64_t))(v7 + 96))(v9, v6);

  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  (*(void (**)(uint64_t))(*(void *)v3 + 128))(1);
  return ShareETAContactConfirmationStrategy.confirmationHandle(input:)(a1, a2);
}

uint64_t ShareETAContactConfirmationStrategy.parseConfirmationResponse(input:)(uint64_t a1, uint64_t a2)
{
  v2[13] = a1;
  v2[14] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v2[15] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Parse();
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  return _swift_task_switch(ShareETAContactConfirmationStrategy.parseConfirmationResponse(input:), 0, 0);
}

uint64_t ShareETAContactConfirmationStrategy.parseConfirmationResponse(input:)()
{
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  type metadata accessor for GeoParse();
  Input.parse.getter();
  static GeoParse.getDomainIntent(parse:)(v1, v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined init with copy of GeoIntent?(v0 + 16, v0 + 56);
  if (!*(void *)(v0 + 80))
  {
    outlined destroy of (label: String?, value: Any)?(v0 + 56, &demangling cache variable for type metadata for GeoIntent?);
    goto LABEL_6;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
  type metadata accessor for LocationSearchIntent();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    lazy protocol witness table accessor for type Errors and conformance Errors();
    swift_allocError();
    *(void *)uint64_t v5 = 0xD00000000000001CLL;
    *(void *)(v5 + 8) = 0x80000000000CA800;
    *(unsigned char *)(v5 + 16) = 0;
    swift_willThrow();
LABEL_7:
    outlined destroy of (label: String?, value: Any)?(v0 + 16, &demangling cache variable for type metadata for GeoIntent?);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_8;
  }
  uint64_t v4 = *(unsigned __int8 (**)(void))(**(void **)(v0 + 96) + 152);
  if (v4() == 3)
  {
    swift_release();
    goto LABEL_6;
  }
  int v8 = v4();
  if ((v8 - 1) >= 2)
  {
    if (v8)
    {
      lazy protocol witness table accessor for type Errors and conformance Errors();
      swift_allocError();
      *(void *)uint64_t v14 = 0xD000000000000020;
      *(void *)(v14 + 8) = 0x80000000000CA820;
      *(unsigned char *)(v14 + 16) = 0;
      swift_willThrow();
      swift_release();
      goto LABEL_7;
    }
    unint64_t v9 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
  }
  else
  {
    unint64_t v9 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
  }
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v11 = *v9;
  uint64_t v12 = type metadata accessor for ConfirmationResponse();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 104))(v10, v11, v12);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  SimpleConfirmationResponseProvider.init(_:)();
  swift_release();
  outlined destroy of (label: String?, value: Any)?(v0 + 16, &demangling cache variable for type metadata for GeoIntent?);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
LABEL_8:
  return v6();
}

uint64_t ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(uint64_t a1, uint64_t a2)
{
  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[37] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PommesContext.Source();
  v3[38] = v4;
  v3[39] = *(void *)(v4 - 8);
  v3[40] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v3[41] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  v3[42] = v5;
  v3[43] = *(void *)(v5 - 8);
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v3[46] = v6;
  v3[47] = *(void *)(v6 - 8);
  v3[48] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v3[49] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ActivityType();
  v3[50] = v7;
  v3[51] = *(void *)(v7 - 8);
  v3[52] = swift_task_alloc();
  type metadata accessor for Locale();
  v3[53] = swift_task_alloc();
  return _swift_task_switch(ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:), 0, 0);
}

id ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v1 = v0[51];
  uint64_t v20 = v0[50];
  uint64_t v22 = v0[52];
  uint64_t v2 = (void *)v0[35];
  type metadata accessor for DialogPerson();
  id v3 = v2;
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v18 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
  v0[54] = v18;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
  static SiriKitEventSender.current.getter();
  __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v22, enum case for ActivityType.confirmation(_:), v20);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
  id result = [(id)swift_getObjCClassFromMetadata() typeName];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v0[49];
    uint64_t v21 = v0[36];
    type metadata accessor for SiriKitEvent();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v7 = enum case for SiriKitReliabilityCodes.normal(_:);
    uint64_t v8 = type metadata accessor for SiriKitReliabilityCodes();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(v6, v7, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 7));
    uint64_t v10 = *(void *)(v21 + 32);
    v0[15] = type metadata accessor for ShareETA(0);
    v0[16] = &protocol witness table for ShareETA;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 12);
    uint64_t v12 = (char *)boxed_opaque_existential_0
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (recipient: DialogPerson, behaviourAfterSpeaking: BehaviorAfterSpeaking))
                 + 48);
    uint64_t *boxed_opaque_existential_0 = v18;
    uint64_t v13 = enum case for BehaviorAfterSpeaking.listen(_:);
    uint64_t v14 = type metadata accessor for BehaviorAfterSpeaking();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v12, v13, v14);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    uint64_t v15 = static DialogHelper.globals.getter();
    v0[55] = v15;
    uint64_t v19 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v10 + 112)
                                                             + **(int **)(*(void *)v10 + 112));
    uint64_t v16 = (void *)swift_task_alloc();
    v0[56] = v16;
    *uint64_t v16 = v0;
    v16[1] = ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
    uint64_t v17 = v0[48];
    return (id)v19(v17, v0 + 12, v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 456) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    id v3 = ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 96);
    id v3 = ShareETAContactConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;

  uint64_t v37 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[36];
  id v3 = static GeoNLContextUtils.makeNLContextFor(weightedPromptResponseTargets:)();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120))(v3);
  uint64_t v5 = (void *)v0[36];
  if (v4)
  {
    uint64_t v6 = v5[2];
    uint64_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_0, v6, v7, "makePromptForConfirmation adding Pommes Context", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = v0[41];
    (*(void (**)(void, void, void))(v0[39] + 104))(v0[40], enum case for PommesContext.Source.pluginDefined(_:), v0[38]);
    PommesContext.init(source:domain:listenAfterSpeaking:)();
    uint64_t v10 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
    NLContextUpdate.pommesContext.setter();
  }
  else if ((*(uint64_t (**)(void))(*v5 + 144))())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    uint64_t v11 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
    uint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_C0600;
    static UsoRequest.makeSDAForYesNoCancel()(v13 + v12);
    NLContextUpdate.nluSystemDialogActs.setter();
  }
  uint64_t v14 = v1[36];
  uint64_t v15 = static os_log_type_t.info.getter();
  uint64_t v16 = *(NSObject **)(v14 + 16);
  uint64_t v17 = v15;
  if (os_log_type_enabled(v16, v15))
  {
    uint64_t v19 = v1[44];
    uint64_t v18 = v1[45];
    uint64_t v21 = v1[42];
    uint64_t v20 = v1[43];
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v18, v21);
    uint64_t v23 = String.init<A>(describing:)();
    v1[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v16, v17, "makePromptForConfirmation: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v25 = v1[48];
  uint64_t v34 = v1[47];
  char v26 = v1[45];
  id v35 = v1[46];
  uint64_t v27 = v1[43];
  uint64_t v28 = v1[42];
  uint64_t v29 = v1[37];
  uint64_t v30 = (uint64_t *)v1[34];
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v29, v26, v28);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v28);
  static Device.current.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v31 = type metadata accessor for AceOutput();
  *(_OWORD *)(v1 + 19) = 0u;
  v1[21] = 0;
  *(_OWORD *)(v1 + 17) = 0u;
  v30[3] = v31;
  v30[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v30);
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of (label: String?, value: Any)?((uint64_t)(v1 + 17), &demangling cache variable for type metadata for FlowActivity?);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v1 + 22));
  outlined destroy of (label: String?, value: Any)?(v29, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v25, v35);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = (uint64_t (*)(void))v1[1];
  return v32();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ShareETAContactConfirmationStrategy.makeConfirmationRejectedResponse()(uint64_t a1)
{
  v2[25] = a1;
  v2[26] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[27] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  v2[28] = v3;
  v2[29] = *(void *)(v3 - 8);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PommesContext.Source();
  v2[32] = v4;
  v2[33] = *(void *)(v4 - 8);
  v2[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v2[35] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  v2[36] = v5;
  v2[37] = *(void *)(v5 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[40] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ActivityType();
  v2[41] = v6;
  v2[42] = *(void *)(v6 - 8);
  v2[43] = swift_task_alloc();
  return _swift_task_switch(ShareETAContactConfirmationStrategy.makeConfirmationRejectedResponse(), 0, 0);
}

id ShareETAContactConfirmationStrategy.makeConfirmationRejectedResponse()()
{
  uint64_t v44 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + 16);
  uint64_t v5 = v0 + 336;
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v5 + 8);
  uint64_t v6 = *(void *)(v1 + 328);
  static SiriKitEventSender.current.getter();
  uint64_t v42 = (uint64_t)v2;
  __swift_project_boxed_opaque_existential_1(v2, *(void *)(v1 + 40));
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for ActivityType.confirmationRejected(_:), v6);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
  id result = [(id)swift_getObjCClassFromMetadata() typeName];
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(v1 + 320);
  uint64_t v10 = *(void *)(v1 + 208);
  type metadata accessor for SiriKitEvent();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = enum case for SiriKitReliabilityCodes.rejectParameter(_:);
  uint64_t v12 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 104))(v9, v11, v12);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v42);
  static GeoNLContextUtils.makeNLContextFor(weightedPromptResponseTargets:)();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  uint64_t v15 = *(NSObject **)(v10 + 16);
  os_log_type_t v16 = v14;
  uint64_t v17 = os_log_type_enabled(v15, v14);
  if (v17)
  {
    uint64_t v19 = *(void *)(v1 + 304);
    uint64_t v18 = *(void *)(v1 + 312);
    uint64_t v20 = *(void *)(v1 + 288);
    uint64_t v21 = *(void *)(v1 + 296);
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v19, v18, v20);
    uint64_t v23 = String.init<A>(describing:)();
    *(void *)(v1 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v15, v16, "nl context = %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v17 = swift_slowDealloc();
  }
  if ((*(uint64_t (**)(uint64_t))(**(void **)(v1 + 208) + 120))(v17))
  {
    uint64_t v26 = *(void *)(v1 + 272);
    uint64_t v25 = *(void *)(v1 + 280);
    uint64_t v28 = *(void *)(v1 + 256);
    uint64_t v27 = *(void *)(v1 + 264);
    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
    (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))(v26, enum case for PommesContext.Source.pluginDefined(_:), v28);
    PommesContext.init(source:domain:listenAfterSpeaking:)();
    uint64_t v29 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v25, 0, 1, v29);
    swift_beginAccess();
    NLContextUpdate.pommesContext.setter();
LABEL_8:
    swift_endAccess();
    goto LABEL_9;
  }
  if ((*(uint64_t (**)(void))(**(void **)(v1 + 208) + 144))())
  {
    uint64_t v30 = *(void *)(v1 + 248);
    uint64_t v41 = *(void *)(v1 + 240);
    uint64_t v32 = *(void *)(v1 + 224);
    uint64_t v31 = *(void *)(v1 + 232);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_C0600;
    type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
    swift_allocObject();
    uint64_t v33 = UsoTaskBuilder_noVerb_common_Person.init()();
    type metadata accessor for UsoEntityBuilder_common_Person();
    swift_allocObject();
    UsoEntityBuilder_common_Person.init()();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    static Siri_Nlu_External_SystemPrompted.from(_:)(v33, v30);
    Siri_Nlu_External_SystemDialogAct.init()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v41, v30, v32);
    Siri_Nlu_External_SystemDialogAct.prompted.setter();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    swift_release();
    swift_release();
    swift_beginAccess();
    NLContextUpdate.nluSystemDialogActs.setter();
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v34 = *(void *)(v1 + 312);
  uint64_t v35 = *(void *)(v1 + 296);
  uint64_t v36 = *(void *)(v1 + 288);
  uint64_t v37 = *(void *)(v1 + 216);
  uint64_t v38 = *(uint64_t **)(v1 + 200);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v37, v34, v36);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v36);
  uint64_t v39 = type metadata accessor for AceOutput();
  *(_OWORD *)(v1 + 72) = 0u;
  *(void *)(v1 + 88) = 0;
  *(_OWORD *)(v1 + 56) = 0u;
  uint64_t v38[3] = v39;
  void v38[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_0(v38);
  static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of (label: String?, value: Any)?(v1 + 56, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of (label: String?, value: Any)?(v37, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = *(uint64_t (**)(void))(v1 + 8);
  return (id)v40();
}

uint64_t ShareETAContactConfirmationStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  char v2[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[28] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ActivityType();
  v2[29] = v4;
  v2[30] = *(void *)(v4 - 8);
  v2[31] = swift_task_alloc();
  return _swift_task_switch(ShareETAContactConfirmationStrategy.makeFlowCancelledResponse(), 0, 0);
}

id ShareETAContactConfirmationStrategy.makeFlowCancelledResponse()()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  uint64_t v3 = v0[29];
  static SiriKitEventSender.current.getter();
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ActivityType.canceled(_:), v3);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for INShareETAIntent);
  id result = [(id)swift_getObjCClassFromMetadata() typeName];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v0[28];
    uint64_t v14 = v0[23];
    type metadata accessor for SiriKitEvent();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v7 = enum case for SiriKitReliabilityCodes.rejectParameter(_:);
    uint64_t v8 = type metadata accessor for SiriKitReliabilityCodes();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(v6, v7, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 2));
    uint64_t v10 = *(void *)(v14 + 32);
    v0[10] = &type metadata for Common;
    v0[11] = &protocol witness table for Common;
    v0[7] = 0;
    uint64_t v11 = static DialogHelper.globals.getter();
    v0[32] = v11;
    uint64_t v15 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v10 + 112)
                                                             + **(int **)(*(void *)v10 + 112));
    uint64_t v12 = (void *)swift_task_alloc();
    v0[33] = v12;
    *uint64_t v12 = v0;
    v12[1] = ShareETAContactConfirmationStrategy.makeFlowCancelledResponse();
    uint64_t v13 = v0[27];
    return (id)v15(v13, v0 + 7, v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ShareETAContactConfirmationStrategy.makeFlowCancelledResponse()()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = ShareETAContactConfirmationStrategy.makeFlowCancelledResponse();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm(v2 + 56);
    uint64_t v3 = ShareETAPromptForContactStrategy.makeFlowCancelledResponse();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ShareETAContactConfirmationStrategy.makeErrorResponse(_:)()
{
  return _swift_task_switch(ShareETAContactConfirmationStrategy.makeErrorResponse(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  lazy protocol witness table accessor for type Errors and conformance Errors();
  swift_allocError();
  *(void *)uint64_t v1 = 0xD000000000000025;
  *(void *)(v1 + 8) = 0x80000000000CA890;
  *(unsigned char *)(v1 + 16) = 0;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ShareETAContactConfirmationStrategy.confirmationHandle(input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Input();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Parse();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for GeoParse();
  Input.parse.getter();
  static GeoParse.getDomainIntent(parse:)((uint64_t)v11, (uint64_t)v28);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  outlined init with copy of GeoIntent?((uint64_t)v28, (uint64_t)v27);
  if (!v27[3])
  {
    outlined destroy of (label: String?, value: Any)?((uint64_t)v27, &demangling cache variable for type metadata for GeoIntent?);
    goto LABEL_6;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeoIntent);
  type metadata accessor for LocationSearchIntent();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    uint64_t v13 = v4;
    uint64_t v14 = v25;
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    uint64_t v16 = *(NSObject **)(v14 + 16);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v13);
    if (os_log_type_enabled(v16, v15))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v24 = v13;
      uint64_t v18 = (uint8_t *)v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = a2;
      v27[0] = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v23 = v18 + 4;
      Input.parse.getter();
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
      _os_log_impl(&dword_0, v16, v15, "ignoring parse %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
    }
    static ActionForInput.ignore()();
    return outlined destroy of (label: String?, value: Any)?((uint64_t)v28, &demangling cache variable for type metadata for GeoIntent?);
  }
  uint64_t v12 = *(unsigned __int8 (**)(void))(*(void *)v26 + 152);
  if (v12() == 3)
  {
    swift_release();
    goto LABEL_6;
  }
  if (v12() == 2) {
    static ActionForInput.cancel()();
  }
  else {
    static ActionForInput.handle()();
  }
  swift_release();
  return outlined destroy of (label: String?, value: Any)?((uint64_t)v28, &demangling cache variable for type metadata for GeoIntent?);
}

uint64_t ShareETAContactConfirmationStrategy.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ShareETAContactConfirmationStrategy.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.actionForInput(_:) in conformance ShareETAContactConfirmationStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance ShareETAContactConfirmationStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 184) + **(int **)(*(void *)v2 + 184));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance ShareETAContactConfirmationStrategy(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 192) + **(int **)(*(void *)v2 + 192));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, v5);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance ShareETAContactConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ShareETAContactConfirmationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance ShareETAContactConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for ShareETAContactConfirmationStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance ShareETAContactConfirmationStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 200) + **(int **)(*(void *)v1 + 200));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAContactConfirmationStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 208) + **(int **)(*(void *)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return v6(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance ShareETAContactConfirmationStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 216) + **(int **)(*(void *)v2 + 216));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return v8(a1, a2);
}

void *associated type witness table accessor for PromptForConfirmationFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in ShareETAContactConfirmationStrategy()
{
  return &protocol witness table for SimpleConfirmationResponseProvider;
}

uint64_t sub_B6360@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_B63B0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 128))(*a1);
}

uint64_t sub_B63F8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_B6448(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 152))(*a1);
}

uint64_t type metadata accessor for ShareETAContactConfirmationStrategy()
{
  return self;
}

uint64_t TrafficIncidentBaseRCHStrategy.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t TrafficIncidentBaseRCHStrategy.actionForInput(input:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (id *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - v5;
  Input.parse.getter();
  (*(void (**)(id *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  int v7 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v4, v0);
  if (v7 == enum case for Parse.NLv3IntentOnly(_:))
  {
    static ActionForInput.handle()();
  }
  else
  {
    if (v7 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(id *, uint64_t))(v1 + 96))(v4, v0);

      static os_log_type_t.info.getter();
      os_log(_:dso:log:_:_:)();
      static ActionForInput.handle()();
      return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    static ActionForInput.cancel()();
  }
  uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v6, v0);
  return ((uint64_t (*)(id *, uint64_t))v9)(v4, v0);
}

uint64_t TrafficIncidentBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = v2;
  return _swift_task_switch(TrafficIncidentBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:), 0, 0);
}

uint64_t TrafficIncidentBaseRCHStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  unint64_t v21 = v0;
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v0[4];
  if (v1)
  {
    id v3 = v1;
    os_log_type_t v4 = static os_log_type_t.info.getter();
    uint64_t v5 = *(NSObject **)(v2 + 16);
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      id v7 = v3;
      id v19 = v3;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      id v9 = v7;
      id v10 = [v9 description];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v5, v6, "makeIntentFromParse with current intent: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v3 = v19;
      swift_slowDealloc();
    }
    uint64_t v14 = (uint64_t (*)(id))v0[1];
    return v14(v3);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for RuntimeError();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = 0xD000000000000040;
    *(void *)(v16 + 24) = 0x80000000000CA910;
    _s21GeoFlowDelegatePlugin12RuntimeErrorCACs0F0AAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type RuntimeError and conformance RuntimeError, 255, (void (*)(uint64_t))type metadata accessor for RuntimeError);
    swift_allocError();
    *uint64_t v17 = v16;
    swift_willThrow();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t TrafficIncidentBaseRCHStrategy.init()()
{
  type metadata accessor for OS_os_log();
  *(void *)(v0 + 16) = OS_os_log.init(subsystem:category:)();
  return v0;
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance TrafficIncidentBaseRCHStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance TrafficIncidentBaseRCHStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 96)
                                                + **(int **)(**(void **)v2 + 96));
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *os_log_type_t v6 = v3;
  v6[1] = protocol witness for HandleFilterProtocolAsync.filterHandles(recipients:) in conformance ContactHandleResolver;
  return v8(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance TrafficIncidentBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TrafficIncidentBaseRCHStrategy();

  return RCHFlowStrategyAsync.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance TrafficIncidentBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  *id v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance TrafficIncidentBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  *id v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance TrafficIncidentBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  *id v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance TrafficIncidentBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  *unint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShareETAPromptForContactStrategy;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance TrafficIncidentBaseRCHStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for TrafficIncidentBaseRCHStrategy();
  *unint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShareETAPromptForContactStrategy;
  return RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(a1, a2, a3, a4, v13, a6);
}