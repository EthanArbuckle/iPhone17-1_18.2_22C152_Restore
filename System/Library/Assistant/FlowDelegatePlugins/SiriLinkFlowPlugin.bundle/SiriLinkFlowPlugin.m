uint64_t SiriLinkFlowProvisionalLinkActionReadFrom(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  SiriLinkFlowProvisionalLinkActionParameter *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v12 = v6 >> 3;
    if ((v6 >> 3) == 1)
    {
      PBReaderReadString();
      v19 = (SiriLinkFlowProvisionalLinkActionParameter *)objc_claimAutoreleasedReturnValue();
      [a1 setIdentifier:v19];
    }
    else
    {
      if (v12 != 3)
      {
        if (v12 == 2)
        {
          v13 = 0;
          v14 = 0;
          v15 = 0;
          while (1)
          {
            v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0) {
              goto LABEL_36;
            }
            v13 += 7;
            v9 = v14++ >= 9;
            if (v9)
            {
              v18 = 0;
              goto LABEL_39;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            v18 = 0;
          }
          else {
            v18 = v15;
          }
LABEL_39:
          objc_msgSend(a1, "setPresentationStyle:", v18, v21, v22);
        }
        else
        {
          result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
        }
        continue;
      }
      v19 = objc_alloc_init(SiriLinkFlowProvisionalLinkActionParameter);
      v21 = 0;
      v22 = 0;
      if (!PBReaderPlaceMark()
        || !SiriLinkFlowProvisionalLinkActionParameterReadFrom(v19, a2))
      {

        return 0;
      }
      PBReaderRecallMark();
      if (v19) {
        objc_msgSend(a1, "addParameters:", v19, 0, 0);
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SiriLinkFlowProvisionalLinkActionParameterReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      v12 = PBReaderReadString();
      [a1 setName:v12];
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SiriLinkFlowProvisionalLinkActionCompletionReadFrom(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v12 = (SiriLinkFlowProvisionalLinkAction *)objc_claimAutoreleasedReturnValue();
        [a1 setTargetBundle:v12];
        goto LABEL_32;
      case 2u:
        v12 = objc_alloc_init(SiriLinkFlowProvisionalLinkAction);
        if PBReaderPlaceMark() && (SiriLinkFlowProvisionalLinkActionReadFrom(v12, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setAction:", v12, 0, 0);
LABEL_32:

LABEL_37:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        char v14 = 0;
        unsigned int v15 = 0;
        uint64_t v16 = 0;
        while (2)
        {
          unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1 || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
            v16 |= (unint64_t)(v18 & 0x7F) << v14;
            if (v18 < 0)
            {
              v14 += 7;
              BOOL v9 = v15++ >= 9;
              if (v9)
              {
                uint64_t v16 = 0;
                goto LABEL_36;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v16 = 0;
        }
LABEL_36:
        [a1 setIsSuccess:v16 != 0];
        goto LABEL_37;
      case 4u:
        PBReaderReadString();
        v12 = (SiriLinkFlowProvisionalLinkAction *)objc_claimAutoreleasedReturnValue();
        [a1 setErrorDescription:v12];
        goto LABEL_32;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_37;
    }
  }
}

uint64_t SiriLinkFlowProvisionalLinkActionConversionReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      unint64_t v17 = PBReaderReadString();
      [a1 setOutcome:v17];
    }
    else if ((v6 >> 3) == 2)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_30;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          uint64_t v14 = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v14 = 0;
      }
LABEL_32:
      [a1 setIsSuccess:v14 != 0];
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL SiriLinkFlowProvisionalSiriLinkFlowClientEventReadFrom(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((v6 >> 3) == 102)
      {
        unsigned int v13 = objc_alloc_init(SiriLinkFlowProvisionalLinkActionConversion);
        if (!PBReaderPlaceMark()
          || (SiriLinkFlowProvisionalLinkActionConversionReadFrom(v13, a2) & 1) == 0)
        {
LABEL_33:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkActionConversion:", v13, 0, 0);
        goto LABEL_29;
      }
      if (v12 == 101) {
        break;
      }
      if (v12 == 1)
      {
        unsigned int v13 = (SiriLinkFlowProvisionalLinkActionConversion *)objc_alloc_init((Class)FLOWSchemaFLOWEventMetadata);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWEventMetadataReadFrom() & 1) == 0) {
          goto LABEL_33;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEventMetadata:", v13, 0, 0);
LABEL_29:

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_31:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    unsigned int v13 = objc_alloc_init(SiriLinkFlowProvisionalLinkActionCompletion);
    if (!PBReaderPlaceMark() || (SiriLinkFlowProvisionalLinkActionCompletionReadFrom(v13, a2) & 1) == 0) {
      goto LABEL_33;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setLinkActionCompletion:", v13, 0, 0);
    goto LABEL_29;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestRemovalInfoReadFrom(void *a1, uint64_t a2, double a3)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v5 = 0;
    unsigned int v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1 || v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_11;
      }
      v5 += 7;
      if (v6++ >= 9)
      {
        unint64_t v7 = 0;
        uint64_t v12 = OBJC_IVAR___PBDataReader__error;
        int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v12 = OBJC_IVAR___PBDataReader__error;
    int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v7 = 0;
    }
LABEL_13:
    if (v13 || (v7 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v15 = v7 >> 3;
    if ((v7 >> 3) == 3)
    {
      char v16 = PBReaderReadString();
      [a1 setWfRunnerEventName:v16];
    }
    else
    {
      if (v15 == 2)
      {
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFFBLL && v17 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          LODWORD(a3) = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v12) = 1;
          a3 = 0.0;
        }
        [a1 setClockSeconds:a3];
        continue;
      }
      if (v15 != 1)
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
      }
      char v16 = PBReaderReadString();
      [a1 setShortcutName:v16];
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContextInfoReadFrom(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
      return v3 == 0;
    }
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      int v3 = 1;
      return v3 == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LOBYTE(v6) = 0;
    }
LABEL_13:
    if (v3) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = (v6 & 7) == 4;
    }
    if (v10) {
      return v3 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContextReadFrom(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((v6 >> 3) == 101)
      {
        int v13 = objc_alloc_init(VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestRemovalInfo);
        if (!PBReaderPlaceMark()
          || (VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestRemovalInfoReadFrom(v13, a2, v14) & 1) == 0)
        {
LABEL_33:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v13, 0, 0);
        goto LABEL_29;
      }
      if (v12 == 100) {
        break;
      }
      if (v12 == 1)
      {
        int v13 = (VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestRemovalInfo *)objc_alloc_init((Class)SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom() & 1) == 0) {
          goto LABEL_33;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v13, 0, 0);
LABEL_29:

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_31:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    int v13 = objc_alloc_init(VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContextInfo);
    if (!PBReaderPlaceMark()
      || !VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContextInfoReadFrom((uint64_t)v13, a2))
    {
      goto LABEL_33;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setStartedOrChanged:", v13, 0, 0);
    goto LABEL_29;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t NSError.isPreflightError.getter()
{
  id v3 = [v1 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17();
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v0 == v4)
  {
    OUTLINED_FUNCTION_13();
  }
  else
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_14();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0) {
      goto LABEL_9;
    }
  }
  if ([v1 code] == &stru_658.reserved3) {
    return 1;
  }
LABEL_9:
  id v6 = [v1 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17();
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v0 == v7)
  {
    OUTLINED_FUNCTION_13();
LABEL_16:
    if ([v1 code] != "libswiftQuartzCore.dylib") {
      goto LABEL_17;
    }
    return 1;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_14();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_16;
  }
LABEL_17:
  id v9 = [v1 userInfo];
  uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary.subscript.getter(v11, v12, v10, &v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22)
  {
    if (swift_dynamicCast())
    {
      long long v21 = v20;
      lazy protocol witness table accessor for type String and conformance String();
      char v13 = OUTLINED_FUNCTION_18();
      swift_bridgeObjectRelease();
      if (v13)
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
        unint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v15, v16))
        {
          *(_WORD *)swift_slowAlloc() = 0;
          OUTLINED_FUNCTION_20(&dword_0, v17, v18, "Error description indicates it is a preflight error");
          OUTLINED_FUNCTION_15();
        }

        return 1;
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v6 & 1) != 0))
  {
    uint64_t v7 = OUTLINED_FUNCTION_11(v5);
    outlined init with copy of Any(v7, v8);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    uint64_t v6 = OUTLINED_FUNCTION_11(v4);
    outlined init with copy of Any(v6, v7);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t vars8;

  if (*(void *)(a2 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    uint64_t v6 = OUTLINED_FUNCTION_11(v4);
    outlined init with copy of Any(v6, v7);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a2 + 56) + v3);
  }
  else {
    return 2;
  }
}

uint64_t specialized Dictionary.subscript.getter(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a2 + 56) + v3);
  }
  else {
    return 2;
  }
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v3) {
      swift_bridgeObjectRetain();
    }
  }
  return OUTLINED_FUNCTION_19();
}

{
  unint64_t v4;
  char v5;

  if (*(void *)(a3 + 16) && (char v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0;
  }
}

{
  char v3;

  if (*(void *)(a3 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v3)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return OUTLINED_FUNCTION_19();
}

{
  char v3;

  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_6();
    outlined init with copy of DeviceState?(v9 + *(void *)(v11 + 72) * v8, a4, (uint64_t *)&demangling cache variable for type metadata for URL?);
    uint64_t v12 = a4;
    uint64_t v13 = 0;
    uint64_t v14 = 1;
    uint64_t v15 = v10;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    uint64_t v12 = OUTLINED_FUNCTION_7();
  }

  return __swift_storeEnumTagSinglePayload(v12, v13, v14, v15);
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t NSError.isUnsupportedInCarPlayError.getter()
{
  id v3 = [v1 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17();
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v0 == v4)
  {
    OUTLINED_FUNCTION_13();
  }
  else
  {
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_14();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0) {
      goto LABEL_9;
    }
  }
  if ([v1 code] == stru_6F8.segname) {
    return 1;
  }
LABEL_9:
  id v6 = [v1 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17();
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v0 == v7)
  {
    OUTLINED_FUNCTION_13();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_14();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if (v2)
  {
LABEL_16:
    id v10 = [v1 localizedDescription];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type String and conformance String();
    LOBYTE(v10) = OUTLINED_FUNCTION_18();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 0;
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_20(&dword_0, v14, v15, "Error description indicates it is an UnsupportedInCarPlay error");
      OUTLINED_FUNCTION_15();
    }

    return 1;
  }
  return result;
}

BOOL NSError.isLinkUserCancelledError.getter()
{
  id v3 = [v1 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17();
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v0 == v4)
  {
    OUTLINED_FUNCTION_13();
    return [v1 code] == (char *)&stru_798.initprot + 3;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_14();
  swift_bridgeObjectRelease();
  BOOL result = 0;
  if (v2) {
    return [v1 code] == (char *)&stru_798.initprot + 3;
  }
  return result;
}

uint64_t NSError.filteredLocalizedDescription.getter()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  id v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  char v5 = (SEL *)&unk_2A1000;
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t type = v4;
    uint64_t v6 = swift_slowAlloc();
    v25[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315650;
    id v7 = [v2 domain];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2048;
    [v2 code];

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2080;
    id v11 = [v2 userInfo];
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = Dictionary.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v25);
    char v5 = (SEL *)&unk_2A1000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, type, "#NSError:\n Domain:%s\n Code-%ld\n Underlying userInfo: %s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    OUTLINED_FUNCTION_15();
  }
  else
  {
  }
  if (one-time initialization token for notLocalized != -1) {
    swift_once();
  }
  uint64_t v15 = static ErrorDomain.notLocalized[0];
  uint64_t v16 = *(void *)((char *)static ErrorDomain.notLocalized[0] + (unint64_t)&dword_10);
  if (v16)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v17 = v15 + 10;
    while (1)
    {
      swift_bridgeObjectRetain();
      id v18 = [v2 v5[489]];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      v25[0] = v19;
      v25[1] = v21;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      LOBYTE(v18) = BidirectionalCollection<>.starts<A>(with:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18) {
        break;
      }
      v17 += 4;
      --v16;
      char v5 = (SEL *)&unk_2A1000;
      if (!v16)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
LABEL_13:
    id v22 = [v2 localizedDescription];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return OUTLINED_FUNCTION_19();
}

void one-time initialization function for notLocalized()
{
  static ErrorDomain.notLocalized[0] = (int *)&outlined read-only object #0 of one-time initialization function for notLocalized;
}

uint64_t default argument 3 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for RunCustomIntentCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 4 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for RunCustomIntentCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 5 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for RunVoiceCommandCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 6 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for RunVoiceCommandCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 7 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 7 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)((uint64_t (*)(void))type metadata accessor for AppNameResolver, (uint64_t)&protocol witness table for AppNameResolver, a1);
}

uint64_t default argument 8 of WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for WorkflowRunnerCATPatternsExecutor, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

void static SLFLocationAccessGuardProvider.makeGuardFlow.getter()
{
}

uint64_t default argument 4 of INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 12 of WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)((uint64_t (*)(void))&type metadata accessor for DateTimeResolver, (uint64_t)&protocol witness table for DateTimeResolver, (uint64_t (*)(void))&DateTimeResolver.init(), a1);
}

void LinkRCHFlowFactory.init()()
{
}

uint64_t default argument 0 of ShortcutIdentification.getIdentifyingName(vcClient:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 7 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)((uint64_t (*)(void))type metadata accessor for VoiceShortcutClientWrapper, (uint64_t)&protocol witness table for VoiceShortcutClientWrapper, a1);
}

void default argument 7 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)()
{
}

uint64_t default argument 8 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)()
{
  if (AFDeviceSupportsSAE())
  {
    id v3 = &type metadata for IntelligenceFlowFeatureFlags;
    unint64_t v4 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags();
    v2[0] = 1;
    char v0 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t default argument 8 of CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of CustomIntentTCCFlowStrategy.init(deviceState:labelsProvider:responseFactory:)((uint64_t (*)(void))&type metadata accessor for ResponseFactory, (uint64_t (*)(void))&ResponseFactory.init(), (uint64_t)&protocol witness table for ResponseFactory, a1);
}

void default argument 1 of App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for AppInfoResolver;
  *(void *)(a1 + 32) = &protocol witness table for AppInfoResolver;
}

double variable initialization expression of LocationProvider.defaultTimeout()
{
  return 0.05;
}

double variable initialization expression of TfIdfFuzzyMatcher.lowPassFilter()
{
  return 0.15;
}

double variable initialization expression of TfIdfFuzzyMatcher.highPassFilter()
{
  return 0.75;
}

uint64_t default argument 1 of LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for RunLinkActionCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 2 of LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for RunLinkActionCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 5 of INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of CustomIntentTCCFlowStrategy.init(deviceState:labelsProvider:responseFactory:)((uint64_t (*)(void))&type metadata accessor for ContactResolver, (uint64_t (*)(void))&ContactResolver.init(), (uint64_t)&protocol witness table for ContactResolver, a1);
}

unint64_t default argument 1 of VoiceCommandsScreentimeCheckFlowStrategy.init(appPolicyHandler:bundleId:)()
{
  return OUTLINED_FUNCTION_10();
}

void variable initialization expression of CustomIntentStateAttachment.parameterName()
{
}

id default argument 6 of WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)()
{
  id v0 = objc_allocWithZone((Class)AFPreferences);

  return [v0 init];
}

unint64_t variable initialization expression of SiriLinkFlowPlugin.voiceShortcutDirectInvocationIdentifier()
{
  return 0xD000000000000030;
}

uint64_t default argument 2 of ListShortcutsFlow.init(deviceState:aceServiceInvoker:catWrapper:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for ListShortcutsCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 2 of AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for AutoShortcutCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

void *default argument 5 of AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)()
{
  OUTLINED_FUNCTION_12();
  uint64_t v1 = type metadata accessor for UserDefaultsWrapper();
  swift_allocObject();
  BOOL result = UserDefaultsWrapper.init()();
  v0[3] = v1;
  v0[4] = &protocol witness table for UserDefaultsWrapper;
  *id v0 = result;
  return result;
}

uint64_t default argument 2 of WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for WorkflowRunnerCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 3 of WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for WorkflowRunnerCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 1 of AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for AutoShortcutCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

void *default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  id v0 = [self standardClient];
  *(void *)(swift_allocObject() + 16) = v0;
  return &async function pointer to partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
}

uint64_t default argument 0 of SiriLinkViewModel.asPatternParams(with:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

void *default argument 0 of static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:)()
{
  uint64_t v0 = type metadata accessor for CATOption();
  uint64_t v1 = OUTLINED_FUNCTION_16(v0);
  __chkstk_darwin(v1);
  static Device.current.getter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v3 = OUTLINED_FUNCTION_21();
  type metadata accessor for WorkflowRunnerCATsSimple();
  OUTLINED_FUNCTION_5();
  uint64_t v4 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATs();
  OUTLINED_FUNCTION_5();
  uint64_t v5 = OUTLINED_FUNCTION_21();
  type metadata accessor for RunCustomIntentCATsSimple();
  OUTLINED_FUNCTION_5();
  uint64_t v6 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_5();
  uint64_t v7 = OUTLINED_FUNCTION_21();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_5();
  uint64_t v8 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
  OUTLINED_FUNCTION_5();
  uint64_t v9 = OUTLINED_FUNCTION_21();
  type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject();
  return WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v11, v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t default argument 1 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

void *IntroduceCustomIntentViewBuilder.makeViews(withTemplate:items:)()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t default argument 0 of static TemplatingResult.getBehaviorAfterSpeaking(behavior:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for BehaviorAfterSpeaking.defaultBehavior(_:);
  type metadata accessor for BehaviorAfterSpeaking();
  OUTLINED_FUNCTION_6();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);

  return v5(a1, v2, v3);
}

void default argument 7 of ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for EnableTCCLabelsProvider;
  *(void *)(a1 + 32) = &protocol witness table for EnableTCCLabelsProvider;
}

uint64_t variable initialization expression of VoiceCommandsAppPolicyHandler.appQueue()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_9();
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_8();
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = OUTLINED_FUNCTION_16(v5);
  __chkstk_darwin(v6);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v0, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

void *variable initialization expression of VoiceCommandsAppPolicyHandler.unsafeApps()
{
  return &_swiftEmptyDictionarySingleton;
}

void default argument 2 of static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)()
{
}

uint64_t variable initialization expression of WFChooseFromListPromptFlowStrategy.WINDOWSIZE()
{
  return 6;
}

uint64_t default argument 2 of INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 12 of WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)((uint64_t (*)(void))&type metadata accessor for LocationResolver, (uint64_t)&protocol witness table for LocationResolver, (uint64_t (*)(void))&LocationResolver.init(), a1);
}

uint64_t default argument 3 of INIntentResolutionResult.getDisplayHints(intent:parameter:locale:shouldIncludeOrdinalReference:)()
{
  return 1;
}

uint64_t variable initialization expression of CustomIntentExecutionFlow.input()
{
  type metadata accessor for Input();
  uint64_t v0 = OUTLINED_FUNCTION_7();

  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

uint64_t default argument 7 of WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v2 = static VoiceCommandsAppPolicyHandler.instance;
  a1[3] = type metadata accessor for VoiceCommandsAppPolicyHandler();
  a1[4] = (uint64_t)&protocol witness table for VoiceCommandsAppPolicyHandler;
  *a1 = v2;

  return swift_retain();
}

uint64_t variable initialization expression of LinkActivityManager.storage()
{
  type metadata accessor for LinkActivityManager.AtomicSessionResult();
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = _swiftEmptyArrayStorage;
  return v0;
}

uint64_t variable initialization expression of UserDefaultsWrapper.camPersistenceKey()
{
  return 0x75616665444D4143;
}

unint64_t variable initialization expression of UserDefaultsWrapper.appShortcutAmbiguousFirstRunShownKey()
{
  return 0xD000000000000021;
}

uint64_t variable initialization expression of RunCustomIntentReadingDelegate.pageSize()
{
  return 5;
}

id default argument 4 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)()
{
  OUTLINED_FUNCTION_12();
  uint64_t v1 = type metadata accessor for LinkMetadataProvider();
  uint64_t v2 = swift_allocObject();
  id result = [objc_allocWithZone((Class)LNMetadataProvider) init];
  *(void *)(v2 + 16) = result;
  v0[3] = v1;
  v0[4] = (uint64_t)&protocol witness table for LinkMetadataProvider;
  *uint64_t v0 = v2;
  return result;
}

uint64_t variable initialization expression of ShortcutsHandoffFlow.state@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Input();

  return __swift_storeEnumTagSinglePayload(a1, 1, 2, v2);
}

id variable initialization expression of LinkMetadataProvider.wrappedProvider()
{
  id v0 = objc_allocWithZone((Class)LNMetadataProvider);

  return [v0 init];
}

uint64_t default argument 7 of CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)()
{
  type metadata accessor for ContinueInAppCATWrapperSimple();
  memset(v4, 0, sizeof(v4));
  uint64_t v5 = 0;
  swift_allocObject();
  outlined init with copy of DeviceState?((uint64_t)v4, (uint64_t)v3, &demangling cache variable for type metadata for DeviceState?);
  SiriKitFlowCATWrapperSimple.init(deviceState:)();
  uint64_t v1 = v0;
  outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for DeviceState?);
  return v1;
}

uint64_t default argument 3 of LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)()
{
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v1);
}

uint64_t default argument 1 of InstallShortcutViewFactory.init(deviceState:catWrapper:)()
{
  return default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)((void (*)(uint64_t))type metadata accessor for InstallShortcutCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t variable initialization expression of AutoShortcutsSetEnablementFlow.contextProvider()
{
  type metadata accessor for WorkflowNLContextProvider();

  return swift_allocObject();
}

uint64_t default argument 5 of LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)()
{
  OUTLINED_FUNCTION_12();
  uint64_t v1 = type metadata accessor for CATOption();
  uint64_t v2 = OUTLINED_FUNCTION_16(v1);
  __chkstk_darwin(v2);
  uint64_t v3 = OUTLINED_FUNCTION_9();
  uint64_t v4 = type metadata accessor for RunLinkActionCATPatternsExecutor(v3);
  static CATOption.defaultMode.getter();
  uint64_t result = CATWrapper.__allocating_init(options:globals:)();
  v0[3] = v4;
  v0[4] = (uint64_t)&protocol witness table for RunLinkActionCATPatternsExecutor;
  *uint64_t v0 = result;
  return result;
}

uint64_t default argument 7 of CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1(0);
  uint64_t result = swift_allocObject();
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

id default argument 1 of AutoShortcutInvocation.init(directInvocationData:provider:preferences:)()
{
  OUTLINED_FUNCTION_12();
  uint64_t v1 = type metadata accessor for AutoShortcutProvider();
  uint64_t v2 = swift_allocObject();
  id result = [objc_allocWithZone((Class)LNAutoShortcutsProvider) init];
  *(void *)(v2 + 16) = result;
  v0[3] = v1;
  v0[4] = (uint64_t)&protocol witness table for AutoShortcutProvider;
  *uint64_t v0 = v2;
  return result;
}

id default argument 8 of AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)()
{
  id v0 = [self sharedPreferences];

  return v0;
}

_UNKNOWN **variable initialization expression of InputToDisambiguationItemsConverter.fuzzyMatchLanguages()
{
  return &outlined read-only object #0 of variable initialization expression of InputToDisambiguationItemsConverter.fuzzyMatchLanguages;
}

uint64_t default argument 2 of CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)(void (*a1)(uint64_t), uint64_t (*a2)(uint64_t, void))
{
  uint64_t v5 = type metadata accessor for CATOption();
  uint64_t v6 = OUTLINED_FUNCTION_16(v5);
  __chkstk_darwin(v6);
  uint64_t v7 = OUTLINED_FUNCTION_8();
  a1(v7);
  OUTLINED_FUNCTION_5();
  return a2(v2, 0);
}

uint64_t default argument 2 of CustomIntentTCCFlowStrategy.init(deviceState:labelsProvider:responseFactory:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = a1(0);
  swift_allocObject();
  uint64_t result = a2();
  a4[3] = v7;
  a4[4] = a3;
  *a4 = result;
  return result;
}

uint64_t variable initialization expression of RunLinkActionContinueInAppParameters.customDialog()
{
  OUTLINED_FUNCTION_12();
  type metadata accessor for SpeakableString();
  uint64_t v0 = OUTLINED_FUNCTION_7();

  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

uint64_t default argument 11 of WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)@<X0>(uint64_t *a1@<X8>)
{
  static AceService.currentAsync.getter();
  uint64_t v2 = type metadata accessor for LocationProvider();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x3FA999999999999ALL;
  uint64_t result = outlined init with take of AceServiceInvokerAsync(&v5, v3 + 24);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for LocationProvider;
  *a1 = v3;
  return result;
}

uint64_t default argument 12 of WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a1(0);
  a4[4] = a2;
  __swift_allocate_boxed_opaque_existential_1(a4);
  return a3();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer protocol witness for RawRepresentable.rawValue.getter in conformance _INIntentType()
{
  uint64_t v1 = OUTLINED_FUNCTION_2();
  result.items._rawValue = CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)v1).items._rawValue;
  v0->items._rawValue = result.items._rawValue;
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSJSONWritingOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = variable initialization expression of WorkflowRunnerInputTextParameters.device();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance WFContentItemListThumbnailOption()
{
  return specialized _SwiftNewtypeWrapper<>.hashValue.getter(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WFContentItemListThumbnailOption()
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)();
}

uint64_t specialized _SwiftNewtypeWrapper<>.hash(into:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WFContentItemListThumbnailOption()
{
  return specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)();
}

Swift::Int specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance LNMeasurementUnitType(uint64_t a1@<X8>)
{
  INDeviceIdiom.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t specialized _SwiftNewtypeWrapper<>.hashValue.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WFTextFieldKeyboardType(void *a1, void *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance INIntentSlotValueType(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance LNValueTypeSpecificMetadataKey()
{
  return specialized _SwiftNewtypeWrapper<>.hashValue.getter(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance LNValueTypeSpecificMetadataKey(uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(a1, a2);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance LNValueTypeSpecificMetadataKey(uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2) & 1;
}

NSString protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance LNValueTypeSpecificMetadataKey@<X0>(void *a1@<X8>)
{
  NSString result = specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance NSMatchingOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WFTextFieldKeyboardType()
{
  uint64_t v1 = OUTLINED_FUNCTION_2();
  uint64_t result = LNValueTypeSpecificMetadataKey.rawValue.getter(v1);
  *Swift::Int v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LNValueTypeSpecificMetadataKey()
{
  return specialized == infix<A>(_:_:)();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance WFContentItemListThumbnailOption(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey(&lazy protocol witness table cache variable for type WFContentItemListThumbnailOption and conformance WFContentItemListThumbnailOption, type metadata accessor for WFContentItemListThumbnailOption);
  uint64_t v3 = lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey(&lazy protocol witness table cache variable for type WFContentItemListThumbnailOption and conformance WFContentItemListThumbnailOption, type metadata accessor for WFContentItemListThumbnailOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance WFContentItemListThumbnailOption@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LNValueTypeSpecificMetadataKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LNValueTypeSpecificMetadataKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNValueTypeSpecificMetadataKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey((unint64_t *)&lazy protocol witness table cache variable for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey, type metadata accessor for LNValueTypeSpecificMetadataKey);
  uint64_t v3 = lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey(&lazy protocol witness table cache variable for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey, type metadata accessor for LNValueTypeSpecificMetadataKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)_StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t outlined init with take of AceServiceInvokerAsync(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t lazy protocol witness table accessor for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags;
  if (!lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags;
  if (!lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags);
  }
  return result;
}

uint64_t sub_E0C4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  int64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *int64_t v7 = v3;
  v7[1] = partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
  return implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(a1, a2, v6);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

void type metadata accessor for INDeviceIdiom(uint64_t a1)
{
}

void type metadata accessor for DMFPolicy(uint64_t a1)
{
}

void type metadata accessor for LNMeasurementUnitType(uint64_t a1)
{
}

void type metadata accessor for INIntentSlotValueType(uint64_t a1)
{
}

void type metadata accessor for LNValueTypeSpecificMetadataKey(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in LNValueTypeSpecificMetadataKey()
{
  return lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey(&lazy protocol witness table cache variable for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey, type metadata accessor for LNValueTypeSpecificMetadataKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LNValueTypeSpecificMetadataKey()
{
  return lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey(&lazy protocol witness table cache variable for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey, type metadata accessor for LNValueTypeSpecificMetadataKey);
}

uint64_t lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in LNValueTypeSpecificMetadataKey()
{
  return lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey(&lazy protocol witness table cache variable for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey, type metadata accessor for LNValueTypeSpecificMetadataKey);
}

uint64_t specialized == infix<A>(_:_:)()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    LOBYTE(v0) = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  char v0;
  char v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  OUTLINED_FUNCTION_22_20();
  if (v7)
  {
    char v5 = 0xE600000000000000;
    unint64_t v4 = OUTLINED_FUNCTION_19_13();
  }
  else
  {
    if (v3 == 1) {
      unint64_t v4 = 0x656761507473616CLL;
    }
    else {
      unint64_t v4 = 0x726F4D726566666FLL;
    }
    if (v3 == 1) {
      char v5 = 0xE800000000000000;
    }
    else {
      char v5 = 0xE900000000000065;
    }
  }
  if (v1)
  {
    if (v1 == 1) {
      uint64_t v2 = 0x656761507473616CLL;
    }
    else {
      uint64_t v2 = 0x726F4D726566666FLL;
    }
    if (v1 == 1) {
      uint64_t v6 = 0xE800000000000000;
    }
    else {
      uint64_t v6 = 0xE900000000000065;
    }
  }
  else
  {
    uint64_t v6 = 0xE600000000000000;
  }
  int64_t v7 = v4 == v2 && v5 == v6;
  if (v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_13_21();
  switch(v3)
  {
    case 1:
      uint64_t v0 = 0xEB00000000656D61;
      break;
    case 2:
      uint64_t v0 = 0x8000000000224A90;
      break;
    case 3:
      uint64_t v0 = 0xE90000000000006FLL;
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_46_8();
  switch(v7)
  {
    case 1:
      char v5 = 0x4E707041776F6873;
      uint64_t v1 = 0xEB00000000656D61;
      break;
    case 2:
      uint64_t v1 = (v6 - 32) | 0x8000000000000000;
      char v5 = 0xD000000000000013;
      break;
    case 3:
      char v5 = 0x72746E49776F6873;
      uint64_t v1 = 0xE90000000000006FLL;
      break;
    default:
      break;
  }
  if (v4 == v5 && v0 == v1) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_13_21();
  switch(v3)
  {
    case 2:
      OUTLINED_FUNCTION_38_11();
      break;
    case 3:
      uint64_t v0 = 0xE300000000000000;
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_46_8();
  switch(v6)
  {
    case 1:
      char v5 = 0x7265626D756ELL;
      break;
    case 2:
      uint64_t v1 = 0xE400000000000000;
      char v5 = 1954047348;
      break;
    case 3:
      uint64_t v1 = 0xE300000000000000;
      char v5 = 7107189;
      break;
    default:
      break;
  }
  if (v4 == v5 && v0 == v1) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_13_21();
  switch(v3)
  {
    case 1:
      uint64_t v0 = 0xE400000000000000;
      break;
    case 2:
      uint64_t v0 = 0xEB00000000656D69;
      break;
    case 3:
      OUTLINED_FUNCTION_38_11();
      break;
    case 4:
      uint64_t v0 = 0xE400000000000000;
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_46_8();
  switch(v6)
  {
    case 1:
      uint64_t v1 = 0xE400000000000000;
      char v5 = 1702125924;
      break;
    case 2:
      char v5 = 0x54646E4165746164;
      uint64_t v1 = 0xEB00000000656D69;
      break;
    case 3:
      uint64_t v1 = 0xE400000000000000;
      char v5 = 1954047348;
      break;
    case 4:
      uint64_t v1 = 0xE400000000000000;
      char v5 = 1701669236;
      break;
    default:
      break;
  }
  if (v4 == v5 && v0 == v1) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  unint64_t v0;
  unsigned __int8 v1;
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  uint64_t v0 = 0xE900000000000065;
  OUTLINED_FUNCTION_43_6();
  unint64_t v4 = v1;
  if (v1)
  {
    if (v1 == 1) {
      char v5 = 0x66664F7470656BLL;
    }
    else {
      char v5 = 0x6E4F7470656BLL;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xE700000000000000;
    }
    else {
      uint64_t v6 = 0xE600000000000000;
    }
  }
  else
  {
    char v5 = OUTLINED_FUNCTION_52_3();
    uint64_t v6 = 0xE900000000000065;
  }
  if (v2)
  {
    if (v2 == 1) {
      uint64_t v3 = 0x66664F7470656BLL;
    }
    else {
      uint64_t v3 = 0x6E4F7470656BLL;
    }
    if (v2 == 1) {
      uint64_t v0 = 0xE700000000000000;
    }
    else {
      uint64_t v0 = 0xE600000000000000;
    }
  }
  if (v5 == v3 && v6 == v0) {
    int64_t v8 = 1;
  }
  else {
    int64_t v8 = OUTLINED_FUNCTION_42_8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  char v0;
  char v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;

  OUTLINED_FUNCTION_22_20();
  if (v1)
  {
    uint64_t v6 = 0xE600000000000000;
    char v5 = OUTLINED_FUNCTION_19_13();
  }
  else
  {
    OUTLINED_FUNCTION_28_13();
    if (v1) {
      char v5 = 0x74706D6F7270;
    }
    else {
      char v5 = 0x6341686372616573;
    }
    if (v1) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 0xEC0000006E6F6974;
    }
  }
  if (v2)
  {
    OUTLINED_FUNCTION_28_13();
    if (v7) {
      uint64_t v3 = 0x74706D6F7270;
    }
    else {
      uint64_t v3 = 0x6341686372616573;
    }
    if (v7) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0xEC0000006E6F6974;
    }
  }
  else
  {
    uint64_t v9 = 0xE600000000000000;
  }
  if (v5 == v3 && v6 == v9) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  char v0;
  char v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  OUTLINED_FUNCTION_22_20();
  if (v7)
  {
    char v5 = 0xE600000000000000;
    unint64_t v4 = OUTLINED_FUNCTION_19_13();
  }
  else
  {
    if (v3 == 1) {
      unint64_t v4 = 0x726F727265;
    }
    else {
      unint64_t v4 = 0x6D617261506C696ELL;
    }
    if (v3 == 1) {
      char v5 = 0xE500000000000000;
    }
    else {
      char v5 = 0xE800000000000000;
    }
  }
  if (v1)
  {
    if (v1 == 1) {
      uint64_t v2 = 0x726F727265;
    }
    else {
      uint64_t v2 = 0x6D617261506C696ELL;
    }
    if (v1 == 1) {
      uint64_t v6 = 0xE500000000000000;
    }
    else {
      uint64_t v6 = 0xE800000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0xE600000000000000;
  }
  int64_t v7 = v4 == v2 && v5 == v6;
  if (v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  char v0;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for InteractionType();
  lazy protocol witness table accessor for type WFInputTextFlow and conformance WFInputTextFlow(&lazy protocol witness table cache variable for type InteractionType and conformance InteractionType, 255, (void (*)(uint64_t))&type metadata accessor for InteractionType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v5 == v3 && v6 == v4) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

NSString specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of DeviceState?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_19();
  v5(v4);
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void type metadata accessor for WFContentItemListThumbnailOption(uint64_t a1)
{
}

void type metadata accessor for INDeviceIdiom(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for RawRepresentable in WFContentItemListThumbnailOption()
{
  return lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey(&lazy protocol witness table cache variable for type WFContentItemListThumbnailOption and conformance WFContentItemListThumbnailOption, type metadata accessor for WFContentItemListThumbnailOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in WFContentItemListThumbnailOption()
{
  return lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey(&lazy protocol witness table cache variable for type WFContentItemListThumbnailOption and conformance WFContentItemListThumbnailOption, type metadata accessor for WFContentItemListThumbnailOption);
}

uint64_t base witness table accessor for Equatable in WFContentItemListThumbnailOption()
{
  return lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey((unint64_t *)&lazy protocol witness table cache variable for type WFContentItemListThumbnailOption and conformance WFContentItemListThumbnailOption, type metadata accessor for WFContentItemListThumbnailOption);
}

void WorkflowCarplaySnippetProvider.makeEmptySnippet(appId:)()
{
}

uint64_t OUTLINED_FUNCTION_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_2()
{
  return *(void *)v0;
}

Swift::Bool __swiftcall CustomIntentDisambiguationItemContainer.shouldRequestUnlockForDisambiguation()()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_5()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_9()
{
  return 0;
}

unint64_t OUTLINED_FUNCTION_10()
{
  return 0xD000000000000013;
}

uint64_t OUTLINED_FUNCTION_11(uint64_t a1)
{
  return *(void *)(v1 + 56) + 32 * a1;
}

uint64_t OUTLINED_FUNCTION_12()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_13()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_14()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_15()
{
  return swift_slowDealloc();
}

uint64_t OUTLINED_FUNCTION_16(uint64_t a1)
{
  return a1 - 8;
}

void OUTLINED_FUNCTION_17()
{
}

uint64_t OUTLINED_FUNCTION_18()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_19()
{
  return v0;
}

void OUTLINED_FUNCTION_20(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_21()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_22()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_23()
{
  return 0;
}

uint64_t CustomIntentRCHFlowStrategy.__allocating_init(intent:deviceState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for CATOption();
  uint64_t v6 = OUTLINED_FUNCTION_16(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  outlined init with copy of DeviceState(a2, (uint64_t)v11);
  type metadata accessor for RunCustomIntentCATs();
  static CATOption.defaultMode.getter();
  uint64_t v7 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v8 = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v9 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v2 + 104))(v11, a1, v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v9;
}

uint64_t outlined init with copy of DeviceState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t CustomIntentRCHFlowStrategy.__allocating_init(deviceState:intent:catWrapper:catWrapperSimple:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)(a1, a2, a3, a4);
  return v8;
}

uint64_t CustomIntentRCHFlowStrategy.init(deviceState:intent:catWrapper:catWrapperSimple:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for CATOption();
  uint64_t v11 = OUTLINED_FUNCTION_16(v10);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_20_0();
  outlined init with copy of DeviceState(a1, v5 + 16);
  *(void *)(v5 + 56) = a2;
  outlined init with copy of DeviceState(a1, (uint64_t)v20);
  uint64_t v12 = one-time initialization token for shared;
  id v13 = a2;
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v14 = static WFDialogState.shared;
  type metadata accessor for RunVoiceCommandCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v16 = CATWrapperSimple.__allocating_init(options:globals:)();

  type metadata accessor for AppNameResolver();
  uint64_t v17 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v18 = swift_allocObject();
  *(void *)(v5 + 64) = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(v20, v14, 0, 1, a3, a4, v15, v16, v17, v18);
  return v5;
}

uint64_t CustomIntentRCHFlowStrategy.actionForInput(input:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_20_0();
  uint64_t v4 = v3 - v2;
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v1 + 88))(v4, v0) == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 96))(v4, v0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v5 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    uint64_t v6 = (char *)[v5 _type];

    if (v6 == (unsigned char *)&dword_0 + 2) {
      static ActionForInput.handle()();
    }
    else {
      static ActionForInput.ignore()();
    }
    swift_release();
    type metadata accessor for NLIntent();
    OUTLINED_FUNCTION_28();
    return (*(uint64_t (**)(uint64_t))(v12 + 8))(v4);
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    uint64_t v9 = Logger.logObject.getter();
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_0, v9, v8, "Parse type not yet supported.", v10, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    static ActionForInput.ignore()();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  }
}

uint64_t CustomIntentRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t CustomIntentRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  OUTLINED_FUNCTION_14_0();
  if (static FlowStrategyUtils.makeIntentFromParse(parse:currentIntent:)(*(void *)(v0 + 16)))
  {
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    lazy protocol witness table accessor for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors();
    swift_allocError();
    *uint64_t v3 = 1;
    swift_willThrow();
    OUTLINED_FUNCTION_18_0();
    return v4();
  }
}

uint64_t CustomIntentRCHFlowStrategy.makeErrorResponse(error:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[40] = v2;
  v1[41] = v0;
  v1[39] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  OUTLINED_FUNCTION_16(v4);
  v1[42] = OUTLINED_FUNCTION_13_0();
  v1[43] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v1[44] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[45] = v6;
  v1[46] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for DialogPhase();
  v1[47] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[48] = v8;
  v1[49] = OUTLINED_FUNCTION_13_0();
  v1[50] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v1[51] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[52] = v10;
  v1[53] = OUTLINED_FUNCTION_25();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v11);
  v1[54] = OUTLINED_FUNCTION_13_0();
  v1[55] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v12);
  v1[56] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 496) = v7;
  *(void *)(v8 + 504) = v0;
  swift_task_dealloc();
  outlined destroy of SpeakableString?(*(void *)(v1 + 440), &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  __n128 *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_23_0(&dword_0, v3, v4, "Generated failure dialog runCustomIntent#extensionTimedOut");
    OUTLINED_FUNCTION_7_0();
  }

  static DialogPhase.error.getter();
  uint64_t v5 = OUTLINED_FUNCTION_6_0();
  v6(v5);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v7 = OUTLINED_FUNCTION_17_0();
  v8(v7);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[64] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_29(v9, (__n128)xmmword_211C70);
  v0[65] = v15;
  OUTLINED_FUNCTION_27();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[66] = v10;
  *uint64_t v10 = v11;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:);
  uint64_t v12 = OUTLINED_FUNCTION_15_0();
  return v13(v12);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[62];
  uint64_t v3 = v0[52];
  uint64_t v2 = v0[53];
  uint64_t v4 = v0[51];
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_8_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 560) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 312);
  swift_release();
  swift_release();
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 72), v1);
  OUTLINED_FUNCTION_8_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 584) = v7;
  *(void *)(v8 + 592) = v0;
  swift_task_dealloc();
  outlined destroy of SpeakableString?(*(void *)(v1 + 432), &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  __n128 *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;
  uint64_t v16;

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v0[44], (uint64_t)static Logger.voiceCommands);
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_23_0(&dword_0, v3, v4, "Generated generic failure dialog");
    OUTLINED_FUNCTION_7_0();
  }

  static DialogPhase.error.getter();
  uint64_t v5 = OUTLINED_FUNCTION_6_0();
  v6(v5);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v7 = OUTLINED_FUNCTION_17_0();
  v8(v7);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[75] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_29(v9, (__n128)xmmword_211C70);
  v0[76] = v15;
  OUTLINED_FUNCTION_27();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[77] = (uint64_t)v10;
  *uint64_t v10 = v11;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:);
  uint64_t v12 = OUTLINED_FUNCTION_15_0();
  return v13(v12);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[73];
  uint64_t v3 = v0[52];
  uint64_t v2 = v0[53];
  uint64_t v4 = v0[51];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_8_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  Swift::String v8;
  Swift::String v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16[2];
  void *v17;

  uint64_t v17 = v0;
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = v0[45];
  uint64_t v1 = v0[46];
  uint64_t v4 = v0[43];
  uint64_t v3 = v0[44];
  uint64_t v5 = v0[42];
  uint64_t v6 = __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v7(v1, v6, v3);
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v8._object = (void *)0x80000000002256F0;
  v8._countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v8);
  swift_getErrorValue();
  v9._countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v7(v4, v1, v3);
  __swift_storeEnumTagSinglePayload(v4, 0, 1, v3);
  outlined init with copy of Logger?(v4, v5);
  if (__swift_getEnumTagSinglePayload(v5, 1, v3) == 1)
  {
    outlined destroy of SpeakableString?(v0[42], &demangling cache variable for type metadata for Logger?);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      v16[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315650;
      uint64_t v13 = StaticString.description.getter();
      v0[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2048;
      v0[29] = 116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 22) = 2080;
      swift_bridgeObjectRetain();
      v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v10, v11, "FatalError at %s:%lu - %s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(void, void))(v0[45] + 8))(v0[42], v0[44]);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t CustomIntentRCHFlowStrategy.makeErrorResponse(error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  *(void *)(v14 + 240) = *(void *)(v14 + 320);
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for CommandFailure();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_15:
    uint64_t v41 = *(void *)(v14 + 432);
    type metadata accessor for RunLinkActionCATsSimple();
    static CATOption.defaultMode.getter();
    v42 = (void *)CATWrapperSimple.__allocating_init(options:globals:)();
    *(void *)(v14 + 568) = v42;
    uint64_t v43 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v41, 1, 1, v43);
    uint64_t v48 = *(void *)(class metadata base offset for RunLinkActionCATsSimple + *v42 + 80)
        + **(int **)(class metadata base offset for RunLinkActionCATsSimple + *v42 + 80);
    uint64_t v49 = class metadata base offset for RunLinkActionCATsSimple + *v42 + 80;
    v44 = (void *)swift_task_alloc();
    *(void *)(v14 + 576) = v44;
    void *v44 = v14;
    v44[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:);
    OUTLINED_FUNCTION_3();
    return v29(v26, v27, v28, v29, v30, v31, v32, v33, a9, v48, v49, a12, a13, a14);
  }
  *(void *)(v14 + 456) = *(void *)(v14 + 288);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  *(void *)(v14 + 464) = __swift_project_value_buffer(*(void *)(v14 + 352), (uint64_t)static Logger.voiceCommands);
  swift_retain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 134217984;
    *(void *)(v14 + 304) = CommandFailure.errorCode.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_0, v15, v16, "voice command error code: %ld", v17, 0xCu);
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_release();
  }

  if (CommandFailure.errorCode.getter() == 1307)
  {
    uint64_t v18 = *(void *)(v14 + 440);
    uint64_t v19 = *(void *)(v14 + 328);
    type metadata accessor for RunCustomIntentCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v20 = (void *)CATWrapperSimple.__allocating_init(options:globals:)();
    *(void *)(v14 + 472) = v20;
    uint64_t v21 = *(void *)(v19 + 40);
    uint64_t v22 = *(void *)(v19 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v19 + 16), v21);
    *(void *)(v14 + 480) = DeviceState.asSiriKitDeviceState()(v21, v22);
    id v23 = [*(id *)(v19 + 56) _title];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    SpeakableString.init(print:speak:)();
    uint64_t v24 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v18, 0, 1, v24);
    uint64_t v48 = *(void *)(class metadata base offset for RunCustomIntentCATsSimple + *v20 + 144)
        + **(int **)(class metadata base offset for RunCustomIntentCATsSimple + *v20 + 144);
    uint64_t v49 = class metadata base offset for RunCustomIntentCATsSimple + *v20 + 144;
    v25 = (void *)swift_task_alloc();
    *(void *)(v14 + 488) = v25;
    void *v25 = v14;
    v25[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:);
    OUTLINED_FUNCTION_3();
    return v29(v26, v27, v28, v29, v30, v31, v32, v33, a9, v48, v49, a12, a13, a14);
  }
  if ((CustomIntentRCHFlowStrategy.isPreflightError(commandFailure:)() & 1) == 0)
  {
    swift_release();
    goto LABEL_15;
  }
  uint64_t v35 = *(void *)(v14 + 328);
  outlined init with copy of DeviceState(v35 + 16, v14 + 112);
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t inited = swift_initStackObject();
  *(void *)(v14 + 536) = inited;
  outlined init with take of AceServiceInvokerAsync((long long *)(v14 + 112), inited + 16);
  id v37 = [*(id *)(v35 + 56) launchId];
  if (v37)
  {
    v38 = v37;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1((void *)(v35 + 16), *(void *)(*(void *)(v14 + 328) + 40));
    if (dispatch thunk of DeviceState.isWatch.getter()) {
      unint64_t v40 = 0x80000000002257C0;
    }
    else {
      unint64_t v40 = 0x8000000000225330;
    }
  }
  *(void *)(v14 + 544) = v40;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v14 + 552) = v45;
  void *v45 = v46;
  v45[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:);
  OUTLINED_FUNCTION_3();
  return WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:)();
}

uint64_t CustomIntentRCHFlowStrategy.makeErrorResponse(error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_11_0();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_26();
  a20 = v22;
  swift_errorRetain();
  swift_errorRetain();
  v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    a9 = v22 + 296;
    swift_slowAlloc();
    a10 = swift_slowAlloc();
    OUTLINED_FUNCTION_16_0(4.8149e-34);
    uint64_t v27 = Error.localizedDescription.getter();
    *(void *)(v22 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_24(&dword_0, v29, v30, "Unable to generate default error dialog due to error: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError();
  swift_allocError();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_19_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_3();
  return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_11_0();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_26();
  a20 = v22;
  swift_errorRetain();
  swift_errorRetain();
  v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    a9 = v22 + 272;
    swift_slowAlloc();
    a10 = swift_slowAlloc();
    OUTLINED_FUNCTION_16_0(4.8149e-34);
    uint64_t v27 = Error.localizedDescription.getter();
    *(void *)(v22 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_24(&dword_0, v29, v30, "Unable to generate default error dialog due to error: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v31 = *(void *)(v22 + 536) + 16;
  lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError();
  swift_allocError();
  swift_willThrow();
  swift_errorRelease();
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1Tm(v31);
  swift_release();
  OUTLINED_FUNCTION_19_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_3();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14);
}

uint64_t CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 128) + **(int **)(*(void *)v2 + 128));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v7;
  v6[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v9(a1, a2);
}

uint64_t CustomIntentRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  void v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = type metadata accessor for DialogPhase();
  v1[7] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[8] = v7;
  v1[9] = OUTLINED_FUNCTION_13_0();
  v1[10] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[11] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[12] = v9;
  v1[13] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)(v0[6] + 64) + 352)
                                                         + **(int **)(**(void **)(v0[6] + 64) + 352));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  void *v1 = v0;
  v1[1] = CustomIntentRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  return v6(v4, v2, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v9();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

uint64_t CustomIntentRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = (void *)v14[15];
  uint64_t v16 = v14[10];
  uint64_t v17 = v14[7];
  uint64_t v18 = v14[8];
  static DialogPhase.error.getter();
  id v19 = [v15 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = OUTLINED_FUNCTION_6_0();
  v21(v20);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v14[16] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_211C70;
  *(void *)(v22 + 32) = v15;
  uint64_t v36 = v22;
  specialized Array._endMutation()();
  v14[17] = v36;
  uint64_t v35 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
  id v23 = v15;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v14[18] = v24;
  *uint64_t v24 = v25;
  v24[1] = CustomIntentRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  OUTLINED_FUNCTION_3();
  return v29(v26, v27, v28, v29, v30, v31, v32, v33, a9, v35, v36, a12, a13, a14);
}

uint64_t CustomIntentRCHFlowStrategy.isPreflightError(commandFailure:)()
{
  if (CommandFailure.errorCode.getter() == 3006) {
    return 1;
  }
  uint64_t result = CommandFailure.underlyingError.getter();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSError();
    if ((swift_dynamicCast() & 1) == 0) {
      return 0;
    }
    id v1 = [v9 domain];
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;

    if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {

        return 0;
      }
    }
    uint64_t v8 = (char *)[v9 code];

    return v8 == (unsigned char *)&stru_B98.addr + 6;
  }
  return result;
}

void CustomIntentsDialogTemplatingError.hash(into:)()
{
}

Swift::Int CustomIntentsDialogTemplatingError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError()
{
  return Error._getEmbeddedNSError()();
}

uint64_t CustomIntentRCHFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  swift_release();
  return v0;
}

uint64_t CustomIntentRCHFlowStrategy.__deallocating_deinit()
{
  CustomIntentRCHFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance CustomIntentRCHFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance CustomIntentRCHFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 120)
                                                + **(int **)(**(void **)v2 + 120));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance CustomIntentRCHFlowStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance CustomIntentRCHFlowStrategy()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  char v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance CustomIntentRCHFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CustomIntentRCHFlowStrategy();

  return RCHFlowStrategyAsync.makeParameterMetadata(intent:)(a1, v5, a3);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeErrorResponse(error:) in conformance CustomIntentRCHFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 128)
                                                + **(int **)(**(void **)v2 + 128));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v8(a1, a2);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance CustomIntentRCHFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentRCHFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance CustomIntentRCHFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentRCHFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance CustomIntentRCHFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentRCHFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance CustomIntentRCHFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v4 + 136)
                                                                   + **(int **)(**(void **)v4 + 136));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v12(a1, a2, a3, a4);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v4 + 144)
                                                                   + **(int **)(**(void **)v4 + 144));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v12(a1, a2, a3, a4);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentRCHFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentRCHFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentRCHFlowStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentRCHFlowStrategy()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(long long *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(a10 + 136) = type metadata accessor for AppNameResolver();
  *(void *)(a10 + 144) = &protocol witness table for AppNameResolver;
  *(void *)(a10 + 112) = a9;
  *(void *)(a10 + 56) = a2;
  outlined init with take of AceServiceInvokerAsync(a1, a10 + 16);
  *(void *)(a10 + 64) = a3;
  *(unsigned char *)(a10 + 72) = a4 & 1;
  *(void *)(a10 + 80) = a5;
  *(void *)(a10 + 88) = a6;
  *(void *)(a10 + 96) = a7;
  *(void *)(a10 + 104) = a8;
  return a10;
}

unint64_t lazy protocol witness table accessor for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors;
  if (!lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors;
  if (!lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentFlowErrors and conformance CustomIntentFlowErrors);
  }
  return result;
}

uint64_t outlined init with copy of Logger?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_28();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError;
  if (!lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError;
  if (!lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy.CustomIntentRCHError and conformance CustomIntentRCHFlowStrategy.CustomIntentRCHError);
  }
  return result;
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in CustomIntentRCHFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy);
}

uint64_t type metadata accessor for CustomIntentRCHFlowStrategy()
{
  return self;
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in CustomIntentRCHFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy);
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in CustomIntentRCHFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy);
}

uint64_t lazy protocol witness table accessor for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CustomIntentRCHFlowStrategy();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CustomIntentRCHFlowStrategy.CustomIntentRCHError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for CustomIntentRCHFlowStrategy.CustomIntentRCHError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x12570);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentRCHFlowStrategy.CustomIntentRCHError()
{
  return &type metadata for CustomIntentRCHFlowStrategy.CustomIntentRCHError;
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_0()
{
  return swift_slowDealloc();
}

uint64_t OUTLINED_FUNCTION_8_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  return *(void *)(v0 + 312);
}

uint64_t OUTLINED_FUNCTION_16_0(float a1)
{
  float *v1 = a1;
  return swift_getErrorValue();
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_23_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

void OUTLINED_FUNCTION_24(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_25()
{
  return swift_task_alloc();
}

id OUTLINED_FUNCTION_27()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

id closure #1 in variable initialization expression of static AutoShortcutFlow.defaultRunner(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DateTimeResolver();
  OUTLINED_FUNCTION_12_1();
  uint64_t v4 = v3;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for CATOption();
  uint64_t v12 = OUTLINED_FUNCTION_16(v11);
  __chkstk_darwin(v12);
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  uint64_t v22 = a1;
  outlined retain of SiriWorkflowRunnerInput(a1);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v13 = static WFDialogState.shared;
  swift_retain();
  static AceService.currentAsync.getter();
  static Device.current.getter();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for RunCustomIntentCATs();
  OUTLINED_FUNCTION_42();
  uint64_t v21 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_42();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_42();
  uint64_t v15 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
  OUTLINED_FUNCTION_42();
  uint64_t v16 = CATWrapper.__allocating_init(options:globals:)();
  static AceService.currentAsync.getter();
  type metadata accessor for LocationProvider();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0x3FA999999999999ALL;
  outlined init with take of AceServiceInvokerAsync(&v23, v17 + 24);
  DateTimeResolver.init()();
  uint64_t v18 = (char *)objc_allocWithZone((Class)type metadata accessor for WorkflowRunnerFlow(0));
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v10, v2);
  swift_retain();
  id v19 = specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)(v22, (uint64_t)v27, v13, (uint64_t)v26, (uint64_t)v25, (uint64_t)v24, v21, v14, v15, v16, (uint64_t)closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow, 0, v17, (uint64_t)v8, (uint64_t)closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow, 0, v18);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v2);
  swift_release();
  return v19;
}

uint64_t (**AutoShortcutFlow.defaultRunner.unsafeMutableAddressor())()
{
  return &static AutoShortcutFlow.defaultRunner;
}

id (*static AutoShortcutFlow.defaultRunner.getter())(uint64_t a1)
{
  return closure #1 in variable initialization expression of static AutoShortcutFlow.defaultRunner;
}

BOOL static VoiceCommandsParityError.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void VoiceCommandsParityError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int VoiceCommandsParityError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutFlow.State(char *a1, char *a2)
{
  return static VoiceCommandsParityError.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutFlow.State()
{
  return VoiceCommandsParityError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AutoShortcutFlow.State(uint64_t a1)
{
  VoiceCommandsParityError.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutFlow.State()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AutoShortcutFlow.__allocating_init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, char a10)
{
  return AutoShortcutFlow.__allocating_init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t))specialized AutoShortcutFlow.__allocating_init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:));
}

uint64_t AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, char a10)
{
  return AutoShortcutFlow.__allocating_init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t))specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:));
}

uint64_t AutoShortcutFlow.__allocating_init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, char a10, uint64_t (*a11)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t))
{
  uint64_t v29 = a8;
  unsigned int v28 = a7;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v25 = a11;
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v17);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  uint64_t v22 = v25(v20, a2, a3, a4, v26, v27, v28, v29, a9, a10, v11, v17, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v22;
}

uint64_t AutoShortcutFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t AutoShortcutFlow.executeAppShortcut(invocation:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  v3[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = type metadata accessor for AutoShortcutInvocation();
  v3[23] = swift_task_alloc();
  return _swift_task_switch(AutoShortcutFlow.executeAppShortcut(invocation:), 0, 0);
}

uint64_t AutoShortcutFlow.executeAppShortcut(invocation:)()
{
  uint64_t v1 = *(void *)(v0 + 112);
  static InstrumentationUtils.emitAutoShortcutUsedInstrumentation(autoShortcutTemplate:)();
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), *(void *)(v1 + 40));
  OUTLINED_FUNCTION_41();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutFlow.executeAppShortcut(invocation:);
  uint64_t v3 = OUTLINED_FUNCTION_48();
  return v4(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 200) = v5;
  *(void *)(v3 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v6();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 232) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int EnumTagSinglePayload;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  id v51;
  id v52;
  void *v53;
  uint64_t (*v54)(void);
  void (**v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  char v58;
  uint64_t v59;
  void (**v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  id v65;
  uint64_t v66;

  uint64_t v1 = *(void *)(v0 + 232);
  if ((unint64_t)v1 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  }
  if (v2)
  {
    uint64_t v3 = v1 & 0xC000000000000001;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v3 == 0);
    if (v3) {
      uint64_t v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v4 = *(id *)(*(void *)(v0 + 232) + 32);
    }
    swift_bridgeObjectRelease();
    uint64_t v5 = [v4 orderedPhrases];

    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase);
    uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = v1;
    if ((unint64_t)v1 >> 62)
    {
      if (v1 >= 0) {
        v1 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
      if (v7)
      {
LABEL_8:
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(v0 + 128);
        v63 = *(void *)(v0 + 176);
        v64 = v6 & 0xC000000000000001;
        v56 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
        v57 = v6;
        v60 = (void (**)(uint64_t, uint64_t))(v9 + 8);
        v61 = v7;
        v62 = *(void *)(v0 + 144);
        do
        {
          if (v64) {
            uint64_t v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            uint64_t v10 = *(id *)(v6 + 8 * v8 + 32);
          }
          uint64_t v11 = v8 + 1;
          if (__OFADD__(v8, 1))
          {
            __break(1u);
            goto LABEL_37;
          }
          uint64_t v12 = *(void *)(v0 + 104);
          v65 = v10;
          uint64_t v13 = [v10 basePhraseTemplate];
          uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v16 = v15;

          uint64_t v1 = *(void *)(v0 + 184);
          uint64_t v17 = *(void *)(v0 + 104);
          if (v14 == *(void *)(v12 + 32) && v16 == *(void *)(v12 + 40))
          {
            swift_bridgeObjectRelease();
            outlined init with copy of AutoShortcutInvocation(v17, v1);
          }
          else
          {
            uint64_t v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            outlined init with copy of AutoShortcutInvocation(v17, v1);
            if ((v19 & 1) == 0)
            {
              outlined destroy of AutoShortcutInvocation(*(void *)(v0 + 184));
              goto LABEL_29;
            }
          }
          uint64_t v20 = [v65 parameterIdentifier];
          if (v20)
          {
            uint64_t v21 = v20;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v22 = 0;
          }
          else
          {
            uint64_t v22 = 1;
          }
          long long v23 = *(void *)(v0 + 184);
          uint64_t v24 = *(void *)(v0 + 168);
          uint64_t v25 = *(void *)(v0 + 152);
          uint64_t v26 = *(void *)(v0 + 120);
          __swift_storeEnumTagSinglePayload(v24, v22, 1, v26);
          uint64_t v27 = v23 + *(int *)(v63 + 28);
          uint64_t v1 = v25 + *(int *)(v62 + 48);
          outlined init with copy of UUID?(v24, v25);
          outlined init with copy of UUID?(v27, v1);
          EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v25, 1, v26);
          uint64_t v29 = *(void *)(v0 + 120);
          if (EnumTagSinglePayload == 1)
          {
            uint64_t v30 = *(void *)(v0 + 184);
            outlined destroy of AutoShortcutInvocation?(*(void *)(v0 + 168), &demangling cache variable for type metadata for UUID?);
            outlined destroy of AutoShortcutInvocation(v30);
            uint64_t v7 = v61;
            if (__swift_getEnumTagSinglePayload(v1, 1, v29) == 1)
            {
              outlined destroy of AutoShortcutInvocation?(*(void *)(v0 + 152), &demangling cache variable for type metadata for UUID?);
              unint64_t v40 = v65;
LABEL_35:
              swift_bridgeObjectRelease();
              uint64_t v41 = [v40 localizedPhrase];
              unint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v2 = v42;

              goto LABEL_43;
            }
LABEL_28:
            outlined destroy of AutoShortcutInvocation?(*(void *)(v0 + 152), &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_29:
            unint64_t v40 = v65;
            goto LABEL_30;
          }
          outlined init with copy of UUID?(*(void *)(v0 + 152), *(void *)(v0 + 160));
          uint64_t v31 = __swift_getEnumTagSinglePayload(v1, 1, v29);
          uint64_t v32 = *(void *)(v0 + 184);
          uint64_t v34 = *(void *)(v0 + 160);
          uint64_t v33 = *(void *)(v0 + 168);
          if (v31 == 1)
          {
            uint64_t v1 = *(void *)(v0 + 120);
            outlined destroy of AutoShortcutInvocation?(*(void *)(v0 + 168), &demangling cache variable for type metadata for UUID?);
            outlined destroy of AutoShortcutInvocation(v32);
            (*v60)(v34, v1);
            uint64_t v7 = v61;
            goto LABEL_28;
          }
          v59 = *(void *)(v0 + 152);
          uint64_t v35 = *(void *)(v0 + 136);
          uint64_t v36 = *(void *)(v0 + 120);
          (*v56)(v35, v1, v36);
          lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
          v58 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v1 = (uint64_t)v60;
          uint64_t v37 = *v60;
          uint64_t v38 = v35;
          uint64_t v6 = v57;
          (*v60)(v38, v36);
          outlined destroy of AutoShortcutInvocation?(v33, &demangling cache variable for type metadata for UUID?);
          outlined destroy of AutoShortcutInvocation(v32);
          v37(v34, v36);
          outlined destroy of AutoShortcutInvocation?(v59, &demangling cache variable for type metadata for UUID?);
          uint64_t v7 = v61;
          unint64_t v40 = v65;
          if (v58) {
            goto LABEL_35;
          }
LABEL_30:

          ++v8;
        }
        while (v11 != v7);
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v39 = 0;
    uint64_t v2 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v39 = 0;
  }
LABEL_43:
  uint64_t v43 = *(void **)(v0 + 216);
  v44 = *(void **)(v0 + 200);
  v45 = *(uint64_t **)(v0 + 104);
  uint64_t v46 = v45[3];
  uint64_t v47 = *v45;
  uint64_t v48 = v45[1];
  *(void *)(v0 + 16) = v45[2];
  uint64_t v49 = *(void *)(v0 + 112);
  *(void *)(v0 + 24) = v46;
  *(void *)(v0 + 32) = v47;
  *(void *)(v0 + 40) = v48;
  *(void *)(v0 + 48) = v44;
  *(void *)(v0 + 56) = v43;
  *(void *)(v0 + 64) = v39;
  *(void *)(v0 + 72) = v2;
  *(unsigned char *)(v0 + 80) = 1;
  v50 = *(uint64_t (**)(uint64_t))(v49 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v51 = v44;
  v52 = v43;
  v53 = (void *)v50(v0 + 16);
  *(void *)(v0 + 88) = v53;
  type metadata accessor for WorkflowRunnerFlow(0);
  lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow(&lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow, 255, (void (*)(uint64_t))type metadata accessor for WorkflowRunnerFlow);
  static ExecuteResponse.complete<A>(next:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v54 = *(uint64_t (**)(void))(v0 + 8);
  return v54();
}

void AutoShortcutFlow.executeAppShortcut(invocation:)()
{
  uint64_t v2 = (void *)v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = (void *)v0[14];
  __swift_project_boxed_opaque_existential_1(v3 + 27, v3[30]);
  __swift_project_boxed_opaque_existential_1(v3 + 2, v3[5]);
  uint64_t v4 = OUTLINED_FUNCTION_17_1();
  v5(v4);
  id v6 = [v2 identifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = OUTLINED_FUNCTION_10_1();
  v0[27] = v8(v7);
  if (v1)
  {
    uint64_t v9 = (void *)v0[25];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_3();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v12 = v0[14];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1((void *)(v12 + 16), *(void *)(v12 + 40));
  uint64_t v13 = (void *)swift_task_alloc();
  v0[28] = v13;
  *uint64_t v13 = v0;
  v13[1] = AutoShortcutFlow.executeAppShortcut(invocation:);
  OUTLINED_FUNCTION_3();
  __asm { BRAA            X3, X16 }
}

uint64_t AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  return _swift_task_switch(AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:), 0, 0);
}

void AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 104) + 56), *(void *)(*(void *)(v0 + 104) + 80));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  void *v1 = v0;
  v1[1] = AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:);
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_3();
  __asm { BRAA            X9, X16 }
}

uint64_t AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 128) = v4;
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_18_0();
    return v5();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
}

uint64_t AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  uint64_t v14 = *(void **)(v12 + 128);
  uint64_t v13 = *(void *)(v12 + 136);
  uint64_t v15 = *(void **)(v12 + 112);
  __swift_project_boxed_opaque_existential_1(v15 + 27, v15[30]);
  __swift_project_boxed_opaque_existential_1(v15 + 2, v15[5]);
  uint64_t v16 = OUTLINED_FUNCTION_17_1();
  v17(v16);
  id v18 = [v14 identifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = OUTLINED_FUNCTION_10_1();
  uint64_t v21 = v20(v19);
  uint64_t v22 = *(void **)(v12 + 128);
  if (v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v23 = (void *)v21;
    uint64_t v25 = *(void **)(v12 + 104);
    uint64_t v24 = *(void *)(v12 + 112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = v25[6];
    uint64_t v28 = v25[1];
    uint64_t v27 = v25[2];
    uint64_t v29 = v25[3];
    uint64_t v30 = v25[4];
    *(void *)(v12 + 16) = v25[5];
    *(void *)(v12 + 24) = v26;
    *(void *)(v12 + 32) = v28;
    *(void *)(v12 + 40) = v27;
    *(void *)(v12 + 48) = v29;
    *(void *)(v12 + 56) = v30;
    *(void *)(v12 + 64) = v23;
    *(void *)(v12 + 72) = v22;
    *(unsigned char *)(v12 + 80) = 2;
    uint64_t v31 = *(uint64_t (**)(uint64_t))(v24 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v32 = v23;
    id v33 = v22;
    uint64_t v34 = (void *)v31(v12 + 16);
    id v35 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed) init];
    if (v35)
    {
      uint64_t v36 = v35;
      outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed.appShortcutId.setter(v28, v27, v35);
      specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)();
    }
    uint64_t v37 = *(void **)(v12 + 128);
    *(void *)(v12 + 88) = v34;
    type metadata accessor for WorkflowRunnerFlow(0);
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow(&lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow, 255, (void (*)(uint64_t))type metadata accessor for WorkflowRunnerFlow);
    static ExecuteResponse.complete<A>(next:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_28_0();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12);
}

uint64_t AutoShortcutFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[118] = v0;
  v1[117] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v3);
  v1[119] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for AceOutput();
  v1[120] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[121] = v5;
  v1[122] = OUTLINED_FUNCTION_25();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  v1[123] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v7);
  v1[124] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for TemplatingResult();
  v1[125] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[126] = v9;
  v1[127] = OUTLINED_FUNCTION_25();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoShortcutInvocation?);
  OUTLINED_FUNCTION_16(v10);
  v1[128] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for AutoShortcutInvocation();
  v1[129] = v11;
  OUTLINED_FUNCTION_16(v11);
  v1[130] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for FlowUnhandledReason();
  v1[131] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[132] = v13;
  v1[133] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(unsigned char *)(v1 + 1192) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 1088) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 1104) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 704), v0 + 304);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  uint64_t v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 776);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 744), v1);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 1144) = v3;
  *uint64_t v3 = v0;
  v3[1] = AutoShortcutFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 304, v1, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 984);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 1176) = v0;
  swift_task_dealloc();
  outlined destroy of AutoShortcutInvocation?(v5, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_24_0();
  uint64_t v11 = *(void *)(v0 + 976);
  uint64_t v1 = *(void *)(v0 + 968);
  uint64_t v12 = *(void *)(v0 + 960);
  uint64_t v2 = *(void *)(v0 + 952);
  static Device.current.getter();
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 424), *(void *)(v0 + 448));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  *(void *)(v0 + 496) = 0;
  *(_OWORD *)(v0 + 464) = 0u;
  *(_OWORD *)(v0 + 480) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of AutoShortcutInvocation?(v0 + 464, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of AutoShortcutInvocation?(v2, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 384);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 424);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 504), *(void *)(v0 + 528));
  *(void *)(v0 + 568) = v12;
  *(void *)(v0 + 576) = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 544));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v1 + 16))(boxed_opaque_existential_1, v11, v12);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 1184) = v5;
  *uint64_t v5 = v0;
  v5[1] = AutoShortcutFlow.execute();
  OUTLINED_FUNCTION_2_1();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  else {
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 544);
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[139];
  uint64_t v2 = v0[127];
  uint64_t v3 = v0[126];
  uint64_t v4 = v0[125];
  uint64_t v5 = v0[122];
  uint64_t v6 = v0[121];
  uint64_t v7 = v0[120];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 63));
  static ExecuteResponse.complete()();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_errorRelease();
  OUTLINED_FUNCTION_1_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v8();
}

{
  uint64_t v0;

  return _swift_unexpectedError(*(void *)(v0 + 1176), "SiriLinkFlowPlugin/AutoShortcutFlow.swift", 41, 1, 151);
}

uint64_t AutoShortcutFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *(void *)(v10 + 944);
  if (*(unsigned char *)(v11 + 273))
  {
    if (*(unsigned char *)(v11 + 273) == 1)
    {
      uint64_t v12 = v11 + 16;
      outlined init with copy of AppShortcutInvoking(v11 + 16, v10 + 624);
      uint64_t v13 = (_WORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppShortcutInvoking);
      if (swift_dynamicCast())
      {
        uint64_t v14 = *(void *)(v10 + 1040);
        uint64_t v15 = *(void *)(v10 + 1024);
        __swift_storeEnumTagSinglePayload(v15, 0, 1, *(void *)(v10 + 1032));
        outlined init with take of AutoShortcutInvocation(v15, v14);
        uint64_t v16 = (void *)swift_task_alloc();
        *(void *)(v10 + 1080) = v16;
        *uint64_t v16 = v10;
        v16[1] = AutoShortcutFlow.execute();
        OUTLINED_FUNCTION_6_1();
        return AutoShortcutFlow.executeAppShortcut(invocation:)(v17, v18);
      }
      uint64_t v24 = *(void *)(v10 + 1024);
      __swift_storeEnumTagSinglePayload(v24, 1, 1, *(void *)(v10 + 1032));
      outlined destroy of AutoShortcutInvocation?(v24, &demangling cache variable for type metadata for AutoShortcutInvocation?);
      outlined init with copy of AppShortcutInvoking(v12, v10 + 264);
      if (swift_dynamicCast())
      {
        memcpy((void *)(v10 + 16), (const void *)(v10 + 112), 0x60uLL);
        uint64_t v25 = (void *)swift_task_alloc();
        *(void *)(v10 + 1096) = v25;
        void *v25 = v10;
        v25[1] = AutoShortcutFlow.execute();
        OUTLINED_FUNCTION_6_1();
        return AutoShortcutFlow.executeGeneralizedAppShortcut(invocation:)(v26, v27);
      }
      *(_OWORD *)(v10 + 176) = 0u;
      *(_OWORD *)(v10 + 192) = 0u;
      *(_OWORD *)(v10 + 144) = 0u;
      *(_OWORD *)(v10 + 160) = 0u;
      *(_OWORD *)(v10 + 112) = 0u;
      *(_OWORD *)(v10 + 128) = 0u;
      outlined destroy of AutoShortcutInvocation?(v10 + 112, &demangling cache variable for type metadata for AppShortcutGeneralizedInvocation?);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.voiceCommands);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      uint64_t v32 = v31;
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v13 = (_WORD *)OUTLINED_FUNCTION_33();
        *uint64_t v13 = 0;
        OUTLINED_FUNCTION_23_0(&dword_0, v33, v34, "Unsupported invocation type");
        OUTLINED_FUNCTION_7_0();
      }
      OUTLINED_FUNCTION_18_1();
      uint64_t v35 = OUTLINED_FUNCTION_11_1();
      v36(v35);
      OUTLINED_FUNCTION_31();
      (*(void (**)(uint64_t, _WORD *))(v24 + 8))(v32, v13);
    }
    else
    {
      static ExecuteResponse.complete()();
    }
    OUTLINED_FUNCTION_1_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_6_1();
    return v38(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10);
  }
  else
  {
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v10 + 1072) = v21;
    *uint64_t v21 = v10;
    v21[1] = AutoShortcutFlow.execute();
    OUTLINED_FUNCTION_6_1();
    return AutoShortcutFlow.checkAssistantIntent(appShortcutInvocation:)(v22);
  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  outlined destroy of AutoShortcutInvocation(*(void *)(v10 + 1040));
  OUTLINED_FUNCTION_1_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  outlined destroy of AppShortcutGeneralizedInvocation(v10 + 16);
  OUTLINED_FUNCTION_1_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v12 + 304);
  __swift_destroy_boxed_opaque_existential_1Tm(v12 + 744);
  OUTLINED_FUNCTION_46();
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1Tm(v10);

  swift_errorRelease();
  OUTLINED_FUNCTION_1_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  *(void *)(v12 + 736) = 0;
  *(_OWORD *)(v12 + 704) = 0u;
  *(_OWORD *)(v12 + 720) = 0u;
  outlined destroy of AutoShortcutInvocation?(v12 + 704, &demangling cache variable for type metadata for Output?);
  OUTLINED_FUNCTION_46();
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1Tm(v10);

  swift_errorRelease();
  OUTLINED_FUNCTION_1_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t AutoShortcutFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  uint64_t v13 = *(void *)(v12 + 944);
  if (*(unsigned char *)(v13 + 272) != 1 || *(unsigned char *)(v12 + 1192) == 0)
  {
    a9 = v12 + 928;
    outlined init with copy of AppShortcutInvoking(v13 + 16, v12 + 824);
    outlined init with copy of AppShortcutInvoking(v13 + 56, v12 + 864);
    outlined init with copy of AppShortcutInvoking(v13 + 176, v12 + 784);
    outlined init with copy of AppShortcutInvoking(v13 + 136, v12 + 664);
    outlined init with copy of AppShortcutInvoking(v13 + 96, v12 + 344);
    type metadata accessor for UserDefaultsWrapper();
    swift_allocObject();
    uint64_t v15 = UserDefaultsWrapper.init()();
    type metadata accessor for AutoShortcutFirstRunFlow();
    swift_allocObject();
    OUTLINED_FUNCTION_39();
    *(void *)(v12 + 928) = specialized AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)(v16, v17, v18, v19, v20, (uint64_t)v15, v21);
    lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow(&lazy protocol witness table cache variable for type AutoShortcutFirstRunFlow and conformance AutoShortcutFirstRunFlow, 255, (void (*)(uint64_t))type metadata accessor for AutoShortcutFirstRunFlow);
    swift_retain();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v22 = *(void *)(v12 + 1064);
    uint64_t v23 = *(void *)(v12 + 1056);
    uint64_t v24 = *(void *)(v12 + 1048);
    uint64_t v25 = type metadata accessor for PrescribedTool();
    __swift_storeEnumTagSinglePayload(v22, 1, 1, v25);
    (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, enum case for FlowUnhandledReason.needsIntelligenceFlowFallback(_:), v24);
    static ExecuteResponse.unhandled(reason:isComplete:)();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }
  OUTLINED_FUNCTION_1_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12);
}

{
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_25_0();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v12 + 68));
  uint64_t v13 = (void *)v12[139];
  uint64_t v14 = v12[127];
  uint64_t v15 = v12[126];
  uint64_t v16 = v12[125];
  uint64_t v17 = v12[122];
  uint64_t v18 = v12[121];
  uint64_t v19 = v12[120];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v12 + 63));
  static ExecuteResponse.complete()();

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_errorRelease();
  OUTLINED_FUNCTION_1_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
}

#error "15590: call analysis failed (funcsize=276)"

#error "15A18: call analysis failed (funcsize=276)"

uint64_t AutoShortcutFlow.checkAssistantIntent(appShortcutInvocation:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t AutoShortcutFlow.checkAssistantIntent(appShortcutInvocation:)()
{
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  OUTLINED_FUNCTION_41();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  void *v1 = v0;
  v1[1] = AutoShortcutFlow.checkAssistantIntent(appShortcutInvocation:);
  uint64_t v2 = OUTLINED_FUNCTION_48();
  return v3(v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  id v1;
  unint64_t v2;
  void *v3;
  id v4;
  char v5;
  id v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = [*(id *)(v0 + 32) systemProtocols];
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = self;
  uint64_t v4 = [v3 assistantIntentProtocol];
  uint64_t v5 = specialized Sequence<>.contains(_:)((uint64_t)v4, v2);

  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = [v3 assistantInvocableIntentProtocol];
    uint64_t v7 = specialized Sequence<>.contains(_:)((uint64_t)v6, v2);

    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      uint64_t v13 = 0;
      goto LABEL_10;
    }
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    OUTLINED_FUNCTION_23_0(&dword_0, v11, v12, "#AutoShortcutFlow Found assistant intent for action");
    OUTLINED_FUNCTION_7_0();
  }

  uint64_t v13 = 1;
LABEL_10:

  uint64_t v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v14(v13);
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v0, "#AutoShortcutFlow error fetching LNAction", v5, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  uint64_t v6 = *(uint64_t (**)(void))(v1 + 8);
  return v6(0);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (v3)
  {
    while (1)
    {
      id v4 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 32);
      uint64_t v5 = v4;
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
      char v6 = static NSObject.== infix(_:_:)();

      if (v6) {
        break;
      }
      if (v3 != 1)
      {
        uint64_t v9 = 5;
        while (1)
        {
          id v10 = (a2 & 0xC000000000000001) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
              : *(id *)(a2 + 8 * v9);
          uint64_t v11 = v10;
          uint64_t v12 = v9 - 3;
          if (__OFADD__(v9 - 4, 1)) {
            break;
          }
          char v7 = static NSObject.== infix(_:_:)();

          if ((v7 & 1) == 0)
          {
            ++v9;
            if (v12 != v3) {
              continue;
            }
          }
          goto LABEL_9;
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        if (v3) {
          continue;
        }
      }
      goto LABEL_8;
    }
    char v7 = 1;
  }
  else
  {
LABEL_8:
    char v7 = 0;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t AutoShortcutFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
  swift_release();
  return v0;
}

uint64_t AutoShortcutFlow.__deallocating_deinit()
{
  AutoShortcutFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance AutoShortcutFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *char v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance AutoShortcutFlow;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance AutoShortcutFlow()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_5_0();
  *id v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance AutoShortcutFlow(uint64_t a1, uint64_t a2)
{
  return AutoShortcutFlow.execute(completion:)(a1, a2);
}

uint64_t protocol witness for Flow.execute() in conformance AutoShortcutFlow()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return AutoShortcutFlow.execute()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance AutoShortcutFlow()
{
  return Flow<>.exitValue.getter();
}

uint64_t protocol witness for Flow.flexibleExecutionSupport.getter in conformance AutoShortcutFlow()
{
  return Flow.flexibleExecutionSupport.getter();
}

uint64_t specialized AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for CATOption();
  __chkstk_darwin(v14 - 8);
  uint64_t v23 = type metadata accessor for UserDefaultsWrapper();
  uint64_t v24 = &protocol witness table for UserDefaultsWrapper;
  *(void *)&long long v22 = a6;
  outlined init with copy of AppShortcutInvoking(a1, a7 + 16);
  outlined init with copy of AppShortcutInvoking(a2, a7 + 56);
  outlined init with copy of AppShortcutInvoking(a3, a7 + 232);
  outlined init with copy of AppShortcutInvoking(a5, a7 + 96);
  outlined init with copy of AppShortcutInvoking(a4, a7 + 136);
  type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a7 + 184) = swift_allocObject();
  outlined init with copy of AppShortcutInvoking(a5, (uint64_t)v21);
  type metadata accessor for AutoShortcutCATs();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AutoShortcutCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v16 = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v17 = type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  type metadata accessor for AutoShortcutDialogTemplating();
  uint64_t v19 = (void *)swift_allocObject();
  v19[12] = v17;
  v19[13] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  v19[9] = v18;
  outlined init with take of AceServiceInvokerAsync(v21, (uint64_t)(v19 + 2));
  v19[7] = v15;
  v19[8] = v16;
  *(void *)(a7 + 176) = v19;
  outlined init with take of AceServiceInvokerAsync(&v22, a7 + 192);
  *(unsigned char *)(a7 + 272) = 0x80;
  return a7;
}

uint64_t specialized AutoShortcutFlow.__allocating_init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5, long long *a6, int a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v27 = a8;
  int v26 = a7;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  uint64_t v16 = *(void *)(a12 - 8);
  __chkstk_darwin(a11);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, a12);
  uint64_t v20 = specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)((uint64_t)v18, a2, a3, v23, v24, v25, v26, v27, a9, a10, v19, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a12);
  return v20;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5, long long *a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(a11 + 40) = a12;
  *(void *)(a11 + 48) = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a11 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(boxed_opaque_existential_1, a1, a12);
  outlined init with take of AceServiceInvokerAsync(a2, a11 + 56);
  outlined init with take of AceServiceInvokerAsync(a3, a11 + 136);
  outlined init with take of AceServiceInvokerAsync(a4, a11 + 176);
  outlined init with take of AceServiceInvokerAsync(a5, a11 + 216);
  outlined init with take of AceServiceInvokerAsync(a6, a11 + 96);
  *(unsigned char *)(a11 + 273) = a7;
  *(void *)(a11 + 256) = a8;
  *(void *)(a11 + 264) = a9;
  *(unsigned char *)(a11 + 272) = a10;
  return a11;
}

uint64_t type metadata accessor for AutoShortcutFlow()
{
  return self;
}

uint64_t outlined destroy of AppShortcutGeneralizedInvocation(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of AutoShortcutInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AutoShortcutInvocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AutoShortcutInvocation(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AutoShortcutInvocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of AppShortcutInvoking(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  OUTLINED_FUNCTION_40();
  (*v3)(a2);
  return a2;
}

unsigned char *partial apply for closure #1 in AutoShortcutFlow.execute()(unsigned char *result)
{
  if (*result) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  *(unsigned char *)(v1 + 273) = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutFlow.State and conformance AutoShortcutFlow.State()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutFlow.State and conformance AutoShortcutFlow.State;
  if (!lazy protocol witness table cache variable for type AutoShortcutFlow.State and conformance AutoShortcutFlow.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutFlow.State and conformance AutoShortcutFlow.State);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AutoShortcutFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutFlow.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x172B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for AutoShortcutFlow.State(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for AutoShortcutFlow.State(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutFlow.State()
{
  return &type metadata for AutoShortcutFlow.State;
}

uint64_t specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(uint64_t a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, long long *a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v29 = a13;
  uint64_t v30 = a15;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v28);
  OUTLINED_FUNCTION_40();
  (*(void (**)(void))(v19 + 32))();
  uint64_t v26 = a12;
  uint64_t v27 = a14;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
  OUTLINED_FUNCTION_40();
  (*(void (**)(void))(v20 + 32))();
  *(void *)(a11 + 40) = type metadata accessor for AutoShortcutInvocation();
  *(void *)(a11 + 48) = &protocol witness table for AutoShortcutInvocation;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a11 + 16));
  outlined init with take of AutoShortcutInvocation(a1, (uint64_t)boxed_opaque_existential_1);
  outlined init with take of AceServiceInvokerAsync(a2, a11 + 56);
  outlined init with take of AceServiceInvokerAsync(a3, a11 + 136);
  outlined init with take of AceServiceInvokerAsync(&v28, a11 + 176);
  outlined init with take of AceServiceInvokerAsync(&v25, a11 + 216);
  outlined init with take of AceServiceInvokerAsync(a6, a11 + 96);
  *(unsigned char *)(a11 + 273) = a7;
  *(void *)(a11 + 256) = a8;
  *(void *)(a11 + 264) = a9;
  *(unsigned char *)(a11 + 272) = a10;
  return a11;
}

uint64_t type metadata accessor for NSError(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined init with copy of AutoShortcutInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AutoShortcutInvocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AutoShortcutInvocation?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_40();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t lazy protocol witness table accessor for type AutoShortcutFlow and conformance AutoShortcutFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of SiriWorkflowRunnerInput(uint64_t a1)
{
  return a1;
}

id outlined copy of SiriWorkflowRunnerInput(id result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, char a9)
{
  switch(a9)
  {
    case 0:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v11 = a5;
      goto LABEL_8;
    case 2:
      swift_bridgeObjectRetain();
      id v13 = a7;
      id v14 = a8;
      swift_bridgeObjectRetain();
LABEL_4:
      return (id)swift_bridgeObjectRetain();
    case 3:
      a6 = result;
      swift_bridgeObjectRetain();
LABEL_8:
      uint64_t result = a6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_5_1(uint64_t a1)
{
  *(void *)(v2 + 1120) = a1;
  outlined init with take of AceServiceInvokerAsync(v1, a1 + 16);
  uint64_t v5 = *(void *)(v4 + 40);
  __swift_project_boxed_opaque_existential_1(v3, v5);
  return v5;
}

uint64_t OUTLINED_FUNCTION_10_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_1(uint64_t a1)
{
  *(void *)(v1 + 1152) = a1;
  uint64_t v3 = v2 + 12;
  uint64_t v4 = v2[15];
  uint64_t v5 = v2[16];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  return DeviceState.asSiriKitDeviceState()(v4, v5);
}

uint64_t OUTLINED_FUNCTION_17_1()
{
  return v0;
}

void OUTLINED_FUNCTION_18_1()
{
}

uint64_t OUTLINED_FUNCTION_19_1()
{
  uint64_t v2 = *(void *)(v0 + 944);
  return outlined init with copy of AppShortcutInvoking(v2 + 96, v0 + 584);
}

uint64_t OUTLINED_FUNCTION_20_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return *(void *)(v0 + 1016);
}

uint64_t OUTLINED_FUNCTION_26_0()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_27_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31()
{
  return static ExecuteResponse.unhandled(reason:isComplete:)();
}

BOOL OUTLINED_FUNCTION_32(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_33()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_35(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, (uint64_t *)va);
}

id OUTLINED_FUNCTION_37(float a1)
{
  float *v1 = a1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_38()
{
  return type metadata accessor for RunVoiceCommandCATs();
}

uint64_t OUTLINED_FUNCTION_41()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_42()
{
  return static CATOption.defaultMode.getter();
}

void OUTLINED_FUNCTION_43(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_45(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_46()
{
  return static ExecuteResponse.complete()();
}

uint64_t OUTLINED_FUNCTION_47()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_48()
{
  return v0;
}

BOOL EncoreConstants.IntentIdentifier.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of EncoreConstants.IntentIdentifier.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

uint64_t EncoreConstants.IntentIdentifier.rawValue.getter()
{
  return 0x6C69614D646E6553;
}

unint64_t lazy protocol witness table accessor for type EncoreConstants.IntentIdentifier and conformance EncoreConstants.IntentIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type EncoreConstants.IntentIdentifier and conformance EncoreConstants.IntentIdentifier;
  if (!lazy protocol witness table cache variable for type EncoreConstants.IntentIdentifier and conformance EncoreConstants.IntentIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncoreConstants.IntentIdentifier and conformance EncoreConstants.IntentIdentifier);
  }
  return result;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance EncoreConstants.IntentIdentifier@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = EncoreConstants.IntentIdentifier.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance EncoreConstants.IntentIdentifier(void *a1@<X8>)
{
  *a1 = 0x6C69614D646E6553;
  a1[1] = 0xE800000000000000;
}

ValueMetadata *type metadata accessor for EncoreConstants()
{
  return &type metadata for EncoreConstants;
}

unsigned char *storeEnumTagSinglePayload for EncoreConstants.IntentIdentifier(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *BOOL result = a2;
        return result;
      case 2:
        *(_WORD *)BOOL result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)BOOL result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *BOOL result = 0;
      break;
    case 2:
      *(_WORD *)BOOL result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x17DE4);
    case 4:
      *(_DWORD *)BOOL result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for EncoreConstants.IntentIdentifier()
{
  return &type metadata for EncoreConstants.IntentIdentifier;
}

uint64_t AppInfoResolver.getLocalizedAppDisplayName(from:deviceState:)(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AppInformationResolver();
  swift_allocObject();
  swift_retain();
  AppInformationResolver.init(app:)();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v7 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

ValueMetadata *type metadata accessor for AppInfoResolver()
{
  return &type metadata for AppInfoResolver;
}

#error "17FF8: call analysis failed (funcsize=77)"

#error "18120: call analysis failed (funcsize=72)"

uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance_preRFv2(app:intent:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[19] = v2;
  v1[20] = v0;
  v1[17] = v3;
  v1[18] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v5);
  v1[21] = OUTLINED_FUNCTION_25();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_16(v6);
  v1[22] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  v1[23] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[24] = v8;
  v1[25] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_2_0();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  *uint64_t v5 = *v2;
  *(void *)(v4 + 216) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v1 + 176);
  if (v0)
  {
    outlined destroy of AutoShortcutInvocation?(v4 + 56, &demangling cache variable for type metadata for DeviceState?);
    outlined destroy of AutoShortcutInvocation?(v7, &demangling cache variable for type metadata for AppDisplayInfo?);
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    outlined destroy of AutoShortcutInvocation?(v4 + 56, &demangling cache variable for type metadata for DeviceState?);
    outlined destroy of AutoShortcutInvocation?(v7, &demangling cache variable for type metadata for AppDisplayInfo?);
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v4 + 224) = v11;
    *uint64_t v11 = v6;
    v11[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance_preRFv2(app:intent:);
    return CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 232) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 240) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  char v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v13 = *(unsigned char *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 168);
  id v14 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(uint64_t **)(v0 + 136);
  INIntent.isRestricted()();
  __swift_project_boxed_opaque_existential_1((void *)(v5 + 16), *(void *)(v5 + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v7 + 16) = xmmword_211C70;
  *(void *)(v7 + 32) = v1;
  specialized Array._endMutation()();
  uint64_t v8 = v1;
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)((v13 & 1) == 0);
  uint64_t v9 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v9);
  uint64_t v10 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  v6[3] = v10;
  v6[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();

  outlined destroy of AutoShortcutInvocation?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of AutoShortcutInvocation?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance_preRFv2(app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *(void *)(v10 + 176);
  uint64_t v12 = *(void *)(v10 + 160);
  uint64_t v13 = v12 + 16;
  __swift_project_boxed_opaque_existential_1((void *)(v12 + 16), *(void *)(v12 + 40));
  *(unsigned char *)(v10 + 248) = dispatch thunk of DeviceState.isCarPlay.getter() & 1;
  *(void *)(v10 + 40) = &type metadata for AppInfoResolver;
  *(void *)(v10 + 48) = &protocol witness table for AppInfoResolver;
  App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(v13, (void *)(v10 + 16), 2, v11);
  __swift_destroy_boxed_opaque_existential_1Tm(v10 + 16);
  outlined init with copy of DeviceState(v13, v10 + 56);
  id v14 = (void *)swift_task_alloc();
  *(void *)(v10 + 208) = v14;
  *id v14 = v10;
  v14[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance_preRFv2(app:intent:);
  OUTLINED_FUNCTION_14_1();
  return static TCCTemplates.promptToEnableApp(appDisplayInfo:deviceState:)(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

uint64_t CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_16(v3);
  v1[9] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_7_1(*(void **)(v0 + 64));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  void *v1 = v0;
  v1[1] = CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:);
  uint64_t v2 = OUTLINED_FUNCTION_48();
  return v3(v2);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[11] = v5;
  v3[12] = v6;
  v3[13] = v7;
  v3[14] = v8;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_32_0();
    return v9();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[8];
  uint64_t v2 = (void *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), *(void *)(v1 + 40));
  OUTLINED_FUNCTION_28_1();
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    CustomIntentTCCFlowStrategy.makeConfirmationViewForWatch(confirmDialog:cancelDialog:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    swift_task_dealloc();
    OUTLINED_FUNCTION_19_2();
    OUTLINED_FUNCTION_23_1();
    return v10(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  uint64_t v3 = CustomIntentTCCFlowStrategy.makeConfirmationView(confirmLabel:cancelLabel:)(v0[11], v0[12], v0[13], v0[14]);
  v0[15] = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v2, *(void *)(v1 + 40));
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v4 = v0[7];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v5, v6, v3, (SEL *)&selRef_setStyle_);
  uint64_t v7 = v0[9];
  if (v4)
  {
    v0[5] = &type metadata for AppInfoResolver;
    v0[6] = &protocol witness table for AppInfoResolver;
    App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)((uint64_t)v2, v0 + 2, 0, v7);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  }
  else
  {
    uint64_t v17 = type metadata accessor for AppDisplayInfo();
    __swift_storeEnumTagSinglePayload(v7, 1, 1, v17);
  }
  uint64_t v18 = (void *)swift_task_alloc();
  v0[16] = v18;
  *uint64_t v18 = v0;
  v18[1] = CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:);
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_23_1();
  return static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)(v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  v7[17] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[18] = v3;
    v7[19] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(*(void *)(v0 + 152), *(void *)(v0 + 144), *(void **)(v0 + 120), (SEL *)&selRef_setSubtitle_);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v1;
  void *v1 = v0;
  v1[1] = CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:);
  uint64_t v2 = OUTLINED_FUNCTION_25_1();
  return static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  v7[21] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[22] = v3;
    v7[23] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(*(void *)(v0 + 184), *(void *)(v0 + 176), *(void **)(v0 + 120), (SEL *)&selRef_setTitle_);
  outlined destroy of AutoShortcutInvocation?(*(void *)(v0 + 72), &demangling cache variable for type metadata for AppDisplayInfo?);
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_39_0();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v4, v5, "Unable to generate a snippet subtitle for TCC. Snippet will not have a subtitle");
    swift_slowDealloc();
  }
  swift_errorRelease();

  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v6;
  *uint64_t v6 = v0;
  v6[1] = CustomIntentTCCFlowStrategy.makeSharedEnableTCCView_preRFv2(app:);
  uint64_t v7 = OUTLINED_FUNCTION_25_1();
  return static TCCTemplates.promptToEnableAppSnippetTitle(appDisplayInfo:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v4, v5, "Unable to generate a snippet title for TCC. Snippet will not have a title");
    swift_slowDealloc();
  }
  swift_errorRelease();

  outlined destroy of AutoShortcutInvocation?(*(void *)(v0 + 72), &demangling cache variable for type metadata for AppDisplayInfo?);
  swift_task_dealloc();
  uint64_t v6 = OUTLINED_FUNCTION_39_0();
  return v7(v6);
}

void CustomIntentTCCFlowStrategy.makeConfirmationViewForWatch(confirmDialog:cancelDialog:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v49 = v2;
  uint64_t v51 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v8 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_12_1();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_20_0();
  uint64_t v14 = v13 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v15 = OUTLINED_FUNCTION_33_0();
  *(_OWORD *)(v15 + 16) = xmmword_212160;
  *(void *)(v15 + 32) = v7;
  *(void *)(v15 + 40) = v6;
  uint64_t v16 = v6;
  swift_bridgeObjectRetain();
  uint64_t v17 = (void *)static CasinoFactory.makeSendCommandsFromMachineUtterances(machineUtterances:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = OUTLINED_FUNCTION_33_0();
  *(_OWORD *)(v18 + 16) = xmmword_212160;
  *(void *)(v18 + 32) = v3;
  *(void *)(v18 + 40) = v1;
  uint64_t v19 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)static CasinoFactory.makeSendCommandsFromMachineUtterances(machineUtterances:)();
  swift_bridgeObjectRelease();
  id v21 = objc_allocWithZone((Class)SASTItemGroup);
  swift_bridgeObjectRetain();
  id v22 = [v21 init];
  UUID.init()();
  uint64_t v23 = UUID.uuidString.getter();
  uint64_t v25 = v24;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
  v53 = v22;
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v23, v25, v22, (SEL *)&selRef_setAceId_);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(commands: SASendCommands, label: String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_212170;
  *(void *)(inited + 32) = v17;
  *(void *)(inited + 40) = v51;
  *(void *)(inited + 48) = v16;
  *(void *)(inited + 56) = v20;
  *(void *)(inited + 64) = v49;
  *(void *)(inited + 72) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v50 = v17;
  id v52 = v20;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v27 = *(void **)(inited + 32);
  uint64_t v28 = *(void *)(inited + 40);
  uint64_t v29 = *(void *)(inited + 48);
  id v30 = objc_allocWithZone((Class)SASTCommandTemplateAction);
  id v31 = v27;
  swift_bridgeObjectRetain();
  id v32 = [v30 init];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v33 = (__n128 *)OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_38_0(v33, (__n128)xmmword_211C70);
  id v34 = v31;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v54, v32);
  id v35 = [objc_allocWithZone((Class)SAUIDecoratedText) init];
  outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(v28, v29, v35);
  id v36 = [objc_allocWithZone((Class)SASTButtonItem) init];
  [v36 setCentered:1];
  [v36 setDecoratedLabel:v35];
  id v37 = v32;
  [v36 setAction:v37];
  swift_bridgeObjectRelease();

  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  uint64_t v38 = *(void **)(inited + 56);
  uint64_t v39 = *(void *)(inited + 64);
  uint64_t v40 = *(void *)(inited + 72);
  id v41 = objc_allocWithZone((Class)SASTCommandTemplateAction);
  id v42 = v38;
  swift_bridgeObjectRetain();
  id v43 = [v41 init];
  uint64_t v44 = (__n128 *)OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_38_0(v44, (__n128)xmmword_211C70);
  id v45 = v42;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v54, v43);
  id v46 = [objc_allocWithZone((Class)SAUIDecoratedText) init];
  outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(v39, v40, v46);
  id v47 = [objc_allocWithZone((Class)SASTButtonItem) init];
  [v47 setCentered:1];
  [v47 setDecoratedLabel:v46];
  id v48 = v43;
  [v47 setAction:v48];
  swift_bridgeObjectRelease();

  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter((uint64_t)_swiftEmptyArrayStorage, v53);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_27_1();
}

id CustomIntentTCCFlowStrategy.makeConfirmationView(confirmLabel:cancelLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v8 = OUTLINED_FUNCTION_33_0();
  *(_OWORD *)(v8 + 16) = xmmword_212160;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)static CasinoFactory.makeSendCommandsFromMachineUtterances(machineUtterances:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = OUTLINED_FUNCTION_33_0();
  *(_OWORD *)(v10 + 16) = xmmword_212160;
  *(void *)(v10 + 32) = a3;
  *(void *)(v10 + 40) = a4;
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)static CasinoFactory.makeSendCommandsFromMachineUtterances(machineUtterances:)();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v12 + 16) = xmmword_211C70;
  *(void *)(v12 + 32) = v9;
  OUTLINED_FUNCTION_35_0();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = v9;
  uint64_t v24 = OUTLINED_FUNCTION_34_0(v25, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v14 + 16) = xmmword_211C70;
  *(void *)(v14 + 32) = v11;
  OUTLINED_FUNCTION_35_0();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = v11;
  uint64_t v16 = OUTLINED_FUNCTION_34_0(v25, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v17 = [objc_allocWithZone((Class)SAUIConfirmationView) init];
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmText.setter(a1, a2, v17);
  uint64_t v18 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v18 + 16) = xmmword_211C70;
  *(void *)(v18 + 32) = v13;
  OUTLINED_FUNCTION_35_0();
  id v19 = v13;
  outlined bridged method (mbnn) of @objc SAUIConfirmationView.confirmCommands.setter(v25, v17, (SEL *)&selRef_setConfirmCommands_);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.denyText.setter(a3, a4, v17);
  uint64_t v20 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v20 + 16) = xmmword_211C70;
  *(void *)(v20 + 32) = v15;
  OUTLINED_FUNCTION_35_0();
  id v21 = v15;
  outlined bridged method (mbnn) of @objc SAUIConfirmationView.confirmCommands.setter(v25, v17, (SEL *)&selRef_setDenyCommands_);
  uint64_t v22 = OUTLINED_FUNCTION_33_0();
  *(_OWORD *)(v22 + 16) = xmmword_212180;
  *(void *)(v22 + 32) = v24;
  *(void *)(v22 + 40) = v16;
  OUTLINED_FUNCTION_35_0();
  outlined bridged method (mbnn) of @objc SAUIConfirmationView.allConfirmationOptions.setter(v25, v17);

  return v17;
}

uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[21] = v2;
  v1[22] = v0;
  v1[19] = v3;
  v1[20] = v4;
  uint64_t v5 = type metadata accessor for DialogPhase();
  v1[23] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[24] = v6;
  v1[25] = OUTLINED_FUNCTION_13_0();
  v1[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[27] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[28] = v8;
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_16(v9);
  v1[30] = OUTLINED_FUNCTION_13_0();
  v1[31] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v10);
  v1[32] = OUTLINED_FUNCTION_13_0();
  v1[33] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[34] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[35] = v12;
  v1[36] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  void *v0;
  char v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v0[34]);
  uint64_t v1 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v2 = OUTLINED_FUNCTION_12_2();
  v3(v2);
  if (v1)
  {
    uint64_t v4 = v0[33];
    uint64_t v6 = v0[30];
    uint64_t v5 = v0[31];
    uint64_t v7 = v0[22];
    uint64_t v8 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v4, 1, 1, v8);
    uint64_t v9 = (void *)(v7 + 16);
    v0[5] = &type metadata for AppInfoResolver;
    v0[6] = &protocol witness table for AppInfoResolver;
    App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(v7 + 16, v0 + 2, 2, v5);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    outlined init with copy of AppDisplayInfo?(v5, v6, &demangling cache variable for type metadata for AppDisplayInfo?);
    uint64_t v10 = type metadata accessor for AppDisplayInfo();
    if (__swift_getEnumTagSinglePayload(v6, 1, v10) == 1)
    {
      outlined destroy of AutoShortcutInvocation?(v0[30], &demangling cache variable for type metadata for AppDisplayInfo?);
    }
    else
    {
      uint64_t v15 = v0[32];
      uint64_t v14 = v0[33];
      uint64_t v16 = v0[30];
      AppDisplayInfo.displayName.getter();
      OUTLINED_FUNCTION_40();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v10);
      SpeakableString.init(print:speak:)();
      outlined destroy of AutoShortcutInvocation?(v14, &demangling cache variable for type metadata for SpeakableString?);
      __swift_storeEnumTagSinglePayload(v15, 0, 1, v8);
      outlined init with take of SpeakableString?(v15, v14);
    }
    uint64_t v18 = v0[22];
    type metadata accessor for EnableTCCCATWrapperSimple(0);
    outlined init with copy of DeviceState((uint64_t)v9, (uint64_t)(v0 + 7));
    v0[37] = ContinueInAppCATWrapperSimple.__allocating_init(deviceState:)((uint64_t)(v0 + 7));
    id v19 = *(void *)(v18 + 40);
    uint64_t v20 = *(void *)(v18 + 48);
    __swift_project_boxed_opaque_existential_1(v9, v19);
    v0[38] = DeviceState.asSiriKitDeviceState()(v19, v20);
    id v21 = (void *)swift_task_alloc();
    v0[39] = v21;
    *id v21 = v0;
    v21[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:);
    OUTLINED_FUNCTION_14_1();
    return EnableTCCCATWrapperSimple.promptToEnableApp(device:appName:)(v22, v23);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    v0[55] = v11;
    *uint64_t v11 = v0;
    v11[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:);
    OUTLINED_FUNCTION_14_1();
    return CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance_preRFv2(app:intent:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v7 + 320) = v6;
  *(void *)(v7 + 328) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  uint64_t v11;
  Swift::String_optional v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;

  uint64_t v1 = *(void **)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 176);
  static DialogPhase.confirmation.getter();
  uint64_t v7 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v8 = OUTLINED_FUNCTION_28_1();
  v9(v8);
  __swift_project_boxed_opaque_existential_1((void *)(v6 + 16), *(void *)(v6 + 40));
  OUTLINED_FUNCTION_28_1();
  if (dispatch thunk of DeviceState.isCarPlay.getter())
  {
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v10;
    *uint64_t v10 = v0;
    v10[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:);
    uint64_t v11 = *(void *)(v0 + 264);
    return EnableTCCCATWrapperSimple.promptToEnableAppSnippetTitle(appName:)(v11);
  }
  else
  {
    OutputGenerationManifest.listenAfterSpeaking.setter();
    uint64_t v13 = DialogExecutionResult.firstDialogFullPrint()();
    *(Swift::String_optional *)(v0 + 136) = v13;
    uint64_t v14 = *(void **)(v0 + 176);
    *(void *)(v0 + 360) = v13.value._object;
    OUTLINED_FUNCTION_7_1(v14);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v15;
    *uint64_t v15 = v0;
    v15[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:);
    uint64_t v16 = OUTLINED_FUNCTION_48();
    return v17(v16);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 344) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 352) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  Swift::String_optional v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void **)(v0 + 352);
  uint64_t v2 = DialogExecutionResult.firstDialogFullPrint()();

  *(Swift::String_optional *)(v0 + 136) = v2;
  uint64_t v3 = *(void **)(v0 + 176);
  *(void *)(v0 + 360) = v2.value._object;
  OUTLINED_FUNCTION_7_1(v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v4;
  *uint64_t v4 = v0;
  v4[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:);
  uint64_t v5 = OUTLINED_FUNCTION_48();
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  OUTLINED_FUNCTION_21_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  OUTLINED_FUNCTION_5_0();
  char *v12 = v11;
  uint64_t v13 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v14 = v13;
  v11[47] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = v11[17];
    v11[48] = v3;
    v11[49] = v5;
    v11[50] = v7;
    v11[51] = v9;
    v11[52] = v15;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v16, v17, v18);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v2 = v0[51];
  uint64_t v1 = v0[52];
  uint64_t v3 = v0[49];
  uint64_t v4 = v0[50];
  uint64_t v5 = v0[48];
  uint64_t v6 = v0[45];
  uint64_t v7 = (void *)v0[40];
  uint64_t v8 = (void *)v0[22];
  uint64_t v16 = v8[15];
  uint64_t v17 = v8[16];
  __swift_project_boxed_opaque_existential_1(v8 + 12, v16);
  v0[15] = type metadata accessor for WorkflowDataModels(0);
  v0[16] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 12);
  uint64_t *boxed_opaque_existential_1 = v2;
  boxed_opaque_existential_1[1] = v4;
  boxed_opaque_existential_1[2] = v3;
  boxed_opaque_existential_1[3] = v5;
  boxed_opaque_existential_1[4] = v1;
  boxed_opaque_existential_1[5] = v6;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v10 + 16) = xmmword_211C70;
  *(void *)(v10 + 32) = v7;
  uint64_t v18 = v10;
  specialized Array._endMutation()();
  v0[53] = v18;
  uint64_t v11 = v7;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[54] = (uint64_t)v12;
  char *v12 = v0;
  v12[1] = CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:);
  uint64_t v13 = v0[29];
  uint64_t v14 = v0[19];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v14, v0 + 12, v18, v13, v16, v17);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 96;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[40];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[31];
  swift_release();

  uint64_t v4 = OUTLINED_FUNCTION_28_1();
  v5(v4);
  outlined destroy of AutoShortcutInvocation?(v3, &demangling cache variable for type metadata for AppDisplayInfo?);
  outlined destroy of AutoShortcutInvocation?(v2, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_2_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_32_0();
  return v3();
}

uint64_t CustomIntentTCCFlowStrategy.makePromptForTCCAcceptance(app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  swift_release();
  uint64_t v11 = *(void *)(v10 + 264);
  outlined destroy of AutoShortcutInvocation?(*(void *)(v10 + 248), &demangling cache variable for type metadata for AppDisplayInfo?);
  outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_37_0();

  uint64_t v12 = OUTLINED_FUNCTION_12_2();
  v13(v12);
  uint64_t v14 = *(void *)(v11 + 264);
  outlined destroy of AutoShortcutInvocation?(*(void *)(v11 + 248), &demangling cache variable for type metadata for AppDisplayInfo?);
  outlined destroy of AutoShortcutInvocation?(v14, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_37_0();

  uint64_t v12 = OUTLINED_FUNCTION_12_2();
  v13(v12);
  uint64_t v14 = *(void *)(v11 + 264);
  outlined destroy of AutoShortcutInvocation?(*(void *)(v11 + 248), &demangling cache variable for type metadata for AppDisplayInfo?);
  outlined destroy of AutoShortcutInvocation?(v14, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

uint64_t ContinueInAppCATWrapperSimple.__allocating_init(deviceState:)(uint64_t a1)
{
  swift_allocObject();
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)v5, &demangling cache variable for type metadata for DeviceState?);
  SiriKitFlowCATWrapperSimple.init(deviceState:)();
  uint64_t v3 = v2;
  outlined destroy of AutoShortcutInvocation?(a1, &demangling cache variable for type metadata for DeviceState?);
  return v3;
}

uint64_t CustomIntentTCCFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  return v0;
}

uint64_t CustomIntentTCCFlowStrategy.__deallocating_deinit()
{
  CustomIntentTCCFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance CustomIntentTCCFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 144)
                                                          + **(int **)(**(void **)v3 + 144));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance CustomIntentTCCFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentTCCFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:) in conformance CustomIntentTCCFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentTCCFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:) in conformance CustomIntentTCCFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentTCCFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:) in conformance CustomIntentTCCFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentTCCFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:)(a1, a2, a3, v11, a5);
}

void SiriKitFlowCATWrapperSimple.__allocating_init(deviceState:)()
{
}

void SiriKitFlowCATWrapperSimple.init(deviceState:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v22 = v0;
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for CATOption();
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_20_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v6 = OUTLINED_FUNCTION_16(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_12_1();
  uint64_t v12 = v11;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v21 - v17;
  id v19 = (id)AFSystemRootDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:isDirectory:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)();
  outlined init with copy of AppDisplayInfo?(v2, (uint64_t)&v23, &demangling cache variable for type metadata for DeviceState?);
  if (v24)
  {
    outlined init with take of AceServiceInvokerAsync(&v23, (uint64_t)v25);
    type metadata accessor for CATGlobals();
    outlined init with copy of DeviceState((uint64_t)v25, (uint64_t)&v23);
    CATGlobals.__allocating_init(device:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
  }
  else
  {
    outlined destroy of AutoShortcutInvocation?((uint64_t)&v23, &demangling cache variable for type metadata for DeviceState?);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v9, v16, v10);
  __swift_storeEnumTagSinglePayload(v9, 0, 1, v10);
  static CATOption.defaultMode.getter();
  CATWrapperSimple.init(templateDir:options:globals:)();
  outlined destroy of AutoShortcutInvocation?(v2, &demangling cache variable for type metadata for DeviceState?);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v16, v10);
  v20(v18, v10);
  OUTLINED_FUNCTION_27_1();
}

void SiriKitFlowCATWrapperSimple.init(templateDir:options:globals:)()
{
}

void SiriKitFlowCATWrapperSimple.init(useResponseMode:options:)()
{
}

uint64_t ContinueInAppCATWrapperSimple.__deallocating_deinit()
{
  CATWrapperSimple.deinit();

  return swift_deallocClassInstance();
}

uint64_t EnableTCCCATWrapperSimple.promptToEnableApp(device:appName:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = swift_task_alloc();
  return _swift_task_switch(EnableTCCCATWrapperSimple.promptToEnableApp(device:appName:), 0, 0);
}

uint64_t EnableTCCCATWrapperSimple.promptToEnableApp(device:appName:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = v1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = swift_allocObject();
  v1[6] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_212170;
  *(void *)(v3 + 32) = 0x656369766564;
  *(void *)(v3 + 40) = 0xE600000000000000;
  uint64_t v4 = 0;
  if (v2)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v3 + 56) = 0;
    *(void *)(v3 + 64) = 0;
  }
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[3];
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 72) = v4;
  *(void *)(v3 + 80) = 0x656D614E707061;
  *(void *)(v3 + 88) = 0xE700000000000000;
  outlined init with copy of AppDisplayInfo?(v6, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = type metadata accessor for SpeakableString();
  int v8 = OUTLINED_FUNCTION_41_0(v7);
  uint64_t v9 = v1[5];
  if (v8 == 1)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v9, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
  }
  else
  {
    *(void *)(v3 + 120) = v0;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 96));
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v10 + 32))();
    swift_retain();
  }
  uint64_t v14 = (uint64_t (*)(unint64_t))((char *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:)
                                                 + async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  uint64_t v11 = (void *)swift_task_alloc();
  v1[7] = v11;
  *uint64_t v11 = v1;
  v11[1] = EnableTCCCATWrapperSimple.promptToEnableApp(device:appName:);
  unint64_t v12 = OUTLINED_FUNCTION_31_0();
  return v14(v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t EnableTCCCATWrapperSimple.promptToEnableAppSnippetTitle(appName:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(EnableTCCCATWrapperSimple.promptToEnableAppSnippetTitle(appName:), 0, 0);
}

uint64_t EnableTCCCATWrapperSimple.promptToEnableAppSnippetTitle(appName:)()
{
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = swift_allocObject();
  v0[5] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = (uint64_t *)(v2 + 48);
  *(void *)(v2 + 32) = 0x656D614E707061;
  *(void *)(v2 + 40) = 0xE700000000000000;
  uint64_t v4 = OUTLINED_FUNCTION_28_1();
  outlined init with copy of AppDisplayInfo?(v4, v5, v6);
  uint64_t v7 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_41_0(v7) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[4], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
  }
  else
  {
    *(void *)(v2 + 72) = v1;
    __swift_allocate_boxed_opaque_existential_1(v3);
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v8 + 32))();
  }
  uint64_t v9 = (void *)swift_task_alloc();
  v0[6] = v9;
  *uint64_t v9 = v0;
  v9[1] = EnableTCCCATWrapperSimple.promptToEnableAppSnippetTitle(appName:);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_23_1();
  return v13(v10, v11, v12, v13, v14, v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t EnableTCCLabelsProvider.getYesNoLabels()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  void *v1 = v0;
  v1[1] = EnableTCCLabelsProvider.getYesNoLabels();
  return static LabelTemplates.yes()();
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  void *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  v3[2] = v1;
  v3[3] = v5;
  v3[4] = v6;
  v3[5] = v0;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  v3[7] = v9;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_32_0();
    return v10();
  }
  else
  {
    uint64_t v12 = (void *)swift_task_alloc();
    v3[8] = v12;
    char *v12 = v7;
    v12[1] = EnableTCCLabelsProvider.getYesNoLabels();
    return static LabelTemplates.no()();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_23_1();
    return v16(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t protocol witness for EnableTCCLabelsProviding.getYesNoLabels() in conformance EnableTCCLabelsProvider()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for EnableTCCLabelsProviding.getYesNoLabels() in conformance EnableTCCLabelsProvider;
  return EnableTCCLabelsProvider.getYesNoLabels()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_23_1();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (commands: SASendCommands, label: String));
  swift_arrayDestroy();

  return swift_deallocClassInstance();
}

{
  uint64_t vars8;

  swift_arrayDestroy();

  return swift_deallocClassInstance();
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmText.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setConfirmText:v4];
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationView.denyText.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setDenyText:v4];
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationView.confirmCommands.setter(uint64_t a1, void *a2, SEL *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, *a3, isa);
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationView.allConfirmationOptions.setter(uint64_t a1, void *a2)
{
  type metadata accessor for SAUIConfirmationOption();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setAllConfirmationOptions:isa];
}

void outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, *a4, v6);
}

uint64_t *specialized CustomIntentTCCFlowStrategy.init(deviceState:labelsProvider:responseFactory:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  a4[10] = a5;
  a4[11] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a2, a5);
  a4[15] = a6;
  a4[16] = a8;
  uint64_t v16 = __swift_allocate_boxed_opaque_existential_1(a4 + 12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(v16, a3, a6);
  outlined init with take of AceServiceInvokerAsync(a1, (uint64_t)(a4 + 2));
  return a4;
}

uint64_t type metadata accessor for EnableTCCCATWrapperSimple(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for EnableTCCCATWrapperSimple);
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels)
  {
    type metadata accessor for WorkflowDataModels(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels);
  }
  return result;
}

uint64_t outlined init with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CustomIntentTCCFlowStrategy()
{
  return self;
}

uint64_t type metadata accessor for SiriKitFlowCATWrapperSimple(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for SiriKitFlowCATWrapperSimple);
}

uint64_t type metadata accessor for EnableTCCCATWrapperSimple(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SiriKitFlowCATWrapperSimple()
{
  return type metadata completion function for SiriKitFlowCATWrapperSimple();
}

{
  OUTLINED_FUNCTION_10_0();
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for SiriKitFlowCATWrapperSimple()
{
  return type metadata accessor for SiriKitFlowCATWrapperSimple(0);
}

uint64_t type metadata completion function for EnableTCCCATWrapperSimple()
{
  return type metadata completion function for SiriKitFlowCATWrapperSimple();
}

uint64_t ObjC metadata update function for EnableTCCCATWrapperSimple()
{
  return type metadata accessor for EnableTCCCATWrapperSimple(0);
}

ValueMetadata *type metadata accessor for EnableTCCLabelsProvider()
{
  return &type metadata for EnableTCCLabelsProvider;
}

unint64_t type metadata accessor for SAUIConfirmationOption()
{
  unint64_t result = lazy cache variable for type metadata for SAUIConfirmationOption;
  if (!lazy cache variable for type metadata for SAUIConfirmationOption)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption);
  }
  return result;
}

uint64_t outlined init with copy of AppDisplayInfo?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_40();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_7_1@<X0>(void *a1@<X8>)
{
  uint64_t v1 = a1[11];
  __swift_project_boxed_opaque_existential_1(a1 + 7, a1[10]);
  return v1 + 8;
}

char *OUTLINED_FUNCTION_10_2@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_12_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return v0;
}

char *OUTLINED_FUNCTION_22_2@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return *(void *)(v0 + 72);
}

uint64_t OUTLINED_FUNCTION_28_1()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_31_0()
{
  return 0xD00000000000001BLL;
}

uint64_t OUTLINED_FUNCTION_32_0()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_33_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_34_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CasinoFactory.makeConfirmationOptionFromCommands(commands:label:confirmationType:isActive:iconType:)(a1, a2, a3, v3, v4, 0, 0, 0);
}

uint64_t OUTLINED_FUNCTION_35_0()
{
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_37_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_38_0(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  *(void *)(v3 - 184) = a1;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_39_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_41_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

void OUTLINED_FUNCTION_42_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t CustomRequestParameterDefinition.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

Swift::String_optional __swiftcall InstallVoiceShortcutInvocationData.getVoiceCommandName()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  result.value._object = v4;
  result.value._countAndFlagsBits = v3;
  return result;
}

Swift::String_optional __swiftcall InstallVoiceShortcutInvocationData.getVoiceCommandPhrase()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  result.value._object = v4;
  result.value._countAndFlagsBits = v3;
  return result;
}

uint64_t ShowAlertVisual.response.getter()
{
  OUTLINED_FUNCTION_9_0();
  v1[37] = v2;
  v1[38] = v0;
  type metadata accessor for Separators();
  v1[39] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for ComponentWrapper();
  v1[40] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[41] = v4;
  v1[42] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for BinaryButton();
  v1[43] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[44] = v6;
  v1[45] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for Button.LabelStyle();
  v1[46] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[47] = v8;
  v1[48] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for _ProtoButton.FormAction();
  v1[49] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[50] = v10;
  v1[51] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for ButtonRole();
  v1[52] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[53] = v12;
  v1[54] = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for Button();
  v1[55] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v1[56] = v14;
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  v1[60] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Command();
  v1[61] = v15;
  OUTLINED_FUNCTION_1_0(v15);
  v1[62] = v16;
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for SimpleItemRich();
  v1[65] = v17;
  OUTLINED_FUNCTION_1_0(v17);
  v1[66] = v18;
  v1[67] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v19, v20, v21);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  void (*v10)(uint64_t *, uint64_t, uint64_t);
  void *v11;
  uint64_t v13;

  outlined init with take of String?(*(void *)(v0 + 304) + 16, v0 + 264);
  outlined init with take of String?(v0 + 264, v0 + 280);
  uint64_t v1 = *(void *)(v0 + 288);
  if (!v1) {
    goto LABEL_6;
  }
  uint64_t v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v2 = *(void *)(v0 + 280) & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    *(_OWORD *)(v0 + 248) = *(_OWORD *)(*(void *)(v0 + 304) + 32);
    OUTLINED_FUNCTION_2_2((__n128)0);
    outlined retain of String?(v0 + 264);
    outlined retain of String?(v0 + 248);
  }
  else
  {
LABEL_6:
    OUTLINED_FUNCTION_2_2((__n128)0);
    swift_bridgeObjectRetain();
  }
  SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)();
  uint64_t v3 = *(void *)(v0 + 512);
  uint64_t v4 = *(void *)(v0 + 488);
  uint64_t v5 = *(void *)(v0 + 496);
  *(void *)(v0 + 544) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t v6 = (__n128 *)swift_allocObject();
  uint64_t v7 = OUTLINED_FUNCTION_5_2(v6, (__n128)xmmword_212160);
  *(void *)(v7 + 216) = v8;
  *(void *)(v0 + 224) = 0xEC0000006E6F6974;
  AnyHashable.init<A>(_:)();
  v6[6].n128_u64[0] = (unint64_t)&type metadata for String;
  v6[4].n128_u64[1] = 7562617;
  v6[5].n128_u64[0] = 0xE300000000000000;
  Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_7_2();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 200) = v4;
  *(void *)(v0 + 208) = &protocol witness table for Command;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 176));
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16);
  *(void *)(v0 + 552) = v10;
  *(void *)(v0 + 560) = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v10(boxed_opaque_existential_1, v3, v4);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 568) = v11;
  *uint64_t v11 = v0;
  v11[1] = ShowAlertVisual.response.getter;
  return static LabelTemplates.ok()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  void (*v12)(uint64_t);
  void (*v13)(uint64_t);
  __n128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v1 = *(void *)(v0 + 592);
  uint64_t v2 = *(void *)(v0 + 584);
  uint64_t v22 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 552);
  uint64_t v20 = *(void *)(v0 + 504);
  uint64_t v21 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v6 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 416);
  uint64_t v7 = *(void *)(v0 + 400);
  uint64_t v9 = *(void *)(v0 + 376);
  uint64_t v8 = *(void *)(v0 + 384);
  *(void *)(v0 + 40) = &type metadata for String;
  *(void *)(v0 + 48) = &protocol witness table for String;
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = v2;
  uint64_t v10 = enum case for ButtonRole.preferred(_:);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  *(void *)(v0 + 600) = v11;
  *(void *)(v0 + 608) = (v3 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v11(v4, v10, v5);
  *(_DWORD *)(v0 + 680) = enum case for _ProtoButton.FormAction.none(_:);
  uint64_t v12 = *(void (**)(uint64_t))(v7 + 104);
  *(void *)(v0 + 616) = v12;
  *(void *)(v0 + 624) = (v7 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v12(v6);
  *(_DWORD *)(v0 + 684) = enum case for Button.LabelStyle.automatic(_:);
  uint64_t v13 = *(void (**)(uint64_t))(v9 + 104);
  *(void *)(v0 + 632) = v13;
  *(void *)(v0 + 640) = (v9 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v13(v8);
  Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)();
  uint64_t v14 = (__n128 *)swift_allocObject();
  uint64_t v15 = OUTLINED_FUNCTION_5_2(v14, (__n128)xmmword_212160);
  *(void *)(v15 + 232) = v16;
  *(void *)(v0 + 240) = 0xEC0000006E6F6974;
  AnyHashable.init<A>(_:)();
  v14[6].n128_u64[0] = (unint64_t)&type metadata for String;
  v14[4].n128_u64[1] = 28526;
  v14[5].n128_u64[0] = 0xE200000000000000;
  Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_7_2();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 120) = v21;
  *(void *)(v0 + 128) = &protocol witness table for Command;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 96));
  v22(boxed_opaque_existential_1, v20, v21);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 648) = v18;
  *uint64_t v18 = v0;
  v18[1] = ShowAlertVisual.response.getter;
  return static LabelTemplates.cancel()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  uint64_t (*v20)(void);
  unsigned int v22;
  void (*v23)(uint64_t, void, uint64_t);
  void (*v24)(uint64_t, void, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v1 = *(void *)(v0 + 672);
  uint64_t v2 = *(void *)(v0 + 664);
  uint64_t v23 = *(void (**)(uint64_t, void, uint64_t))(v0 + 632);
  uint64_t v22 = *(_DWORD *)(v0 + 684);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 616);
  uint64_t v4 = *(unsigned int *)(v0 + 680);
  uint64_t v24 = *(void (**)(uint64_t, void, uint64_t))(v0 + 600);
  id v41 = *(void *)(v0 + 528);
  uint64_t v38 = *(void *)(v0 + 520);
  uint64_t v39 = *(void *)(v0 + 536);
  uint64_t v33 = *(void *)(v0 + 504);
  id v34 = *(void *)(v0 + 512);
  uint64_t v5 = *(void *)(v0 + 480);
  id v31 = *(void *)(v0 + 496);
  id v32 = *(void *)(v0 + 488);
  id v30 = v5;
  uint64_t v26 = *(void *)(v0 + 472);
  uint64_t v40 = *(void *)(v0 + 464);
  id v42 = *(void *)(v0 + 456);
  uint64_t v27 = *(void *)(v0 + 448);
  uint64_t v6 = *(void *)(v0 + 432);
  id v37 = *(void *)(v0 + 440);
  uint64_t v8 = *(void *)(v0 + 408);
  uint64_t v7 = *(void *)(v0 + 416);
  *(void *)(v0 + 80) = &type metadata for String;
  *(void *)(v0 + 88) = &protocol witness table for String;
  *(void *)(v0 + 56) = v1;
  uint64_t v10 = *(void *)(v0 + 384);
  uint64_t v9 = *(void *)(v0 + 392);
  *(void *)(v0 + 64) = v2;
  uint64_t v11 = *(void *)(v0 + 368);
  id v35 = *(void *)(v0 + 360);
  uint64_t v28 = *(void *)(v0 + 352);
  uint64_t v25 = *(void *)(v0 + 344);
  uint64_t v12 = *(void *)(v0 + 328);
  id v36 = *(void *)(v0 + 336);
  uint64_t v29 = *(void *)(v0 + 320);
  v3(v8, v4, v9);
  v23(v10, v22, v11);
  v24(v6, enum case for ButtonRole.standard(_:), v7);
  Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  v13(v40, v5, v37);
  v13(v42, v26, v37);
  BinaryButton.init(primaryButton:secondaryButton:componentName:linkIdentifier:)();
  *(void *)(v0 + 160) = v25;
  *(void *)(v0 + 168) = &protocol witness table for BinaryButton;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 136));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v28 + 16))(boxed_opaque_existential_1, v35, v25);
  static Separators.none.getter();
  ComponentWrapper.init(_:separators:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SectionConvertible>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_212170;
  *(void *)(v15 + 56) = v38;
  *(void *)(v15 + 64) = &protocol witness table for SimpleItemRich;
  uint64_t v16 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v15 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v41 + 16))(v16, v39, v38);
  *(void *)(v15 + 96) = v29;
  *(void *)(v15 + 104) = &protocol witness table for ComponentWrapper;
  uint64_t v17 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v15 + 72));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(v17, v36, v29);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v36, v29);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v35, v25);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v18(v26, v37);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v19(v33, v32);
  v18(v30, v37);
  v19(v34, v32);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v38);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[67];
  uint64_t v2 = v0[66];
  uint64_t v3 = v0[65];
  (*(void (**)(void, void))(v0[62] + 8))(v0[64], v0[61]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 22));
  OUTLINED_FUNCTION_3_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;

  uint64_t v11 = v0[67];
  uint64_t v1 = v0[66];
  uint64_t v2 = v0[65];
  uint64_t v3 = v0[64];
  uint64_t v4 = v0[61];
  uint64_t v5 = v0[60];
  uint64_t v7 = v0[55];
  uint64_t v6 = v0[56];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[62] + 8);
  v8(v0[63], v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v8(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v11, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
  OUTLINED_FUNCTION_3_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t ShowAlertVisual.response.getter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v3;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[72] = v2;
  swift_task_dealloc();
  if (!v2)
  {
    v7[73] = a2;
    v7[74] = a1;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v2;
  uint64_t *v3;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v3;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[82] = v2;
  swift_task_dealloc();
  if (!v2)
  {
    v7[83] = a2;
    v7[84] = a1;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

uint64_t ShowAlertVisual.data.getter()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for Response();
  v0[2] = v1;
  OUTLINED_FUNCTION_1_0(v1);
  v0[3] = v2;
  v0[4] = OUTLINED_FUNCTION_25();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = ShowAlertVisual.data.getter;
  return ShowAlertVisual.response.getter();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 48) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = *(void *)(v0 + 48);
  lazy protocol witness table accessor for type Response and conformance Response();
  uint64_t v2 = ProtobufBuilder.serializedData()();
  uint64_t v4 = v3;
  if (v1)
  {
    uint64_t v5 = OUTLINED_FUNCTION_8_1();
    v6(v5);
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  else
  {
    uint64_t v9 = v2;
    uint64_t v10 = OUTLINED_FUNCTION_8_1();
    v11(v10);
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v12(v9, v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t lazy protocol witness table accessor for type Response and conformance Response()
{
  unint64_t result = lazy protocol witness table cache variable for type Response and conformance Response;
  if (!lazy protocol witness table cache variable for type Response and conformance Response)
  {
    type metadata accessor for Response();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Response and conformance Response);
  }
  return result;
}

uint64_t DisambiguationItemComponent.init(title:subtitle:image:synonyms:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ShowAlertVisual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ShowAlertVisual()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ShowAlertVisual(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ShowAlertVisual(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for ShowAlertVisual(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowAlertVisual(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowAlertVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowAlertVisual()
{
  return &type metadata for ShowAlertVisual;
}

void OUTLINED_FUNCTION_2_2(__n128 a1)
{
  __n128 *v1 = a1;
  v1[1] = a1;
  v1[3] = a1;
  void v1[4] = a1;
  v1[6] = a1;
  v1[7] = a1;
  *(void *)(v2 - 224) = 0;
  v1[9] = a1;
  v1[10] = a1;
  *(void *)(v2 - 176) = 0;
  v1[12] = a1;
  v1[13] = a1;
  *(void *)(v2 - 128) = 0;
  v1[15] = a1;
  v1[16] = a1;
  *(void *)(v2 - 80) = 0;
  v1[18] = a1;
  v1[19] = a1;
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_5_2(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return static Command.directInvocation(identifier:payload:isNavigation:)();
}

uint64_t OUTLINED_FUNCTION_8_1()
{
  return v0;
}

uint64_t InstallVoiceShortcutInvocationData.description.getter()
{
  uint64_t v3 = 0x7974706D65;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = 0;
  v17[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v7._object = (void *)0x8000000000225BD0;
  v7._countAndFlagsBits = 0xD00000000000002DLL;
  String.append(_:)(v7);
  if (v0[3])
  {
    uint64_t v2 = v0[2];
    uint64_t v1 = (void *)v0[3];
  }
  else
  {
    OUTLINED_FUNCTION_0_1();
  }
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v2;
  v8._object = v1;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x617265747475202CLL;
  v9._object = (void *)0xED0000203A65636ELL;
  String.append(_:)(v9);
  if (v0[5])
  {
    uint64_t v2 = v0[4];
    uint64_t v1 = (void *)v0[5];
  }
  else
  {
    OUTLINED_FUNCTION_0_1();
  }
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = v2;
  v10._object = v1;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x203A6C7275202CLL;
  v11._object = (void *)0xE700000000000000;
  String.append(_:)(v11);
  outlined init with copy of URL?((uint64_t)v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin34InstallVoiceShortcutInvocationData_url, (uint64_t)v6);
  uint64_t v12 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v12) == 1)
  {
    outlined destroy of URL?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for URL?);
    uint64_t v13 = (void *)0xE500000000000000;
  }
  else
  {
    uint64_t v3 = URL.absoluteString.getter();
    uint64_t v13 = v14;
    (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v6, v12);
  }
  v15._countAndFlagsBits = v3;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return v17[0];
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t InstallVoiceShortcutInvocationData.__allocating_init(semantic:url:utterance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  InstallVoiceShortcutInvocationData.init(semantic:url:utterance:)(a1, a2, a3, a4, a5);
  return v10;
}

void *InstallVoiceShortcutInvocationData.init(semantic:url:utterance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a4;
  v5[5] = a5;
  outlined init with take of URL?(a3, (uint64_t)v5 + OBJC_IVAR____TtC18SiriLinkFlowPlugin34InstallVoiceShortcutInvocationData_url);
  return v5;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t InstallVoiceShortcutInvocationData.__allocating_init(invocationData:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  Swift::String v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  Swift::String v9 = (char *)&v21 - v8;
  type metadata accessor for InstallVoiceShortcutInvocationData();
  uint64_t v10 = static InstallVoiceShortcutInvocationData.getDataForKey(key:invocationData:)(0xD000000000000010, 0x8000000000225C00, a1);
  uint64_t v12 = v11;
  uint64_t v13 = static InstallVoiceShortcutInvocationData.getDataForKey(key:invocationData:)(0xD000000000000012, 0x8000000000225C20, a1);
  uint64_t v15 = v14;
  static InstallVoiceShortcutInvocationData.getDataForKey(key:invocationData:)(0x6D6F436563696F76, 0xEF4C5255646E616DLL, a1);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  if (v17)
  {
    URL.init(string:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = type metadata accessor for URL();
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 1, 1, v18);
  }
  outlined init with copy of URL?((uint64_t)v9, (uint64_t)v7);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v2 + 112))(v10, v12, v7, v13, v15);
  outlined destroy of URL?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v19;
}

uint64_t type metadata accessor for InstallVoiceShortcutInvocationData()
{
  uint64_t result = type metadata singleton initialization cache for InstallVoiceShortcutInvocationData;
  if (!type metadata singleton initialization cache for InstallVoiceShortcutInvocationData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t static InstallVoiceShortcutInvocationData.getDataForKey(key:invocationData:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v7 & 1) == 0)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  if (!*((void *)&v17 + 1))
  {
LABEL_8:
    outlined destroy of URL?((uint64_t)&v16, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  if (swift_dynamicCast()) {
    return v15;
  }
LABEL_9:
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    *(void *)&long long v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v13 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v10, v11, "InstallVoiceShortcutInvocationData missing %s : %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t InstallVoiceShortcutInvocationData.getVoiceCommandURL()@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin34InstallVoiceShortcutInvocationData_url, a1);
}

uint64_t InstallVoiceShortcutInvocationData.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin34InstallVoiceShortcutInvocationData_url, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v0;
}

uint64_t InstallVoiceShortcutInvocationData.__deallocating_deinit()
{
  InstallVoiceShortcutInvocationData.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InstallVoiceShortcutInvocationData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t ObjC metadata update function for InstallVoiceShortcutInvocationData()
{
  return type metadata accessor for InstallVoiceShortcutInvocationData();
}

void type metadata completion function for InstallVoiceShortcutInvocationData()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for URL?()
{
  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }
}

uint64_t outlined destroy of URL?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t InstallShortcutCATs.errorInstallShortcut(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)InstallShortcutCATs.errorInstallShortcut(device:));
}

uint64_t InstallShortcutCATs.errorInstallShortcut(device:)()
{
  unint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  v0[5] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_1_2(v2, (__n128)xmmword_212160);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_3_1();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = InstallShortcutCATs.errorInstallShortcut(device:);
  uint64_t v5 = v0[2];
  return v7(v5, 0xD000000000000024, 0x8000000000224D80, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *unint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(InstallShortcutCATs.errorInstallShortcut(device:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    char v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t InstallShortcutCATs.launchApp(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)InstallShortcutCATs.launchApp(device:));
}

uint64_t InstallShortcutCATs.launchApp(device:)()
{
  unint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  v0[5] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_1_2(v2, (__n128)xmmword_212160);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_3_1();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = InstallShortcutCATs.launchApp(device:);
  uint64_t v5 = v0[2];
  return v7(v5, 0xD000000000000019, 0x8000000000224DB0, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *unint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(InstallShortcutCATs.launchApp(device:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    char v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7();
  }
}

uint64_t InstallShortcutCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return InstallShortcutCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t InstallShortcutCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v10;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t WorkflowRunnerCATPatternsExecutor.__deallocating_deinit()
{
  CATWrapper.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InstallShortcutCATs()
{
  uint64_t result = type metadata singleton initialization cache for InstallShortcutCATs;
  if (!type metadata singleton initialization cache for InstallShortcutCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for InstallShortcutCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for InstallShortcutCATs()
{
  return type metadata accessor for InstallShortcutCATs();
}

uint64_t OUTLINED_FUNCTION_1_2(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x656369766564;
  a1[2].n128_u64[1] = 0xE600000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_2_3(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  return swift_retain();
}

uint64_t LocationProvider.__allocating_init(aceServiceInvoker:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0x3FA999999999999ALL;
  outlined init with take of AceServiceInvokerAsync(a1, v2 + 24);
  return v2;
}

uint64_t LocationProvider.init(aceServiceInvoker:)(long long *a1)
{
  *(void *)(v1 + 16) = 0x3FA999999999999ALL;
  outlined init with take of AceServiceInvokerAsync(a1, v1 + 24);
  return v1;
}

uint64_t LocationProvider.getCurrentLocation()()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(LocationProvider.getCurrentLocation(), 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = [objc_allocWithZone((Class)SAGetRequestOrigin) init];
  v0[3] = v2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SAGetRequestOrigin.desiredAccuracy.setter(v3, v4, v2);
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = NSNumber.init(integerLiteral:)(300).super.super.isa;
  [v2 setMaxAge:isa];

  uint64_t v6 = [objc_allocWithZone((Class)NSNumber) initWithDouble:0.05];
  [v2 setSearchTimeout:v6];

  char v7 = v1[6];
  uint64_t v8 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v7);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[4] = v9;
  uint64_t v10 = type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  *uint64_t v9 = v0;
  v9[1] = LocationProvider.getCurrentLocation();
  return AceServiceInvokerAsync.submit<A>(_:)(v2, v7, v10, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  OUTLINED_FUNCTION_0_0();
  *(void *)(v2 + 40) = v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = LocationProvider.getCurrentLocation();
  }
  else {
    uint64_t v3 = LocationProvider.getCurrentLocation();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  void *v12;
  void *v13;
  uint8_t *v14;
  uint64_t (*v15)(id);
  uint64_t v17;

  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    uint64_t v3 = (void *)v0[5];
    uint64_t v4 = (void *)v0[3];
    uint64_t v5 = objc_allocWithZone((Class)SFLatLng);
    uint64_t v6 = v3;
    char v7 = [v5 init];
    [v2 latitude];
    objc_msgSend(v7, "setLat:");
    [v2 longitude];
    objc_msgSend(v7, "setLng:");
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.error.getter();
    os_log_type_t v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = (void *)v0[5];
    uint64_t v13 = (void *)v0[3];
    if (v11)
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl(&dword_0, v9, v10, "#LocationProvider could not convert result to SASetRequestOrigin", v14, 2u);
      swift_slowDealloc();
    }
    else
    {
    }
    char v7 = 0;
  }
  uint64_t v15 = (uint64_t (*)(id))v0[1];
  return v15(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(NSObject **)(v0 + 24);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_0, v2, v3, "#LocationProvider Could not get current location", v6, 2u);
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    uint64_t v5 = v2;
  }

  char v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7(0);
}

uint64_t LocationProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  return v0;
}

uint64_t LocationProvider.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for LocationProviding.getCurrentLocation() in conformance LocationProvider()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(**(void **)v0 + 104) + **(int **)(**(void **)v0 + 104));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for LocationProviding.getCurrentLocation() in conformance LocationProvider;
  return v4();
}

uint64_t protocol witness for LocationProviding.getCurrentLocation() in conformance LocationProvider(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

void outlined bridged method (mbnn) of @objc SAGetRequestOrigin.desiredAccuracy.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setDesiredAccuracy:v4];
}

uint64_t type metadata accessor for LocationProvider()
{
  return self;
}

uint64_t NSDateComponents.toRelativeLocalizedString(locale:)()
{
  uint64_t v35 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_2();
  uint64_t v34 = v0;
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_20_0();
  uint64_t v33 = v3 - v2;
  uint64_t v4 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_0_2();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_0_2();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_20_0();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v33 - v22;
  id v24 = [objc_allocWithZone((Class)NSDateFormatter) init];
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  [v24 setLocale:isa];

  [v24 setDateStyle:4];
  [v24 setDoesRelativeDateFormatting:1];
  static Calendar.current.getter();
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
  Calendar.date(from:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v11);
  uint64_t v26 = v35;
  outlined init with copy of Date?((uint64_t)v23, (uint64_t)v21);
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v26) == 1)
  {
    outlined destroy of Date?((uint64_t)v23);

    uint64_t v27 = 0;
    uint64_t v23 = v21;
  }
  else
  {
    uint64_t v29 = v33;
    uint64_t v28 = v34;
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v33, v21, v26);
    Class v30 = Date._bridgeToObjectiveC()().super.isa;
    id v31 = [v24 stringForObjectValue:v30];

    if (v31)
    {
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {

      uint64_t v27 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v26);
  }
  outlined destroy of Date?((uint64_t)v23);
  return v27;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.toContactQuery()()
{
  uint64_t v1 = ContactQuery.init()();
  (*(void (**)(uint64_t))(*(void *)v0 + 216))(v1);
  if (v2) {
    ContactQuery.namePrefix.setter();
  }
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3();
  v3();
  if (v4 || (OUTLINED_FUNCTION_0_3(), OUTLINED_FUNCTION_1_3(), v5(), v6)) {
    ContactQuery.givenName.setter();
  }
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3();
  v7();
  if (v8) {
    ContactQuery.middleName.setter();
  }
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3();
  v9();
  if (v10) {
    ContactQuery.familyName.setter();
  }
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3();
  v11();
  if (v12) {
    ContactQuery.nickname.setter();
  }
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_1_3();
  uint64_t result = v13();
  if (v15) {
    return ContactQuery.nameSuffix.setter();
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin8DocumentVG_SaySdGs5NeverOTg504_s18def80Plugin17TfIdfFuzzyMatcherC5match4term2inAA11MatchResultVyxGSgSS_SayxGtFSaySdGAA8H7VXEfU1_AF0lM8ComputerCTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104);
    uint64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v7 = *v5;
      swift_bridgeObjectRetain();
      uint64_t v8 = a2;
      uint64_t v9 = v12(v6, v7);
      swift_bridgeObjectRelease();
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v5 += 2;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v9;
      --v3;
      a2 = v8;
    }
    while (v3);
  }
  swift_release();
  return _swiftEmptyArrayStorage;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = a5;
  uint64_t v35 = a8;
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v33 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  id v46 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v12 = (char *)&v31 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(v15 - 8);
  uint64_t v37 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  id v32 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  uint64_t v49 = ContiguousArray.init()();
  uint64_t v38 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  uint64_t v42 = a6;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v40 = (void (**)(char *))(v39 + 2);
    id v41 = v14;
    ++v39;
    while (1)
    {
      uint64_t v23 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      id v24 = v12;
      uint64_t v25 = v12;
      uint64_t v26 = AssociatedTypeWitness;
      (*v40)(v24);
      v23(v48, 0);
      uint64_t v27 = v47;
      v44(v25, v46);
      if (v27) {
        break;
      }
      uint64_t v47 = 0;
      (*v39)(v25, v26);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v21;
      uint64_t v12 = v25;
      if (!v21)
      {
        uint64_t v28 = v36;
        uint64_t v29 = v37;
        Class v30 = v32;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v32, v19, v37);
        _expectEnd<A>(of:is:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v29);
        return v49;
      }
    }
    (*v39)(v25, v26);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v37);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v35, v46, v34);
  }
  return result;
}

void *TfIdfFuzzyMatcher.match(term:in:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v119 = *(void *)(*v3 + 80);
  uint64_t v8 = v119;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = __chkstk_darwin(TupleTypeMetadata2);
  v112 = (char *)v102 - v10;
  v106 = *(void (***)(char *, char *, uint64_t))(v119 - 8);
  __chkstk_darwin(v9);
  v116 = (char *)v102 - v11;
  uint64_t v117 = a3;
  v124 = (void *)a3;
  uint64_t v121 = v8;
  v103 = v3;
  uint64_t v113 = *(void *)(v7 + 88);
  uint64_t v122 = v113;
  uint64_t v12 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TfIdfFuzzyMatcher.match(term:in:), (uint64_t)v120, v12, (uint64_t)&type metadata for Document, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v14);
  type metadata accessor for TfIdfComputer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v104 = TfIdfComputer.init(documents:)();
  v111 = (double *)a1;
  unint64_t v115 = a2;
  Swift::String v16 = String.lowercased()();
  uint64_t countAndFlagsBits = v16._countAndFlagsBits;
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17)
  {
    uint64_t v18 = (uint64_t *)(v15 + 40);
    uint64_t v19 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v21 = *(v18 - 1);
      uint64_t v20 = *v18;
      uint64_t v22 = HIBYTE(*v18) & 0xF;
      if ((*v18 & 0x2000000000000000) == 0) {
        uint64_t v22 = v21 & 0xFFFFFFFFFFFFLL;
      }
      if (v22)
      {
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v124 = v19;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v19 = v124;
        }
        unint64_t v24 = v19[2];
        if (v24 >= v19[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v19 = v124;
        }
        v19[2] = v24 + 1;
        uint64_t v25 = &v19[2 * v24];
        v25[4] = v21;
        v25[5] = v20;
      }
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = v104;
  swift_retain();
  matched = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin8DocumentVG_SaySdGs5NeverOTg504_s18def80Plugin17TfIdfFuzzyMatcherC5match4term2inAA11MatchResultVyxGSgSS_SayxGtFSaySdGAA8H7VXEfU1_AF0lM8ComputerCTf1cn_n((uint64_t)v19, v26);
  swift_release();
  uint64_t v28 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v26 + 104))(countAndFlagsBits, v16._object);
  swift_bridgeObjectRelease();
  if (Array<A>.isNullVector.getter(v28))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_2();
    if (!v29) {
      goto LABEL_68;
    }
    goto LABEL_17;
  }
  uint64_t v35 = *(void *)(v28 + 16);
  if (v35)
  {
    uint64_t v36 = (double *)(v28 + 32);
    double v37 = 0.0;
    do
    {
      double v38 = *v36++;
      double v37 = v37 + v38 * v38;
      --v35;
    }
    while (v35);
  }
  else
  {
    double v37 = 0.0;
  }
  v102[1] = 0;
  uint64_t v39 = static Array._allocateUninitialized(_:)();
  v124 = (void *)v39;
  uint64_t v41 = matched[2];
  if (v41)
  {
    uint64_t v42 = matched;
    uint64_t v43 = 0;
    unint64_t v44 = *(void *)(v28 + 16);
    v102[0] = v42;
    uint64_t countAndFlagsBits = (uint64_t)(v42 + 4);
    v111 = (double *)(v28 + 32);
    uint64_t v109 = v113 + 32;
    v108 = (void (**)(char *, uint64_t))(v106 + 1);
    *(void *)&long long v40 = 134218242;
    long long v107 = v40;
    v106 += 4;
    v105 = (char *)&type metadata for Any + 8;
    double v45 = sqrt(v37);
    uint64_t v46 = v119;
    unint64_t v115 = v44;
    uint64_t v110 = v41;
    while (1)
    {
      uint64_t v47 = *(void *)(countAndFlagsBits + 8 * v43);
      if (v44 != *(void *)(v47 + 16))
      {
        OUTLINED_FUNCTION_8_2();
        if (!v29) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        __swift_project_value_buffer(v55, (uint64_t)static Logger.voiceCommands);
        v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v58 = 0;
          _os_log_impl(&dword_0, v56, v57, "[TfIdfFuzzyMatcher] mismatched vector sizes - this should not have happened. Please file a bug.", v58, 2u);
          OUTLINED_FUNCTION_7_0();
        }

        goto LABEL_49;
      }
      unint64_t v48 = *(void *)(v28 + 16);
      if (v48) {
        break;
      }
      double v50 = 0.0;
      double v59 = 0.0;
      if (v44) {
        goto LABEL_40;
      }
LABEL_42:
      OUTLINED_FUNCTION_8_2();
      if (!v29) {
        swift_once();
      }
      double v63 = v50 / (v45 * sqrt(v59));
      uint64_t v64 = type metadata accessor for Logger();
      __swift_project_value_buffer(v64, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc();
        v123 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v67 = v107;
        *(double *)(v67 + 4) = v63;
        *(_WORD *)(v67 + 12) = 2080;
        v68 = v116;
        Array.subscript.getter();
        uint64_t v69 = (*(uint64_t (**)(uint64_t))(v113 + 32))(v119);
        unint64_t v71 = v70;
        (*v108)(v68, v119);
        uint64_t v72 = v69;
        unint64_t v44 = v115;
        *(void *)(v67 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v71, (uint64_t *)&v123);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v65, v66, "[TfIdfFuzzyMatcher] score: %f, title: %s", (uint8_t *)v67, 0x16u);
        swift_arrayDestroy();
        uint64_t v41 = v110;
        OUTLINED_FUNCTION_7_0();
        uint64_t v46 = v119;
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      if (v63 > 0.15)
      {
        v73 = v116;
        Array.subscript.getter();
        uint64_t v74 = *(int *)(TupleTypeMetadata2 + 48);
        v75 = v112;
        v76 = v73;
        unint64_t v44 = v115;
        (*v106)(v112, v76, v46);
        *(double *)&v75[v74] = v63;
        type metadata accessor for Array();
        Array.append(_:)();
      }
LABEL_49:
      if (++v43 == v41)
      {
        swift_bridgeObjectRelease();
        uint64_t v77 = swift_bridgeObjectRelease();
        uint64_t v78 = (uint64_t)v124;
        goto LABEL_52;
      }
    }
    if (!v44)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      swift_once();
LABEL_17:
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.voiceCommands);
      unint64_t v31 = v115;
      swift_bridgeObjectRetain_n();
      id v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        v124 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315138;
        swift_bridgeObjectRetain();
        v123 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v111, v31, (uint64_t *)&v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v32, v33, "[TfIdfFuzzyMatcher] query %s produced a null vector", v34, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        goto LABEL_60;
      }

      swift_release();
      swift_bridgeObjectRelease_n();
      return 0;
    }
    if (v48 > v44) {
      goto LABEL_67;
    }
    uint64_t v49 = (double *)(v47 + 32);
    double v50 = 0.0;
    uint64_t v51 = v111;
    do
    {
      double v52 = *v51++;
      double v53 = v52;
      double v54 = *v49++;
      double v50 = v50 + v53 * v54;
      --v48;
    }
    while (v48);
LABEL_40:
    v60 = (double *)(v47 + 32);
    double v59 = 0.0;
    unint64_t v61 = v44;
    do
    {
      double v62 = *v60++;
      double v59 = v59 + v62 * v62;
      --v61;
    }
    while (v61);
    goto LABEL_42;
  }
  uint64_t v78 = v39;
  swift_bridgeObjectRelease();
  uint64_t v77 = swift_bridgeObjectRelease();
  uint64_t v46 = v119;
LABEL_52:
  v123 = (void *)v78;
  __chkstk_darwin(v77);
  uint64_t v79 = v113;
  v102[-2] = v46;
  v102[-1] = v79;
  uint64_t v80 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  uint64_t v81 = swift_getWitnessTable();
  uint64_t v83 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #4 in TfIdfFuzzyMatcher.match(term:in:), (uint64_t)&v102[-4], v80, (uint64_t)&type metadata for Double, (uint64_t)&type metadata for Never, v81, (uint64_t)&protocol witness table for Never, v82);
  swift_bridgeObjectRelease();
  uint64_t v84 = specialized Sequence<>.max()(v83);
  char v86 = v85;
  uint64_t v87 = swift_bridgeObjectRelease();
  if (v86)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_2();
    if (!v29) {
      swift_once();
    }
    uint64_t v94 = type metadata accessor for Logger();
    __swift_project_value_buffer(v94, (uint64_t)static Logger.voiceCommands);
    id v32 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v95))
    {
      v96 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v96 = 0;
      _os_log_impl(&dword_0, v32, v95, "[TfIdfFuzzyMatcher] empty results after running matcher", v96, 2u);
LABEL_60:
      OUTLINED_FUNCTION_7_0();
    }

    swift_release();
    return 0;
  }
  else
  {
    if ((v84 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      swift_release();
      goto LABEL_63;
    }
    v123 = v124;
    __chkstk_darwin(v87);
    v102[-4] = v46;
    v102[-3] = v79;
    v102[-2] = v84;
    swift_bridgeObjectRetain();
    uint64_t v89 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #5 in TfIdfFuzzyMatcher.match(term:in:), (uint64_t)&v102[-6], v80, TupleTypeMetadata2, (uint64_t)&type metadata for Never, v81, (uint64_t)&protocol witness table for Never, v88);
    swift_bridgeObjectRelease();
    v123 = (void *)v89;
    swift_getWitnessTable();
    uint64_t v90 = _ArrayProtocol.filter(_:)();
    uint64_t v91 = swift_bridgeObjectRelease();
    v124 = (void *)v90;
    v123 = (void *)v90;
    __chkstk_darwin(v91);
    v102[-2] = v46;
    v102[-1] = v79;
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v92 = Sequence.sorted(by:)();
    swift_bridgeObjectRelease();
    v123 = (void *)v92;
    uint64_t v93 = Collection.isEmpty.getter();
    if (v93)
    {
      swift_bridgeObjectRelease();
      swift_release();
LABEL_63:
      swift_bridgeObjectRelease();
      return 0;
    }
    v123 = (void *)v92;
    __chkstk_darwin(v93);
    v102[-2] = v46;
    v102[-1] = v79;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v99 = __chkstk_darwin(KeyPath);
    v102[-2] = v79;
    v102[-1] = v99;
    uint64_t v101 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #4 in TfIdfFuzzyMatcher.match(term:in:), (uint64_t)&v102[-4], v80, v46, (uint64_t)&type metadata for Never, v81, (uint64_t)&protocol witness table for Never, v100);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)v101).items._rawValue;
  }
}

uint64_t closure #1 in TfIdfFuzzyMatcher.match(term:in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, Swift::String *a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 8))(&v6, a1, a2);
  outlined init with take of String?((uint64_t)&v7, (uint64_t)v10, &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)v10);
  outlined init with take of String?((uint64_t)v8, (uint64_t)&v11, &demangling cache variable for type metadata for INImage?);
  outlined release of INImage?(&v11);
  uint64_t v9 = v8[1];
  outlined release of [String]((uint64_t)&v9);
  Swift::String v4 = String.lowercased()();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4;
  return result;
}

uint64_t closure #4 in TfIdfFuzzyMatcher.match(term:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = __chkstk_darwin(TupleTypeMetadata2 - 8);
  uint64_t v9 = (char *)v14 - v8;
  uint64_t v10 = *(int *)(v7 + 56);
  uint64_t v11 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v14 - v8, a1, a2);
  uint64_t v12 = *(void *)(a1 + v10);
  *(void *)&v9[v10] = v12;
  *a3 = v12;
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, a2);
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    Swift::String v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

double closure #5 in TfIdfFuzzyMatcher.match(term:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = __chkstk_darwin(TupleTypeMetadata2 - 8);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *(int *)(v9 + 56);
  uint64_t v13 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v16 - v10, a1, a2);
  double v14 = *(double *)(a1 + v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v11, a2);
  double result = v14 / a4;
  *(double *)(a3 + v12) = v14 / a4;
  return result;
}

BOOL closure #6 in TfIdfFuzzyMatcher.match(term:in:)(uint64_t a1)
{
  return *(double *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48)) > 0.75;
}

BOOL closure #7 in TfIdfFuzzyMatcher.match(term:in:)(uint64_t a1, uint64_t a2)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return *(double *)(a2 + *(int *)(TupleTypeMetadata2 + 48)) < *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t implicit closure #4 in TfIdfFuzzyMatcher.match(term:in:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v18 = a3;
  uint64_t v4 = *(void *)(*a2 + class metadata base offset for KeyPath);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(int *)(v4 + 48);
  uint64_t v13 = *(void *)(v12 + 8);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v18 - v9, a1, v13);
  uint64_t v15 = *(void *)(a1 + v11);
  *(void *)&v10[v11] = v15;
  uint64_t v16 = *(int *)(v4 + 48);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v8, v10, v13);
  *(void *)&v8[v16] = v15;
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t IntroduceCustomIntentCatTemplater.deinit()
{
  return v0;
}

uint64_t TfIdfFuzzyMatcher.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

double TfIdfFuzzyMatcher.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  double result = 0.15;
  *(_OWORD *)(v0 + 16) = xmmword_2124A0;
  return result;
}

double TfIdfFuzzyMatcher.init()()
{
  double result = 0.15;
  *(_OWORD *)(v0 + 16) = xmmword_2124A0;
  return result;
}

uint64_t protocol witness for StringMatching.match(term:in:) in conformance TfIdfFuzzyMatcher<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t partial apply for closure #1 in TfIdfFuzzyMatcher.match(term:in:)@<X0>(Swift::String *a1@<X8>)
{
  return closure #1 in TfIdfFuzzyMatcher.match(term:in:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

uint64_t partial apply for closure #4 in TfIdfFuzzyMatcher.match(term:in:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #4 in TfIdfFuzzyMatcher.match(term:in:)(a1, *(void *)(v2 + 16), a2);
}

double partial apply for closure #5 in TfIdfFuzzyMatcher.match(term:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #5 in TfIdfFuzzyMatcher.match(term:in:)(a1, *(void *)(v2 + 16), a2, *(double *)(v2 + 32));
}

BOOL partial apply for closure #6 in TfIdfFuzzyMatcher.match(term:in:)(uint64_t a1)
{
  return closure #6 in TfIdfFuzzyMatcher.match(term:in:)(a1);
}

BOOL partial apply for closure #7 in TfIdfFuzzyMatcher.match(term:in:)(uint64_t a1, uint64_t a2)
{
  return closure #7 in TfIdfFuzzyMatcher.match(term:in:)(a1, a2);
}

uint64_t partial apply for implicit closure #4 in TfIdfFuzzyMatcher.match(term:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return implicit closure #4 in TfIdfFuzzyMatcher.match(term:in:)(a1, *(void **)(v2 + 24), a2);
}

uint64_t associated type witness table accessor for StringMatching.ItemType : DisambiguationItemProtocol in TfIdfFuzzyMatcher<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t type metadata instantiation function for TfIdfFuzzyMatcher()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for TfIdfFuzzyMatcher()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for TfIdfFuzzyMatcher()
{
  return __swift_instantiateGenericMetadata();
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3)
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, (uint64_t (*)(void))&type metadata accessor for UsoIdentifier, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>, (uint64_t (*)(void))&type metadata accessor for DisplayHint, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SpeakableString>, (uint64_t (*)(void))&type metadata accessor for SpeakableString, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

void *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  const void *v9;
  size_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_0_4();
  if (v5)
  {
    OUTLINED_FUNCTION_2_4();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_6_2();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  OUTLINED_FUNCTION_4_1();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    uint64_t v9 = (const void *)swift_allocObject();
    uint64_t v10 = _swift_stdlib_malloc_size(v9);
    OUTLINED_FUNCTION_7_3((uint64_t)(v10 - 32) / 16);
  }
  uint64_t v11 = OUTLINED_FUNCTION_3_2();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  const void *v9;
  size_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_0_4();
  if (v5)
  {
    OUTLINED_FUNCTION_2_4();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_6_2();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  OUTLINED_FUNCTION_4_1();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    uint64_t v9 = (const void *)swift_allocObject();
    uint64_t v10 = _swift_stdlib_malloc_size(v9);
    OUTLINED_FUNCTION_7_3((uint64_t)(v10 - 32) / 8);
  }
  uint64_t v11 = OUTLINED_FUNCTION_3_2();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  const void *v9;
  size_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_0_4();
  if (v5)
  {
    OUTLINED_FUNCTION_2_4();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_6_2();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  OUTLINED_FUNCTION_4_1();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    uint64_t v9 = (const void *)swift_allocObject();
    uint64_t v10 = _swift_stdlib_malloc_size(v9);
    OUTLINED_FUNCTION_7_3((uint64_t)(v10 - 32) / 56);
  }
  uint64_t v11 = OUTLINED_FUNCTION_3_2();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  const void *v9;
  size_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_0_4();
  if (v5)
  {
    OUTLINED_FUNCTION_2_4();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_6_2();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  OUTLINED_FUNCTION_4_1();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    uint64_t v9 = (const void *)swift_allocObject();
    uint64_t v10 = _swift_stdlib_malloc_size(v9);
    OUTLINED_FUNCTION_7_3((uint64_t)(v10 - 32) / 24);
  }
  uint64_t v11 = OUTLINED_FUNCTION_3_2();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DisambiguationItemProtocol>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_release();
  return v10;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(uint64_t, uint64_t, char *), void (*a8)(uint64_t, uint64_t, char *))
{
  if (a3)
  {
    OUTLINED_FUNCTION_2_4();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_6_2();
      if (v14)
      {
LABEL_24:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v18 = *(void *)(a6(0) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = (void *)swift_allocObject();
  size_t v22 = _swift_stdlib_malloc_size(v21);
  if (!v19)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v22 - v20 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_23;
  }
  long long v21[2] = v16;
  v21[3] = 2 * ((uint64_t)(v22 - v20) / v19);
LABEL_18:
  uint64_t v24 = *(void *)(a6(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = (char *)v21 + v25;
  uint64_t v27 = a4 + v25;
  if (a1)
  {
    a7(v27, v16, v26);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a8(v27, v16, v26);
  }
  swift_release();
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CustomIntentDisambiguationItem>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)();
  }
  swift_release();
  return v10;
}

uint64_t outlined release of String?(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id *outlined release of INImage?(id *a1)
{
  return a1;
}

uint64_t outlined release of [String](uint64_t a1)
{
  return a1;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return v0 + 32;
}

void OUTLINED_FUNCTION_7_3(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * a1;
}

uint64_t LNValueType.executeCommonVoiceCommandTaskBuilder.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(v0);
  if (!v6)
  {
    outlined consume of VoiceCommandIntentValueType((uint64_t)v4, v5, 0);
LABEL_5:
    type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
    OUTLINED_FUNCTION_0_5();
    uint64_t v11 = static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)();
    goto LABEL_6;
  }
  if (v6 == 1)
  {
    type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
    uint64_t v7 = OUTLINED_FUNCTION_1_5();
    uint64_t v11 = static UsoTaskBuilder_execute_common_VoiceCommand.unitTaskBuilder(value:symbol:unitName:)(v7, v8, v9, v10, 0, 0);
LABEL_6:
    uint64_t v12 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_211C70;
    *(void *)(v13 + 32) = v12;
    uint64_t v32 = v13;
    specialized Array._endMutation()();
    uint64_t v14 = type metadata accessor for UsoBuilderOptions();
    __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v14);
    swift_retain();
    static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
    swift_bridgeObjectRelease();
    outlined destroy of UsoBuilderOptions?((uint64_t)v3);
    uint64_t v15 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
    unint64_t v17 = v16;
    swift_release();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v19, v20, "Building nlv4 prompt:\n%s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return v12;
  }
  switch((unint64_t)v4)
  {
    case 2uLL:
    case 0xCuLL:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl(&dword_0, v24, v25, "Attempting to make nlv4 prompt for unsupported value type", v26, 2u);
        swift_slowDealloc();
      }

      uint64_t v12 = 0;
      break;
    case 3uLL:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      uint64_t v27 = OUTLINED_FUNCTION_1_5();
      uint64_t v11 = static UsoTaskBuilder_execute_common_VoiceCommand.currencyTaskBuilder(value:currencyCode:)(v27, v28, v29, v30);
      goto LABEL_6;
    case 4uLL:
    case 5uLL:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      uint64_t v11 = static UsoTaskBuilder_execute_common_VoiceCommand.dateTaskBuilder()();
      goto LABEL_6;
    case 6uLL:
    case 8uLL:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      uint64_t v11 = static UsoTaskBuilder_execute_common_VoiceCommand.numberTaskBuilder()();
      goto LABEL_6;
    case 7uLL:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      uint64_t v11 = static UsoTaskBuilder_execute_common_VoiceCommand.entityTaskBuilder()();
      goto LABEL_6;
    case 9uLL:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      OUTLINED_FUNCTION_0_5();
      uint64_t v11 = static UsoTaskBuilder_execute_common_VoiceCommand.personTaskBuilder(value:)();
      goto LABEL_6;
    case 0xAuLL:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      uint64_t v11 = static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()();
      goto LABEL_6;
    case 0xDuLL:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      OUTLINED_FUNCTION_0_5();
      uint64_t v11 = static UsoTaskBuilder_execute_common_VoiceCommand.urlTaskBuilder(value:)();
      goto LABEL_6;
    default:
      goto LABEL_5;
  }
  return v12;
}

uint64_t outlined destroy of UsoBuilderOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of VoiceCommandIntentValueType(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  return 0;
}

id AutoShortcutProvider.provider.getter()
{
  return *(id *)(v0 + 16);
}

id ShortcutDoneButton.customIntentResponse.getter()
{
  return *(id *)(v0 + 24);
}

id WFChooseFromListDisambiguationItem.item.getter()
{
  return *(id *)(v0 + 48);
}

void *CustomIntentStateAttachment.customIntentResponse.getter()
{
  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = v1;
  return v1;
}

void *ShortcutsLinkPromptForValueFlowStrategy.valueType.getter()
{
  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = v1;
  return v1;
}

uint64_t AutoShortcutDialogTemplating.linkActionPatterns.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppShortcutInvoking(v1 + 72, a1);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.serviceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppShortcutInvoking(v1 + 112, a1);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.__allocating_init(action:needsValueRequest:appBundleId:actionMetadata:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:serviceInvoker:)(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject();
  ShortcutsLinkPromptForValueFlowStrategy.init(action:needsValueRequest:appBundleId:actionMetadata:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:serviceInvoker:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

void *ShortcutsLinkPromptForValueFlowStrategy.init(action:needsValueRequest:appBundleId:actionMetadata:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:serviceInvoker:)(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v17 = type metadata accessor for CATOption();
  __chkstk_darwin(v17 - 8);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  id v18 = a1;
  id v19 = a2;
  id v20 = a5;
  id v21 = LNActionMetadata.firstParameterMetadata(from:)(v19);
  v10[7] = v21;
  if (v21) {
    id v21 = [v21 valueType];
  }
  v10[8] = v21;
  outlined init with copy of AppShortcutInvoking(a6, (uint64_t)(v10 + 9));
  outlined init with copy of AppShortcutInvoking(a9, (uint64_t)(v10 + 14));
  outlined init with copy of AppShortcutInvoking(a6, (uint64_t)v29);
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v22 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v23 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v24 = CATWrapper.__allocating_init(options:globals:)();

  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  type metadata accessor for LinkActionDialogTemplating();
  os_log_type_t v25 = (void *)swift_allocObject();
  v10[19] = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)(v29, a7, a8, v22, v23, v24, v25);
  return v10;
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v38 = v5;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  double v37 = (char *)&v34 - v10;
  uint64_t v11 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_2();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
  id v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v39 = a1;
  v18(v16, a1, v11);
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v36 = v9;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v41 = OUTLINED_FUNCTION_22_3();
    uint64_t v34 = a2;
    uint64_t v35 = v4;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v23 = Input.description.getter();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v41);
    uint64_t v4 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_3();
    v25();
    _os_log_impl(&dword_0, v19, v20, "#ShortcutsLinkPromptForValueFlowStrategy actionForInput: %s", v22, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
  }

  uint64_t v26 = v37;
  Input.parse.getter();
  char v27 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  uint64_t v28 = v38;
  uint64_t v29 = *(void (**)(char *, uint64_t))(v38 + 8);
  v29(v26, v4);
  switch(v27)
  {
    case 2:
      swift_bridgeObjectRelease();
      return static ActionForInput.ignore()();
    case 3:
      goto LABEL_8;
    default:
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v30) {
        return static ActionForInput.ignore()();
      }
LABEL_8:
      uint64_t v31 = v36;
      Input.parse.getter();
      int v32 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v31, v4);
      if (v32 == enum case for Parse.NLv3IntentOnly(_:)
        || v32 == enum case for Parse.uso(_:) && (SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) != 0)
      {
        static ActionForInput.handle()();
      }
      else
      {
        static ActionForInput.ignore()();
      }
      return ((uint64_t (*)(char *, uint64_t))v29)(v31, v4);
  }
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[9] = v2;
  v1[10] = v0;
  uint64_t v3 = type metadata accessor for USOParse();
  v1[11] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[12] = v4;
  v1[13] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for NLIntent();
  v1[14] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[15] = v6;
  v1[16] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for Parse();
  v1[17] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[18] = v8;
  v1[19] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for Input();
  v1[20] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[21] = v10;
  v1[22] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  uint64_t v2 = v0 + 19;
  uint64_t v1 = v0[19];
  uint64_t v3 = v0 + 18;
  uint64_t v4 = v0[18];
  uint64_t v6 = v0 + 17;
  uint64_t v5 = v0[17];
  Input.parse.getter();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v1, v5);
  if (v7 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v8 = v0[19];
    uint64_t v9 = v0[16];
    uint64_t v10 = v0[14];
    uint64_t v11 = v0[15];
    (*(void (**)(uint64_t, void))(v0[18] + 96))(v8, v0[17]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9, v8, v10);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[25] = v12;
    char *v12 = v0;
    v12[1] = ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:);
    OUTLINED_FUNCTION_6_1();
    return ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:)(v13);
  }
  else
  {
    if (v7 != enum case for Parse.uso(_:)
      || (uint64_t v2 = v0 + 13,
          uint64_t v3 = v0 + 12,
          uint64_t v6 = v0 + 11,
          (*(void (**)(void, void))(v0[18] + 96))(v0[19], v0[17]),
          unint64_t v16 = OUTLINED_FUNCTION_30_0(),
          v17(v16),
          (SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) == 0))
    {
      (*(void (**)(void, void))(*v3 + 8))(*v2, *v6);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_9_1();
      OUTLINED_FUNCTION_6_1();
      __asm { BRAA            X2, X16 }
    }
    id v18 = (void *)swift_task_alloc();
    v0[27] = v18;
    *id v18 = v0;
    v18[1] = ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:);
    OUTLINED_FUNCTION_6_1();
    return ShortcutsLinkPromptForValueFlowStrategy.parse(usoParse:)(v19);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  v2[2] = v1;
  v2[3] = v4;
  v2[4] = v0;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 208) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v0 = OUTLINED_FUNCTION_10_3();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_23_1();
  return v4(v2, v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  v2[5] = v1;
  v2[6] = v4;
  v2[7] = v0;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 224) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v0 = OUTLINED_FUNCTION_10_3();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_23_1();
  return v4(v2, v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v0 = OUTLINED_FUNCTION_10_3();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v0 = OUTLINED_FUNCTION_10_3();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_29_0();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v27 = v24[9];
  uint64_t v29 = v24[21];
  uint64_t v28 = v24[22];
  uint64_t v30 = v24[20];
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v27, v30);
  int v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    a13 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v34 = 136315138;
    lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    v24[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = OUTLINED_FUNCTION_32_1();
    v38(v37);
    _os_log_impl(&dword_0, v32, v33, "#ShortcutsLinkPromptForValueFlowStrategy parseValueResponse from: %s", v34, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v39 = OUTLINED_FUNCTION_32_1();
    v40(v39);
  }

  id v41 = [*(id *)(v24[10] + 48) systemProtocols];
  type metadata accessor for LNSystemProtocol();
  v24[23] = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v42 = (void *)swift_task_alloc();
  v24[24] = v42;
  void *v42 = v24;
  v42[1] = ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:);
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_18_2();
  return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v43, v44, v45);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Locale();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  type metadata accessor for VoiceCommandsNLIntent(0);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:), 0, 0);
}

void ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:)()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = (void *)v1[8];
  v0[9] = v2;
  if (v2)
  {
    uint64_t v3 = (void *)v1[7];
    v0[10] = v3;
    if (v3)
    {
      type metadata accessor for NLIntent();
      OUTLINED_FUNCTION_40();
      uint64_t v4 = OUTLINED_FUNCTION_30_0();
      v5(v4);
      __swift_project_boxed_opaque_existential_1(v1 + 9, v1[12]);
      id v6 = v2;
      id v7 = v3;
      dispatch thunk of DeviceState.siriLocale.getter();
      type metadata accessor for ContactResolver();
      swift_allocObject();
      v0[11] = ContactResolver.init()();
      uint64_t v8 = (void *)swift_task_alloc();
      v0[12] = v8;
      *uint64_t v8 = v0;
      v8[1] = ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:);
      OUTLINED_FUNCTION_6_1();
      __asm { BR              X5 }
    }
    uint64_t v17 = one-time initialization token for voiceCommands;
    id v18 = v2;
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v12 = (void *)OUTLINED_FUNCTION_26_1(v19, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    BOOL v21 = OUTLINED_FUNCTION_5_3(v20);
    uint64_t v22 = (void *)v0[9];
    if (v21)
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v23);
      OUTLINED_FUNCTION_23_0(&dword_0, v24, v25, "#ShortcutsLinkPromptForValueFlowStrategy cannot get LNValue from NLIntent");
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      uint64_t v12 = v22;
    }
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = (void *)OUTLINED_FUNCTION_26_1(v11, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v14);
      OUTLINED_FUNCTION_23_0(&dword_0, v15, v16, "#ShortcutsLinkPromptForFlowStrategy parseValueResponse has nil valueType");
      OUTLINED_FUNCTION_7_0();
    }
  }

  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_6_1();
  __asm { BRAA            X2, X16 }
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:)()
{
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_5_0();
  *id v6 = v5;
  *(void *)(v8 + 104) = v7;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_20_3();
  v9();
  outlined destroy of VoiceCommandsNLIntent(v4);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parse(nlIntent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_29_0();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  uint64_t v27 = *(void **)(v24 + 104);
  if (v27)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
    id v29 = v27;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    os_log_type_t v33 = *(void **)(v24 + 72);
    uint64_t v34 = *(void **)(v24 + 80);
    if (v32)
    {
      a10 = v24 + 16;
      a12 = *(void **)(v24 + 72);
      uint64_t v35 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      a11 = v34;
      a13 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v35 = 136315138;
      a9 = v35 + 4;
      id v36 = [v29 debugDescription];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      *(void *)(v24 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v30, v31, "#ShortcutsLinkPromptForFlowStrategy parsed value: %s", v35, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
  }
  else
  {

    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    id v41 = (void *)OUTLINED_FUNCTION_26_1(v40, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    BOOL v43 = OUTLINED_FUNCTION_5_3(v42);
    uint64_t v44 = *(void **)(v24 + 72);
    if (v43)
    {
      uint64_t v45 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v45);
      OUTLINED_FUNCTION_23_0(&dword_0, v46, v47, "#ShortcutsLinkPromptForValueFlowStrategy cannot get LNValue from NLIntent");
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_18_2();
  return v50(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parse(usoParse:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Locale();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(ShortcutsLinkPromptForValueFlowStrategy.parse(usoParse:), 0, 0);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.parse(usoParse:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = (void *)v1[8];
  v0[7] = v2;
  if (v2)
  {
    uint64_t v3 = (void *)v1[7];
    v0[8] = v3;
    if (v3)
    {
      __swift_project_boxed_opaque_existential_1(v1 + 9, v1[12]);
      v2;
      id v4 = v3;
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v5 = (void *)swift_task_alloc();
      v0[9] = v5;
      *uint64_t v5 = v0;
      v5[1] = ShortcutsLinkPromptForValueFlowStrategy.parse(usoParse:);
      uint64_t v6 = v0[6];
      uint64_t v7 = v0[2];
      return LNValueType.getLNValue(usoParse:parameterMetadata:locale:)(v7, (uint64_t)v4, v6);
    }
    uint64_t v15 = one-time initialization token for voiceCommands;
    id v16 = v2;
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    uint64_t v10 = (void *)OUTLINED_FUNCTION_26_1(v17, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    BOOL v19 = OUTLINED_FUNCTION_5_3(v18);
    os_log_type_t v20 = (void *)v0[7];
    if (v19)
    {
      BOOL v21 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v21);
      OUTLINED_FUNCTION_23_0(&dword_0, v22, v23, "#ShortcutsLinkPromptForValueFlowStrategy cannot get LNValue from USO Parse");
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      uint64_t v10 = v20;
    }
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = (void *)OUTLINED_FUNCTION_26_1(v9, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v11))
    {
      uint64_t v12 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v12);
      OUTLINED_FUNCTION_23_0(&dword_0, v13, v14, "#ShortcutsLinkPromptForFlowStrategy parseValueResponse has nil valueType");
      OUTLINED_FUNCTION_7_0();
    }
  }

  swift_task_dealloc();
  uint64_t v24 = OUTLINED_FUNCTION_9_1();
  return v25(v24);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  id v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v7 + 80) = v6;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_20_3();
  v8();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 80);

  if (v1)
  {
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    uint64_t v3 = (void *)OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
    id v4 = static os_log_type_t.debug.getter();
    uint64_t v5 = OUTLINED_FUNCTION_5_3(v4);
    uint64_t v6 = *(void **)(v0 + 56);
    if (v5)
    {
      uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v7);
      OUTLINED_FUNCTION_23_0(&dword_0, v8, v9, "#ShortcutsLinkPromptForValueFlowStrategy cannot get LNValue from USO Parse");
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
  }
  swift_task_dealloc();
  uint64_t v10 = OUTLINED_FUNCTION_39_0();
  return v11(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  BOOL v4;
  void *v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_26_1(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = static os_log_type_t.debug.getter();
  id v4 = OUTLINED_FUNCTION_5_3(v3);
  uint64_t v5 = *(void **)(v0 + 56);
  if (v4)
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v6);
    OUTLINED_FUNCTION_23_0(&dword_0, v7, v8, "#ShortcutsLinkPromptForValueFlowStrategy cannot get LNValue from USO Parse");
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    uint64_t v2 = v5;
  }

  swift_task_dealloc();
  uint64_t v9 = OUTLINED_FUNCTION_9_1();
  return v10(v9);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_9_0();
  v1[22] = v2;
  v1[23] = v0;
  uint64_t v3 = type metadata accessor for DialogPhase();
  v1[24] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[25] = v4;
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v1[28] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[29] = v6;
  v1[30] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[31] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[32] = v8;
  v1[33] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  int EnumTagSinglePayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  char v32;
  void (*v33)(void);
  void *v34;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;

  id v41 = v0;
  uint64_t v1 = *(void **)(v0[23] + 56);
  if (v1 && (uint64_t v2 = [v1 title]) != 0)
  {
    uint64_t v3 = v2;
    uint64_t v4 = [self sharedPreferences];
    outlined bridged method (ob) of @objc AFPreferences.languageCode()(v4);
    if (v5)
    {
      uint64_t v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v9 = [v3 localizedStringForLocaleIdentifier:v6];

    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v10;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v11 = v0[37];
  uint64_t v12 = v0[23];
  type metadata accessor for ShortcutsLinkNLContextProvider();
  swift_initStackObject();
  ShortcutsLinkNLContextProvider.makeContextForNeedsValue(valueType:)(*(void **)(v12 + 64), v11);
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v11, 0, 1, v13);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  v0[38] = __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = OUTLINED_FUNCTION_30_0();
  outlined init with copy of NLContextUpdate?(v15, v16);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  os_log_type_t v20 = v0[36];
  if (!v19)
  {
    outlined destroy of AutoShortcutInvocation?(v0[36], &demangling cache variable for type metadata for NLContextUpdate?);

    if (v8) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  unint64_t v39 = v0 + 21;
  BOOL v21 = v0[35];
  uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_25_2();
  uint64_t v40 = OUTLINED_FUNCTION_22_3();
  *(_DWORD *)uint64_t v22 = 136315138;
  outlined init with copy of NLContextUpdate?(v20, v21);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v21, 1, v13);
  uint64_t v24 = v0[35];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[35], &demangling cache variable for type metadata for NLContextUpdate?);
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v25 = NLContextUpdate.nluSystemDialogActs.getter();
    OUTLINED_FUNCTION_40();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v13);
  }
  uint64_t v27 = v0[36];
  v0[20] = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_SystemDialogAct]?);
  uint64_t v28 = String.init<A>(describing:)();
  v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v40);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of AutoShortcutInvocation?(v27, &demangling cache variable for type metadata for NLContextUpdate?);
  _os_log_impl(&dword_0, v17, v18, "#ShortcutsLinkPromptForValueFlowStrategy make prompt for value: %s", v22, 0xCu);
  swift_arrayDestroy();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_7_0();

  if (!v8)
  {
LABEL_17:
    uint64_t v30 = objc_msgSend(*(id *)(v0[23] + 24), "parameterName", v39);
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v31;
  }
LABEL_18:
  v0[39] = v8;
  (*(void (**)(void, void, void))(v0[32] + 104))(v0[33], enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v0[31]);
  BOOL v32 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_20_3();
  v33();
  if (v32)
  {
    v0[40] = [*(id *)(v0[23] + 24) dialog];
    uint64_t v34 = (void *)swift_task_alloc();
    v0[41] = v34;
    *uint64_t v34 = v0;
    v34[1] = ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue();
    return LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:)();
  }
  else
  {
    id v36 = (void *)swift_task_alloc();
    v0[47] = v36;
    *id v36 = v0;
    v36[1] = ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue();
    uint64_t v37 = v0[37];
    unint64_t v38 = v0[22];
    return ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:)(v38, v7, v8, v37);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 336) = v7;
  *(void *)(v8 + 344) = v0;
  swift_task_dealloc();
  uint64_t v9 = *(void **)(v2 + 320);
  if (v0)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  long long *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  BOOL v21 = v0;
  uint64_t v1 = (long long *)(v0 + 7);
  outlined init with copy of AppShortcutInvoking((uint64_t)(v0 + 7), (uint64_t)(v0 + 12));
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v18 = v0[30];
    BOOL v19 = v0[37];
    uint64_t v15 = v0[29];
    id v16 = (void *)v0[42];
    uint64_t v17 = v0[28];
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    os_log_type_t v20 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v4 = 136315138;
    outlined init with copy of AppShortcutInvoking((uint64_t)(v0 + 12), (uint64_t)(v0 + 2));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
    uint64_t v5 = String.init<A>(describing:)();
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v20);
    uint64_t v1 = (long long *)(v0 + 7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
    _os_log_impl(&dword_0, v2, v3, "#ShortcutsLinkPromptForValueFlowStrategy makePromptForValue; output: %s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v17);
    uint64_t v7 = v19;
  }
  else
  {
    uint64_t v8 = (void *)v0[42];
    uint64_t v9 = v0[37];
    uint64_t v11 = v0[29];
    uint64_t v10 = v0[30];
    uint64_t v12 = v0[28];

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    uint64_t v7 = v9;
  }
  outlined destroy of AutoShortcutInvocation?(v7, &demangling cache variable for type metadata for NLContextUpdate?);
  outlined init with take of AceServiceInvokerAsync(v1, v0[22]);
  OUTLINED_FUNCTION_27_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v13();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 384) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_29_0();
  uint64_t v17 = v16;
  unint64_t v38 = (void *)v16[42];
  unint64_t v39 = v16 + 7;
  uint64_t v36 = v16[37];
  uint64_t v18 = v16[34];
  uint64_t v20 = v16[26];
  uint64_t v19 = v16[27];
  uint64_t v22 = v16[24];
  uint64_t v21 = v16[25];
  static DialogPhase.clarification.getter();
  id v23 = [v38 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v19, v22);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v22);
  outlined init with copy of NLContextUpdate?(v36, v18);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v16[44] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_211C70;
  *(void *)(v24 + 32) = v38;
  uint64_t v40 = v24;
  specialized Array._endMutation()();
  v16[45] = v40;
  uint64_t v37 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
  id v25 = v38;
  uint64_t v26 = (void *)swift_task_alloc();
  v17[46] = v26;
  *uint64_t v26 = v17;
  v26[1] = ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue();
  OUTLINED_FUNCTION_18_2();
  return v30(v27, v28, v29, v30, v31, v32, v33, v34, a9, v37, v38, v39, v40, a14, a15, a16);
}

void ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue()()
{
  outlined destroy of AutoShortcutInvocation?(*(void *)(v0 + 296), &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_27_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_6_1();
  __asm { BRAA            X1, X16 }
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_24_1();
  outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_24_1();
  outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:), 0, 0);
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:)()
{
  OUTLINED_FUNCTION_14_0();
  v0[15] = [*(id *)(v0[11] + 24) dialog];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  void *v1 = v0;
  v1[1] = ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:);
  return LinkActionDialogTemplating.makeParameterPromptDialog_preRFv2(parameterName:customPrompt:actionMetadata:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (!v0) {

  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue_preRFv2(parameterName:nlContextUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  uint64_t v14 = *(void *)(v12 + 104);
  uint64_t v13 = *(void *)(v12 + 112);
  uint64_t v15 = *(void *)(v12 + 96);
  uint64_t v16 = *(uint64_t **)(v12 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v12 + 88) + 72), *(void *)(*(void *)(v12 + 88) + 96));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v17 = type metadata accessor for AceOutput();
  *(_OWORD *)(v12 + 32) = 0u;
  *(void *)(v12 + 48) = 0;
  *(_OWORD *)(v12 + 16) = 0u;
  v16[3] = v17;
  v16[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v16);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of AutoShortcutInvocation?(v12 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_28_0();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, v12 + 16, a10, a11, a12);
}

id *ShortcutsLinkPromptForValueFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 9));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 14));
  swift_release();
  return v0;
}

uint64_t ShortcutsLinkPromptForValueFlowStrategy.__deallocating_deinit()
{
  ShortcutsLinkPromptForValueFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance ShortcutsLinkPromptForValueFlowStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ShortcutsLinkPromptForValueFlowStrategy.actionForInput(_:)(a1, a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShortcutsLinkPromptForValueFlowStrategy(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ShortcutsLinkPromptForValueFlowStrategy.parseValueResponse(input:)();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShortcutsLinkPromptForValueFlowStrategy()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v5 + 16) = v3;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance ShortcutsLinkPromptForValueFlowStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ShortcutsLinkPromptForValueFlowStrategy.makePromptForValue()();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence() in conformance ShortcutsLinkPromptForValueFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, v7, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkPromptForValueFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeErrorResponse(_:) in conformance ShortcutsLinkPromptForValueFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForValueFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, v9, a4);
}

uint64_t outlined bridged method (ob) of @objc AFPreferences.languageCode()(void *a1)
{
  id v2 = [a1 languageCode];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void *specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[14] = type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  a7[15] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  a7[11] = a6;
  outlined init with take of AceServiceInvokerAsync(a1, (uint64_t)(a7 + 2));
  a7[7] = a2;
  a7[8] = a3;
  a7[9] = a4;
  a7[10] = a5;
  return a7;
}

unint64_t type metadata accessor for LNSystemProtocol()
{
  unint64_t result = lazy cache variable for type metadata for LNSystemProtocol;
  if (!lazy cache variable for type metadata for LNSystemProtocol)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    type metadata accessor for Input();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

uint64_t outlined init with copy of NLContextUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ShortcutsLinkPromptForValueFlowStrategy()
{
  return self;
}

uint64_t outlined destroy of VoiceCommandsNLIntent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VoiceCommandsNLIntent(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL OUTLINED_FUNCTION_5_3(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_10_3()
{
  return v0;
}

_WORD *OUTLINED_FUNCTION_15_2(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_25_2()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_26_1(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_1()
{
  return v0;
}

uint64_t WFScreentimeCheckFlowStrategy.__allocating_init(appPolicyHandler:bundleId:deviceState:)(long long *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v8 = swift_allocObject();
  WFScreentimeCheckFlowStrategy.init(appPolicyHandler:bundleId:deviceState:)(a1, a2, a3, a4);
  return v8;
}

uint64_t WFScreentimeCheckFlowStrategy.init(appPolicyHandler:bundleId:deviceState:)(long long *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  outlined init with take of AceServiceInvokerAsync(a1, v4 + 16);
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = a3;
  outlined init with take of AceServiceInvokerAsync(a4, v4 + 72);
  return v4;
}

uint64_t WFScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse()()
{
  OUTLINED_FUNCTION_9_0();
  v1[7] = v2;
  v1[8] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v1[10] = v3;
  v1[11] = *(void *)(v3 - 8);
  uint64_t v4 = swift_task_alloc();
  v1[12] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v1[13] = v5;
  *uint64_t v5 = v1;
  v5[1] = WFScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse();
  return static ResponseTemplates.appDisabledByScreenTime()(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  *(void *)(v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = WFScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse();
  }
  else {
    uint64_t v2 = WFScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(uint64_t **)(v0 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 64) + 72), *(void *)(*(void *)(v0 + 64) + 96));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v6);
  uint64_t v7 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v5[3] = v7;
  v5[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Bool __swiftcall VoiceCommandsScreentimeCheckFlowStrategy.isAppAllowedByScreentime()()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v2 + 8))(v0[7], v0[8], v1, v2) & 1;
}

uint64_t WFScreentimeCheckFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  return v0;
}

uint64_t WFScreentimeCheckFlowStrategy.__deallocating_deinit()
{
  WFScreentimeCheckFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 112) + **(int **)(**(void **)v1 + 112));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for ScreentimeCheckFlowStrategyAsync.isAppAllowedByScreentime() in conformance WFScreentimeCheckFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))() & 1;
}

uint64_t type metadata accessor for WFScreentimeCheckFlowStrategy()
{
  return self;
}

uint64_t INIntentResponse.localizedResponseString(isVox:intentName:)(char a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 1) == 0 || (uint64_t result = INIntentResponse.printedDialog()()) == 0)
  {
    return INIntentResponse.localizedSpokenResponse(intentName:)(a2, a3);
  }
  return result;
}

uint64_t INIntentResponse.printedDialog()()
{
  Swift::String_optional v0 = INIntentResponse.printedTemplate()();
  uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
  if (!v0.value._object) {
    return 0;
  }
  object = v0.value._object;
  uint64_t v39 = type metadata accessor for CATSpeakableString();
  uint64_t v2 = static CATSpeakableString.getPropertiesWithWrapperInTemplateString(templateString:)();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (uint64_t *)(v2 + 40);
    uint64_t v37 = v2;
    unint64_t v38 = (char *)&type metadata for Any + 8;
    uint64_t v5 = &selRef_setCentered_;
    uint64_t v44 = v0.value._countAndFlagsBits;
    uint64_t v6 = (uint64_t)v0.value._object;
    while (1)
    {
      uint64_t v8 = *(v4 - 1);
      uint64_t v7 = *v4;
      swift_bridgeObjectRetain();
      id v47 = (id)static CATSpeakableString.unwrapProperty(propertyName:)();
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      uint64_t result = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(v40);
      if (!result) {
        break;
      }
      uint64_t v10 = result;
      swift_bridgeObjectRelease();
      if (*(void *)(v10 + 16)
        && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v49), (v12 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v52);
      }
      else
      {
        long long v52 = 0u;
        long long v53 = 0u;
      }
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)&v49);
      if (!*((void *)&v53 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)&v52);
LABEL_20:
        swift_bridgeObjectRelease();
        return 0;
      }
      type metadata accessor for INObject();
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      uint64_t v42 = (uint64_t)object;
      uint64_t v43 = v3;
      uint64_t v13 = v47;
      uint64_t v49 = v44;
      uint64_t v50 = v6;
      *(void *)&long long v52 = v8;
      *((void *)&v52 + 1) = v7;
      id v14 = [v47 v5[25]];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v15 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v44 = OUTLINED_FUNCTION_0_6();
      uint64_t v41 = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = outlined bridged method (pb) of @objc INObject.pronunciationHint.getter(v47);
      uint64_t v49 = countAndFlagsBits;
      uint64_t v50 = (uint64_t)object;
      *(void *)&long long v52 = v8;
      *((void *)&v52 + 1) = v7;
      if (v18)
      {
        id v46 = (id)v17;
        uint64_t v48 = v18;
        uint64_t v35 = v15;
        uint64_t v36 = v15;
        uint64_t countAndFlagsBits = OUTLINED_FUNCTION_0_6();
        uint64_t v20 = v19;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        object = v20;
        uint64_t v5 = &selRef_setCentered_;
      }
      else
      {
        id v21 = [v47 displayString];
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;

        id v46 = (id)v22;
        uint64_t v48 = v24;
        uint64_t v35 = v15;
        uint64_t v36 = v15;
        uint64_t v33 = &type metadata for String;
        unint64_t v34 = v15;
        uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v26 = v25;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        object = v26;
        uint64_t v5 = &selRef_setCentered_;
      }
      v4 += 2;
      int v27 = v41;
      uint64_t v6 = v41;
      --v3;
      if (v43 == 1)
      {
        swift_bridgeObjectRelease();
        int v28 = v44;
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    int v28 = v0.value._countAndFlagsBits;
    int v27 = (int)v0.value._object;
LABEL_17:
    OUTLINED_FUNCTION_33_0();
    return CATSpeakableString.init(_:speak:)(v28, v27, countAndFlagsBits, (int)object, v29, v30, v31, v32, (uint64_t)v33, v34, BYTE4(v34), v35, v36, v37, (uint64_t)v38, v39, (uint64_t)v40, v41, v42,
             v43,
             v44,
             countAndFlagsBits,
             (uint64_t)v46,
             v48,
             v49,
             v50,
             v51);
  }
  return result;
}

#error "27EC0: call analysis failed (funcsize=100)"

Swift::String __swiftcall INIntentResponse.localizedResponseTemplate(intentName:)(Swift::String intentName)
{
  object = intentName._object;
  uint64_t countAndFlagsBits = intentName._countAndFlagsBits;
  uint64_t v4 = static LocaleUtils.siriLanguageCode()();
  uint64_t v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v7 = OUTLINED_FUNCTION_33_0();
  *(_OWORD *)(v7 + 16) = xmmword_212160;
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v6;
  uint64_t v8 = static LocaleUtils.getPreferredLocationFromIntent(intentName:preferredLanguageCode:)(countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
  static LocaleUtils.getLocale(preferredLocalizations:)(v8);
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v1 _responseTemplateForLanguage:v9 requiresSiriCompatibility:1];

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  uint64_t v14 = v11;
  unint64_t v15 = v13;
  result._object = v15;
  result._uint64_t countAndFlagsBits = v14;
  return result;
}

void *INIntentResponse.getPropertiesInTemplate(intentName:)(uint64_t a1, uint64_t a2)
{
  INIntentResponse.localizedResponseTemplate(intentName:)(*(Swift::String *)&a1);
  type metadata accessor for CATSpeakableString();
  uint64_t v2 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)();
  swift_bridgeObjectRelease();
  return v2;
}

Swift::String_optional __swiftcall INIntentResponse.printedTemplate()()
{
  uint64_t v0 = OUTLINED_FUNCTION_1_6(39, 0x8000000000225E50);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t INIntentResponse.getResponseCodeDictionary()()
{
  id v1 = [v0 _codableDescription];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t result = outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(v1);
  if (!result)
  {
    __break(1u);
    return result;
  }
  specialized Dictionary.subscript.getter(0xD000000000000015, 0x8000000000225EB0, result, &v19);
  swift_bridgeObjectRelease();
  if (!v20)
  {

    outlined destroy of Any?((uint64_t)&v19);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {

    return 0;
  }
  id v4 = [v0 _intentResponseCodableCode];
  uint64_t v5 = v4;
  if (!v4)
  {

    goto LABEL_24;
  }
  id v6 = [v4 name];

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v7;

  uint64_t v8 = v17[2];
  if (!v8)
  {
LABEL_25:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = (uint64_t)(v17 + 4);
  uint64_t v10 = v16;
  while (1)
  {
    outlined init with copy of Any(v9, (uint64_t)&v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast()) {
      break;
    }
LABEL_19:
    v9 += 32;
    if (!--v8) {
      goto LABEL_25;
    }
  }
  uint64_t v5 = v17;
  if (!v17[2]
    || (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000000225ED0), (v12 & 1) == 0)
    || (outlined init with copy of Any(v17[7] + 32 * v11, (uint64_t)&v19), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v17 == (void *)v15 && v18 == v10)
  {

    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = v16;
    goto LABEL_19;
  }

LABEL_30:
  swift_bridgeObjectRelease();
LABEL_24:
  swift_bridgeObjectRelease();
  return (uint64_t)v5;
}

Swift::String_optional __swiftcall INIntentResponse.languageCode()()
{
  uint64_t v0 = OUTLINED_FUNCTION_1_6(44, 0x8000000000225E80);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t INIntentResponse.printedTemplate()(uint64_t a1, uint64_t a2)
{
  uint64_t result = INIntentResponse.getResponseCodeDictionary()();
  if (result)
  {
    specialized Dictionary.subscript.getter(a1, a2, result, &v6);
    swift_bridgeObjectRelease();
    if (v7)
    {
      if (swift_dynamicCast()) {
        return v5;
      }
      else {
        return 0;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v6);
      return 0;
    }
  }
  return result;
}

uint64_t outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(void *a1)
{
  id v1 = [a1 propertiesByName];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for INObject()
{
  unint64_t result = lazy cache variable for type metadata for INObject;
  if (!lazy cache variable for type metadata for INObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INObject);
  }
  return result;
}

uint64_t outlined bridged method (pb) of @objc INObject.pronunciationHint.getter(void *a1)
{
  id v1 = [a1 pronunciationHint];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (mbnnb) of @objc INIntentResponse._renderedResponse(forLanguage:requiresSiriCompatibility:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [a4 _renderedResponseForLanguage:v6 requiresSiriCompatibility:a3 & 1];

  if (!v7) {
    return 0;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

uint64_t OUTLINED_FUNCTION_0_6()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_1_6(uint64_t a1, uint64_t a2)
{
  return INIntentResponse.printedTemplate()(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::Properties_optional __swiftcall SuggestionsCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SuggestionsCATsSimple.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return (SiriLinkFlowPlugin::SuggestionsCATsSimple::Properties_optional)10;
  }
  else {
    return (SiriLinkFlowPlugin::SuggestionsCATsSimple::Properties_optional)v3;
  }
}

void SuggestionsCATsSimple.Properties.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      OUTLINED_FUNCTION_52();
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SuggestionsCATsSimple.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SuggestionsCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SuggestionsCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SuggestionsCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SuggestionsCATsSimple.Properties(void *a1@<X8>)
{
  SuggestionsCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_24_2();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_21_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_19_2();
    OUTLINED_FUNCTION_24_2();
    return v13(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_32_2(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  int v28 = (void *)OUTLINED_FUNCTION_51(v27);
  *int v28 = v29;
  v28[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_18_3(v30);
  OUTLINED_FUNCTION_48_0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CancelDialogIds_optional __swiftcall SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.CancelDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::CancelDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SuggestionsCATsSimple.CancelDialogIds(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SuggestionsCATsSimple.CancelDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SuggestionsCATsSimple.CancelDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SuggestionsCATsSimple.CancelDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CancelDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.CancelDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::CancelDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.cancelAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.cancelAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_50(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v29;
  v10[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_48_0();
  return v35(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CancelDialogIds and conformance SuggestionsCATsSimple.CancelDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.close(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.close(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  uint64_t v29 = (void *)OUTLINED_FUNCTION_51(v28);
  *uint64_t v29 = v30;
  v29[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_18_3(v11 - 2);
  OUTLINED_FUNCTION_48_0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CloseDialogIds_optional __swiftcall SuggestionsCATsSimple.CloseDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.CloseDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::CloseDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(rawValue, v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CloseDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.CloseDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::CloseDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.CloseDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.closeAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.closeAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_50(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v29;
  v10[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_48_0();
  return v35(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CloseDialogIds and conformance SuggestionsCATsSimple.CloseDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.create(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.create(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_32_2(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  uint64_t v28 = (void *)OUTLINED_FUNCTION_51(v27);
  *uint64_t v28 = v29;
  v28[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_18_3(v30);
  OUTLINED_FUNCTION_48_0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CreateDialogIds_optional __swiftcall SuggestionsCATsSimple.CreateDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.CreateDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::CreateDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(rawValue, v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::CreateDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.CreateDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::CreateDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.CreateDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.createAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.createAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_50(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v29;
  v10[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_48_0();
  return v35(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.CreateDialogIds and conformance SuggestionsCATsSimple.CreateDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.disable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(void);
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t (*v23)(unint64_t);
  uint64_t v24;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_55();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_33_1();
  uint64_t v5 = OUTLINED_FUNCTION_32_2(v4);
  *(_OWORD *)(v5 + 16) = xmmword_2126D0;
  *(void *)(v5 + 32) = v0;
  *(void *)(v5 + 40) = 0x8000000000225EF0;
  *(unsigned char *)(v5 + 48) = v1;
  uint64_t v6 = OUTLINED_FUNCTION_6_3((void *)v5, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1((uint64_t)v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v8);
  if (v9)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v10();
  }
  uint64_t v11 = OUTLINED_FUNCTION_23_2();
  *(void *)(v3 + 128) = v0;
  *(void *)(v3 + 136) = 0x8000000000225F10;
  outlined init with copy of SpeakableString?(v11, v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v9)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v12();
  }
  uint64_t v13 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v13, v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v9)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v14();
  }
  uint64_t v15 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v15, v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v9)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v16();
  }
  uint64_t v17 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v17, v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v9)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  uint64_t v19 = OUTLINED_FUNCTION_59();
  uint64_t v20 = (void *)OUTLINED_FUNCTION_51(v19);
  *uint64_t v20 = v21;
  v20[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_52();
  return v23(0xD000000000000013);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::DisableDialogIds_optional __swiftcall SuggestionsCATsSimple.DisableDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.DisableDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::DisableDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(rawValue, v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::DisableDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.DisableDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::DisableDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.DisableDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.disableAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  void *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(void);
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v23)(unint64_t);
  uint64_t v24;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_55();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_33_1();
  uint64_t v6 = OUTLINED_FUNCTION_32_2(v5);
  *(_OWORD *)(v6 + 16) = xmmword_2126D0;
  *(void *)(v6 + 32) = v1;
  *(void *)(v6 + 40) = 0x8000000000225EF0;
  *(unsigned char *)(v6 + 48) = v2;
  uint64_t v7 = OUTLINED_FUNCTION_6_3((void *)v6, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1((uint64_t)v7, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v9);
  if (v10)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v11();
  }
  uint64_t v12 = OUTLINED_FUNCTION_23_2();
  *(void *)(v4 + 128) = v1;
  *(void *)(v4 + 136) = 0x8000000000225F10;
  outlined init with copy of SpeakableString?(v12, v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v10)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v13();
  }
  uint64_t v14 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v14, v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v10)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v15();
  }
  uint64_t v16 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v16, v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v10)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v17();
  }
  char v18 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v18, v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v10)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_50(v20);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v0 = v21;
  v0[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_52();
  return v23(0xD000000000000013);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.DisableDialogIds and conformance SuggestionsCATsSimple.DisableDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.enable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.enable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_32_2(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  uint64_t v28 = (void *)OUTLINED_FUNCTION_51(v27);
  *uint64_t v28 = v29;
  v28[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_18_3(v30);
  OUTLINED_FUNCTION_48_0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::EnableDialogIds_optional __swiftcall SuggestionsCATsSimple.EnableDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.EnableDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::EnableDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(rawValue, v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::EnableDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.EnableDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::EnableDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.EnableDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.enableAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.enableAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_50(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v29;
  v10[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_48_0();
  return v35(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.EnableDialogIds and conformance SuggestionsCATsSimple.EnableDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.next(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.next(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  uint64_t v29 = (void *)OUTLINED_FUNCTION_51(v28);
  *uint64_t v29 = v30;
  v29[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_18_3(v11 - 3);
  OUTLINED_FUNCTION_48_0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::NextDialogIds_optional __swiftcall SuggestionsCATsSimple.NextDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.NextDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::NextDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t SuggestionsCATsSimple.NextDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6974736567677573;
  }
  else {
    return 0x7470697263736564;
  }
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::NextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.NextDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::NextDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.NextDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SuggestionsCATsSimple.NextDialogIds@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SuggestionsCATsSimple.NextDialogIds.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t SuggestionsCATsSimple.nextAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_24_2();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_21_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_19_2();
    OUTLINED_FUNCTION_24_2();
    return v13(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SuggestionsCATsSimple.nextAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_50(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v29;
  v10[1] = SuggestionsCATsSimple.nextAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_48_0();
  return v35(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.NextDialogIds and conformance SuggestionsCATsSimple.NextDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.open(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.open(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  uint64_t v29 = (void *)OUTLINED_FUNCTION_51(v28);
  *uint64_t v29 = v30;
  v29[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_18_3(v11 - 3);
  OUTLINED_FUNCTION_48_0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::OpenDialogIds_optional __swiftcall SuggestionsCATsSimple.OpenDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.OpenDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::OpenDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(rawValue, v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::OpenDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.OpenDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::OpenDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.OpenDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.openAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.openAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_50(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v29;
  v10[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_48_0();
  return v35(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.OpenDialogIds and conformance SuggestionsCATsSimple.OpenDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.previous(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.previous(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  uint64_t v29 = (void *)OUTLINED_FUNCTION_51(v28);
  *uint64_t v29 = v30;
  v29[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_18_3(v11 + 1);
  OUTLINED_FUNCTION_48_0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::PreviousDialogIds_optional __swiftcall SuggestionsCATsSimple.PreviousDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.PreviousDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::PreviousDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(rawValue, v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::PreviousDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.PreviousDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::PreviousDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.PreviousDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.previousAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.previousAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_50(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v29;
  v10[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_48_0();
  return v35(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PreviousDialogIds and conformance SuggestionsCATsSimple.PreviousDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.search(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.search(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_32_2(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  uint64_t v28 = (void *)OUTLINED_FUNCTION_51(v27);
  *uint64_t v28 = v29;
  v28[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_18_3(v30);
  OUTLINED_FUNCTION_48_0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::SearchDialogIds_optional __swiftcall SuggestionsCATsSimple.SearchDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.SearchDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::SearchDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(rawValue, v1);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::SearchDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.SearchDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::SearchDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.SearchDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.searchAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.searchAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_50(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v29;
  v10[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_48_0();
  return v35(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.SearchDialogIds and conformance SuggestionsCATsSimple.SearchDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.toggle(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.toggle(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_32_2(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  uint64_t v28 = (void *)OUTLINED_FUNCTION_51(v27);
  *uint64_t v28 = v29;
  v28[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_18_3(v30);
  OUTLINED_FUNCTION_48_0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::ToggleDialogIds_optional __swiftcall SuggestionsCATsSimple.ToggleDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.ToggleDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::SuggestionsCATsSimple::ToggleDialogIds_optional)SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t SuggestionsCATsSimple.CancelDialogIds.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v5) {
    return v6;
  }
  else {
    return 0;
  }
}

SiriLinkFlowPlugin::SuggestionsCATsSimple::ToggleDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.ToggleDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::SuggestionsCATsSimple::ToggleDialogIds_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.ToggleDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t SuggestionsCATsSimple.toggleAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_34_1(v11);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t SuggestionsCATsSimple.toggleAsLabels(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_33_1();
  uint64_t v13 = OUTLINED_FUNCTION_32_2(v12);
  *(_OWORD *)(v13 + 16) = xmmword_2126D0;
  uint64_t v14 = OUTLINED_FUNCTION_26_2(v13, (uint64_t)"coldStartSuggestion");
  uint64_t v15 = OUTLINED_FUNCTION_5_4(v14, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_8_3(v17);
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v19();
  }
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v20, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v21();
  }
  uint64_t v22 = OUTLINED_FUNCTION_4_2();
  outlined init with copy of SpeakableString?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_7_4();
  outlined init with copy of SpeakableString?(v24, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_3_3();
  outlined init with copy of SpeakableString?(v26, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of URL?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_50(v28);
  lazy protocol witness table accessor for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v29;
  v10[1] = SuggestionsCATsSimple.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_48_0();
  return v35(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.ToggleDialogIds and conformance SuggestionsCATsSimple.ToggleDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return SuggestionsCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t SuggestionsCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_16(v10);
  __chkstk_darwin(v11);
  outlined init with copy of SpeakableString?(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of URL?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t outlined init with copy of SpeakableString?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t SuggestionsCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_56();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v1;
}

uint64_t SuggestionsCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_56();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for SuggestionsCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for SuggestionsCATsSimple;
  if (!type metadata singleton initialization cache for SuggestionsCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SuggestionsCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for SuggestionsCATsSimple()
{
  return type metadata accessor for SuggestionsCATsSimple();
}

uint64_t getEnumTagSinglePayload for SuggestionsCATsSimple.Properties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SuggestionsCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2DA38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void type metadata accessor for SuggestionsCATsSimple.Properties()
{
}

void type metadata accessor for SuggestionsCATsSimple.CancelDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.CloseDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.CreateDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.DisableDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.EnableDialogIds()
{
}

unsigned char *destructiveInjectEnumTag for SuggestionsCATsSimple.NextDialogIds(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void type metadata accessor for SuggestionsCATsSimple.NextDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.OpenDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.PreviousDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.SearchDialogIds()
{
}

uint64_t getEnumTagSinglePayload for SuggestionsCATsSimple.CancelDialogIds(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SuggestionsCATsSimple.CancelDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2DC40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for SuggestionsCATsSimple.ToggleDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_3_3()
{
  uint64_t result = *(void *)(v0 + 48);
  *(void *)(v1 + 272) = 0x7470697263736564;
  *(void *)(v1 + 280) = 0xEB000000006E6F69;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  uint64_t result = *(void *)(v0 + 32);
  *(void *)(v1 + 176) = 0x7954797469746E65;
  *(void *)(v1 + 184) = 0xEA00000000006570;
  return result;
}

uint64_t OUTLINED_FUNCTION_5_4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(result + 48) = v2;
  *(void *)(result + 72) = a2;
  *(void *)(result + 80) = 0x656D614E707061;
  *(void *)(result + 88) = 0xE700000000000000;
  return result;
}

void *OUTLINED_FUNCTION_6_3@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  result[9] = a2;
  result[10] = 0x656D614E707061;
  result[11] = 0xE700000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_4()
{
  uint64_t result = *(void *)(v1 + 40);
  *(void *)(v2 + 224) = 0x614E797469746E65;
  *(void *)(v2 + 232) = v0;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_3(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

double OUTLINED_FUNCTION_9_2()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_4()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_12_3()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_16_3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a5;
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(unsigned char *)(v7 + 128) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_17_2()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_18_3@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_21_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  return *(void *)(v0 + 24);
}

void OUTLINED_FUNCTION_25_3(uint64_t a1@<X8>)
{
  *(void *)(v1 + 128) = v2;
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_26_2@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 32) = v2;
  *(void *)(result + 40) = (a2 - 32) | 0x8000000000000000;
  return result;
}

uint64_t *OUTLINED_FUNCTION_31_1()
{
  *(void *)(v2 + 120) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_32_2(uint64_t result)
{
  *(void *)(v1 + 104) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_33_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_34_1(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_35_1(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_36_0(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_37_1(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return swift_task_alloc();
}

uint64_t *OUTLINED_FUNCTION_39_1()
{
  *(void *)(v2 + 312) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t *OUTLINED_FUNCTION_40_1()
{
  *(void *)(v2 + 264) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t *OUTLINED_FUNCTION_41_1()
{
  *(void *)(v2 + 216) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_42_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with copy of SpeakableString?(v3, v4, a3);
}

uint64_t *OUTLINED_FUNCTION_43_0()
{
  *(void *)(v2 + 168) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_50(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_51(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_53()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_54()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_57()
{
  return v0 - 1;
}

uint64_t OUTLINED_FUNCTION_59()
{
  return swift_task_alloc();
}

uint64_t AutoShortcutInvocation.propertyIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AutoShortcutInvocation() + 28);

  return outlined init with copy of UUID?(v3, a1);
}

uint64_t type metadata accessor for AutoShortcutInvocation()
{
  uint64_t result = type metadata singleton initialization cache for AutoShortcutInvocation;
  if (!type metadata singleton initialization cache for AutoShortcutInvocation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AutoShortcutInvocation.provider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AutoShortcutInvocation() + 32);

  return outlined init with copy of DeviceState(v3, a1);
}

id AutoShortcutInvocation.preferences.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for AutoShortcutInvocation() + 36));

  return v1;
}

uint64_t AutoShortcutInvocation.init(directInvocationData:provider:preferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Dictionary.subscript.getter(0x6449656C646E7562, 0xE800000000000000, a1, &v26);
  if (!v28) {
    goto LABEL_9;
  }
  if ((OUTLINED_FUNCTION_12_4() & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v13 = v31;
  uint64_t v12 = v32;
  specialized Dictionary.subscript.getter(0xD000000000000012, 0x8000000000225F60, a1, &v26);
  swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v26);
LABEL_11:
    lazy protocol witness table accessor for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError();
    swift_allocError();
    *uint64_t v14 = 0;
    swift_willThrow();

    return __swift_destroy_boxed_opaque_existential_1Tm(a2);
  }
  if (!OUTLINED_FUNCTION_12_4())
  {
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  static AutoShortcutInvocation.parseServerVocabularyIdentifier(identifier:)(&v26);
  if (v4)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm(a2);
  }
  uint64_t v33 = v26;
  uint64_t v24 = v27;
  uint64_t v25 = *((void *)&v26 + 1);
  uint64_t v16 = v30;
  uint64_t v22 = v29;
  uint64_t v23 = v28;
  swift_bridgeObjectRelease();
  if (v16)
  {
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = type metadata accessor for UUID();
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v17);
  }
  outlined init with copy of DeviceState(a2, (uint64_t)&v26);
  id v18 = [self sharedPreferences];

  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  *a4 = v13;
  a4[1] = v12;
  uint64_t v19 = v25;
  a4[2] = v33;
  a4[3] = v19;
  uint64_t v20 = v23;
  a4[4] = v24;
  a4[5] = v20;
  uint64_t v21 = (int *)type metadata accessor for AutoShortcutInvocation();
  outlined init with take of UUID?((uint64_t)v11, (uint64_t)a4 + v21[7]);
  uint64_t result = outlined init with take of AceServiceInvokerAsync(&v26, (uint64_t)a4 + v21[8]);
  *(void *)((char *)a4 + v21[9]) = v18;
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError;
  if (!lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError;
  if (!lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError);
  }
  return result;
}

uint64_t static AutoShortcutInvocation.parseServerVocabularyIdentifier(identifier:)@<X0>(void *a1@<X8>)
{
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v2 = (void *)StringProtocol.components<A>(separatedBy:)();
  uint64_t v3 = v2[2];
  if (!v3)
  {
    char v4 = 1;
    goto LABEL_5;
  }
  if (v3 == 1)
  {
    char v4 = 2;
LABEL_5:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type AutoShortcutInvocation.AutoShortcutInvocationError and conformance AutoShortcutInvocation.AutoShortcutInvocationError();
    swift_allocError();
    *uint64_t v5 = v4;
    return swift_willThrow();
  }
  uint64_t v8 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v9 = v2[7];
  if (v3 == 3)
  {
    uint64_t v12 = v2[8];
    uint64_t v11 = v2[9];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  a1[1] = v7;
  a1[2] = v10;
  a1[3] = v9;
  a1[4] = v12;
  a1[5] = v11;
  return result;
}

uint64_t AutoShortcutInvocation.init(bundleId:actionIdentifier:baseTemplatePhrase:propertyIdentifier:provider:preferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, long long *a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  uint64_t v13 = (int *)type metadata accessor for AutoShortcutInvocation();
  outlined init with take of UUID?(a7, (uint64_t)a9 + v13[7]);
  uint64_t result = outlined init with take of AceServiceInvokerAsync(a8, (uint64_t)a9 + v13[8]);
  *(void *)((char *)a9 + v13[9]) = a10;
  return result;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AutoShortcutInvocation.action.getter()
{
  OUTLINED_FUNCTION_9_0();
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  v1[7] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v1[8] = v3;
  v1[9] = OUTLINED_FUNCTION_13_0();
  v1[10] = swift_task_alloc();
  v1[11] = type metadata accessor for AutoShortcutInvocation();
  v1[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSSignpostID();
  v1[13] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[14] = v5;
  v1[15] = OUTLINED_FUNCTION_13_0();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OSSignposter();
  v1[19] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[20] = v7;
  v1[21] = swift_task_alloc();
  return _swift_task_switch(AutoShortcutInvocation.action.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  v3[2] = v1;
  v3[3] = v2;
  v3[4] = v0;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v7 = AutoShortcutInvocation.action.getter;
  }
  else {
    uint64_t v7 = AutoShortcutInvocation.action.getter;
  }
  return _swift_task_switch(v7, 0, 0);
}

{
  void *v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t);
  void (*v5)(void);
  os_signpost_id_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  uint64_t v2 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v3 = OUTLINED_FUNCTION_10_5();
    if (v4(v3) != enum case for OSSignpostError.doubleEnd(_:))
    {
      OUTLINED_FUNCTION_2_6();
      v5();
    }
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    uint64_t v6 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_8_4(&dword_0, v1, v2, v6, "FetchActionForAutoShortcutPhrase");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[23];
  uint64_t v8 = v0[21];
  uint64_t v9 = v0[19];
  uint64_t v10 = v0[20];
  uint64_t v11 = v0[16];
  uint64_t v12 = v0[13];
  uint64_t v15 = v0[3];

  v7(v11, v12);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  return v13(v15);
}

{
  void *v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t);
  void (*v5)(void);
  os_signpost_id_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v1 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  uint64_t v2 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v3 = OUTLINED_FUNCTION_10_5();
    if (v4(v3) != enum case for OSSignpostError.doubleEnd(_:))
    {
      OUTLINED_FUNCTION_2_6();
      v5();
    }
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    uint64_t v6 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_8_4(&dword_0, v1, v2, v6, "FetchActionForAutoShortcutPhrase");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[23];
  uint64_t v8 = v0[21];
  uint64_t v9 = v1;
  uint64_t v10 = v0[19];
  uint64_t v11 = v0[20];
  uint64_t v12 = v0[15];
  uint64_t v13 = v0[13];

  v7(v12, v13);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

void AutoShortcutInvocation.action.getter()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[12];
  uint64_t v6 = __swift_project_value_buffer(v4, (uint64_t)static Signposter.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  outlined init with copy of AutoShortcutInvocation(v1, v5);
  uint64_t v7 = OSSignposter.logHandle.getter();
  os_signpost_type_t v8 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v9 = (uint64_t *)v0[12];
    uint64_t v30 = *(void (**)(void))(v0[14] + 16);
    v30();
    os_signpost_type_t v28 = v8;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v12 = *v9;
    unint64_t v11 = v9[1];
    swift_bridgeObjectRetain();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AutoShortcutInvocation((uint64_t)v9);
    os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v7, v28, v13, "FetchActionForAutoShortcutPhrase", "BundleId: %s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    uint64_t v14 = OUTLINED_FUNCTION_7_5();
    v15(v14);
    uint64_t v16 = v30;
  }
  else
  {
    uint64_t v17 = v0[14];
    uint64_t v18 = v0[12];

    outlined destroy of AutoShortcutInvocation(v18);
    uint64_t v16 = *(void (**)(void))(v17 + 16);
  }
  uint64_t v19 = v0[18];
  uint64_t v20 = v0[13];
  uint64_t v21 = v0[14];
  uint64_t v22 = v0[11];
  uint64_t v23 = v0[6];
  ((void (*)(void, uint64_t, uint64_t))v16)(v0[17], v19, v20);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v0[22] = OUTLINED_FUNCTION_14_3();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v0[23] = v24;
  v0[24] = (v21 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v24(v19, v20);
  uint64_t v25 = (void *)(v23 + *(int *)(v22 + 32));
  uint64_t v26 = v25[4];
  __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  uint64_t v29 = *(void *)(v26 + 24) + **(int **)(v26 + 24);
  uint64_t v27 = (void *)swift_task_alloc();
  v0[25] = v27;
  *uint64_t v27 = v0;
  v27[1] = AutoShortcutInvocation.action.getter;
  __asm { BRAA            X9, X16 }
}

uint64_t AutoShortcutInvocation.autoShortcuts.getter()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(AutoShortcutInvocation.autoShortcuts.getter, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  type metadata accessor for AutoShortcutInvocation();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  void *v1 = v0;
  v1[1] = AutoShortcutInvocation.autoShortcuts.getter;
  return static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_11_4();
  return v4(v3);
}

uint64_t static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[10] = v1;
  v0[11] = v2;
  v0[8] = v3;
  v0[9] = v4;
  v0[6] = v5;
  v0[7] = v6;
  uint64_t v7 = type metadata accessor for OSSignpostError();
  v0[12] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v0[13] = v8;
  v0[14] = OUTLINED_FUNCTION_13_0();
  v0[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OSSignpostID();
  v0[16] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v0[17] = v10;
  v0[18] = OUTLINED_FUNCTION_13_0();
  v0[19] = swift_task_alloc();
  v0[20] = swift_task_alloc();
  v0[21] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for OSSignposter();
  v0[22] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v0[23] = v12;
  v0[24] = swift_task_alloc();
  return _swift_task_switch(static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_signpost_type_t v10;
  unint64_t v11;
  uint8_t *v12;
  os_signpost_id_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void (*v16)(void);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t (*v21)(void *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  os_signpost_type_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v39 = v0;
  uint64_t v1 = outlined bridged method (pb) of @objc AFPreferences.languageCode()(*(void **)(v0 + 72));
  *(void *)(v0 + 200) = v1;
  *(void *)(v0 + 208) = v2;
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 176);
    uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Signposter.voiceCommands);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v8, v7);
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    swift_bridgeObjectRetain_n();
    uint64_t v9 = OSSignposter.logHandle.getter();
    uint64_t v10 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v35 = *(void *)(v0 + 48);
      uint64_t v11 = *(void *)(v0 + 56);
      uint64_t v36 = *(void (**)(void))(*(void *)(v0 + 136) + 16);
      v36();
      uint64_t v34 = v10;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v11, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_0, v9, v34, v13, "AutoShortcutFirstRunFlowFetchAutoShortcuts", "BundleId: %s)", v12, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();

      uint64_t v14 = OUTLINED_FUNCTION_7_5();
      v15(v14);
      uint64_t v16 = v36;
    }
    else
    {
      uint64_t v23 = *(void *)(v0 + 136);

      swift_bridgeObjectRelease_n();
      uint64_t v16 = *(void (**)(void))(v23 + 16);
    }
    uint64_t v24 = *(void *)(v0 + 168);
    uint64_t v25 = *(void *)(v0 + 128);
    uint64_t v26 = *(void *)(v0 + 136);
    uint64_t v27 = *(void **)(v0 + 64);
    ((void (*)(void, uint64_t, uint64_t))v16)(*(void *)(v0 + 160), v24, v25);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    *(void *)(v0 + 216) = OUTLINED_FUNCTION_14_3();
    os_signpost_type_t v28 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    *(void *)(v0 + 224) = v28;
    *(void *)(v0 + 232) = (v26 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v28(v24, v25);
    uint64_t v29 = v27[3];
    uint64_t v30 = v27[4];
    __swift_project_boxed_opaque_existential_1(v27, v29);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 + 8)
                                                                                       + **(int **)(v30 + 8));
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v31;
    *uint64_t v31 = v0;
    v31[1] = static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:);
    uint64_t v33 = *(void *)(v0 + 48);
    uint64_t v32 = *(void *)(v0 + 56);
    return v37(v33, v32, v3, v4, v29, v30);
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "AutoShortcutInvocation cannot get Siri language", v20, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_13_3();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_15_3();
    return v21(_swiftEmptyArrayStorage);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  *(void *)(v2 + 248) = v1;
  *(void *)(v2 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void (*v7)(void);
  uint8_t *v8;
  os_signpost_id_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  void (*v25)(void);
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t result;
  uint64_t v29;
  uint64_t v30;

  v0[2] = v0[31];
  swift_bridgeObjectRetain();
  uint64_t v1 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  uint64_t v2 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v3 = v0[15];
    uint64_t v4 = v0[12];
    uint64_t v5 = v0[13];
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v3, v4) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v6 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_2_6();
      v7();
      uint64_t v6 = "";
    }
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v8 = 0;
    uint64_t v9 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v1, v2, v9, "AutoShortcutFirstRunFlowFetchAutoShortcuts", v6, v8, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v11 = v0[19];
  uint64_t v12 = v0[16];
  os_signpost_id_t v13 = v0[11];

  v10(v11, v12);
  if (v13)
  {
    uint64_t v14 = v0[31];
    uint64_t v16 = v0[10];
    uint64_t v15 = v0[11];
    swift_bridgeObjectRetain();
    uint64_t v17 = specialized Collection.firstIndex(where:)(v14, v16, v15);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    if (v19)
    {
      OUTLINED_FUNCTION_2_6();
      v25();
      swift_release();
    }
    else
    {
      uint64_t v20 = specialized Array.remove(at:)(v17);
      if (v0[2] >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if (v29 < 0)
        {
          __break(1u);
          return result;
        }
      }
      uint64_t v22 = v0[23];
      uint64_t v21 = v0[24];
      uint64_t v23 = v0[22];
      specialized Array.replaceSubrange<A>(_:with:)(0, 0, v20);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    }
  }
  else
  {
    OUTLINED_FUNCTION_2_6();
    v24();
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = OUTLINED_FUNCTION_11_4();
  return v27(v26);
}

{
  void *v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  os_signpost_id_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void *);
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  uint64_t v26 = v0;
  uint64_t v1 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  uint64_t v2 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v4 = v0[13];
    uint64_t v3 = v0[14];
    uint64_t v5 = v0[12];
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v4 + 88))(v3, v5) != enum case for OSSignpostError.doubleEnd(_:))
    {
      OUTLINED_FUNCTION_2_6();
      v6();
    }
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    uint64_t v7 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_8_4(&dword_0, v1, v2, v7, "AutoShortcutFirstRunFlowFetchAutoShortcuts");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v9 = v0[18];
  uint64_t v10 = v0[16];

  v8(v9, v10);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_signpost_id_t v13 = static os_log_type_t.error.getter();
  uint64_t v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = v0[26];
  if (v14)
  {
    uint64_t v24 = v0[25];
    uint64_t v16 = v0[6];
    uint64_t v17 = v0[7];
    uint64_t v18 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v12, v13, "AutoShortcutInvocation cannot get AppShortcuts for bundleId=%s; siriLanguage%s",
      (uint8_t *)v18,
      0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease_n();
  }
  uint64_t v20 = v0[23];
  uint64_t v19 = v0[24];
  uint64_t v21 = v0[22];
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  OUTLINED_FUNCTION_13_3();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  return v22(_swiftEmptyArrayStorage);
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 >> 62) {
    goto LABEL_28;
  }
  for (uint64_t i = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)); i; a2 = v25)
  {
    uint64_t v31 = a2;
    uint64_t v6 = 0;
    unint64_t v7 = v4 & 0xC000000000000001;
    unint64_t v26 = v4 + 32;
    unint64_t v27 = v4 & 0xC000000000000001;
    uint64_t v28 = i;
    while (1)
    {
      id v8 = v7 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v26 + 8 * v6);
      unint64_t v4 = (unint64_t)v8;
      id v9 = objc_msgSend(v8, "orderedPhrases", v26);
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase);
      unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v29 = v6;
      uint64_t v30 = (void *)v4;
      if (v10 >> 62) {
        break;
      }
      uint64_t v11 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v11) {
        goto LABEL_9;
      }
LABEL_20:
      swift_bridgeObjectRelease();

      uint64_t result = swift_bridgeObjectRelease_n();
      uint64_t v6 = v29 + 1;
      if (__OFADD__(v29, 1))
      {
        __break(1u);
        return result;
      }
      unint64_t v7 = v27;
      if (v6 == v28) {
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (!v11) {
      goto LABEL_20;
    }
LABEL_9:
    unint64_t v32 = v10 & 0xC000000000000001;
    uint64_t v12 = 4;
    while (1)
    {
      id v13 = v32 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v10 + 8 * v12);
      uint64_t v14 = v13;
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      unint64_t v4 = v10;
      uint64_t v16 = a3;
      id v17 = [v13 basePhraseTemplate];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      a3 = v16;
      if (v18 == v31 && v20 == v16)
      {
        swift_bridgeObjectRelease();

LABEL_26:
        uint64_t v24 = v29;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();

        goto LABEL_30;
      }
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      if (v22) {
        goto LABEL_26;
      }
      ++v12;
      unint64_t v10 = v4;
      if (v15 == v11) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_28:
    uint64_t v25 = a2;
    swift_bridgeObjectRetain();
    uint64_t i = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_29:
  uint64_t v24 = 0;
LABEL_30:
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v3;
  if (!result || (v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    unint64_t v3 = result;
    unint64_t *v1 = result;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v6 - 1 - a1;
    uint64_t v9 = v5 + 8 * a1;
    uint64_t v10 = *(void *)(v9 + 32);
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9 + 40, v8);
    *(void *)(v5 + 16) = v7;
    specialized Array._endMutation()();
    return v10;
  }
  return result;
}

uint64_t protocol witness for AppShortcutInvoking.action.getter in conformance AutoShortcutInvocation()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for AppShortcutInvoking.action.getter in conformance AutoShortcutInvocation;
  return AutoShortcutInvocation.action.getter();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  unint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  if (!v0) {
    unint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t protocol witness for AppShortcutInvoking.autoShortcuts.getter in conformance AutoShortcutInvocation()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for AppShortcutInvoking.autoShortcuts.getter in conformance AutoShortcutInvocation;
  return AutoShortcutInvocation.autoShortcuts.getter();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_11_4();
  return v4(v3);
}

id protocol witness for AppShortcutInvoking.preferences.getter in conformance AutoShortcutInvocation(uint64_t a1)
{
  return *(id *)(v1 + *(int *)(a1 + 36));
}

uint64_t protocol witness for AppShortcutInvoking.provider.getter in conformance AutoShortcutInvocation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of DeviceState(v2 + *(int *)(a1 + 32), a2);
}

uint64_t closure #1 in _globalStringTablePointerOfStaticString(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

void closure #1 in osSignpostWithoutMessage(log:name:id:type:state:formatString:)(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_0, a3, a4, v13, a6, a7, a1, a2);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      uint64_t v8 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v8 < v5)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!(*v4 >> 62))
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
    goto LABEL_9;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v11 = v10 + v7;
  if (__OFADD__(v10, v7))
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v12 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v4 = v12;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v12 & 0x8000000000000000) != 0
    || (v12 & 0x4000000000000000) != 0
    || (uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8, v11 > *(void *)((char *)&dword_18 + (v12 & 0xFFFFFFFFFFFFFF8)) >> 1))
  {
    if (!(v12 >> 62))
    {
LABEL_15:
      swift_bridgeObjectRetain();
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *unint64_t v4 = v12;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_16;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v15 = (void *)(v14 + 32 + 8 * v6);
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut);
  swift_arrayDestroy();
  if (!v7) {
    goto LABEL_24;
  }
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)(v14 + 16);
  }
  if (__OFSUB__(v16, v5))
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14 + 32 + 8 * v5, v16 - v5);
  if (v12 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v18 = *(void *)(v14 + 16);
LABEL_22:
  if (__OFADD__(v18, v7))
  {
    __break(1u);
    return result;
  }
  *(void *)(v14 + 16) = v18 + v7;
LABEL_24:
  *uint64_t v15 = v3;

  return specialized Array._endMutation()();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = result;
  uint64_t v9 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 + v10 > *(void *)(v6 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v6 = v13;
  }
  uint64_t v14 = v6 + 32 + 16 * v8;
  uint64_t result = swift_arrayDestroy();
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v15 = *(void *)(v6 + 16);
  if (__OFSUB__(v15, a2)) {
    goto LABEL_19;
  }
  uint64_t result = (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v6 + 32 + 16 * a2), v15 - a2, (char *)(v14 + 16));
  uint64_t v16 = *(void *)(v6 + 16);
  BOOL v17 = __OFADD__(v16, v10);
  uint64_t v18 = v16 + v10;
  if (!v17)
  {
    *(void *)(v6 + 16) = v18;
LABEL_13:
    *(void *)uint64_t v14 = a3;
    *(void *)(v14 + 8) = a4;
    *unint64_t v4 = v6;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t outlined bridged method (pb) of @objc AFPreferences.languageCode()(void *a1)
{
  id v1 = [a1 languageCode];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t *initializeBufferWithCopyOfBuffer for AutoShortcutInvocation(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)a1 + v10;
    unint64_t v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v13 = type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    }
    uint64_t v16 = a3[8];
    long long v17 = *(_OWORD *)((char *)a2 + v16 + 24);
    *(_OWORD *)((char *)v4 + v16 + 24) = v17;
    (**(void (***)(void))(v17 - 8))();
    uint64_t v18 = a3[9];
    uint64_t v19 = *(void **)((char *)a2 + v18);
    *(uint64_t *)((char *)v4 + v18) = (uint64_t)v19;
    id v20 = v19;
  }
  return v4;
}

void destroy for AutoShortcutInvocation(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for UUID();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + a2[8]);
  uint64_t v6 = *(void **)(a1 + a2[9]);
}

void *initializeWithCopy for AutoShortcutInvocation(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v12 = type metadata accessor for UUID();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v14 = a3[8];
  long long v15 = *(_OWORD *)((char *)a2 + v14 + 24);
  *(_OWORD *)((char *)a1 + v14 + 24) = v15;
  (**(void (***)(void))(v15 - 8))();
  uint64_t v16 = a3[9];
  long long v17 = *(void **)((char *)a2 + v16);
  *(void *)((char *)a1 + v16) = v17;
  id v18 = v17;
  return a1;
}

void *assignWithCopy for AutoShortcutInvocation(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  __swift_assign_boxed_opaque_existential_1((void *)((char *)a1 + a3[8]), (void *)((char *)a2 + a3[8]));
  uint64_t v14 = a3[9];
  long long v15 = *(void **)((char *)a2 + v14);
  uint64_t v16 = *(void **)((char *)a1 + v14);
  *(void *)((char *)a1 + v14) = v15;
  id v17 = v15;

  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        int v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

_OWORD *initializeWithTake for AutoShortcutInvocation(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  int v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  uint64_t v14 = (char *)a1 + v12;
  long long v15 = (char *)a2 + v12;
  long long v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *((void *)v14 + 4) = *((void *)v15 + 4);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  return a1;
}

void *assignWithTake for AutoShortcutInvocation(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
LABEL_7:
  uint64_t v17 = a3[8];
  id v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1 + v17);
  long long v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)id v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  *((void *)v18 + 4) = *((void *)v19 + 4);
  uint64_t v21 = a3[9];
  char v22 = *(void **)((char *)a1 + v21);
  *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);

  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutInvocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_31684);
}

uint64_t sub_31684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AutoShortcutInvocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_31724);
}

uint64_t sub_31724(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v8 = v5 + *(int *)(a4 + 28);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for AutoShortcutInvocation()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutInvocation.AutoShortcutInvocationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x31980);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutInvocation.AutoShortcutInvocationError()
{
  return &type metadata for AutoShortcutInvocation.AutoShortcutInvocationError;
}

void closure #1 in osSignpost(_:log:name:id:type:state:formatStringTransform:)(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
}

uint64_t OUTLINED_FUNCTION_7_5()
{
  return v0;
}

void OUTLINED_FUNCTION_8_4(void *a1, NSObject *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  _os_signpost_emit_with_name_impl(a1, a2, a3, a4, a5, v5, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_10_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_4()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

unint64_t lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors;
  if (!lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors;
  if (!lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RunVoiceShortcutFlowErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RunVoiceShortcutFlowErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x31C50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RunVoiceShortcutFlowErrors()
{
  return &type metadata for RunVoiceShortcutFlowErrors;
}

uint64_t ArchivedViewModel.viewData.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_19();
  outlined copy of Data._Representation(v0, v1);
  return OUTLINED_FUNCTION_19();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t AutoShortcutAppPhrasesViewModel.bundleId.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t AutoShortcutAppPhrasesViewModel.prompt.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t ArchivedViewModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6174614477656976 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6C646E7542707061 && a2 == 0xEB00000000644965;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6C70736944707061 && a2 == 0xEE00656D614E7961)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t static AutoShortcutDialogTemplating.MAXSHORTCUTNUM.getter()
{
  return 3;
}

uint64_t ArchivedViewModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6174614477656976;
  }
  if (a1 == 1) {
    return 0x6C646E7542707061;
  }
  return 0x6C70736944707061;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivedViewModel.CodingKeys()
{
  return ArchivedViewModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivedViewModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = ArchivedViewModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ArchivedViewModel.CodingKeys()
{
  return OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ArchivedViewModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static AutoShortcutDialogTemplating.MAXSHORTCUTNUM.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivedViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivedViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ArchivedViewModel.encode(to:)(void *a1)
{
  int v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ArchivedViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v13 = *v3;
  v12[15] = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    OUTLINED_FUNCTION_2_7(1);
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_2_7(2);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
}

unint64_t lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t ArchivedViewModel.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ArchivedViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined copy of Data._Representation(v18, v19);
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v8 = v7;
  uint64_t v15 = v6;
  swift_bridgeObjectRetain();
  uint64_t v17 = v8;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v16 = v9;
  uint64_t v12 = OUTLINED_FUNCTION_1_8();
  v13(v12);
  outlined copy of Data._Representation(v18, v19);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_3_4();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  OUTLINED_FUNCTION_3_4();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v15;
  a2[3] = v17;
  a2[4] = v16;
  a2[5] = v11;
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

double protocol witness for Decodable.init(from:) in conformance ArchivedViewModel@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  ArchivedViewModel.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivedViewModel(void *a1)
{
  return ArchivedViewModel.encode(to:)(a1);
}

uint64_t destroy for ArchivedViewModel(uint64_t a1)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for ArchivedViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ArchivedViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for ArchivedViewModel(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  uint64_t v6 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivedViewModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivedViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivedViewModel()
{
  return &type metadata for ArchivedViewModel;
}

unsigned char *storeEnumTagSinglePayload for ArchivedViewModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x328A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ArchivedViewModel.CodingKeys()
{
  return &unk_2888E8;
}

uint64_t OUTLINED_FUNCTION_1_8()
{
  return v0;
}

void OUTLINED_FUNCTION_2_7(char a1@<W8>)
{
  *(unsigned char *)(v1 - 80) = a1;
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t DisambiguationItemComponent.title.getter()
{
  return OUTLINED_FUNCTION_19();
}

void *DisambiguationItemComponent.image.getter()
{
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = v1;
  return v1;
}

uint64_t DisambiguationItemComponent.synonyms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CustomRequestParameterDefinition.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *id v2 = a1;
  v2[1] = a2;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WFChooseFromListDisambiguationItem.component.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t CustomIntentStateAttachment.appBundleId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomRequestParameterDefinition.typeDefinition.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t DisambiguationVisual.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DisambiguationVisual.items.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomIntentStateAttachment.parameterName.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t DisambiguationVisual.response.getter()
{
  OUTLINED_FUNCTION_9_0();
  v1[81] = v0;
  v1[80] = v2;
  uint64_t v3 = type metadata accessor for Command();
  v1[82] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[83] = v4;
  v1[84] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  v1[85] = OUTLINED_FUNCTION_13_0();
  v1[86] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SeparatorStyle();
  v1[87] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[88] = v6;
  v1[89] = OUTLINED_FUNCTION_13_0();
  v1[90] = swift_task_alloc();
  type metadata accessor for Separators();
  v1[91] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for ComponentWrapper();
  v1[92] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[93] = v8;
  v1[94] = OUTLINED_FUNCTION_13_0();
  v1[95] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CustomCanvas();
  v1[96] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[97] = v10;
  v1[98] = OUTLINED_FUNCTION_25();
  return _swift_task_switch(DisambiguationVisual.response.getter, 0, 0);
}

{
  unint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  void (*v14)(uint64_t, void, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  long long v36;
  uint64_t v37;
  int EnumTagSinglePayload;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t (*v55)(void);
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;

  os_log_type_t v57 = (uint64_t *)(v1 + 624);
  uint64_t v2 = *(void **)(v1 + 648);
  *(void *)(v1 + 624) = _swiftEmptyArrayStorage;
  uint64_t v3 = v2[3];
  if (v3)
  {
    uint64_t v4 = v2[2];
    uint64_t v5 = one-time initialization token for encoder;
    swift_bridgeObjectRetain();
    if (v5 != -1) {
      swift_once();
    }
    *(void *)(v1 + 16) = v4;
    *(void *)(v1 + 24) = v3;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(unsigned char *)(v1 + 96) = 5;
    lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
    dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    uint64_t v6 = *(void *)(v1 + 784);
    uint64_t v7 = *(void *)(v1 + 776);
    uint64_t v8 = *(void *)(v1 + 768);
    unint64_t v71 = *(void *)(v1 + 752);
    uint64_t v72 = (uint64_t *)(v1 + 104);
    uint64_t v9 = *(void *)(v1 + 744);
    uint64_t v67 = *(void *)(v1 + 760);
    uint64_t v69 = *(void *)(v1 + 736);
    double v62 = *(void *)(v1 + 720);
    uint64_t v10 = *(void *)(v1 + 712);
    uint64_t v11 = *(void *)(v1 + 704);
    uint64_t v12 = *(void *)(v1 + 696);
    CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)();
    *(void *)(v1 + 408) = v8;
    *(void *)(v1 + 416) = &protocol witness table for CustomCanvas;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v1 + 384));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v6, v8);
    int v14 = *(void (**)(uint64_t, void, uint64_t))(v11 + 104);
    v14(v62, enum case for SeparatorStyle.edgeToEdge(_:), v12);
    v14(v10, enum case for SeparatorStyle.standard(_:), v12);
    Separators.init(top:bottom:)();
    ComponentWrapper.init(_:separators:)();
    v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v65(v71, v67, v69);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v16 = v15;
    *(void *)(v1 + 624) = v15;
    uint64_t v0 = *(void *)(v15 + 16);
    if (v0 >= *(void *)(v15 + 24) >> 1)
    {
      OUTLINED_FUNCTION_20_4();
      uint64_t v16 = v56;
      *os_log_type_t v57 = v56;
    }
    uint64_t v17 = *(void *)(v1 + 776);
    v68 = *(void *)(v1 + 768);
    unint64_t v70 = *(void *)(v1 + 784);
    double v63 = *(void *)(v1 + 760);
    uint64_t v18 = *(void *)(v1 + 752);
    unint64_t v19 = *(void *)(v1 + 744);
    long long v20 = *(void *)(v1 + 736);
    *(void *)(v1 + 128) = v20;
    *(void *)(v1 + 136) = &protocol witness table for ComponentWrapper;
    uint64_t v21 = __swift_allocate_boxed_opaque_existential_1(v72);
    v65((uint64_t)v21, v18, v20);
    *(void *)(v16 + 16) = v0 + 1;
    outlined init with take of AceServiceInvokerAsync((long long *)v72, v16 + 40 * v0 + 32);
    char v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v22(v18, v20);
    swift_bridgeObjectRelease();
    v22(v63, v20);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v70, v68);
    uint64_t v2 = *(void **)(v1 + 648);
  }
  uint64_t v23 = v2[4];
  *(void *)(v1 + 792) = v23;
  *(void *)(v1 + 632) = v23;
  uint64_t v24 = *(void *)(v23 + 16);
  *(void *)(v1 + 800) = v24;
  if (v24)
  {
    v73 = (uint64_t *)(v1 + 144);
    uint64_t v25 = v1 + 344;
    unint64_t v26 = 0xD000000000000010;
    unint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v28 = 0;
    while (1)
    {
      *(void *)(v1 + 808) = v28;
      OUTLINED_FUNCTION_16_4((void *)(v27 + 48 * v28));
      *(void *)(v1 + 840) = *(void *)(v29 + 56);
      OUTLINED_FUNCTION_26_3(v29);
      if (v0) {
        break;
      }
      uint64_t v30 = *(void *)(v1 + 688);
      uint64_t v31 = type metadata accessor for VisualProperty();
      __swift_storeEnumTagSinglePayload(v30, 1, 1, v31);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_23_3();
      static Command.directInvocation(identifier:payload:isNavigation:)();
      *(void *)(v1 + 208) = &type metadata for String;
      *(void *)(v1 + 216) = &protocol witness table for String;
      *(void *)(v1 + 184) = 0;
      *(void *)(v1 + 192) = v30;
      if (v26)
      {
        unint64_t v32 = *(void *)(v1 + 840);
        uint64_t v33 = *(void *)(v1 + 832);
        *(void *)(v1 + 248) = &type metadata for String;
        *(void *)(v1 + 256) = &protocol witness table for String;
        *(void *)(v1 + 224) = v33;
        *(void *)(v1 + 232) = v32;
      }
      else
      {
        *(void *)(v1 + 256) = 0;
        *(_OWORD *)(v1 + 224) = 0u;
        *(_OWORD *)(v1 + 240) = 0u;
      }
      uint64_t v34 = (uint64_t *)(v1 + 504);
      uint64_t v35 = *(void *)(v1 + 680);
      OUTLINED_FUNCTION_29_2((__n128)0);
      *(_OWORD *)uint64_t v25 = v36;
      *(_OWORD *)(v25 + 16) = v36;
      *(void *)(v25 + 32) = 0;
      *(_OWORD *)(v1 + 584) = v36;
      *(_OWORD *)(v1 + 600) = v36;
      *(void *)(v1 + 616) = 0;
      *(_OWORD *)(v1 + 424) = v36;
      *(_OWORD *)(v1 + 440) = v36;
      *(void *)(v1 + 456) = 0;
      *(void *)(v1 + 496) = 0;
      *(_OWORD *)(v1 + 464) = v36;
      *(_OWORD *)(v1 + 480) = v36;
      outlined init with copy of VisualProperty?(v37, v35);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v35, 1, v31);
      uint64_t v39 = *(void *)(v1 + 680);
      if (EnumTagSinglePayload == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of VisualProperty?(v39);
        *(_OWORD *)uint64_t v34 = 0u;
        *(_OWORD *)(v1 + 520) = 0u;
        *(void *)(v1 + 536) = 0;
      }
      else
      {
        *(void *)(v1 + 528) = v31;
        *(void *)(v1 + 536) = &protocol witness table for VisualProperty;
        uint64_t v40 = __swift_allocate_boxed_opaque_existential_1(v34);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v40, v39, v31);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      OUTLINED_FUNCTION_27_4();
      *(void *)(v1 + 576) = &protocol witness table for Command;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v1 + 544));
      OUTLINED_FUNCTION_25_4();
      v42(v41);
      *(void *)(v1 + 168) = type metadata accessor for SimpleItemRich();
      *(void *)(v1 + 176) = &protocol witness table for SimpleItemRich;
      __swift_allocate_boxed_opaque_existential_1(v73);
      OUTLINED_FUNCTION_24_3();
      SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)();
      uint64_t v43 = *(void *)(v1 + 624);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_20_4();
        uint64_t v43 = v50;
        *os_log_type_t v57 = v50;
      }
      uint64_t v44 = *(void *)(v43 + 16);
      if (v44 >= *(void *)(v43 + 24) >> 1)
      {
        OUTLINED_FUNCTION_20_4();
        *os_log_type_t v57 = v51;
      }
      v60 = *(void **)(v1 + 848);
      uint64_t v64 = *(void *)(v1 + 688);
      os_log_type_t v66 = *(void *)(v1 + 800);
      double v59 = *(void *)(v1 + 672);
      uint64_t v45 = *(void *)(v1 + 664);
      v58 = *(void *)(v1 + 656);
      unint64_t v61 = *(void *)(v1 + 808) + 1;
      id v46 = *(void *)(v1 + 168);
      uint64_t v0 = *(void *)(v1 + 176);
      id v47 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v73, v46);
      OUTLINED_FUNCTION_6_4();
      uint64_t v49 = v48;
      unint64_t v26 = OUTLINED_FUNCTION_25();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v49 + 16))(v26, v47, v46);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v26, v57, v46, v0);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
      swift_task_dealloc();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v59, v58);
      outlined destroy of VisualProperty?(v64);
      if (v61 == v66)
      {
        outlined release of [String](v1 + 632);
        goto LABEL_28;
      }
      uint64_t v28 = *(void *)(v1 + 808) + 1;
      unint64_t v27 = *(void *)(v1 + 792);
      uint64_t v25 = v1 + 344;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    (id)v0;
    long long v52 = (void *)swift_task_alloc();
    *(void *)(v1 + 864) = v52;
    *long long v52 = v1;
    v52[1] = DisambiguationVisual.response.getter;
    long long v53 = *(void *)(v1 + 688);
    return INImage.convertToVisualProperty()(v53);
  }
  else
  {
LABEL_28:
    OUTLINED_FUNCTION_7_6();
    Response.init(_:backgrounds:ornaments:hideRedactedElements:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v55 = *(uint64_t (**)(void))(v1 + 8);
    return v55();
  }
}

{
  uint64_t v1;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  swift_task_dealloc();
  return _swift_task_switch(DisambiguationVisual.response.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  void (*v16)(void);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  uint64_t v40 = (uint64_t *)(v3 + 144);
  uint64_t v4 = (__n128 *)(v3 + 264);
  uint64_t v5 = v3 + 424;
  uint64_t v31 = (uint64_t *)(v3 + 504);
  unint64_t v32 = (uint64_t *)(v3 + 624);
  while (1)
  {
    OUTLINED_FUNCTION_23_3();
    static Command.directInvocation(identifier:payload:isNavigation:)();
    *(void *)(v3 + 208) = &type metadata for String;
    *(void *)(v3 + 216) = &protocol witness table for String;
    *(void *)(v3 + 184) = v2;
    *(void *)(v3 + 192) = v0;
    if (v1)
    {
      uint64_t v6 = *(void *)(v3 + 840);
      uint64_t v7 = *(void *)(v3 + 832);
      *(void *)(v3 + 248) = &type metadata for String;
      *(void *)(v3 + 256) = &protocol witness table for String;
      *(void *)(v3 + 224) = v7;
      *(void *)(v3 + 232) = v6;
      uint64_t v8 = 0uLL;
    }
    else
    {
      *(void *)(v3 + 256) = 0;
      uint64_t v8 = 0uLL;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 240) = 0u;
    }
    uint64_t v9 = *(void *)(v3 + 680);
    *uint64_t v4 = v8;
    v4[1] = v8;
    v4[2].n128_u64[0] = 0;
    OUTLINED_FUNCTION_29_2(v8);
    *(_OWORD *)(v3 + 584) = v10;
    *(_OWORD *)(v3 + 600) = v10;
    *(void *)(v3 + 616) = 0;
    *(_OWORD *)uint64_t v5 = v10;
    *(_OWORD *)(v5 + 16) = v10;
    *(void *)(v5 + 32) = 0;
    *(void *)(v3 + 496) = 0;
    *(_OWORD *)(v3 + 464) = v10;
    *(_OWORD *)(v3 + 480) = v10;
    outlined init with copy of VisualProperty?(v11, v9);
    uint64_t v12 = type metadata accessor for VisualProperty();
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v9, 1, v12);
    int v14 = *(void *)(v3 + 680);
    uint64_t v33 = v12;
    if (EnumTagSinglePayload == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined destroy of VisualProperty?(v14);
      *(_OWORD *)uint64_t v31 = 0u;
      *(_OWORD *)(v3 + 520) = 0u;
      *(void *)(v3 + 536) = 0;
    }
    else
    {
      *(void *)(v3 + 528) = v12;
      *(void *)(v3 + 536) = &protocol witness table for VisualProperty;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(boxed_opaque_existential_1, v14, v12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    OUTLINED_FUNCTION_27_4();
    *(void *)(v3 + 576) = &protocol witness table for Command;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 544));
    OUTLINED_FUNCTION_25_4();
    v16();
    *(void *)(v3 + 168) = type metadata accessor for SimpleItemRich();
    *(void *)(v3 + 176) = &protocol witness table for SimpleItemRich;
    __swift_allocate_boxed_opaque_existential_1(v40);
    OUTLINED_FUNCTION_24_3();
    SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)();
    uint64_t v17 = *(void *)(v3 + 624);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_20_4();
      uint64_t v17 = v25;
      *unint64_t v32 = v25;
    }
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18 >= *(void *)(v17 + 24) >> 1)
    {
      OUTLINED_FUNCTION_20_4();
      *unint64_t v32 = v26;
    }
    uint64_t v36 = *(void **)(v3 + 848);
    uint64_t v38 = *(void *)(v3 + 688);
    uint64_t v39 = *(void *)(v3 + 800);
    uint64_t v35 = *(void *)(v3 + 672);
    unint64_t v19 = *(void *)(v3 + 664);
    uint64_t v34 = *(void *)(v3 + 656);
    uint64_t v37 = *(void *)(v3 + 808) + 1;
    uint64_t v0 = *(void *)(v3 + 168);
    uint64_t v2 = *(void **)(v3 + 176);
    uint64_t v1 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v40, v0);
    OUTLINED_FUNCTION_6_4();
    uint64_t v21 = v20;
    char v22 = OUTLINED_FUNCTION_25();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v22, v1, v0);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v22, v32, v0, (uint64_t)v2);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v35, v34);
    outlined destroy of VisualProperty?(v38);
    if (v37 == v39) {
      break;
    }
    uint64_t v23 = *(void *)(v3 + 808) + 1;
    *(void *)(v3 + 808) = v23;
    OUTLINED_FUNCTION_16_4((void *)(*(void *)(v3 + 792) + 48 * v23));
    *(void *)(v3 + 840) = *(void *)(v24 + 56);
    OUTLINED_FUNCTION_26_3(v24);
    if (v2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v2;
      uint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v3 + 864) = v29;
      *uint64_t v29 = v3;
      v29[1] = DisambiguationVisual.response.getter;
      uint64_t v30 = *(void *)(v3 + 688);
      return INImage.convertToVisualProperty()(v30);
    }
    __swift_storeEnumTagSinglePayload(*(void *)(v3 + 688), 1, 1, v33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v4 = (__n128 *)(v3 + 264);
    uint64_t v5 = v3 + 424;
  }
  outlined release of [String](v3 + 632);
  OUTLINED_FUNCTION_7_6();
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v27 = *(uint64_t (**)(void))(v3 + 8);
  return v27();
}

uint64_t DisambiguationVisual.data.getter()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for Response();
  v0[2] = v1;
  OUTLINED_FUNCTION_1_0(v1);
  v0[3] = v2;
  v0[4] = OUTLINED_FUNCTION_25();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = DisambiguationVisual.data.getter;
  return DisambiguationVisual.response.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  *(void *)(v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ShowAlertVisual.data.getter;
  }
  else {
    uint64_t v2 = ShowAlertVisual.data.getter;
  }
  return _swift_task_switch(v2, 0, 0);
}

void __swiftcall DisambiguationVisual.init(appBundleId:prompt:items:)(SiriLinkFlowPlugin::DisambiguationVisual *__return_ptr retstr, Swift::String appBundleId, Swift::String_optional prompt, Swift::OpaquePointer items)
{
  retstr->appBundleId = appBundleId;
  retstr->prompt = prompt;
  retstr->items = items;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_18_4();
  if (v3)
  {
    OUTLINED_FUNCTION_2_4();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_6_2();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  OUTLINED_FUNCTION_10_6();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v6 = (void *)swift_allocObject();
    size_t v7 = _swift_stdlib_malloc_size(v6);
    _OWORD v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 16);
  }
  if (v0)
  {
    uint64_t v8 = (char *)OUTLINED_FUNCTION_22_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_13_4();
  }
  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_9_3();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_18_4();
  if (v2)
  {
    OUTLINED_FUNCTION_2_4();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_6_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  OUTLINED_FUNCTION_10_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SectionConvertible>);
    char v5 = (void *)OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_11_5(v5);
  }
  if (v0)
  {
    uint64_t v6 = (char *)OUTLINED_FUNCTION_22_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_13_4();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_9_3();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_18_4();
  if (v2)
  {
    OUTLINED_FUNCTION_2_4();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_6_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  OUTLINED_FUNCTION_10_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WFChooseFromListDisambiguationItem>);
    char v5 = (void *)OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_11_5(v5);
  }
  if (v0)
  {
    uint64_t v6 = (char *)OUTLINED_FUNCTION_22_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_13_4();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_9_3();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_18_4();
  if (v3)
  {
    OUTLINED_FUNCTION_2_4();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_6_2();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  OUTLINED_FUNCTION_10_6();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v6 = (void *)swift_allocObject();
    size_t v7 = _swift_stdlib_malloc_size(v6);
    _OWORD v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 32);
  }
  if (v0)
  {
    uint64_t v8 = (char *)OUTLINED_FUNCTION_22_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_13_4();
  }
  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_9_3();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_18_4();
  if (v2)
  {
    OUTLINED_FUNCTION_2_4();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_6_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  OUTLINED_FUNCTION_10_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DisambiguationVisualItem>);
    char v5 = (void *)OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_11_5(v5);
  }
  if (v0)
  {
    uint64_t v6 = (char *)OUTLINED_FUNCTION_22_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_13_4();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_9_3();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : String?]>, &demangling cache variable for type metadata for [String : String?]);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>, (uint64_t (*)(void))&type metadata accessor for TemplatingSection, (uint64_t (*)(void))&type metadata accessor for TemplatingSection, (void (*)(void))&type metadata accessor for TemplatingSection);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>, (uint64_t (*)(void))&type metadata accessor for DisplayHint, (uint64_t (*)(void))&type metadata accessor for DisplayHint, (void (*)(void))&type metadata accessor for DisplayHint);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SpeakableString>, (uint64_t (*)(void))&type metadata accessor for SpeakableString, (uint64_t (*)(void))&type metadata accessor for SpeakableString, (void (*)(void))&type metadata accessor for SpeakableString);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), void (*a8)(void))
{
  if (a3)
  {
    OUTLINED_FUNCTION_2_4();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_6_2();
      if (v14)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v18 = a6(0);
  OUTLINED_FUNCTION_1_0(v18);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (void *)swift_allocObject();
  size_t v24 = _swift_stdlib_malloc_size(v23);
  if (!v20 || (v24 - v22 == 0x8000000000000000 ? (BOOL v25 = v20 == -1) : (BOOL v25 = 0), v25))
  {
LABEL_23:
    OUTLINED_FUNCTION_0_8();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v23[2] = v16;
  v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  uint64_t v26 = *(void *)(a6(0) - 8);
  unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v28 = (unint64_t)v23 + v27;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v27, v16, v28, a8);
    OUTLINED_FUNCTION_13_4();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v16, v28, a4, a7);
  }
  return (uint64_t)v23;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    OUTLINED_FUNCTION_2_4();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_6_2();
      if (v10)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_1_4();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    char v14 = (char *)swift_allocObject();
    size_t v15 = _swift_stdlib_malloc_size(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 8);
  }
  else
  {
    char v14 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v16 = v14 + 32;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v12, v16);
    OUTLINED_FUNCTION_13_4();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, (unint64_t)v16, a4, a6);
  }
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SectionConvertible);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  OUTLINED_FUNCTION_0_8();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  OUTLINED_FUNCTION_0_8();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_9();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_3_5(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_9();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_3_5(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_9();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_3_5(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_9();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_3_5(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_9();
    __break(1u);
  }
  else if (a3 != result || &result[56 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_15_4(a3, 56 * a2);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_9();
    __break(1u);
  }
  else if (a3 != result || &result[56 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_3_5(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_9();
    __break(1u);
  }
  else if (a3 != result || &result[88 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_15_4(a3, 88 * a2);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_9();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_3_5(a3, result);
  }
  return result;
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(void))&type metadata accessor for UsoIdentifier);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(void))&type metadata accessor for DisplayHint);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(void))&type metadata accessor for SpeakableString);
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    uint64_t v9 = OUTLINED_FUNCTION_1_9();
    __break(1u);
    return _swift_arrayInitWithTakeBackToFront(v9);
  }
  if (a3 < a1
    || (uint64_t result = ((uint64_t (*)(void))a4)(0), a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    a4(0);
    uint64_t v10 = OUTLINED_FUNCTION_30_1();
    return _swift_arrayInitWithTakeFrontToBack(v10);
  }
  else if (a3 != a1)
  {
    uint64_t v9 = OUTLINED_FUNCTION_30_1();
    return _swift_arrayInitWithTakeBackToFront(v9);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

{
  if (__dst != __src || &__src[16 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of AceServiceInvokerAsync(&v12, v10 + 40 * a1 + 32);
}

uint64_t outlined init with copy of VisualProperty?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of VisualProperty?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel);
  }
  return result;
}

uint64_t destroy for DisambiguationVisualItem(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DisambiguationVisualItem(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  unint64_t v6 = (void *)a2[4];
  uint64_t v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DisambiguationVisualItem(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  id v6 = v5;

  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DisambiguationVisualItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DisambiguationVisualItem()
{
  return &type metadata for DisambiguationVisualItem;
}

uint64_t destroy for DisambiguationVisual()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DisambiguationVisual(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DisambiguationVisual(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DisambiguationVisual(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisambiguationVisual(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisambiguationVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisambiguationVisual()
{
  return &type metadata for DisambiguationVisual;
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void *OUTLINED_FUNCTION_3_5@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_7_6()
{
  return *(void *)(v0 + 624);
}

uint64_t OUTLINED_FUNCTION_9_3()
{
  return 0;
}

size_t OUTLINED_FUNCTION_11_5(void *a1)
{
  size_t result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t OUTLINED_FUNCTION_13_4()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

void *OUTLINED_FUNCTION_15_4@<X0>(void *__dst@<X2>, size_t a2@<X8>)
{
  return memmove(__dst, v2, a2);
}

void OUTLINED_FUNCTION_16_4(void *a1@<X8>)
{
  v1[102] = a1[4];
  v1[103] = a1[5];
  v1[104] = a1[6];
}

void OUTLINED_FUNCTION_20_4()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_22_4()
{
  return v0 + 32;
}

void OUTLINED_FUNCTION_26_3(uint64_t a1@<X8>)
{
  *(void *)(v1 + 848) = *(void *)(a1 + 64);
  *(void *)(v1 + 856) = *(void *)(a1 + 72);
}

void OUTLINED_FUNCTION_27_4()
{
  *(void *)(v0 + 568) = *(void *)(v0 + 656);
}

void OUTLINED_FUNCTION_29_2(__n128 a1)
{
  __n128 *v1 = a1;
  v1[1] = a1;
  v1[2].n128_u64[0] = 0;
  *uint64_t v2 = a1;
  v2[1] = a1;
  v2[2].n128_u64[0] = 0;
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  return v0;
}

uint64_t CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[22] = v2;
  v1[23] = v0;
  v1[20] = v3;
  v1[21] = v4;
  v1[19] = v5;
  uint64_t v6 = type metadata accessor for DialogPhase();
  v1[24] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[25] = v7;
  v1[26] = OUTLINED_FUNCTION_13_0();
  v1[27] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[28] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[29] = v9;
  v1[30] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[31] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[32] = v11;
  v1[33] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  void (*v1)(void);
  char v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  void *v5;
  uint64_t (*v6)(void);
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  unsigned __int8 v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, void);
  uint64_t v26;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_22_5();
  v1();
  uint64_t v2 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v3 = OUTLINED_FUNCTION_12_2();
  v4(v3);
  if (v2)
  {
    uint64_t v5 = *(void **)(v0 + 168);
    type metadata accessor for CustomIntentsDialogTemplating();
    if (static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(v5))
    {
      type metadata accessor for EmptyOutput();
      static EmptyOutput.instance.getter();
      OUTLINED_FUNCTION_27_5();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_12_0();
      return v6();
    }
    else
    {
      uint64_t v11 = [*(id *)(v0 + 168) _metadata];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = [v11 showsWhenRun];

        uint64_t v14 = v13 ^ 1;
      }
      else
      {
        uint64_t v14 = 0;
      }
      OUTLINED_FUNCTION_31_2();
      if (dispatch thunk of DeviceState.isCarPlay.getter())
      {
        size_t v15 = 1;
      }
      else
      {
        OUTLINED_FUNCTION_31_2();
        size_t v15 = dispatch thunk of DeviceState.isHomePod.getter() | v14;
      }
      uint64_t v16 = v15 & 1;
      *(unsigned char *)(v0 + 440) = v15 & 1;
      uint64_t v17 = *(void *)(v0 + 176);
      uint64_t v18 = *(void *)(*(void *)(v0 + 184) + 56);
      *(void *)(v0 + 272) = v18;
      type metadata accessor for WFDialogState();
      uint64_t v19 = App.appIdentifier.getter();
      uint64_t v21 = static WFDialogState.isAppFirstRun(appId:)(v19, v20);
      swift_bridgeObjectRelease();
      BOOL v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)v18 + 336)
                                                                      + **(int **)(*(void *)v18 + 336));
      unint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v22;
      *unint64_t v22 = v0;
      v22[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
      size_t v24 = *(void *)(v0 + 160);
      uint64_t v23 = *(void *)(v0 + 168);
      return v25(v24, v23, v17, v16 & v21);
    }
  }
  else
  {
    uint64_t v8 = *(uint64_t **)(v0 + 152);
    v8[3] = type metadata accessor for AceOutput();
    v8[4] = (uint64_t)&protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1(v8);
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 424) = v9;
    *uint64_t v9 = v10;
    v9[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
    return CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse_rfv1(app:intent:intentResponse:)();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 288) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v6();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;

  OUTLINED_FUNCTION_21_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  v5[43] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = (void *)v5[41];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v5 + 7));

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v10, v11, v12);
  }
  else
  {
    v5[44] = v3;
    uint64_t v13 = (void *)swift_task_alloc();
    v5[45] = v13;
    *uint64_t v13 = v7;
    v13[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
    OUTLINED_FUNCTION_6_1();
    return static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = v2 + 56;
  uint64_t v6 = *(void **)(v5 + 328);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  *(void *)(v9 + 368) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t, void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = (void *)v0[36];
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v0[47] = ResponseFactory.init()();
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[15] = type metadata accessor for WorkflowDataModels(0);
  v0[16] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  __swift_allocate_boxed_opaque_existential_1(v0 + 12);
  v4(v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v5 + 16) = xmmword_211C70;
  *(void *)(v5 + 32) = v1;
  uint64_t v13 = v5;
  specialized Array._endMutation()();
  v0[48] = v13;
  OUTLINED_FUNCTION_39_2((int *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:));
  uint64_t v6 = v1;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[49] = v7;
  *uint64_t v7 = v8;
  v7[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
  uint64_t v9 = v0[30];
  uint64_t v10 = v0[19];
  return v12(v10, v0 + 12, v13, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 96;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void **)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 224);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_27_5();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();

  uint64_t v1 = OUTLINED_FUNCTION_10_7();
  v2(v1);
  OUTLINED_FUNCTION_27_5();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 432) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v0 + 152));
  OUTLINED_FUNCTION_26_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 296);

  uint64_t v2 = OUTLINED_FUNCTION_12_2();
  v3(v2);
  OUTLINED_FUNCTION_26_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 296);

  uint64_t v2 = OUTLINED_FUNCTION_12_2();
  v3(v2);
  OUTLINED_FUNCTION_26_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  size_t v15 = *(void **)(v14 + 288);
  LODWORD(a10) = *(unsigned __int8 *)(v14 + 440);
  uint64_t v17 = *(void *)(v14 + 208);
  uint64_t v16 = *(void *)(v14 + 216);
  uint64_t v19 = *(void *)(v14 + 192);
  uint64_t v18 = *(void *)(v14 + 200);
  uint64_t v54 = *(void *)(v14 + 168);
  static DialogPhase.completion.getter();
  id v20 = [v15 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v16, v19);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v19);
  OUTLINED_FUNCTION_19_3();
  v21();
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  if (a10)
  {
    type metadata accessor for ResponseFactory();
    OUTLINED_FUNCTION_35_2();
    *(void *)(v14 + 400) = ResponseFactory.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    unint64_t v22 = (__n128 *)OUTLINED_FUNCTION_16_2();
    OUTLINED_FUNCTION_32_3(v22, (__n128)xmmword_211C70);
    *(void *)(v14 + 408) = a11;
    OUTLINED_FUNCTION_30_2();
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v14 + 416) = v23;
    *uint64_t v23 = v24;
    v23[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
    OUTLINED_FUNCTION_34_2();
    OUTLINED_FUNCTION_3();
    return v28(v25, v26, v27, v28, v29, v30, v31, v32, v54, a10, a11, a12, a13, a14);
  }
  else
  {
    uint64_t v34 = *(void *)(v14 + 184);
    uint64_t v35 = *(void **)(v14 + 168);
    OUTLINED_FUNCTION_16_5();
    *(void *)(v14 + 296) = (*(uint64_t (**)(void *))(v36 + 144))(v35);
    type metadata accessor for CustomIntentSnippetProvider();
    *(unsigned char *)(v14 + 441) = static CustomIntentSnippetProvider.isDoneButtonEligible(deviceState:intent:siriEnvironment:)((void *)(v34 + 16), v35);
    outlined init with copy of DeviceState(v34 + 16, v14 + 56);
    if (*(void *)(v34 + 88))
    {
      uint64_t v37 = *(void *)(*(void *)(v14 + 184) + 80);
      unint64_t v38 = *(void *)(v34 + 88);
    }
    else
    {
      unint64_t v38 = 0xE900000000000073;
      uint64_t v37 = 0x74756374726F6853;
    }
    *(void *)(v14 + 304) = v37;
    *(void *)(v14 + 312) = v38;
    uint64_t v39 = *(void *)(v14 + 272);
    uint64_t v40 = *(void **)(v14 + 168);
    swift_bridgeObjectRetain();
    id v41 = [v40 _title];
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;
    *(void *)(v14 + 136) = v42;
    *(void *)(v14 + 144) = v43;

    *(void *)(v14 + 320) = v44;
    *(void *)(v14 + 328) = [v40 _keyImage];
    uint64_t v55 = *(void *)(*(void *)v39 + 400) + **(int **)(*(void *)v39 + 400);
    uint64_t v56 = *(void *)v39 + 400;
    uint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v14 + 336) = v45;
    void *v45 = v14;
    v45[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse(app:intent:intentResponse:);
    OUTLINED_FUNCTION_3();
    return v47(v46, v47, v48, v49, v50, v51, v52, v53, v55, v56, a11, a12, a13, a14);
  }
}

BOOL static CustomIntentHandleIntentResponseGenerator.shouldShowDialogAfterIntentHandled(intent:)(void *a1)
{
  return (static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(a1) & 1) == 0;
}

uint64_t CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse_rfv1(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[16] = v2;
  v1[17] = v0;
  v1[14] = v3;
  v1[15] = v4;
  v1[13] = v5;
  uint64_t v6 = type metadata accessor for ActivityType();
  v1[18] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[19] = v7;
  v1[20] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[21] = OUTLINED_FUNCTION_13_0();
  v1[22] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AceOutput();
  v1[23] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[24] = v9;
  v1[25] = OUTLINED_FUNCTION_13_0();
  v1[26] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for TemplatingResult();
  v1[27] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[28] = v11;
  v1[29] = OUTLINED_FUNCTION_13_0();
  v1[30] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_16_5();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 128) + **(int **)(v1 + 128));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[31] = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse_rfv1(app:intent:intentResponse:);
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[14];
  return v7(v5, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 256) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_6_1();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_6_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, void);
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[32];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  }
  v0[33] = v2;
  if (v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    type metadata accessor for WFDialogState();
    uint64_t v4 = App.appIdentifier.getter();
    uint64_t v3 = static WFDialogState.isAppFirstRun(appId:)(v4, v5);
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = v0[16];
  OUTLINED_FUNCTION_15_5();
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v7 + 344) + **(int **)(v7 + 344));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[34] = v8;
  *uint64_t v8 = v9;
  v8[1] = CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse_rfv1(app:intent:intentResponse:);
  uint64_t v10 = v0[30];
  uint64_t v11 = v0[14];
  uint64_t v12 = v0[15];
  return v14(v10, v11, v12, v6, v3 & 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;

  uint64_t v1 = *(void *)(v0 + 264);
  (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 16))(*(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 216));
  uint64_t v2 = *(void *)(v0 + 224);
  if (v1)
  {
    uint64_t v3 = *(void (**)(uint64_t))(v2 + 8);
    uint64_t v4 = OUTLINED_FUNCTION_10_7();
    v3(v4);
  }
  else
  {
    uint64_t v5 = *(void *)(TemplatingResult.sections.getter() + 16);
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void (**)(uint64_t))(v2 + 8);
    uint64_t v6 = OUTLINED_FUNCTION_10_7();
    v3(v6);
    if (!v5)
    {
      uint64_t v42 = v3;
      goto LABEL_7;
    }
  }
  uint64_t v42 = v3;
  uint64_t v7 = *(void **)(v0 + 120);
  type metadata accessor for CustomIntentsDialogTemplating();
  if ((static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(v7) & 1) == 0)
  {
    uint64_t v39 = *(void *)(v0 + 208);
    uint64_t v40 = *(void *)(v0 + 192);
    uint64_t v8 = *(void *)(v0 + 176);
    id v41 = *(void *)(v0 + 184);
    __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 136) + 16), *(void *)(*(void *)(v0 + 136) + 40));
    dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
    TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
    OUTLINED_FUNCTION_19_3();
    v9();
    uint64_t v10 = type metadata accessor for NLContextUpdate();
    OUTLINED_FUNCTION_18_5(v10);
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of URL?(v8, &demangling cache variable for type metadata for NLContextUpdate?);
    uint64_t v11 = AceOutput.commands.getter();
    specialized Array.append<A>(contentsOf:)(v11);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    goto LABEL_8;
  }
LABEL_7:
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v14 = *(void *)(v0 + 152);
  size_t v15 = *(void *)(v0 + 136);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_18_5(v17);
  OUTLINED_FUNCTION_22_5();
  v19(v18);
  id v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 160))(v12, v16);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  if (v20)
  {
    *(void *)(v0 + 80) = type metadata accessor for DefaultFlowActivity();
    *(void *)(v0 + 88) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels((unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity, (void (*)(uint64_t))&type metadata accessor for DefaultFlowActivity);
    *(void *)(v0 + 56) = v20;
  }
  else
  {
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  uint64_t v21 = *(void *)(v0 + 168);
  static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v21, &demangling cache variable for type metadata for NLContextUpdate?);
  outlined destroy of URL?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v23 = *(void *)(v0 + 192);
  unint64_t v22 = *(void *)(v0 + 200);
  uint64_t v24 = *(void *)(v0 + 184);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25, v24);
  uint64_t v27 = Logger.logObject.getter();
  unint64_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 134217984;
    uint64_t v30 = AceOutput.commands.getter();
    if (v30 >> 62) {
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v31 = *(void *)((char *)&dword_10 + (v30 & 0xFFFFFFFFFFFFFF8));
    }
    uint64_t v32 = *(void *)(v0 + 192);
    uint64_t v33 = *(void *)(v0 + 200);
    uint64_t v34 = *(void *)(v0 + 184);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    *(void *)(v0 + 96) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v27, v28, "CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse successfully assembled %ld commands..", v29, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
  }
  uint64_t v35 = *(void *)(v0 + 240);
  uint64_t v36 = *(void *)(v0 + 216);

  ((void (*)(uint64_t, uint64_t))v42)(v35, v36);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v37();
}

void CustomIntentHandleIntentResponseGenerator.processIntentHandledResponse_rfv1(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_21_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  __asm { BRAA            X1, X16 }
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

uint64_t CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:)()
{
  OUTLINED_FUNCTION_9_0();
  void v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = type metadata accessor for DialogPhase();
  v1[6] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[7] = v6;
  v1[8] = OUTLINED_FUNCTION_13_0();
  v1[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[10] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[11] = v8;
  v1[12] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[13] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[14] = v10;
  v1[15] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;

  OUTLINED_FUNCTION_13_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "Starting RequestDeviceUnlockAndRestartRequest, sending pinlock view.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v7 = v0[13];

  OUTLINED_FUNCTION_22_5();
  v8();
  uint64_t v9 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v9)
  {
    OUTLINED_FUNCTION_15_5();
    uint64_t v16 = (uint64_t (*)(void))(*(void *)(v10 + 216) + **(int **)(v10 + 216));
    uint64_t v11 = (void *)swift_task_alloc();
    v0[16] = v11;
    *uint64_t v11 = v0;
    v11[1] = CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:);
    return v16();
  }
  else
  {
    uint64_t v13 = (uint64_t *)v0[2];
    v13[3] = type metadata accessor for AceOutput();
    v13[4] = (uint64_t)&protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1(v13);
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[21] = v14;
    *uint64_t v14 = v15;
    v14[1] = CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:);
    return CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest_rfv1(app:intent:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v9();
  }
  else
  {
    *(void *)(v5 + 136) = v3;
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();

  uint64_t v1 = OUTLINED_FUNCTION_10_7();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  uint64_t v15 = (void *)v14[17];
  uint64_t v16 = v14[9];
  uint64_t v18 = v14[6];
  uint64_t v17 = v14[7];
  uint64_t v35 = v14[4];
  static DialogPhase.clarification.getter();
  id v19 = [v15 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_36_1();
  v20();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  OUTLINED_FUNCTION_19_3();
  v21();
  OutputGenerationManifest.canUseServerTTS.setter();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v14[18] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v22 + 16) = xmmword_211C70;
  *(void *)(v22 + 32) = v15;
  uint64_t v36 = v22;
  specialized Array._endMutation()();
  v14[19] = v36;
  OUTLINED_FUNCTION_39_2((int *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
  id v23 = v15;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v14[20] = v24;
  *uint64_t v24 = v25;
  v24[1] = CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest(app:intent:);
  OUTLINED_FUNCTION_3();
  return v29(v26, v27, v28, v29, v30, v31, v32, v33, v35, v15, v36, a12, a13, a14);
}

uint64_t CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest_rfv1(app:intent:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  uint64_t v4 = type metadata accessor for ActivityType();
  v1[15] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[16] = v5;
  v1[17] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[18] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[19] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[20] = v7;
  v1[21] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_15_5();
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 224) + **(int **)(v1 + 224));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 176) = v2;
  *uint64_t v2 = v3;
  v2[1] = CustomIntentHandleIntentResponseGenerator.processDeviceUnlockAndRestartRequest_rfv1(app:intent:);
  uint64_t v4 = *(void *)(v0 + 168);
  return v6(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  outlined init with copy of DeviceState(v4 + 16, v0 + 16);
  OUTLINED_FUNCTION_16_5();
  OUTLINED_FUNCTION_19_3();
  v6();
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_18_5(v7);
  OUTLINED_FUNCTION_22_5();
  v8();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 160))(v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  if (v9)
  {
    *(void *)(v0 + 80) = type metadata accessor for DefaultFlowActivity();
    *(void *)(v0 + 88) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels((unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity, (void (*)(uint64_t))&type metadata accessor for DefaultFlowActivity);
    *(void *)(v0 + 56) = v9;
  }
  else
  {
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  uint64_t v11 = *(void *)(v0 + 160);
  uint64_t v10 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 152);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v13, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  outlined destroy of URL?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v14();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_29_3(v1, v2, v3, v4);
  uint64_t v5 = type metadata accessor for DialogPhase();
  v0[7] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v0[8] = v6;
  v0[9] = OUTLINED_FUNCTION_13_0();
  v0[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v0[11] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v0[12] = v8;
  v0[13] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v0[14] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v0[15] = v10;
  v0[16] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  void (*v1)(void);
  char v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_22_5();
  v1();
  uint64_t v2 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v3 = OUTLINED_FUNCTION_12_2();
  v4(v3);
  if (v2)
  {
    OUTLINED_FUNCTION_15_5();
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 352) + **(int **)(v5 + 352));
    uint64_t v6 = (void *)swift_task_alloc();
    v0[17] = v6;
    *uint64_t v6 = v0;
    v6[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:);
    uint64_t v7 = v0[4];
    uint64_t v8 = v0[5];
    uint64_t v9 = v0[3];
    return v14(v9, v7, v8);
  }
  else
  {
    uint64_t v11 = (uint64_t *)v0[2];
    v11[3] = type metadata accessor for AceOutput();
    v11[4] = (uint64_t)&protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1(v11);
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[24] = v12;
    char *v12 = v13;
    v12[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:);
    return CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse_prerfv2(app:intent:intentResponse:)();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 144) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v6();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 160) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();

  (*(void (**)(void, void))(*(void *)(v0 + 96) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v1();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 96);

  (*(void (**)(void, void))(v1 + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();

  uint64_t v1 = OUTLINED_FUNCTION_10_7();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  uint64_t v15 = *(void **)(v14 + 144);
  uint64_t v16 = *(void *)(v14 + 80);
  uint64_t v18 = *(void *)(v14 + 56);
  uint64_t v17 = *(void *)(v14 + 64);
  uint64_t v45 = *(void *)(v14 + 32);
  LODWORD(a10) = CustomIntentHandleIntentResponseGenerator.shouldLaunchAppForFailure(app:intent:intentResponse:)();
  static DialogPhase.completion.getter();
  id v19 = [v15 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_36_1();
  v20();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  OUTLINED_FUNCTION_19_3();
  v21();
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  if (a10)
  {
    id v47 = (void *)(**(void **)(v14 + 48) + 176);
    uint64_t v46 = *v47 + *(int *)*v47;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v14 + 152) = v22;
    *uint64_t v22 = v23;
    v22[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:);
    OUTLINED_FUNCTION_38_1();
    OUTLINED_FUNCTION_3();
    return v31(v24, v25, v26, v27, v28, v29, v30, v31, v46, v47, a11, a12, a13, a14);
  }
  else
  {
    type metadata accessor for ResponseFactory();
    OUTLINED_FUNCTION_35_2();
    *(void *)(v14 + 168) = ResponseFactory.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v34 = (__n128 *)OUTLINED_FUNCTION_16_2();
    OUTLINED_FUNCTION_32_3(v34, (__n128)xmmword_211C70);
    *(void *)(v14 + 176) = a11;
    OUTLINED_FUNCTION_30_2();
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v14 + 184) = v35;
    *uint64_t v35 = v36;
    v35[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse(app:intent:intentResponse:);
    OUTLINED_FUNCTION_34_2();
    OUTLINED_FUNCTION_3();
    return v40(v37, v38, v39, v40, v41, v42, v43, v44, v45, a10, a11, a12, a13, a14);
  }
}

uint64_t CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse_prerfv2(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_29_3(v1, v2, v3, v4);
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v0[7] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v0[8] = v6;
  v0[9] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_15_5();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 360) + **(int **)(v1 + 360));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[10] = v2;
  *uint64_t v2 = v3;
  v2[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse_prerfv2(app:intent:intentResponse:);
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[3];
  return v9(v4, v7, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  BOOL v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t (*v8)(void);
  uint64_t (*v9)(uint64_t);
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = CustomIntentHandleIntentResponseGenerator.shouldLaunchAppForFailure(app:intent:intentResponse:)();
  if (v1)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)(v0 + 48) + 184)
                                         + **(int **)(**(void **)(v0 + 48) + 184));
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 96) = v2;
    *uint64_t v2 = v3;
    v2[1] = CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponse_prerfv2(app:intent:intentResponse:);
    uint64_t v4 = OUTLINED_FUNCTION_38_1();
    return v9(v4);
  }
  else
  {
    CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponseWithText(app:intent:templateResult:intentResponse:)(v1, *(void *)(v0 + 32));
    uint64_t v6 = OUTLINED_FUNCTION_21_3();
    v7(v6);
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v8();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  uint64_t v0 = OUTLINED_FUNCTION_21_3();
  v1(v0);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v2();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t CustomIntentHandleIntentResponseGenerator.processFailureHandlingIntentResponseWithText(app:intent:templateResult:intentResponse:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActivityType();
  OUTLINED_FUNCTION_12_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v11 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v14 = v13 - v12;
  OUTLINED_FUNCTION_16_5();
  OUTLINED_FUNCTION_19_3();
  v15();
  outlined init with copy of DeviceState(v2 + 16, (uint64_t)v23);
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v16 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v14, 1, 1, v16);
  OUTLINED_FUNCTION_22_5();
  v17();
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 160))(v10, a2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  if (v18)
  {
    *((void *)&v21 + 1) = type metadata accessor for DefaultFlowActivity();
    uint64_t v22 = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels((unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity, (void (*)(uint64_t))&type metadata accessor for DefaultFlowActivity);
    *(void *)&long long v20 = v18;
  }
  else
  {
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
  }
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v14, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
  return outlined destroy of URL?((uint64_t)&v20, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
}

BOOL CustomIntentHandleIntentResponseGenerator.shouldLaunchAppForFailure(app:intent:intentResponse:)()
{
  type metadata accessor for AppNameResolver();
  swift_initStackObject();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  if ((dispatch thunk of DeviceState.isPhone.getter() & 1) == 0)
  {
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
    if ((dispatch thunk of DeviceState.isPad.getter() & 1) == 0) {
      return 0;
    }
  }
  uint64_t v1 = (void *)static SAAppInfoFactory.createAppInfo(app:)();
  uint64_t v2 = AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(v1);
  unint64_t v4 = v3;

  swift_bridgeObjectRelease();
  uint64_t v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  return v5 != 0;
}

void *CustomIntentHandleIntentResponseGenerator.__allocating_init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_23_4(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = *(void *)(a10 + 24);
  uint64_t v12 = *(void *)(a10 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a10, v11);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_20_0();
  uint64_t v16 = v15 - v14;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v17 + 16))(v15 - v14);
  uint64_t v26 = OUTLINED_FUNCTION_20_5(v18, v19, v20, v21, v22, v23, v24, v25, a9, v16, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  return v26;
}

void *CustomIntentHandleIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_23_4(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = *(void *)(a10 + 24);
  uint64_t v12 = *(void *)(a10 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a10, v11);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_20_0();
  uint64_t v16 = v15 - v14;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v17 + 16))(v15 - v14);
  uint64_t v26 = OUTLINED_FUNCTION_20_5(v18, v19, v20, v21, v22, v23, v24, v25, a9, v16, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  return v26;
}

uint64_t CustomIntentContinueInAppResponseGenerator.__deallocating_deinit()
{
  CustomIntentResponseGenerator.deinit();

  return swift_deallocClassInstance();
}

void *specialized CustomIntentHandleIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v22 = a3;
  uint64_t v16 = *(void *)(a12 - 8);
  __chkstk_darwin(a1);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DeviceState(v19, (uint64_t)v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a10, a12);
  uint64_t v20 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(a1, a2, v22, v27, v23, v24, v25, v26, a9, (uint64_t)v18, a11, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a10, a12);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v20;
}

uint64_t type metadata accessor for CustomIntentHandleIntentResponseGenerator()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_10_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_5(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

void *OUTLINED_FUNCTION_20_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19 = *(void *)(v17 - 112);
  uint64_t v20 = *(void *)(v17 - 104);
  uint64_t v21 = *(void *)(v17 - 96);
  uint64_t v22 = *(void *)(v17 - 88);
  return specialized CustomIntentHandleIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(v16, v15, v14, v13, v19, v20, v21, v22, a9, a10, a11, a12, a13);
}

uint64_t OUTLINED_FUNCTION_21_3()
{
  return *(void *)(v0 + 72);
}

void OUTLINED_FUNCTION_23_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 - 96) = a7;
  *(void *)(v8 - 88) = a8;
  *(void *)(v8 - 112) = a5;
  *(void *)(v8 - 104) = a6;
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_27_5()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_29_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return 0;
}

id OUTLINED_FUNCTION_30_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31_2()
{
  uint64_t v2 = *(void *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_32_3(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_38_1()
{
  return *(void *)(v0 + 16);
}

char *OUTLINED_FUNCTION_39_2@<X0>(int *a1@<X8>)
{
  return (char *)a1 + *a1;
}

uint64_t static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:actionMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:actionMetadata:));
}

uint64_t static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:actionMetadata:)()
{
  OUTLINED_FUNCTION_9_0();
  id v1 = [*(id *)(v0 + 32) systemProtocols];
  type metadata accessor for LNSystemProtocol();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 40) = v2;

  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:actionMetadata:);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v5, v4, v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  id v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:));
}

uint64_t static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)()
{
  uint64_t v26 = v0;
  if (Array<A>.isAudioStarting.getter(v0[10]))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_0, v2, v3, "Running AudioStartingIntent setup", v4, 2u);
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v5 = (void *)v0[8];

    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    if (dispatch thunk of DeviceState.isHomePod.getter())
    {
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl(&dword_0, v6, v7, "The request is happening on homepod", v8, 2u);
        OUTLINED_FUNCTION_7_0();
      }
      uint64_t v9 = (void *)v0[9];

      __swift_project_boxed_opaque_existential_1(v9, v9[3]);
      dispatch thunk of AceServiceInvokerAsync.peerInfo()();
      __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
      uint64_t v10 = dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()();
      if (v11)
      {
        unint64_t v12 = v11;
        uint64_t v24 = v10;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
        swift_bridgeObjectRetain_n();
        uint64_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = (uint8_t *)swift_slowAlloc();
          uint64_t v25 = swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 136315138;
          swift_bridgeObjectRetain();
          v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v12, &v25);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_0, v13, v14, "airplayRouteId: %s", v15, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v18 = v19;
        unint64_t v20 = v19[2];
        if (v20 >= v19[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v18 = v23;
        }
        v18[2] = v20 + 1;
        uint64_t v21 = &v18[2 * v20];
        v21[4] = v24;
        v21[5] = v12;
        goto LABEL_21;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    }
    uint64_t v18 = _swiftEmptyArrayStorage;
LABEL_21:
    v0[11] = v18;
    uint64_t v22 = (void *)swift_task_alloc();
    v0[12] = v22;
    *uint64_t v22 = v0;
    v22[1] = static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:);
    return static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)((uint64_t)v18);
  }
  OUTLINED_FUNCTION_18_0();
  return v16();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  OUTLINED_FUNCTION_4_0();
  *os_log_type_t v3 = v2;
  uint64_t v4 = *v0;
  *os_log_type_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 104) = v5;
  *uint64_t v5 = v4;
  v5[1] = static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:);
  uint64_t v6 = *(void *)(v1 + 72);
  return static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:)(v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return _swift_task_switch(static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:), 0, 0);
}

uint64_t static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *os_log_type_t v3 = v0;
  v3[1] = static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000037, 0x8000000000226140, partial apply for closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:), v2, &type metadata for Bool);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  os_log_type_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:);
  }
  return _swift_task_switch(v6, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 56));
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  swift_task_dealloc();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "Error trying to set audio route: %@", v4, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  os_log_type_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7(0);
}

uint64_t static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:));
}

uint64_t static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v4;
  *uint64_t v4 = v0;
  v4[1] = static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:);
  return dispatch thunk of AceServiceInvokerAsync.prepareForAudioHandoff()(v2, v3);
}

{
  char v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  *(unsigned char *)(v1 + 32) = v0;
  swift_task_dealloc();
  return _swift_task_switch(static SharedAudioStartingIntentSetup.prepareForAudioHandoff(aceServiceInvoker:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  const char *v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = "PrepareForAudioHandoff succeeded";
LABEL_10:
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_0, v2, v3, v4, v6, 2u);
      OUTLINED_FUNCTION_7_0();
    }
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = "PrepareForAudioHandoff failed";
      goto LABEL_10;
    }
  }

  OUTLINED_FUNCTION_18_0();
  return v7();
}

void closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = partial apply for closure #1 in closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:);
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor;
  uint64_t v8 = _Block_copy(aBlock);
  swift_release();
  INCRouteAudioToAirplayOutputDevices();
  _Block_release(v8);
}

void closure #1 in closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)(char a1, uint64_t a2)
{
  if (a1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_0, v3, v4, "Successfully set AirPlay output device", v5, 2u);
      swift_slowDealloc();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      unint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v12 = 0;
      }
      *unint64_t v11 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v8, v9, "Failed to set AirPlay output device: %@", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    if (a2)
    {
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
      CheckedContinuation.resume(throwing:)();
    }
  }
}

ValueMetadata *type metadata accessor for SharedAudioStartingIntentSetup()
{
  return &type metadata for SharedAudioStartingIntentSetup;
}

void partial apply for closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)(uint64_t a1)
{
}

uint64_t sub_3B968()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void partial apply for closure #1 in closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)(char a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);

  closure #1 in closure #1 in static SharedAudioStartingIntentSetup.routeAudioToAirPlayOutputDevices(airPlayOutputDevices:)(a1, a2);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t one-time initialization function for semanticToURL()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, URL?)>);
  uint64_t v0 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL?))
                 - 8);
  unint64_t v1 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2133E0;
  uint64_t v3 = (void *)(v2 + v1);
  *uint64_t v3 = 0x5765746F4E77656ELL;
  v3[1] = 0xEF65746144687469;
  URL.init(string:)();
  OUTLINED_FUNCTION_1_10();
  strcpy(v4, "AirDropPhotos");
  *((_WORD *)v4 + 7) = -4864;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1_10();
  strcpy(v5, "EmailLastImage");
  v5[15] = -18;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1_10();
  strcpy(v6, "TextLastImage");
  *((_WORD *)v6 + 7) = -4864;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1_10();
  *uint64_t v7 = 0x65724241656B6154;
  v7[1] = 0xEA00000000006B61;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1_10();
  strcpy(v8, "BlockOffAnHour");
  v8[15] = -18;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1_10();
  *os_log_type_t v9 = 0xD000000000000011;
  v9[1] = 0x8000000000226380;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_3_6();
  *unint64_t v11 = v10 | 0x46494700000000;
  v11[1] = 0xE700000000000000;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_3_6();
  *uint64_t v13 = v12 | 0x6F43525100000000;
  v13[1] = 0xEA00000000006564;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1_10();
  *os_log_type_t v14 = 0x697551636973754DLL;
  v14[1] = 0xE90000000000007ALL;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1_10();
  strcpy(v15, "ShazamShortcut");
  v15[15] = -18;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1_10();
  strcpy(v16, "WhatsAShortcut");
  v16[15] = -18;
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1_10();
  *uint64_t v17 = 0x6146724F65757254;
  v17[1] = 0xEB0000000065736CLL;
  OUTLINED_FUNCTION_2_8();
  OUTLINED_FUNCTION_1_10();
  strcpy(v18, "HaikuGenerator");
  v18[15] = -18;
  OUTLINED_FUNCTION_2_8();
  OUTLINED_FUNCTION_1_10();
  *uint64_t v19 = 0x6F74537972616353;
  v19[1] = 0xEA00000000007972;
  OUTLINED_FUNCTION_2_8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static TopLevelStarterShortcuts.semanticToURL = result;
  return result;
}

uint64_t *TopLevelStarterShortcuts.semanticToURL.unsafeMutableAddressor()
{
  if (one-time initialization token for semanticToURL != -1) {
    swift_once();
  }
  return &static TopLevelStarterShortcuts.semanticToURL;
}

uint64_t static TopLevelStarterShortcuts.semanticToURL.getter()
{
  if (one-time initialization token for semanticToURL != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for TopLevelStarterShortcuts()
{
  return &type metadata for TopLevelStarterShortcuts;
}

uint64_t OUTLINED_FUNCTION_0_9()
{
  return URL.init(string:)();
}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return URL.init(string:)();
}

uint64_t INIntent.typed<A>(as:)(uint64_t a1, uint64_t a2)
{
  return INIntent.typed<A>(as:)(a1, a2, (uint64_t (*)(void *))&INTypedIntentWithIntent);
}

uint64_t INIntent.debugDescriptionLite.getter()
{
  uint64_t v4 = outlined bridged method (pb) of @objc INIntent.parametersByName.getter(v0);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    swift_getObjectType();
    v80._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v80);
    swift_bridgeObjectRelease();
    v81._object = (void *)0x8000000000226640;
    v81._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v81);
    return 0x746E65746E494E49;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v83 = v4 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v4 + 64);
  int64_t v84 = (unint64_t)(v6 + 63) >> 6;
  int64_t v9 = 0;
  unsigned int v10 = &_swiftEmptyDictionarySingleton;
  uint64_t v85 = swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v11 = __clz(__rbit64(v8));
  uint64_t v12 = (v8 - 1) & v8;
  for (unint64_t i = v11 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v9 << 6))
  {
    uint64_t v24 = (uint64_t *)(v5[6] + 16 * i);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    uint64_t v27 = v5[2];
    swift_bridgeObjectRetain();
    if (v27 && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25), (v29 & 1) != 0))
    {
      outlined init with copy of Any(v5[7] + 32 * v28, (uint64_t)v93);
      outlined init with take of Any(v93, &v94);
    }
    else
    {
      os_log_type_t v95 = &type metadata for String;
      *(void *)&long long v94 = 0x3E6C6C756E3CLL;
      *((void *)&v94 + 1) = 0xE600000000000000;
    }
    outlined init with copy of Any((uint64_t)&v94, (uint64_t)v93);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    unint64_t v86 = v12;
    int64_t v87 = v9;
    uint64_t v88 = v25;
    if (swift_dynamicCast())
    {
      uint64_t v30 = *(void *)&v91[0];
      uint64_t v2 = *(void *)(*(void *)&v91[0] + 16);
      if (v2)
      {
        uint64_t v90 = _swiftEmptyArrayStorage;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v1 = v30 + 32;
        do
        {
          outlined init with copy of Any(v1, (uint64_t)v92);
          outlined init with copy of Any((uint64_t)v92, (uint64_t)v89);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringLiteConvertible);
          if (swift_dynamicCast())
          {
            uint64_t v31 = OUTLINED_FUNCTION_3_7(v91);
            uint64_t v3 = v32(v31);
            uint64_t v34 = v33;
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v93);
          }
          else
          {
            OUTLINED_FUNCTION_24_4();
            outlined destroy of URL?(v35, &demangling cache variable for type metadata for CustomDebugStringLiteConvertible?);
            outlined init with copy of Any((uint64_t)v92, (uint64_t)v93);
            String.init<A>(describing:)();
            OUTLINED_FUNCTION_5_5();
            OUTLINED_FUNCTION_9_4();
            OUTLINED_FUNCTION_17_3();
            swift_bridgeObjectRelease();
            uint64_t v3 = static String._fromSubstring(_:)();
            uint64_t v34 = v36;
            swift_bridgeObjectRelease();
          }
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v92);
          uint64_t v37 = v90;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v37 = v90;
          }
          unint64_t v38 = v37[2];
          if (v38 >= v37[3] >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v37 = v90;
          }
          v37[2] = v38 + 1;
          uint64_t v39 = &v37[2 * v38];
          v39[4] = v3;
          v39[5] = v34;
          v1 += 32;
          --v2;
        }
        while (v2);
        swift_bridgeObjectRelease();
        *(void *)&v93[0] = v37;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v40 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v42 = v41;
        swift_release();
        *(void *)&v93[0] = 91;
        *((void *)&v93[0] + 1) = 0xE100000000000000;
        v43._uint64_t countAndFlagsBits = v40;
        v43._object = v42;
        String.append(_:)(v43);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v44._uint64_t countAndFlagsBits = 93;
        v44._object = (void *)0xE100000000000000;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        Substring.init(_:)();
        OUTLINED_FUNCTION_18_6();
        *(void *)&v93[0] = v10;
        specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
        OUTLINED_FUNCTION_7_7();
        if (v17) {
          goto LABEL_83;
        }
        id v47 = v45;
        char v48 = v46;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Substring>);
        if (OUTLINED_FUNCTION_21_4())
        {
          specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
          OUTLINED_FUNCTION_16_6();
          if (!v50) {
            goto LABEL_88;
          }
          id v47 = v49;
        }
        unsigned int v10 = *(void **)&v93[0];
        if (v48)
        {
          OUTLINED_FUNCTION_12_5();
          *id v47 = v3;
          v47[1] = 0;
          v47[2] = v1;
          v47[3] = (uint64_t)v42;
LABEL_74:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v70 = &v94;
          goto LABEL_75;
        }
        *(void *)(*(void *)&v93[0] + 8 * ((unint64_t)v47 >> 6) + 64) |= 1 << (char)v47;
        uint64_t v72 = (uint64_t *)(v10[6] + 16 * (void)v47);
        *uint64_t v72 = v26;
        v72[1] = v25;
        v73 = (uint64_t *)(v10[7] + 32 * (void)v47);
        uint64_t *v73 = v3;
        v73[1] = 0;
        v73[2] = v1;
        v73[3] = (uint64_t)v42;
        uint64_t v74 = v10[2];
        BOOL v17 = __OFADD__(v74, 1);
        uint64_t v71 = v74 + 1;
        if (v17) {
          goto LABEL_86;
        }
        goto LABEL_73;
      }
      swift_bridgeObjectRelease();
    }
    outlined init with copy of Any((uint64_t)&v94, (uint64_t)v92);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringLiteConvertible);
    if (!swift_dynamicCast())
    {
      OUTLINED_FUNCTION_24_4();
      outlined destroy of URL?(v59, &demangling cache variable for type metadata for CustomDebugStringLiteConvertible?);
      outlined init with copy of Any((uint64_t)&v94, (uint64_t)v93);
      String.init<A>(describing:)();
      OUTLINED_FUNCTION_5_5();
      OUTLINED_FUNCTION_9_4();
      uint64_t v3 = OUTLINED_FUNCTION_17_3();
      uint64_t v2 = v60;
      uint64_t v1 = v61;
      uint64_t v63 = v62;
      swift_bridgeObjectRelease();
      swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v93[0] = v10;
      specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
      OUTLINED_FUNCTION_7_7();
      if (v17) {
        goto LABEL_82;
      }
      os_log_type_t v66 = v64;
      char v67 = v65;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Substring>);
      if (OUTLINED_FUNCTION_21_4())
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
        OUTLINED_FUNCTION_16_6();
        if (!v50) {
          goto LABEL_88;
        }
        os_log_type_t v66 = v68;
      }
      unsigned int v10 = *(void **)&v93[0];
      if (v67)
      {
        OUTLINED_FUNCTION_12_5();
        *os_log_type_t v66 = v3;
        v66[1] = v2;
        v66[2] = v1;
        v66[3] = v63;
        goto LABEL_74;
      }
      OUTLINED_FUNCTION_0_10();
      if (v17) {
        goto LABEL_85;
      }
LABEL_73:
      v10[2] = v71;
      swift_bridgeObjectRetain();
      goto LABEL_74;
    }
    uint64_t v51 = OUTLINED_FUNCTION_3_7(v91);
    v52(v51);
    Substring.init(_:)();
    char v53 = OUTLINED_FUNCTION_18_6();
    *(void *)&v91[0] = v10;
    specialized __RawDictionaryStorage.find<A>(_:)(v26, v88);
    OUTLINED_FUNCTION_7_7();
    if (v17) {
      goto LABEL_81;
    }
    uint64_t v56 = v54;
    char v57 = v55;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Substring>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v53, (Swift::Int)v10))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v26, v88);
      OUTLINED_FUNCTION_16_6();
      if (!v50) {
        goto LABEL_88;
      }
      uint64_t v56 = v58;
    }
    unsigned int v10 = *(void **)&v91[0];
    if (v57)
    {
      OUTLINED_FUNCTION_12_5();
      uint64_t *v56 = v3;
      v56[1] = v2;
      v56[2] = v1;
      v56[3] = v12;
    }
    else
    {
      OUTLINED_FUNCTION_0_10();
      if (v17) {
        goto LABEL_84;
      }
      v10[2] = v69;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v94);
    unint64_t v70 = v93;
LABEL_75:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v70);
    uint64_t v5 = (void *)v85;
    unint64_t v8 = v86;
    int64_t v9 = v87;
    if (v86) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    if (v14 >= v84) {
      goto LABEL_77;
    }
    unint64_t v15 = *(void *)(v83 + 8 * v14);
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      OUTLINED_FUNCTION_14_4();
      if (v16 == v17) {
        goto LABEL_77;
      }
      OUTLINED_FUNCTION_13_5();
      if (!v15)
      {
        int64_t v9 = v18 + 2;
        OUTLINED_FUNCTION_14_4();
        if (v16 == v17) {
          goto LABEL_77;
        }
        OUTLINED_FUNCTION_13_5();
        if (!v15)
        {
          int64_t v9 = v19 + 3;
          OUTLINED_FUNCTION_14_4();
          if (v16 == v17) {
            goto LABEL_77;
          }
          OUTLINED_FUNCTION_13_5();
          if (!v15)
          {
            int64_t v9 = v20 + 4;
            OUTLINED_FUNCTION_14_4();
            if (v16 == v17) {
              goto LABEL_77;
            }
            OUTLINED_FUNCTION_13_5();
            if (!v15) {
              break;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v12 = (v15 - 1) & v15;
  }
  int64_t v22 = v21 + 5;
  if (v22 >= v84)
  {
LABEL_77:
    swift_release();
    swift_bridgeObjectRelease();
    swift_getObjectType();
    *(void *)&v93[0] = _typeName(_:qualified:)();
    *((void *)&v93[0] + 1) = v75;
    v76._uint64_t countAndFlagsBits = 40;
    v76._object = (void *)0xE100000000000000;
    String.append(_:)(v76);
    v77._uint64_t countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v78._uint64_t countAndFlagsBits = 41;
    v78._object = (void *)0xE100000000000000;
    String.append(_:)(v78);
    *(void *)&v91[0] = 92;
    *((void *)&v91[0] + 1) = 0xE100000000000000;
    *(void *)&long long v94 = 0;
    *((void *)&v94 + 1) = 0xE000000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v79 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    return v79;
  }
  unint64_t v15 = *(void *)(v83 + 8 * v22);
  if (v15)
  {
    int64_t v9 = v22;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    OUTLINED_FUNCTION_14_4();
    if (v16 == v17) {
      goto LABEL_77;
    }
    OUTLINED_FUNCTION_13_5();
    int64_t v22 = v23 + 1;
    if (v15) {
      goto LABEL_28;
    }
  }
LABEL_87:
  __break(1u);
LABEL_88:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *INIntent.parameterMetadata()()
{
  unint64_t v1 = outlined bridged method (ob) of @objc INIntentDescription.slotDescriptions()([v0 _intentInstanceDescription]);
  if (!v1)
  {
LABEL_23:
    __break(1u);
    uint64_t result = (void *)swift_release();
    __break(1u);
    return result;
  }
  if (v1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v2 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v12 = v2;
    specialized MutableCollection<>.sort(by:)(&v12);
    swift_bridgeObjectRelease();
    uint64_t v3 = v12;
    if (v12 < 0 || (v12 & 0x4000000000000000) != 0) {
      break;
    }
    uint64_t v4 = *(void *)(v12 + 16);
    if (!v4) {
      goto LABEL_19;
    }
LABEL_7:
    uint64_t v12 = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v5 = 0;
    while (v4 != v5)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v3 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(v6);
      if (!v8) {
        goto LABEL_22;
      }
      ++v5;
      [v7 resolveSelector];
      type metadata accessor for SiriKitParameterMetadata();
      swift_allocObject();
      SiriKitParameterMetadata.init(parameterName:shouldResolve:confirmationStates:)();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v4 == v5)
      {
        uint64_t v9 = v12;
        swift_release();
        return (void *)v9;
      }
    }
    __break(1u);
LABEL_17:
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(v10);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v4) {
    goto LABEL_7;
  }
LABEL_19:
  swift_release();
  return _swiftEmptyArrayStorage;
}

INIntent __swiftcall INIntent.clone()()
{
  [v0 copy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
  if (swift_dynamicCast()) {
    return v9;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  id v8 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v10[0] = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v6 = INIntent.debugDescriptionLite.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, v4, "Unexpected failure when cloning intent: %s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
  }

  return (INIntent)v8;
}

uint64_t protocol witness for CustomDebugStringLiteConvertible.debugDescriptionLite.getter in conformance INIntent()
{
  return INIntent.debugDescriptionLite.getter();
}

uint64_t one-time initialization function for setCachedLanguage()
{
  uint64_t result = closure #1 in variable initialization expression of static INPreferencesCacher.setCachedLanguage();
  static INPreferencesCacher.setCachedLanguage = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of static INPreferencesCacher.setCachedLanguage()
{
  id v0 = [self sharedPreferences];
  uint64_t v1 = outlined bridged method (ob) of @objc AFPreferences.languageCode()(v0);
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    id v5 = [self sharedPreferences];
    if (v5)
    {
      uint64_t v6 = v5;
      outlined bridged method (mbnn) of @objc INPreferences._cachedSiriLanguageCode.setter(v3, v4, v5);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_0, v8, v9, "Unable to determine current Siri locale. Exceptions may be thrown when trying to convert intents to JSON if this process lacks proper entitlements.", v10, 2u);
      swift_slowDealloc();
    }
  }
  return 1;
}

Swift::String __swiftcall INIntent.jsonRepresentation()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v54 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v52 = (char *)&v51 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v53 = (uint64_t)&v51 - v7;
  __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)&v51 - v8;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v55 = *(void *)(v10 - 8);
  uint64_t v56 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v12 - 8);
  if (one-time initialization token for setCachedLanguage != -1) {
    swift_once();
  }
  uint64_t v13 = self;
  id v14 = [v0 _JSONDictionaryRepresentation];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v58 = 0;
  id v16 = [v13 dataWithJSONObject:isa options:0 error:&v58];

  id v17 = v58;
  if (!v16)
  {
    uint64_t v26 = v17;
    uint64_t v27 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v56, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain();
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      id v58 = (id)OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v30 = 136315138;
      uint64_t v57 = v27;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v31 = String.init<A>(describing:)();
      uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v28, v29, "Could not convert dictionary representation to JSON: %s", v30, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v36 = *(void (**)(void))(v55 + 16);
    uint64_t v37 = v56;
    OUTLINED_FUNCTION_22_6();
    v36();
    uint64_t v38 = (uint64_t)v52;
    OUTLINED_FUNCTION_22_6();
    v36();
    __swift_storeEnumTagSinglePayload(v38, 0, 1, v37);
    uint64_t v39 = v54;
    outlined init with copy of Logger?(v38, v54);
    if (__swift_getEnumTagSinglePayload(v39, 1, v37) == 1)
    {
      outlined destroy of URL?(v54, &demangling cache variable for type metadata for Logger?);
    }
    else
    {
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = OUTLINED_FUNCTION_22_3();
        id v58 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 136315650;
        uint64_t v43 = StaticString.description.getter();
        uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v58);
        OUTLINED_FUNCTION_8_5();
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2048;
        uint64_t v57 = 120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v42 + 22) = 2080;
        uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x8000000000226660, (uint64_t *)&v58);
        OUTLINED_FUNCTION_8_5();
        _os_log_impl(&dword_0, v40, v41, "FatalError at %s:%lu - %s", (uint8_t *)v42, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    }
    goto LABEL_23;
  }
  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  outlined copy of Data._Representation(v18, v20);
  static String.Encoding.utf8.getter();
  uint64_t v21 = String.init(data:encoding:)();
  uint64_t v23 = v22;
  outlined consume of Data._Representation(v18, v20);
  if (!v23)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v33 = v56;
    __swift_project_value_buffer(v56, (uint64_t)static Logger.voiceCommands);
    uint64_t v34 = *(void (**)(void))(v55 + 16);
    OUTLINED_FUNCTION_22_6();
    v34();
    OUTLINED_FUNCTION_22_6();
    v34();
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v33);
    uint64_t v35 = v53;
    outlined init with copy of Logger?((uint64_t)v9, v53);
    if (__swift_getEnumTagSinglePayload(v35, 1, v33) == 1)
    {
      outlined destroy of URL?(v53, &demangling cache variable for type metadata for Logger?);
    }
    else
    {
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = OUTLINED_FUNCTION_22_3();
        id v58 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v47 = 136315650;
        uint64_t v48 = StaticString.description.getter();
        uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)&v58);
        OUTLINED_FUNCTION_8_5();
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2048;
        uint64_t v57 = 124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v47 + 22) = 2080;
        uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x8000000000226720, (uint64_t *)&v58);
        OUTLINED_FUNCTION_8_5();
        _os_log_impl(&dword_0, v45, v46, "FatalError at %s:%lu - %s", (uint8_t *)v47, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v56);
    }
LABEL_23:
    static SiriKitLifecycle._logCrashToEventBus(_:)();
    uint64_t v24 = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_24;
  }
  outlined consume of Data._Representation(v18, v20);
  uint64_t v24 = v21;
  uint64_t v25 = v23;
LABEL_24:
  result._object = v25;
  result._uint64_t countAndFlagsBits = v24;
  return result;
}

uint64_t INIntent.safeJSONDictionaryRepresentation.getter()
{
  if (one-time initialization token for setCachedLanguage != -1) {
    swift_once();
  }
  id v1 = [v0 _JSONDictionaryRepresentation];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t INIntentResolutionResult.safeJSONDictionaryRepresentation(for:parameterName:)(uint64_t a1)
{
  if (one-time initialization token for setCachedLanguage != -1) {
    swift_once();
  }
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v1 _JSONDictionaryRepresentationForIntent:a1 parameterName:v3];

  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  return v5;
}

uint64_t INIntentResponse.typed<A>(as:)(uint64_t a1, uint64_t a2)
{
  return INIntent.typed<A>(as:)(a1, a2, (uint64_t (*)(void *))&INTypedIntentResponseWithIntentResponse);
}

uint64_t INIntent.typed<A>(as:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *))
{
  uint64_t v5 = v3;
  uint64_t v6 = swift_dynamicCastUnknownClass();
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = v5;
  }
  else
  {
    id v10 = (id)a3(v3);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v7 = swift_dynamicCastUnknownClass();
      if (!v7) {
    }
      }
    else
    {
      return 0;
    }
  }
  return v7;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: Double)>, (void (*)(void))specialized Sequence._copySequenceContents(initializing:));
}

{
  const void *v1;
  size_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (!*(void *)(a1 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  id v1 = (const void *)OUTLINED_FUNCTION_23_5();
  uint64_t v2 = _swift_stdlib_malloc_size(v1);
  OUTLINED_FUNCTION_10_8((uint64_t)(v2 - 32) / 16);
  specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
  OUTLINED_FUNCTION_19_4();
  OUTLINED_FUNCTION_20_6();
  if (!v7)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v1;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: String)>, (void (*)(void))specialized Sequence._copySequenceContents(initializing:));
}

#error "3DAE0: call analysis failed (funcsize=60)"

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_15_6();
    if (!(v9 ^ v10 | v8))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
      uint64_t v11 = (void *)OUTLINED_FUNCTION_23_5();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v7;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 8);
    }
    if (v6 != v4)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(v5 + 8 * v4, v7);
      return;
    }
    goto LABEL_9;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  void *v11;
  size_t v12;

  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_15_6();
    if (!(v9 ^ v10 | v8))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v11 = (void *)OUTLINED_FUNCTION_23_5();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v7;
      v11[3] = (2 * ((uint64_t)(v12 - 32) / 8)) | 1;
    }
    if (v6 != v4)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(v5 + 8 * v4, v7);
      return;
    }
    goto LABEL_9;
  }
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  void *v10;
  size_t v11;

  uint64_t v5 = a4 >> 1;
  unint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_15_6();
    if (!(v8 ^ v9 | v7))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      char v10 = (void *)OUTLINED_FUNCTION_23_5();
      uint64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v6;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 16);
    }
    if (v5 != v4)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)();
      return;
    }
    goto LABEL_9;
  }
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  if (!*(void *)(a1 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v4 = (const void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  OUTLINED_FUNCTION_10_8((uint64_t)(v5 - 32) / 24);
  a3();
  OUTLINED_FUNCTION_19_4();
  OUTLINED_FUNCTION_20_6();
  if (!v6)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  Swift::String result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  Swift::String result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_132;
    }
    if (v3) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return;
  }
  Swift::Int v5 = v4;
  uint64_t v6 = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  uint64_t v105 = v3;
  v106 = v7;
  uint64_t v108 = v6;
  uint64_t v100 = a1;
  if (v3 <= 0) {
    goto LABEL_96;
  }
  Swift::Int v101 = v5;
  Swift::Int v8 = 0;
  uint64_t v9 = *a1;
  uint64_t v99 = *a1 - 8;
  char v10 = (char *)_swiftEmptyArrayStorage;
  uint64_t v107 = *a1;
  while (1)
  {
    Swift::Int v11 = v8++;
    Swift::Int v104 = v11;
    if (v8 < v3)
    {
      v102 = v10;
      size_t v12 = *(void **)(v9 + 8 * v11);
      id v13 = *(id *)(v9 + 8 * v8);
      id v14 = v12;
      id v15 = [v13 tag];
      id v16 = [v14 tag];

      Swift::Int v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        Swift::Int v17 = v11;
        while (1)
        {
          uint64_t v18 = v107 + 8 * v17;
          unint64_t v19 = *(void **)(v18 + 8);
          id v20 = *(id *)(v18 + 16);
          id v21 = v19;
          id v22 = [v20 tag];
          id v23 = [v21 tag];

          if ((uint64_t)v15 < (uint64_t)v16 == (uint64_t)v22 >= (uint64_t)v23) {
            break;
          }
          uint64_t v24 = v17 + 3;
          ++v17;
          Swift::Int v3 = v105;
          if (v24 >= v105)
          {
            Swift::Int v8 = v105;
            goto LABEL_11;
          }
        }
        Swift::Int v8 = v17 + 2;
        Swift::Int v3 = v105;
LABEL_11:
        Swift::Int v11 = v104;
      }
      char v10 = v102;
      if ((uint64_t)v15 >= (uint64_t)v16)
      {
        uint64_t v9 = v107;
      }
      else
      {
        uint64_t v9 = v107;
        if (v8 < v11) {
          goto LABEL_133;
        }
        if (v11 < v8)
        {
          uint64_t v25 = (uint64_t *)(v99 + 8 * v8);
          Swift::Int v26 = v8;
          Swift::Int v27 = v11;
          unint64_t v28 = (uint64_t *)(v107 + 8 * v11);
          do
          {
            if (v27 != --v26)
            {
              if (!v107) {
                goto LABEL_139;
              }
              uint64_t v29 = *v28;
              *unint64_t v28 = *v25;
              uint64_t *v25 = v29;
            }
            ++v27;
            --v25;
            ++v28;
          }
          while (v27 < v26);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11)) {
        goto LABEL_131;
      }
      if (v8 - v11 < v101)
      {
        if (__OFADD__(v11, v101)) {
          goto LABEL_134;
        }
        if (v11 + v101 >= v3) {
          Swift::Int v30 = v3;
        }
        else {
          Swift::Int v30 = v11 + v101;
        }
        if (v30 < v11)
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (v8 != v30)
        {
          v103 = v10;
          uint64_t v31 = v99 + 8 * v8;
          do
          {
            unint64_t v32 = *(void **)(v9 + 8 * v8);
            Swift::Int v33 = v11;
            uint64_t v34 = v31;
            while (1)
            {
              uint64_t v35 = *(void **)v34;
              id v36 = v32;
              id v37 = v35;
              id v38 = [v36 tag];
              id v39 = [v37 tag];

              if ((uint64_t)v38 >= (uint64_t)v39) {
                break;
              }
              uint64_t v9 = v107;
              if (!v107) {
                goto LABEL_137;
              }
              uint64_t v40 = *(void **)v34;
              unint64_t v32 = *(void **)(v34 + 8);
              *(void *)uint64_t v34 = v32;
              *(void *)(v34 + 8) = v40;
              v34 -= 8;
              if (v8 == ++v33) {
                goto LABEL_38;
              }
            }
            uint64_t v9 = v107;
LABEL_38:
            ++v8;
            v31 += 8;
            Swift::Int v11 = v104;
          }
          while (v8 != v30);
          Swift::Int v8 = v30;
          char v10 = v103;
        }
      }
    }
    if (v8 < v11) {
      goto LABEL_130;
    }
    os_log_type_t v41 = v10;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      char v10 = v41;
    }
    else {
      char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v41 + 2) + 1, 1, v41);
    }
    unint64_t v43 = *((void *)v10 + 2);
    unint64_t v42 = *((void *)v10 + 3);
    unint64_t v44 = v43 + 1;
    uint64_t v9 = v107;
    if (v43 >= v42 >> 1)
    {
      uint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v10);
      uint64_t v9 = v107;
      char v10 = v92;
    }
    *((void *)v10 + 2) = v44;
    uint64_t v45 = v10 + 32;
    os_log_type_t v46 = &v10[16 * v43 + 32];
    *(void *)os_log_type_t v46 = v11;
    *((void *)v46 + 1) = v8;
    if (v43) {
      break;
    }
    unint64_t v44 = 1;
LABEL_88:
    Swift::Int v3 = v105;
    if (v8 >= v105) {
      goto LABEL_97;
    }
  }
  while (1)
  {
    unint64_t v47 = v44 - 1;
    if (v44 >= 4)
    {
      uint64_t v52 = &v45[16 * v44];
      uint64_t v53 = *((void *)v52 - 8);
      uint64_t v54 = *((void *)v52 - 7);
      BOOL v58 = __OFSUB__(v54, v53);
      uint64_t v55 = v54 - v53;
      if (v58) {
        goto LABEL_115;
      }
      uint64_t v57 = *((void *)v52 - 6);
      uint64_t v56 = *((void *)v52 - 5);
      BOOL v58 = __OFSUB__(v56, v57);
      uint64_t v50 = v56 - v57;
      char v51 = v58;
      if (v58) {
        goto LABEL_116;
      }
      unint64_t v59 = v44 - 2;
      uint64_t v60 = &v45[16 * v44 - 32];
      uint64_t v62 = *(void *)v60;
      uint64_t v61 = *((void *)v60 + 1);
      BOOL v58 = __OFSUB__(v61, v62);
      uint64_t v63 = v61 - v62;
      if (v58) {
        goto LABEL_117;
      }
      BOOL v58 = __OFADD__(v50, v63);
      uint64_t v64 = v50 + v63;
      if (v58) {
        goto LABEL_119;
      }
      if (v64 >= v55)
      {
        uint64_t v82 = &v45[16 * v47];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v58 = __OFSUB__(v83, v84);
        uint64_t v85 = v83 - v84;
        if (v58) {
          goto LABEL_125;
        }
        BOOL v75 = v50 < v85;
        goto LABEL_77;
      }
    }
    else
    {
      if (v44 != 3)
      {
        uint64_t v76 = *((void *)v10 + 4);
        uint64_t v77 = *((void *)v10 + 5);
        BOOL v58 = __OFSUB__(v77, v76);
        uint64_t v69 = v77 - v76;
        char v70 = v58;
        goto LABEL_71;
      }
      uint64_t v49 = *((void *)v10 + 4);
      uint64_t v48 = *((void *)v10 + 5);
      BOOL v58 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      char v51 = v58;
    }
    if (v51) {
      goto LABEL_118;
    }
    unint64_t v59 = v44 - 2;
    char v65 = &v45[16 * v44 - 32];
    uint64_t v67 = *(void *)v65;
    uint64_t v66 = *((void *)v65 + 1);
    BOOL v68 = __OFSUB__(v66, v67);
    uint64_t v69 = v66 - v67;
    char v70 = v68;
    if (v68) {
      goto LABEL_120;
    }
    uint64_t v71 = &v45[16 * v47];
    uint64_t v73 = *(void *)v71;
    uint64_t v72 = *((void *)v71 + 1);
    BOOL v58 = __OFSUB__(v72, v73);
    uint64_t v74 = v72 - v73;
    if (v58) {
      goto LABEL_122;
    }
    if (__OFADD__(v69, v74)) {
      goto LABEL_124;
    }
    if (v69 + v74 >= v50)
    {
      BOOL v75 = v50 < v74;
LABEL_77:
      if (v75) {
        unint64_t v47 = v59;
      }
      goto LABEL_79;
    }
LABEL_71:
    if (v70) {
      goto LABEL_121;
    }
    Swift::String v78 = &v45[16 * v47];
    uint64_t v80 = *(void *)v78;
    uint64_t v79 = *((void *)v78 + 1);
    BOOL v58 = __OFSUB__(v79, v80);
    uint64_t v81 = v79 - v80;
    if (v58) {
      goto LABEL_123;
    }
    if (v81 < v69) {
      goto LABEL_88;
    }
LABEL_79:
    unint64_t v86 = v47 - 1;
    if (v47 - 1 >= v44)
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    if (!v9) {
      goto LABEL_138;
    }
    int64_t v87 = v10;
    Swift::Int v3 = (Swift::Int)&v45[16 * v86];
    uint64_t v88 = *(void *)v3;
    uint64_t v89 = &v45[16 * v47];
    uint64_t v90 = *((void *)v89 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v9 + 8 * *(void *)v3), (id *)(v9 + 8 * *(void *)v89), v9 + 8 * v90, v106);
    if (v1) {
      break;
    }
    if (v90 < v88) {
      goto LABEL_112;
    }
    if (v47 > *((void *)v87 + 2)) {
      goto LABEL_113;
    }
    *(void *)Swift::Int v3 = v88;
    *(void *)&v45[16 * v86 + 8] = v90;
    unint64_t v91 = *((void *)v87 + 2);
    if (v47 >= v91) {
      goto LABEL_114;
    }
    unint64_t v44 = v91 - 1;
    memmove(&v45[16 * v47], v89 + 16, 16 * (v91 - 1 - v47));
    char v10 = v87;
    *((void *)v87 + 2) = v91 - 1;
    uint64_t v9 = v107;
    if (v91 <= 2) {
      goto LABEL_88;
    }
  }
LABEL_94:
  swift_bridgeObjectRelease();
  if (v105 >= -1) {
    goto LABEL_109;
  }
  __break(1u);
LABEL_96:
  char v10 = (char *)_swiftEmptyArrayStorage;
  unint64_t v44 = _swiftEmptyArrayStorage[2];
LABEL_97:
  if (v44 >= 2)
  {
    uint64_t v93 = *v100;
    while (1)
    {
      Swift::Int v3 = v44 - 2;
      if (v44 < 2) {
        break;
      }
      if (!v93) {
        goto LABEL_140;
      }
      long long v94 = v10;
      uint64_t v95 = *(void *)&v10[16 * v3 + 32];
      uint64_t v96 = *(void *)&v10[16 * v44 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v93 + 8 * v95), (id *)(v93 + 8 * *(void *)&v10[16 * v44 + 16]), v93 + 8 * v96, v106);
      if (v1) {
        goto LABEL_94;
      }
      if (v96 < v95) {
        goto LABEL_127;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
      }
      if ((unint64_t)v3 >= *((void *)v94 + 2)) {
        goto LABEL_128;
      }
      v97 = &v94[16 * v3 + 32];
      *(void *)v97 = v95;
      *((void *)v97 + 1) = v96;
      unint64_t v98 = *((void *)v94 + 2);
      if (v44 > v98) {
        goto LABEL_129;
      }
      memmove(&v94[16 * v44 + 16], &v94[16 * v44 + 32], 16 * (v98 - v44));
      char v10 = v94;
      *((void *)v94 + 2) = v98 - 1;
      unint64_t v44 = v98 - 1;
      BOOL v75 = v98 > 2;
      Swift::Int v3 = v105;
      if (!v75) {
        goto LABEL_108;
      }
    }
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
LABEL_108:
  swift_bridgeObjectRelease();
  if (v3 >= -1)
  {
LABEL_109:
    *(void *)((char *)&dword_10 + (v108 & 0xFFFFFFFFFFFFFF8)) = 0;
    specialized Array._endMutation()();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
    while (2)
    {
      uint64_t v7 = *(void **)(v5 + 8 * v4);
      uint64_t v8 = a1;
      uint64_t v17 = v6;
      do
      {
        uint64_t v9 = *(void **)v6;
        id v10 = v7;
        id v11 = v9;
        id v12 = [v10 tag];
        id v13 = [v11 tag];

        if ((uint64_t)v12 >= (uint64_t)v13) {
          break;
        }
        if (!v5)
        {
          __break(1u);
          return;
        }
        id v14 = *(void **)v6;
        uint64_t v7 = *(void **)(v6 + 8);
        *(void *)uint64_t v6 = v7;
        *(void *)(v6 + 8) = v14;
        v6 -= 8;
        ++v8;
      }
      while (v4 != v8);
      ++v4;
      uint64_t v6 = v17 + 8;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **a1, id *a2, unint64_t a3, void **a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = (char *)a2 - (char *)a1;
  uint64_t v9 = a2 - a1;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8);
    id v39 = a4;
    id v12 = &a4[v11];
    if (v7 >= v6 || v10 < 8)
    {
LABEL_39:
      id v14 = v39;
      goto LABEL_40;
    }
    uint64_t v25 = (id *)(a3 - 8);
    while (1)
    {
      unint64_t v42 = v6;
      uint64_t v40 = v25 + 1;
      Swift::Int v26 = v12 - 1;
      Swift::Int v27 = v6 - 1;
      unint64_t v28 = *(v6 - 1);
      unint64_t v29 = (unint64_t)v12;
      id v30 = *(v12 - 1);
      id v31 = v28;
      id v32 = [v30 tag];
      id v33 = [v31 tag];

      if ((uint64_t)v32 >= (uint64_t)v33)
      {
        uint64_t v35 = v39;
        BOOL v36 = v40 != (id *)v29 || (unint64_t)v25 >= v29;
        Swift::Int v27 = v26;
        id v12 = v26;
        uint64_t v6 = v42;
        if (!v36) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v34 = v40 != v42 || v25 >= v42;
        uint64_t v35 = v39;
        id v12 = (void **)v29;
        uint64_t v6 = v27;
        if (!v34) {
          goto LABEL_35;
        }
      }
      id *v25 = *v27;
LABEL_35:
      --v25;
      if (v6 <= v7 || v12 <= v35) {
        goto LABEL_39;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1);
  id v12 = &a4[v9];
  BOOL v13 = (unint64_t)v6 >= a3 || v8 < 8;
  id v14 = a4;
  if (!v13)
  {
    unint64_t v41 = a3;
    do
    {
      unint64_t v15 = (unint64_t)v12;
      id v16 = *v14;
      id v17 = *v6;
      id v18 = v16;
      id v19 = [v17 tag];
      id v20 = [v18 tag];

      if ((uint64_t)v19 >= (uint64_t)v20)
      {
        id v21 = v14;
        BOOL v22 = v7 == v14++;
      }
      else
      {
        id v21 = v6;
        BOOL v22 = v7 == v6++;
      }
      id v12 = (void **)v15;
      if (!v22) {
        *uint64_t v7 = *v21;
      }
      ++v7;
    }
    while ((unint64_t)v14 < v15 && (unint64_t)v6 < v41);
  }
LABEL_40:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v12 - v14);
  return 1;
}

uint64_t outlined bridged method (pb) of @objc INIntent.parametersByName.getter(void *a1)
{
  id v1 = [a1 parametersByName];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return OUTLINED_FUNCTION_11_6();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined bridged method (ob) of @objc INIntentDescription.slotDescriptions()(void *a1)
{
  id v2 = [a1 slotDescriptions];

  if (!v2) {
    return 0;
  }
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntentSlotDescription);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(void *a1)
{
  id v1 = [a1 name];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbnn) of @objc INPreferences._cachedSiriLanguageCode.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 _setCachedSiriLanguageCode:v4];
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A]())()
{
  id v1 = OUTLINED_FUNCTION_2_9();
  uint64_t v2 = OUTLINED_FUNCTION_4_3((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  id v1 = OUTLINED_FUNCTION_2_9();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_4_3((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3, v4);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  id v1 = OUTLINED_FUNCTION_2_9();
  uint64_t v2 = OUTLINED_FUNCTION_4_3((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  id v1 = OUTLINED_FUNCTION_2_9();
  uint64_t v2 = OUTLINED_FUNCTION_4_3((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*specialized Array.subscript.read(uint64_t a1, uint64_t a2))(id *a1)
{
  uint64_t v6 = OUTLINED_FUNCTION_1_11(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v6, v7);
  if (v5) {
    id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v8 = *(id *)(v3 + 8 * v4 + 32);
  }
  *uint64_t v2 = v8;
  return Array.subscript.readspecialized ;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t (*specialized Array.subscript.read(void *a1, uint64_t a2, uint64_t a3))()
{
  unint64_t v6 = a3 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return Array.subscript.readspecialized ;
}

uint64_t (*specialized Array.subscript.read(uint64_t a1, uint64_t a2))()
{
  uint64_t v4 = OUTLINED_FUNCTION_1_11(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v4, v5);
  if (v3) {
    uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v6 = swift_retain();
  }
  *uint64_t v2 = v6;
  return Array.subscript.readspecialized ;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  uint64_t v6 = OUTLINED_FUNCTION_1_11(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v6, v7);
  if (v5) {
    id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v8 = *(id *)(v3 + 8 * v4 + 32);
  }
  *uint64_t v2 = v8;
  return Array.subscript.readspecialized ;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    BOOL v22 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = *(void *)(*(void *)(a4 + 48) + 8 * v16);
    uint64_t v21 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v16);
    id v23 = *v21;
    BOOL v22 = v21[1];
    *uint64_t v11 = v20;
    v11[1] = v23;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void OUTLINED_FUNCTION_0_10()
{
  *(void *)(v1 + 8 * (v0 >> 6) + 64) |= 1 << v0;
  uint64_t v8 = (void *)(*(void *)(v1 + 48) + 16 * v0);
  *uint64_t v8 = v5;
  v8[1] = v3;
  unint64_t v9 = (void *)(*(void *)(v1 + 56) + 32 * v0);
  *unint64_t v9 = v7;
  v9[1] = v6;
  v9[2] = v4;
  v9[3] = v2;
}

uint64_t OUTLINED_FUNCTION_1_11(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *OUTLINED_FUNCTION_2_9()
{
  return malloc(0x28uLL);
}

uint64_t OUTLINED_FUNCTION_3_7(long long *a1)
{
  outlined init with take of AceServiceInvokerAsync(a1, v1 - 160);
  uint64_t v2 = *(void *)(v1 - 136);
  __swift_project_boxed_opaque_existential_1((void *)(v1 - 160), v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_4_3(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  return String.index(_:offsetBy:limitedBy:)();
}

void OUTLINED_FUNCTION_10_8(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * a1;
}

uint64_t OUTLINED_FUNCTION_11_6()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_17_3()
{
  return String.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_18_6()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_19_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_20_6()
{
  return outlined consume of [String : DMFPolicy].Iterator._Variant();
}

BOOL OUTLINED_FUNCTION_21_4()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_23_5()
{
  return swift_allocObject();
}

double OUTLINED_FUNCTION_24_4()
{
  return 0.0;
}

void OfferMoreItemsCatTemplater.makeTemplate(nextPage:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v6 = [self bundleForClass:ObjCClassFromMetadata];
  static DialogHelper.globals.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_212170;
  strcpy((char *)(inited + 32), "nextPageSize");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 48) = Page.itemCount.getter();
  *(void *)(inited + 72) = &type metadata for Int;
  strcpy((char *)(inited + 80), "remainingPages");
  *(unsigned char *)(inited + 95) = -18;
  uint64_t v8 = Page.remainingPages.getter();
  if (__OFADD__(v8, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(inited + 120) = &type metadata for Int;
    *(void *)(inited + 96) = v8 + 1;
    unint64_t v9 = (void *)Dictionary.init(dictionaryLiteral:)();
    id v15 = self;
    NSString v10 = String._bridgeToObjectiveC()();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v9);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = a2;
    v13[3] = a3;
    v13[4] = 0xD00000000000001ELL;
    v13[5] = 0x8000000000224940;
    aBlock[4] = partial apply for closure #1 in OfferMoreItemsCatTemplater.makeTemplate(nextPage:_:);
    aBlock[5] = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_0;
    int64_t v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v15 execute:v6 catId:v10 parameters:isa globals:v12 completion:v14];
    _Block_release(v14);
  }
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(void *a1)
{
  if (a1[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v3 = (void *)OUTLINED_FUNCTION_12_6();
  }
  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }
  OUTLINED_FUNCTION_3_8();
  int64_t v31 = (unint64_t)(v4 - v5) >> 6;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = 0;
  if (!v1) {
    goto LABEL_6;
  }
LABEL_5:
  OUTLINED_FUNCTION_15_7();
  uint64_t v8 = v7 | (v6 << 6);
  while (1)
  {
    id v20 = (uint64_t *)(a1[6] + 16 * v8);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    outlined init with copy of Any(a1[7] + 32 * v8, (uint64_t)v43);
    *(void *)&long long v42 = v22;
    *((void *)&v42 + 1) = v21;
    v40[2] = v42;
    v41[0] = v43[0];
    v41[1] = v43[1];
    *(void *)&v40[0] = v22;
    *((void *)&v40[0] + 1) = v21;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v41, v35);
    long long v36 = v32;
    long long v37 = v33;
    uint64_t v38 = v34;
    outlined init with take of Any(v35, v39);
    long long v32 = v36;
    long long v33 = v37;
    uint64_t v34 = v38;
    outlined init with take of Any(v39, v40);
    outlined init with take of Any(v40, &v36);
    AnyHashable._rawHashValue(seed:)(v3[5]);
    OUTLINED_FUNCTION_2_10();
    if (v23)
    {
      OUTLINED_FUNCTION_7_8();
      while (++v26 != v27 || (v25 & 1) == 0)
      {
        BOOL v28 = v26 == v27;
        if (v26 == v27) {
          uint64_t v26 = 0;
        }
        v25 |= v28;
        if (v3[v26 + 8] != -1)
        {
          OUTLINED_FUNCTION_6_5();
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_9_5();
LABEL_34:
    OUTLINED_FUNCTION_1_12(v24);
    *(_OWORD *)uint64_t v29 = v32;
    *(_OWORD *)(v29 + 16) = v33;
    *(void *)(v29 + 32) = v34;
    outlined init with take of Any(&v36, (_OWORD *)(v3[7] + 32 * v30));
    ++v3[2];
    if (v1) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v6, 1)) {
      goto LABEL_38;
    }
    if (v6 + 1 >= v31) {
      goto LABEL_36;
    }
    OUTLINED_FUNCTION_21_5();
    if (!v9)
    {
      OUTLINED_FUNCTION_20_7();
      if (v10 == v11) {
        goto LABEL_36;
      }
      OUTLINED_FUNCTION_19_5();
      if (!v12)
      {
        OUTLINED_FUNCTION_20_7();
        if (v10 == v11) {
          goto LABEL_36;
        }
        OUTLINED_FUNCTION_19_5();
        if (!v13)
        {
          OUTLINED_FUNCTION_20_7();
          if (v10 == v11) {
            goto LABEL_36;
          }
          OUTLINED_FUNCTION_19_5();
          if (!v15)
          {
            uint64_t v16 = v14 + 4;
            if (v16 >= v31)
            {
LABEL_36:
              swift_release();
              outlined consume of [String : DMFPolicy].Iterator._Variant();
              return;
            }
            if (!a1[v16 + 8]) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    OUTLINED_FUNCTION_13_6();
    uint64_t v6 = v19;
  }
  while (!__OFADD__(v16, 1))
  {
    OUTLINED_FUNCTION_20_7();
    if (v10 == v11) {
      goto LABEL_36;
    }
    OUTLINED_FUNCTION_19_5();
    uint64_t v16 = v17 + 1;
    if (v18) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
}

{
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  long long v33;
  uint64_t v34;
  long long v35;
  long long v36;
  long long v37;
  uint64_t v38;
  _OWORD v39[2];
  _OWORD v40[2];

  if (a1[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = (void *)OUTLINED_FUNCTION_12_6();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  OUTLINED_FUNCTION_17_4();
  uint64_t v5 = -(-1 << v4);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & v3;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = 0;
  if (!v7) {
    goto LABEL_9;
  }
LABEL_8:
  OUTLINED_FUNCTION_16_7();
  char v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v17 = (uint64_t *)(a1[6] + 16 * v10);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    id v20 = (uint64_t *)(a1[7] + 16 * v10);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    *(void *)&v40[0] = v19;
    *((void *)&v40[0] + 1) = v18;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v21, v22);
    swift_dynamicCast();
    swift_dynamicCast();
    long long v36 = v32;
    long long v37 = v33;
    uint64_t v38 = v34;
    outlined init with take of Any(&v35, v39);
    long long v32 = v36;
    long long v33 = v37;
    uint64_t v34 = v38;
    outlined init with take of Any(v39, v40);
    outlined init with take of Any(v40, &v36);
    AnyHashable._rawHashValue(seed:)(v2[5]);
    OUTLINED_FUNCTION_2_10();
    if (v23)
    {
      OUTLINED_FUNCTION_7_8();
      while (++v26 != v27 || (v25 & 1) == 0)
      {
        BOOL v28 = v26 == v27;
        if (v26 == v27) {
          uint64_t v26 = 0;
        }
        v25 |= v28;
        if (v2[v26 + 8] != -1)
        {
          OUTLINED_FUNCTION_6_5();
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    OUTLINED_FUNCTION_9_5();
LABEL_40:
    OUTLINED_FUNCTION_1_12(v24);
    *(_OWORD *)uint64_t v29 = v32;
    *(_OWORD *)(v29 + 16) = v33;
    *(void *)(v29 + 32) = v34;
    outlined init with take of Any(&v36, (_OWORD *)(v2[7] + 32 * v30));
    ++v2[2];
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    if (__OFADD__(v8, 1)) {
      goto LABEL_44;
    }
    OUTLINED_FUNCTION_22_7();
    if (v11 == v12) {
      goto LABEL_42;
    }
    OUTLINED_FUNCTION_21_5();
    if (!v14)
    {
      OUTLINED_FUNCTION_4_4();
      if (v11 == v12) {
        goto LABEL_42;
      }
      OUTLINED_FUNCTION_10_9();
      if (!v14)
      {
        OUTLINED_FUNCTION_4_4();
        if (v11 == v12) {
          goto LABEL_42;
        }
        OUTLINED_FUNCTION_10_9();
        if (!v14)
        {
          OUTLINED_FUNCTION_4_4();
          if (v11 == v12) {
            goto LABEL_42;
          }
          OUTLINED_FUNCTION_10_9();
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_30:
    uint64_t v7 = (v14 - 1) & v14;
    char v10 = __clz(__rbit64(v14)) + (v13 << 6);
    uint64_t v8 = v13;
  }
  OUTLINED_FUNCTION_22_7();
  if (v11 == v12)
  {
LABEL_42:
    swift_release();
    outlined consume of [String : DMFPolicy].Iterator._Variant();
    return;
  }
  uint64_t v14 = *(void *)(v31 + 8 * v15);
  if (v14)
  {
    uint64_t v13 = v15;
    goto LABEL_30;
  }
  while (!__OFADD__(v15, 1))
  {
    OUTLINED_FUNCTION_4_4();
    if (v11 == v12) {
      goto LABEL_42;
    }
    uint64_t v14 = *(void *)(v31 + 8 * v13);
    uint64_t v15 = v16 + 1;
    if (v14) {
      goto LABEL_30;
    }
  }
LABEL_45:
  __break(1u);
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  OUTLINED_FUNCTION_12_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  uint64_t v57 = v8 - v7;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: URL));
  OUTLINED_FUNCTION_6();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v58 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v15 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v15 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v50 = v58 + 64;
  OUTLINED_FUNCTION_3_8();
  uint64_t v48 = v16;
  int64_t v49 = (unint64_t)(v17 - v16) >> 6;
  uint64_t v55 = v5 + 16;
  uint64_t v54 = &v63;
  uint64_t v53 = v5 + 32;
  uint64_t v52 = &v67;
  uint64_t v18 = (char *)(v15 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v59 = 0;
  char v51 = (char *)&type metadata for Any + 8;
  if (!v1) {
    goto LABEL_6;
  }
LABEL_5:
  OUTLINED_FUNCTION_15_7();
  uint64_t v20 = v19 | (v59 << 6);
  while (1)
  {
    long long v32 = (uint64_t *)(*(void *)(v58 + 48) + 16 * v20);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v14[*(int *)(v56 + 48)], *(void *)(v58 + 56) + *(void *)(v5 + 72) * v20, v3);
    *(void *)uint64_t v14 = v34;
    *((void *)v14 + 1) = v33;
    outlined init with take of (key: String, value: URL)((uint64_t)v14, (uint64_t)v12);
    long long v36 = (char *)v12 + *(int *)(v35 + 48);
    uint64_t v37 = v12[1];
    *(void *)&long long v68 = *v12;
    *((void *)&v68 + 1) = v37;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v57, v36, v3);
    uint64_t v38 = v54;
    swift_dynamicCast();
    long long v64 = v60;
    long long v65 = v61;
    uint64_t v66 = v62;
    id v39 = v38;
    uint64_t v40 = v52;
    outlined init with take of Any(v39, v52);
    long long v60 = v64;
    long long v61 = v65;
    uint64_t v62 = v66;
    outlined init with take of Any(v40, &v68);
    outlined init with take of Any(&v68, &v64);
    unint64_t v41 = AnyHashable._rawHashValue(seed:)(v15[5]) & ~(-1 << *((unsigned char *)v15 + 32));
    if (((-1 << v41) & ~*(void *)&v18[8 * (v41 >> 6)]) == 0)
    {
      OUTLINED_FUNCTION_7_8();
      while (++v44 != v45 || (v43 & 1) == 0)
      {
        BOOL v46 = v44 == v45;
        if (v44 == v45) {
          uint64_t v44 = 0;
        }
        v43 |= v46;
        if (*(void *)&v18[8 * v44] != -1)
        {
          OUTLINED_FUNCTION_6_5();
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_9_5();
LABEL_34:
    *(void *)&v18[(v42 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v42;
    uint64_t v47 = v15[6] + 40 * v42;
    *(_OWORD *)uint64_t v47 = v60;
    *(_OWORD *)(v47 + 16) = v61;
    *(void *)(v47 + 32) = v62;
    outlined init with take of Any(&v64, (_OWORD *)(v15[7] + 32 * v42));
    ++v15[2];
    if (v1) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v59, 1)) {
      goto LABEL_38;
    }
    if (v59 + 1 >= v49) {
      goto LABEL_36;
    }
    OUTLINED_FUNCTION_21_5();
    if (!v21)
    {
      OUTLINED_FUNCTION_8_6();
      if (v22 == v23) {
        goto LABEL_36;
      }
      OUTLINED_FUNCTION_5_6();
      if (!v24)
      {
        OUTLINED_FUNCTION_8_6();
        if (v22 == v23) {
          goto LABEL_36;
        }
        OUTLINED_FUNCTION_5_6();
        if (!v25)
        {
          OUTLINED_FUNCTION_8_6();
          if (v22 == v23) {
            goto LABEL_36;
          }
          OUTLINED_FUNCTION_5_6();
          if (!v27)
          {
            uint64_t v28 = v26 + 4;
            if (v28 >= v49)
            {
LABEL_36:
              swift_release();
              outlined consume of [String : DMFPolicy].Iterator._Variant();
              return;
            }
            if (!*(void *)(v50 + 8 * v28)) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    OUTLINED_FUNCTION_13_6();
    uint64_t v59 = v31;
  }
  while (!__OFADD__(v28, 1))
  {
    OUTLINED_FUNCTION_8_6();
    if (v22 == v23) {
      goto LABEL_36;
    }
    OUTLINED_FUNCTION_5_6();
    uint64_t v28 = v29 + 1;
    if (v30) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t *v30;
  _OWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  long long v41;
  uint64_t v42;
  _OWORD v43[2];

  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v2 = (void *)OUTLINED_FUNCTION_12_6();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  OUTLINED_FUNCTION_17_4();
  uint64_t v5 = -(-1 << v4);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & v3;
  uint64_t v8 = &v40;
  uint64_t v9 = &v42;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  uint64_t v11 = (char *)&type metadata for Any + 8;
  uint64_t v12 = &type metadata for Int;
  while (1)
  {
    while (1)
    {
      if (v7)
      {
        OUTLINED_FUNCTION_16_7();
        uint64_t v37 = v7;
        uint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        if (__OFADD__(v10, 1)) {
          goto LABEL_40;
        }
        OUTLINED_FUNCTION_22_7();
        if (v15 == v16)
        {
LABEL_37:
          outlined consume of [String : DMFPolicy].Iterator._Variant();
          return;
        }
        OUTLINED_FUNCTION_21_5();
        if (!v18)
        {
          OUTLINED_FUNCTION_4_4();
          if (v15 == v16) {
            goto LABEL_37;
          }
          OUTLINED_FUNCTION_10_9();
          if (!v18)
          {
            OUTLINED_FUNCTION_4_4();
            if (v15 == v16) {
              goto LABEL_37;
            }
            OUTLINED_FUNCTION_10_9();
            if (!v18)
            {
              OUTLINED_FUNCTION_4_4();
              if (v15 == v16) {
                goto LABEL_37;
              }
              OUTLINED_FUNCTION_10_9();
              if (!v18)
              {
                OUTLINED_FUNCTION_22_7();
                if (v15 == v16) {
                  goto LABEL_37;
                }
                uint64_t v18 = *(void *)(v35 + 8 * v19);
                if (!v18)
                {
                  while (!__OFADD__(v19, 1))
                  {
                    OUTLINED_FUNCTION_4_4();
                    if (v15 == v16) {
                      goto LABEL_37;
                    }
                    uint64_t v18 = *(void *)(v35 + 8 * v17);
                    uint64_t v19 = v20 + 1;
                    if (v18) {
                      goto LABEL_31;
                    }
                  }
                  goto LABEL_41;
                }
                uint64_t v17 = v19;
              }
            }
          }
        }
LABEL_31:
        uint64_t v37 = (v18 - 1) & v18;
        uint64_t v14 = __clz(__rbit64(v18)) + (v17 << 6);
        uint64_t v10 = v17;
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v14);
      uint64_t v38 = *v21;
      id v39 = v21[1];
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      outlined init with take of Any(v8, v9);
      outlined init with take of Any(v9, v43);
      outlined init with take of Any(v43, &v41);
      char v22 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
      char v23 = v22;
      if ((v24 & 1) == 0) {
        break;
      }
      long long v36 = v10;
      uint64_t v25 = v9;
      uint64_t v26 = v8;
      uint64_t v27 = v1;
      uint64_t v28 = v12;
      uint64_t v29 = v11;
      uint64_t v30 = (uint64_t *)(v2[6] + 16 * v22);
      swift_bridgeObjectRelease();
      *uint64_t v30 = v38;
      v30[1] = v39;
      uint64_t v11 = v29;
      uint64_t v12 = v28;
      uint64_t v1 = v27;
      uint64_t v8 = v26;
      uint64_t v9 = v25;
      uint64_t v10 = v36;
      uint64_t v31 = (_OWORD *)(v2[7] + 32 * v23);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
      outlined init with take of Any(&v41, v31);
      uint64_t v7 = v37;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v22;
    long long v32 = (uint64_t *)(v2[6] + 16 * v22);
    *long long v32 = v38;
    v32[1] = v39;
    outlined init with take of Any(&v41, (_OWORD *)(v2[7] + 32 * v22));
    uint64_t v33 = v2[2];
    uint64_t v16 = __OFADD__(v33, 1);
    uint64_t v34 = v33 + 1;
    if (v16) {
      goto LABEL_39;
    }
    v2[2] = v34;
    uint64_t v7 = v37;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

uint64_t closure #1 in OfferMoreItemsCatTemplater.makeTemplate(nextPage:_:)(void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5)
{
  v21[1] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for TemplatingResult();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    *uint64_t v10 = a2;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v10);
    return outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }
  else
  {
    swift_bridgeObjectRetain();
    id v16 = [a1 print];
    uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v21[0] = a3;
    uint64_t v18 = v17;

    id v19 = [a1 speak];
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    TemplatingResult.init(dialogId:print:speak:)(v18, v20, v14);
    (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v10, v14, v11);
    swift_storeEnumTagMultiPayload();
    ((void (*)(void *))v21[0])(v10);
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_40D6C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in OfferMoreItemsCatTemplater.makeTemplate(nextPage:_:)(void *a1, uint64_t a2)
{
  return closure #1 in OfferMoreItemsCatTemplater.makeTemplate(nextPage:_:)(a1, a2, *(void (**)(void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

void thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t DescribeCustomIntentItemCatTemplater.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DescribeCustomIntentItemCatTemplater.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t protocol witness for OfferMoreItemsTemplating.makeTemplate(nextPage:_:) in conformance OfferMoreItemsCatTemplater()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t DescribeCustomIntentItemViewBuilder.__allocating_init(viewFactory:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t DescribeCustomIntentItemViewBuilder.init(viewFactory:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return IntroduceCustomIntentCatTemplater.deinit();
}

uint64_t OfferMoreItemsViewBuilder.makeViews(withTemplate:)()
{
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v0 = dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_211C70;
  *(void *)(v1 + 32) = v0;
  uint64_t v3 = v1;
  specialized Array._endMutation()();
  return v3;
}

uint64_t DescribeCustomIntentItemViewBuilder.deinit()
{
  swift_release();
  return v0;
}

uint64_t DescribeCustomIntentItemViewBuilder.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for OfferMoreItemsViewBuilding.makeViews(withTemplate:) in conformance OfferMoreItemsViewBuilder()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t OfferMoreItemsOutputProvider.__allocating_init(nextPage:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OfferMoreItemsOutputProvider.__allocating_init(nextPage:templating:viewBuilder:)(a1, a2, a3, specialized OfferMoreItemsOutputProvider.__allocating_init(nextPage:templating:viewBuilder:));
}

uint64_t OfferMoreItemsOutputProvider.init(nextPage:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OfferMoreItemsOutputProvider.__allocating_init(nextPage:templating:viewBuilder:)(a1, a2, a3, specialized OfferMoreItemsOutputProvider.init(nextPage:templating:viewBuilder:));
}

uint64_t OfferMoreItemsOutputProvider.__allocating_init(nextPage:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v10);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_20_0();
  uint64_t v14 = v13 - v12;
  (*(void (**)(uint64_t))(v15 + 16))(v13 - v12);
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(a3 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a3, v16);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_20_0();
  uint64_t v21 = v20 - v19;
  (*(void (**)(uint64_t))(v22 + 16))(v20 - v19);
  uint64_t v23 = a4(a1, v14, v21, v5, v10, v16, v9, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v23;
}

uint64_t OfferMoreItemsOutputProvider.makeOutput(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating + 24);
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating), v5);
  uint64_t v7 = v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_nextPage;
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = a1;
  v8[3] = a2;
  v8[4] = v2;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v6 + 8);
  swift_retain();
  swift_retain();
  v9(v7, partial apply for closure #1 in OfferMoreItemsOutputProvider.makeOutput(_:), v8, v5, v6);

  return swift_release();
}

uint64_t closure #1 in OfferMoreItemsOutputProvider.makeOutput(_:)(uint64_t a1, void (*a2)(long long *), uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AceOutput();
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  __chkstk_darwin(v10);
  uint64_t v38 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NLContextUpdate();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v39 = v12;
  uint64_t v40 = v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TemplatingResult();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v20);
  uint64_t v22 = (uint64_t *)((char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)&long long v43 = *v22;
    char v46 = 1;
    swift_errorRetain();
    a2(&v43);
    swift_errorRelease();
  }
  else
  {
    uint64_t v35 = a2;
    uint64_t v36 = a3;
    (*(void (**)(char *, void *, uint64_t))(v17 + 32))(v19, v22, v16);
    uint64_t v23 = *(void *)(v37 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder + 24);
    uint64_t v24 = *(void *)(v37 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v37 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder), v23);
    unint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 8))(v19, v23, v24);
    NLContextUpdate.init()();
    NLContextUpdate.weightedPromptResponseOptions.setter();
    NLContextUpdate.weightedPromptTargetDomain.setter();
    NLContextUpdate.currentDomainName.setter();
    NLContextUpdate.dictationPromptTargetDomain.setter();
    NLContextUpdate.dictationPromptTargetNodes.setter();
    NLContextUpdate.dictationPromptAbortValues.setter();
    uint64_t v34 = v16;
    if (v25 >> 62)
    {
      type metadata accessor for SABaseCommand();
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for SABaseCommand();
    }
    swift_bridgeObjectRelease();
    uint64_t v45 = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    uint64_t v27 = v39;
    uint64_t v26 = v40;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v9, v15, v39);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v27);
    uint64_t v28 = v38;
    AceOutput.init(commands:flowActivity:nlContextUpdate:)();
    uint64_t v29 = v42;
    *((void *)&v44 + 1) = v42;
    uint64_t v45 = &protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v43);
    uint64_t v31 = v41;
    (*(void (**)(uint64_t *, char *, uint64_t))(v41 + 16))(boxed_opaque_existential_1, v28, v29);
    char v46 = 0;
    v35(&v43);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v29);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v27);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v34);
  }
  return outlined destroy of Any?((uint64_t)&v43, &demangling cache variable for type metadata for Result<Output, Error>);
}

uint64_t OfferMoreItemsOutputProvider.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_nextPage;
  type metadata accessor for Page();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating);
  return v0;
}

uint64_t OfferMoreItemsOutputProvider.__deallocating_deinit()
{
  OfferMoreItemsOutputProvider.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized OfferMoreItemsOutputProvider.__allocating_init(nextPage:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v13 = __chkstk_darwin(a1);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v13);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v26 - v21;
  (*(void (**)(char *))(v17 + 32))((char *)&v26 - v21);
  type metadata accessor for OfferMoreItemsOutputProvider();
  uint64_t v23 = swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, a6);
  uint64_t v24 = specialized OfferMoreItemsOutputProvider.init(nextPage:templating:viewBuilder:)(a1, (uint64_t)v20, (uint64_t)v15, v23, a5, a6, v26, v27);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a3, a6);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v22, a5);
  return v24;
}

uint64_t specialized OfferMoreItemsOutputProvider.init(nextPage:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (uint64_t *)(a4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating);
  v15[3] = a5;
  v15[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a2, a5);
  uint64_t v17 = (uint64_t *)(a4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder);
  v17[3] = a6;
  v17[4] = a8;
  uint64_t v18 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(v18, a3, a6);
  uint64_t v19 = a4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_nextPage;
  uint64_t v20 = type metadata accessor for Page();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a1, v20);
  return a4;
}

uint64_t sub_41BD4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in OfferMoreItemsOutputProvider.makeOutput(_:)(uint64_t a1)
{
  return closure #1 in OfferMoreItemsOutputProvider.makeOutput(_:)(a1, *(void (**)(long long *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t type metadata accessor for OfferMoreItemsCatTemplater()
{
  return self;
}

uint64_t type metadata accessor for OfferMoreItemsViewBuilder()
{
  return self;
}

uint64_t ObjC metadata update function for OfferMoreItemsOutputProvider()
{
  return type metadata accessor for OfferMoreItemsOutputProvider();
}

uint64_t type metadata accessor for OfferMoreItemsOutputProvider()
{
  uint64_t result = type metadata singleton initialization cache for OfferMoreItemsOutputProvider;
  if (!type metadata singleton initialization cache for OfferMoreItemsOutputProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for OfferMoreItemsOutputProvider()
{
  uint64_t result = type metadata accessor for Page();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t outlined init with take of (key: String, value: URL)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: URL));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Result<TemplatingResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for SABaseCommand()
{
  unint64_t result = lazy cache variable for type metadata for SABaseCommand;
  if (!lazy cache variable for type metadata for SABaseCommand)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  }
  return result;
}

void OUTLINED_FUNCTION_1_12(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t OUTLINED_FUNCTION_12_6()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

void default argument 8 of WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)()
{
}

uint64_t closure #1 in default argument 8 of WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t WFExecuteCustomIntentFlow.__allocating_init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  OUTLINED_FUNCTION_10_10(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = *(void *)(a9 + 24);
  uint64_t v13 = *(void *)(a9 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a9, v12);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_20_0();
  uint64_t v17 = v16 - v15;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v18 + 16))(v16 - v15);
  uint64_t v27 = OUTLINED_FUNCTION_11_7(v19, v20, v21, v22, v23, v24, v25, v26, v17, a10, a11, v11, v12, v13);
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  return v27;
}

uint64_t WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  OUTLINED_FUNCTION_10_10(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = *(void *)(a9 + 24);
  uint64_t v13 = *(void *)(a9 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a9, v12);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_20_0();
  uint64_t v17 = v16 - v15;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v18 + 16))(v16 - v15);
  uint64_t v27 = OUTLINED_FUNCTION_11_7(v19, v20, v21, v22, v23, v24, v25, v26, v17, a10, a11, v11, v12, v13);
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  return v27;
}

uint64_t WFExecuteCustomIntentFlow.exitValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  int v3 = *(unsigned __int8 *)(v0 + 32);
  if (v3 == 3)
  {
    id v6 = (id)v2;
    id v7 = (id)v1;
  }
  else if (v3 == 4)
  {
    swift_errorRetain();
  }
  else if (v3 == 5 && (v2 | v1) == 0)
  {
    return 0;
  }
  else
  {
    lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
    uint64_t v1 = OUTLINED_FUNCTION_9_6();
    *uint64_t v5 = 0;
  }
  return v1;
}

uint64_t WFExecuteCustomIntentFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[47] = v2;
  v1[48] = v0;
  type metadata accessor for CATOption();
  v1[49] = swift_task_alloc();
  return _swift_task_switch(WFExecuteCustomIntentFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  int v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  char v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  char v50;
  char v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  char v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  void *v64;
  id v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t);
  uint64_t v77;
  void *v78;
  void *v79;
  char v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  char v88;
  id v89;
  uint64_t (*v90)(void);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  long long *v94;
  id v95;
  void *v96;
  uint64_t v97;

  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void **)(v1 + 16);
  *(void *)(v0 + 400) = v2;
  int v3 = *(void **)(v1 + 24);
  *(void *)(v0 + 408) = v3;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 32);
  if (v4 == 2)
  {
    outlined copy of WFExecuteCustomIntentFlow.State(v2, v3, 2);
    swift_retain();
    uint64_t v10 = v3;
    uint64_t v11 = [v10 typeName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = OUTLINED_FUNCTION_15_8();
    LOBYTE(v11) = static VoiceCommandsParity.isParityIntent(intentName:)(v12, v13);
    swift_bridgeObjectRelease();
    if (v11)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      uint64_t v15 = OUTLINED_FUNCTION_26_1(v14, (uint64_t)static Logger.voiceCommands);
      uint64_t v16 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl(&dword_0, v15, v16, "#WFExecuteCustomIntentFlow execute parity intent.", v17, 2u);
        OUTLINED_FUNCTION_7_0();
      }
      uint64_t v18 = *(void *)(v0 + 384);

      outlined init with copy of DeviceState(v18 + 184, v0 + 216);
      type metadata accessor for VoiceCommandParityFlow();
      swift_allocObject();
      *(void *)(v0 + 336) = VoiceCommandParityFlow.init(intent:app:outputPublisher:)((uint64_t)v10, (uint64_t)v2, (long long *)(v0 + 216));
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = partial apply for implicit closure #7 in implicit closure #6 in WFExecuteCustomIntentFlow.execute();
      *(void *)(v19 + 24) = v18;
      lazy protocol witness table accessor for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow(&lazy protocol witness table cache variable for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow, 255, (void (*)(uint64_t))type metadata accessor for VoiceCommandParityFlow);
      swift_retain();
      swift_retain();
      uint64_t v20 = v10;
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();

      swift_release();
      outlined consume of WFExecuteCustomIntentFlow.State(v2, v3, 2);
    }
    else
    {
      uint64_t v37 = v0 + 56;
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = OUTLINED_FUNCTION_26_1(v38, (uint64_t)static Logger.voiceCommands);
      uint64_t v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        *(_WORD *)OUTLINED_FUNCTION_33() = 0;
        OUTLINED_FUNCTION_17_5(&dword_0, v41, v42, "#WFExecuteCustomIntentFlow execute custom intent.");
        uint64_t v37 = v0 + 56;
        OUTLINED_FUNCTION_7_0();
      }
      long long v43 = *(void *)(v0 + 384);

      outlined init with copy of DeviceState(v43 + 64, v0 + 16);
      long long v44 = *(void *)(v43 + 56);
      uint64_t v93 = *(void *)(v43 + 48);
      outlined init with copy of DeviceState(v43 + 104, v37);
      outlined init with copy of DeviceState(v43 + 144, v0 + 96);
      outlined init with copy of DeviceState(v43 + 232, v0 + 136);
      type metadata accessor for CustomIntentExecutionFlow(0);
      swift_allocObject();
      uint64_t v95 = v10;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 360) = CustomIntentExecutionFlow.init(runner:intent:voiceCommandName:deviceIdiom:deviceState:aceServiceInvoker:appPolicyHandler:)(v0 + 16, v3, v93, v44, 0, 1, v37, v0 + 96, v0 + 136);
      lazy protocol witness table accessor for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow(&lazy protocol witness table cache variable for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow, 255, (void (*)(uint64_t))type metadata accessor for CustomIntentExecutionFlow);
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();

      swift_release();
      outlined consume of WFExecuteCustomIntentFlow.State(v2, v3, 2);
    }
    swift_release();
    goto LABEL_36;
  }
  if (v4 != 1)
  {
    if (*(unsigned char *)(v1 + 32))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      uint64_t v34 = OUTLINED_FUNCTION_26_1(v33, (uint64_t)static Logger.voiceCommands);
      uint64_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl(&dword_0, v34, v35, "#WFExecuteCustomIntentFlow complete", v36, 2u);
        OUTLINED_FUNCTION_7_0();
      }

      static ExecuteResponse.complete()();
      goto LABEL_62;
    }
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 104), *(void *)(v1 + 128));
    outlined copy of WFExecuteCustomIntentFlow.State(v2, v3, 0);
    swift_retain();
    uint64_t v5 = v3;
    OUTLINED_FUNCTION_15_8();
    if (dispatch thunk of DeviceState.isCarPlay.getter())
    {
      id v6 = [v5 typeName];
      id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;

      if (v7 == 0xD000000000000051 && v9 == 0x8000000000226870)
      {
        swift_bridgeObjectRelease();
LABEL_38:
        outlined init with copy of DeviceState(*(void *)(v0 + 384) + 184, v0 + 176);
        type metadata accessor for SimpleOutputFlowAsync();
        swift_allocObject();
        swift_retain();
        *(void *)(v0 + 368) = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
        Flow.eraseToAnyFlow()();
        swift_release();
        lazy protocol witness table accessor for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError();
        char v46 = OUTLINED_FUNCTION_9_6();
        *(void *)uint64_t v47 = 0;
        *(unsigned char *)(v47 + 8) = 1;
        int64_t v49 = *(void **)(v1 + 16);
        uint64_t v48 = *(void **)(v1 + 24);
        *(void *)(v1 + 16) = v46;
        *(void *)(v1 + 24) = 0;
        uint64_t v50 = *(unsigned char *)(v1 + 32);
        *(unsigned char *)(v1 + 32) = 4;
        outlined consume of WFExecuteCustomIntentFlow.State(v49, v48, v50);
        static ExecuteResponse.ongoing(next:)();
        swift_release();

LABEL_40:
        swift_release();
        uint64_t v55 = v2;
        uint64_t v56 = v3;
        uint64_t v57 = 0;
LABEL_61:
        outlined consume of WFExecuteCustomIntentFlow.State(v55, v56, v57);
        goto LABEL_62;
      }
      uint64_t v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v45) {
        goto LABEL_38;
      }
    }
    *(void *)(v1 + 16) = v2;
    *(void *)(v1 + 24) = v3;
    char v51 = *(unsigned char *)(v1 + 32);
    *(unsigned char *)(v1 + 32) = 1;
    swift_retain();
    uint64_t v52 = v5;
    uint64_t v53 = (void *)OUTLINED_FUNCTION_15_8();
    outlined consume of WFExecuteCustomIntentFlow.State(v53, v54, v51);
    static ExecuteResponse.ongoing(requireInput:)();

    goto LABEL_40;
  }
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 104), *(void *)(v1 + 128));
  uint64_t v21 = (void *)OUTLINED_FUNCTION_7_9();
  outlined copy of WFExecuteCustomIntentFlow.State(v21, v22, v23);
  swift_retain();
  uint64_t v24 = v3;
  if ((dispatch thunk of DeviceState.isLockedWithPasscode.getter() & 1) == 0) {
    goto LABEL_56;
  }
  if (WFExecuteCustomIntentFlow.shouldRequestUserToUnlockDeviceBeforeRunningCustomIntent(intent:)()) {
    goto LABEL_16;
  }
  uint64_t v58 = [v24 typeName];
  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v61 = v60;

  if (v59 == 0xD000000000000029 && v61 == 0x80000000002239F0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  uint64_t v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v62 & 1) == 0)
  {
LABEL_56:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v81 = type metadata accessor for Logger();
    uint64_t v82 = OUTLINED_FUNCTION_26_1(v81, (uint64_t)static Logger.voiceCommands);
    uint64_t v83 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v82, v83))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_17_5(&dword_0, v84, v85, "#WFExecuteCustomIntentFlow does not need unlock");
      OUTLINED_FUNCTION_7_0();
    }

    unint64_t v86 = *(void **)(v1 + 16);
    int64_t v87 = *(void **)(v1 + 24);
    *(void *)(v1 + 16) = v2;
    *(void *)(v1 + 24) = v3;
    uint64_t v88 = *(unsigned char *)(v1 + 32);
    *(unsigned char *)(v1 + 32) = 2;
    swift_retain();
    uint64_t v89 = v24;
    outlined consume of WFExecuteCustomIntentFlow.State(v86, v87, v88);
    static ExecuteResponse.ongoing(requireInput:)();

    swift_release();
    uint64_t v55 = (void *)OUTLINED_FUNCTION_7_9();
    goto LABEL_61;
  }
LABEL_45:
  self;
  uint64_t v63 = swift_dynamicCastObjCClass();
  if (!v63) {
    goto LABEL_56;
  }
  long long v64 = (void *)v63;
  long long v65 = v24;
  uint64_t v66 = outlined bridged method (pb) of @objc INSendMessageIntent.attachments.getter(v64);
  if (!v66)
  {

    goto LABEL_56;
  }
  if (v66 >> 62) {
    uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v67 = *(void *)((char *)&dword_10 + (v66 & 0xFFFFFFFFFFFFFF8));
  }

  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_56;
  }
LABEL_16:
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = OUTLINED_FUNCTION_26_1(v25, (uint64_t)static Logger.voiceCommands);
  uint64_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_0, v26, v27, "#WFExecuteCustomIntentFlow needs unlock", v28, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  __swift_project_boxed_opaque_existential_1((void *)(v1 + 104), *(void *)(v1 + 128));
  dispatch thunk of DeviceState.sessionHandOffContinuityID.getter();
  *(void *)(v0 + 416) = v29;
  if (!v29) {
    goto LABEL_52;
  }
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 104), *(void *)(v1 + 128));
  if ((dispatch thunk of DeviceState.isHomePod.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_52:
    long long v94 = (long long *)(v0 + 256);
    uint64_t v96 = v24;
    outlined init with copy of DeviceState(v1 + 104, v0 + 296);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    long long v68 = *(void *)(v0 + 384);
    uint64_t v69 = static WFDialogState.shared;
    type metadata accessor for RunCustomIntentCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v92 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunCustomIntentCATsSimple();
    static CATOption.defaultMode.getter();
    unint64_t v91 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATs();
    static CATOption.defaultMode.getter();
    char v70 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v71 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for AppNameResolver();
    uint64_t v72 = swift_allocObject();
    type metadata accessor for CustomIntentsDialogTemplating();
    uint64_t v73 = swift_allocObject();
    uint64_t v74 = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)((long long *)(v0 + 296), v69, 0, 1, v92, v91, v70, v71, v72, v73);
    outlined init with copy of DeviceState(v1 + 104, (uint64_t)v94);
    type metadata accessor for ShortcutsUnlockDeviceStrategy();
    BOOL v75 = swift_allocObject();
    *(void *)(v75 + 16) = v74;
    outlined init with take of AceServiceInvokerAsync(v94, v75 + 24);
    uint64_t v76 = *(uint64_t (**)(uint64_t))(v68 + 272);
    swift_retain();
    *(void *)(v0 + 344) = v76(v75);
    type metadata accessor for GuardFlow();
    *(void *)(v0 + 352) = Flow.eraseToAnyValueFlow()();
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = partial apply for implicit closure #5 in implicit closure #4 in WFExecuteCustomIntentFlow.execute();
    *(void *)(v77 + 24) = v68;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
    lazy protocol witness table accessor for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>();
    static ExecuteResponse.replan<A>(next:childCompletion:)();
    swift_release();
    swift_release();
    swift_release();
    Swift::String v78 = (void *)OUTLINED_FUNCTION_7_9();
    outlined consume of WFExecuteCustomIntentFlow.State(v78, v79, v80);
    swift_release();

    swift_release();
LABEL_36:
    swift_release();
LABEL_62:
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v90();
  }
  uint64_t v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v30;
  *uint64_t v30 = v0;
  v30[1] = WFExecuteCustomIntentFlow.execute();
  uint64_t v31 = *(void *)(v0 + 376);
  return WFExecuteCustomIntentFlow.handoffToCompanionDevice(continuityId:)(v31);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(WFExecuteCustomIntentFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 400);
  uint64_t v2 = *(void **)(v0 + 408);

  swift_release();
  outlined consume of WFExecuteCustomIntentFlow.State(v1, v2, 1);
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t closure #1 in WFExecuteCustomIntentFlow.execute()(uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  v2[8] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[10] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(closure #1 in WFExecuteCustomIntentFlow.execute(), 0, 0);
}

uint64_t closure #1 in WFExecuteCustomIntentFlow.execute()()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[8];
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v3 = (void *)CATWrapper.__allocating_init(options:globals:)();
  v0[15] = v3;
  uint64_t v4 = v2 + 13;
  uint64_t v5 = v2[16];
  uint64_t v6 = v2[17];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v7 = DeviceState.asSiriKitDeviceState()(v5, v6);
  v0[16] = v7;
  uint64_t v8 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v8);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(class metadata base offset for RunVoiceCommandCATs
                                                                      + *v3
                                                                      + 32)
                                                          + **(int **)(class metadata base offset for RunVoiceCommandCATs
                                                                     + *v3
                                                                     + 32));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[17] = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in WFExecuteCustomIntentFlow.execute();
  uint64_t v10 = v0[14];
  uint64_t v11 = v0[10];
  return v13(v10, v7, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  swift_release();
  if (v0) {
    uint64_t v7 = closure #1 in WFExecuteCustomIntentFlow.execute();
  }
  else {
    uint64_t v7 = closure #1 in WFExecuteCustomIntentFlow.execute();
  }
  return _swift_task_switch(v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(uint64_t **)(v0 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 64) + 104), *(void *)(*(void *)(v0 + 64) + 128));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v3);
  uint64_t v4 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v2[3] = v4;
  v2[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v2);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v5 = OUTLINED_FUNCTION_15_8();
  v6(v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void implicit closure #5 in implicit closure #4 in WFExecuteCustomIntentFlow.execute()(char a1)
{
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned GuardFlowResult) -> ()(unsigned __int8 *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t WFExecuteCustomIntentFlow.execute(completion:)()
{
  type metadata accessor for WFExecuteCustomIntentFlow();
  lazy protocol witness table accessor for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow(&lazy protocol witness table cache variable for type WFExecuteCustomIntentFlow and conformance WFExecuteCustomIntentFlow, v0, (void (*)(uint64_t))type metadata accessor for WFExecuteCustomIntentFlow);
  return Flow.deferToExecuteAsync(_:)();
}

void WFExecuteCustomIntentFlow.processDeviceUnlockResult(exitValue:)(char a1)
{
  if (*(unsigned char *)(v1 + 32) == 1)
  {
    if ((a1 & 1) == 0)
    {
      uint64_t v2 = *(void **)(v1 + 24);
      *(unsigned char *)(v1 + 32) = 2;
      swift_retain();
      id v3 = v2;
      uint64_t v4 = (void *)OUTLINED_FUNCTION_7_9();
      goto LABEL_7;
    }
    lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
    uint64_t v7 = OUTLINED_FUNCTION_9_6();
    *uint64_t v9 = 1;
  }
  else
  {
    lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
    uint64_t v7 = OUTLINED_FUNCTION_9_6();
    *uint64_t v8 = 0;
  }
  uint64_t v10 = *(void **)(v1 + 16);
  uint64_t v5 = *(void **)(v1 + 24);
  *(void *)(v1 + 16) = v7;
  *(void *)(v1 + 24) = 0;
  char v6 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v1 + 32) = 4;
  uint64_t v4 = v10;
LABEL_7:

  outlined consume of WFExecuteCustomIntentFlow.State(v4, v5, v6);
}

void WFExecuteCustomIntentFlow.processCustomIntentExecutionResult(executionResult:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
  OUTLINED_FUNCTION_12_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = (uint64_t *)(v9 - v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9 - v8, a1, v4);
  int v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 88))(v10, v4);
  if (v11 == enum case for RCHFlowResult.complete<A, B>(_:))
  {
    uint64_t v12 = OUTLINED_FUNCTION_13_7();
    v13(v12);
    uint64_t v14 = (void *)v10[1];
    uint64_t v15 = (void *)v10[2];
    swift_release();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    uint64_t v17 = OUTLINED_FUNCTION_26_1(v16, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_16_8(&dword_0, v19, v20, "#WFExecuteCustomIntentFlow process execution result");
      OUTLINED_FUNCTION_7_0();
    }

    if ([v15 _intentResponseCode] == (char *)&dword_4 + 1)
    {
      id v21 = [v15 _intentResponseCode];
      lazy protocol witness table accessor for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError();
      uint64_t v22 = OUTLINED_FUNCTION_9_6();
      *(void *)uint64_t v23 = v21;
      *(unsigned char *)(v23 + 8) = 0;

      uint64_t v24 = *(void **)(v2 + 16);
      uint64_t v25 = *(void **)(v2 + 24);
      *(void *)(v2 + 16) = v22;
LABEL_20:
      *(void *)(v2 + 24) = 0;
      char v39 = *(unsigned char *)(v2 + 32);
      char v40 = 4;
      goto LABEL_21;
    }
    uint64_t v24 = *(void **)(v2 + 16);
    uint64_t v25 = *(void **)(v2 + 24);
    *(void *)(v2 + 16) = v14;
    *(void *)(v2 + 24) = v15;
    char v39 = *(unsigned char *)(v2 + 32);
    char v40 = 3;
LABEL_21:
    *(unsigned char *)(v2 + 32) = v40;
    outlined consume of WFExecuteCustomIntentFlow.State(v24, v25, v39);
    return;
  }
  if (v11 == enum case for RCHFlowResult.error<A, B>(_:))
  {
    uint64_t v26 = OUTLINED_FUNCTION_13_7();
    v27(v26);
    uint64_t v28 = *v10;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    uint64_t v30 = OUTLINED_FUNCTION_26_1(v29, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      long long v32 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)long long v32 = 0;
      _os_log_impl(&dword_0, v30, v31, "#WFExecuteCustomIntentFlow process execution result state error", v32, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v33 = (void *)_convertErrorToNSError(_:)();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 134218242;
      [v33 code];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v37 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v34, v35, "#WFExecuteCustomIntentFlow error code %ld, error: %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v24 = *(void **)(v2 + 16);
    uint64_t v25 = *(void **)(v2 + 24);
    *(void *)(v2 + 16) = v28;
    goto LABEL_20;
  }
  if (v11 == enum case for RCHFlowResult.cancelled<A, B>(_:))
  {
    uint64_t v24 = (void *)OUTLINED_FUNCTION_14_5();
    goto LABEL_21;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  uint64_t v42 = OUTLINED_FUNCTION_26_1(v41, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    long long v44 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)long long v44 = 0;
    _os_log_impl(&dword_0, v42, v43, "#WFExecuteCustomIntentFlow process execution result state cancelled", v44, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
  uint64_t v45 = OUTLINED_FUNCTION_9_6();
  *char v46 = 0;
  uint64_t v48 = *(void **)(v2 + 16);
  uint64_t v47 = *(void **)(v2 + 24);
  *(void *)(v2 + 16) = v45;
  *(void *)(v2 + 24) = 0;
  char v49 = *(unsigned char *)(v2 + 32);
  *(unsigned char *)(v2 + 32) = 4;
  outlined consume of WFExecuteCustomIntentFlow.State(v48, v47, v49);
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v10, v4);
}

void WFExecuteCustomIntentFlow.processParityRequestExecutionResult(flowResult:)(void *a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  if (a3)
  {
    if (a3 == 1)
    {
      swift_errorRetain();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      uint64_t v7 = OUTLINED_FUNCTION_26_1(v6, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        *(_WORD *)OUTLINED_FUNCTION_33() = 0;
        OUTLINED_FUNCTION_16_8(&dword_0, v9, v10, "#WFExecuteCustomIntentFlow cannot create executionResult for parity intents.");
        OUTLINED_FUNCTION_7_0();
      }

      int v11 = *(void **)(v4 + 16);
      uint64_t v12 = *(void **)(v4 + 24);
      *(void *)(v4 + 16) = a1;
      *(void *)(v4 + 24) = 0;
      char v13 = *(unsigned char *)(v4 + 32);
      char v14 = 4;
    }
    else
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v27 = OUTLINED_FUNCTION_26_1(v26, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl(&dword_0, v27, v28, "#WFExecuteCustomIntentFlow parity intent is cancelled.", v29, 2u);
        OUTLINED_FUNCTION_7_0();
      }

      int v11 = (void *)OUTLINED_FUNCTION_14_5();
    }
    *(unsigned char *)(v4 + 32) = v14;
    outlined consume of WFExecuteCustomIntentFlow.State(v11, v12, v13);
  }
  else
  {
    uint64_t v16 = *(void **)(v4 + 16);
    uint64_t v17 = *(void **)(v4 + 24);
    *(void *)(v4 + 16) = a1;
    *(void *)(v4 + 24) = a2;
    char v18 = *(unsigned char *)(v4 + 32);
    *(unsigned char *)(v4 + 32) = 3;
    id v19 = a1;
    id v20 = a2;
    uint64_t v30 = v19;
    id v21 = v20;
    outlined consume of WFExecuteCustomIntentFlow.State(v16, v17, v18);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)static WFDialogState.shared + 224))(0);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    oslog = OUTLINED_FUNCTION_26_1(v22, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v23))
    {
      uint64_t v24 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_0, oslog, v23, "#WFExecuteCustomIntentFlow created executionResult for parity intents successfully.", v24, 2u);
      OUTLINED_FUNCTION_7_0();

      uint64_t v25 = oslog;
    }
    else
    {

      uint64_t v25 = v30;
    }
  }
}

uint64_t WFExecuteCustomIntentFlow.handoffToCompanionDevice(continuityId:)(uint64_t a1)
{
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = v1;
  return _swift_task_switch(WFExecuteCustomIntentFlow.handoffToCompanionDevice(continuityId:), 0, 0);
}

uint64_t WFExecuteCustomIntentFlow.handoffToCompanionDevice(continuityId:)()
{
  uint64_t v1 = *(void *)(v0 + 112);
  outlined init with copy of DeviceState(v1 + 64, v0 + 16);
  outlined init with copy of DeviceState(v1 + 104, v0 + 56);
  type metadata accessor for CustomIntentHandoffToCompanionFlowStrategy();
  uint64_t v2 = swift_allocObject();
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 16), v2 + 56);
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 56), v2 + 16);
  outlined init with copy of DeviceState(v1 + 104, v0 + 16);
  outlined init with copy of DeviceState(v1 + 184, v0 + 56);
  *(void *)(v0 + 96) = v2;
  type metadata accessor for HandoffSessionToCompanionFlowAsync();
  swift_allocObject();
  lazy protocol witness table accessor for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow(&lazy protocol witness table cache variable for type CustomIntentHandoffToCompanionFlowStrategy and conformance CustomIntentHandoffToCompanionFlowStrategy, 255, (void (*)(uint64_t))type metadata accessor for CustomIntentHandoffToCompanionFlowStrategy);
  swift_retain();
  uint64_t v3 = HandoffSessionToCompanionFlowAsync.init<A>(strategy:deviceState:outputPublisher:)();
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = *(void **)(v1 + 24);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  char v6 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v1 + 32) = 5;
  outlined consume of WFExecuteCustomIntentFlow.State(v4, v5, v6);
  *(void *)(v0 + 16) = v3;
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

uint64_t WFExecuteCustomIntentFlow.shouldRequestUserToUnlockDeviceBeforeRunningCustomIntent(intent:)()
{
  if (INIntent.requiresDeviceToBeUnlocked()())
  {
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 104), *(void *)(v0 + 128));
    char v1 = dispatch thunk of DeviceState.isHomePod.getter() ^ 1;
  }
  else
  {
    char v1 = 0;
  }
  return v1 & 1;
}

uint64_t WFExecuteCustomIntentFlow.deinit()
{
  outlined consume of WFExecuteCustomIntentFlow.State(*(void **)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 104);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 144);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 184);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 232);
  swift_release();
  return v0;
}

uint64_t WFExecuteCustomIntentFlow.__deallocating_deinit()
{
  WFExecuteCustomIntentFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.getter in conformance WFExecuteCustomIntentFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.setter in conformance WFExecuteCustomIntentFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

void (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance WFExecuteCustomIntentFlow(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance WFExecuteCustomIntentFlow;
}

void protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance WFExecuteCustomIntentFlow(void *a1)
{
  char v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t protocol witness for Flow.on(input:) in conformance WFExecuteCustomIntentFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance WFExecuteCustomIntentFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentRCHFlowStrategy;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFExecuteCustomIntentFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t protocol witness for Flow.execute() in conformance WFExecuteCustomIntentFlow(uint64_t a1)
{
  char v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 208) + **(int **)(**(void **)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFExecuteCustomIntentFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 192))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t outlined bridged method (pb) of @objc INSendMessageIntent.attachments.getter(void *a1)
{
  id v1 = [a1 attachments];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for INSendMessageAttachment();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t specialized WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v52[3] = a13;
  v52[4] = a14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(boxed_opaque_existential_1, a9, a13);
  uint64_t v47 = a5;
  outlined init with copy of DeviceState(a5, a12 + 104);
  uint64_t v48 = a6;
  outlined init with copy of DeviceState(a6, a12 + 144);
  outlined init with copy of DeviceState(a7, a12 + 184);
  *(void *)(a12 + 40) = a1;
  *(void *)(a12 + 48) = a2;
  *(void *)(a12 + 56) = a3;
  uint64_t v21 = a4;
  outlined init with copy of DeviceState(a4, a12 + 64);
  *(void *)(a12 + 224) = a8;
  outlined init with copy of DeviceState((uint64_t)v52, a12 + 232);
  *(void *)(a12 + 272) = a10;
  *(void *)(a12 + 280) = a11;
  uint64_t v22 = one-time initialization token for voiceCommands;
  id v23 = a1;
  id v24 = a8;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
  uint64_t v26 = v23;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v51 = a4;
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    char v46 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 138412290;
    uint64_t v30 = v26;
    os_log_type_t v31 = v26;
    uint64_t v21 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v46 = v30;

    uint64_t v26 = v30;
    _os_log_impl(&dword_0, v27, v28, "#WFExecuteCustomIntentFlow intent: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v27 = v26;
  }

  id v32 = [*(id *)(a12 + 40) _metadata];
  if (v32)
  {
    uint64_t v33 = v32;
    outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v32);
    if (v34)
    {
      id v35 = [v26 typeName];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      LOBYTE(v35) = static VoiceCommandsParity.isParityIntent(intentName:)(v36, v38);
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0) {
        [v33 setExecutionContext:2];
      }
      [v26 _setMetadata:v33];
      type metadata accessor for App();
      uint64_t v39 = App.__allocating_init(appIdentifier:)();

      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
      __swift_destroy_boxed_opaque_existential_1Tm(a7);
      __swift_destroy_boxed_opaque_existential_1Tm(v48);
      __swift_destroy_boxed_opaque_existential_1Tm(v47);
      __swift_destroy_boxed_opaque_existential_1Tm(v21);
      char v40 = 0;
      goto LABEL_15;
    }
  }
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    os_log_type_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v43 = 0;
    _os_log_impl(&dword_0, v41, v42, "#WFExecuteCustomIntentFlow error state because metadata or bundleid is nil", v43, 2u);
    swift_slowDealloc();
  }

  lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
  uint64_t v39 = swift_allocError();
  unsigned char *v44 = 0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  __swift_destroy_boxed_opaque_existential_1Tm(v48);
  __swift_destroy_boxed_opaque_existential_1Tm(v47);
  __swift_destroy_boxed_opaque_existential_1Tm(v21);
  uint64_t v26 = 0;
  char v40 = 4;
LABEL_15:
  *(void *)(a12 + 16) = v39;
  *(void *)(a12 + 24) = v26;
  *(unsigned char *)(a12 + 32) = v40;
  return a12;
}

id outlined copy of WFExecuteCustomIntentFlow.State(id result, void *a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      id v4 = a2;
      swift_retain();
      goto LABEL_4;
    case 3:
      id v4 = result;
      id v3 = a2;
LABEL_4:
      uint64_t result = v4;
      break;
    case 4:
      uint64_t result = (id)swift_errorRetain();
      break;
    default:
      return result;
  }
  return result;
}

void outlined consume of WFExecuteCustomIntentFlow.State(void *a1, void *a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      id v3 = a2;
      swift_release();
      goto LABEL_4;
    case 3:
      id v3 = a2;

LABEL_4:

      break;
    case 4:
      swift_errorRelease();
      break;
    default:
      return;
  }
}

uint64_t sub_44FD8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ParityFlowExecutionResult) -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

void partial apply for implicit closure #5 in implicit closure #4 in WFExecuteCustomIntentFlow.execute()(char a1)
{
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned GuardFlowResult) -> ()(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in WFExecuteCustomIntentFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  id v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *id v4 = v1;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return closure #1 in WFExecuteCustomIntentFlow.execute()(v3, v0);
}

unint64_t lazy protocol witness table accessor for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError;
  if (!lazy protocol witness table cache variable for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFExecuteCustomIntentError and conformance WFExecuteCustomIntentError);
  }
  return result;
}

uint64_t type metadata accessor for WFExecuteCustomIntentFlow()
{
  return self;
}

uint64_t base witness table accessor for Flow in WFExecuteCustomIntentFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow(&lazy protocol witness table cache variable for type WFExecuteCustomIntentFlow and conformance WFExecuteCustomIntentFlow, a2, (void (*)(uint64_t))type metadata accessor for WFExecuteCustomIntentFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in WFExecuteCustomIntentFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow(&lazy protocol witness table cache variable for type WFExecuteCustomIntentFlow and conformance WFExecuteCustomIntentFlow, a2, (void (*)(uint64_t))type metadata accessor for WFExecuteCustomIntentFlow);
}

uint64_t initializeBufferWithCopyOfBuffer for CustomIntentExecutionResult(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for CustomIntentExecutionResult(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of CustomIntentExecutionResult);
}

id outlined copy of CustomIntentExecutionResult(id result, void *a2, char a3)
{
  if (a3 == 1)
  {
    id v5 = result;
    id v4 = a2;
    return v5;
  }
  else if (!a3)
  {
    return (id)swift_errorRetain();
  }
  return result;
}

void destroy for CustomIntentExecutionResult(uint64_t a1)
{
}

void outlined consume of CustomIntentExecutionResult(void *a1, void *a2, char a3)
{
  if (a3 == 1)
  {
  }
  else if (!a3)
  {
    swift_errorRelease();
  }
}

uint64_t *assignWithCopy for CustomIntentExecutionResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for CustomIntentExecutionResult(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of CustomIntentExecutionResult, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of CustomIntentExecutionResult);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for CustomIntentExecutionResult(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for CustomIntentExecutionResult(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of CustomIntentExecutionResult);
}

uint64_t getEnumTagSinglePayload for CustomIntentExecutionResult(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomIntentExecutionResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CustomIntentExecutionResult(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for CustomIntentExecutionResult(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void type metadata accessor for CustomIntentExecutionResult()
{
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for WFExecuteCustomIntentError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WFExecuteCustomIntentError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for WFExecuteCustomIntentError(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for WFExecuteCustomIntentError(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 8) = v2;
  return result;
}

void type metadata accessor for WFExecuteCustomIntentError()
{
}

uint64_t initializeBufferWithCopyOfBuffer for WFExecuteCustomIntentFlow.State(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for CustomIntentExecutionResult(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of WFExecuteCustomIntentFlow.State);
}

void destroy for WFExecuteCustomIntentFlow.State(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CustomIntentExecutionResult(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for WFExecuteCustomIntentFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for CustomIntentExecutionResult(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of WFExecuteCustomIntentFlow.State, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of WFExecuteCustomIntentFlow.State);
}

uint64_t *assignWithCopy for CustomIntentExecutionResult(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for WFExecuteCustomIntentFlow.State(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for CustomIntentExecutionResult(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of WFExecuteCustomIntentFlow.State);
}

uint64_t *assignWithTake for CustomIntentExecutionResult(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for WFExecuteCustomIntentFlow.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFB && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 250;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 5) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WFExecuteCustomIntentFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for WFExecuteCustomIntentFlow.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for WFExecuteCustomIntentFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)__n128 result = a2 - 5;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void *type metadata accessor for WFExecuteCustomIntentFlow.State()
{
  return &unk_288D30;
}

uint64_t lazy protocol witness table accessor for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t type metadata accessor for INSendMessageAttachment()
{
  unint64_t result = lazy cache variable for type metadata for INSendMessageAttachment;
  if (!lazy cache variable for type metadata for INSendMessageAttachment)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INSendMessageAttachment);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_7_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_6()
{
  return swift_allocError();
}

void OUTLINED_FUNCTION_10_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 - 96) = a7;
  *(void *)(v8 - 88) = a8;
  *(void *)(v8 - 112) = a5;
  *(void *)(v8 - 104) = a6;
  *(void *)(v8 - 120) = a4;
}

uint64_t OUTLINED_FUNCTION_11_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19 = *(void *)(v17 - 120);
  uint64_t v20 = *(void *)(v17 - 112);
  uint64_t v21 = *(void *)(v17 - 104);
  uint64_t v22 = *(void *)(v17 - 96);
  id v23 = *(void **)(v17 - 88);
  return specialized WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)(v16, v15, v14, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_5()
{
  uint64_t result = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_15_8()
{
  return v0;
}

void OUTLINED_FUNCTION_16_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_17_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void *SiriLinkFlowPlugin.__allocating_init()()
{
  uint64_t v0 = type metadata accessor for CATOption();
  __chkstk_darwin(v0 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = type metadata accessor for DateTimeResolver();
  OUTLINED_FUNCTION_12_1();
  uint64_t v3 = v2;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  type metadata accessor for AppInstallInfoProvider();
  uint64_t v20 = swift_allocObject();
  static Device.current.getter();
  static AceService.currentAsync.getter();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static AceService.currentAsync.getter();
  type metadata accessor for LocationProvider();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0x3FA999999999999ALL;
  outlined init with take of AceServiceInvokerAsync(&v21, v10 + 24);
  DateTimeResolver.init()();
  type metadata accessor for VoiceShortcutClientWrapper();
  uint64_t v19 = swift_allocObject();
  type metadata accessor for AutoShortcutCATs();
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for LinkMetadataProvider();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = [objc_allocWithZone((Class)LNMetadataProvider) init];
  type metadata accessor for AutoShortcutProvider();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = [objc_allocWithZone((Class)LNAutoShortcutsProvider) init];
  id v14 = [self sharedPreferences];
  uint64_t v15 = (void *)swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v9, v1);
  uint64_t v16 = specialized SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)(v20, v24, &v23, &v22, v10, (uint64_t)v7, v19, v18, v11, v12, v13, (uint64_t)v14, v15);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v1);
  return v16;
}

uint64_t SiriLinkFlowPlugin.__allocating_init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return SiriLinkFlowPlugin.__allocating_init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SiriLinkFlowPlugin.__allocating_init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:));
}

uint64_t SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return SiriLinkFlowPlugin.__allocating_init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:));
}

uint64_t SiriLinkFlowPlugin.__allocating_init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(char *, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16 = *(void *)(a1 + 24);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v16);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v17);
  uint64_t v54 = OUTLINED_FUNCTION_3_9(v18, v49);
  OUTLINED_FUNCTION_4_5();
  v19();
  uint64_t v55 = a5;
  __swift_mutable_project_boxed_opaque_existential_1(a5, *(void *)(a5 + 24));
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v20);
  uint64_t v53 = OUTLINED_FUNCTION_3_9(v21, v50);
  OUTLINED_FUNCTION_4_5();
  v22();
  __swift_mutable_project_boxed_opaque_existential_1(a6, *(void *)(a6 + 24));
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v23);
  uint64_t v52 = OUTLINED_FUNCTION_3_9(v24, v51);
  OUTLINED_FUNCTION_4_5();
  v25();
  __swift_mutable_project_boxed_opaque_existential_1(a7, *(void *)(a7 + 24));
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_20_0();
  uint64_t v29 = v28 - v27;
  OUTLINED_FUNCTION_4_5();
  v30();
  __swift_mutable_project_boxed_opaque_existential_1(a9, *(void *)(a9 + 24));
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_20_0();
  uint64_t v34 = v33 - v32;
  OUTLINED_FUNCTION_4_5();
  v35();
  uint64_t v36 = *(void *)(a10 + 24);
  __swift_mutable_project_boxed_opaque_existential_1(a10, v36);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_20_0();
  uint64_t v40 = v39 - v38;
  OUTLINED_FUNCTION_4_5();
  v41();
  __swift_mutable_project_boxed_opaque_existential_1(a11, *(void *)(a11 + 24));
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v42);
  OUTLINED_FUNCTION_20_0();
  uint64_t v45 = v44 - v43;
  OUTLINED_FUNCTION_4_5();
  v46();
  uint64_t v47 = a13(v54, a2, a3, a4, v53, v52, v29, a8, v34, v40, v45, a12);
  __swift_destroy_boxed_opaque_existential_1Tm(a11);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  __swift_destroy_boxed_opaque_existential_1Tm(v55);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v47;
}

uint64_t SiriLinkFlowPlugin.findFlowForX(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowSearchResult?);
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = v6 - v5;
  SiriLinkFlowPlugin.makeFlowFlowSearchResult(parse:)(a1, v6 - v5);
  uint64_t v8 = type metadata accessor for FlowSearchResult();
  if (__swift_getEnumTagSinglePayload(v7, 1, v8) != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, v7, v8);
  }
  outlined destroy of Any?(v7, &demangling cache variable for type metadata for FlowSearchResult?);
  return static FlowSearchResult.noFlow.getter();
}

uint64_t SiriLinkFlowPlugin.makeFlowFlowSearchResult(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v94 = a1;
  uint64_t v96 = a2;
  uint64_t v3 = type metadata accessor for LinkParse();
  uint64_t v86 = *(void *)(v3 - 8);
  uint64_t v87 = v3;
  __chkstk_darwin(v3);
  uint64_t v85 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for USOParse();
  uint64_t v89 = *(void *)(v5 - 8);
  uint64_t v90 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NLIntent();
  uint64_t v92 = *(void *)(v7 - 8);
  uint64_t v93 = (uint8_t *)v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v91 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Parse();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v84 = (char *)&v83 - v19;
  __chkstk_darwin(v18);
  uint64_t v95 = (char *)&v83 - v20;
  uint64_t v21 = v2[7];
  uint64_t v22 = v2[8];
  __swift_project_boxed_opaque_existential_1(v2 + 4, v21);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v83 = __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "#SiriLinkFlowPlugin has Shortcuts app installed", v26, 2u);
      swift_slowDealloc();
    }

    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v28 = v95;
    v27(v95, v94, v13);
    int v29 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v28, v13);
    if (v29 == enum case for Parse.NLv3IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v14 + 96))(v28, v13);
      uint64_t v31 = v92;
      uint64_t v30 = v93;
      (*(void (**)(char *, char *, uint8_t *))(v92 + 32))(v9, v28, v93);
      if (SiriLinkFlowPlugin.makeFlowFor(nlv3Intent:)((uint64_t)v9))
      {
        uint64_t v32 = v96;
        static FlowSearchResult.flow(_:)();
        uint64_t v33 = type metadata accessor for FlowSearchResult();
        __swift_storeEnumTagSinglePayload(v32, 0, 1, v33);
        swift_release();
      }
      else
      {
        uint64_t v60 = type metadata accessor for FlowSearchResult();
        __swift_storeEnumTagSinglePayload(v96, 1, 1, v60);
      }
      return (*(uint64_t (**)(char *, uint8_t *))(v31 + 8))(v9, v30);
    }
    if (v29 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      (*(void (**)(char *, uint64_t))(v14 + 96))(v28, v13);
      uint64_t v42 = *(void *)&v28[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion))
                                   + 48)];
      uint64_t v43 = (void *)Parse.ServerConversion.siriKitIntent.getter();
      self;
      uint64_t v44 = swift_dynamicCastObjCClass();
      id v45 = v43;
      char v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      BOOL v48 = os_log_type_enabled(v46, v47);
      if (v44)
      {
        if (v48)
        {
          uint64_t v49 = (uint8_t *)swift_slowAlloc();
          uint64_t v50 = swift_slowAlloc();
          uint64_t v94 = v42;
          uint64_t v98 = v50;
          *(_DWORD *)uint64_t v49 = 136315138;
          id v51 = [v45 debugDescription];
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v54 = v53;

          uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v98);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          os_log_type_t v55 = v47;
          uint64_t v56 = "INListShortcutsIntent is deprecated: %s";
LABEL_29:
          _os_log_impl(&dword_0, v46, v55, v56, v49, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_release();
LABEL_31:
          uint64_t v69 = v96;
          uint64_t v71 = v92;
          char v70 = v93;
          uint64_t v72 = type metadata accessor for FlowSearchResult();
          __swift_storeEnumTagSinglePayload(v69, 1, 1, v72);
          return (*(uint64_t (**)(char *, uint8_t *))(v71 + 8))(v95, v70);
        }
      }
      else if (v48)
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        uint64_t v94 = v42;
        uint64_t v98 = v64;
        *(_DWORD *)uint64_t v49 = 136315138;
        id v65 = [v45 debugDescription];
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v68 = v67;

        uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_type_t v55 = v47;
        uint64_t v56 = "Support for intent not yet implemented: %s";
        goto LABEL_29;
      }

      swift_release();
      goto LABEL_31;
    }
    if (v29 == enum case for Parse.directInvocation(_:))
    {
      (*(void (**)(char *, uint64_t))(v14 + 96))(v28, v13);
      uint64_t v57 = v91;
      (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v12, v28, v10);
      if (SiriLinkFlowPlugin.makeFlowFor(directInvocation:)((uint64_t)v12))
      {
        uint64_t v58 = v96;
        static FlowSearchResult.flow(_:)();
        uint64_t v59 = type metadata accessor for FlowSearchResult();
        __swift_storeEnumTagSinglePayload(v58, 0, 1, v59);
        swift_release();
      }
      else
      {
        uint64_t v74 = type metadata accessor for FlowSearchResult();
        __swift_storeEnumTagSinglePayload(v96, 1, 1, v74);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v12, v10);
    }
    if (v29 == enum case for Parse.uso(_:))
    {
      (*(void (**)(char *, uint64_t))(v14 + 96))(v28, v13);
      uint64_t v62 = (uint64_t)v88;
      uint64_t v61 = v89;
      uint64_t v63 = v90;
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v88, v28, v90);
      SiriLinkFlowPlugin.makeFlowFor(usoParse:)(v62, v96);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v62, v63);
    }
    if (v29 == enum case for Parse.link(_:))
    {
      (*(void (**)(char *, uint64_t))(v14 + 96))(v28, v13);
      uint64_t v62 = (uint64_t)v85;
      uint64_t v61 = v86;
      uint64_t v63 = v87;
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v85, v28, v87);
      uint64_t v73 = (uint64_t)v88;
      LinkParse.usoParse.getter();
      SiriLinkFlowPlugin.makeFlowFor(usoParse:)(v73, v96);
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v73, v90);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v62, v63);
    }
    BOOL v75 = v84;
    v27(v84, v94, v13);
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      Swift::String v78 = (uint8_t *)swift_slowAlloc();
      uint64_t v94 = swift_slowAlloc();
      uint64_t v98 = v94;
      *(_DWORD *)Swift::String v78 = 136315138;
      uint64_t v93 = v78 + 4;
      v27(v17, (uint64_t)v75, v13);
      uint64_t v79 = String.init<A>(describing:)();
      uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v81 = *(void (**)(char *, uint64_t))(v14 + 8);
      v81(v75, v13);
      _os_log_impl(&dword_0, v76, v77, "Unhandled Parse type: %s", v78, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v81 = *(void (**)(char *, uint64_t))(v14 + 8);
      v81(v75, v13);
    }

    uint64_t v82 = type metadata accessor for FlowSearchResult();
    __swift_storeEnumTagSinglePayload(v96, 1, 1, v82);
    return ((uint64_t (*)(char *, uint64_t))v81)(v95, v13);
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.voiceCommands);
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = v96;
    if (v37)
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_0, v35, v36, "User does not have Shortcuts app installed", v39, 2u);
      swift_slowDealloc();
    }

    uint64_t v40 = type metadata accessor for FlowSearchResult();
    return __swift_storeEnumTagSinglePayload(v38, 1, 1, v40);
  }
}

uint64_t SiriLinkFlowPlugin.makeFlowFor(directInvocation:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)type metadata accessor for Parse.DirectInvocation();
  uint64_t v117 = (void (**)(char *, uint64_t, char *))*((void *)v4 - 1);
  uint64_t v5 = __chkstk_darwin(v4);
  v116 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v108 - v7;
  uint64_t v9 = type metadata accessor for AutoShortcutInvocation();
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  unint64_t v115 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v108 - v12);
  uint64_t v14 = type metadata accessor for CATOption();
  __chkstk_darwin(v14 - 8);
  if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000003BLL && v15 == 0x8000000000226A60)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0) {
      goto LABEL_11;
    }
  }
  uint64_t v17 = Parse.DirectInvocation.userData.getter();
  if (v17)
  {
    static ShortcutDoneButtonConverter.toShortcutDoneButton(userData:)(v17, v135);
    swift_bridgeObjectRelease();
    outlined init with take of SiriWorkflowRunnerInput?((uint64_t)v135, (uint64_t)&v146, &demangling cache variable for type metadata for ShortcutDoneButton?);
    uint64_t v18 = v147;
    if (v147)
    {
      uint64_t v19 = v148;
      if (*((void *)&v146 + 1))
      {
        unint64_t v115 = v149;
        v116 = v148;
        uint64_t v117 = (void (**)(char *, uint64_t, char *))v147;
        long long v150 = v146;
        long long v151 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        char v154 = 0;
        uint64_t v144 = 0;
        memset(v143, 0, sizeof(v143));
        outlined init with copy of DeviceState(v1 + 112, (uint64_t)v136);
        outlined init with copy of DeviceState(v1 + 72, (uint64_t)&v132);
        outlined init with copy of DeviceState(v1 + 152, (uint64_t)v131);
        outlined init with copy of DeviceState(v1 + 192, (uint64_t)v128);
        outlined init with copy of DeviceState(v1 + 232, (uint64_t)v125);
        uint64_t v20 = one-time initialization token for shared;
        swift_bridgeObjectRetain();
        if (v20 != -1) {
          swift_once();
        }
        v114 = (char *)static WFDialogState.shared;
        type metadata accessor for RunCustomIntentCATs();
        swift_retain();
        static CATOption.defaultMode.getter();
        uint64_t v113 = (void *)CATWrapper.__allocating_init(options:globals:)();
        type metadata accessor for RunVoiceCommandCATs();
        static CATOption.defaultMode.getter();
        v112 = (uint64_t *)CATWrapper.__allocating_init(options:globals:)();
        type metadata accessor for RunVoiceCommandCATsSimple();
        static CATOption.defaultMode.getter();
        uint64_t v110 = CATWrapperSimple.__allocating_init(options:globals:)();
        type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
        static CATOption.defaultMode.getter();
        uint64_t v109 = CATWrapper.__allocating_init(options:globals:)();
        Class v111 = (Class)type metadata accessor for WorkflowRunnerFlow(0);
        id v21 = objc_allocWithZone(v111);
        uint64_t v23 = v129;
        uint64_t v22 = v130;
        uint64_t v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v128, v129);
        uint64_t v108 = (uint64_t)&v108;
        __chkstk_darwin(v24);
        uint64_t v26 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v27 + 16))(v26);
        uint64_t v29 = v126;
        uint64_t v28 = v127;
        uint64_t v30 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v125, v126);
        __chkstk_darwin(v30);
        uint64_t v32 = (char *)&v108 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v33 + 16))(v32);
        specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)((uint64_t)&v150, (uint64_t)v143, (uint64_t)v114, (uint64_t)v136, (uint64_t)&v132, (uint64_t)v131, (uint64_t)v113, (uint64_t)v112, v110, v109, (uint64_t)closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow, 0, (uint64_t)v26, (uint64_t)v32, (uint64_t)closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow, 0, (uint64_t)v21, v29, v23,
          v28,
          v22,
          v107,
          v108,
          v109,
          v110,
          (uint64_t)v111,
          (uint64_t)v112,
          (uint64_t)v113,
          v114,
          (uint64_t)v115,
          (uint64_t)v116,
          (uint64_t)v117,
          v118);
        id v35 = v34;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v125);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v128);
        *(void *)&v143[0] = v35;
        lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(&lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow, 255, (void (*)(uint64_t))type metadata accessor for WorkflowRunnerFlow);
        uint64_t v36 = Flow.eraseToAnyFlow()();

        swift_release();
        swift_bridgeObjectRelease();
        return v36;
      }
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v80 = type metadata accessor for Logger();
      __swift_project_value_buffer(v80, (uint64_t)static Logger.voiceCommands);
      BOOL v75 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v75, v81))
      {

        swift_release();
        return 0;
      }
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl(&dword_0, v75, v81, "Cannot get workflowName from the done button", v82, 2u);
      swift_slowDealloc();
      swift_release();

LABEL_49:
      return 0;
    }
  }
LABEL_11:
  if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000041 && v37 == 0x8000000000226AA0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v38 & 1) == 0) {
      goto LABEL_17;
    }
  }
  uint64_t v39 = Parse.DirectInvocation.userData.getter();
  if (v39)
  {
    uint64_t v40 = v39;
    type metadata accessor for InstallVoiceShortcutInvocationData();
    InstallVoiceShortcutInvocationData.__allocating_init(invocationData:)(v40);
    outlined init with copy of DeviceState(v2 + 72, (uint64_t)&v150);
    outlined init with copy of DeviceState(v2 + 112, (uint64_t)v143);
    outlined init with copy of DeviceState(v2 + 272, (uint64_t)v136);
    outlined init with copy of DeviceState(v2 + 152, (uint64_t)&v132);
    outlined init with copy of DeviceState(v2 + 192, (uint64_t)v131);
    outlined init with copy of DeviceState(v2 + 232, (uint64_t)v128);
    type metadata accessor for InstallVoiceShortcutFlow();
    swift_allocObject();
    swift_retain();
    InstallVoiceShortcutFlow.init(invocationData:deviceState:aceService:vcClient:outputPublisher:installShortcutViewFactory:locationProvider:dateTimeResolver:)();
    *(void *)&long long v150 = v41;
    lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(&lazy protocol witness table cache variable for type InstallVoiceShortcutFlow and conformance InstallVoiceShortcutFlow, 255, (void (*)(uint64_t))type metadata accessor for InstallVoiceShortcutFlow);
    uint64_t v36 = Flow.eraseToAnyFlow()();
    swift_release();
    swift_release();
    return v36;
  }
LABEL_17:
  v114 = v4;
  if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000004BLL && v42 == 0x8000000000226AF0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v43 & 1) == 0) {
      goto LABEL_24;
    }
  }
  uint64_t v44 = Parse.DirectInvocation.userData.getter();
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v113 = v13;
    uint64_t v46 = *(void *)(v1 + 96);
    v112 = (uint64_t *)(v1 + 72);
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 72), v46);
    if ((dispatch thunk of DeviceState.isMac.getter() & 1) == 0)
    {
      uint64_t v83 = type metadata accessor for AutoShortcutProvider();
      uint64_t v84 = swift_allocObject();
      id v85 = objc_allocWithZone((Class)LNAutoShortcutsProvider);
      swift_bridgeObjectRetain();
      *(void *)(v84 + 16) = [v85 init];
      *((void *)&v151 + 1) = v83;
      *(void *)&long long v152 = &protocol witness table for AutoShortcutProvider;
      *(void *)&long long v150 = v84;
      id v86 = [self sharedPreferences];
      uint64_t v87 = v113;
      AutoShortcutInvocation.init(directInvocationData:provider:preferences:)(v45, (uint64_t)&v150, v86, v113);
      swift_bridgeObjectRelease();
      outlined init with copy of DeviceState(v2 + 112, (uint64_t)&v150);
      outlined init with copy of DeviceState(v2 + 152, (uint64_t)v143);
      outlined init with copy of DeviceState(v2 + 272, (uint64_t)v136);
      outlined init with copy of DeviceState(v2 + 360, (uint64_t)&v132);
      outlined init with copy of DeviceState((uint64_t)v112, (uint64_t)v131);
      LODWORD(v116) = default argument 8 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)();
      uint64_t v117 = (void (**)(char *, uint64_t, char *))type metadata accessor for AutoShortcutFlow();
      v112 = (uint64_t *)swift_allocObject();
      uint64_t v92 = (uint64_t)v115;
      outlined init with copy of AutoShortcutInvocation((uint64_t)v87, (uint64_t)v115, (void (*)(void))type metadata accessor for AutoShortcutInvocation);
      uint64_t v93 = v137;
      uint64_t v94 = (uint64_t)v138;
      uint64_t v95 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v136, v137);
      v114 = (char *)&v108;
      __chkstk_darwin(v95);
      uint64_t v97 = (char *)&v108 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v98 + 16))(v97);
      uint64_t v100 = *((void *)&v133 + 1);
      uint64_t v99 = v134;
      uint64_t v101 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v132, *((uint64_t *)&v133 + 1));
      __chkstk_darwin(v101);
      uint64_t v103 = (uint64_t)v87;
      Swift::Int v104 = (char *)&v108 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v105 + 16))(v104);
      uint64_t v106 = specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(v92, &v150, v143, (uint64_t)v97, (uint64_t)v104, v131, 0, (uint64_t)closure #1 in variable initialization expression of static AutoShortcutFlow.defaultRunner, 0, v116 & 1, (uint64_t)v112, v100, v93, v99, v94);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v132);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v136);
      *(void *)&long long v150 = v106;
      lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(&lazy protocol witness table cache variable for type AutoShortcutFlow and conformance AutoShortcutFlow, 255, (void (*)(uint64_t))type metadata accessor for AutoShortcutFlow);
      uint64_t v36 = Flow.eraseToAnyFlow()();
      swift_release();
      outlined destroy of AutoShortcutInvocation(v103, (void (*)(void))type metadata accessor for AutoShortcutInvocation);
      return v36;
    }
    swift_bridgeObjectRelease();
  }
LABEL_24:
  if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000003FLL && v47 == 0x8000000000226B40)
  {
    swift_bridgeObjectRelease();
    BOOL v48 = v114;
  }
  else
  {
    char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    BOOL v48 = v114;
    if ((v49 & 1) == 0)
    {
LABEL_33:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v72 = type metadata accessor for Logger();
      __swift_project_value_buffer(v72, (uint64_t)static Logger.voiceCommands);
      uint64_t v73 = (void (**)(char *, char *))v117;
      uint64_t v74 = v117[2];
      v74(v8, a1, v48);
      BOOL v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v75, v76))
      {
        v73[1](v8, v48);
        goto LABEL_49;
      }
      uint64_t v77 = swift_slowAlloc();
      unint64_t v115 = (char *)swift_slowAlloc();
      *(void *)&long long v150 = v115;
      v114 = (char *)v77;
      *(_DWORD *)uint64_t v77 = 136315138;
      uint64_t v113 = (void *)(v77 + 4);
      v74(v116, (uint64_t)v8, v48);
      uint64_t v78 = String.init<A>(describing:)();
      *(void *)&v143[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, (uint64_t *)&v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v73[1](v8, v48);
      _os_log_impl(&dword_0, v75, v76, "Unhandled direct invocation type: %s", (uint8_t *)v114, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_48:
      swift_slowDealloc();
      goto LABEL_49;
    }
  }
  uint64_t v50 = Parse.DirectInvocation.userData.getter();
  if (!v50) {
    goto LABEL_33;
  }
  static WFPausedShortcutConverter.toSiriWorkflowInput(userData:)(v50, (uint64_t)v136);
  uint64_t v51 = v136[2];
  v116 = (char *)v136[1];
  uint64_t v117 = (void (**)(char *, uint64_t, char *))v136[0];
  uint64_t v52 = v137;
  unint64_t v53 = v138;
  unint64_t v54 = v139;
  os_log_type_t v55 = v140;
  unint64_t v115 = v141;
  char v56 = v142;
  swift_bridgeObjectRelease();
  outlined init with take of SiriWorkflowRunnerInput?((uint64_t)v136, (uint64_t)v143, (uint64_t *)&demangling cache variable for type metadata for SiriWorkflowRunnerInput?);
  if (v145 == 255)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v88 = type metadata accessor for Logger();
    __swift_project_value_buffer(v88, (uint64_t)static Logger.voiceCommands);
    BOOL v75 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v75, v89)) {
      goto LABEL_49;
    }
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    _os_log_impl(&dword_0, v75, v89, "Cannot parse WFPausedShortcutData from userData, returning nil...", v90, 2u);
    goto LABEL_48;
  }
  outlined init with take of SiriWorkflowRunnerInput((uint64_t)v143, (uint64_t)&v150);
  uint64_t v134 = 0;
  long long v132 = 0u;
  long long v133 = 0u;
  outlined init with copy of DeviceState(v1 + 112, (uint64_t)v131);
  outlined init with copy of DeviceState(v1 + 72, (uint64_t)v128);
  outlined init with copy of DeviceState(v1 + 152, (uint64_t)v125);
  outlined init with copy of DeviceState(v1 + 192, (uint64_t)v122);
  outlined init with copy of DeviceState(v1 + 232, (uint64_t)v119);
  outlined copy of SiriWorkflowRunnerInput(v117, (uint64_t)v116, v51, v52, v53, v54, v55, v115, v56);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v117 = (void (**)(char *, uint64_t, char *))static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  v116 = (char *)CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  unint64_t v115 = (char *)CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  v114 = (char *)CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v113 = (void *)CATWrapper.__allocating_init(options:globals:)();
  id v57 = objc_allocWithZone((Class)type metadata accessor for WorkflowRunnerFlow(0));
  uint64_t v59 = v123;
  uint64_t v58 = v124;
  uint64_t v60 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v122, v123);
  v112 = &v108;
  __chkstk_darwin(v60);
  uint64_t v62 = (char *)&v108 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v63 + 16))(v62);
  uint64_t v64 = v120;
  uint64_t v65 = v121;
  uint64_t v66 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v119, v120);
  __chkstk_darwin(v66);
  unint64_t v68 = (char *)&v108 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v69 + 16))(v68);
  specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)((uint64_t)&v150, (uint64_t)&v132, (uint64_t)v117, (uint64_t)v131, (uint64_t)v128, (uint64_t)v125, (uint64_t)v116, (uint64_t)v115, (uint64_t)v114, (uint64_t)v113, (uint64_t)closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow, 0, (uint64_t)v62, (uint64_t)v68, (uint64_t)closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow, 0, (uint64_t)v57, v64, v59,
    v65,
    v58,
    v107,
    v108,
    v109,
    v110,
    (uint64_t)v111,
    (uint64_t)v112,
    (uint64_t)v113,
    v114,
    (uint64_t)v115,
    (uint64_t)v116,
    (uint64_t)v117,
    v118);
  uint64_t v71 = v70;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v119);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v122);
  *(void *)&long long v132 = v71;
  lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(&lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow, 255, (void (*)(uint64_t))type metadata accessor for WorkflowRunnerFlow);
  uint64_t v36 = Flow.eraseToAnyFlow()();
  outlined release of SiriWorkflowRunnerInput?((uint64_t)v136);

  return v36;
}

uint64_t SiriLinkFlowPlugin.makeFlowFor(nlv3Intent:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CATOption();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for VoiceCommandsNLIntent(0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for NLIntent();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  if (one-time initialization token for voiceCommandVerbNode != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, 255, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  uint64_t v8 = v1 + 72;
  if (v17[0] == 3)
  {
    outlined init with copy of DeviceState(v8, (uint64_t)v17);
    outlined init with copy of DeviceState(v1 + 112, (uint64_t)v16);
    type metadata accessor for ListShortcutsCATs();
    static CATOption.defaultMode.getter();
    uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for ListShortcutsFlow();
    swift_allocObject();
    *(void *)uint64_t v17 = ListShortcutsFlow.init(deviceState:aceServiceInvoker:catWrapper:)(v17, (uint64_t)v16, v9);
    uint64_t v10 = (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsFlow and conformance ListShortcutsFlow;
    uint64_t v11 = (void (*)(uint64_t))type metadata accessor for ListShortcutsFlow;
  }
  else
  {
    outlined init with copy of DeviceState(v8, (uint64_t)v17);
    if (one-time initialization token for instance != -1) {
      swift_once();
    }
    uint64_t v12 = static VoiceCommandsAppPolicyHandler.instance;
    type metadata accessor for WFRunVoiceShortcutFlow(0);
    uint64_t v13 = swift_allocObject();
    swift_retain();
    *(void *)uint64_t v17 = specialized WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)((uint64_t)v17, v12, v13);
    uint64_t v10 = (unint64_t *)&lazy protocol witness table cache variable for type WFRunVoiceShortcutFlow and conformance WFRunVoiceShortcutFlow;
    uint64_t v11 = (void (*)(uint64_t))type metadata accessor for WFRunVoiceShortcutFlow;
  }
  lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(v10, 255, v11);
  uint64_t v14 = Flow.eraseToAnyFlow()();
  swift_release();
  outlined destroy of AutoShortcutInvocation((uint64_t)v6, (void (*)(void))type metadata accessor for VoiceCommandsNLIntent);
  return v14;
}

uint64_t SiriLinkFlowPlugin.makeFlowFor(usoParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v177 = a2;
  uint64_t v179 = type metadata accessor for USOParse();
  uint64_t v176 = *(void *)(v179 - 8);
  uint64_t v5 = __chkstk_darwin(v179);
  v175 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v164 = (char *)&v152 - v7;
  uint64_t v8 = type metadata accessor for CATOption();
  __chkstk_darwin(v8 - 8);
  v155 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of Flow.toActingFlow()>>.0);
  uint64_t v159 = *(void *)(v10 - 8);
  uint64_t v160 = v10;
  __chkstk_darwin(v10);
  v158 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of Flow.toActingFlow()>>.0);
  uint64_t v156 = *(void *)(v12 - 8);
  uint64_t v157 = v12;
  __chkstk_darwin(v12);
  char v154 = (char *)&v152 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VoiceCommandTask?);
  __chkstk_darwin(v14 - 8);
  v169 = (char *)&v152 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for VoiceCommandTask(0);
  uint64_t v16 = __chkstk_darwin(v166);
  uint64_t v162 = (uint64_t)&v152 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v152 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoShortcutInvocation?);
  __chkstk_darwin(v20 - 8);
  uint64_t v171 = (uint64_t)&v152 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = type metadata accessor for AutoShortcutInvocation();
  uint64_t v22 = __chkstk_darwin(v170);
  uint64_t v161 = (uint64_t)&v152 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v163 = (uint64_t)&v152 - v24;
  uint64_t v25 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v152 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v165 = (uint64_t)&v152 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v167 = (uint64_t)&v152 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v168 = (uint64_t)&v152 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  char v38 = (char *)&v152 - v37;
  __chkstk_darwin(v36);
  v172 = (uint8_t *)&v152 - v39;
  uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v40 = __chkstk_darwin(v174);
  v173 = (char *)&v152 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v152 - v43;
  __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v152 - v45;
  uint64_t v178 = a1;
  USOParse.parserIdentifier.getter();
  uint64_t v47 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (__swift_getEnumTagSinglePayload((uint64_t)v46, 1, v47) == 1) {
    goto LABEL_15;
  }
  uint64_t v153 = v3;
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?((uint64_t)v46, (uint64_t)v44, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v48 = *(void *)(v47 - 8);
  int v49 = (*(uint64_t (**)(char *, uint64_t))(v48 + 88))(v44, v47);
  if (v49 != enum case for Siri_Nlu_External_Parser.ParserIdentifier.overrides(_:)
    && v49 != enum case for Siri_Nlu_External_Parser.ParserIdentifier.nlv4(_:)
    && v49 != enum case for Siri_Nlu_External_Parser.ParserIdentifier.shortcutsExact(_:)
    && v49 != enum case for Siri_Nlu_External_Parser.ParserIdentifier.ssu(_:))
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v44, v47);
LABEL_15:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.voiceCommands);
    uint64_t v60 = (uint64_t)v175;
    uint64_t v61 = v176;
    uint64_t v62 = v179;
    (*(void (**)(char *, uint64_t, uint64_t))(v176 + 16))(v175, v178, v179);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      uint64_t v178 = swift_slowAlloc();
      *(void *)&__dst[0] = v178;
      *(_DWORD *)uint64_t v65 = 136315138;
      v172 = v65 + 4;
      USOParse.parserIdentifier.getter();
      uint64_t v66 = String.init<A>(describing:)();
      *(void *)&v185[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)__dst);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v179);
      _os_log_impl(&dword_0, v63, v64, "SiriLinkFlow plugin received NL parse from a parser it does not support: %s", v65, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    }

    uint64_t v68 = v177;
    uint64_t v69 = type metadata accessor for FlowSearchResult();
    __swift_storeEnumTagSinglePayload(v68, 1, 1, v69);
    return outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  }
  outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  USOParse.userParse.getter();
  uint64_t v53 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  uint64_t v54 = (uint64_t)v172;
  specialized Collection.first.getter(v53, (uint64_t)v172);
  swift_bridgeObjectRelease();
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v54, (uint64_t)v38, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v55 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v38, 1, v55);
  v175 = v19;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Any?((uint64_t)v38, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v57 = v171;
    __swift_storeEnumTagSinglePayload(v171, 1, 1, v170);
    uint64_t v58 = v153;
LABEL_22:
    outlined destroy of Any?(v57, &demangling cache variable for type metadata for AutoShortcutInvocation?);
    goto LABEL_23;
  }
  USOParse.groupIndex.getter();
  uint64_t v57 = v171;
  Siri_Nlu_External_UserDialogAct.extractAutoShortcutInvocation(groupIndex:)();
  (*(void (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v38, v55);
  int v71 = __swift_getEnumTagSinglePayload(v57, 1, v170);
  uint64_t v58 = v153;
  if (v71 == 1) {
    goto LABEL_22;
  }
  uint64_t v87 = v163;
  outlined init with take of VoiceCommandTask(v57, v163, (void (*)(void))type metadata accessor for AutoShortcutInvocation);
  uint64_t v88 = v58 + 72;
  __swift_project_boxed_opaque_existential_1((void *)(v58 + 72), *(void *)(v58 + 96));
  if ((dispatch thunk of DeviceState.isMac.getter() & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v123 = type metadata accessor for Logger();
    __swift_project_value_buffer(v123, (uint64_t)static Logger.voiceCommands);
    uint64_t v124 = Logger.logObject.getter();
    os_log_type_t v125 = static os_log_type_t.debug.getter();
    BOOL v126 = os_log_type_enabled(v124, v125);
    uint64_t v127 = v163;
    if (v126)
    {
      v128 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v128 = 0;
      _os_log_impl(&dword_0, v124, v125, "#SiriLinkFlowPlugin Starting AutoShortcutFlow", v128, 2u);
      swift_slowDealloc();
    }

    outlined init with copy of DeviceState(v88, (uint64_t)__dst);
    static AceService.currentAsync.getter();
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for VoiceShortcutClientWrapper();
    uint64_t v129 = swift_allocObject();
    type metadata accessor for LinkMetadataProvider();
    uint64_t v130 = swift_allocObject();
    *(void *)(v130 + 16) = [objc_allocWithZone((Class)LNMetadataProvider) init];
    char v131 = default argument 8 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)();
    type metadata accessor for AutoShortcutFlow();
    uint64_t v132 = swift_allocObject();
    uint64_t v133 = v161;
    outlined init with copy of AutoShortcutInvocation(v127, v161, (void (*)(void))type metadata accessor for AutoShortcutInvocation);
    *(void *)&__dst[0] = specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(v133, v185, v184, v129, v130, __dst, 0, (uint64_t)closure #1 in variable initialization expression of static AutoShortcutFlow.defaultRunner, 0, v131 & 1, v132);
    lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(&lazy protocol witness table cache variable for type AutoShortcutFlow and conformance AutoShortcutFlow, 255, (void (*)(uint64_t))type metadata accessor for AutoShortcutFlow);
    Flow.eraseToAnyFlow()();
    swift_release();
    uint64_t v83 = v177;
    static FlowSearchResult.flow(_:)();
    swift_release();
    outlined destroy of AutoShortcutInvocation(v127, (void (*)(void))type metadata accessor for AutoShortcutInvocation);
    goto LABEL_71;
  }
  outlined destroy of AutoShortcutInvocation(v87, (void (*)(void))type metadata accessor for AutoShortcutInvocation);
LABEL_23:
  uint64_t v72 = v168;
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v54, v168, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  int v73 = __swift_getEnumTagSinglePayload(v72, 1, v55);
  uint64_t v74 = (uint64_t)v169;
  if (v73 == 1)
  {
    outlined destroy of Any?(v72, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    goto LABEL_31;
  }
  Siri_Nlu_External_UserDialogAct.convertToStarterShortcut()();
  uint64_t v76 = v75;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v72, v55);
  if (v76)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logger.voiceCommands);
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v80 = 0;
      _os_log_impl(&dword_0, v78, v79, "#SiriLinkFlowPlugin received starter shortcut", v80, 2u);
      swift_slowDealloc();
    }

    uint64_t v81 = v153;
    outlined init with copy of DeviceState(v153 + 72, (uint64_t)__dst);
    outlined init with copy of DeviceState(v81 + 112, (uint64_t)v185);
    outlined init with copy of DeviceState(v81 + 272, (uint64_t)v184);
    outlined init with copy of DeviceState(v81 + 152, (uint64_t)v183);
    outlined init with copy of DeviceState(v81 + 192, (uint64_t)v182);
    outlined init with copy of DeviceState(v81 + 232, (uint64_t)v181);
    type metadata accessor for InstallVoiceShortcutFlow();
    swift_allocObject();
    swift_retain();
    InstallVoiceShortcutFlow.init(invocationData:deviceState:aceService:vcClient:outputPublisher:installShortcutViewFactory:locationProvider:dateTimeResolver:)();
    *(void *)&__dst[0] = v82;
    lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(&lazy protocol witness table cache variable for type InstallVoiceShortcutFlow and conformance InstallVoiceShortcutFlow, 255, (void (*)(uint64_t))type metadata accessor for InstallVoiceShortcutFlow);
    Flow.eraseToAnyFlow()();
    swift_release();
    uint64_t v83 = v177;
    static FlowSearchResult.flow(_:)();
    swift_release();
    swift_release();
LABEL_71:
    outlined destroy of Any?(v54, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v101 = type metadata accessor for FlowSearchResult();
    uint64_t v102 = v83;
LABEL_72:
    uint64_t v103 = 0;
    return __swift_storeEnumTagSinglePayload(v102, v103, 1, v101);
  }
LABEL_31:
  uint64_t v84 = v167;
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v54, v167, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  if (__swift_getEnumTagSinglePayload(v84, 1, v55) == 1)
  {
    outlined destroy of Any?(v84, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    __swift_storeEnumTagSinglePayload(v74, 1, 1, v166);
LABEL_34:
    outlined destroy of Any?(v74, &demangling cache variable for type metadata for VoiceCommandTask?);
    uint64_t v85 = v165;
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v54, v165, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (__swift_getEnumTagSinglePayload(v85, 1, v55) == 1)
    {
      outlined destroy of Any?(v85, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      memset(v185, 0, sizeof(v185));
      uint64_t v86 = v179;
LABEL_41:
      outlined destroy of Any?((uint64_t)v185, &demangling cache variable for type metadata for AppShortcutGeneralizedInvocation?);
      goto LABEL_42;
    }
    USOParse.groupIndex.getter();
    Siri_Nlu_External_UserDialogAct.extractGeneralizedAppShortcutInvocation(groupIndex:provider:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v85, v55);
    uint64_t v86 = v179;
    if (!*(void *)&v185[0]) {
      goto LABEL_41;
    }
    memcpy(__dst, v185, sizeof(__dst));
    uint64_t v89 = v58;
    uint64_t v90 = (void *)(v58 + 72);
    __swift_project_boxed_opaque_existential_1(v90, *(void *)(v89 + 96));
    if (dispatch thunk of DeviceState.isMac.getter())
    {
      outlined destroy of AppShortcutGeneralizedInvocation((uint64_t)__dst);
LABEL_42:
      uint64_t v91 = v164;
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v92 = type metadata accessor for Logger();
      __swift_project_value_buffer(v92, (uint64_t)static Logger.voiceCommands);
      uint64_t v93 = v176;
      (*(void (**)(char *, uint64_t, uint64_t))(v176 + 16))(v91, v178, v86);
      uint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v94, v95))
      {
        uint64_t v96 = (uint8_t *)swift_slowAlloc();
        *(void *)&__dst[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v96 = 136315138;
        uint64_t v97 = USOParse.debugDescription.getter();
        *(void *)&v185[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, (uint64_t *)__dst);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v179);
        _os_log_impl(&dword_0, v94, v95, "Cannot find flow for the uso parse: %s", v96, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v99 = (uint64_t)v172;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v86);
        uint64_t v99 = v54;
      }
      outlined destroy of Any?(v99, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v100 = v177;
      uint64_t v101 = type metadata accessor for FlowSearchResult();
      uint64_t v102 = v100;
      uint64_t v103 = 1;
      return __swift_storeEnumTagSinglePayload(v102, v103, 1, v101);
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v146 = type metadata accessor for Logger();
    __swift_project_value_buffer(v146, (uint64_t)static Logger.voiceCommands);
    v147 = Logger.logObject.getter();
    os_log_type_t v148 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v147, v148))
    {
      v149 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v149 = 0;
      _os_log_impl(&dword_0, v147, v148, "#SiriLinkFlowPlugin Starting Generalized AutoShortcutFlow", v149, 2u);
      swift_slowDealloc();
    }

    uint64_t v150 = v153;
    outlined init with copy of DeviceState(v153 + 112, (uint64_t)v184);
    outlined init with copy of DeviceState(v150 + 152, (uint64_t)v183);
    outlined init with copy of DeviceState(v150 + 272, (uint64_t)v182);
    outlined init with copy of DeviceState(v150 + 360, (uint64_t)v181);
    outlined init with copy of DeviceState((uint64_t)v90, (uint64_t)v180);
    LOBYTE(v150) = default argument 8 of AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)();
    type metadata accessor for AutoShortcutFlow();
    uint64_t v151 = swift_allocObject();
    outlined init with copy of AppShortcutGeneralizedInvocation((uint64_t)__dst, (uint64_t)v185);
    *(void *)&v185[0] = specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(v185, v184, v183, v182, v181, v180, 0, (uint64_t)closure #1 in variable initialization expression of static AutoShortcutFlow.defaultRunner, 0, v150 & 1, v151);
    lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(&lazy protocol witness table cache variable for type AutoShortcutFlow and conformance AutoShortcutFlow, 255, (void (*)(uint64_t))type metadata accessor for AutoShortcutFlow);
    Flow.eraseToAnyFlow()();
    swift_release();
    uint64_t v83 = v177;
    static FlowSearchResult.flow(_:)();
    swift_release();
    outlined destroy of AppShortcutGeneralizedInvocation((uint64_t)__dst);
    goto LABEL_71;
  }
  Siri_Nlu_External_UserDialogAct.convertToVoiceCommandTask()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v84, v55);
  if (__swift_getEnumTagSinglePayload(v74, 1, v166) == 1) {
    goto LABEL_34;
  }
  uint64_t v104 = (uint64_t)v175;
  outlined init with take of VoiceCommandTask(v74, (uint64_t)v175, (void (*)(void))type metadata accessor for VoiceCommandTask);
  uint64_t v105 = v162;
  outlined init with copy of AutoShortcutInvocation(v104, v162, (void (*)(void))type metadata accessor for VoiceCommandTask);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v106 = type metadata accessor for Logger();
    __swift_project_value_buffer(v106, (uint64_t)static Logger.voiceCommands);
    uint64_t v107 = Logger.logObject.getter();
    os_log_type_t v108 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v107, v108))
    {
      uint64_t v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v109 = 0;
      _os_log_impl(&dword_0, v107, v108, "#SiriLinkFlowPlugin Starting AutoShortcutsSetEnablementFlow", v109, 2u);
      swift_slowDealloc();
    }

    uint64_t v110 = v153;
    outlined init with copy of DeviceState(v153 + 72, (uint64_t)__dst);
    outlined init with copy of DeviceState(v110 + 152, (uint64_t)v185);
    outlined init with copy of DeviceState(v110 + 320, (uint64_t)v184);
    uint64_t v111 = *(void *)(v110 + 312);
    outlined init with copy of DeviceState(v110 + 272, (uint64_t)v183);
    outlined init with copy of DeviceState(v110 + 400, (uint64_t)v182);
    v112 = *(void **)(v110 + 440);
    type metadata accessor for AutoShortcutCATsSimple();
    swift_retain();
    id v113 = v112;
    static CATOption.defaultMode.getter();
    uint64_t v114 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for AppNameResolver();
    uint64_t v115 = swift_allocObject();
    type metadata accessor for UserDefaultsWrapper();
    swift_allocObject();
    v116 = UserDefaultsWrapper.init()();
    uint64_t v117 = type metadata accessor for AutoShortcutsSetEnablementFlow();
    uint64_t v118 = swift_allocObject();
    *(void *)&__dst[0] = specialized AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)((uint64_t)__dst, (uint64_t)v185, (uint64_t)v184, v111, v114, v183, v182, v115, (uint64_t)v113, (uint64_t)v116, v118);
    uint64_t v119 = lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(&lazy protocol witness table cache variable for type AutoShortcutsSetEnablementFlow and conformance AutoShortcutsSetEnablementFlow, 255, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSetEnablementFlow);
    uint64_t v120 = v158;
    Flow.toActingFlow()();
    swift_release();
    *(void *)&__dst[0] = v117;
    *((void *)&__dst[0] + 1) = v119;
    swift_getOpaqueTypeConformance2();
    uint64_t v121 = v177;
    uint64_t v122 = v160;
    static FlowSearchResult.flow<A>(_:)();
    (*(void (**)(char *, uint64_t))(v159 + 8))(v120, v122);
    outlined destroy of AutoShortcutInvocation((uint64_t)v175, (void (*)(void))type metadata accessor for VoiceCommandTask);
    outlined destroy of Any?(v54, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v101 = type metadata accessor for FlowSearchResult();
    uint64_t v102 = v121;
    goto LABEL_72;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v134 = type metadata accessor for Logger();
  __swift_project_value_buffer(v134, (uint64_t)static Logger.voiceCommands);
  v135 = Logger.logObject.getter();
  os_log_type_t v136 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v135, v136))
  {
    uint64_t v137 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v137 = 0;
    _os_log_impl(&dword_0, v135, v136, "#SiriLinkFlowPlugin Starting WFRunVoiceShortcutFlow", v137, 2u);
    swift_slowDealloc();
  }

  outlined init with copy of DeviceState(v153 + 72, (uint64_t)__dst);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v138 = static VoiceCommandsAppPolicyHandler.instance;
  uint64_t v139 = type metadata accessor for WFRunVoiceShortcutFlow(0);
  uint64_t v140 = swift_allocObject();
  swift_retain();
  *(void *)&__dst[0] = specialized WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)((uint64_t)__dst, v138, v140);
  uint64_t v141 = lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(&lazy protocol witness table cache variable for type WFRunVoiceShortcutFlow and conformance WFRunVoiceShortcutFlow, 255, (void (*)(uint64_t))type metadata accessor for WFRunVoiceShortcutFlow);
  char v142 = v154;
  Flow.toActingFlow()();
  swift_release();
  *(void *)&__dst[0] = v139;
  *((void *)&__dst[0] + 1) = v141;
  swift_getOpaqueTypeConformance2();
  uint64_t v143 = v177;
  uint64_t v144 = v157;
  static FlowSearchResult.flow<A>(_:)();
  (*(void (**)(char *, uint64_t))(v156 + 8))(v142, v144);
  outlined destroy of AutoShortcutInvocation((uint64_t)v175, (void (*)(void))type metadata accessor for VoiceCommandTask);
  outlined destroy of Any?(v54, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v145 = type metadata accessor for FlowSearchResult();
  __swift_storeEnumTagSinglePayload(v143, 0, 1, v145);
  return outlined destroy of AutoShortcutInvocation(v105, (void (*)(void))type metadata accessor for ShortcutIdentification);
}

uint64_t SiriLinkFlowPlugin.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 232);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 272);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 320);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 360);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 400);

  return v0;
}

uint64_t SiriLinkFlowPlugin.__deallocating_deinit()
{
  SiriLinkFlowPlugin.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for FlowPluginExtended.findFlowForX(parse:) in conformance SiriLinkFlowPlugin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SiriLinkFlowPlugin.findFlowForX(parse:)(a1, a2);
}

void *protocol witness for FlowPlugin.init() in conformance SiriLinkFlowPlugin@<X0>(void *a1@<X8>)
{
  uint64_t result = SiriLinkFlowPlugin.__allocating_init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for FlowPlugin.makeFlowFrame(parse:) in conformance SiriLinkFlowPlugin()
{
  return FlowPlugin.makeFlowFrame(parse:)();
}

uint64_t protocol witness for FlowPlugin.makeFlowFor(parse:) in conformance SiriLinkFlowPlugin()
{
  return FlowPlugin.makeFlowFor(parse:)();
}

uint64_t protocol witness for FlowPlugin.findFlowFor(parse:) in conformance SiriLinkFlowPlugin()
{
  return FlowPlugin.findFlowFor(parse:)();
}

uint64_t *specialized SiriLinkFlowPlugin.__allocating_init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long a21,long long a22,long long a23,uint64_t a24)
{
  uint64_t v110 = a8;
  uint64_t v94 = a7;
  uint64_t v92 = a6;
  uint64_t v90 = a5;
  os_log_type_t v108 = a3;
  uint64_t v109 = a4;
  uint64_t v107 = a2;
  long long v105 = a21;
  long long v104 = a22;
  long long v103 = a23;
  uint64_t v102 = a24;
  uint64_t v106 = a12;
  uint64_t v101 = a11;
  uint64_t v95 = a10;
  uint64_t v93 = a9;
  uint64_t v96 = a13;
  uint64_t v113 = a17;
  uint64_t v119 = a18;
  uint64_t v100 = a19;
  uint64_t v99 = *(void *)(a19 - 8);
  uint64_t v89 = a15;
  uint64_t v24 = __chkstk_darwin(a1);
  unint64_t v98 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = *(void *)(v26 - 8);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v97 = (char *)&v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v121 = (char *)&v85 - v30;
  uint64_t v118 = *(void *)(v31 - 8);
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v91 = (char *)&v85 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v85 - v35;
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v115 = (char *)&v85 - v35;
  uint64_t v116 = v38;
  uint64_t v39 = __chkstk_darwin(v34);
  uint64_t v123 = (uint64_t)&v85 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v111 = a20;
  v112 = (char *)&v85 - v42;
  uint64_t v43 = *(void *)(a20 - 8);
  uint64_t v44 = __chkstk_darwin(v41);
  uint64_t v127 = (uint64_t)&v85 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v85 - v47;
  uint64_t v120 = (char *)&v85 - v47;
  uint64_t v85 = a16;
  uint64_t v125 = *(void *)(a16 - 8);
  uint64_t v49 = v125;
  uint64_t v50 = __chkstk_darwin(v46);
  uint64_t v122 = (uint64_t)&v85 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v54 = (char *)&v85 - v53;
  uint64_t v124 = (char *)&v85 - v53;
  uint64_t v114 = v55;
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v57 = __chkstk_darwin(v52);
  uint64_t v117 = (uint64_t)&v85 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  uint64_t v60 = (char *)&v85 - v59;
  uint64_t v88 = v56;
  uint64_t v61 = *(void (**)(char *))(v56 + 32);
  uint64_t v87 = (char *)&v85 - v59;
  v61((char *)&v85 - v59);
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v54, v90, a16);
  uint64_t v86 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v48, v92, a20);
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 32);
  os_log_type_t v64 = v112;
  uint64_t v63 = v113;
  v62(v112, v94, v113);
  uint64_t v66 = v118;
  uint64_t v65 = v119;
  (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v36, v93, v119);
  uint64_t v67 = v126;
  uint64_t v68 = v121;
  uint64_t v69 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v121, v95, v89);
  uint64_t v96 = (uint64_t *)swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v117, v60, v114);
  uint64_t v70 = v85;
  (*(void (**)(uint64_t, char *, uint64_t))(v125 + 16))(v122, v124, v85);
  uint64_t v71 = v111;
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v127, v120, v111);
  (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v123, v64, v63);
  uint64_t v72 = (uint64_t)v91;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v91, v115, v65);
  uint64_t v73 = (uint64_t)v97;
  uint64_t v74 = v69;
  (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v97, v68, v69);
  uint64_t v75 = v99;
  uint64_t v76 = (uint64_t)v98;
  uint64_t v77 = v101;
  uint64_t v78 = v100;
  (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v98, v101, v100);
  uint64_t v84 = v71;
  uint64_t v83 = v65;
  uint64_t v79 = v113;
  uint64_t v80 = v114;
  uint64_t v81 = specialized SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)(v117, v107, v108, v109, v122, v127, v123, v110, v72, v73, v76, v106, v96, v114, v74, v70, v113, v83, v78,
          v84,
          v105,
          *((uint64_t *)&v105 + 1),
          v104,
          *((uint64_t *)&v104 + 1),
          v103,
          *((uint64_t *)&v103 + 1),
          v102);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v77, v78);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v121, v74);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v115, v119);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v112, v79);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v120, v111);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v70);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v80);
  return v81;
}

void *specialized SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  a13[7] = type metadata accessor for AppInstallInfoProvider();
  a13[8] = &protocol witness table for AppInstallInfoProvider;
  a13[4] = a1;
  a13[27] = type metadata accessor for LocationProvider();
  a13[28] = &protocol witness table for LocationProvider;
  a13[24] = a5;
  uint64_t v19 = type metadata accessor for DateTimeResolver();
  a13[32] = v19;
  a13[33] = &protocol witness table for DateTimeResolver;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a13 + 29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(boxed_opaque_existential_1, a6, v19);
  a13[37] = type metadata accessor for VoiceShortcutClientWrapper();
  a13[38] = &protocol witness table for VoiceShortcutClientWrapper;
  a13[34] = a7;
  a13[43] = type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  a13[44] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  a13[40] = a9;
  a13[48] = type metadata accessor for LinkMetadataProvider();
  a13[49] = &protocol witness table for LinkMetadataProvider;
  a13[45] = a10;
  a13[53] = type metadata accessor for AutoShortcutProvider();
  a13[54] = &protocol witness table for AutoShortcutProvider;
  a13[50] = a11;
  a13[2] = 0xD000000000000030;
  a13[3] = 0x8000000000225350;
  outlined init with take of AceServiceInvokerAsync(a2, (uint64_t)(a13 + 9));
  outlined init with take of AceServiceInvokerAsync(a3, (uint64_t)(a13 + 14));
  outlined init with take of AceServiceInvokerAsync(a4, (uint64_t)(a13 + 19));
  a13[39] = a8;
  a13[55] = a12;
  return a13;
}

uint64_t *specialized SiriLinkFlowPlugin.init(appInstallInfoProvider:deviceState:aceServiceInvoker:outputPublisher:locationProvider:dateTimeResolver:voiceShortcutsClient:autoShortcutCATs:linkActionPatterns:linkMetadataProvider:appShortcutProvider:preferences:)(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  a13[7] = a14;
  a13[8] = a21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a13 + 4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(boxed_opaque_existential_1, a1, a14);
  a13[27] = a16;
  a13[28] = a23;
  uint64_t v29 = __swift_allocate_boxed_opaque_existential_1(a13 + 24);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a16 - 8) + 32))(v29, a5, a16);
  a13[32] = a20;
  a13[33] = a27;
  uint64_t v30 = __swift_allocate_boxed_opaque_existential_1(a13 + 29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a20 - 8) + 32))(v30, a6, a20);
  a13[37] = a17;
  a13[38] = a24;
  uint64_t v31 = __swift_allocate_boxed_opaque_existential_1(a13 + 34);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a17 - 8) + 32))(v31, a7, a17);
  a13[43] = a18;
  a13[44] = a25;
  uint64_t v32 = __swift_allocate_boxed_opaque_existential_1(a13 + 40);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a18 - 8) + 32))(v32, a9, a18);
  a13[48] = a15;
  a13[49] = a22;
  uint64_t v33 = __swift_allocate_boxed_opaque_existential_1(a13 + 45);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a15 - 8) + 32))(v33, a10, a15);
  a13[53] = a19;
  a13[54] = a26;
  uint64_t v34 = __swift_allocate_boxed_opaque_existential_1(a13 + 50);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a19 - 8) + 32))(v34, a11, a19);
  a13[2] = 0xD000000000000030;
  a13[3] = 0x8000000000225350;
  outlined init with take of AceServiceInvokerAsync(a2, (uint64_t)(a13 + 9));
  outlined init with take of AceServiceInvokerAsync(a3, (uint64_t)(a13 + 14));
  outlined init with take of AceServiceInvokerAsync(a4, (uint64_t)(a13 + 19));
  a13[39] = a8;
  a13[55] = a12;
  return a13;
}

uint64_t base witness table accessor for FlowPlugin in SiriLinkFlowPlugin(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(&lazy protocol witness table cache variable for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin, a2, (void (*)(uint64_t))type metadata accessor for SiriLinkFlowPlugin);
}

uint64_t type metadata accessor for SiriLinkFlowPlugin()
{
  return self;
}

uint64_t outlined init with take of SiriWorkflowRunnerInput(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined release of SiriWorkflowRunnerInput?(uint64_t a1)
{
  return a1;
}

void *outlined consume of SiriWorkflowRunnerInput?(void *result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return outlined consume of SiriWorkflowRunnerInput(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

void *outlined consume of SiriWorkflowRunnerInput(void *result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, char a9)
{
  switch(a9)
  {
    case 0:
      goto LABEL_5;
    case 1:
      goto LABEL_3;
    case 2:
      a5 = a7;
      a6 = a8;
LABEL_3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t result = a6;
      goto LABEL_4;
    case 3:
LABEL_4:

LABEL_5:
      uint64_t result = (void *)swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(const void *a1, long long *a2, long long *a3, long long *a4, long long *a5, long long *a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  *(void *)(a11 + 40) = &type metadata for AppShortcutGeneralizedInvocation;
  *(void *)(a11 + 48) = &protocol witness table for AppShortcutGeneralizedInvocation;
  uint64_t v18 = swift_allocObject();
  *(void *)(a11 + 16) = v18;
  memcpy((void *)(v18 + 16), a1, 0x60uLL);
  outlined init with take of AceServiceInvokerAsync(a2, a11 + 56);
  outlined init with take of AceServiceInvokerAsync(a3, a11 + 136);
  outlined init with take of AceServiceInvokerAsync(a4, a11 + 176);
  outlined init with take of AceServiceInvokerAsync(a5, a11 + 216);
  outlined init with take of AceServiceInvokerAsync(a6, a11 + 96);
  *(unsigned char *)(a11 + 273) = a7;
  *(void *)(a11 + 256) = a8;
  *(void *)(a11 + 264) = a9;
  *(unsigned char *)(a11 + 272) = a10;
  return a11;
}

uint64_t specialized WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CATOption();
  __chkstk_darwin(v6 - 8);
  uint64_t v18 = type metadata accessor for VoiceCommandsAppPolicyHandler();
  uint64_t v19 = &protocol witness table for VoiceCommandsAppPolicyHandler;
  *(void *)&long long v17 = a2;
  type metadata accessor for WFRunVoiceShortcutFlow.State(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of DeviceState(a1, a3 + 32);
  outlined init with copy of DeviceState(a1, (uint64_t)v16);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v8 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATs();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v12 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapper.__allocating_init(options:globals:)();
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject();
  *(void *)(a3 + 16) = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v16, v7, v15, v8, v9, v10, v11, v12, v13);
  type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a3 + 24) = swift_allocObject();
  outlined init with take of AceServiceInvokerAsync(&v17, a3 + 72);
  return a3;
}

uint64_t specialized AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v42 = a7;
  uint64_t v41 = a6;
  uint64_t v40 = a2;
  uint64_t v43 = a9;
  uint64_t v17 = type metadata accessor for CATOption();
  __chkstk_darwin(v17 - 8);
  uint64_t v52 = type metadata accessor for AppNameResolver();
  uint64_t v53 = &protocol witness table for AppNameResolver;
  *(void *)&long long v51 = a8;
  uint64_t v49 = type metadata accessor for UserDefaultsWrapper();
  uint64_t v50 = &protocol witness table for UserDefaultsWrapper;
  *(void *)&long long v48 = a10;
  type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a11 + 280) = swift_allocObject();
  outlined init with copy of DeviceState(a1, a11 + 16);
  outlined init with copy of DeviceState(a2, a11 + 56);
  outlined init with copy of DeviceState(a1, (uint64_t)v47);
  outlined init with copy of DeviceState(a3, (uint64_t)v44);
  type metadata accessor for AutoShortcutDialogTemplating();
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v19 = v45;
  uint64_t v20 = v46;
  uint64_t v21 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v44, v45);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v24 + 16))(v23);
  uint64_t v25 = specialized AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)(v47, a4, a5, (uint64_t)v23, v18, v19, v20);
  swift_retain();
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v44);
  *(void *)(a11 + 96) = v25;
  outlined init with copy of DeviceState(a1, (uint64_t)v47);
  outlined init with copy of DeviceState(a3, (uint64_t)v44);
  type metadata accessor for RunLinkActionCATs();
  static CATOption.defaultMode.getter();
  uint64_t v26 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v27 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v28 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v29 = CATWrapperSimple.__allocating_init(options:globals:)();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(v40);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = v45;
  uint64_t v32 = v46;
  uint64_t v33 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v44, v45);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v39 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v36 + 16))(v35);
  uint64_t v37 = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)(v47, v26, v27, v28, v29, (uint64_t)v35, v30, v31, v32);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v44);
  *(void *)(a11 + 104) = v37;
  outlined init with take of AceServiceInvokerAsync(v41, a11 + 112);
  outlined init with take of AceServiceInvokerAsync(v42, a11 + 152);
  outlined init with take of AceServiceInvokerAsync(&v51, a11 + 192);
  *(void *)(a11 + 232) = v43;
  outlined init with take of AceServiceInvokerAsync(&v48, a11 + 240);
  *(_OWORD *)(a11 + 288) = 0u;
  *(_OWORD *)(a11 + 304) = 0u;
  *(_OWORD *)(a11 + 320) = 0u;
  *(_OWORD *)(a11 + 336) = 0u;
  *(unsigned char *)(a11 + 352) = 0x80;
  return a11;
}

uint64_t specialized AutoShortcutFlow.init(appShortcutInvocation:aceServiceInvoker:outputPublisher:voiceShortcutsClient:linkMetadataProvider:deviceState:state:workflowRunnerFlowMaker:supportsAssistantEngine:)(uint64_t a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, long long *a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v25 = type metadata accessor for VoiceShortcutClientWrapper();
  uint64_t v26 = &protocol witness table for VoiceShortcutClientWrapper;
  *(void *)&long long v24 = a4;
  uint64_t v22 = type metadata accessor for LinkMetadataProvider();
  uint64_t v23 = &protocol witness table for LinkMetadataProvider;
  *(void *)&long long v21 = a5;
  *(void *)(a11 + 40) = type metadata accessor for AutoShortcutInvocation();
  *(void *)(a11 + 48) = &protocol witness table for AutoShortcutInvocation;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a11 + 16));
  outlined init with take of VoiceCommandTask(a1, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for AutoShortcutInvocation);
  outlined init with take of AceServiceInvokerAsync(a2, a11 + 56);
  outlined init with take of AceServiceInvokerAsync(a3, a11 + 136);
  outlined init with take of AceServiceInvokerAsync(&v24, a11 + 176);
  outlined init with take of AceServiceInvokerAsync(&v21, a11 + 216);
  outlined init with take of AceServiceInvokerAsync(a6, a11 + 96);
  *(unsigned char *)(a11 + 273) = a7;
  *(void *)(a11 + 256) = a8;
  *(void *)(a11 + 264) = a9;
  *(unsigned char *)(a11 + 272) = a10;
  return a11;
}

uint64_t outlined init with take of SiriWorkflowRunnerInput?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_5_7();
  v5(v4);
  return a2;
}

uint64_t outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_6_6();
  v5(v4);
  return a2;
}

uint64_t outlined init with copy of AppShortcutGeneralizedInvocation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of AutoShortcutInvocation(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_6_6();
  v5(v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type SiriLinkFlowPlugin and conformance SiriLinkFlowPlugin(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of AutoShortcutInvocation(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with take of VoiceCommandTask(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_5_7();
  v5(v4);
  return a2;
}

uint64_t sub_4BB88()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);

  return _swift_deallocObject(v0, 112, 7);
}

char *OUTLINED_FUNCTION_3_9@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  return v0;
}

uint64_t RunVoiceCommandCATs.confirmSlotValue(device:slotName:slotValue:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_1(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 64) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t RunVoiceCommandCATs.confirmSlotValue(device:slotName:slotValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v12 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = (__n128 *)swift_allocObject();
  *(void *)(v12 + 72) = v15;
  OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_2138B0);
  if (v14)
  {
    type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v15[3].n128_u64[1] = 0;
    v15[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_13_8(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_18_7(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v15[7].n128_u64[1] = v10;
    __swift_allocate_boxed_opaque_existential_1(v11);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_20_8();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_46_1();
  v15[8].n128_u64[0] = 0x756C6156746F6C73;
  v15[8].n128_u64[1] = 0xE900000000000065;
  outlined init with copy of AppDisplayInfo?(v21, v13, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v19)
  {
    outlined destroy of AutoShortcutInvocation?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_17_2();
  long long v24 = (void *)OUTLINED_FUNCTION_44_0(v23);
  *long long v24 = v25;
  v24[1] = RunVoiceCommandCATs.confirmSlotValue(device:slotName:slotValue:);
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_33_2();
  OUTLINED_FUNCTION_48_0();
  return v30(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
}

uint64_t RunVoiceCommandCATs.disambiguateSlotValue(device:slotName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunVoiceCommandCATs.disambiguateSlotValue(device:slotName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_38_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_35_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_212170);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = *(void *)(v10 + 48);
  v11[6] = v12;
  OUTLINED_FUNCTION_13_8(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  *uint64_t v22 = v23;
  v22[1] = RunVoiceCommandCATs.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_33_2();
  OUTLINED_FUNCTION_48_0();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunVoiceCommandCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_1(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 64) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunVoiceCommandCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v12 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = (__n128 *)swift_allocObject();
  *(void *)(v12 + 72) = v15;
  OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_2138B0);
  if (v14)
  {
    type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v15[3].n128_u64[1] = 0;
    v15[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_34_3();
  v15[4].n128_u64[1] = v16;
  strcpy((char *)&v15[5], "customDialog");
  v15[5].n128_u8[13] = 0;
  v15[5].n128_u16[7] = -5120;
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_18_7(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v15[7].n128_u64[1] = v10;
    __swift_allocate_boxed_opaque_existential_1(v11);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_20_8();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_46_1();
  v15[8].n128_u64[0] = 0xD000000000000010;
  v15[8].n128_u64[1] = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v21, v13, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v19)
  {
    outlined destroy of AutoShortcutInvocation?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_17_2();
  uint64_t v24 = (void *)OUTLINED_FUNCTION_44_0(v23);
  *uint64_t v24 = v25;
  v24[1] = RunVoiceCommandCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:);
  OUTLINED_FUNCTION_48_0();
  return v30(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
}

uint64_t RunVoiceCommandCATs.errorWithCodePreflightRequired(localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  void v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  v1[5] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunVoiceCommandCATs.errorWithCodePreflightRequired(localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = v10[5];
  uint64_t v12 = v10[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_50_0();
  v10[6] = v13;
  *(_OWORD *)(v13 + 16) = xmmword_212160;
  *(void *)(v13 + 32) = 0xD000000000000010;
  *(void *)(v13 + 40) = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v12, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v11, 1, v14) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v10[5], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    *(void *)(v13 + 72) = v14;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 48));
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v15 + 32))();
  }
  unint64_t v16 = (void *)OUTLINED_FUNCTION_17_2();
  v10[7] = v16;
  *unint64_t v16 = v10;
  v16[1] = RunVoiceCommandCATs.errorWithCodePreflightRequired(localizedAppName:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_48_0();
  return v21(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
}

uint64_t RunVoiceCommandCATs.errorWithCodeUnsupportedOnCarPlay(device:userAssignedDeviceName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t RunVoiceCommandCATs.errorWithCodeUnsupportedOnCarPlay(device:userAssignedDeviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_35_3(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_12_7(v16);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_59();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  *uint64_t v22 = v23;
  v22[1] = RunVoiceCommandCATs.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_6_1();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunVoiceCommandCATs.followupNotSupported(device:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t RunVoiceCommandCATs.followupNotSupported(device:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_35_3(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_12_7(v16);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_59();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  *uint64_t v22 = v23;
  v22[1] = RunVoiceCommandCATs.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_6_1();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunVoiceCommandCATs.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v0;
  *(unsigned char *)(v1 + 129) = v3;
  *(void *)(v1 + 40) = v4;
  *(void *)(v1 + 48) = v5;
  *(void *)(v1 + 24) = v6;
  *(void *)(v1 + 32) = v7;
  *(unsigned char *)(v1 + 128) = v8;
  *(void *)(v1 + 16) = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v10);
  *(void *)(v1 + 72) = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 80) = swift_task_alloc();
  *(void *)(v1 + 88) = swift_task_alloc();
  *(void *)(v1 + 96) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t RunVoiceCommandCATs.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  unint64_t v11 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)swift_allocObject();
  *(void *)(v10 + 104) = v12;
  uint64_t v13 = OUTLINED_FUNCTION_1_2(v12, (__n128)xmmword_2138C0);
  if (v11)
  {
    uint64_t v13 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v12[3].n128_u64[1] = 0;
    v12[4].n128_u64[0] = 0;
  }
  uint64_t v14 = *(void *)(v10 + 32);
  unsigned __int8 v15 = *(unsigned char *)(v10 + 128);
  v12[3].n128_u64[0] = v11;
  v12[4].n128_u64[1] = v13;
  v12[5].n128_u64[0] = 0xD000000000000016;
  v12[5].n128_u64[1] = 0x8000000000226BC0;
  v12[6].n128_u8[0] = v15;
  v12[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v12[8].n128_u64[0] = 0xD000000000000010;
  v12[8].n128_u64[1] = 0x8000000000226B80;
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v14);
  uint64_t v16 = type metadata accessor for SpeakableString();
  int v17 = OUTLINED_FUNCTION_41_2();
  uint64_t v18 = *(void *)(v10 + 96);
  if (v17 == 1)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_20_8();
    v19();
    swift_retain();
  }
  uint64_t v20 = *(void *)(v10 + 88);
  uint64_t v21 = *(void *)(v10 + 40);
  strcpy((char *)&v12[11], "customResponse");
  v12[11].n128_u8[15] = -18;
  outlined init with copy of AppDisplayInfo?(v21, v20, &demangling cache variable for type metadata for SpeakableString?);
  if (OUTLINED_FUNCTION_41_2() == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v10 + 88), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v12[13].n128_u64[1] = v16;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12[12]);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = *(void *)(v10 + 80);
  uint64_t v24 = *(void *)(v10 + 48);
  strcpy((char *)&v12[14], "intentCategory");
  v12[14].n128_u8[15] = -18;
  outlined init with copy of AppDisplayInfo?(v24, v23, &demangling cache variable for type metadata for SpeakableString?);
  if (OUTLINED_FUNCTION_41_2() == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v10 + 80), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v12[16].n128_u64[1] = v16;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12[15]);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = *(void *)(v10 + 72);
  OUTLINED_FUNCTION_42_2();
  v12[17].n128_u64[0] = v27;
  v12[17].n128_u64[1] = v28;
  outlined init with copy of AppDisplayInfo?(v29, v26, &demangling cache variable for type metadata for SpeakableString?);
  if (OUTLINED_FUNCTION_41_2() == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v10 + 72), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v12[19].n128_u64[1] = v16;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12[18]);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v30();
  }
  unsigned __int8 v31 = *(unsigned char *)(v10 + 129);
  v12[20].n128_u64[0] = 0xD000000000000018;
  v12[20].n128_u64[1] = 0x8000000000226BE0;
  v12[22].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v12[21].n128_u8[0] = v31;
  uint64_t v32 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v10 + 112) = v32;
  *uint64_t v32 = v10;
  v32[1] = RunVoiceCommandCATs.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_6_1();
  return v37(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10);
}

uint64_t RunVoiceCommandCATs.intentHandledResponseDone(device:localizedAppName:intentVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_1(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 64) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t RunVoiceCommandCATs.intentHandledResponseDone(device:localizedAppName:intentVerb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v12 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unsigned __int8 v15 = (__n128 *)swift_allocObject();
  *(void *)(v12 + 72) = v15;
  OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_2138B0);
  if (v14)
  {
    type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v15[3].n128_u64[1] = 0;
    v15[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_34_3();
  v15[4].n128_u64[1] = v16;
  v15[5].n128_u64[0] = 0xD000000000000010;
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_18_7(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v15[7].n128_u64[1] = v10;
    __swift_allocate_boxed_opaque_existential_1(v11);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_20_8();
    v20();
    swift_retain();
  }
  OUTLINED_FUNCTION_46_1();
  OUTLINED_FUNCTION_42_2();
  v15[8].n128_u64[0] = v21;
  v15[8].n128_u64[1] = v22;
  outlined init with copy of AppDisplayInfo?(v23, v13, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v19)
  {
    outlined destroy of AutoShortcutInvocation?(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_59();
  uint64_t v26 = (void *)OUTLINED_FUNCTION_44_0(v25);
  *uint64_t v26 = v27;
  v26[1] = RunVoiceCommandCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:);
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_6_1();
  return v32(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
}

uint64_t RunVoiceCommandCATs.openApp(device:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t RunVoiceCommandCATs.openApp(device:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  unsigned __int8 v15 = (__n128 *)OUTLINED_FUNCTION_35_3(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_12_7(v16);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_59();
  unint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  *unint64_t v22 = v23;
  v22[1] = RunVoiceCommandCATs.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_6_1();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunVoiceCommandCATs.openAppFailed(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunVoiceCommandCATs.openAppFailed(device:));
}

uint64_t RunVoiceCommandCATs.openAppFailed(device:)()
{
  unint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_50_0();
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_1_2(v2, (__n128)xmmword_212160);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_3_1();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_45_0(v4);
  *uint64_t v5 = v6;
  v5[1] = RunVoiceCommandCATs.openAppFailed(device:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_43_1();
  return v7();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t RunVoiceCommandCATs.openAppFailedCarPlay(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunVoiceCommandCATs.openAppFailedCarPlay(device:));
}

uint64_t RunVoiceCommandCATs.openAppFailedCarPlay(device:)()
{
  unint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_50_0();
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_1_2(v2, (__n128)xmmword_212160);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_3_1();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_45_0(v4);
  *uint64_t v5 = v6;
  v5[1] = RunVoiceCommandCATs.openAppFailedCarPlay(device:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_43_1();
  return v7();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

uint64_t RunVoiceCommandCATs.openAppFailedWatch(device:userAssignedDeviceName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t RunVoiceCommandCATs.openAppFailedWatch(device:userAssignedDeviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  unsigned __int8 v15 = (__n128 *)OUTLINED_FUNCTION_35_3(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_12_7(v16);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_59();
  unint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  *unint64_t v22 = v23;
  v22[1] = RunVoiceCommandCATs.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_6_1();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunVoiceCommandCATs.promptForSlotValue(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunVoiceCommandCATs.promptForSlotValue(device:));
}

uint64_t RunVoiceCommandCATs.promptForSlotValue(device:)()
{
  unint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_50_0();
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = OUTLINED_FUNCTION_1_2(v2, (__n128)xmmword_212160);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_3_1();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_45_0(v4);
  *uint64_t v5 = v6;
  v5[1] = RunVoiceCommandCATs.openAppFailedCarPlay(device:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_43_1();
  return v7();
}

uint64_t RunVoiceCommandCATs.unsupportedSlotValue(device:slotName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t RunVoiceCommandCATs.unsupportedSlotValue(device:slotName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_38_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_35_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_212170);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = *(void *)(v10 + 48);
  v11[6] = v12;
  OUTLINED_FUNCTION_13_8(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  unint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  *unint64_t v22 = v23;
  v22[1] = RunVoiceCommandCATs.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_33_2();
  OUTLINED_FUNCTION_48_0();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunVoiceCommandCATs.yesAndCancel(device:intentVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t RunVoiceCommandCATs.yesAndCancel(device:intentVerb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = v10[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_38_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_35_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_212170);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = v10[6];
  uint64_t v17 = v10[4];
  v11[6] = v12;
  v11[9] = v15;
  v11[10] = 0x6556746E65746E69;
  v11[11] = 0xEA00000000006272;
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  unint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  *unint64_t v22 = v23;
  v22[1] = RunVoiceCommandCATs.yesAndCancel(device:intentVerb:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_33_2();
  OUTLINED_FUNCTION_48_0();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunVoiceCommandCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return RunVoiceCommandCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t RunVoiceCommandCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v11;
}

uint64_t type metadata accessor for RunVoiceCommandCATs()
{
  uint64_t result = type metadata singleton initialization cache for RunVoiceCommandCATs;
  if (!type metadata singleton initialization cache for RunVoiceCommandCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RunVoiceCommandCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for RunVoiceCommandCATs()
{
  return type metadata accessor for RunVoiceCommandCATs();
}

uint64_t OUTLINED_FUNCTION_2_11(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_12_7(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = v3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_13_8(uint64_t result)
{
  v1[9] = result;
  v1[10] = 0x656D614E746F6C73;
  v1[11] = 0xE800000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_14_6(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_18_7(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_22_8@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  return outlined init with copy of AppDisplayInfo?(a2, v2, a1);
}

void OUTLINED_FUNCTION_24_5()
{
  *(void *)(v1 + 88) = (v0 - 32) | 0x8000000000000000;
}

double OUTLINED_FUNCTION_30_3()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_32_4()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

void OUTLINED_FUNCTION_34_3()
{
  *(void *)(v1 + 48) = v0;
}

uint64_t OUTLINED_FUNCTION_35_3(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return *(void *)(v0 + 16);
}

uint64_t *OUTLINED_FUNCTION_37_2()
{
  *(void *)(v2 + 120) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_39_3(uint64_t result, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = result;
  v4[3] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_41_2()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_44_0(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_45_0(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_47_1(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = result;
  return result;
}

uint64_t *OUTLINED_FUNCTION_48_1()
{
  *(void *)(v2 + 168) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_49()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_50_0()
{
  return swift_allocObject();
}

void WorkflowRunnerFlow.__allocating_init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  OUTLINED_FUNCTION_36();
  uint64_t v72 = v31;
  uint64_t v73 = v32;
  uint64_t v70 = v33;
  uint64_t v71 = v34;
  OUTLINED_FUNCTION_83();
  id v35 = objc_allocWithZone(v28);
  uint64_t v36 = *(void *)(v29 + 24);
  uint64_t v37 = *(void *)(v29 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v29, v36);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v38);
  uint64_t v40 = OUTLINED_FUNCTION_49_0(v39, v62);
  v41(v40);
  uint64_t v42 = *(void *)(a26 + 24);
  uint64_t v43 = *(void *)(a26 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a26, v42);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v44);
  uint64_t v46 = OUTLINED_FUNCTION_32_5(v45, v63);
  uint64_t v48 = v47(v46);
  OUTLINED_FUNCTION_29_4(v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v30, a27, a28, (uint64_t)v35, v42, v36,
    v43,
    v37,
    v61,
    v64,
    a27,
    v65,
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73);
  __swift_destroy_boxed_opaque_existential_1Tm(a26);
  __swift_destroy_boxed_opaque_existential_1Tm(v29);
  OUTLINED_FUNCTION_27_1();
}

uint64_t (**SLFLocationAccessGuardProvider.makeGuardFlow.unsafeMutableAddressor())()
{
  return &static SLFLocationAccessGuardProvider.makeGuardFlow;
}

void WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  OUTLINED_FUNCTION_36();
  uint64_t v69 = v28;
  uint64_t v70 = v31;
  uint64_t v74 = v32;
  uint64_t v75 = v33;
  uint64_t v72 = v34;
  uint64_t v73 = v35;
  uint64_t v71 = v36;
  OUTLINED_FUNCTION_83();
  uint64_t v37 = *(void *)(v29 + 24);
  uint64_t v38 = *(void *)(v29 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v29, v37);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v39);
  uint64_t v41 = OUTLINED_FUNCTION_49_0(v40, v63);
  v42(v41);
  uint64_t v43 = *(void *)(a26 + 24);
  uint64_t v44 = *(void *)(a26 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a26, v43);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v45);
  uint64_t v47 = OUTLINED_FUNCTION_32_5(v46, v64);
  uint64_t v49 = v48(v47);
  OUTLINED_FUNCTION_29_4(v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v30, a27, a28, v69, v43, v37,
    v44,
    v38,
    v62,
    v65,
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v75);
  __swift_destroy_boxed_opaque_existential_1Tm(a26);
  __swift_destroy_boxed_opaque_existential_1Tm(v29);
  OUTLINED_FUNCTION_27_1();
}

void WorkflowRunnerFlow.on(input:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_92();
  uint64_t v3 = type metadata accessor for WorkflowRunnerFlow.State(v2);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = v6 - v5;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v58 = v9;
  uint64_t v59 = v8;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_51_0();
  uint64_t v54 = v10 - v11;
  __chkstk_darwin(v12);
  type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_12_1();
  uint64_t v56 = v14;
  uint64_t v57 = v13;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_50_1();
  uint64_t v55 = v15;
  uint64_t v16 = type metadata accessor for Input();
  OUTLINED_FUNCTION_12_1();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (uint8_t *)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.voiceCommands);
  uint64_t v60 = v0;
  OUTLINED_FUNCTION_59_0();
  v24();
  uint64_t v53 = v23;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = OUTLINED_FUNCTION_25_2();
    v50[1] = v3;
    uint64_t v28 = (uint8_t *)v27;
    uint64_t v29 = OUTLINED_FUNCTION_22_3();
    uint64_t v52 = v0;
    uint64_t v62 = v29;
    uint64_t v51 = v7;
    *(_DWORD *)uint64_t v28 = 136315138;
    v50[0] = v28 + 4;
    lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v62);
    uint64_t v7 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_3();
    v32();
    _os_log_impl(&dword_0, v25, v26, "WorkflowRunnerFlow received input: %s", v28, 0xCu);
    OUTLINED_FUNCTION_68();
    uint64_t v1 = v52;
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    (*(void (**)(uint8_t *, uint64_t))(v18 + 8))(v21, v16);
  }

  Input.parse.getter();
  uint64_t v33 = OUTLINED_FUNCTION_76();
  if (v34(v33) == enum case for Parse.directInvocation(_:))
  {
    uint64_t v21 = (uint8_t *)0xD00000000000003FLL;
    uint64_t v35 = OUTLINED_FUNCTION_76();
    v36(v35);
    char v37 = v55;
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_73();
    v38();
    if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000003FLL && v39 == 0x8000000000226B40)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_66();
      v40();
      goto LABEL_19;
    }
    _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_97();
    OUTLINED_FUNCTION_66();
    v43();
    if (v37) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v41 = OUTLINED_FUNCTION_76();
    v42(v41);
  }
  Input.parse.getter();
  char v44 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  OUTLINED_FUNCTION_20_3();
  v45();
  switch(v44)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_16;
    case 3:
      break;
    default:
      _stringCompareWithSmolCheck(_:_:expecting:)();
      OUTLINED_FUNCTION_97();
      if (v44)
      {
LABEL_16:
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_15_2(v48);
          _os_log_impl(&dword_0, v46, v47, "WorkflowRunnerFlow received cancel signal, cancelling execution...", v21, 2u);
          OUTLINED_FUNCTION_7_0();
        }

        swift_storeEnumTagMultiPayload();
        uint64_t v49 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
        OUTLINED_FUNCTION_23_6();
        outlined assign with take of WorkflowRunnerFlow.State(v7, v49);
        swift_endAccess();
      }
      break;
  }
LABEL_19:
  OUTLINED_FUNCTION_27_1();
}

uint64_t WorkflowRunnerFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[32] = v2;
  v1[33] = v0;
  uint64_t v3 = type metadata accessor for AceOutput();
  v1[34] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[35] = v4;
  v1[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SiriWorkflowRunnerEvent(0);
  v1[37] = v5;
  OUTLINED_FUNCTION_16(v5);
  v1[38] = OUTLINED_FUNCTION_13_0();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  OUTLINED_FUNCTION_16(v6);
  v1[41] = OUTLINED_FUNCTION_13_0();
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  v1[44] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[45] = v8;
  v1[46] = OUTLINED_FUNCTION_13_0();
  v1[47] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for WorkflowRunnerFlow.State(0);
  v1[48] = v9;
  OUTLINED_FUNCTION_16(v9);
  v1[49] = OUTLINED_FUNCTION_13_0();
  v1[50] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 480) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  void *v7;
  uint64_t v9;

  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = v0[34];
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v4);
  v0[5] = v3;
  v0[6] = (uint64_t)&protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(boxed_opaque_existential_1, v1, v3);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[61] = (uint64_t)v7;
  *uint64_t v7 = v0;
  v7[1] = WorkflowRunnerFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 496) = v0;
  swift_task_dealloc();
  if (!v0) {
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 16);
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t WorkflowRunnerFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_11_0();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_26();
  a20 = v22;
  v22[51] = OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  uint64_t v25 = OUTLINED_FUNCTION_96();
  outlined init with copy of WorkflowRunnerFlow.State(v25, v26);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v27 = v22[47];
      uint64_t v28 = v22[43];
      uint64_t v29 = v22[37];
      uint64_t v30 = v22[33];
      OUTLINED_FUNCTION_73();
      v31();
      __swift_storeEnumTagSinglePayload(v28, 1, 1, v29);
      uint64_t v32 = swift_task_alloc();
      v22[52] = v32;
      *(void *)(v32 + 16) = v28;
      *(void *)(v32 + 24) = v27;
      uint64_t v33 = swift_task_alloc();
      v22[53] = v33;
      *(void *)(v33 + 16) = v30;
      *(void *)(v33 + 24) = v28;
      uint64_t v34 = (void *)swift_task_alloc();
      v22[54] = v34;
      *uint64_t v34 = v22;
      v34[1] = WorkflowRunnerFlow.execute();
      OUTLINED_FUNCTION_3();
      return static VoiceCmdsInstrumentations.emitWaitForRequest(type:logMessage:task:updateInfo:)();
    case 8u:
      uint64_t v38 = v22[50];
      uint64_t v40 = v22[45];
      uint64_t v39 = v22[46];
      uint64_t v41 = v22[44];
      swift_errorRelease();
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v39, v38 + *(int *)(v42 + 48), v41);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      v22[56] = __swift_project_value_buffer(v43, (uint64_t)static Logger.voiceCommands);
      char v44 = (void *)Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_5_3(v45))
      {
        uint64_t v46 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v46);
        OUTLINED_FUNCTION_23_0(&dword_0, v47, v48, "#WorkflowRunnerFlow has handled error, waiting for the finish call from runner client...");
        OUTLINED_FUNCTION_7_0();
      }

      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      v22[57] = v49;
      *uint64_t v49 = v50;
      v49[1] = WorkflowRunnerFlow.execute();
      OUTLINED_FUNCTION_3();
      return AsyncStream.Iterator.next()(v51, v52, v53, v54, v55, v56, v57, v58, a9, a10, a11, a12, a13, a14);
    case 9u:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.voiceCommands);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = (uint8_t *)OUTLINED_FUNCTION_25_2();
        a11 = OUTLINED_FUNCTION_22_3();
        *(_DWORD *)uint64_t v62 = 136315138;
        swift_getErrorValue();
        uint64_t v63 = Error.localizedDescription.getter();
        v22[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &a11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v60, v61, "#WorkflowRunnerFlow in error state: %s, exiting flow", v62, 0xCu);
        OUTLINED_FUNCTION_68();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      static ExecuteResponse.complete()();
      swift_errorRelease();
      goto LABEL_31;
    case 0xAu:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v65 = type metadata accessor for Logger();
      __swift_project_value_buffer(v65, (uint64_t)static Logger.voiceCommands);
      uint64_t v66 = (void *)Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_5_3(v67))
      {
        uint64_t v68 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v68);
        OUTLINED_FUNCTION_23_0(&dword_0, v69, v70, "#WorkflowRunnerFlow completed execution, exiting flow");
        OUTLINED_FUNCTION_7_0();
      }

      static ExecuteResponse.complete()();
      goto LABEL_31;
    case 0xBu:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v71 = type metadata accessor for Logger();
      __swift_project_value_buffer(v71, (uint64_t)static Logger.voiceCommands);
      uint64_t v72 = (void *)Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_5_3(v73))
      {
        uint64_t v74 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v74);
        OUTLINED_FUNCTION_23_0(&dword_0, v75, v76, "#WorkflowRunnerFlow cancelled execution, exiting flow");
        OUTLINED_FUNCTION_7_0();
      }

      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      v22[59] = v77;
      *uint64_t v77 = v78;
      v77[1] = WorkflowRunnerFlow.execute();
      OUTLINED_FUNCTION_3();
      return WorkflowRunnerFlow.buildCancelledOutput()(v79);
    default:
      uint64_t v37 = v22[50];
      static ExecuteResponse.complete()();
      outlined destroy of WorkflowRunnerFlow.State(v37, (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);
LABEL_31:
      uint64_t v89 = v22[36];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_3();
      return v82(v81, v82, v83, v84, v85, v86, v87, v88, a9, v89, a11, a12, a13, a14);
  }
}

uint64_t WorkflowRunnerFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = v12[42];
  uint64_t v14 = v12[37];
  outlined init with copy of SiriWorkflowRunnerEvent?(v12[43], v13, &demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  if (__swift_getEnumTagSinglePayload(v13, 1, v14) == 1)
  {
    uint64_t v15 = (void *)v12[49];
    uint64_t v16 = v12[43];
    uint64_t v17 = v12[33] + v12[51];
    outlined destroy of SiriWorkflowRunnerEvent?(v12[42], &demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
    lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    OUTLINED_FUNCTION_9_6();
    OUTLINED_FUNCTION_67(v18, (uint64_t)"Unexpectedly received nil from LinkIterator");
    *uint64_t v15 = v19;
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_23_6();
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v15, v17);
    swift_endAccess();
    static ExecuteResponse.complete()();
    outlined destroy of SiriWorkflowRunnerEvent?(v16, &demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_20_3();
    v20();
    OUTLINED_FUNCTION_6_7();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_28_0();
    return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
  }
  else
  {
    outlined init with take of SiriWorkflowRunnerEvent(v12[42], v12[40]);
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v12[55] = v30;
    *uint64_t v30 = v31;
    v30[1] = WorkflowRunnerFlow.execute();
    OUTLINED_FUNCTION_28_0();
    return WorkflowRunnerFlow.responseFrom(event:iterator:)(v32, v33, v34);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = *(void *)(v12 + 344);
  outlined destroy of WorkflowRunnerFlow.State(*(void *)(v12 + 320), (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
  outlined destroy of SiriWorkflowRunnerEvent?(v13, &demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  uint64_t v14 = OUTLINED_FUNCTION_12_2();
  v15(v14);
  OUTLINED_FUNCTION_6_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  os_log_type_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  void *v39;
  os_log_type_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  void (*v48)(void);
  uint64_t v49;
  uint64_t (*v50)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = v12[41];
  if (__swift_getEnumTagSinglePayload(v13, 1, v12[37]) == 1)
  {
    uint64_t v14 = (void *)v12[49];
    uint64_t v15 = v12[33] + v12[51];
    outlined destroy of SiriWorkflowRunnerEvent?(v13, &demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
    lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    OUTLINED_FUNCTION_9_6();
    OUTLINED_FUNCTION_67(v16, (uint64_t)"Unexpectedly recieved nil from LinkIterator");
    *uint64_t v14 = v17;
    OUTLINED_FUNCTION_87();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_23_6();
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v14, v15);
    swift_endAccess();
    uint64_t v18 = (void *)Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v19))
    {
      uint64_t v20 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v20);
      OUTLINED_FUNCTION_23_0(&dword_0, v21, v22, "#WorkflowRunnerFlow did not receive didFinishWithOutput for handledError");
      OUTLINED_FUNCTION_7_0();
    }

    static ExecuteResponse.complete()();
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_20_3();
    v23();
    goto LABEL_14;
  }
  uint64_t v25 = v12[38];
  uint64_t v24 = v12[39];
  uint64_t v26 = OUTLINED_FUNCTION_75();
  outlined init with take of SiriWorkflowRunnerEvent(v26, v27);
  outlined init with copy of WorkflowRunnerFlow.State(v24, v25);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 8)
  {
    uint64_t v36 = v12[39];

    swift_errorRelease();
    static ExecuteResponse.complete()();
    outlined destroy of WorkflowRunnerFlow.State(v36, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
    uint64_t v37 = OUTLINED_FUNCTION_30_0();
    v38(v37);
LABEL_14:
    OUTLINED_FUNCTION_6_7();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_28_0();
    return v50(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12);
  }
  if (EnumCaseMultiPayload != 9)
  {
    uint64_t v39 = (void *)Logger.logObject.getter();
    uint64_t v40 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v40))
    {
      uint64_t v41 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v41);
      OUTLINED_FUNCTION_23_0(&dword_0, v42, v43, "Receiving unexpected workflow event in handledError stage.");
      OUTLINED_FUNCTION_7_0();
    }
    char v44 = v12[39];

    static ExecuteResponse.complete()();
    outlined destroy of WorkflowRunnerFlow.State(v44, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
    os_log_type_t v45 = OUTLINED_FUNCTION_75();
    v46(v45);
    uint64_t v47 = OUTLINED_FUNCTION_95();
    outlined destroy of WorkflowRunnerFlow.State(v47, v48);
    goto LABEL_14;
  }
  swift_release();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v12[58] = v29;
  *uint64_t v29 = v30;
  v29[1] = WorkflowRunnerFlow.execute();
  OUTLINED_FUNCTION_28_0();
  return WorkflowRunnerFlow.responseFrom(event:iterator:)(v31, v32, v33);
}

{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  outlined destroy of WorkflowRunnerFlow.State(*(void *)(v12 + 312), (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
  uint64_t v13 = OUTLINED_FUNCTION_21_6();
  v14(v13);
  OUTLINED_FUNCTION_6_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_66();
  v13();
  __swift_destroy_boxed_opaque_existential_1Tm(v12 + 56);
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_23_6();
  uint64_t v14 = OUTLINED_FUNCTION_80();
  outlined assign with take of WorkflowRunnerFlow.State(v14, v15);
  swift_endAccess();
  static ExecuteResponse.complete()();
  OUTLINED_FUNCTION_6_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
}

{
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = (void *)v12[49];
  uint64_t v14 = v12[33] + v12[51];
  *uint64_t v13 = v12[60];
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v13, v14);
  swift_endAccess();
  static ExecuteResponse.complete()();
  OUTLINED_FUNCTION_6_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = OUTLINED_FUNCTION_33_3();
  v14(v13);
  __swift_destroy_boxed_opaque_existential_1Tm(v12 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v12 + 56);
  **(void **)(v12 + 392) = *(void *)(v12 + 496);
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_23_6();
  uint64_t v15 = OUTLINED_FUNCTION_30_0();
  outlined assign with take of WorkflowRunnerFlow.State(v15, v16);
  swift_endAccess();
  static ExecuteResponse.complete()();
  OUTLINED_FUNCTION_6_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

uint64_t closure #1 in WorkflowRunnerFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void v14[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  uint64_t v15 = swift_task_alloc();
  v14[3] = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  v14[4] = v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  *uint64_t v16 = v14;
  v16[1] = closure #1 in WorkflowRunnerFlow.execute();
  return AsyncStream.Iterator.next()(v15, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

uint64_t closure #1 in WorkflowRunnerFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined assign with take of SiriWorkflowRunnerEvent?(*(void *)(v0 + 24), *(void *)(v0 + 16));
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v1();
}

void closure #2 in WorkflowRunnerFlow.execute()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SiriWorkflowRunnerEvent(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput;
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64) != 3)
  {
    NSString v10 = 0;
    if (*(unsigned char *)(v9 + 64)) {
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  if (v11)
  {
LABEL_5:
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  NSString v10 = 0;
LABEL_7:
  [a1 setShortcutName:v10];

  if (__swift_getEnumTagSinglePayload(a3, 1, v6))
  {
    NSString v12 = 0;
  }
  else
  {
    outlined init with copy of WorkflowRunnerFlow.State(a3, (uint64_t)v8);
    SiriWorkflowRunnerEvent.name.getter();
    outlined destroy of WorkflowRunnerFlow.State((uint64_t)v8, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [a1 setWfRunnerEventName:v12];
}

uint64_t WorkflowRunnerFlow.responseFrom(event:iterator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for URL();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = type metadata accessor for SiriWorkflowRunnerEvent(0);
  v4[10] = swift_task_alloc();
  return _swift_task_switch(WorkflowRunnerFlow.responseFrom(event:iterator:), 0, 0);
}

uint64_t WorkflowRunnerFlow.responseFrom(event:iterator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = *(void **)(v14 + 72);
  outlined init with copy of WorkflowRunnerFlow.State(*(void *)(v14 + 24), *(void *)(v14 + 80));
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v29 = *(void *)(v14 + 80);
      *(void *)(v14 + 120) = *(void *)(v29 + 8);
      *(void *)(v14 + 128) = *(void *)(v29 + 24);
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      *(void *)(v14 + 136) = v30;
      *uint64_t v30 = v31;
      v30[1] = WorkflowRunnerFlow.responseFrom(event:iterator:);
      OUTLINED_FUNCTION_58_0();
      OUTLINED_FUNCTION_3();
      return WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:)(v32, v33, v34, v35, v36, v37);
    case 2u:
      uint64_t v39 = *(void *)(v14 + 80);
      uint64_t v41 = *(void *)(v14 + 56);
      uint64_t v40 = *(void *)(v14 + 64);
      uint64_t v42 = *(void *)(v14 + 48);
      a10 = *(void *)(v14 + 32);
      a11 = *(void *)(v14 + 40);
      uint64_t v43 = *(void *)(v14 + 16);
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
      os_log_type_t v45 = (uint64_t *)(v39 + *(int *)(v44 + 48));
      uint64_t v46 = *v45;
      uint64_t v47 = v45[1];
      uint64_t v48 = (uint64_t *)(v39 + *(int *)(v44 + 64));
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      OUTLINED_FUNCTION_73();
      v51();
      WorkflowRunnerFlow.createOpenURLFlow(url:bundleId:iterator:_:)(v40, v46, v47, a10, v50, v49, v43);
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      goto LABEL_34;
    case 3u:
      uint64_t v52 = *(uint64_t **)(v14 + 80);
      uint64_t v15 = (void *)*v52;
      WorkflowRunnerFlow.createHandleUserActivityFlow(userActivity:bundleId:iterator:_:)(*v52, v52[1], v52[2], *(void *)(v14 + 32), v52[3], v52[4]);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    case 4u:
      uint64_t v53 = (void *)OUTLINED_FUNCTION_41_3();
      WorkflowRunnerFlow.createExecuteIntentFlow(intent:iterator:_:)(v53, v54, v55, v56, v57);
      goto LABEL_15;
    case 5u:
      uint64_t v58 = *(void **)(v14 + 80);
      *(void *)(v14 + 144) = *v58;
      *(void *)(v14 + 152) = v58[2];
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      *(void *)(v14 + 160) = v59;
      *uint64_t v59 = v60;
      v59[1] = WorkflowRunnerFlow.responseFrom(event:iterator:);
      OUTLINED_FUNCTION_58_0();
      OUTLINED_FUNCTION_3();
      return WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)(v61, v62, v63, v64, v65);
    case 6u:
      os_log_type_t v67 = (void *)OUTLINED_FUNCTION_41_3();
      WorkflowRunnerFlow.createOpenInteractionInAppFlow(interaction:iterator:_:)(v67, v68, v69, v70, v71);
LABEL_15:
      swift_release();
LABEL_16:

      goto LABEL_34;
    case 7u:
      uint64_t v72 = OUTLINED_FUNCTION_42_3();
      WorkflowRunnerFlow.createOpenAppFlow(bundleId:iterator:_:)(v72, v73, v74, v75, v76, v77);
      goto LABEL_28;
    case 8u:
      uint64_t v78 = *(void *)(v14 + 80);
      uint64_t v79 = *(void **)v78;
      uint64_t v80 = *(void *)(v78 + 8);
      *(void *)(v14 + 168) = v80;
      int v81 = *(unsigned __int8 *)(v78 + 16);

      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v82 = type metadata accessor for Logger();
      __swift_project_value_buffer(v82, (uint64_t)static Logger.voiceCommands);
      uint64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = (uint8_t *)OUTLINED_FUNCTION_88();
        *(_DWORD *)uint64_t v85 = 67109120;
        *(_DWORD *)(v14 + 192) = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_0, v83, v84, "#WorkflowRunnerFlow cancelled: %{BOOL}d", v85, 8u);
        OUTLINED_FUNCTION_7_0();
      }

      if (v80)
      {
        swift_errorRetain();
        swift_task_alloc();
        OUTLINED_FUNCTION_22_0();
        *(void *)(v14 + 176) = v86;
        *uint64_t v86 = v87;
        v86[1] = WorkflowRunnerFlow.responseFrom(event:iterator:);
        OUTLINED_FUNCTION_58_0();
        OUTLINED_FUNCTION_3();
        return WorkflowRunnerFlow.handleDidFinishWithError(error:)(v88, v89);
      }
      else
      {
        swift_task_alloc();
        OUTLINED_FUNCTION_22_0();
        *(void *)(v14 + 184) = v106;
        *uint64_t v106 = v107;
        v106[1] = WorkflowRunnerFlow.responseFrom(event:iterator:);
        OUTLINED_FUNCTION_58_0();
        OUTLINED_FUNCTION_3();
        return WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:)(v108, v109);
      }
    case 9u:
      WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)(*(void *)(v14 + 32), **(void **)(v14 + 80), *(void *)(*(void *)(v14 + 80) + 8), *(void *)(v14 + 16));
      goto LABEL_30;
    case 0xAu:
      uint64_t v91 = OUTLINED_FUNCTION_42_3();
      WorkflowRunnerFlow.createAppProtectionRequestFlow(bundleId:iterator:_:)(v91, v92, v93, v94, v95);
LABEL_28:
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_34;
    case 0xBu:
      WorkflowRunnerFlow.guardLocationAccess(needsPreciseLocation:iterator:_:)(**(unsigned __int8 **)(v14 + 80), *(void *)(v14 + 32), *(void (**)(void, uint64_t))(*(void *)(v14 + 80) + 8), *(void *)(*(void *)(v14 + 80) + 16));
LABEL_30:
      swift_release();
      goto LABEL_34;
    case 0xCu:
      uint64_t v96 = *(void *)(v14 + 40);
      WorkflowRunnerFlow.isActionable(actionID:)(**(void **)(v14 + 80), *(void *)(*(void *)(v14 + 80) + 8));
      OUTLINED_FUNCTION_97();
      if (v96)
      {
        OUTLINED_FUNCTION_16_5();
        (*(void (**)(void))(v97 + 232))();
      }
      static ExecuteResponse.ongoing(requireInput:)();
LABEL_34:
      OUTLINED_FUNCTION_55_0();
      swift_task_dealloc();
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_3();
      uint64_t result = v99(v98, v99, v100, v101, v102, v103, v104, v105, a9, a10, a11, a12, a13, a14);
      break;
    default:
      uint64_t v16 = *(void **)(v14 + 80);
      *(void *)(v14 + 88) = *v16;
      *(void *)(v14 + 96) = v16[2];
      *(void *)(v14 + 104) = v16[5];
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      *(void *)(v14 + 112) = v17;
      *uint64_t v17 = v18;
      v17[1] = WorkflowRunnerFlow.responseFrom(event:iterator:);
      OUTLINED_FUNCTION_58_0();
      OUTLINED_FUNCTION_3();
      uint64_t result = WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)(v19, v20, v21, v22, v23, v24, v25, v26);
      break;
  }
  return result;
}

uint64_t WorkflowRunnerFlow.responseFrom(event:iterator:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 88);
  swift_release();

  OUTLINED_FUNCTION_55_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  OUTLINED_FUNCTION_55_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 144);
  swift_release();

  OUTLINED_FUNCTION_55_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_errorRelease();
  swift_errorRelease();
  OUTLINED_FUNCTION_55_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_55_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WorkflowRunnerFlow.buildCancelledOutput()(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  type metadata accessor for CATOption();
  v2[28] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[29] = v3;
  v2[30] = *(void *)(v3 - 8);
  v2[31] = swift_task_alloc();
  return _swift_task_switch(WorkflowRunnerFlow.buildCancelledOutput(), 0, 0);
}

uint64_t WorkflowRunnerFlow.buildCancelledOutput()()
{
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  static Device.current.getter();
  type metadata accessor for AutoShortcutCATs();
  static CATOption.defaultMode.getter();
  uint64_t v1 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AutoShortcutCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v2 = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v3 = type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AutoShortcutDialogTemplating();
  uint64_t inited = (void *)swift_initStackObject();
  *(void *)(v0 + 256) = inited;
  inited[12] = v3;
  inited[13] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  inited[9] = v4;
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 128), (uint64_t)(inited + 2));
  inited[7] = v1;
  inited[8] = v2;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 264) = v6;
  *uint64_t v6 = v7;
  v6[1] = WorkflowRunnerFlow.buildCancelledOutput();
  OUTLINED_FUNCTION_24_2();
  return AutoShortcutDialogTemplating.makeUserDeniedDialog_rfv1()(v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 272) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_setDeallocating();
    AutoShortcutDialogTemplating.deinit();
    swift_deallocClassInstance();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  swift_setDeallocating();
  AutoShortcutDialogTemplating.deinit();
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WorkflowRunnerFlow.buildCancelledOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_63(*(void *)(v12 + 216));
  *(_OWORD *)(v12 + 184) = 0u;
  *(void *)(v12 + 200) = 0;
  *(_OWORD *)(v12 + 168) = 0u;
  static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)();
  outlined destroy of SiriWorkflowRunnerEvent?(v12 + 168, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_81();
  v13();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_28_0();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t WorkflowRunnerFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 288) = a8;
  *(void *)(v9 + 296) = v8;
  *(void *)(v9 + 272) = a6;
  *(void *)(v9 + 280) = a7;
  *(unsigned char *)(v9 + 372) = a5;
  *(void *)(v9 + 256) = a3;
  *(void *)(v9 + 264) = a4;
  *(void *)(v9 + 240) = a1;
  *(void *)(v9 + 248) = a2;
  *(void *)(v9 + 304) = type metadata accessor for WorkflowRunnerFlow.State(0);
  *(void *)(v9 + 312) = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of ActingFlow.onCompletion(_:)>>.0);
  *(void *)(v9 + 320) = v10;
  *(void *)(v9 + 328) = *(void *)(v10 - 8);
  *(void *)(v9 + 336) = swift_task_alloc();
  return _swift_task_switch(WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:), 0, 0);
}

uint64_t WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)()
{
  uint64_t v90 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 248);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_88();
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v0 + 232) = v7;
    id v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v7;

    _os_log_impl(&dword_0, v4, v5, "#WorkflowRunnerFlow createExecuteLinkAction: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
  }
  id v11 = [*(id *)(v0 + 248) identifier];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (v12 == 0x6C69614D646E6553 && v14 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_96();
    LOBYTE(v12) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (SiriLinkFlowFeatureFlags.isEnabled.getter(3u))
  {
    id v16 = *(id *)(v0 + 248);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    BOOL v19 = OUTLINED_FUNCTION_32(v18);
    uint64_t v20 = *(void **)(v0 + 248);
    if (v19)
    {
      uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v89 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v21 = 136315138;
      id v22 = [v20 identifier];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v17, (os_log_type_t)v12, "#WorkflowRunnerFlow starting encore flow for %s", v21, 0xCu);
      OUTLINED_FUNCTION_68();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
    uint64_t v57 = *(void *)(v0 + 312);
    uint64_t v58 = *(void *)(v0 + 296);
    uint64_t v86 = *(void *)(v0 + 288);
    uint64_t v83 = *(void *)(v0 + 264);
    uint64_t v84 = *(void *)(v0 + 280);
    uint64_t v81 = *(void *)(v0 + 256);
    uint64_t v82 = *(void **)(v0 + 248);
    type metadata accessor for SendMailPlan();
    OUTLINED_FUNCTION_35_2();
    *(void *)(v0 + 200) = SendMailPlan.init()();
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReactiveFlow<SendMailPlan>);
    OUTLINED_FUNCTION_35_2();
    *(void *)(v0 + 208) = ReactiveFlow.init(plan:)();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v60 = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>, &demangling cache variable for type metadata for ReactiveFlow<SendMailPlan>);
    ActingFlow.onCompletion(_:)();
    swift_release();
    swift_release();
    *(void *)(v0 + 184) = v59;
    *(void *)(v0 + 192) = v60;
    swift_getOpaqueTypeConformance2();
    ActingFlow.toAnyFlow()();
    OUTLINED_FUNCTION_81();
    v61();
    uint64_t v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
    uint64_t v63 = (void *)(v57 + v62[12]);
    uint64_t v64 = v62[16];
    uint64_t v65 = (void *)(v57 + v62[20]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    OUTLINED_FUNCTION_11_8();
    OUTLINED_FUNCTION_36_3();
    v66();
    *uint64_t v63 = v81;
    v63[1] = v83;
    *(void *)(v57 + v64) = v82;
    void *v65 = v84;
    v65[1] = v86;
    swift_storeEnumTagMultiPayload();
    uint64_t v67 = v58 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
    OUTLINED_FUNCTION_23_6();
    id v68 = v82;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined assign with take of WorkflowRunnerFlow.State(v57, v67);
    swift_endAccess();
    static ExecuteResponse.ongoing(next:)();
    goto LABEL_30;
  }
LABEL_16:
  os_log_type_t v26 = *(unsigned char *)(v0 + 372);
  uint64_t v28 = *(void *)(v0 + 256);
  uint64_t v27 = *(void *)(v0 + 264);
  uint64_t v29 = *(void **)(v0 + 248);
  outlined init with copy of DeviceState(*(void *)(v0 + 296) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner, v0 + 48);
  *(void *)(v0 + 16) = v28;
  *(void *)(v0 + 24) = v27;
  *(void *)(v0 + 32) = v29;
  *(unsigned char *)(v0 + 40) = v26;
  id v30 = v29;
  swift_bridgeObjectRetain();
  id v31 = [v30 outputType];

  if (v31)
  {
    id v32 = [*(id *)(v0 + 248) systemProtocols];
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
    unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v34 = [self sessionStartingProtocol];
    char v35 = specialized Sequence<>.contains(_:)((uint64_t)v34, v33);

    swift_bridgeObjectRelease();
    if (v35)
    {
      id v36 = [*(id *)(v0 + 248) systemProtocols];
      unint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v36) = Array<A>.isAudioStarting.getter(v37);
      swift_bridgeObjectRelease();
      if (v36)
      {
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_5_3(v39))
        {
          uint64_t v40 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_28_2(v40);
          OUTLINED_FUNCTION_26_5(&dword_0, v38, v26, "#WorkflowRunnerFlow will handoff to shortcuts for intent with return value that also starts a live action");
          OUTLINED_FUNCTION_7_0();
        }
        uint64_t v41 = *(void *)(v0 + 296);
        uint64_t v42 = *(void **)(v0 + 248);

        uint64_t v43 = v41 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState;
        uint64_t v44 = OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker;
        *(void *)(v0 + 344) = OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker;
        uint64_t v45 = v41 + v44;
        id v46 = [v42 systemProtocols];
        uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v0 + 352) = v47;

        uint64_t v48 = (void *)swift_task_alloc();
        *(void *)(v0 + 360) = v48;
        *uint64_t v48 = v0;
        v48[1] = WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:);
        return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v43, v45, v47);
      }
    }
  }
  uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)(v0 + 296)
                                           + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_linkRCHFlowFactory))(v0 + 16);
  id v51 = *(id *)(v0 + 248);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  uint64_t v88 = v50;
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = *(void **)(v0 + 248);
    uint64_t v55 = (uint8_t *)OUTLINED_FUNCTION_88();
    *(_DWORD *)uint64_t v55 = 67109120;
    *(_DWORD *)(v0 + 368) = [v54 openAppWhenRun];
    OUTLINED_FUNCTION_75();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_0, v52, v53, "#WorkflowRunnerFlow link action open app when run set to %{BOOL}d", v55, 8u);
    OUTLINED_FUNCTION_7_0();
    uint64_t v56 = *(NSObject **)(v0 + 248);
  }
  else
  {

    uint64_t v56 = *(NSObject **)(v0 + 248);
    uint64_t v52 = v56;
  }
  uint64_t v69 = *(void *)(v0 + 312);
  uint64_t v70 = *(void *)(v0 + 288);
  uint64_t v87 = *(void *)(v0 + 296);
  uint64_t v85 = *(void *)(v0 + 280);
  uint64_t v72 = *(void *)(v0 + 256);
  uint64_t v71 = *(void *)(v0 + 264);

  uint64_t v73 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
  uint64_t v74 = (void *)(v69 + v73[12]);
  uint64_t v75 = v73[16];
  uint64_t v76 = (void *)(v69 + v73[20]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  OUTLINED_FUNCTION_11_8();
  OUTLINED_FUNCTION_36_3();
  v77();
  *uint64_t v74 = v72;
  v74[1] = v71;
  *(void *)(v69 + v75) = v56;
  void *v76 = v85;
  v76[1] = v70;
  swift_storeEnumTagMultiPayload();
  uint64_t v78 = v87 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  OUTLINED_FUNCTION_23_6();
  uint64_t v79 = v56;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined assign with take of WorkflowRunnerFlow.State(v69, v78);
  swift_endAccess();
  *(void *)(v0 + 216) = v88;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for LinkRCHFlow();
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type LinkRCHFlow and conformance LinkRCHFlow, (void (*)(uint64_t))type metadata accessor for LinkRCHFlow);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  outlined destroy of LinkRCHFlowFactory.GetFlowConfig(v0 + 16);
LABEL_30:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v80();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  void *v1;
  void (*v2)(void, id);
  void *v3;
  id v4;
  id v5;
  id v6;
  void (*v7)(void);
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  uint64_t v1 = (void *)v0[39];
  uint64_t v2 = (void (*)(void, id))v0[35];
  id v3 = (void *)(v0[37] + v0[43]);
  uint64_t v4 = [self wfSiriExecutionRequiresShortcutsJrError];
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  os_log_type_t v5 = [objc_allocWithZone((Class)SAUICloseAssistant) init];
  AceServiceInvokerAsync.submitAndForget(_:)();

  BOOL v6 = v4;
  v2(0, v4);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
  void *v1 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  OUTLINED_FUNCTION_11_8();
  OUTLINED_FUNCTION_36_3();
  v7();
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_23_6();
  uint64_t v8 = v6;
  uint64_t v9 = OUTLINED_FUNCTION_95();
  outlined assign with take of WorkflowRunnerFlow.State(v9, v10);
  swift_endAccess();
  static ExecuteResponse.ongoing(requireInput:)();

  outlined destroy of LinkRCHFlowFactory.GetFlowConfig((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v11();
}

uint64_t WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[40] = a6;
  v7[41] = v6;
  v7[38] = a4;
  v7[39] = a5;
  v7[36] = a2;
  v7[37] = a3;
  v7[35] = a1;
  v7[42] = type metadata accessor for WorkflowRunnerFlow.State(0);
  v7[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v7[44] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AceOutput();
  v7[45] = v8;
  v7[46] = *(void *)(v8 - 8);
  v7[47] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for TemplatingResult();
  v7[48] = v9;
  v7[49] = *(void *)(v9 - 8);
  v7[50] = swift_task_alloc();
  return _swift_task_switch(WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:), 0, 0);
}

uint64_t WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 408) = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_3(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v4);
    OUTLINED_FUNCTION_23_0(&dword_0, v5, v6, "#WorkflowRunnerFlow createSpeakTextWithUtterance");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v7 = *(void **)(v0 + 400);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v23 = *(void *)(v0 + 376);
  uint64_t v9 = *(void *)(v0 + 352);
  uint64_t v24 = *(void *)(v0 + 360);
  uint64_t v10 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 288);
  uint64_t v12 = *(void *)(v0 + 296);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_212160;
  *(void *)(inited + 32) = v11;
  *(void *)(inited + 40) = v12;
  uint64_t v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_212160;
  *(void *)(v14 + 32) = v11;
  *(void *)(v14 + 40) = v12;
  swift_bridgeObjectRetain_n();
  TemplatingResult.init(dialogId:print:speak:)(inited, v14, v7);
  OUTLINED_FUNCTION_72();
  uint64_t v15 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v15);
  *(void *)(v0 + 144) = 0;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of SiriWorkflowRunnerEvent?(v0 + 112, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of SiriWorkflowRunnerEvent?(v9, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_project_boxed_opaque_existential_1((void *)(v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher), *(void *)(v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher + 24));
  *(void *)(v0 + 176) = v24;
  *(void *)(v0 + 184) = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 152));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(boxed_opaque_existential_1, v23, v24);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v17;
  *uint64_t v17 = v0;
  v17[1] = WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:);
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_2_1();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v18, v19, v20);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  os_log_type_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 424) = v0;
  swift_task_dealloc();
  if (!v0) {
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 152);
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t (*v11)(void);
  uint64_t v13;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[43];
  uint64_t v2 = v0[41];
  os_log_type_t v3 = (void (*)(void))v0[39];
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v4 + 224))(0);
  v3(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  OUTLINED_FUNCTION_11_8();
  OUTLINED_FUNCTION_36_3();
  v5();
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of WorkflowRunnerFlow.State(v1, v6);
  swift_endAccess();
  OUTLINED_FUNCTION_56_0();
  uint64_t v7 = OUTLINED_FUNCTION_69();
  v8(v7);
  uint64_t v9 = OUTLINED_FUNCTION_78();
  v10(v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v11();
}

uint64_t WorkflowRunnerFlow.createSpeakTextWithUtterance(utterance:iterator:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_11_0();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_26();
  a20 = v22;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v22 + 19));
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    a10 = v22 + 34;
    uint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    a11 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_getErrorValue();
    uint64_t v28 = Error.localizedDescription.getter();
    v22[34] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v25, v26, "#WorkflowRunnerFlow SpeakText ran into error: %s", v27, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v30 = v22[53];
  id v31 = (void *)v22[43];
  uint64_t v32 = v22[41];
  unint64_t v33 = (void (*)(uint64_t))v22[39];
  swift_errorRetain();
  v33(v30);
  swift_errorRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
  *id v31 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  OUTLINED_FUNCTION_11_8();
  OUTLINED_FUNCTION_36_3();
  v34();
  OUTLINED_FUNCTION_80();
  swift_storeEnumTagMultiPayload();
  uint64_t v35 = v32 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v31, v35);
  swift_endAccess();
  OUTLINED_FUNCTION_56_0();
  uint64_t v36 = OUTLINED_FUNCTION_69();
  v37(v36);
  uint64_t v38 = OUTLINED_FUNCTION_78();
  v39(v38);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_3();
  return v41(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, a14);
}

void WorkflowRunnerFlow.createOpenURLFlow(url:bundleId:iterator:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v57 = a6;
  uint64_t v56 = a5;
  uint64_t v55 = a4;
  uint64_t v53 = a2;
  uint64_t v52 = a1;
  uint64_t v54 = type metadata accessor for WorkflowRunnerFlow.State(0);
  __chkstk_darwin(v54);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CATOption();
  __chkstk_darwin(v13 - 8);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "#WorkflowRunnerFlow createOpenURLFlow", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = (uint64_t *)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput];
  uint64_t v19 = *(void *)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
  if (v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64] == 3)
  {
    uint64_t v21 = v18[2];
    swift_bridgeObjectRetain();
    if (v21) {
      goto LABEL_9;
    }
  }
  else if (!v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64])
  {
    uint64_t v20 = *v18;
    uint64_t v21 = *(void *)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
    swift_bridgeObjectRetain();
    uint64_t v19 = v20;
LABEL_9:
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSUserActivity);
    id v22 = NSUserActivity.__allocating_init(activityType:)(0xD000000000000017, 0x8000000000226DF0, (SEL *)&selRef_initWithActivityType_);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, URL)>);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    uint64_t v51 = a7;
    uint64_t v24 = v23 - 8;
    unint64_t v25 = (*(unsigned __int8 *)(*(void *)(v23 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v23 - 8) + 80);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_212160;
    uint64_t v27 = (void *)(v26 + v25);
    unint64_t v28 = v26 + v25 + *(int *)(v24 + 56);
    *uint64_t v27 = 0xD00000000000001DLL;
    v27[1] = 0x8000000000226E10;
    uint64_t v29 = type metadata accessor for URL();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v28, v52, v29);
    uint64_t v30 = Dictionary.init(dictionaryLiteral:)();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v30);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc NSUserActivity.userInfo.setter(v32, v22);
    if (a3) {
      uint64_t v33 = v53;
    }
    else {
      uint64_t v33 = 0xD000000000000013;
    }
    if (a3) {
      uint64_t v34 = a3;
    }
    else {
      uint64_t v34 = 0x8000000000225330;
    }
    swift_bridgeObjectRetain();
    id v35 = v22;
    Class v36 = WorkflowRunnerFlow.getINInteractionFromNSUserActivity(shortcutName:userActivity:bundleId:)(v19, v21, (uint64_t)v22, v33, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined init with copy of DeviceState((uint64_t)v8 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner, (uint64_t)v61);
    outlined init with copy of DeviceState((uint64_t)v8 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState, (uint64_t)v60);
    outlined init with copy of DeviceState((uint64_t)v8 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker, (uint64_t)v59);
    outlined init with copy of DeviceState((uint64_t)v8 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher, (uint64_t)v58);
    type metadata accessor for RunVoiceCommandCATs();
    unint64_t v37 = v36;
    static CATOption.defaultMode.getter();
    uint64_t v38 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v39 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for WFOpenInteractionFlow();
    swift_allocObject();
    uint64_t v40 = WFOpenInteractionFlow.init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)(v37, (uint64_t)v61, v60, v38, v39, (uint64_t)v59, (uint64_t)v58);
    uint64_t v41 = &v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                      + 48)];
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(v12, v55, v42);
    uint64_t v43 = v57;
    *(void *)uint64_t v41 = v56;
    *((void *)v41 + 1) = v43;
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = (uint64_t)v8 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v44);
    swift_endAccess();
    v61[0] = v40;
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v8;
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = partial apply for implicit closure #3 in implicit closure #2 in WorkflowRunnerFlow.createOpenURLFlow(url:bundleId:iterator:_:);
    *(void *)(v46 + 24) = v45;
    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type WFOpenInteractionFlow and conformance WFOpenInteractionFlow, (void (*)(uint64_t))type metadata accessor for WFOpenInteractionFlow);
    id v47 = v8;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();

    return;
  }
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl(&dword_0, v48, v49, "#WorkflowRunnerFlow does not have shortcutName for open url action", v50, 2u);
    swift_slowDealloc();
  }

  static ExecuteResponse.complete()();
}

void WorkflowRunnerFlow.createHandleUserActivityFlow(userActivity:bundleId:iterator:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v41 = a6;
  uint64_t v40 = a5;
  uint64_t v39 = a4;
  uint64_t v38 = type metadata accessor for WorkflowRunnerFlow.State(0);
  __chkstk_darwin(v38);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CATOption();
  __chkstk_darwin(v13 - 8);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v37 = __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "#WorkflowRunnerFlow createHandleUserActivityFlow", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = (uint64_t *)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput];
  uint64_t v19 = *(void *)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
  if (v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64] == 3)
  {
    uint64_t v21 = v18[2];
    swift_bridgeObjectRetain();
    if (v21) {
      goto LABEL_9;
    }
  }
  else if (!v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64])
  {
    uint64_t v20 = *v18;
    uint64_t v21 = *(void *)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
    swift_bridgeObjectRetain();
    uint64_t v19 = v20;
LABEL_9:
    Class v22 = WorkflowRunnerFlow.getINInteractionFromNSUserActivity(shortcutName:userActivity:bundleId:)(v19, v21, a1, a2, a3);
    swift_bridgeObjectRelease();
    outlined init with copy of DeviceState((uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner], (uint64_t)v45);
    outlined init with copy of DeviceState((uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState], (uint64_t)v44);
    outlined init with copy of DeviceState((uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker], (uint64_t)v43);
    outlined init with copy of DeviceState((uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher], (uint64_t)v42);
    type metadata accessor for RunVoiceCommandCATs();
    uint64_t v23 = v22;
    static CATOption.defaultMode.getter();
    uint64_t v24 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v25 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for WFOpenInteractionFlow();
    swift_allocObject();
    uint64_t v26 = WFOpenInteractionFlow.init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)(v23, (uint64_t)v45, v44, v24, v25, (uint64_t)v43, (uint64_t)v42);
    uint64_t v27 = &v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                      + 48)];
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v12, v39, v28);
    uint64_t v29 = v41;
    *(void *)uint64_t v27 = v40;
    *((void *)v27 + 1) = v29;
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
    swift_beginAccess();
    swift_retain();
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v30);
    swift_endAccess();
    v45[0] = v26;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v7;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = partial apply for implicit closure #3 in implicit closure #2 in WorkflowRunnerFlow.createOpenURLFlow(url:bundleId:iterator:_:);
    *(void *)(v32 + 24) = v31;
    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type WFOpenInteractionFlow and conformance WFOpenInteractionFlow, (void (*)(uint64_t))type metadata accessor for WFOpenInteractionFlow);
    uint64_t v33 = v7;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();

    return;
  }
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    Class v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Class v36 = 0;
    _os_log_impl(&dword_0, v34, v35, "#WorkflowRunnerFlow does not have shortcutName for handle UserActivity action", v36, 2u);
    swift_slowDealloc();
  }

  static ExecuteResponse.complete()();
}

uint64_t WorkflowRunnerFlow.createExecuteIntentFlow(intent:iterator:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v42 = a3;
  uint64_t v41 = a2;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "#WorkflowRunnerFlow createExecuteIntentFlow", v16, 2u);
    swift_slowDealloc();
  }

  uint64_t v17 = (uint64_t *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput];
  uint64_t v18 = *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
  if (v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64] == 3)
  {
    uint64_t v20 = v17[2];
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_9;
    }
  }
  else if (!v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64])
  {
    uint64_t v19 = *v17;
    uint64_t v20 = *(void *)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
    swift_bridgeObjectRetain();
    uint64_t v18 = v19;
LABEL_9:
    uint64_t v39 = a4;
    uint64_t v40 = a5;
    outlined init with copy of DeviceState((uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner], (uint64_t)v46);
    outlined init with copy of DeviceState((uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState], (uint64_t)v45);
    outlined init with copy of DeviceState((uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker], (uint64_t)v44);
    outlined init with copy of DeviceState((uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher], (uint64_t)v43);
    id v21 = objc_allocWithZone((Class)AFPreferences);
    id v22 = a1;
    id v23 = [v21 init];
    if (one-time initialization token for instance != -1) {
      swift_once();
    }
    uint64_t v24 = static VoiceCommandsAppPolicyHandler.instance;
    type metadata accessor for WFExecuteCustomIntentFlow();
    uint64_t v25 = swift_allocObject();
    swift_retain();
    uint64_t v26 = specialized WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)(v22, v18, v20, (uint64_t)v46, (uint64_t)v45, (uint64_t)v44, (uint64_t)v43, v23, v24, (uint64_t)closure #1 in default argument 8 of WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:), 0, v25);
    uint64_t v27 = &v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                      + 48)];
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v12, v41, v28);
    uint64_t v29 = v39;
    *(void *)uint64_t v27 = v42;
    *((void *)v27 + 1) = v29;
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = (uint64_t)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
    swift_beginAccess();
    swift_retain();
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v30);
    swift_endAccess();
    v46[0] = v26;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v6;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createExecuteIntentFlow(intent:iterator:_:);
    *(void *)(v32 + 24) = v31;
    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type WFExecuteCustomIntentFlow and conformance WFExecuteCustomIntentFlow, (void (*)(uint64_t))type metadata accessor for WFExecuteCustomIntentFlow);
    uint64_t v33 = v6;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    return swift_release();
  }
  os_log_type_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_0, v35, v36, "#WorkflowRunnerFlow does not have shortcutName for ExecuteIntent action", v37, 2u);
    swift_slowDealloc();
  }

  return static ExecuteResponse.complete()();
}

uint64_t WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[30] = a5;
  v6[31] = v5;
  v6[28] = a3;
  v6[29] = a4;
  v6[26] = a1;
  v6[27] = a2;
  v6[32] = type metadata accessor for WorkflowRunnerFlow.State(0);
  v6[33] = swift_task_alloc();
  return _swift_task_switch(WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:), 0, 0);
}

uint64_t WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v4);
    OUTLINED_FUNCTION_26_5(&dword_0, v2, v3, "#WorkflowRunnerFlow createShowDialogFlow");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v5 = *(void *)(v0 + 248);

  uint64_t v6 = (uint64_t *)(v5 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput);
  uint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8);
  if (*(unsigned char *)(v5 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64) == 3)
  {
    uint64_t v9 = v6[2];
    swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_9;
    }
  }
  else if (!*(unsigned char *)(v5 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64))
  {
    uint64_t v8 = *v6;
    uint64_t v9 = *(void *)(v5 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8);
    swift_bridgeObjectRetain();
    uint64_t v7 = v8;
LABEL_9:
    uint64_t v10 = *(void *)(v0 + 264);
    uint64_t v11 = *(void **)(v0 + 248);
    uint64_t v27 = *(void *)(v0 + 232);
    uint64_t v28 = *(void *)(v0 + 240);
    uint64_t v26 = *(void **)(v0 + 216);
    outlined init with copy of DeviceState((uint64_t)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState, v0 + 16);
    outlined init with copy of DeviceState((uint64_t)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher, v0 + 56);
    outlined init with copy of DeviceState((uint64_t)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationProvider, v0 + 96);
    outlined init with copy of DeviceState((uint64_t)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dateTimeResolver, v0 + 136);
    type metadata accessor for RouteDialogRequestResponseFlow();
    swift_allocObject();
    uint64_t v12 = RouteDialogRequestResponseFlow.init(shortcutName:dialogRequest:deviceState:outputPublisher:locationProvider:dateTimeResolver:)(v7, v9, v26, (void *)(v0 + 16), (long long *)(v0 + 56), (long long *)(v0 + 96), (long long *)(v0 + 136));
    uint64_t v13 = (void *)(v10
                   + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                            + 48));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    OUTLINED_FUNCTION_11_8();
    OUTLINED_FUNCTION_36_3();
    v14();
    *uint64_t v13 = v27;
    v13[1] = v28;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = (uint64_t)v11 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
    OUTLINED_FUNCTION_23_6();
    swift_retain();
    outlined assign with take of WorkflowRunnerFlow.State(v10, v15);
    swift_endAccess();
    *(void *)(v0 + 200) = v12;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v11;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:);
    *(void *)(v17 + 24) = v16;
    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type RouteDialogRequestResponseFlow and conformance RouteDialogRequestResponseFlow, (void (*)(uint64_t))type metadata accessor for RouteDialogRequestResponseFlow);
    id v18 = v11;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();
    goto LABEL_13;
  }
  uint64_t v19 = (void *)Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_5_3(v20))
  {
    id v21 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v21);
    OUTLINED_FUNCTION_23_0(&dword_0, v22, v23, "#WorkflowRunnerFlow does not have shortcutName for show dialog action");
    OUTLINED_FUNCTION_7_0();
  }

  static ExecuteResponse.complete()();
LABEL_13:
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v24();
}

uint64_t WorkflowRunnerFlow.createOpenInteractionInAppFlow(interaction:iterator:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v30 = a3;
  uint64_t v31 = a5;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CATOption();
  __chkstk_darwin(v13 - 8);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "#WorkflowRunnerFlow createOpenInteractionInAppFlow", v17, 2u);
    swift_slowDealloc();
  }

  outlined init with copy of DeviceState((uint64_t)v6 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner, (uint64_t)v35);
  outlined init with copy of DeviceState((uint64_t)v6 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState, (uint64_t)v34);
  outlined init with copy of DeviceState((uint64_t)v6 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker, (uint64_t)v33);
  outlined init with copy of DeviceState((uint64_t)v6 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher, (uint64_t)v32);
  type metadata accessor for RunVoiceCommandCATs();
  id v18 = a1;
  static CATOption.defaultMode.getter();
  uint64_t v19 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v20 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WFOpenInteractionFlow();
  swift_allocObject();
  id v21 = WFOpenInteractionFlow.init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)(v18, (uint64_t)v35, v34, v19, v20, (uint64_t)v33, (uint64_t)v32);
  uint64_t v22 = &v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                    + 48)];
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v12, a2, v23);
  *(void *)uint64_t v22 = v30;
  *((void *)v22 + 1) = a4;
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = (uint64_t)v6 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v24);
  swift_endAccess();
  v35[0] = v21;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v6;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #3 in implicit closure #2 in WorkflowRunnerFlow.createOpenURLFlow(url:bundleId:iterator:_:);
  *(void *)(v26 + 24) = v25;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type WFOpenInteractionFlow and conformance WFOpenInteractionFlow, (void (*)(uint64_t))type metadata accessor for WFOpenInteractionFlow);
  id v27 = v6;
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

void WorkflowRunnerFlow.createOpenAppFlow(bundleId:iterator:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v40 = a5;
  uint64_t v39 = a4;
  uint64_t v38 = a3;
  uint64_t v41 = a6;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CATOption();
  __chkstk_darwin(v13 - 8);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "#WorkflowRunnerFlow createOpenAppFlow", v17, 2u);
    swift_slowDealloc();
  }

  id v18 = (uint64_t *)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput];
  uint64_t v19 = *(void *)&v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
  if (v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64] == 3)
  {
    uint64_t v21 = v18[2];
    swift_bridgeObjectRetain();
    if (v21) {
      goto LABEL_9;
    }
  }
  else if (!v6[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 64])
  {
    uint64_t v20 = *v18;
    uint64_t v21 = *(void *)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput + 8];
    swift_bridgeObjectRetain();
    uint64_t v19 = v20;
LABEL_9:
    Class v22 = WorkflowRunnerFlow.getINInteractionFromNSUserActivity(shortcutName:userActivity:bundleId:)(v19, v21, 0, a1, a2);
    swift_bridgeObjectRelease();
    outlined init with copy of DeviceState((uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner], (uint64_t)v45);
    outlined init with copy of DeviceState((uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState], (uint64_t)v44);
    outlined init with copy of DeviceState((uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker], (uint64_t)v43);
    outlined init with copy of DeviceState((uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher], (uint64_t)v42);
    type metadata accessor for RunVoiceCommandCATs();
    uint64_t v23 = v22;
    static CATOption.defaultMode.getter();
    uint64_t v24 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v25 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for WFOpenInteractionFlow();
    swift_allocObject();
    uint64_t v26 = WFOpenInteractionFlow.init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)(v23, (uint64_t)v45, v44, v24, v25, (uint64_t)v43, (uint64_t)v42);
    id v27 = &v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                      + 48)];
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v12, v38, v28);
    uint64_t v29 = v40;
    *(void *)id v27 = v39;
    *((void *)v27 + 1) = v29;
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = (uint64_t)&v7[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
    swift_beginAccess();
    swift_retain();
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v30);
    swift_endAccess();
    v45[0] = v26;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v7;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createOpenAppFlow(bundleId:iterator:_:);
    *(void *)(v32 + 24) = v31;
    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type WFOpenInteractionFlow and conformance WFOpenInteractionFlow, (void (*)(uint64_t))type metadata accessor for WFOpenInteractionFlow);
    uint64_t v33 = v7;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();

    return;
  }
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    os_log_type_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v36 = 0;
    _os_log_impl(&dword_0, v34, v35, "#WorkflowRunnerFlow does not have shortcutName for Open App action", v36, 2u);
    swift_slowDealloc();
  }

  static ExecuteResponse.complete()();
}

uint64_t WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  v35[0] = a2;
  v35[1] = a4;
  uint64_t v8 = type metadata accessor for WorkflowRunnerFlow.State(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "#WorkflowRunnerFlow createPunchoutRequestedFlow", v14, 2u);
    swift_slowDealloc();
  }

  uint64_t v15 = &v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState];
  __swift_project_boxed_opaque_existential_1(&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState], *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState + 24]);
  if (dispatch thunk of DeviceState.isCarPlay.getter())
  {
    uint64_t v16 = v35[0];
    return WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)(a1, v16, a3);
  }
  else
  {
    uint64_t v18 = *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 24];
    uint64_t v19 = *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 32];
    __swift_project_boxed_opaque_existential_1(&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner], v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
    __swift_project_boxed_opaque_existential_1(v15, *((void *)v15 + 3));
    if (dispatch thunk of DeviceState.isLockedWithPasscode.getter())
    {
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v5;
      uint64_t v21 = v5;
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      static AceService.currentAsync.getter();
      type metadata accessor for ShowOutputAndCloseFlow();
      swift_allocObject();
      uint64_t v22 = ShowOutputAndCloseFlow.init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)(0, &v37, &v36, (uint64_t)&async function pointer to partial apply for closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:), v20);
      uint64_t v23 = &v10[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                        + 48)];
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v10, a1, v24);
      *(void *)uint64_t v23 = v35[0];
      *((void *)v23 + 1) = a3;
      swift_storeEnumTagMultiPayload();
      uint64_t v25 = (uint64_t)&v21[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
      swift_beginAccess();
      swift_retain();
      outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v10, v25);
      swift_endAccess();
      *(void *)&long long v37 = v22;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v21;
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:);
      *(void *)(v27 + 24) = v26;
      lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow, (void (*)(uint64_t))type metadata accessor for ShowOutputAndCloseFlow);
      uint64_t v28 = v21;
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      return swift_release();
    }
    else
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v10, a1, v29);
      swift_storeEnumTagMultiPayload();
      uint64_t v30 = (uint64_t)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state];
      swift_beginAccess();
      outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v10, v30);
      swift_endAccess();
      ((void (*)(uint64_t))v35[0])(1);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl(&dword_0, v31, v32, "dismissing Siri after punchout request", v33, 2u);
        swift_slowDealloc();
      }

      __swift_project_boxed_opaque_existential_1(&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker], *(void *)&v5[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker + 24]);
      id v34 = [objc_allocWithZone((Class)SAUICloseAssistant) init];
      AceServiceInvokerAsync.submitAndForget(_:)();

      return static ExecuteResponse.complete()();
    }
  }
}

uint64_t WorkflowRunnerFlow.handleDidFinishWithError(error:)(uint64_t a1, uint64_t a2)
{
  v3[36] = a2;
  v3[37] = v2;
  v3[35] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[38] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[39] = v4;
  unsigned char v3[40] = *(void *)(v4 - 8);
  v3[41] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DialogPhase();
  v3[42] = v5;
  v3[43] = *(void *)(v5 - 8);
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest();
  v3[46] = v6;
  v3[47] = *(void *)(v6 - 8);
  v3[48] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v3[49] = v7;
  v3[50] = *(void *)(v7 - 8);
  v3[51] = swift_task_alloc();
  return _swift_task_switch(WorkflowRunnerFlow.handleDidFinishWithError(error:), 0, 0);
}

void WorkflowRunnerFlow.handleDidFinishWithError(error:)()
{
  char v1 = (_BYTE)v0 - 16;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v0[52] = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v42 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v5 = 136315138;
    OUTLINED_FUNCTION_80();
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[34] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v3, v4, "#WorkflowRunnerFlow did finish with output has error: %s", v5, 0xCu);
    swift_arrayDestroy();
    char v1 = (_BYTE)v0 - 16;
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_getErrorValue();
  v0[30] = Error.localizedDescription.getter();
  v0[31] = v8;
  v0[28] = 0xD000000000000020;
  v0[29] = 0x8000000000226E30;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.contains<A>(_:)();
  OUTLINED_FUNCTION_97();
  if (v1)
  {
    uint64_t v9 = (void *)Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v10))
    {
      uint64_t v11 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v11);
      OUTLINED_FUNCTION_23_0(&dword_0, v12, v13, "#WorkflowRunnerFlow skipping general error dialog for carplay punchout error");
      OUTLINED_FUNCTION_7_0();
    }

    static ExecuteResponse.complete()();
  }
  else
  {
    uint64_t v14 = (void *)_convertErrorToNSError(_:)();
    v0[53] = v14;
    id v15 = [v14 domain];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      LOBYTE(v15) = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        uint64_t v22 = v0[50];
        uint64_t v21 = v0[51];
        uint64_t v23 = v0[49];
        NSError.filteredLocalizedDescription.getter();
        v0[54] = v24;
        (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v23);
        char v25 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
        uint64_t v26 = OUTLINED_FUNCTION_87();
        v27(v26);
        if (v25)
        {
          uint64_t v28 = (void *)swift_task_alloc();
          v0[55] = v28;
          *uint64_t v28 = v0;
          v28[1] = WorkflowRunnerFlow.handleDidFinishWithError(error:);
          OUTLINED_FUNCTION_61();
          OUTLINED_FUNCTION_2_1();
          __asm { BRAA            X3, X16 }
        }
        swift_task_alloc();
        OUTLINED_FUNCTION_22_0();
        v0[61] = v38;
        void *v38 = v39;
        v38[1] = WorkflowRunnerFlow.handleDidFinishWithError(error:);
        OUTLINED_FUNCTION_2_1();
        __asm { BRAA            X4, X16 }
      }
    }
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v32))
    {
      uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v33);
      OUTLINED_FUNCTION_26_5(&dword_0, v31, (os_log_type_t)v15, "#WorkflowRunnerFlow skipping general error dialog for WFSiriExecutionErrorDomain");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v34 = v0[37];

    __swift_project_boxed_opaque_existential_1((void *)(v34 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker), *(void *)(v34 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker + 24));
    id v35 = [objc_allocWithZone((Class)SAUICloseAssistant) init];
    AceServiceInvokerAsync.submitAndForget(_:)();

    static ExecuteResponse.complete()();
  }
  OUTLINED_FUNCTION_20_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_2_1();
  __asm { BRAA            X1, X16 }
}

uint64_t WorkflowRunnerFlow.handleDidFinishWithError(error:)()
{
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  *(void *)(v4 + 448) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v4 + 456) = v3;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  char v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void (*v1)(void);
  long long *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();

  OUTLINED_FUNCTION_20_3();
  v1();
  uint64_t v2 = (long long *)OUTLINED_FUNCTION_30_0();
  outlined init with take of AceServiceInvokerAsync(v2, v3);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 296) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher), *(void *)(*(void *)(v0 + 296) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v4;
  *uint64_t v4 = v0;
  v4[1] = WorkflowRunnerFlow.handleDidFinishWithError(error:);
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_23_1();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 496) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  long long *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  char v1 = *(void *)(v0 + 304);
  OUTLINED_FUNCTION_72();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v2 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v3 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  *(void *)(v0 + 40) = v3;
  *(void *)(v0 + 48) = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of SiriWorkflowRunnerEvent?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of SiriWorkflowRunnerEvent?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_20_3();
  v4();
  uint64_t v5 = (long long *)OUTLINED_FUNCTION_61();
  outlined init with take of AceServiceInvokerAsync(v5, v6);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 296) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher), *(void *)(*(void *)(v0 + 296) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher + 24));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v7;
  *uint64_t v7 = v0;
  v7[1] = WorkflowRunnerFlow.handleDidFinishWithError(error:);
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_3();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 512) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + 136);
  OUTLINED_FUNCTION_89();

  OUTLINED_FUNCTION_20_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

{
  void *v0;
  os_log_type_t v1;
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v0 = (void *)Logger.logObject.getter();
  char v1 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v1))
  {
    uint64_t v2 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v2);
    OUTLINED_FUNCTION_42_0(&dword_0, v3, v4, "#WorkflowRunnerFlow error submitting error dialog");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_89();
  OUTLINED_FUNCTION_20_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v6(v5, v6, v7, v8, v9, v10, v11, v12);
}

{
  void *v0;
  os_log_type_t v1;
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v0 = (void *)Logger.logObject.getter();
  char v1 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v1))
  {
    uint64_t v2 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v2);
    OUTLINED_FUNCTION_42_0(&dword_0, v3, v4, "#WorkflowRunnerFlow error submitting error dialog");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_89();
  OUTLINED_FUNCTION_20_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v6(v5, v6, v7, v8, v9, v10, v11, v12);
}

{
  uint64_t v0;
  void *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
  char v1 = (void *)Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v3);
    OUTLINED_FUNCTION_42_0(&dword_0, v4, v5, "#WorkflowRunnerFlow error submitting error dialog");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_89();
  OUTLINED_FUNCTION_20_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v7(v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t WorkflowRunnerFlow.handleDidFinishWithError(error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  id v15 = v14;
  uint64_t v33 = v14 + 7;
  uint64_t v16 = (void *)v14[57];
  uint64_t v17 = v14[45];
  uint64_t v18 = v14[43];
  uint64_t v19 = v15[42];
  static DialogPhase.summary.getter();
  id v20 = [v16 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_59_0();
  v21();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v15[58] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_211C70;
  *(void *)(v22 + 32) = v16;
  uint64_t v34 = v22;
  specialized Array._endMutation()();
  v15[59] = v34;
  OUTLINED_FUNCTION_91();
  uint64_t v23 = (void *)swift_task_alloc();
  v15[60] = v23;
  *uint64_t v23 = v15;
  v23[1] = WorkflowRunnerFlow.handleDidFinishWithError(error:);
  OUTLINED_FUNCTION_3();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, v33, v34, a12, a13, a14);
}

uint64_t WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:)(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 444) = a2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 216) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 224) = swift_task_alloc();
  *(void *)(v3 + 232) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  *(void *)(v3 + 240) = v4;
  *(void *)(v3 + 248) = *(void *)(v4 - 8);
  *(void *)(v3 + 256) = swift_task_alloc();
  type metadata accessor for DialogPhase();
  *(void *)(v3 + 264) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v3 + 272) = v5;
  *(void *)(v3 + 280) = *(void *)(v5 - 8);
  *(void *)(v3 + 288) = swift_task_alloc();
  *(void *)(v3 + 296) = type metadata accessor for WorkflowRunnerFlow.State(0);
  *(void *)(v3 + 304) = swift_task_alloc();
  return _swift_task_switch(WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:), 0, 0);
}

void WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:)()
{
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v1 + 312) = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v4))
  {
    int v5 = *(unsigned __int8 *)(v1 + 444);
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_88();
    *(_DWORD *)uint64_t v6 = 67109120;
    *(_DWORD *)(v1 + 440) = v5;
    OUTLINED_FUNCTION_87();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v3, v0, "#WorkflowRunnerFlow did finish with output; cancelled=%{BOOL}d", v6, 8u);
    OUTLINED_FUNCTION_7_0();
  }

  uint64_t v7 = *(void *)(*(void *)(v1 + 216) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogState);
  if ((*(uint64_t (**)(void))(*(void *)v7 + 272))())
  {
    uint64_t v8 = *(void *)(v1 + 304);
    uint64_t v9 = *(void *)(v1 + 216);
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = v9 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_23_6();
    uint64_t v11 = v8;
    uint64_t v12 = v10;
  }
  else
  {
    int v13 = *(unsigned __int8 *)(v1 + 444);
    OUTLINED_FUNCTION_16_5();
    if (((*(uint64_t (**)(void))(v14 + 240))() & 1) == 0 && !v13)
    {
      uint64_t v15 = *(void *)(v1 + 256);
      uint64_t v16 = *(void *)(v1 + 240);
      uint64_t v17 = *(void *)(v1 + 248);
      static DialogPhase.completion.getter();
      OutputGenerationManifest.init(dialogPhase:_:)();
      (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v15, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v16);
      char v18 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
      OUTLINED_FUNCTION_20_3();
      v19();
      if (v18)
      {
        uint64_t v20 = *(void *)(v1 + 216);
        uint64_t v21 = *(void *)(v1 + 224);
        uint64_t v22 = *(void *)(v1 + 232);
        uint64_t v23 = *(void *)(v20 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState + 24);
        uint64_t v24 = *(void *)(v20 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState + 32);
        __swift_project_boxed_opaque_existential_1((void *)(v20 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState), v23);
        *(void *)(v1 + 320) = DeviceState.asSiriKitDeviceState()(v23, v24);
        uint64_t v25 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v22, 1, 1, v25);
        __swift_storeEnumTagSinglePayload(v21, 1, 1, v25);
        uint64_t v26 = (void *)swift_task_alloc();
        *(void *)(v1 + 328) = v26;
        *uint64_t v26 = v1;
        v26[1] = WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:);
        OUTLINED_FUNCTION_85();
        __asm { BRAA            X4, X16 }
      }
      OUTLINED_FUNCTION_16_5();
      id v35 = (void *)swift_task_alloc();
      *(void *)(v1 + 376) = v35;
      *id v35 = v1;
      v35[1] = WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:);
      OUTLINED_FUNCTION_85();
      __asm { BRAA            X1, X16 }
    }
    char v29 = (*(uint64_t (**)(void))(*(void *)v7 + 256))();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    if (v29)
    {
      if (v32)
      {
        *(_WORD *)OUTLINED_FUNCTION_33() = 0;
        OUTLINED_FUNCTION_26_5(&dword_0, v30, v31, "#WorkflowRunnerFlow dismissing Siri since the user already pressed done button");
        OUTLINED_FUNCTION_7_0();
      }
      uint64_t v33 = *(void *)(v1 + 216);

      __swift_project_boxed_opaque_existential_1((void *)(v33 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker), *(void *)(v33 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker + 24));
      id v34 = [objc_allocWithZone((Class)SAUICloseAssistant) init];
      AceServiceInvokerAsync.submitAndForget(_:)();

      OUTLINED_FUNCTION_79();
    }
    else
    {
      if (v32)
      {
        *(_WORD *)OUTLINED_FUNCTION_33() = 0;
        OUTLINED_FUNCTION_26_5(&dword_0, v30, v31, "#WorkflowRunnerFlow not submitting addViews because we have previously shown dialog");
        OUTLINED_FUNCTION_7_0();
      }

      OUTLINED_FUNCTION_79();
    }
    OUTLINED_FUNCTION_23_6();
    uint64_t v11 = OUTLINED_FUNCTION_96();
  }
  outlined assign with take of WorkflowRunnerFlow.State(v11, v12);
  swift_endAccess();
  OUTLINED_FUNCTION_16_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_85();
  __asm { BRAA            X1, X16 }
}

uint64_t WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:)()
{
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 336) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v7 = *(void *)(v4 + 232);
  uint64_t v8 = *(void *)(v4 + 224);
  if (!v0) {
    *(void *)(v5 + 344) = v3;
  }
  outlined destroy of SiriWorkflowRunnerEvent?(v8, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of SiriWorkflowRunnerEvent?(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_24_2();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[43];
  uint64_t v2 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v0[44] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_211C70;
  *(void *)(v3 + 32) = v1;
  uint64_t v8 = v3;
  specialized Array._endMutation()();
  v0[45] = v8;
  OUTLINED_FUNCTION_91();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[46] = v4;
  *uint64_t v4 = v0;
  v4[1] = WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:);
  uint64_t v5 = v0[36];
  return v7(v0 + 12, v8, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 96), v0 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher), *(void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v1;
  uint64_t *v1 = v0;
  v1[1] = WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:);
  uint64_t v2 = OUTLINED_FUNCTION_71();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v2, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 384) = v4;
  *(void *)(v2 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = [*(id *)(v0 + 384) patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_87();
  OutputGenerationManifest.responseViewId.setter();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  *(void *)(v0 + 400) = ResponseFactory.init()();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v2;
  *uint64_t v2 = v0;
  v2[1] = WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:);
  OUTLINED_FUNCTION_23_1();
  return v6(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 416) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 56), v0 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher), *(void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v1;
  uint64_t *v1 = v0;
  v1[1] = WorkflowRunnerFlow.handleDidFinishWithOutput(cancelled:);
  uint64_t v2 = OUTLINED_FUNCTION_71();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 432) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = OUTLINED_FUNCTION_21_6();
  v2(v1);
  OUTLINED_FUNCTION_16_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v0 = OUTLINED_FUNCTION_33_3();
  v1(v0);
  uint64_t v2 = (void *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v4);
    OUTLINED_FUNCTION_42_0(&dword_0, v5, v6, "#WorkflowRunnerFlow error submitting final done");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_16_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  return v8(v7, v8, v9, v10, v11, v12, v13, v14);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v0 = OUTLINED_FUNCTION_33_3();
  v1(v0);
  uint64_t v2 = (void *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v4);
    OUTLINED_FUNCTION_42_0(&dword_0, v5, v6, "#WorkflowRunnerFlow error submitting final done");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_16_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  return v8(v7, v8, v9, v10, v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();

  uint64_t v1 = OUTLINED_FUNCTION_21_6();
  v2(v1);
  uint64_t v3 = (void *)Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v5);
    OUTLINED_FUNCTION_42_0(&dword_0, v6, v7, "#WorkflowRunnerFlow error submitting final done");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_16_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  return v9(v8, v9, v10, v11, v12, v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = OUTLINED_FUNCTION_21_6();
  v2(v1);
  uint64_t v3 = (void *)Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v5);
    OUTLINED_FUNCTION_42_0(&dword_0, v6, v7, "#WorkflowRunnerFlow error submitting final done");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_16_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  return v9(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t WorkflowRunnerFlow.createAppProtectionRequestFlow(bundleId:iterator:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  v24[2] = a1;
  uint64_t v11 = type metadata accessor for WorkflowRunnerFlow.State(0);
  __chkstk_darwin(v11);
  int v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    v24[1] = a2;
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "#WorkflowRunnerFlow createAppProtectionRequestFlow", v17, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for App();
  swift_bridgeObjectRetain();
  App.__allocating_init(appIdentifier:)();
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
  uint64_t v18 = static AppFlowFactory.makeFixedAppResolutionFlow<A>(app:)();
  uint64_t v19 = &v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                    + 48)];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v13, a3, v20);
  *(void *)uint64_t v19 = a4;
  *((void *)v19 + 1) = a5;
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = (uint64_t)v6 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v13, v21);
  swift_endAccess();
  long long v24[3] = v18;
  *(void *)(swift_allocObject() + 16) = v6;
  id v22 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyAppResolutionFlow<INIntent>);
  lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>, &demangling cache variable for type metadata for AnyAppResolutionFlow<INIntent>);
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t WorkflowRunnerFlow.guardLocationAccess(needsPreciseLocation:iterator:_:)(uint64_t a1, uint64_t a2, void (*a3)(void, uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(long long *__return_ptr, uint64_t))&v4[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationGuardFlowProvider])(&v29, a1);
  if (v30)
  {
    outlined init with take of AceServiceInvokerAsync(&v29, (uint64_t)v31);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#WorkflowRunnerFlow guardLocationAccess", v16, 2u);
      swift_slowDealloc();
    }

    uint64_t v17 = &v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                      + 48)];
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v12, a2, v18);
    *(void *)uint64_t v17 = a3;
    *((void *)v17 + 1) = a4;
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = (uint64_t)v5 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v19);
    swift_endAccess();
    __swift_project_boxed_opaque_existential_1(v31, v31[3]);
    outlined init with copy of DeviceState((uint64_t)v31, (uint64_t)&v29);
    uint64_t v20 = swift_allocObject();
    outlined init with take of AceServiceInvokerAsync(&v29, v20 + 16);
    *(void *)(v20 + 56) = v5;
    id v21 = v5;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
  }
  else
  {
    outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)&v29, &demangling cache variable for type metadata for SiriLocationAccessGuarding?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "#WorkflowRunnerFlow guardLocationAccess - no guardFlow impl", v26, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v27 = swift_allocError();
    *uint64_t v28 = 0;
    v28[1] = 0;
    a3(0, v27);
    swift_errorRelease();
    return static ExecuteResponse.ongoing(requireInput:)();
  }
}

BOOL WorkflowRunnerFlow.isActionable(actionID:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0xD000000000000022;
  *(void *)(inited + 40) = 0x8000000000226E60;
  *(void *)(inited + 48) = 0xD00000000000001FLL;
  *(void *)(inited + 56) = 0x8000000000226E90;
  *(void *)(inited + 64) = 0xD000000000000020;
  *(void *)(inited + 72) = 0x8000000000226EB0;
  *(_OWORD *)(inited + 16) = xmmword_213920;
  *(void *)(inited + 80) = 0xD00000000000001FLL;
  *(void *)(inited + 88) = 0x8000000000226EE0;
  *(void *)(inited + 96) = 0xD00000000000001BLL;
  *(void *)(inited + 104) = 0x8000000000226F00;
  LOBYTE(a2) = specialized Sequence<>.contains(_:)(a1, a2, (void *)inited);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  return (a2 & 1) == 0;
}

void closure #1 in WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SendMailResult, Error>);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v19 - v6;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  outlined init with copy of SiriWorkflowRunnerEvent?(a1, (uint64_t)v7, &demangling cache variable for type metadata for Result<SendMailResult, Error>);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v19[1] = a1;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    outlined init with copy of SiriWorkflowRunnerEvent?((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for Result<SendMailResult, Error>);
    uint64_t v12 = String.init<A>(describing:)();
    v19[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)v7, &demangling cache variable for type metadata for Result<SendMailResult, Error>);
    _os_log_impl(&dword_0, v9, v10, "#WorkflowRunnerFlow SendMailPlan completed with %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)v7, &demangling cache variable for type metadata for Result<SendMailResult, Error>);
  }

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    os_log_type_t v15 = (void *)Strong;
    os_log_type_t v16 = (void *)specialized Result<>.linkExitValue.getter();
    char v18 = v17;
    WorkflowRunnerFlow.handleLinkExitValue(_:)(v16, v17);
    outlined consume of LinkExitValue(v16, v18);
  }
}

uint64_t specialized Result<>.linkExitValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SendMailResult();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SendMailResult, Error>);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of SiriWorkflowRunnerEvent?(v1, (uint64_t)v11, &demangling cache variable for type metadata for Result<SendMailResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v11;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = _getErrorEmbeddedNSError<A>(_:)();
    if (v12)
    {
      uint64_t v13 = v12;
      swift_errorRelease();
    }
    else
    {
      uint64_t v13 = swift_allocError();
      *os_log_type_t v15 = v20;
    }
    swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v8, v11, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    int v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
    if (v14 == enum case for SendMailResult.success(_:) || v14 == enum case for SendMailResult.failure(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      (*(void (**)(char *, uint64_t))(v3 + 96))(v6, v2);
      return *(void *)v6;
    }
    else if (v14 == enum case for SendMailResult.rejected(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      return 1;
    }
    else if (v14 == enum case for SendMailResult.done(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      return 2;
    }
    else
    {
      lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
      uint64_t v13 = swift_allocError();
      *char v17 = xmmword_213930;
      char v18 = *(void (**)(char *, uint64_t))(v3 + 8);
      v18(v8, v2);
      v18(v6, v2);
    }
  }
  return v13;
}

void Result<>.linkExitValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_36();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = *(void *)(v22 + 24);
  OUTLINED_FUNCTION_12_1();
  uint64_t v25 = v24;
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_51_0();
  uint64_t v29 = v27 - v28;
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (char *)&a9 - v32;
  uint64_t v34 = *(void *)(v31 + 16);
  OUTLINED_FUNCTION_12_1();
  uint64_t v36 = v35;
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_51_0();
  uint64_t v40 = v38 - v39;
  __chkstk_darwin(v41);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v42);
  OUTLINED_FUNCTION_20_0();
  uint64_t v45 = v44 - v43;
  (*(void (**)(uint64_t))(v46 + 16))(v44 - v43);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v47 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 32);
    v47(v33, v45, v23);
    OUTLINED_FUNCTION_59_0();
    v48();
    OUTLINED_FUNCTION_95();
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      os_log_type_t v49 = *(void (**)(void))(v25 + 8);
      OUTLINED_FUNCTION_95();
      OUTLINED_FUNCTION_81();
      v49();
      ((void (*)(char *, uint64_t))v49)(v33, v23);
    }
    else
    {
      OUTLINED_FUNCTION_30_0();
      OUTLINED_FUNCTION_9_6();
      v47(v59, v29, v23);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v33, v23);
    }
  }
  else
  {
    OUTLINED_FUNCTION_73();
    v50();
    OUTLINED_FUNCTION_59_0();
    v51();
    uint64_t v52 = OUTLINED_FUNCTION_61();
    int v54 = v53(v52);
    if (v54 == enum case for SendMailResult.success(_:) || v54 == enum case for SendMailResult.failure(_:))
    {
      uint64_t v55 = OUTLINED_FUNCTION_65();
      v56(v55);
      uint64_t v57 = OUTLINED_FUNCTION_82();
      v58(v57);
    }
    else if (v54 == enum case for SendMailResult.rejected(_:) || v54 == enum case for SendMailResult.done(_:))
    {
      uint64_t v60 = OUTLINED_FUNCTION_39_4();
      v61(v60);
    }
    else
    {
      lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
      OUTLINED_FUNCTION_9_6();
      *uint64_t v62 = xmmword_213930;
      uint64_t v63 = *(void (**)(uint64_t))(v36 + 8);
      uint64_t v64 = OUTLINED_FUNCTION_39_4();
      v63(v64);
      ((void (*)(uint64_t, uint64_t))v63)(v40, v34);
    }
  }
  OUTLINED_FUNCTION_27_1();
}

uint64_t WorkflowRunnerFlow.handleLinkExitValue(_:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  __chkstk_darwin(v6 - 8);
  uint64_t v96 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)type metadata accessor for WorkflowRunnerFlow.State(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v102 = (uint64_t *)((char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v85 - v11;
  uint64_t v13 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v99 = *(v13 - 1);
  __chkstk_darwin(v13);
  uint64_t v103 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
  outlined copy of LinkExitValue(a1, a2);
  outlined copy of LinkExitValue(a1, a2);
  uint64_t v100 = v16;
  char v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  *(void *)&long long v101 = v3;
  if (v19)
  {
    id v97 = v8;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v98 = v13;
    uint64_t v105 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v107 = (uint64_t)a1;
    char v108 = a2;
    outlined copy of LinkExitValue(a1, a2);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v105);
    uint64_t v8 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of LinkExitValue(a1, a2);
    uint64_t v24 = a1;
    outlined consume of LinkExitValue(a1, a2);
    _os_log_impl(&dword_0, v17, v18, "#WorkflowRunnerFlow handleLinkExitValue received: %s", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v13 = v98;
    swift_slowDealloc();
    uint64_t v3 = v101;
    swift_slowDealloc();
  }
  else
  {
    outlined consume of LinkExitValue(a1, a2);
    uint64_t v24 = a1;
    outlined consume of LinkExitValue(a1, a2);
  }

  uint64_t v25 = v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  outlined init with copy of WorkflowRunnerFlow.State(v25, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of WorkflowRunnerFlow.State((uint64_t)v12, (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_0, v44, v45, "#WorkflowRunnerFlow handleLinkExitValue received unexpected state", v46, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v47 = swift_allocError();
    *uint64_t v48 = xmmword_213940;
    os_log_type_t v49 = v102;
    uint64_t *v102 = v47;
    goto LABEL_28;
  }
  uint64_t v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
  uint64_t v27 = (uint64_t *)&v12[v26[12]];
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];

  uint64_t v30 = &v12[v26[20]];
  uint64_t v31 = *(void (**)(id, void *))v30;
  uint64_t v32 = *((void *)v30 + 1);
  uint64_t v33 = *(void (**)(uint64_t *, char *, void *))(v99 + 32);
  uint64_t v94 = v99 + 32;
  uint64_t v95 = v31;
  uint64_t v93 = v33;
  v33((uint64_t *)v103, v12, v13);
  if (!a2)
  {
    uint64_t v50 = v24;
    id v51 = v24;
    unsigned __int8 v52 = WorkflowRunnerFlow.shouldSuppressOpensIntent(bundleId:)(v28, v29);
    swift_bridgeObjectRelease();
    id v92 = v24;
    if (v52)
    {
      id v53 = [v51 identifier];
      uint64_t v54 = (uint64_t)v96;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v98 = [v51 dialog];
      id v97 = [v51 viewSnippet];
      id v91 = [v51 value];
      id v90 = [v51 showOutputActionHint];
      unsigned int v89 = [v51 isDeferred];
      id v88 = [v51 nextAction];
      uint64_t v87 = outlined bridged method (pb) of @objc LNActionOutput.suggestedFollowUpActions.getter(v51);
      uint64_t v86 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v51, (SEL *)&selRef_activityIdentifier);
      uint64_t v85 = v55;
      id v56 = [v51 confirmationActionName];
      char v57 = [v51 shouldShowPrompt];
      id v58 = [v51 confirmationConditions];
      id v59 = [v51 undoContext];
      id v60 = objc_allocWithZone((Class)LNActionOutput);
      id v51 = @nonobjc LNActionOutput.init(identifier:dialog:viewSnippet:value:showOutputAction:showOutputActionHint:deferred:nextAction:suggestedFollowUp:activityIdentifier:confirmationActionName:showPrompt:confirmationConditions:undoContext:)(v54, v98, v97, v91, 0, (uint64_t)v90, v89, v88, v87, v86, v85, v56, v57, (uint64_t)v58, v59);
      outlined consume of LinkExitValue(v50, 0);
    }
    id v61 = v51;
    v95(v51, 0);

    uint64_t v62 = *(void *)(v101 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 24);
    uint64_t v63 = *(void *)(v101 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v101 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner), v62);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v63 + 24))(v62, v63) & 1) != 0
      && !LNActionOutput.hasCustomOutput()())
    {
      uint64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v82 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v82 = 0;
        _os_log_impl(&dword_0, v80, v81, "#WorkflowRunnerFlow.handleSuccessfulOutput dismissing Siri since this is the last step and there is no custom snippet.", v82, 2u);
        swift_slowDealloc();
      }

      __swift_project_boxed_opaque_existential_1((void *)(v101 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker), *(void *)(v101 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker + 24));
      id v83 = [objc_allocWithZone((Class)SAUICloseAssistant) init];
      AceServiceInvokerAsync.submitAndForget(_:)();

      swift_release();
      outlined consume of LinkExitValue(v92, 0);

      (*(void (**)(char *, void *))(v99 + 8))(v103, v13);
      os_log_type_t v49 = v102;
    }
    else
    {

      swift_release();
      outlined consume of LinkExitValue(v92, 0);
      os_log_type_t v49 = v102;
      v93(v102, v103, v13);
    }
LABEL_28:
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    uint64_t v73 = (uint64_t)v49;
    goto LABEL_29;
  }
  uint64_t v34 = v24;
  if (a2 == 1)
  {
    swift_bridgeObjectRelease();
    outlined copy of LinkExitValue(v24, 1);
    outlined copy of LinkExitValue(v24, 1);
    outlined copy of LinkExitValue(v24, 1);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v98 = v13;
      uint64_t v39 = (void *)v38;
      uint64_t v40 = swift_slowAlloc();
      id v97 = v8;
      *(void *)&long long v101 = v32;
      uint64_t v104 = v40;
      *(_DWORD *)uint64_t v37 = 138412546;
      swift_errorRetain();
      uint64_t v41 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v105 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v39 = v41;
      outlined consume of LinkExitValue(v24, 1);
      outlined consume of LinkExitValue(v24, 1);
      *(_WORD *)(v37 + 12) = 2080;
      uint64_t v105 = (uint64_t)v24;
      char v106 = 1;
      swift_errorRetain();
      uint64_t v42 = String.init<A>(describing:)();
      uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of LinkExitValue(v24, 1);
      outlined consume of LinkExitValue(v24, 1);
      _os_log_impl(&dword_0, v35, v36, "#WorkflowRunnerFlow.handleSuccessfulOutput received error %@ for %s", (uint8_t *)v37, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      uint64_t v13 = v98;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      outlined consume of LinkExitValue(v24, 1);
      outlined consume of LinkExitValue(v24, 1);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v95(0, v24);
    outlined consume of LinkExitValue(v24, 1);
    swift_release();
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
    uint64_t v71 = v102;
    uint64_t v70 = v103;
    uint64_t v72 = (char *)v102 + *(int *)(v69 + 48);
    uint64_t *v102 = (uint64_t)v24;
    v93((uint64_t *)v72, v70, v13);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    uint64_t v73 = (uint64_t)v71;
  }
  else
  {
    uint64_t v98 = v13;
    swift_bridgeObjectRelease();
    outlined copy of LinkExitValue(v24, 2);
    outlined copy of LinkExitValue(v24, 2);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      id v97 = v8;
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v104 = swift_slowAlloc();
      uint64_t v105 = (uint64_t)v34;
      *(_DWORD *)uint64_t v66 = 136315138;
      char v106 = 2;
      outlined copy of LinkExitValue(v34, 2);
      uint64_t v67 = String.init<A>(describing:)();
      uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of LinkExitValue(v34, 2);
      outlined consume of LinkExitValue(v34, 2);
      _os_log_impl(&dword_0, v64, v65, "#WorkflowRunnerFlow.handleSuccessfulOutput %s", v66, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      outlined consume of LinkExitValue(v24, 2);
      outlined consume of LinkExitValue(v24, 2);
    }

    lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v74 = swift_allocError();
    long long v101 = xmmword_213930;
    _OWORD *v75 = xmmword_213930;
    v95(0, (void *)v74);
    swift_errorRelease();
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator));
    uint64_t v77 = v102;
    uint64_t v78 = (char *)v102 + *(int *)(v76 + 48);
    *uint64_t v77 = swift_allocError();
    *uint64_t v79 = v101;
    swift_release();
    v93((uint64_t *)v78, v103, v98);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    uint64_t v73 = (uint64_t)v77;
  }
LABEL_29:
  outlined assign with take of WorkflowRunnerFlow.State(v73, v25);
  return swift_endAccess();
}

uint64_t LinkRCHFlowFactory.GetFlowConfig.init(bundleId:action:showWhenRun:workflowRunner:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, long long *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 24) = a4;
  return outlined init with take of AceServiceInvokerAsync(a5, a6 + 32);
}

void closure #2 in WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)(uint64_t a1)
{
  id v1 = *(id *)a1;
  int v2 = *(unsigned __int8 *)(a1 + 8);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    if ((v2 - 1) >= 2)
    {
      if (v2)
      {
        id v1 = 0;
        LOBYTE(v2) = 2;
      }
      else
      {
        id v1 = [v1 output];
      }
    }
    else
    {
      outlined copy of LinkRCHFlowResult(v1, v2);
      LOBYTE(v2) = 1;
    }
    WorkflowRunnerFlow.handleLinkExitValue(_:)(v1, v2);
    outlined consume of LinkExitValue(v1, v2);
  }
}

id LinkRCHFlowResult.linkExitValue.getter(id a1, unsigned __int8 a2)
{
  id v2 = a1;
  if (a2 - 1 >= 2)
  {
    if (a2) {
      return 0;
    }
    else {
      return [a1 output];
    }
  }
  else
  {
    outlined copy of LinkRCHFlowResult(a1, a2);
  }
  return v2;
}

Class WorkflowRunnerFlow.getINInteractionFromNSUserActivity(shortcutName:userActivity:bundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for INSpeakableString);
  swift_bridgeObjectRetain();
  id v10 = NSUserActivity.__allocating_init(activityType:)(a1, a2, (SEL *)&selRef_initWithSpokenPhrase_);
  id v11 = [objc_allocWithZone((Class)INRunWorkflowIntent) initWithWorkflow:v10];
  outlined bridged method (mbgnn) of @objc INIntent.launchId.setter(a4, a5, v11);
  id v12 = [objc_allocWithZone((Class)INRunWorkflowIntentResponse) initWithCode:2 userActivity:a3];
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for INInteraction);
  id v13 = v11;
  id v14 = v12;
  v17.value.super.Class isa = (Class)v12;
  Class isa = INInteraction.__allocating_init(intent:response:)((INIntent)v13, v17).super.isa;

  return isa;
}

uint64_t WorkflowRunnerFlow.onOpenInteractionFinished(exitValue:)(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for WorkflowRunnerFlow.State(0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v37 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  outlined init with copy of WorkflowRunnerFlow.State(v13, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    id v14 = &v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                     + 48)];
    uint64_t v15 = *(void (**)(unint64_t, unint64_t))v14;
    uint64_t v43 = *((void *)v14 + 1);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v41 = v15;
    uint64_t v42 = v16;
    v16(v12, v8, v9);
    if (a1 >> 62)
    {
      if (a1 >> 62 == 1)
      {
        uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 24);
        uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 32);
        __swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner), v17);
        (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
        v41(a1 & 1, 0);
        swift_release();
        v42(v6, v12, v9);
      }
      else
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        __swift_project_value_buffer(v31, (uint64_t)static Logger.voiceCommands);
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v34 = 0;
          _os_log_impl(&dword_0, v32, v33, "#WorkflowRunnerFlow onOpenInteractionFinished needs handoff, completing the flow...", v34, 2u);
          swift_slowDealloc();
        }

        swift_release();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      }
    }
    else
    {
      swift_errorRetain();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        os_log_t v40 = v26;
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        v45[0] = v39;
        uint64_t v38 = v28;
        *(_DWORD *)uint64_t v28 = 136315138;
        uint64_t v37 = v28 + 4;
        swift_getErrorValue();
        uint64_t v29 = Error.localizedDescription.getter();
        uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of WFOpenInteractionResponse(a1);
        outlined consume of WFOpenInteractionResponse(a1);
        uint64_t v26 = v40;
        _os_log_impl(&dword_0, v40, v27, "#WorkflowRunnerFlow onOpenInteractionFinished hitting error: %s", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        outlined consume of WFOpenInteractionResponse(a1);
        outlined consume of WFOpenInteractionResponse(a1);
      }

      swift_errorRetain();
      v41(0, a1);
      outlined consume of WFOpenInteractionResponse(a1);
      swift_release();
      uint64_t v35 = &v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator))
                       + 48)];
      *(void *)uint64_t v6 = a1;
      v42(v35, v12, v9);
    }
  }
  else
  {
    outlined destroy of WorkflowRunnerFlow.State((uint64_t)v8, (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v20, v21, "#WorkflowRunnerFlow onOpenInteractionFinished received unexpected state", v22, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v23 = swift_allocError();
    *uint64_t v24 = xmmword_213940;
    *(void *)uint64_t v6 = v23;
  }
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v6, v13);
  return swift_endAccess();
}

uint64_t WorkflowRunnerFlow.onExecuteCustomIntentFinished(exitValue:)(void *a1, uint64_t a2, char a3)
{
  *(void *)&long long v69 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmIntentResponseError?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for WorkflowRunnerFlow.State(0);
  uint64_t v10 = __chkstk_darwin(v9);
  id v12 = (void *)((char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  id v14 = (char *)v62 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  uint64_t v70 = v19;
  outlined init with copy of WorkflowRunnerFlow.State(v19, (uint64_t)v14);
  uint64_t v71 = v9;
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v20 = &v14[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                      + 48)];
    uint64_t v22 = *(void (**)(Class, void *))v20;
    uint64_t v21 = *((void *)v20 + 1);
    uint64_t v67 = v22;
    uint64_t v68 = v21;
    uint64_t v25 = *(void (**)(void, void, void))(v16 + 32);
    uint64_t v24 = v16 + 32;
    uint64_t v23 = v25;
    v25(v18, v14, v15);
    if (!a3)
    {
      uint64_t v64 = v18;
      uint64_t v65 = v15;
      uint64_t v66 = v24;
      swift_errorRetain();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      uint64_t v42 = (void *)v69;
      if (v41)
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        uint64_t v63 = v23;
        os_log_type_t v45 = (void *)v44;
        *(_DWORD *)uint64_t v43 = 138412290;
        v62[1] = v43 + 4;
        swift_errorRetain();
        uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v72 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v45 = v46;
        outlined consume of CustomIntentExecutionResult(a1, v42, 0);
        outlined consume of CustomIntentExecutionResult(a1, v42, 0);
        _os_log_impl(&dword_0, v39, v40, "#WorkflowRunnerFlow onExecuteCustomIntentFinished received error: %@", v43, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        uint64_t v23 = v63;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        outlined consume of CustomIntentExecutionResult(a1, (void *)v69, 0);
        outlined consume of CustomIntentExecutionResult(a1, v42, 0);
      }

      uint64_t v72 = (uint64_t)a1;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v55 = type metadata accessor for ConfirmIntentResponseError();
      if (swift_dynamicCast())
      {
        __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v55);
        uint64_t v56 = *(void *)(v55 - 8);
        int v57 = (*(uint64_t (**)(char *, uint64_t))(v56 + 88))(v8, v55);
        int v58 = enum case for ConfirmIntentResponseError.continueInApp(_:);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v8, v55);
        if (v57 == v58)
        {
          v67(0, 0);
          outlined consume of CustomIntentExecutionResult(a1, v42, 0);
          swift_release();
          v23(v12, v64, v65);
          goto LABEL_25;
        }
      }
      else
      {
        __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v55);
        outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)v8, &demangling cache variable for type metadata for ConfirmIntentResponseError?);
      }
      swift_errorRetain();
      v67(0, a1);
      outlined consume of CustomIntentExecutionResult(a1, v42, 0);
      swift_release();
      id v59 = (char *)v12
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator))
                   + 48);
      uint64_t *v12 = (uint64_t)a1;
      v23(v59, v64, v65);
      goto LABEL_25;
    }
    if (a3 == 1)
    {
      type metadata accessor for NSError(0, &lazy cache variable for type metadata for INInteraction);
      uint64_t v26 = (objc_class *)v69;
      id v27 = (id)v69;
      id v28 = a1;
      id v29 = v27;
      id v30 = v28;
      v73.value.super.Class isa = v26;
      Class isa = INInteraction.__allocating_init(intent:response:)((INIntent)v30, v73).super.isa;
      v67(isa, 0);
      swift_release();

      v23(v12, v18, v15);
    }
    else
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.voiceCommands);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl(&dword_0, v48, v49, "#WorkflowRunnerFlow onExecuteCustomIntentFinished cancelled", v50, 2u);
        swift_slowDealloc();
      }

      lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
      uint64_t v51 = swift_allocError();
      long long v69 = xmmword_213930;
      *unsigned __int8 v52 = xmmword_213930;
      v67(0, (void *)v51);
      swift_errorRelease();
      id v53 = (char *)v12
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator))
                   + 48);
      uint64_t *v12 = swift_allocError();
      *uint64_t v54 = v69;
      swift_release();
      v23(v53, v18, v15);
    }
  }
  else
  {
    outlined destroy of WorkflowRunnerFlow.State((uint64_t)v14, (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_0, v33, v34, "#WorkflowRunnerFlow onExecuteCustomIntentFinished received unexpected state", v35, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v36 = swift_allocError();
    *uint64_t v37 = xmmword_213940;
    uint64_t *v12 = v36;
  }
LABEL_25:
  swift_storeEnumTagMultiPayload();
  uint64_t v60 = v70;
  swift_beginAccess();
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v12, v60);
  return swift_endAccess();
}

uint64_t implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)(void *a1, char a2)
{
  return WorkflowRunnerFlow.onExecuteDialogRequestFinished(exitValue:)(a1, a2 & 1);
}

uint64_t WorkflowRunnerFlow.onExecuteDialogRequestFinished(exitValue:)(void *a1, char a2)
{
  uint64_t v5 = type metadata accessor for WorkflowRunnerFlow.State(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v36 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  outlined init with copy of WorkflowRunnerFlow.State(v15, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v39 = v8;
    uint64_t v40 = v5;
    uint64_t v16 = &v10[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                      + 48)];
    uint64_t v17 = *(void (**)(void))v16;
    uint64_t v18 = *((void *)v16 + 1);
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v38(v14, v10, v11);
    if (a2)
    {
      v36[1] = v18;
      uint64_t v37 = v17;
      id v27 = objc_allocWithZone((Class)WFDialogResponse);
      swift_errorRetain();
      id v28 = [v27 initWithResponseCode:1];
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.voiceCommands);
      id v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.debug.getter();
      BOOL v32 = os_log_type_enabled(v30, v31);
      uint64_t v8 = v39;
      if (v32)
      {
        os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v33 = 0;
        _os_log_impl(&dword_0, v30, v31, "#WorkflowRunnerFlow onExecuteDialogRequest received error", v33, 2u);
        swift_slowDealloc();
      }

      ((void (*)(id))v37)(v28);
      swift_release();

      os_log_type_t v34 = (char *)v8
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator))
                   + 48);
      *uint64_t v8 = (uint64_t)a1;
      v38(v34, v14, v11);
    }
    else
    {
      id v19 = a1;
      v17();
      unsigned __int8 v20 = [v19 isCancelled];
      swift_release();
      outlined consume of DialogResponse(a1, 0);
      if (v20)
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        uint64_t v8 = v39;
      }
      else
      {
        uint64_t v8 = v39;
        v38((char *)v39, v14, v11);
      }
    }
  }
  else
  {
    outlined destroy of WorkflowRunnerFlow.State((uint64_t)v10, (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.voiceCommands);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_0, v22, v23, "#WorkflowRunnerFlow onExecuteDialogRequestFinished received unexpected state", v24, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v25 = swift_allocError();
    *uint64_t v26 = xmmword_213940;
    *uint64_t v8 = v25;
  }
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v8, v15);
  return swift_endAccess();
}

uint64_t WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for WorkflowRunnerFlow.State(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "#WorkflowRunnerFlow createUnsupportedPunchOutOnCarPlayFlow", v14, 2u);
    swift_slowDealloc();
  }

  outlined init with copy of DeviceState((uint64_t)v4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher, (uint64_t)v26);
  outlined init with copy of DeviceState((uint64_t)v4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker, (uint64_t)v25);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  type metadata accessor for ShowOutputAndCloseFlow();
  swift_allocObject();
  uint64_t v16 = ShowOutputAndCloseFlow.init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)(0, v26, v25, (uint64_t)&async function pointer to partial apply for closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:), v15);
  uint64_t v17 = &v10[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                    + 48)];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v10, a1, v18);
  *(void *)uint64_t v17 = a2;
  *((void *)v17 + 1) = a3;
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = (uint64_t)v4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  id v20 = v4;
  swift_retain();
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v10, v19);
  swift_endAccess();
  *(void *)&v26[0] = v16;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:);
  *(void *)(v22 + 24) = v21;
  lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow, (void (*)(uint64_t))type metadata accessor for ShowOutputAndCloseFlow);
  id v23 = v20;
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)(uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  v2[8] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DialogPhase();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v2[17] = v5;
  v2[18] = *(void *)(v5 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v2[20] = v6;
  v2[21] = *(void *)(v6 - 8);
  v2[22] = swift_task_alloc();
  return _swift_task_switch(closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:), 0, 0);
}

uint64_t closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[8];
  (*(void (**)(void, void, void))(v0[21] + 104))(v0[22], enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v0[20]);
  char v2 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v3 = OUTLINED_FUNCTION_12_2();
  v4(v3);
  uint64_t v5 = **(void **)(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogTemplating);
  if (v2)
  {
    uint64_t v11 = (uint64_t (*)(void))(*(void *)(v5 + 312) + **(int **)(v5 + 312));
    uint64_t v6 = (void *)swift_task_alloc();
    v0[23] = v6;
    *uint64_t v6 = v0;
    v6[1] = closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:);
    return v11();
  }
  else
  {
    uint64_t v12 = (uint64_t (*)(uint64_t))(*(void *)(v5 + 320) + **(int **)(v5 + 320));
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[28] = v8;
    *uint64_t v8 = v9;
    v8[1] = closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:);
    uint64_t v10 = v0[12];
    return v12(v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_24_2();
    return v10(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    *(void *)(v5 + 192) = v3;
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_24_2();
    return _swift_task_switch(v18, v19, v20);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *char v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();

  uint64_t v1 = OUTLINED_FUNCTION_21_6();
  v2(v1);
  OUTLINED_FUNCTION_74();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_23_1();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  return v1(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = (void *)v14[24];
  static DialogPhase.clarification.getter();
  id v16 = [v15 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_59_0();
  v17();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_81();
  v18();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v14[25] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_211C70;
  *(void *)(v19 + 32) = v15;
  uint64_t v33 = v19;
  specialized Array._endMutation()();
  v14[26] = v33;
  BOOL v32 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
  id v20 = v15;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v14[27] = v21;
  *uint64_t v21 = v22;
  v21[1] = closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:);
  OUTLINED_FUNCTION_3();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, v32, v33, a12, a13, a14);
}

uint64_t closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = *(void *)(v12 + 72);
  id v14 = *(uint64_t **)(v12 + 56);
  OUTLINED_FUNCTION_63(*(void *)(v12 + 64));
  uint64_t v15 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v13, 1, 1, v15);
  uint64_t v16 = type metadata accessor for AceOutput();
  *(_OWORD *)(v12 + 32) = 0u;
  *(void *)(v12 + 48) = 0;
  *(_OWORD *)(v12 + 16) = 0u;
  v14[3] = v16;
  v14[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v14);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of SiriWorkflowRunnerEvent?(v12 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of SiriWorkflowRunnerEvent?(v13, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_81();
  v17();
  OUTLINED_FUNCTION_74();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_28_0();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, v12 + 16, a10, a11, a12);
}

uint64_t WorkflowRunnerFlow.punchOutCompletion()()
{
  uint64_t v1 = type metadata accessor for WorkflowRunnerFlow.State(0);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  outlined init with copy of WorkflowRunnerFlow.State(v11, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    uint64_t v24 = v1;
    uint64_t v25 = v4;
    uint64_t v23 = *(void (**)(uint64_t))&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                                                     + 48)];
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v12(v10, v6, v7);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState), *(void *)(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState + 24));
    if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0)
    {
      v23(1);
      swift_release();
      uint64_t v20 = (uint64_t)v25;
      v12((char *)v25, v10, v7);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      uint64_t v19 = v20;
      goto LABEL_11;
    }
    v23(0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v4 = v25;
  }
  else
  {
    outlined destroy of WorkflowRunnerFlow.State((uint64_t)v6, (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#WorkflowRunnerFlow punchOutCompletion received unexpected state", v16, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v17 = swift_allocError();
    *uint64_t v18 = xmmword_213940;
    *uint64_t v4 = v17;
  }
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  uint64_t v19 = (uint64_t)v4;
LABEL_11:
  outlined assign with take of WorkflowRunnerFlow.State(v19, v11);
  return swift_endAccess();
}

uint64_t closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for CATOption();
  v2[4] = swift_task_alloc();
  return _swift_task_switch(closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:), 0, 0);
}

uint64_t closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)()
{
  uint64_t v12 = v0;
  type metadata accessor for ShortcutsUnlockDeviceStrategy();
  static Device.current.getter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v2 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v3 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v5 = type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  CATWrapperSimple.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_92();
  type metadata accessor for AppNameResolver();
  uint64_t v6 = swift_allocObject();
  type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 40) = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(&v11, v1, 0, 1, v2, v3, v4, v5, v6, v7);
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 48) = v8;
  *uint64_t v8 = v9;
  v8[1] = closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:);
  OUTLINED_FUNCTION_58_0();
  return static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WorkflowRunnerFlow.onAppResolutionFlowResult(exitValue:)(void (*a1)(void, void))
{
  uint64_t v80 = a1;
  uint64_t v2 = type metadata accessor for AppResolutionFlowResult();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v78 = (char *)v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v79 = (char *)v68 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v68 - v8;
  uint64_t v10 = type metadata accessor for WorkflowRunnerFlow.State(0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (void *)((char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)v68 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  uint64_t v81 = v20;
  outlined init with copy of WorkflowRunnerFlow.State(v20, (uint64_t)v15);
  uint64_t v82 = v10;
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v77 = v13;
    uint64_t v21 = &v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                      + 48)];
    uint64_t v23 = *(void (**)(void, void))v21;
    uint64_t v22 = *((void *)v21 + 1);
    uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v76 = v19;
    uint64_t v73 = v17 + 32;
    uint64_t v74 = v22;
    v75(v19, v15, v16);
    uint64_t v24 = *(void (**)(char *, void (*)(void, void), uint64_t))(v3 + 16);
    uint64_t v25 = v80;
    v24(v9, v80, v2);
    int v26 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v9, v2);
    uint64_t v27 = v2;
    if (v26 == enum case for AppResolutionFlowResult.resolved(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 96))(v9, v2);
      uint64_t v28 = *(void *)v9;
    }
    else
    {
      if (v26 != enum case for AppResolutionFlowResult.resolvedWithIntent(_:))
      {
        if (v26 == enum case for AppResolutionFlowResult.error(_:))
        {
          (*(void (**)(char *, uint64_t))(v3 + 96))(v9, v2);
          uint64_t v45 = *(void *)v9;
          int v46 = v9[8];
          if (one-time initialization token for voiceCommands != -1) {
            swift_once();
          }
          uint64_t v80 = v23;
          uint64_t v47 = type metadata accessor for Logger();
          __swift_project_value_buffer(v47, (uint64_t)static Logger.voiceCommands);
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v48 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v48, v49))
          {
            uint64_t v50 = swift_slowAlloc();
            uint64_t v72 = v16;
            uint64_t v51 = v50;
            unsigned __int8 v52 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v51 = 138412546;
            swift_errorRetain();
            uint64_t v53 = _swift_stdlib_bridgeErrorToNSError();
            v84[0] = v53;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *unsigned __int8 v52 = v53;
            swift_errorRelease();
            swift_errorRelease();
            *(_WORD *)(v51 + 12) = 1024;
            LODWORD(v84[0]) = v46;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_0, v48, v49, "#WorkflowRunnerFlow onAppResolutionFlowResult w/ error: %@; \n\t handled=%{BOOL}d",
              (uint8_t *)v51,
              0x12u);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v16 = v72;
            swift_slowDealloc();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
          }
          uint64_t v42 = v76;
          uint64_t v13 = v77;

          swift_errorRetain();
          v80(0, v45);
          swift_errorRelease();
          swift_release();
          swift_errorRelease();
        }
        else if (v26 == enum case for AppResolutionFlowResult.cancelled(_:))
        {
          uint64_t v54 = v16;
          if (one-time initialization token for voiceCommands != -1) {
            swift_once();
          }
          uint64_t v55 = type metadata accessor for Logger();
          __swift_project_value_buffer(v55, (uint64_t)static Logger.voiceCommands);
          uint64_t v56 = Logger.logObject.getter();
          os_log_type_t v57 = static os_log_type_t.error.getter();
          BOOL v58 = os_log_type_enabled(v56, v57);
          uint64_t v13 = v77;
          if (v58)
          {
            id v59 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v59 = 0;
            _os_log_impl(&dword_0, v56, v57, "#WorkflowRunnerFlow onAppResolutionFlowResult cancelled", v59, 2u);
            swift_slowDealloc();
          }

          v23(0, 0);
          swift_release();
          uint64_t v42 = v76;
          uint64_t v16 = v54;
        }
        else
        {
          uint64_t v70 = v3;
          uint64_t v71 = v9;
          if (one-time initialization token for voiceCommands != -1) {
            swift_once();
          }
          uint64_t v72 = v16;
          uint64_t v60 = type metadata accessor for Logger();
          __swift_project_value_buffer(v60, (uint64_t)static Logger.voiceCommands);
          id v61 = v79;
          v24(v79, v25, v2);
          uint64_t v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v62, v63))
          {
            uint64_t v64 = (uint8_t *)swift_slowAlloc();
            uint64_t v80 = (void (*)(void, void))swift_slowAlloc();
            v84[0] = (uint64_t)v80;
            long long v69 = v64;
            *(_DWORD *)uint64_t v64 = 136315138;
            v68[1] = v64 + 4;
            v24(v78, (void (*)(void, void))v61, v27);
            uint64_t v65 = String.init<A>(describing:)();
            uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v84);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v67 = *(void (**)(char *, uint64_t))(v70 + 8);
            v67(v61, v27);
            _os_log_impl(&dword_0, v62, v63, "#WorkflowRunnerFlow onAppResolutionFlowResult received unexpected exitValue: %s", v69, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v67 = *(void (**)(char *, uint64_t))(v70 + 8);
            v67(v61, v2);
          }

          v23(0, 0);
          swift_release();
          v67(v71, v27);
          uint64_t v42 = v76;
          uint64_t v13 = v77;
          uint64_t v16 = v72;
        }
        goto LABEL_17;
      }
      (*(void (**)(char *, uint64_t))(v3 + 96))(v9, v2);
      uint64_t v28 = *(void *)v9;
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v80 = v23;
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.voiceCommands);
    swift_retain();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v83 = v28;
      v84[0] = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      type metadata accessor for App();
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v36, v37, "#WorkflowRunnerFlow onAppResolutionFlowResult resolved app: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v42 = v76;
    uint64_t v13 = v77;
    v80(1, 0);
    swift_release();
LABEL_17:
    v75((char *)v13, v42, v16);
    goto LABEL_18;
  }
  outlined destroy of WorkflowRunnerFlow.State((uint64_t)v15, (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.voiceCommands);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    BOOL v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v32 = 0;
    _os_log_impl(&dword_0, v30, v31, "#WorkflowRunnerFlow onAppResolutionFlowResult received unexpected state", v32, 2u);
    swift_slowDealloc();
  }

  lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
  uint64_t v33 = swift_allocError();
  *os_log_type_t v34 = xmmword_213940;
  *uint64_t v13 = v33;
LABEL_18:
  swift_storeEnumTagMultiPayload();
  uint64_t v43 = v81;
  swift_beginAccess();
  outlined assign with take of WorkflowRunnerFlow.State((uint64_t)v13, v43);
  return swift_endAccess();
}

void closure #1 in WorkflowRunnerFlow.guardLocationAccess(needsPreciseLocation:iterator:_:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = type metadata accessor for WorkflowRunnerFlow.State(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v47 = (uint64_t)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v43 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  outlined init with copy of DeviceState((uint64_t)a2, (uint64_t)v54);
  outlined init with copy of DeviceState((uint64_t)a2, (uint64_t)v51);
  uint64_t v46 = v15;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v48 = v13;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    v43[0] = a3;
    uint64_t v50 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    v43[1] = v5;
    uint64_t v45 = v10;
    __swift_project_boxed_opaque_existential_1(v54, v54[3]);
    uint64_t v44 = v11;
    dispatch thunk of Flow.exitValue.getter();
    uint64_t v21 = GuardFlowResult.description.getter();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v54);
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v24 = v52;
    uint64_t v23 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    uint64_t v25 = v24;
    uint64_t v10 = v45;
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v25, v23);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v50);
    uint64_t v11 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
    _os_log_impl(&dword_0, v16, v17, "#WorkflowRunnerFlow guardLocationAccess - received guardFlow response; exitValue=%s; failure: %s",
      (uint8_t *)v19,
      0x16u);
    swift_arrayDestroy();
    a3 = (void *)v43[0];
    swift_slowDealloc();
    uint64_t v13 = v48;
    swift_slowDealloc();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v54);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
  }

  uint64_t v28 = (uint64_t)a3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state;
  swift_beginAccess();
  outlined init with copy of WorkflowRunnerFlow.State(v28, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload() == 7)
  {
    uint64_t v29 = *(void (**)(BOOL, uint64_t))&v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                                                           + 48)];
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v30 = v11;
    uint64_t v31 = v47;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v47, v13, v10);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of WorkflowRunnerFlow.State(v31, v28);
    swift_endAccess();
    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    dispatch thunk of Flow.exitValue.getter();
    int v32 = LOBYTE(v51[0]);
    uint64_t v33 = a2[3];
    uint64_t v34 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v33);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 16))(v33, v34);
    if (v35)
    {
      uint64_t v36 = v35;
      swift_errorRetain();
      swift_errorRetain();
      v29(0, v36);
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      v29(v32 == 0, 0);
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v48, v10);
  }
  else
  {
    outlined destroy of WorkflowRunnerFlow.State((uint64_t)v9, (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);
    id v37 = a3;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      v51[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      outlined init with copy of WorkflowRunnerFlow.State(v28, v47);
      uint64_t v41 = String.init<A>(describing:)();
      uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v38, v39, "#WorkflowRunnerFlow guardLocationAccess - unexpected state=%s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

id WorkflowRunnerFlow.shouldSuppressOpensIntent(bundleId:)(uint64_t a1, unint64_t a2)
{
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v30, v31);
  char v4 = DeviceState.isVox.getter();
  outlined init with copy of DeviceState((uint64_t)v30, (uint64_t)v29);
  if (v4)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
    outlined init with copy of DeviceState((uint64_t)v30, (uint64_t)v28);
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
LABEL_5:
    id v6 = &dword_0 + 1;
    goto LABEL_6;
  }
  __swift_project_boxed_opaque_existential_1(v29, v29[3]);
  char v5 = dispatch thunk of DeviceState.isHomePod.getter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  outlined init with copy of DeviceState((uint64_t)v30, (uint64_t)v28);
  if (v5) {
    goto LABEL_4;
  }
  __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  char v8 = dispatch thunk of DeviceState.isLockedWithPasscode.getter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
  if (v8) {
    goto LABEL_5;
  }
  __swift_project_boxed_opaque_existential_1(v30, v31);
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0)
  {
LABEL_16:
    id v6 = 0;
    goto LABEL_6;
  }
  id v9 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v10 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  uint64_t v15 = v10;
  if (!v10)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_16;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v12, v13, "#WorkflowRunnerFlow Application record not found for: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_14;
  }
  id v16 = [self declarationForAppRecord:v10];
  if (!v16)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v25))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_16;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v12, v25, "#WorkflowRunnerFlow Unable to get CarPlayAppDeclaration for %s", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_14:
    goto LABEL_16;
  }
  os_log_type_t v17 = v16;
  id v18 = [objc_allocWithZone((Class)CRCarPlayAppPolicyEvaluator) init];
  id v19 = [v18 effectivePolicyForAppDeclaration:v17];
  id v6 = [v19 isCarPlaySupported];
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v21, v22, "#WorkflowRunnerFlow CarPlay support for %s = %{BOOL}d", (uint8_t *)v23, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
  return v6;
}

id NSUserActivity.__allocating_init(activityType:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, *a3, v5);

  return v6;
}

id AnonymousConnectionDelegate.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void WorkflowRunnerFlow.init()()
{
}

id AnonymousConnectionDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t protocol witness for Flow.on(input:) in conformance WorkflowRunnerFlow()
{
  WorkflowRunnerFlow.on(input:)();
  return v0 & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WorkflowRunnerFlow()
{
  return WorkflowRunnerFlow.execute(completion:)();
}

uint64_t protocol witness for Flow.execute() in conformance WorkflowRunnerFlow()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return WorkflowRunnerFlow.execute()();
}

void CustomIntentButton.directInvocation.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t LinkRCHFlowFactory.GetFlowConfig.showWhenRun.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t LinkRCHFlowFactory.GetFlowConfig.showWhenRun.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *LinkRCHFlowFactory.GetFlowConfig.showWhenRun.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t LinkRCHFlowFactory.GetFlowConfig.workflowRunner.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 32, a1);
}

uint64_t LinkRCHFlowFactory.GetFlowConfig.workflowRunner.setter()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  uint64_t v1 = (long long *)OUTLINED_FUNCTION_19();

  return outlined init with take of AceServiceInvokerAsync(v1, v2);
}

void *closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow(uint64_t a1)
{
  type metadata accessor for LinkMetadataProvider();
  uint64_t inited = (void *)swift_initStackObject();
  id v3 = [objc_allocWithZone((Class)LNMetadataProvider) init];
  inited[2] = v3;
  NSString v5 = *(void (**)(unsigned char *, uint64_t))a1;
  unint64_t v4 = *(void *)(a1 + 8);
  id v6 = *(void **)(a1 + 16);
  id v7 = [v6 identifier];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  uint64_t v11 = LinkMetadataProvider.actionMetadata(bundleId:actionId:)(v5, v4, v8, v10);
  if (v23)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t inited = v11;

    swift_bridgeObjectRelease();
    id v12 = [self policyWithActionMetadata:inited];
    v27[0] = 0;
    id v13 = [v12 connectionWithError:v27];
    id v14 = v27[0];
    if (v13)
    {
      uint64_t v15 = v13;
      int v22 = *(unsigned __int8 *)(a1 + 24);
      outlined init with copy of DeviceState(a1 + 32, (uint64_t)v27);
      id v16 = v14;
      id v17 = v6;
      swift_bridgeObjectRetain();
      id v18 = v15;
      static AceService.currentAsync.getter();
      static Device.current.getter();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      type metadata accessor for LinkRCHFlow();
      uint64_t v19 = swift_allocObject();
      uint64_t inited = (void *)specialized LinkRCHFlow.init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)(v17, inited, (uint64_t)v5, v4, v22, v18, (uint64_t)v27, &v26, (uint64_t)v25, 0, (uint64_t)v24, v19);
    }
    else
    {
      id v21 = v27[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  return inited;
}

uint64_t key path getter for LinkRCHFlowFactory.getFlow : LinkRCHFlowFactory@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LinkRCHFlowFactory.GetFlowConfig) -> (@owned LinkRCHFlow, @error @owned Error);
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;

  return swift_retain();
}

uint64_t key path setter for LinkRCHFlowFactory.getFlow : LinkRCHFlowFactory(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LinkRCHFlowFactory.GetFlowConfig) -> (@out LinkRCHFlow, @error @owned Error);
  a2[1] = v5;
  return result;
}

uint64_t LinkRCHFlowFactory.getFlow.getter()
{
  return OUTLINED_FUNCTION_30_0();
}

uint64_t LinkRCHFlowFactory.getFlow.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t SiriLocationAccessGuardFlow.failureReasonAsError.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationAccessFailureReason?);
  uint64_t v1 = OUTLINED_FUNCTION_16(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_20_0();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for LocationAccessFailureReason();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_51_0();
  __chkstk_darwin(v7);
  dispatch thunk of SiriLocationAccessGuardFlow.failureReason.getter();
  if (__swift_getEnumTagSinglePayload(v4, 1, v5) == 1)
  {
    outlined destroy of SiriWorkflowRunnerEvent?(v4, &demangling cache variable for type metadata for LocationAccessFailureReason?);
    return 0;
  }
  else
  {
    OUTLINED_FUNCTION_73();
    v9();
    OUTLINED_FUNCTION_59_0();
    v10();
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v13 = v12;
    lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError();
    uint64_t v8 = OUTLINED_FUNCTION_9_6();
    *id v14 = v11;
    v14[1] = v13;
    uint64_t v15 = OUTLINED_FUNCTION_61();
    v16(v15);
  }
  return v8;
}

uint64_t protocol witness for SiriLocationAccessGuarding.failureReasonAsError.getter in conformance SiriLocationAccessGuardFlow()
{
  return SiriLocationAccessGuardFlow.failureReasonAsError.getter();
}

uint64_t SLFLocationAccessGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)SLFLocationAccessGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:));
}

uint64_t SLFLocationAccessGuardFlowStrategy.makeErrorResponse(error:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)SLFLocationAccessGuardFlowStrategy.makeErrorResponse(error:));
}

uint64_t SLFLocationAccessGuardFlowStrategy.makeErrorResponse(error:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v1 + 32) = 0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  OUTLINED_FUNCTION_12_0();
  return v2();
}

uint64_t protocol witness for SiriLocationAccessGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:) in conformance SLFLocationAccessGuardFlowStrategy(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return SLFLocationAccessGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:)(a1);
}

uint64_t protocol witness for SiriLocationAccessGuardFlowStrategy.makeErrorResponse(error:) in conformance SLFLocationAccessGuardFlowStrategy(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return SLFLocationAccessGuardFlowStrategy.makeErrorResponse(error:)(a1);
}

uint64_t closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SiriLocationAccessGuardFlow();
  lazy protocol witness table accessor for type SLFLocationAccessGuardFlowStrategy and conformance SLFLocationAccessGuardFlowStrategy();
  uint64_t result = SiriLocationAccessGuardFlow.__allocating_init(needsPreciseLocation:strategy:)();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for SiriLocationAccessGuardFlow;
  *a1 = result;
  return result;
}

id @nonobjc LNActionOutput.init(identifier:dialog:viewSnippet:value:showOutputAction:showOutputActionHint:deferred:nextAction:suggestedFollowUp:activityIdentifier:confirmationActionName:showPrompt:confirmationConditions:undoContext:)(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, char a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, char a13, uint64_t a14, void *a15)
{
  v29.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  if (a9)
  {
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNAction);
    v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18.super.Class isa = 0;
  }
  if (a11)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  LOBYTE(v23) = a13 & 1;
  LOBYTE(v22) = a7 & 1;
  id v27 = [v25 initWithIdentifier:v29.super.isa dialog:a2 viewSnippet:a3 value:a4 showOutputAction:a5 showOutputActionHint:a6 deferred:v22 nextAction:a8 suggestedFollowUpActions:v18.super.isa activityIdentifier:v19 confirmationActionName:a12 showPrompt:v23 confirmationConditions:a14 undoContext:a15];

  uint64_t v20 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
  return v27;
}

uint64_t outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(void *a1)
{
  return outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(a1, (SEL *)&selRef_launchId);
}

void outlined bridged method (mbgnn) of @objc INIntent.launchId.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 _setLaunchId:v4];
}

void outlined bridged method (mbnn) of @objc NSUserActivity.userInfo.setter(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setUserInfo:isa];
}

uint64_t outlined bridged method (pb) of @objc LNActionOutput.suggestedFollowUpActions.getter(void *a1)
{
  id v1 = [a1 suggestedFollowUpActions];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNAction);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return OUTLINED_FUNCTION_19();
}

void specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  OUTLINED_FUNCTION_36();
  uint64_t v67 = v33;
  uint64_t v66 = v34;
  uint64_t v70 = v35;
  uint64_t v69 = v36;
  uint64_t v38 = v37;
  uint64_t v62 = v39;
  uint64_t v41 = v40;
  uint64_t v71 = v42;
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for WorkflowRunnerFlow.State(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v43);
  OUTLINED_FUNCTION_50_1();
  uint64_t v64 = v44;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v45);
  OUTLINED_FUNCTION_50_1();
  uint64_t v46 = type metadata accessor for CATOption();
  uint64_t v47 = OUTLINED_FUNCTION_16(v46);
  __chkstk_darwin(v47);
  OUTLINED_FUNCTION_20_0();
  v77[3] = a31;
  v77[4] = a33;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v77);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a31 - 8) + 32))(boxed_opaque_existential_1, a25, a31);
  v76[3] = a30;
  v76[4] = a32;
  uint64_t v49 = __swift_allocate_boxed_opaque_existential_1(v76);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a30 - 8) + 32))(v49, a26, a30);
  outlined init with take of SiriWorkflowRunnerInput(v71, (uint64_t)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput]);
  outlined init with copy of DeviceState(v38, (uint64_t)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker]);
  outlined init with copy of DeviceState(v69, (uint64_t)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState]);
  *(void *)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogState] = v62;
  outlined init with copy of DeviceState(v70, (uint64_t)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher]);
  outlined init with copy of DeviceState((uint64_t)v77, (uint64_t)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationProvider]);
  outlined init with copy of DeviceState((uint64_t)v76, (uint64_t)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dateTimeResolver]);
  uint64_t v50 = &a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_linkRCHFlowFactory];
  *(void *)uint64_t v50 = a27;
  *((void *)v50 + 1) = a28;
  *(void *)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_runVoiceCommandsCatWrapperSimple] = a21;
  uint64_t v51 = &a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationGuardFlowProvider];
  *(void *)uint64_t v51 = a23;
  *((void *)v51 + 1) = a24;
  uint64_t v68 = v41;
  outlined init with copy of SiriWorkflowRunnerEvent?(v41, (uint64_t)&v73, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  if (v74)
  {
    outlined init with take of AceServiceInvokerAsync(&v73, (uint64_t)v75);
    outlined init with take of AceServiceInvokerAsync(v75, (uint64_t)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner]);
    uint64_t v52 = a29;
    outlined retain of SiriWorkflowRunnerInput(v71, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    os_log_type_t v63 = a29;
    outlined retain of SiriWorkflowRunnerInput(v71, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)&v73, &demangling cache variable for type metadata for SiriWorkflowRunning?);
    outlined init with copy of DeviceState(v69, (uint64_t)v75);
    outlined init with copy of DeviceState(v38, (uint64_t)&v73);
    uint64_t v53 = type metadata accessor for SiriWorkflowRunner();
    swift_allocObject();
    outlined retain of SiriWorkflowRunnerInput(v71, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    uint64_t v54 = SiriWorkflowRunner.init(workflowRunnerInput:deviceState:aceServiceInvoker:)(v71, v75, &v73);
    uint64_t v55 = &v63[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner];
    *((void *)v55 + 3) = v53;
    *((void *)v55 + 4) = &protocol witness table for SiriWorkflowRunner;
    *(void *)uint64_t v55 = v54;
  }
  outlined init with copy of DeviceState(v69, (uint64_t)v75);
  type metadata accessor for WorkflowRunnerCATs();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v56 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v57 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v58 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject();
  *(void *)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogTemplating] = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v75, v62, v56, v57, v66, v58, v67, a21, a22);
  uint64_t v59 = *(void *)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 24];
  uint64_t v60 = *(void *)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 32];
  __swift_project_boxed_opaque_existential_1(&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner], v59);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v60);
  AsyncStream.makeAsyncIterator()();
  OUTLINED_FUNCTION_66();
  v61();
  swift_storeEnumTagMultiPayload();
  outlined init with take of SiriWorkflowRunnerEvent(v64, (uint64_t)&a29[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state]);

  v72.receiver = a29;
  v72.super_class = ObjectType;
  objc_msgSendSuper2(&v72, "init");
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined retain of SiriWorkflowRunnerInput(v71, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SiriWorkflowRunnerInput);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v76);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v77);
  __swift_destroy_boxed_opaque_existential_1Tm(v70);
  __swift_destroy_boxed_opaque_existential_1Tm(v69);
  __swift_destroy_boxed_opaque_existential_1Tm(v38);
  outlined destroy of SiriWorkflowRunnerEvent?(v68, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  OUTLINED_FUNCTION_27_1();
}

uint64_t type metadata accessor for WorkflowRunnerFlow.State(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerFlow.State);
}

uint64_t outlined assign with take of WorkflowRunnerFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WorkflowRunnerFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerError and conformance WorkflowRunnerError()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerError and conformance WorkflowRunnerError;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerError and conformance WorkflowRunnerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerError and conformance WorkflowRunnerError);
  }
  return result;
}

uint64_t outlined init with copy of WorkflowRunnerFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_92();
  v4(v3);
  OUTLINED_FUNCTION_11_8();
  OUTLINED_FUNCTION_36_3();
  v5();
  return a2;
}

uint64_t outlined destroy of WorkflowRunnerFlow.State(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_66();
  v3();
  return a1;
}

uint64_t partial apply for closure #1 in WorkflowRunnerFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v14 + 16) = v15;
  *uint64_t v15 = v14;
  v15[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  uint64_t v16 = OUTLINED_FUNCTION_19();
  return closure #1 in WorkflowRunnerFlow.execute()(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

void partial apply for closure #2 in WorkflowRunnerFlow.execute()(void *a1)
{
  closure #2 in WorkflowRunnerFlow.execute()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type Input and conformance Input(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for WorkflowRunnerFlow(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerFlow);
}

id outlined copy of LinkRCHFlowResult(id result, char a2)
{
  if (a2 == 2 || a2 == 1) {
    return (id)swift_errorRetain();
  }
  if (!a2) {
    return result;
  }
  return result;
}

uint64_t base witness table accessor for Flow in WorkflowRunnerFlow()
{
  return lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow, (void (*)(uint64_t))type metadata accessor for WorkflowRunnerFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in WorkflowRunnerFlow()
{
  return lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow, (void (*)(uint64_t))type metadata accessor for WorkflowRunnerFlow);
}

unint64_t destroy for WorkflowRunnerError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for WorkflowRunnerError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for WorkflowRunnerError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for WorkflowRunnerError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowRunnerError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 4;
    }
  }
  return result;
}

uint64_t getEnumTag for WorkflowRunnerError(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for WorkflowRunnerError(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

void type metadata accessor for WorkflowRunnerError()
{
}

uint64_t initializeBufferWithCopyOfBuffer for LinkExitValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of LinkExitValue(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of LinkExitValue(id result, char a2)
{
  if (a2 == 1) {
    return (id)swift_errorRetain();
  }
  if (!a2) {
    return result;
  }
  return result;
}

void destroy for LinkExitValue(uint64_t a1)
{
}

void outlined consume of LinkExitValue(id a1, char a2)
{
  if (a2 == 1)
  {
    swift_errorRelease();
  }
  else if (!a2)
  {
  }
}

uint64_t assignWithCopy for LinkExitValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of LinkExitValue(*(id *)a2, v4);
  unsigned int v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of LinkExitValue(v5, v6);
  return a1;
}

uint64_t assignWithTake for LinkExitValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of LinkExitValue(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkExitValue(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkExitValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for LinkExitValue(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for LinkExitValue(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void type metadata accessor for LinkExitValue()
{
}

uint64_t ObjC metadata update function for WorkflowRunnerFlow()
{
  return type metadata accessor for WorkflowRunnerFlow(0);
}

uint64_t type metadata completion function for WorkflowRunnerFlow()
{
  uint64_t result = type metadata accessor for WorkflowRunnerFlow.State(319);
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LinkRCHFlowFactory(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for LinkRCHFlowFactory()
{
  return swift_release();
}

void *assignWithCopy for LinkRCHFlowFactory(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for LinkRCHFlowFactory(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkRCHFlowFactory(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkRCHFlowFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LinkRCHFlowFactory()
{
}

uint64_t destroy for LinkRCHFlowFactory.GetFlowConfig(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
}

uint64_t initializeWithCopy for LinkRCHFlowFactory.GetFlowConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  char v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = a2 + 32;
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  id v9 = v4;
  v8(a1 + 32, v5, v7);
  return a1;
}

uint64_t assignWithCopy for LinkRCHFlowFactory.GetFlowConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  return a1;
}

void *__swift_memcpy72_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for LinkRCHFlowFactory.GetFlowConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkRCHFlowFactory.GetFlowConfig(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkRCHFlowFactory.GetFlowConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LinkRCHFlowFactory.GetFlowConfig()
{
}

void type metadata accessor for SLFLocationAccessGuardFlowStrategy()
{
}

void type metadata accessor for SLFLocationAccessGuardProvider()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for WorkflowRunnerFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_10;
      case 1u:
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        unint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
        uint64_t v11 = v10[12];
        uint64_t v12 = (uint64_t *)((char *)a1 + v11);
        uint64_t v13 = (uint64_t *)((char *)a2 + v11);
        uint64_t v15 = *v13;
        uint64_t v14 = v13[1];
        void *v12 = v15;
        v12[1] = v14;
        uint64_t v16 = v10[16];
        uint64_t v17 = *(void **)((char *)a2 + v16);
        *(uint64_t *)((char *)a1 + v16) = (uint64_t)v17;
        uint64_t v18 = v10[20];
        uint64_t v19 = (uint64_t *)((char *)a1 + v18);
        uint64_t v20 = (uint64_t *)((char *)a2 + v18);
        uint64_t v21 = v20[1];
        *uint64_t v19 = *v20;
        v19[1] = v21;
        swift_bridgeObjectRetain();
        id v22 = v17;
        swift_retain();
        goto LABEL_10;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
        uint64_t v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                     + 48);
        uint64_t v25 = (uint64_t *)((char *)a1 + v24);
        long long v26 = (uint64_t *)((char *)a2 + v24);
        uint64_t v27 = v26[1];
        void *v25 = *v26;
        v25[1] = v27;
        swift_retain();
        goto LABEL_10;
      case 8u:
        uint64_t v28 = *a2;
        swift_errorRetain();
        *a1 = v28;
        uint64_t v29 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator))
                     + 48);
        uint64_t v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
        goto LABEL_10;
      case 9u:
        uint64_t v33 = *a2;
        swift_errorRetain();
        *a1 = v33;
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for WorkflowRunnerFlow.State(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      goto LABEL_11;
    case 1:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
      swift_bridgeObjectRelease();

      goto LABEL_3;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
LABEL_3:
      uint64_t result = swift_release();
      break;
    case 8:
      swift_errorRelease();
      a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator))
                   + 48);
LABEL_11:
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      uint64_t result = v7(a1, v6);
      break;
    case 9:
      uint64_t result = swift_errorRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for WorkflowRunnerFlow.State(void *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_8;
    case 1u:
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
      uint64_t v9 = v8[12];
      unint64_t v10 = (void *)((char *)a1 + v9);
      uint64_t v11 = (uint64_t *)((char *)a2 + v9);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      *unint64_t v10 = v13;
      v10[1] = v12;
      uint64_t v14 = v8[16];
      uint64_t v15 = *(void **)((char *)a2 + v14);
      *(void *)((char *)a1 + v14) = v15;
      uint64_t v16 = v8[20];
      uint64_t v17 = (void *)((char *)a1 + v16);
      uint64_t v18 = (uint64_t *)((char *)a2 + v16);
      uint64_t v19 = v18[1];
      *uint64_t v17 = *v18;
      v17[1] = v19;
      swift_bridgeObjectRetain();
      id v20 = v15;
      swift_retain();
      goto LABEL_8;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
      uint64_t v22 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                   + 48);
      uint64_t v23 = (void *)((char *)a1 + v22);
      uint64_t v24 = (uint64_t *)((char *)a2 + v22);
      uint64_t v25 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v25;
      swift_retain();
      goto LABEL_8;
    case 8u:
      uint64_t v27 = *a2;
      swift_errorRetain();
      *a1 = v27;
      uint64_t v28 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator))
                   + 48);
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
      goto LABEL_8;
    case 9u:
      uint64_t v26 = *a2;
      swift_errorRetain();
      *a1 = v26;
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *assignWithCopy for WorkflowRunnerFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of WorkflowRunnerFlow.State((uint64_t)a1, (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_9;
      case 1u:
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
        uint64_t v9 = v8[12];
        unint64_t v10 = (uint64_t *)((char *)a1 + v9);
        uint64_t v11 = (uint64_t *)((char *)a2 + v9);
        *unint64_t v10 = *v11;
        v10[1] = v11[1];
        uint64_t v12 = v8[16];
        uint64_t v13 = *(void **)((char *)a2 + v12);
        *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
        uint64_t v14 = v8[20];
        uint64_t v15 = (uint64_t *)((char *)a1 + v14);
        uint64_t v16 = (uint64_t *)((char *)a2 + v14);
        uint64_t v17 = v16[1];
        *uint64_t v15 = *v16;
        v15[1] = v17;
        swift_bridgeObjectRetain();
        id v18 = v13;
        swift_retain();
        goto LABEL_9;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        uint64_t v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()))
                     + 48);
        uint64_t v21 = (uint64_t *)((char *)a1 + v20);
        uint64_t v22 = (uint64_t *)((char *)a2 + v20);
        uint64_t v23 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v23;
        swift_retain();
        goto LABEL_9;
      case 8u:
        uint64_t v25 = *a2;
        swift_errorRetain();
        *a1 = v25;
        uint64_t v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator))
                     + 48);
        uint64_t v27 = (char *)a1 + v26;
        uint64_t v28 = (char *)a2 + v26;
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
        goto LABEL_9;
      case 9u:
        uint64_t v24 = *a2;
        swift_errorRetain();
        *a1 = v24;
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for WorkflowRunnerFlow.State(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      goto LABEL_7;
    case 1u:
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
      *(_OWORD *)((char *)a1 + v8[12]) = *(_OWORD *)((char *)a2 + v8[12]);
      *(void *)((char *)a1 + v8[16]) = *(void *)((char *)a2 + v8[16]);
      *(_OWORD *)((char *)a1 + v8[20]) = *(_OWORD *)((char *)a2 + v8[20]);
      goto LABEL_7;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
      *(_OWORD *)((char *)a1 + *(int *)(v10 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v10 + 48));
      goto LABEL_7;
    case 8u:
      *a1 = *a2;
      uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator))
                   + 48);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithTake for WorkflowRunnerFlow.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of WorkflowRunnerFlow.State((uint64_t)a1, (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        goto LABEL_8;
      case 1u:
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, bundleId: String, action: LNAction, completionHandler: ()));
        *(_OWORD *)((char *)a1 + v8[12]) = *(_OWORD *)((char *)a2 + v8[12]);
        *(void *)((char *)a1 + v8[16]) = *(void *)((char *)a2 + v8[16]);
        *(_OWORD *)((char *)a1 + v8[20]) = *(_OWORD *)((char *)a2 + v8[20]);
        goto LABEL_8;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator, completionHandler: ()));
        *(_OWORD *)((char *)a1 + *(int *)(v10 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v10 + 48));
        goto LABEL_8;
      case 8u:
        *a1 = *a2;
        uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Error, iterator: AsyncStream<SiriWorkflowRunnerEvent>.Iterator))
                     + 48);
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for WorkflowRunnerFlow.State()
{
  return swift_storeEnumTagMultiPayload();
}

void type metadata completion function for WorkflowRunnerFlow.State()
{
  type metadata accessor for AsyncStream<SiriWorkflowRunnerEvent>.Iterator();
  if (v1 <= 0x3F)
  {
    uint64_t v14 = *(void *)(v0 - 8) + 64;
    uint64_t v9 = v14;
    uint64_t v10 = &unk_213BE8;
    uint64_t v11 = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t v12 = (char *)&value witness table for () + 64;
    swift_getTupleTypeLayout();
    uint64_t v15 = &v13;
    swift_getTupleTypeLayout2();
    uint64_t v16 = &v8;
    swift_getTupleTypeLayout2();
    uint64_t v17 = &v7;
    swift_getTupleTypeLayout2();
    id v18 = &v6;
    swift_getTupleTypeLayout2();
    uint64_t v19 = &v5;
    swift_getTupleTypeLayout2();
    uint64_t v20 = &v4;
    swift_getTupleTypeLayout2();
    uint64_t v21 = &v3;
    swift_getTupleTypeLayout2();
    uint64_t v22 = &v2;
    uint64_t v23 = &unk_213C00;
    swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for AsyncStream<SiriWorkflowRunnerEvent>.Iterator()
{
  if (!lazy cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator)
  {
    type metadata accessor for SiriWorkflowRunnerEvent(255);
    unint64_t v0 = type metadata accessor for AsyncStream.Iterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Iterator);
    }
  }
}

uint64_t sub_62B70()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LinkRCHFlowFactory.GetFlowConfig) -> (@out LinkRCHFlow, @error @owned Error)()
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1) {
    return (void *)v3;
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LinkRCHFlowFactory.GetFlowConfig) -> (@owned LinkRCHFlow, @error @owned Error)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t outlined assign with take of SiriWorkflowRunnerEvent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of LinkRCHFlowFactory.GetFlowConfig(uint64_t a1)
{
  return a1;
}

uint64_t sub_62CAC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #2 in WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)(uint64_t a1)
{
}

void partial apply for closure #1 in WorkflowRunnerFlow.createExecuteLinkActionFlow(action:bundleId:showWhenRun:iterator:_:)(uint64_t a1)
{
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed WFOpenInteractionResponse) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

unint64_t outlined consume of WFOpenInteractionResponse(unint64_t result)
{
  if (!(result >> 62)) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t specialized WFExecuteCustomIntentFlow.init(intent:workflowName:runner:deviceState:aceServiceInvoker:outputPublisher:preferences:appPolicyHandler:guardFlowProvider:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v49[3] = type metadata accessor for VoiceCommandsAppPolicyHandler();
  v49[4] = &protocol witness table for VoiceCommandsAppPolicyHandler;
  v49[0] = a9;
  uint64_t v45 = a5;
  outlined init with copy of DeviceState(a5, a12 + 104);
  uint64_t v47 = a6;
  outlined init with copy of DeviceState(a6, a12 + 144);
  uint64_t v46 = a7;
  outlined init with copy of DeviceState(a7, a12 + 184);
  *(void *)(a12 + 40) = a1;
  *(void *)(a12 + 48) = a2;
  *(void *)(a12 + 56) = a3;
  uint64_t v19 = a4;
  outlined init with copy of DeviceState(a4, a12 + 64);
  *(void *)(a12 + 224) = a8;
  outlined init with copy of DeviceState((uint64_t)v49, a12 + 232);
  *(void *)(a12 + 272) = a10;
  *(void *)(a12 + 280) = a11;
  uint64_t v20 = one-time initialization token for voiceCommands;
  id v21 = a1;
  id v22 = a8;
  swift_retain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
  uint64_t v24 = v21;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 138412290;
    uint64_t v28 = v24;
    uint64_t v29 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v44 = v28;

    uint64_t v24 = v28;
    _os_log_impl(&dword_0, v25, v26, "#WFExecuteCustomIntentFlow intent: %@", v27, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v25 = v24;
  }

  id v30 = [*(id *)(a12 + 40) _metadata];
  if (v30)
  {
    uint64_t v31 = v30;
    outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v30, (SEL *)&selRef_launchId);
    if (v32)
    {
      id v33 = [v24 typeName];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      LOBYTE(v33) = static VoiceCommandsParity.isParityIntent(intentName:)(v34, v36);
      swift_bridgeObjectRelease();
      if ((v33 & 1) == 0) {
        [v31 setExecutionContext:2];
      }
      [v24 _setMetadata:v31];
      type metadata accessor for App();
      uint64_t v37 = App.__allocating_init(appIdentifier:)();

      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
      __swift_destroy_boxed_opaque_existential_1Tm(v46);
      __swift_destroy_boxed_opaque_existential_1Tm(v47);
      __swift_destroy_boxed_opaque_existential_1Tm(v45);
      __swift_destroy_boxed_opaque_existential_1Tm(v19);
      char v38 = 0;
      goto LABEL_15;
    }
  }
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl(&dword_0, v39, v40, "#WFExecuteCustomIntentFlow error state because metadata or bundleid is nil", v41, 2u);
    swift_slowDealloc();
  }

  lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
  uint64_t v37 = swift_allocError();
  unsigned char *v42 = 0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
  __swift_destroy_boxed_opaque_existential_1Tm(v46);
  __swift_destroy_boxed_opaque_existential_1Tm(v47);
  __swift_destroy_boxed_opaque_existential_1Tm(v45);
  __swift_destroy_boxed_opaque_existential_1Tm(v19);
  uint64_t v24 = 0;
  char v38 = 4;
LABEL_15:
  *(void *)(a12 + 16) = v37;
  *(void *)(a12 + 24) = v24;
  *(unsigned char *)(a12 + 32) = v38;
  return a12;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createExecuteIntentFlow(intent:iterator:_:)(void *a1, uint64_t a2, char a3)
{
  return WorkflowRunnerFlow.onExecuteCustomIntentFinished(exitValue:)(a1, a2, a3);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CustomIntentExecutionResult) -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)(void *a1, char a2)
{
  return implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createShowDialogFlow(dialogRequest:iterator:_:)(a1, a2 & 1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed DialogResponse) -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

void outlined consume of DialogResponse(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createOpenAppFlow(bundleId:iterator:_:)(unint64_t a1)
{
  return WorkflowRunnerFlow.onOpenInteractionFinished(exitValue:)(a1);
}

uint64_t partial apply for closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 16);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *char v5 = v1;
  v5[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)(v3, v4);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createPunchOutRequestedFlow(iterator:_:)()
{
  return WorkflowRunnerFlow.punchOutCompletion()();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 16);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *char v5 = v1;
  v5[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return closure #1 in WorkflowRunnerFlow.createUnsupportedPunchOutOnCarPlayFlow(iterator:punchOutCompletion:)(v3, v4);
}

uint64_t sub_633EC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WorkflowRunnerFlow.createAppProtectionRequestFlow(bundleId:iterator:_:)(void (*a1)(void, void))
{
  return WorkflowRunnerFlow.onAppResolutionFlowResult(exitValue:)(a1);
}

uint64_t lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_6348C()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

void partial apply for closure #1 in WorkflowRunnerFlow.guardLocationAccess(needsPreciseLocation:iterator:_:)(uint64_t a1)
{
  closure #1 in WorkflowRunnerFlow.guardLocationAccess(needsPreciseLocation:iterator:_:)(a1, (void *)(v1 + 16), *(void **)(v1 + 56));
}

uint64_t outlined init with copy of SiriWorkflowRunnerEvent?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_11_8();
  OUTLINED_FUNCTION_36_3();
  v4();
  return a2;
}

uint64_t outlined destroy of SiriWorkflowRunnerEvent?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_66();
  v3();
  return a1;
}

uint64_t outlined init with take of SiriWorkflowRunnerEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_92();
  v5(v4);
  OUTLINED_FUNCTION_11_8();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a2, v2);
  return a2;
}

{
  uint64_t v4;

  uint64_t v4 = type metadata accessor for SiriWorkflowRunnerEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of SiriWorkflowRunnerInput(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 64);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v4);
  return a1;
}

uint64_t specialized LinkRCHFlow.init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, void *a6, uint64_t a7, long long *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v51 = a8;
  HIDWORD(v44) = a5;
  uint64_t v16 = type metadata accessor for CATOption();
  __chkstk_darwin(v16 - 8);
  v55[3] = (id)type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNConnection);
  v55[4] = &protocol witness table for LNConnection;
  v55[0] = a6;
  *(void *)(a12 + 16) = a1;
  *(void *)(a12 + 24) = a2;
  id v47 = a1;
  id v17 = a2;
  id v18 = [a6 bundleIdentifier];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  *(void *)(a12 + 112) = v19;
  *(void *)(a12 + 120) = v21;
  uint64_t v48 = a7;
  outlined init with copy of SiriWorkflowRunnerEvent?(a7, a12 + 168, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  outlined init with copy of DeviceState(a9, a12 + 208);
  uint64_t v50 = a9;
  uint64_t v49 = a11;
  if (a10)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.voiceCommands);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "#LinkRCHFlow init - overriding strategy", v25, 2u);
      swift_slowDealloc();
    }

    uint64_t v26 = a10;
  }
  else
  {
    outlined init with copy of DeviceState(a9, (uint64_t)v54);
    outlined init with copy of DeviceState(a11, (uint64_t)v53);
    outlined init with copy of DeviceState((uint64_t)v51, (uint64_t)v52);
    type metadata accessor for RunLinkActionCATs();
    id v27 = v17;
    static CATOption.defaultMode.getter();
    uint64_t v28 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunLinkActionCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v29 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for RunLinkActionCATPatternsExecutor(0);
    static CATOption.defaultMode.getter();
    uint64_t v30 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for ShortcutsLinkRCHFlowStrategy();
    uint64_t v31 = swift_allocObject();
    specialized ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)(a3, a4, (uint64_t)v27, BYTE4(v44) & 1, (uint64_t)v54, v28, v29, (uint64_t)v53, (uint64_t)v52, v30, v31, v42, v43, v44, a3, a4, (uint64_t)v47, v48, a11,
      a9,
      (uint64_t)v51,
      v52[0],
      v52[1]);
  }
  *(void *)(a12 + 32) = v26;
  id v32 = [v17 systemProtocols];
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v34 = [self sessionStartingProtocol];
  char v35 = specialized Sequence<>.contains(_:)((uint64_t)v34, v33);
  swift_bridgeObjectRelease();

  if (v35)
  {
    id v36 = [v55[0] bundleIdentifier];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;

    type metadata accessor for LinkActivityManager();
    swift_allocObject();
    os_log_type_t v40 = LinkActivityManager.init(bundleId:)(v37, v39);

    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v49);
    __swift_destroy_boxed_opaque_existential_1Tm(v50);
    outlined destroy of SiriWorkflowRunnerEvent?(v48, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  }
  else
  {

    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v49);
    __swift_destroy_boxed_opaque_existential_1Tm(v50);
    outlined destroy of SiriWorkflowRunnerEvent?(v48, &demangling cache variable for type metadata for SiriWorkflowRunning?);
    os_log_type_t v40 = 0;
  }
  *(void *)(a12 + 40) = v40;
  outlined init with take of AceServiceInvokerAsync(v51, a12 + 128);
  outlined init with copy of DeviceState((uint64_t)v55, a12 + 248);
  *(_OWORD *)(a12 + 48) = 0u;
  *(_OWORD *)(a12 + 64) = 0u;
  *(_OWORD *)(a12 + 80) = 0u;
  *(void *)(a12 + 96) = 0;
  *(unsigned char *)(a12 + 104) = 12;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
  return a12;
}

unint64_t lazy protocol witness table accessor for type SLFLocationAccessGuardFlowStrategy and conformance SLFLocationAccessGuardFlowStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type SLFLocationAccessGuardFlowStrategy and conformance SLFLocationAccessGuardFlowStrategy;
  if (!lazy protocol witness table cache variable for type SLFLocationAccessGuardFlowStrategy and conformance SLFLocationAccessGuardFlowStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SLFLocationAccessGuardFlowStrategy and conformance SLFLocationAccessGuardFlowStrategy);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_6_7()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_16_9()
{
  return static ExecuteResponse.complete()();
}

uint64_t OUTLINED_FUNCTION_20_9()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_21_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_6()
{
  return swift_beginAccess();
}

void OUTLINED_FUNCTION_26_5(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

_WORD *OUTLINED_FUNCTION_28_2(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

void OUTLINED_FUNCTION_29_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v46 = *(void *)(v34 - 192);
  uint64_t v45 = *(void *)(v34 - 184);
  long long v44 = *(_OWORD *)(v34 - 176);
  uint64_t v36 = *(void *)(v34 - 152);
  uint64_t v37 = *(void *)(v34 - 144);
  uint64_t v38 = *(void *)(v34 - 136);
  uint64_t v39 = *(void *)(v34 - 128);
  uint64_t v40 = *(void *)(v34 - 120);
  uint64_t v41 = *(void *)(v34 - 112);
  uint64_t v42 = *(void *)(v34 - 104);
  uint64_t v43 = *(void *)(v34 - 96);
  specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)(v36, v37, v38, v39, v40, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v45, v46, v33, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33);
}

char *OUTLINED_FUNCTION_32_5@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  return *(void *)(v0 + 288);
}

uint64_t OUTLINED_FUNCTION_39_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_41_3()
{
  return **(void **)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_42_3()
{
  return **(void **)(v0 + 80);
}

char *OUTLINED_FUNCTION_49_0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_55_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_56_0()
{
  return static ExecuteResponse.ongoing(requireInput:)();
}

uint64_t OUTLINED_FUNCTION_58_0()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_61()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_63@<X0>(uint64_t a1@<X8>)
{
  __swift_project_boxed_opaque_existential_1((void *)(a1 + v1), *(void *)(a1 + v1 + 24));
  return dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_65()
{
  return v0;
}

void OUTLINED_FUNCTION_67(void *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 0xD00000000000002BLL;
  a1[1] = (a2 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_68()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_69()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_71()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_72()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_74()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_75()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_76()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_78()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_79()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_80()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_82()
{
  return v0;
}

__n128 OUTLINED_FUNCTION_83()
{
  __n128 result = v0[1];
  v0[-11] = result;
  unint64_t v2 = v0[2].n128_u64[0];
  v0[-12].n128_u64[0] = v0[2].n128_u64[1];
  v0[-12].n128_u64[1] = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_87()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_88()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_89()
{
  return static ExecuteResponse.complete()();
}

uint64_t OUTLINED_FUNCTION_90()
{
  return v0;
}

id OUTLINED_FUNCTION_91()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_92()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_95()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_96()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_97()
{
  return swift_bridgeObjectRelease();
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:));
}

uint64_t VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:)()
{
  OUTLINED_FUNCTION_13_1();
  id v1 = [self standardClient];
  v0[18] = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  v0[19] = v2;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:);
  uint64_t v3 = OUTLINED_FUNCTION_18_8();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
  v0[13] = &block_descriptor_1;
  v0[14] = v3;
  [v1 getVoiceShortcutWithPhrase:v2 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 160) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  BOOL v3;
  uint64_t (*v4)(BOOL);
  uint64_t v6;

  OUTLINED_FUNCTION_9_0();
  id v1 = *(void **)(v0 + 144);
  NSString v2 = *(void **)(v0 + 152);

  uint64_t v3 = OUTLINED_FUNCTION_9_8();
  return v4(v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  BOOL v3;
  uint64_t (*v4)(BOOL);
  uint64_t v6;

  OUTLINED_FUNCTION_13_1();
  id v1 = *(void **)(v0 + 152);
  NSString v2 = *(void **)(v0 + 144);
  swift_willThrow();

  swift_errorRelease();
  uint64_t v3 = OUTLINED_FUNCTION_9_8();
  return v4(v3);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    id v4 = a3;
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, v4);
  }
  else if (a2)
  {
    id v5 = a2;
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:));
}

uint64_t VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:)()
{
  id v1 = [self standardClient];
  v0[19] = v1;
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  v0[20] = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  v0[21] = v5;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:);
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
  v0[13] = &block_descriptor_1;
  v0[14] = v6;
  [v1 importTopLevelShortcutFromURL:v4 withName:v5 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 176) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  id v1 = *(void **)(v0 + 160);
  NSString v2 = *(void **)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 152);

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_13_1();
  id v1 = (void *)v0[21];
  uint64_t v3 = (void *)v0[19];
  NSString v2 = (void *)v0[20];
  swift_willThrow();

  OUTLINED_FUNCTION_18_0();
  return v4();
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:));
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)()
{
  OUTLINED_FUNCTION_13_1();
  if (v0[17])
  {
    id v1 = [self standardClient];
    v0[18] = v1;
    NSString v2 = String._bridgeToObjectiveC()();
    v0[19] = v2;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:);
    uint64_t v3 = OUTLINED_FUNCTION_18_8();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
    v0[13] = &block_descriptor_3;
    v0[14] = v3;
    [v1 getVoiceShortcutWithPhrase:v2 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4(0);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 160) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  id v1 = *(void **)(v0 + 152);

  NSString v2 = OUTLINED_FUNCTION_11_4();
  return v3(v2);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  id v1 = (void *)v0[19];
  NSString v2 = (void *)v0[18];
  swift_willThrow();
  swift_errorRelease();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3(0);
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  v3[3] = a2;
  v3[4] = v4;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:));
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[4];
  id v2 = [self standardClient];
  v0[5] = v2;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)
                                                                  + async function pointer to specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:));
  id v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:);
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  return v8(v6, v5, v1, (uint64_t)v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  id v2 = *(void **)(v1 + 40);
  id v3 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  swift_task_dealloc();

  uint64_t v5 = OUTLINED_FUNCTION_14_7();
  return v6(v5);
}

uint64_t specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a2;
  v4[6] = a4;
  v4[4] = a1;
  uint64_t v8 = (void *)swift_task_alloc();
  v4[7] = v8;
  *uint64_t v8 = v4;
  v8[1] = specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
  return implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(a1, a2, a4);
}

uint64_t specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 72) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 48);
  uint64_t v3 = [v1 shortcutName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = OUTLINED_FUNCTION_13_9();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v6 = *(void **)(v0 + 48);
  if (v5)
  {
    OUTLINED_FUNCTION_17_6();
    id v17 = v8;
    id v18 = v6;
    uint64_t v9 = (_DWORD *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *uint64_t v9 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v1 - 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_11_9();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_7_11(v11);
    *uint64_t v10 = v7;
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_12_8(&dword_0, v12, v13, "voiceShortcut NOT found from identifier=%s; error: %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v14 = OUTLINED_FUNCTION_15_9();
  return v15(v14);
}

uint64_t static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  v0[4] = v3;
  v0[5] = v1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  *uint64_t v6 = v0;
  v6[1] = static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
  return v8(v4, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 64) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = [v1 shortcutName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = OUTLINED_FUNCTION_13_9();
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  id v18 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 40);
  if (v5)
  {
    OUTLINED_FUNCTION_17_6();
    uint64_t v16 = v7;
    uint64_t v8 = (_DWORD *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    id v17 = swift_slowAlloc();
    *uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v1 - 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v6, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_11_9();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_7_11(v10);
    *uint64_t v9 = v6;
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_12_8(&dword_0, v11, v12, "voiceShortcut NOT found from identifier=%s; error: %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v13 = OUTLINED_FUNCTION_15_9();
  return v14(v13);
}

uint64_t implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:));
}

uint64_t implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = (void *)v0[18];
  NSString v2 = String._bridgeToObjectiveC()();
  v0[19] = v2;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
  uint64_t v3 = OUTLINED_FUNCTION_18_8();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
  v0[13] = &block_descriptor_17;
  v0[14] = v3;
  [v1 getVoiceShortcutWithIdentifier:v2 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 160) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();

  uint64_t v1 = OUTLINED_FUNCTION_11_4();
  return v2(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  OUTLINED_FUNCTION_18_0();
  return v2();
}

void VoiceShortcutClientWrapper.getSiriAutoShortcutsEnablement(forBundleIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = [self standardClient];
  NSString v7 = String._bridgeToObjectiveC()();
  v9[4] = a3;
  v9[5] = a4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  v9[3] = &block_descriptor_6;
  uint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v6 getSiriAutoShortcutsEnablementForBundleIdentifier:v7 completion:v8];
  _Block_release(v8);
}

uint64_t VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 120) = a2;
  *(void *)(v3 + 128) = a3;
  *(unsigned char *)(v3 + 160) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:));
}

uint64_t VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 160);
  id v2 = [self standardClient];
  *(void *)(v0 + 136) = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 144) = v3;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:);
  uint64_t v4 = OUTLINED_FUNCTION_18_8();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  *(void *)(v0 + 104) = &block_descriptor_7;
  *(void *)(v0 + 112) = v4;
  [v2 setSiriAutoShortcutsEnablement:v1 forBundleIdentifier:v3 completion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *id v2 = v1;
  *id v2 = *v0;
  *(void *)(v1 + 152) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 144);

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 144);
  id v2 = *(void **)(v0 + 136);
  swift_willThrow();

  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v3 = a2;
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v2, v3);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v5);
  }
}

uint64_t protocol witness for VoiceShortcutClientWrapping.isVoiceShortcutInstalled(voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.onAsync(input:) in conformance AutoShortcutFlow;
  return VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:)(a1, a2);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:)(a1, a2, a3);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.getVoiceShortcut(voiceCommandName:) in conformance VoiceShortcutClientWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for VoiceShortcutClientWrapping.getVoiceShortcut(voiceCommandName:) in conformance VoiceShortcutClientWrapper;
  return VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(a1, a2);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.getVoiceShortcut(voiceCommandName:) in conformance VoiceShortcutClientWrapper()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_11_4();
  return v4(v3);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.getVoiceShortcutName(voiceCommandId:) in conformance VoiceShortcutClientWrapper()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v5;
  *uint64_t v5 = v0;
  v5[1] = protocol witness for VoiceShortcutClientWrapping.getVoiceShortcutName(voiceCommandId:) in conformance VoiceShortcutClientWrapper;
  return VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)(v4, v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_14_7();
  return v4(v3);
}

void protocol witness for VoiceShortcutClientWrapping.getSiriAutoShortcutsEnablement(forBundleIdentifier:completion:) in conformance VoiceShortcutClientWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:)(a1, a2, a3);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t type metadata accessor for VoiceShortcutClientWrapper()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_7_11(uint64_t a1)
{
  *(void *)(v1 - 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL OUTLINED_FUNCTION_9_8()
{
  return *(void *)(v0 + 160) == 0;
}

uint64_t OUTLINED_FUNCTION_11_9()
{
  *(_WORD *)(v0 + 12) = 2112;
  return swift_errorRetain();
}

void OUTLINED_FUNCTION_12_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_13_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_9()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_18_8()
{
  return swift_continuation_init();
}

uint64_t LocationResolver.makeRecommendation(value:context:)()
{
  uint64_t v0 = type metadata accessor for LocationResolutionSpec();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocationResolutionSpec.init()();
  LocationResolver.makeRecommendation(value:context:spec:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t protocol witness for LocationResolving.makeRecommendation(value:context:) in conformance LocationResolver()
{
  return LocationResolver.makeRecommendation(value:context:)();
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.__allocating_init(runner:deviceState:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  CustomIntentContinueInAppWithDialogStrategy.init(runner:deviceState:)(a1, a2);
  return v4;
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.init(runner:deviceState:)(long long *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CATOption();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = v2 + 16;
  outlined init with copy of DeviceState(a2, v7);
  outlined init with copy of DeviceState(v7, (uint64_t)v16);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v8 = static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v12 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for AppNameResolver();
  uint64_t v13 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v14 = swift_allocObject();
  *(void *)(v3 + 56) = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(v16, v8, 0, 1, v9, v10, v11, v12, v13, v14);
  outlined init with take of AceServiceInvokerAsync(a1, v3 + 64);
  return v3;
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[22] = v2;
  v1[23] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[24] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v1[25] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[26] = v4;
  v1[27] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for DialogPhase();
  v1[28] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[29] = v6;
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[32] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[33] = v8;
  v1[34] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[35] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[36] = v10;
  v1[37] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  uint64_t v2 = v0[36];
  uint64_t v1 = v0[37];
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[23];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v3);
  uint64_t v5 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = **(void **)(v4 + 56);
  if (v5)
  {
    uint64_t v11 = (uint64_t (*)(void))(*(void *)(v6 + 368) + **(int **)(v6 + 368));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[38] = v7;
    *uint64_t v7 = v0;
    v7[1] = CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:);
    return v11();
  }
  else
  {
    uint64_t v12 = (uint64_t (*)(uint64_t))(*(void *)(v6 + 376) + **(int **)(v6 + 376));
    uint64_t v9 = (void *)swift_task_alloc();
    v0[44] = v9;
    *uint64_t v9 = v0;
    v9[1] = CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:);
    uint64_t v10 = v0[27];
    return v12(v10);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 256);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v4;
  *uint64_t v4 = v0;
  v4[1] = CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:);
  return static NotificationTemplates.genericHandoffNotification()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 360) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  v7[47] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[48] = v3;
    v7[49] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = v1[11];
  uint64_t v3 = v1[12];
  __swift_project_boxed_opaque_existential_1(v1 + 8, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 32) + **(int **)(v3 + 32));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v4;
  *uint64_t v4 = v0;
  v4[1] = CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:);
  return v6(v2, v3);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 408) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_4_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_4_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_4_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 312) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(void *)(v5 + 320) = a1;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  uint64_t v15 = v14;
  uint64_t v35 = v14 + 2;
  uint64_t v16 = (void *)v14[40];
  uint64_t v18 = v14[30];
  uint64_t v17 = v14[31];
  uint64_t v19 = v14[29];
  uint64_t v20 = v15[28];
  static DialogPhase.completion.getter();
  id v21 = [v16 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v20);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v15[41] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_211C70;
  *(void *)(v22 + 32) = v16;
  uint64_t v36 = v22;
  specialized Array._endMutation()();
  v15[42] = v36;
  uint64_t v34 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
  id v23 = v16;
  os_log_type_t v24 = (void *)swift_task_alloc();
  v15[43] = v24;
  *os_log_type_t v24 = v15;
  v24[1] = CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:);
  OUTLINED_FUNCTION_3();
  return v28(v25, v26, v27, v28, v29, v30, v31, v32, v34, v35, v36, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_11_0();
  uint64_t v15 = *(void *)(v14 + 208);
  uint64_t v16 = *(void *)(v14 + 216);
  uint64_t v18 = *(void *)(v14 + 192);
  uint64_t v17 = *(void *)(v14 + 200);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v14 + 184) + 16), *(void *)(*(void *)(v14 + 184) + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v19 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v18, 1, 1, v19);
  uint64_t v20 = type metadata accessor for AceOutput();
  *(_OWORD *)(v14 + 112) = 0u;
  *(void *)(v14 + 128) = 0;
  *(_OWORD *)(v14 + 96) = 0u;
  *(void *)(v14 + 80) = v20;
  *(void *)(v14 + 88) = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v14 + 56));
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v14 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v18, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  outlined init with take of AceServiceInvokerAsync((long long *)(v14 + 56), v14 + 16);
  id v21 = (void *)swift_task_alloc();
  *(void *)(v14 + 368) = v21;
  *id v21 = v14;
  v21[1] = CustomIntentContinueInAppWithDialogStrategy.makeContinueInAppHandoffResponse(intentResolutionRecord:);
  OUTLINED_FUNCTION_3();
  return static NotificationTemplates.genericHandoffNotification()(v22, v23, v24, v25, v26, v27, v28, v29, v14 + 96, a10, v14 + 16, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_11_0();
  os_log_type_t v24 = v14[30];
  uint64_t v25 = v14[27];
  uint64_t v26 = v14[24];
  outlined init with copy of DeviceState((uint64_t)(v14 + 2), (uint64_t)(v14 + 17));
  HandoffResponse.init(output:companionNotificationText:runSiriKitExecutorCommand:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v14 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_3();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, v24, v25, v26, a12, a13, a14);
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  return v0;
}

uint64_t CustomIntentContinueInAppWithDialogStrategy.__deallocating_deinit()
{
  CustomIntentContinueInAppWithDialogStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ContinueInAppHandoffToCompanionFlowStrategyAsync.makeContinueInAppHandoffResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppWithDialogStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 112)
                                                + **(int **)(**(void **)v2 + 112));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v8(a1, a2);
}

unint64_t lazy protocol witness table accessor for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy;
  if (!lazy protocol witness table cache variable for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy)
  {
    type metadata accessor for CustomIntentContinueInAppWithDialogStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy);
  }
  return result;
}

uint64_t type metadata accessor for CustomIntentContinueInAppWithDialogStrategy()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_4_6()
{
  return swift_task_dealloc();
}

void *SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation;
}

unint64_t static SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation.getter()
{
  return 0xD000000000000047;
}

void *SiriLinkSuggestionsConstants.IntentActionIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.IntentActionIdentifier;
}

unint64_t static SiriLinkSuggestionsConstants.IntentActionIdentifier.getter()
{
  return 0xD000000000000012;
}

void *SiriLinkSuggestionsConstants.PayloadKeys.BundleIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.PayloadKeys.BundleIdentifier;
}

unint64_t static SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_11();
}

const char *SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.unsafeMutableAddressor()
{
  return "archivedAction";
}

uint64_t static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.getter()
{
  return 0x6465766968637261;
}

const char *SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol.unsafeMutableAddressor()
{
  return "systemProtocol";
}

uint64_t static SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol.getter()
{
  return 0x72506D6574737973;
}

void *SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier;
}

void *SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier;
}

unint64_t static SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_11();
}

void type metadata accessor for SiriLinkSuggestionsConstants()
{
}

void type metadata accessor for SiriLinkSuggestionsConstants.PayloadKeys()
{
}

void type metadata accessor for SiriLinkSuggestionsConstants.MappedParameterKeys()
{
}

unint64_t OUTLINED_FUNCTION_0_11()
{
  return 0xD000000000000010;
}

Swift::Bool __swiftcall INIntent.isBooleanParameter(parameterName:)(Swift::String parameterName)
{
  id v2 = OUTLINED_FUNCTION_0_12([v1 _codableDescription]);

  if (v2)
  {
    self;
    uint64_t v3 = (void *)swift_dynamicCastObjCClass();
    if (v3 && (uint64_t v4 = outlined bridged method (pb) of @objc INCodableObjectAttribute.typeName.getter(v3), v5))
    {
      if (v4 == 0x6E61656C6F6F42 && v5 == 0xE700000000000000) {
        char v7 = 1;
      }
      else {
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      char v7 = 0;
    }
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t INIntent.BOOLeanAttributeMetadata(parameterName:)()
{
  id v1 = OUTLINED_FUNCTION_0_12([v0 _codableDescription]);

  if (v1)
  {
    self;
    id v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      id v3 = [v2 metadata];

      if (v3)
      {
        self;
        uint64_t result = swift_dynamicCastObjCClass();
        if (result) {
          return result;
        }
      }
    }
    else
    {
    }
  }
  return 0;
}

id outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byKeyPath:)(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 attributeByKeyPath:v4];

  return v5;
}

uint64_t outlined bridged method (pb) of @objc INCodableObjectAttribute.typeName.getter(void *a1)
{
  id v1 = [a1 typeName];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id OUTLINED_FUNCTION_0_12(void *a1)
{
  return outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byKeyPath:)(v2, v1, a1);
}

uint64_t SiriLinkViewModel.encoded()()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  outlined init with take of SiriLinkViewModel(v0, __dst);
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v2);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)();
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v2);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    specialized Dictionary._Variant.removeValue(forKey:)();
    swift_bridgeObjectRelease();
    return outlined consume of Data?(v5, v6);
  }
  else
  {
    specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, a4);
    return swift_bridgeObjectRelease();
  }
}

uint64_t one-time initialization function for encoder(uint64_t a1)
{
  return one-time initialization function for encoder(a1, (void (*)(void))&type metadata accessor for PropertyListEncoder, (uint64_t (*)(void))&PropertyListEncoder.init(), &static SiriLinkViewModel.encoder);
}

uint64_t *SiriLinkViewModel.encoder.unsafeMutableAddressor()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  return &static SiriLinkViewModel.encoder;
}

void *outlined init with take of SiriLinkViewModel(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x51uLL);
}

uint64_t static SiriLinkViewModel.encoder.getter()
{
  return static SiriLinkViewModel.encoder.getter(&one-time initialization token for encoder);
}

uint64_t one-time initialization function for decoder(uint64_t a1)
{
  return one-time initialization function for encoder(a1, (void (*)(void))&type metadata accessor for PropertyListDecoder, (uint64_t (*)(void))&PropertyListDecoder.init(), &static SiriLinkViewModel.decoder);
}

uint64_t one-time initialization function for encoder(uint64_t a1, void (*a2)(void), uint64_t (*a3)(void), uint64_t *a4)
{
  a2(0);
  swift_allocObject();
  uint64_t result = a3();
  *a4 = result;
  return result;
}

uint64_t *SiriLinkViewModel.decoder.unsafeMutableAddressor()
{
  if (one-time initialization token for decoder != -1) {
    swift_once();
  }
  return &static SiriLinkViewModel.decoder;
}

uint64_t static SiriLinkViewModel.decoder.getter()
{
  return static SiriLinkViewModel.encoder.getter(&one-time initialization token for decoder);
}

uint64_t static SiriLinkViewModel.encoder.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

double static SiriLinkViewModel.decode(from:)@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for decoder != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  OUTLINED_FUNCTION_10_11();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (!v1)
  {
    double result = *(double *)&v4;
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 64) = v8;
    *(unsigned char *)(a1 + 80) = v9;
  }
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SiriLinkViewModel.base64EncodedString()()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  outlined init with take of SiriLinkViewModel(v0, __dst);
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  uint64_t v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    Swift::String v8 = Data.base64EncodedString(options:)(0);
    uint64_t countAndFlagsBits = v8._countAndFlagsBits;
    object = v8._object;
    outlined consume of Data._Representation(v6, v7);
  }
  uint64_t v9 = countAndFlagsBits;
  uint64_t v10 = object;
  result._object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t SiriLinkViewModel.asPatternParams(with:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v14 = a1;
  uint64_t v4 = one-time initialization token for encoder;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  outlined init with take of SiriLinkViewModel(v1, __dst);
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v8 = v5;
  unint64_t v9 = v6;
  Swift::String v10 = Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v8, v9);
  uint64_t v13 = &type metadata for String;
  Swift::String v12 = v10;
  specialized Dictionary.subscript.setter((uint64_t)&v12);
  return v14;
}

uint64_t SiriLinkViewModel.ArchivedViewModelCodingKeys.stringValue.getter()
{
  return 12383;
}

uint64_t SiriLinkViewModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000000002270E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000000227100 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000000227120 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000000227140 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000000227160 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x654874706D6F7270 && a2 == 0xEC00000072656461)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t SiriLinkViewModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 5:
      unint64_t result = 0x654874706D6F7270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SiriLinkViewModel.ArchivedViewModelCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  return CustomIntentsDialogTemplatingError.hashValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SiriLinkViewModel.ArchivedViewModelCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  return OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = default argument 3 of INIntentResolutionResult.getDisplayHints(intent:parameter:locale:shouldIncludeOrdinalReference:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys(uint64_t a1)
{
  unint64_t RunCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys();

  return CodingKey.description.getter(a1, RunCoding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys(uint64_t a1)
{
  unint64_t RunCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys();

  return CodingKey.debugDescription.getter(a1, RunCoding);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys(uint64_t a1)
{
  unint64_t RunWatchCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys();

  return CodingKey.description.getter(a1, RunWatchCoding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys(uint64_t a1)
{
  unint64_t RunWatchCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys();

  return CodingKey.debugDescription.getter(a1, RunWatchCoding);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriLinkViewModel.CodingKeys()
{
  return SiriLinkViewModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriLinkViewModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SiriLinkViewModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriLinkViewModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = variable initialization expression of WFChooseFromListPromptFlowStrategy.WINDOWSIZE();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.PromptHeaderCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.PromptHeaderCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SiriLinkViewModel.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  outlined init with take of SiriLinkViewModel(v2, v51);
  uint64_t v47 = v51[0];
  unint64_t v46 = v51[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.PromptHeaderCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_50_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_50_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_50_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_50_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.AutoShortcutFirstRunCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v11 = v10 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.ArchivedViewModelCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_20_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v48 = v13;
  uint64_t v49 = v14;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_20_0();
  uint64_t v17 = (void *)(v16 - v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of SiriLinkViewModel(v2, v52);
  switch(v53)
  {
    case 1:
      OUTLINED_FUNCTION_12_9(v57);
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      memcpy(v50, v57, sizeof(v50));
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_66();
      v30(v27, v28, v29);
      return (*(uint64_t (**)(void *, uint64_t))(v49 + 8))(v17, v48);
    case 2:
      OUTLINED_FUNCTION_12_9(v58);
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys();
      uint64_t v11 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      memcpy(v50, v58, sizeof(v50));
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_66();
      v34(v31, v32, v33);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t))(v49 + 8);
      uint64_t v36 = v17;
      goto LABEL_8;
    case 3:
      OUTLINED_FUNCTION_12_9(__src);
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys();
      OUTLINED_FUNCTION_8_7();
      memcpy(v50, __src, sizeof(v50));
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_7;
    case 4:
      OUTLINED_FUNCTION_12_9(v60);
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys();
      OUTLINED_FUNCTION_8_7();
      memcpy(v50, v60, sizeof(v50));
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
LABEL_7:
      OUTLINED_FUNCTION_66();
      v40(v37, v38, v39);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t))(v49 + 8);
      uint64_t v36 = v2;
LABEL_8:
      uint64_t v41 = v11;
      goto LABEL_10;
    case 5:
      LOBYTE(v50[0]) = 5;
      lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys();
      OUTLINED_FUNCTION_10_11();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      OUTLINED_FUNCTION_66();
      v45(v42, v43, v44);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t))(v49 + 8);
      uint64_t v36 = v17;
      uint64_t v41 = v48;
LABEL_10:
      uint64_t result = v35(v36, v41);
      break;
    default:
      long long v54 = v52[0];
      long long v55 = v52[1];
      long long v56 = v52[2];
      outlined copy of Data._Representation(v47, v46);
      lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v50[0] = v54;
      v50[1] = v55;
      void v50[2] = v56;
      lazy protocol witness table accessor for type ArchivedViewModel and conformance ArchivedViewModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_66();
      v21(v18, v19, v20);
      OUTLINED_FUNCTION_66();
      v25(v22, v23, v24);
      uint64_t result = outlined release of SiriLinkViewModel((uint64_t)v2);
      break;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedViewModel and conformance ArchivedViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel);
  }
  return result;
}

uint64_t outlined release of SiriLinkViewModel(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of SiriLinkViewModel(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 0:
      outlined consume of Data._Representation(result, a2);
      goto LABEL_4;
    case 1:
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 5:
LABEL_5:
      unint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

__n128 SiriLinkViewModel.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.PromptHeaderCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_50_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_50_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_50_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_50_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutFirstRunCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.ArchivedViewModelCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_20_0();
  uint64_t v15 = v14 - v13;
  uint64_t v58 = (uint64_t)a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v48) {
    goto LABEL_11;
  }
  uint64_t v49 = v11;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17
    || (uint64_t v18 = *(unsigned __int8 *)(v16 + 32),
        uint64_t v19 = specialized ArraySlice.subscript.getter(1, v17, v16, v16 + 32, 0, (2 * v17) | 1),
        uint64_t v21 = v20,
        unint64_t v23 = v22,
        swift_bridgeObjectRelease(),
        v21 != v23 >> 1))
  {
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v26 = &type metadata for SiriLinkViewModel;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, enum case for DecodingError.typeMismatch(_:), v24);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v15, v9);
LABEL_11:
    __swift_destroy_boxed_opaque_existential_1Tm(v58);
    return result;
  }
  switch(v18)
  {
    case 1:
      LOBYTE(v51) = 1;
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_10_11();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_66();
      v35();
      swift_unknownObjectRelease();
      OUTLINED_FUNCTION_66();
      v36();
      goto LABEL_14;
    case 2:
      LOBYTE(v51) = 2;
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys();
      OUTLINED_FUNCTION_3_10();
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_5_8();
      OUTLINED_FUNCTION_6_8();
      OUTLINED_FUNCTION_7_12();
      goto LABEL_13;
    case 3:
      LOBYTE(v51) = 3;
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys();
      OUTLINED_FUNCTION_3_10();
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_5_8();
      OUTLINED_FUNCTION_6_8();
      OUTLINED_FUNCTION_7_12();
      goto LABEL_13;
    case 4:
      LOBYTE(v51) = 4;
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys();
      OUTLINED_FUNCTION_3_10();
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_5_8();
      OUTLINED_FUNCTION_6_8();
      OUTLINED_FUNCTION_7_12();
LABEL_13:
      OUTLINED_FUNCTION_66();
      v37();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v15, v9);
LABEL_14:
      uint64_t v31 = v51;
      uint64_t v32 = v53;
      uint64_t v33 = v54;
      uint64_t v34 = v55;
      long long v47 = v56;
      long long v50 = v52;
      __n128 v43 = v57;
      goto LABEL_15;
    case 5:
      lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_14_8();
      unint64_t v39 = v38;
      OUTLINED_FUNCTION_66();
      v40();
      swift_unknownObjectRelease();
      uint64_t v41 = OUTLINED_FUNCTION_13_10();
      v42(v41);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      long long v47 = 0u;
      long long v50 = v39;
      __n128 v43 = 0uLL;
LABEL_15:
      __n128 v46 = v43;
      break;
    default:
      LOBYTE(v51) = 0;
      lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();
      OUTLINED_FUNCTION_3_10();
      lazy protocol witness table accessor for type ArchivedViewModel and conformance ArchivedViewModel();
      OUTLINED_FUNCTION_10_11();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_6_8();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_11_10();
      OUTLINED_FUNCTION_66();
      v28();
      swift_unknownObjectRelease();
      uint64_t v29 = OUTLINED_FUNCTION_9_9();
      v30(v29);
      uint64_t v31 = v51;
      uint64_t v32 = v53;
      uint64_t v33 = v54;
      long long v47 = 0u;
      long long v50 = v52;
      __n128 v46 = 0u;
      uint64_t v34 = v55;
      break;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v58);
  *(void *)a2 = v31;
  *(_OWORD *)(a2 + 8) = v50;
  *(void *)(a2 + 24) = v32;
  *(void *)(a2 + 32) = v33;
  *(void *)(a2 + 40) = v34;
  __n128 result = v46;
  *(_OWORD *)(a2 + 48) = v47;
  *(__n128 *)(a2 + 64) = v46;
  *(unsigned char *)(a2 + 80) = v44;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance SiriLinkViewModel(void *a1@<X0>, void *a2@<X8>)
{
  SiriLinkViewModel.init(from:)(a1, (uint64_t)__src);
  if (!v2) {
    outlined init with take of SiriLinkViewModel(__src, a2);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriLinkViewModel(void *a1)
{
  outlined init with take of SiriLinkViewModel(v1, __dst);
  return SiriLinkViewModel.encode(to:)(a1);
}

uint64_t outlined copy of SiriLinkViewModel(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result = a10;
  switch(a11)
  {
    case 0:
      outlined copy of Data._Representation(a1, a2);
      goto LABEL_4;
    case 1:
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRetain();
      goto LABEL_5;
    case 5:
LABEL_5:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for SiriLinkViewModel(uint64_t a1)
{
  return outlined consume of SiriLinkViewModel(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
}

uint64_t initializeWithCopy for SiriLinkViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  char v14 = *(unsigned char *)(a2 + 80);
  outlined copy of SiriLinkViewModel(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for SiriLinkViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  char v25 = *(unsigned char *)(a2 + 80);
  outlined copy of SiriLinkViewModel(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(unsigned char *)(a1 + 80) = v25;
  outlined consume of SiriLinkViewModel(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

void *__swift_memcpy81_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x51uLL);
}

uint64_t assignWithTake for SiriLinkViewModel(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 80);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = v3;
  outlined consume of SiriLinkViewModel(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriLinkViewModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFB && *(unsigned char *)(a1 + 81))
    {
      int v2 = *(_DWORD *)a1 + 250;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
      if (v3 <= 5) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriLinkViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SiriLinkViewModel(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t destructiveInjectEnumTag for SiriLinkViewModel(uint64_t result, char a2)
{
  *(unsigned char *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SiriLinkViewModel()
{
  return &type metadata for SiriLinkViewModel;
}

uint64_t getEnumTagSinglePayload for SiriLinkViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SiriLinkViewModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x6A64CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SiriLinkViewModel.CodingKeys()
{
  return &unk_289660;
}

void *type metadata accessor for SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  return &unk_2896F0;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutFirstRunCodingKeys()
{
  return &unk_289780;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys()
{
  return &unk_289810;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys()
{
  return &unk_2898A0;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys()
{
  return &unk_289930;
}

unsigned char *storeEnumTagSinglePayload for SiriLinkViewModel.ArchivedViewModelCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x6A778);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for SiriLinkViewModel.PromptHeaderCodingKeys()
{
  return &unk_2899C0;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_10()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_5_8()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  return v0;
}

void OUTLINED_FUNCTION_7_12()
{
  *(void *)(v1 - 368) = v0;
}

uint64_t OUTLINED_FUNCTION_8_7()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_9_9()
{
  return v0;
}

void *OUTLINED_FUNCTION_12_9(void *a1)
{
  return memcpy(a1, (const void *)(v1 + 344), 0x50uLL);
}

uint64_t OUTLINED_FUNCTION_13_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_8()
{
  return v0;
}

Swift::String_optional __swiftcall SiriWorkflowRunnerInput.getShortcutName()()
{
  outlined init with take of SiriWorkflowRunnerInput(v0, (uint64_t)&v9);
  uint64_t v1 = v9;
  outlined init with take of SiriWorkflowRunnerInput(v0, (uint64_t)v12);
  if (v13)
  {
    outlined init with take of SiriWorkflowRunnerInput(v0, (uint64_t)v10);
    if (v11 == 3)
    {
      int v3 = (void *)v10[0];
      uint64_t v2 = v10[1];
      unsigned int v4 = (void *)v10[2];
      swift_bridgeObjectRetain();
      id v5 = v1;
    }
    else
    {
      uint64_t v2 = 0;
      unsigned int v4 = 0;
    }
  }
  else
  {
    uint64_t v2 = v12[0];
    unsigned int v4 = (void *)v12[1];
    swift_bridgeObjectRetain();
  }
  uint64_t v6 = v2;
  BOOL v7 = v4;
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

id protocol witness for SiriRunnerClient.delegate.getter in conformance WFSiriWorkflowRunnerClient()
{
  return @nonobjc WFSiriWorkflowRunnerClient.delegate.getter();
}

id @nonobjc WFSiriWorkflowRunnerClient.delegate.getter()
{
  id v1 = [v0 delegate];

  return v1;
}

uint64_t protocol witness for SiriRunnerClient.delegate.setter in conformance WFSiriWorkflowRunnerClient(uint64_t a1)
{
  return @nonobjc WFSiriWorkflowRunnerClient.delegate.setter(a1);
}

uint64_t @nonobjc WFSiriWorkflowRunnerClient.delegate.setter(uint64_t a1)
{
  [v1 setDelegate:a1];

  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for SiriRunnerClient.delegate.modify in conformance WFSiriWorkflowRunnerClient(void *a1))(uint64_t a1)
{
  int v3 = *v1;
  a1[1] = *v1;
  *a1 = [v3 delegate];
  return protocol witness for SiriRunnerClient.delegate.modify in conformance WFSiriWorkflowRunnerClient;
}

uint64_t protocol witness for SiriRunnerClient.delegate.modify in conformance WFSiriWorkflowRunnerClient(uint64_t a1)
{
  [*(id *)(a1 + 8) setDelegate:*(void *)a1];

  return swift_unknownObjectRelease();
}

id protocol witness for SiriRunnerClient.siriExecutionMetrics.getter in conformance WFSiriWorkflowRunnerClient()
{
  return @nonobjc WFSiriWorkflowRunnerClient.siriExecutionMetrics.getter();
}

id @nonobjc WFSiriWorkflowRunnerClient.siriExecutionMetrics.getter()
{
  id v1 = [v0 siriExecutionMetrics];

  return v1;
}

void protocol witness for SiriRunnerClient.siriExecutionMetrics.setter in conformance WFSiriWorkflowRunnerClient(void *a1)
{
}

void @nonobjc WFSiriWorkflowRunnerClient.siriExecutionMetrics.setter(void *a1)
{
  [v1 setSiriExecutionMetrics:a1];
}

void (*protocol witness for SiriRunnerClient.siriExecutionMetrics.modify in conformance WFSiriWorkflowRunnerClient(void *a1))(id *a1)
{
  int v3 = *v1;
  a1[1] = *v1;
  *a1 = [v3 siriExecutionMetrics];
  return protocol witness for SiriRunnerClient.siriExecutionMetrics.modify in conformance WFSiriWorkflowRunnerClient;
}

void protocol witness for SiriRunnerClient.siriExecutionMetrics.modify in conformance WFSiriWorkflowRunnerClient(id *a1)
{
  id v1 = *a1;
  objc_msgSend(a1[1], "setSiriExecutionMetrics:");
}

id protocol witness for SiriRunnerClient.stop() in conformance WFSiriWorkflowRunnerClient()
{
  return @nonobjc WFWorkflowRunnerClient.stop()();
}

id @nonobjc WFWorkflowRunnerClient.stop()()
{
  return [v0 stop];
}

id protocol witness for SiriRunnerClient.start() in conformance WFSiriWorkflowRunnerClient()
{
  return @nonobjc WFWorkflowRunnerClient.start()();
}

id @nonobjc WFWorkflowRunnerClient.start()()
{
  return [v0 start];
}

id protocol witness for SiriRunnerClient.pauseRunningShortcut() in conformance WFSiriWorkflowRunnerClient()
{
  return @nonobjc WFSiriWorkflowRunnerClient.pauseRunningShortcut()();
}

id @nonobjc WFSiriWorkflowRunnerClient.pauseRunningShortcut()()
{
  id v1 = [v0 pauseRunningShortcut];

  return v1;
}

id SiriWorkflowRunnerInput.toWFSiriWorkflowRunnerClient(deviceState:aceServiceInvoker:dialogState:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  outlined init with take of SiriWorkflowRunnerInput(v4, (uint64_t)v89);
  outlined init with take of SiriWorkflowRunnerInput(v4, (uint64_t)&v90);
  switch(v98)
  {
    case 1:
      unint64_t v15 = v91;
      uint64_t v80 = (uint64_t)v90;
      uint64_t v16 = v92;
      unint64_t v17 = v93;
      uint64_t v18 = v94;
      uint64_t v19 = v95;
      uint64_t v21 = (uint64_t)v96;
      uint64_t v20 = (uint64_t)v97;
      uint64_t v22 = one-time initialization token for voiceCommands;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v82 = v18;
      id v81 = v19;
      swift_bridgeObjectRetain();
      if (v22 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      uint64_t v84 = v21;
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v79 = v16;
        uint64_t v26 = swift_slowAlloc();
        v87[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v15, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v26 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v17, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v24, v25, "#SiriWorkflowRunner creating async stream for app shortcut with actionIdentifier: %s and bundleId: %s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      id v55 = objc_allocWithZone((Class)LNFullyQualifiedActionIdentifier);
      id v56 = @nonobjc LNFullyQualifiedActionIdentifier.init(actionIdentifier:bundleIdentifier:)();
      swift_bridgeObjectRetain_n();
      __n128 v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)OUTLINED_FUNCTION_25_2();
        uint64_t v60 = swift_slowAlloc();
        v87[1] = v20;
        uint64_t v88 = v60;
        *(_DWORD *)uint64_t v59 = 136315138;
        uint64_t v61 = v84;
        v87[0] = v84;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v62 = String.init<A>(describing:)();
        v87[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v57, v58, "#SiriWorkflowRunner runAppShortcut with phrase: %s", v59, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v61 = v84;
      }
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      uint64_t v77 = DeviceState.asWFSiriRunSource()();
      id v78 = objc_allocWithZone((Class)WFSiriWorkflowRunnerClient);
      uint64_t v69 = v56;
      uint64_t v70 = v61;
      uint64_t v71 = v20;
      uint64_t v72 = v77;
      uint64_t v74 = v81;
      long long v73 = v82;
      goto LABEL_29;
    case 2:
      unint64_t v27 = v91;
      uint64_t v85 = (uint64_t)v90;
      uint64_t v28 = v96;
      uint64_t v29 = v97;
      uint64_t v30 = one-time initialization token for voiceCommands;
      swift_bridgeObjectRetain();
      id v31 = v28;
      id v32 = v29;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      id v34 = v32;
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      uint64_t v37 = (SEL *)&unk_2A1000;
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v38 = swift_slowAlloc();
        uint64_t v83 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 136315394;
        v87[0] = v83;
        id v39 = [v34 identifier];
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v41 = v31;
        unint64_t v43 = v42;

        uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v43, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        id v31 = v41;
        swift_bridgeObjectRelease();
        *(_WORD *)(v38 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v27, v87);
        uint64_t v37 = (SEL *)&unk_2A1000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v35, v36, "#WorkflowRunnerFlow initialized with app shortcut (generalized) action: %s, bundleId: %s", (uint8_t *)v38, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v64 = [v34 v37[376]];
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v66 = objc_allocWithZone((Class)LNFullyQualifiedActionIdentifier);
      @nonobjc LNFullyQualifiedActionIdentifier.init(actionIdentifier:bundleIdentifier:)();
      uint64_t v67 = OUTLINED_FUNCTION_1_13();
      id v68 = objc_allocWithZone((Class)WFSiriWorkflowRunnerClient);
      uint64_t v69 = (void *)v65;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      uint64_t v72 = v67;
      long long v73 = v34;
      uint64_t v74 = v31;
LABEL_29:
      id result = @nonobjc WFSiriWorkflowRunnerClient.init(autoShortcutIdentifier:phrase:runSource:action:metadata:)(v69, v70, v71, v72, v73, v74);
      break;
    case 3:
      uint64_t v44 = one-time initialization token for voiceCommands;
      id v45 = v90;
      if (v44 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.voiceCommands);
      long long v47 = v45;
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        long long v50 = (uint8_t *)OUTLINED_FUNCTION_25_2();
        uint64_t v86 = (void *)swift_slowAlloc();
        *(_DWORD *)long long v50 = 138412290;
        v87[0] = (uint64_t)v47;
        uint64_t v51 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v86 = v47;

        _os_log_impl(&dword_0, v48, v49, "#SiriWorkflowRunner creating async stream for pausedShortcut: %@", v50, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        uint64_t v48 = v47;
      }

      __swift_project_boxed_opaque_existential_1(a2, a2[3]);
      id v75 = AceServiceInvokerAsync.toWFSiriWorkflowRunnerClientOption(deviceState:)(a1);
      type metadata accessor for WFSiriWorkflowRunnerClient();
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      uint64_t v76 = DeviceState.asWFSiriRunSource()();
      id result = WFSiriWorkflowRunnerClient.__allocating_init(pausedShortcutData:runSource:options:)(v47, v76, v75);
      break;
    default:
      uint64_t v8 = (uint64_t)v90;
      unint64_t v9 = v91;
      uint64_t v10 = *(void (**)(uint64_t, unint64_t))(*(void *)a3 + 216);
      swift_bridgeObjectRetain();
      v10(v8, v9);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        char v14 = (uint8_t *)OUTLINED_FUNCTION_25_2();
        v87[0] = swift_slowAlloc();
        *(_DWORD *)char v14 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined release of SiriWorkflowRunnerInput(v4);
        outlined release of SiriWorkflowRunnerInput(v4);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v12, v13, "#SiriWorkflowRunner creating async stream for shortcut: %s", v14, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        outlined release of SiriWorkflowRunnerInput(v4);
        outlined release of SiriWorkflowRunnerInput(v4);
      }

      __swift_project_boxed_opaque_existential_1(a2, a2[3]);
      AceServiceInvokerAsync.toWFSiriWorkflowRunnerClientOption(deviceState:)(a1);
      uint64_t v52 = OUTLINED_FUNCTION_1_13();
      id v53 = objc_allocWithZone((Class)WFSiriWorkflowRunnerClient);
      id result = @nonobjc WFSiriWorkflowRunnerClient.init(workflowName:runSource:options:)(v8, v9, v52, a2);
      break;
  }
  return result;
}

id AceServiceInvokerAsync.toWFSiriWorkflowRunnerClientOption(deviceState:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if ((dispatch thunk of DeviceState.isHomePod.getter() & 1) == 0) {
    goto LABEL_10;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#SiriWorkflowRunner the request is happening on homepod", v4, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_3_11();
  __swift_project_boxed_opaque_existential_1(v30, v31);
  uint64_t v5 = dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()();
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
LABEL_10:
    uint64_t v11 = _swiftEmptyArrayStorage;
    goto LABEL_15;
  }
  unint64_t v7 = v6;
  uint64_t v29 = v5;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v7, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v8, v9, "#SiriWorkflowRunner got airplayRouteId: %s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v11 = v12;
  unint64_t v13 = v12[2];
  if (v13 >= v12[3] >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v11 = v28;
  }
  v11[2] = v13 + 1;
  char v14 = &v11[2 * v13];
  v14[4] = v29;
  v14[5] = v7;
LABEL_15:
  OUTLINED_FUNCTION_3_11();
  __swift_project_boxed_opaque_existential_1(v30, v31);
  uint64_t v15 = dispatch thunk of PeerInfoProviding.getIdsIdentifier()();
  uint64_t v17 = v16;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  uint64_t v18 = dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()();
  uint64_t v20 = v19;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  uint64_t v21 = dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()();
  uint64_t v23 = v22;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  char v24 = dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()();
  id v25 = objc_allocWithZone((Class)WFSiriWorkflowRunnerClientOptions);
  id v26 = @nonobjc WFSiriWorkflowRunnerClientOptions.init(airPlayRouteIDs:executionContext:originatingDeviceIDSIdentifier:originatingDeviceRapportEffectiveIdentifier:originatingDeviceRapportMediaSystemIdentifier:isOwnedByCurrentUser:)((uint64_t)v11, 2, v15, v17, v18, v20, v21, v23, v24 & 1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
  return v26;
}

id WFSiriWorkflowRunnerClient.__allocating_init(pausedShortcutData:runSource:options:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPausedShortcutData:a1 runSource:a2 options:a3];

  return v5;
}

Swift::Bool __swiftcall SiriRunnerClient.isLastStep()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(uint64_t (**)(void))(v1 + 32);
  id v5 = (void *)v4();
  id v6 = [v5 shortcutActionCount];

  unint64_t v7 = (void *)((uint64_t (*)(uint64_t, uint64_t))v4)(v3, v2);
  id v8 = [v7 currentShortcutStep];

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    OUTLINED_FUNCTION_4_7();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
    OUTLINED_FUNCTION_4_7();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v10, v11, "#SiriWorkflowRunner totalStepCount: %s, currentStepCount: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }

  return v6 == v8;
}

unint64_t type metadata accessor for WFSiriWorkflowRunnerClient()
{
  unint64_t result = lazy cache variable for type metadata for WFSiriWorkflowRunnerClient;
  if (!lazy cache variable for type metadata for WFSiriWorkflowRunnerClient)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for WFSiriWorkflowRunnerClient);
  }
  return result;
}

id @nonobjc WFSiriWorkflowRunnerClient.init(workflowName:runSource:options:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v4 initWithWorkflowName:v7 runSource:a3 options:a4];

  return v8;
}

id @nonobjc LNFullyQualifiedActionIdentifier.init(actionIdentifier:bundleIdentifier:)()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 initWithActionIdentifier:v1 bundleIdentifier:v2];

  return v3;
}

id @nonobjc WFSiriWorkflowRunnerClient.init(autoShortcutIdentifier:phrase:runSource:action:metadata:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  NSString v7 = v6;
  if (a3)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  id v13 = [v7 initWithAutoShortcutIdentifier:a1 phrase:v12 runSource:a4 action:a5 metadata:a6];

  return v13;
}

id @nonobjc WFSiriWorkflowRunnerClientOptions.init(airPlayRouteIDs:executionContext:originatingDeviceIDSIdentifier:originatingDeviceRapportEffectiveIdentifier:originatingDeviceRapportMediaSystemIdentifier:isOwnedByCurrentUser:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1)
  {
    v14.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v15 = 0;
    if (a6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  v14.super.Class isa = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a6)
  {
LABEL_4:
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  NSString v16 = 0;
LABEL_8:
  if (a8)
  {
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v17 = 0;
  }
  id v18 = [v9 initWithAirPlayRouteIDs:v14.super.isa executionContext:a2 originatingDeviceIDSIdentifier:v15 originatingDeviceRapportEffectiveIdentifier:v16 originatingDeviceRapportMediaSystemIdentifier:v17 isOwnedByCurrentUser:a9 & 1];

  return v18;
}

uint64_t outlined release of SiriWorkflowRunnerInput(uint64_t a1)
{
  return a1;
}

void *destroy for SiriWorkflowRunnerInput(uint64_t a1)
{
  return outlined consume of SiriWorkflowRunnerInput(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56), *(unsigned char *)(a1 + 64));
}

uint64_t initializeWithCopy for SiriWorkflowRunnerInput(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  NSString v7 = *(void **)(a2 + 32);
  id v8 = *(void **)(a2 + 40);
  uint64_t v9 = *(void **)(a2 + 48);
  uint64_t v10 = *(void **)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  outlined copy of SiriWorkflowRunnerInput(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for SiriWorkflowRunnerInput(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  NSString v7 = *(void **)(a2 + 32);
  id v8 = *(void **)(a2 + 40);
  uint64_t v9 = *(void **)(a2 + 48);
  uint64_t v10 = *(void **)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  outlined copy of SiriWorkflowRunnerInput(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  NSString v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  NSString v16 = *(void **)(a1 + 32);
  NSString v17 = *(void **)(a1 + 40);
  id v18 = *(void **)(a1 + 48);
  uint64_t v19 = *(void **)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  outlined consume of SiriWorkflowRunnerInput(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

void *__swift_memcpy65_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t assignWithTake for SiriWorkflowRunnerInput(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void **)(a1 + 48);
  char v11 = *(void **)(a1 + 56);
  char v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  outlined consume of SiriWorkflowRunnerInput(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriWorkflowRunnerInput(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 65))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriWorkflowRunnerInput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SiriWorkflowRunnerInput(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t destructiveInjectEnumTag for SiriWorkflowRunnerInput(uint64_t result, char a2)
{
  *(unsigned char *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SiriWorkflowRunnerInput()
{
  return &type metadata for SiriWorkflowRunnerInput;
}

uint64_t OUTLINED_FUNCTION_1_13()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return DeviceState.asWFSiriRunSource()();
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  return dispatch thunk of AceServiceInvokerAsync.peerInfo()();
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13)
{
  type metadata accessor for App();
  swift_bridgeObjectRetain();
  outlined copy of Data?(a11, a12);
  App.__allocating_init(appIdentifier:)();
  uint64_t v17 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(a13, 2);
  uint64_t v19 = v18;
  swift_release();
  outlined consume of Data?(a11, a12);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a13);
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = v17;
  *(void *)(a9 + 24) = v19;
  *(void *)(a9 + 32) = a3;
  *(void *)(a9 + 40) = a4;
  *(void *)(a9 + 48) = a5;
  *(void *)(a9 + 56) = a6;
  *(unsigned char *)(a9 + 64) = a7;
  *(void *)(a9 + 72) = a8;
  *(void *)(a9 + 80) = a10;
  *(void *)(a9 + 88) = a11;
  *(void *)(a9 + 96) = a12;
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t ActionConfirmationVisual.response.getter()
{
  OUTLINED_FUNCTION_9_0();
  v1[94] = v0;
  v1[93] = v2;
  uint64_t v3 = type metadata accessor for BinaryButton();
  v1[95] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[96] = v4;
  v1[97] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for Button.LabelStyle();
  v1[98] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[99] = v6;
  v1[100] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for _ProtoButton.FormAction();
  v1[101] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[102] = v8;
  v1[103] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for ButtonRole();
  v1[104] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[105] = v10;
  v1[106] = OUTLINED_FUNCTION_13_0();
  v1[107] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Button();
  v1[108] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[109] = v12;
  v1[110] = OUTLINED_FUNCTION_13_0();
  v1[111] = swift_task_alloc();
  v1[112] = swift_task_alloc();
  v1[113] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Command();
  v1[114] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v1[115] = v14;
  v1[116] = OUTLINED_FUNCTION_13_0();
  v1[117] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for SeparatorStyle();
  v1[118] = v15;
  OUTLINED_FUNCTION_1_0(v15);
  v1[119] = v16;
  v1[120] = OUTLINED_FUNCTION_13_0();
  v1[121] = swift_task_alloc();
  type metadata accessor for Separators();
  v1[122] = OUTLINED_FUNCTION_25();
  uint64_t v17 = type metadata accessor for ComponentWrapper();
  v1[123] = v17;
  OUTLINED_FUNCTION_1_0(v17);
  v1[124] = v18;
  v1[125] = OUTLINED_FUNCTION_13_0();
  v1[126] = swift_task_alloc();
  v1[127] = swift_task_alloc();
  v1[128] = swift_task_alloc();
  uint64_t v19 = type metadata accessor for CustomCanvas();
  v1[129] = v19;
  OUTLINED_FUNCTION_1_0(v19);
  v1[130] = v20;
  v1[131] = OUTLINED_FUNCTION_13_0();
  v1[132] = swift_task_alloc();
  v1[133] = swift_task_alloc();
  return _swift_task_switch(ActionConfirmationVisual.response.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  void (*v14)(uint64_t, void, uint64_t);
  void (*v15)(uint64_t, uint64_t, uint64_t);
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 *inited;
  uint64_t v48;
  uint64_t *v49;
  __n128 v50;
  unsigned int *v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t);
  __n128 *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t *v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  void *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  void (*v84)(uint64_t, uint64_t);
  uint64_t (*v85)(void);
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void (*v93)(uint64_t *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t *, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  void *v131;
  uint64_t v132;

  NSString v1 = *(void *)(v0 + 752);
  uint64_t v2 = *(void *)(v1 + 80);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 72);
    uint64_t v4 = one-time initialization token for encoder;
    swift_bridgeObjectRetain();
    if (v4 != -1) {
      swift_once();
    }
    *(void *)(v0 + 224) = v3;
    *(void *)(v0 + 232) = v2;
    *(_OWORD *)(v0 + 240) = 0u;
    *(_OWORD *)(v0 + 256) = 0u;
    *(_OWORD *)(v0 + 272) = 0u;
    *(_OWORD *)(v0 + 288) = 0u;
    *(unsigned char *)(v0 + 304) = 5;
    lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
    dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    uint64_t v6 = *(void *)(v0 + 1064);
    uint64_t v7 = *(void *)(v0 + 1040);
    uint64_t v8 = *(void *)(v0 + 1032);
    uint64_t v125 = (uint64_t *)(v0 + 520);
    v128 = *(void *)(v0 + 1016);
    uint64_t v9 = *(void *)(v0 + 992);
    uint64_t v118 = *(void *)(v0 + 1024);
    uint64_t v123 = *(void *)(v0 + 984);
    uint64_t v113 = *(void *)(v0 + 968);
    uint64_t v10 = *(void *)(v0 + 960);
    uint64_t v11 = *(void *)(v0 + 952);
    uint64_t v12 = *(void *)(v0 + 944);
    OUTLINED_FUNCTION_8_8();
    *(void *)(v0 + 464) = v8;
    *(void *)(v0 + 472) = &protocol witness table for CustomCanvas;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 440));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v6, v8);
    uint64_t v14 = *(void (**)(uint64_t, void, uint64_t))(v11 + 104);
    v14(v113, enum case for SeparatorStyle.edgeToEdge(_:), v12);
    v14(v10, enum case for SeparatorStyle.standard(_:), v12);
    Separators.init(top:bottom:)();
    ComponentWrapper.init(_:separators:)();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v15(v128, v118, v123);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v17 = v16[2];
    uint64_t v129 = v16;
    if (v17 >= v16[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v129 = v89;
    }
    uint64_t v18 = *(void *)(v0 + 1040);
    uint64_t v116 = *(void *)(v0 + 1032);
    uint64_t v119 = *(void *)(v0 + 1064);
    uint64_t v114 = *(void *)(v0 + 1024);
    uint64_t v19 = *(void *)(v0 + 1016);
    uint64_t v20 = *(void *)(v0 + 992);
    uint64_t v21 = *(void *)(v0 + 984);
    *(void *)(v0 + 544) = v21;
    *(void *)(v0 + 552) = &protocol witness table for ComponentWrapper;
    uint64_t v22 = __swift_allocate_boxed_opaque_existential_1(v125);
    v15((uint64_t)v22, v19, v21);
    uint64_t v5 = v129;
    v129[2] = v17 + 1;
    outlined init with take of AceServiceInvokerAsync((long long *)v125, (uint64_t)&v129[5 * v17 + 4]);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v23(v19, v21);
    swift_bridgeObjectRelease();
    v23(v114, v21);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v119, v116);
    NSString v1 = *(void *)(v0 + 752);
  }
  else
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  outlined init with take of Data?(v1 + 88, v0 + 680);
  outlined init with take of Data?(v0 + 680, v0 + 728);
  if (*(void *)(v0 + 736) >> 60 == 15)
  {
    uint64_t v130 = v5;
  }
  else
  {
    uint64_t v126 = *(void *)(v0 + 736);
    char v24 = *(uint64_t **)(v0 + 752);
    id v25 = *(void *)(v0 + 728);
    unint64_t v27 = *v24;
    id v26 = v24[1];
    uint64_t v28 = v24[2];
    uint64_t v29 = v24[3];
    outlined retain of Data?(v0 + 680);
    outlined retain of Data?(v0 + 680);
    uint64_t v30 = one-time initialization token for encoder;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30 != -1) {
      swift_once();
    }
    *(void *)(v0 + 312) = v25;
    *(void *)(v0 + 320) = v126;
    *(void *)(v0 + 328) = v27;
    *(void *)(v0 + 336) = v26;
    *(void *)(v0 + 344) = v28;
    *(void *)(v0 + 352) = v29;
    lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
    *(_OWORD *)(v0 + 360) = 0u;
    *(_OWORD *)(v0 + 376) = 0u;
    *(unsigned char *)(v0 + 392) = 0;
    dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    uint64_t v31 = *(void *)(v0 + 1056);
    id v32 = *(void *)(v0 + 1048);
    uint64_t v33 = *(void *)(v0 + 1040);
    id v34 = v5;
    uint64_t v35 = *(void *)(v0 + 1032);
    OUTLINED_FUNCTION_8_8();
    uint64_t v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    v120(v32, v31, v35);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_5_9();
      id v34 = v90;
    }
    os_log_type_t v36 = v34[2];
    if (v36 >= v34[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v130 = v91;
    }
    else
    {
      uint64_t v130 = v34;
    }
    uint64_t v117 = *(void *)(v0 + 1056);
    uint64_t v37 = *(void *)(v0 + 1048);
    uint64_t v38 = *(void *)(v0 + 1040);
    id v39 = *(void *)(v0 + 1032);
    *(void *)(v0 + 664) = v39;
    *(void *)(v0 + 672) = &protocol witness table for CustomCanvas;
    uint64_t v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 640));
    v120((uint64_t)v40, v37, v39);
    v130[2] = v36 + 1;
    outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 640), (uint64_t)&v130[5 * v36 + 4]);
    id v41 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v41(v37, v39);
    outlined consume of Data._Representation(v25, v126);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of Data?(v0 + 680);
    v41(v117, v39);
  }
  uint64_t v110 = *(void *)(v0 + 1008);
  v112 = *(void *)(v0 + 1000);
  uint64_t v127 = *(void *)(v0 + 992);
  uint64_t v111 = *(void *)(v0 + 984);
  unint64_t v42 = *(void *)(v0 + 936);
  uint64_t v96 = *(void *)(v0 + 928);
  unint64_t v43 = *(void *)(v0 + 920);
  uint64_t v44 = *(void *)(v0 + 912);
  uint64_t v115 = *(void *)(v0 + 904);
  char v106 = *(void *)(v0 + 888);
  uint64_t v107 = *(void *)(v0 + 880);
  uint64_t v100 = *(void *)(v0 + 896);
  uint64_t v102 = *(void *)(v0 + 872);
  uint64_t v105 = *(void *)(v0 + 864);
  uint64_t v92 = *(void *)(v0 + 856);
  uint64_t v121 = *(void *)(v0 + 840);
  id v45 = *(void *)(v0 + 832);
  uint64_t v104 = *(void *)(v0 + 776);
  char v108 = *(void *)(v0 + 760);
  char v109 = *(void *)(v0 + 768);
  uint64_t v46 = *(void *)(v0 + 752);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_2_12(inited, (__n128)xmmword_212160);
  *(void *)(v0 + 712) = v48;
  *(void *)(v0 + 720) = 0xEC0000006E6F6974;
  AnyHashable.init<A>(_:)();
  inited[6].n128_u64[0] = (unint64_t)&type metadata for String;
  inited[4].n128_u64[1] = 7562617;
  inited[5].n128_u64[0] = 0xE300000000000000;
  Dictionary.init(dictionaryLiteral:)();
  static Command.directInvocation(identifier:payload:isNavigation:)();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 424) = v44;
  *(void *)(v0 + 432) = &protocol witness table for Command;
  os_log_type_t v49 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 400));
  unint64_t v93 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v43 + 16);
  v93(v49, v42, v44);
  v50.n128_f64[0] = OUTLINED_FUNCTION_10_12(*(void *)(v46 + 32));
  uint64_t v51 = (unsigned int *)&enum case for ButtonRole.preferred(_:);
  if (*(unsigned char *)(v46 + 64)) {
    uint64_t v51 = (unsigned int *)&enum case for ButtonRole.preferredAndDestructive(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t, __n128))(v121 + 104))(v92, *v51, v45, v50);
  OUTLINED_FUNCTION_3_12();
  v53(v52);
  OUTLINED_FUNCTION_3_12();
  v55(v54);
  swift_bridgeObjectRetain();
  Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)();
  id v56 = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_2_12(v56, (__n128)xmmword_212160);
  *(void *)(v0 + 696) = v57;
  *(void *)(v0 + 704) = 0xEC0000006E6F6974;
  AnyHashable.init<A>(_:)();
  v56[6].n128_u64[0] = (unint64_t)&type metadata for String;
  v56[4].n128_u64[1] = 28526;
  v56[5].n128_u64[0] = 0xE200000000000000;
  Dictionary.init(dictionaryLiteral:)();
  static Command.directInvocation(identifier:payload:isNavigation:)();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 504) = v44;
  *(void *)(v0 + 512) = &protocol witness table for Command;
  os_log_type_t v58 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 480));
  v93(v58, v96, v44);
  OUTLINED_FUNCTION_10_12(*(void *)(v46 + 48));
  OUTLINED_FUNCTION_3_12();
  v61(v59, v60);
  OUTLINED_FUNCTION_3_12();
  v64(v62, v63);
  OUTLINED_FUNCTION_3_12();
  v67(v65, v66);
  swift_bridgeObjectRetain();
  Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)();
  id v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16);
  v68(v106, v115, v105);
  v68(v107, v100, v105);
  BinaryButton.init(primaryButton:secondaryButton:componentName:linkIdentifier:)();
  *(void *)(v0 + 584) = v108;
  *(void *)(v0 + 592) = &protocol witness table for BinaryButton;
  uint64_t v69 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 560));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v109 + 16))(v69, v104, v108);
  static Separators.none.getter();
  ComponentWrapper.init(_:separators:)();
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16);
  v70(v112, v110, v111);
  uint64_t v71 = v130;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_5_9();
    uint64_t v71 = v87;
  }
  uint64_t v72 = v71[2];
  uint64_t v103 = (void (*)(uint64_t *, uint64_t, uint64_t))v70;
  if (v72 >= v71[3] >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    char v131 = v88;
  }
  else
  {
    char v131 = v71;
  }
  long long v73 = *(void *)(v0 + 1000);
  uint64_t v74 = *(void *)(v0 + 992);
  id v75 = *(void *)(v0 + 984);
  uint64_t v76 = *(void *)(v0 + 920);
  id v97 = *(void *)(v0 + 912);
  char v98 = *(void *)(v0 + 928);
  uint64_t v99 = *(void *)(v0 + 904);
  long long v101 = *(void *)(v0 + 936);
  uint64_t v122 = *(void *)(v0 + 896);
  uint64_t v77 = *(void *)(v0 + 872);
  uint64_t v95 = *(void *)(v0 + 864);
  uint64_t v124 = *(void *)(v0 + 776);
  id v78 = *(void *)(v0 + 768);
  uint64_t v94 = *(void *)(v0 + 760);
  *(void *)(v0 + 632) = &protocol witness table for ComponentWrapper;
  *(void *)(v0 + 624) = v75;
  uint64_t v79 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 600));
  v103(v79, v73, v75);
  long long v131[2] = v72 + 1;
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 600), (uint64_t)&v131[5 * v72 + 4]);
  uint64_t v80 = *(void (**)(uint64_t))(v74 + 8);
  id v81 = OUTLINED_FUNCTION_11_11();
  v80(v81);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)();
  id v82 = OUTLINED_FUNCTION_11_11();
  v80(v82);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v124, v94);
  uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
  v83(v122, v95);
  uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
  v84(v98, v97);
  v83(v99, v95);
  v84(v101, v97);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v85();
}

uint64_t ActionConfirmationVisual.data.getter()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for Response();
  v0[2] = v1;
  OUTLINED_FUNCTION_1_0(v1);
  v0[3] = v2;
  v0[4] = OUTLINED_FUNCTION_25();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = ActionConfirmationVisual.data.getter;
  return ActionConfirmationVisual.response.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ActionConfirmationVisual.data.getter;
  }
  else {
    uint64_t v2 = ActionConfirmationVisual.data.getter;
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = *(void *)(v0 + 48);
  lazy protocol witness table accessor for type Response and conformance Response();
  uint64_t v2 = ProtobufBuilder.serializedData()();
  uint64_t v4 = v3;
  if (v1)
  {
    uint64_t v5 = OUTLINED_FUNCTION_8_1();
    v6(v5);
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v7();
  }
  else
  {
    uint64_t v9 = v2;
    uint64_t v10 = OUTLINED_FUNCTION_8_1();
    v11(v10);
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v12(v9, v4);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(uint64_t a1, char a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[3] = &type metadata for AppInfoResolver;
  v11[4] = &protocol witness table for AppInfoResolver;
  App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(a1, v11, a2, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for AppDisplayInfo();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    outlined destroy of AppDisplayInfo?((uint64_t)v6);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = AppDisplayInfo.displayName.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  return v8;
}

uint64_t outlined init with take of Data?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Data?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Data?(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ActionConfirmationVisual(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 96);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    return outlined consume of Data._Representation(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for ActionConfirmationVisual(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = (uint64_t *)(a2 + 88);
  unint64_t v9 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    outlined copy of Data._Representation(*v8, v9);
    *(void *)(a1 + 88) = v10;
    *(void *)(a1 + 96) = v9;
  }
  return a1;
}

uint64_t assignWithCopy for ActionConfirmationVisual(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 88);
  unint64_t v5 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      uint64_t v8 = *(void *)(a1 + 88);
      unint64_t v9 = *(void *)(a1 + 96);
      *(void *)(a1 + 88) = v7;
      *(void *)(a1 + 96) = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data(a1 + 88);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 96) = v5;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy104_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for ActionConfirmationVisual(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  unint64_t v9 = (void *)(a2 + 88);
  unint64_t v10 = *(void *)(a1 + 96);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 96);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = *v9;
      *(void *)(a1 + 96) = v11;
      outlined consume of Data._Representation(v12, v10);
      return a1;
    }
    outlined destroy of Data(a1 + 88);
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionConfirmationVisual(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionConfirmationVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionConfirmationVisual()
{
  return &type metadata for ActionConfirmationVisual;
}

uint64_t outlined destroy of AppDisplayInfo?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 *OUTLINED_FUNCTION_2_12(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

void OUTLINED_FUNCTION_5_9()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_8_8()
{
  return CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)();
}

double OUTLINED_FUNCTION_10_12@<D0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 168) = a1;
  *(void *)(v2 - 160) = v1;
  *(void *)(v2 - 96) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 - 128) = 0u;
  *(_OWORD *)(v2 - 112) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_11_11()
{
  return v0;
}

uint64_t WFChooseFromListFlow.exitValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 88);
  int v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 == 1)
  {
    swift_errorRetain();
  }
  else if (v2 == 2)
  {
    id v3 = v1;
  }
  else
  {
    lazy protocol witness table accessor for type WFShowAlertFlowError and conformance WFShowAlertFlowError();
    return swift_allocError();
  }
  return (uint64_t)v1;
}

unint64_t lazy protocol witness table accessor for type WFShowAlertFlowError and conformance WFShowAlertFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError;
  if (!lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError;
  if (!lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFShowAlertFlowError and conformance WFShowAlertFlowError);
  }
  return result;
}

uint64_t WFChooseFromListFlow.__allocating_init(shortcutName:request:deviceState:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  WFChooseFromListFlow.init(shortcutName:request:deviceState:)(a1, a2, a3, a4);
  return v8;
}

uint64_t WFChooseFromListFlow.init(shortcutName:request:deviceState:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v10 - 8);
  OUTLINED_FUNCTION_27_6();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a3;
  outlined init with copy of DeviceState(a4, v4 + 40);
  *(unsigned char *)(v4 + 96) = 3;
  *(void *)(v4 + 80) = _swiftEmptyArrayStorage;
  *(void *)(v4 + 88) = 0;
  uint64_t v11 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  void v12[3] = 0;
  v12[4] = v4;
  v12[5] = a3;
  id v13 = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v4;
}

uint64_t closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:), 0, 0);
}

uint64_t closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = (void *)v0[3];
  id v2 = [v1 items];
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for WFDialogListItem);
  v0[4] = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v0[5] = [v1 dataStore];
  id v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *id v3 = v0;
  v3[1] = closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:);
  uint64_t v4 = OUTLINED_FUNCTION_61();
  return WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)(v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *id v2 = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t sub_6EE10()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:)()
{
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_13(v0);
  void *v1 = v2;
  v1[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_23_1();
  return closure #1 in WFChooseFromListFlow.init(shortcutName:request:deviceState:)(v3, v4, v5, v6, v7);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5()
{
  uint64_t v3 = OUTLINED_FUNCTION_38_3();
  if (__swift_getEnumTagSinglePayload(v1, 1, v3) == 1)
  {
    outlined destroy of FlowActivity?(v1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    OUTLINED_FUNCTION_37_3();
    OUTLINED_FUNCTION_66();
    v4();
  }
  if (*(void *)(v0 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v0;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5()
{
  uint64_t v3 = OUTLINED_FUNCTION_38_3();
  if (__swift_getEnumTagSinglePayload(v1, 1, v3) == 1)
  {
    outlined destroy of FlowActivity?(v1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    OUTLINED_FUNCTION_37_3();
    OUTLINED_FUNCTION_66();
    v4();
  }
  if (*(void *)(v0 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ()?);
  return swift_task_create();
}

uint64_t WFChooseFromListFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_2();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v2);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v12 = Input.description.getter();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v14 = OUTLINED_FUNCTION_39_5();
    v15(v14);
    _os_log_impl(&dword_0, v9, v10, "#WFChooseFromListFlow received input: %s", v11, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v16 = OUTLINED_FUNCTION_39_5();
    v17(v16);
  }

  return 0;
}

uint64_t WFChooseFromListFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[18] = v2;
  v1[19] = v0;
  v1[20] = *v0;
  type metadata accessor for CATOption();
  v1[21] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v20;
  os_log_type_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  os_log_type_t v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  os_log_type_t v44;
  _WORD *v45;
  void *v46;
  os_log_type_t v47;
  _WORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v5);
    _os_log_impl(&dword_0, v3, v4, "#WFChooseFromListFlow execute", v1, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v6 = v0[19];

  uint64_t v7 = *(void **)(v6 + 32);
  if (![v7 allowsMultipleSelection])
  {
    switch(*(unsigned char *)(v0[19] + 96))
    {
      case 1:
        uint64_t v38 = (void *)Logger.logObject.getter();
        id v39 = static os_log_type_t.debug.getter();
        if (!OUTLINED_FUNCTION_5_3(v39)) {
          goto LABEL_27;
        }
        uint64_t v40 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v40);
        unint64_t v43 = "#WFChooseFromListFlow in error state";
        break;
      case 2:
        uint64_t v38 = (void *)Logger.logObject.getter();
        uint64_t v44 = static os_log_type_t.debug.getter();
        if (!OUTLINED_FUNCTION_5_3(v44)) {
          goto LABEL_27;
        }
        id v45 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v45);
        unint64_t v43 = "#WFChooseFromListFlow complete";
        break;
      case 3:
        uint64_t v46 = (void *)Logger.logObject.getter();
        long long v47 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_5_3(v47))
        {
          uint64_t v48 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_15_2(v48);
          OUTLINED_FUNCTION_23_0(&dword_0, v49, v50, "#WFChooseFromListFlow uninitialized");
          OUTLINED_FUNCTION_7_0();
        }

        static ExecuteResponse.ongoing(requireInput:)();
        goto LABEL_31;
      default:
        swift_bridgeObjectRetain();
        uint64_t v20 = (void *)Logger.logObject.getter();
        uint64_t v21 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_5_3(v21))
        {
          uint64_t v22 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_15_2(v22);
          OUTLINED_FUNCTION_23_0(&dword_0, v23, v24, "#WFChooseFromListFlow initialized, pushing PromptForDisambiguationFlow");
          OUTLINED_FUNCTION_7_0();
        }
        id v25 = v0[19];

        id v26 = (void *)OUTLINED_FUNCTION_61();
        __swift_project_boxed_opaque_existential_1(v26, v27);
        uint64_t v28 = dispatch thunk of DeviceState.isWatch.getter();
        uint64_t v29 = 0xD000000000000013;
        if (v28) {
          uint64_t v29 = 0xD000000000000019;
        }
        id v55 = v29;
        if (v28) {
          uint64_t v30 = 0x80000000002257C0;
        }
        else {
          uint64_t v30 = 0x8000000000225330;
        }
        uint64_t v31 = *(void *)(v25 + 24);
        id v53 = *(void *)(v25 + 16);
        uint64_t v54 = v30;
        type metadata accessor for WFChooseFromListFlow();
        lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow(&lazy protocol witness table cache variable for type WFChooseFromListFlow and conformance WFChooseFromListFlow, v32, (void (*)(uint64_t))type metadata accessor for WFChooseFromListFlow);
        uint64_t v33 = v7;
        swift_bridgeObjectRetain();
        id v34 = SiriEnvironmentLocating<>.siriEnvironment.getter();
        outlined init with copy of DeviceState(v25 + 40, (uint64_t)(v0 + 2));
        type metadata accessor for RunCustomIntentCATs();
        static CATOption.defaultMode.getter();
        uint64_t v35 = CATWrapper.__allocating_init(options:globals:)();
        type metadata accessor for RunCustomIntentCATsSimple();
        static CATOption.defaultMode.getter();
        os_log_type_t v36 = CATWrapperSimple.__allocating_init(options:globals:)();
        type metadata accessor for WFChooseFromListPromptFlowStrategy();
        swift_allocObject();
        WFChooseFromListPromptFlowStrategy.init(request:shortcutName:appBundleId:siriEnvironment:deviceState:runCustomCatWrapper:runCustomCatWrapperSimple:)(v33, v53, v31, v55, v54, v34, (uint64_t)(v0 + 2), v35, v36);
        swift_retain();
        static OutputPublisherFactory.makeOutputPublisherAsync()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]>);
        swift_allocObject();
        lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow(&lazy protocol witness table cache variable for type WFChooseFromListPromptFlowStrategy and conformance WFChooseFromListPromptFlowStrategy, 255, (void (*)(uint64_t))type metadata accessor for WFChooseFromListPromptFlowStrategy);
        v0[17] = PromptForDisambiguationFlowAsync.init<A>(items:strategy:outputPublisher:)();
        lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]> and conformance PromptForDisambiguationFlowAsync<A, B>();
        swift_retain();
        static ExecuteResponse.ongoing<A>(next:childCompletion:)();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_31;
    }
    OUTLINED_FUNCTION_23_0(&dword_0, v41, v42, v43);
    OUTLINED_FUNCTION_7_0();
LABEL_27:

    static ExecuteResponse.complete()();
LABEL_31:
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_23_7();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v8 = (void *)Logger.logObject.getter();
  unint64_t v9 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_3(v9))
  {
    os_log_type_t v10 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v10);
    OUTLINED_FUNCTION_23_0(&dword_0, v11, v12, "#WFChooseFromListFlow allowsMultipleSelection, exiting");
    OUTLINED_FUNCTION_7_0();
  }
  unint64_t v13 = (void *)v0[19];

  uint64_t v14 = v13 + 5;
  uint64_t v15 = (void *)v13[8];
  uint64_t v16 = v13[9];
  __swift_project_boxed_opaque_existential_1(v14, (uint64_t)v15);
  if ((dispatch thunk of DeviceState.isHomePod.getter() & 1) == 0)
  {
    uint64_t v37 = OUTLINED_FUNCTION_28_3([objc_allocWithZone((Class)WFDialogResponse) initWithResponseCode:4]);
    outlined consume of WFChooseFromListFlow.State(v15, v16);
    static ExecuteResponse.complete()();

    goto LABEL_31;
  }
  v0[22] = default argument 0 of static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:)();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static Device.current.getter();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[23] = v17;
  *uint64_t v17 = v0;
  v17[1] = WFChooseFromListFlow.execute();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_23_7();
  return static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 56;
  uint64_t v4 = v1 + 96;
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  char v1;
  id v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = OUTLINED_FUNCTION_28_3([objc_allocWithZone((Class)WFDialogResponse) initWithResponseCode:4]);
  outlined consume of WFChooseFromListFlow.State(v0, v1);
  static ExecuteResponse.complete()();

  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[23] = v1;
  v0[24] = v2;
  v0[22] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v0[25] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v0[26] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v0[27] = v5;
  v0[28] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for DialogPhase();
  v0[29] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v0[30] = v7;
  v0[31] = swift_task_alloc();
  v0[32] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v0[33] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v0[34] = v9;
  v0[35] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v0[36] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v0[37] = v11;
  v0[38] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = v0[37];
  uint64_t v1 = v0[38];
  uint64_t v3 = v0[36];
  uint64_t v4 = (uint64_t *)v0[22];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v3);
  uint64_t v5 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = *v4;
  if (v5)
  {
    uint64_t v11 = (uint64_t (*)(void))(*(void *)(v6 + 272) + **(int **)(v6 + 272));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[39] = v7;
    *uint64_t v7 = v0;
    v7[1] = static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:);
    return v11();
  }
  else
  {
    uint64_t v12 = (uint64_t (*)(uint64_t))(*(void *)(v6 + 280) + **(int **)(v6 + 280));
    uint64_t v9 = (void *)swift_task_alloc();
    v0[45] = v9;
    *uint64_t v9 = v0;
    v9[1] = static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:);
    uint64_t v10 = v0[28];
    return v12(v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 320) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 328) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = v0;
  uint64_t v14 = v0 + 17;
  uint64_t v2 = (void *)v0[41];
  uint64_t v4 = v0[31];
  uint64_t v3 = v0[32];
  uint64_t v5 = v0[30];
  uint64_t v6 = v1[29];
  static DialogPhase.completion.getter();
  uint64_t v7 = [v2 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v1[42] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_211C70;
  *(void *)(v8 + 32) = v2;
  uint64_t v15 = v8;
  specialized Array._endMutation()();
  v1[43] = v15;
  uint64_t v13 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
  uint64_t v9 = v2;
  uint64_t v10 = (void *)swift_task_alloc();
  v1[44] = v10;
  *uint64_t v10 = v1;
  v10[1] = static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:);
  uint64_t v11 = v1[35];
  return ((uint64_t (*)(void *, uint64_t, uint64_t))v13)(v14, v15, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 136), v0 + 16);
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 184), *(void *)(*(void *)(v0 + 184) + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v4;
  *uint64_t v4 = v0;
  v4[1] = static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:);
  OUTLINED_FUNCTION_23_1();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 368) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  long long *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;

  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v13 = *(void *)(v0 + 208);
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 192), *(void *)(*(void *)(v0 + 192) + 24));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  uint64_t v5 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  *(void *)(v0 + 80) = v5;
  *(void *)(v0 + 88) = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 56));
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of FlowActivity?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of FlowActivity?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v13);
  uint64_t v6 = (long long *)OUTLINED_FUNCTION_61();
  outlined init with take of AceServiceInvokerAsync(v6, v7);
  uint64_t v8 = *(void **)(v0 + 184);
  uint64_t v9 = v8[3];
  uint64_t v10 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v11;
  *uint64_t v11 = v0;
  v11[1] = static WFChooseFromListFlow.submitHandoffToCompanionDialog(templating:outputPublisher:deviceState:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 384) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_9_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v2(v1, v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.voiceCommands);
  uint64_t v1 = (void *)Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v3);
    OUTLINED_FUNCTION_42_0(&dword_0, v4, v5, "#WFChooseFromListFlow failure to submit Handoff dialog");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_9_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v7(v6, v7, v8, v9, v10, v11, v12, v13);
}

{
  uint64_t v0;
  void *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.voiceCommands);
  uint64_t v1 = (void *)Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v3);
    OUTLINED_FUNCTION_42_0(&dword_0, v4, v5, "#WFChooseFromListFlow failure to submit Handoff dialog");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_9_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v7(v6, v7, v8, v9, v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = (void *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v4);
    OUTLINED_FUNCTION_42_0(&dword_0, v5, v6, "#WFChooseFromListFlow failure to submit Handoff dialog");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_9_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v8(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t WFChooseFromListFlow.execute(completion:)()
{
  type metadata accessor for WFChooseFromListFlow();
  lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow(&lazy protocol witness table cache variable for type WFChooseFromListFlow and conformance WFChooseFromListFlow, v0, (void (*)(uint64_t))type metadata accessor for WFChooseFromListFlow);
  OUTLINED_FUNCTION_61();
  return Flow.deferToExecuteAsync(_:)();
}

void WFChooseFromListFlow.onPromptForDisambiguationFinished(exitValue:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<[WFChooseFromListDisambiguationItem]>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_27_6();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "#WFChooseFromListFlow onPromptForDisambiguationFinished", v12, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, a1, v5);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v2, v5);
  if (v13 == enum case for PromptResult.answered<A>(_:))
  {
    uint64_t v14 = OUTLINED_FUNCTION_33_4();
    v15(v14);
    id v16 = *(id *)v2;
    uint64_t v17 = *(void *)(*(void *)v2 + 16);
    if (v17 != 1)
    {
      if (v17)
      {
        os_log_type_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_28_2(v38);
          OUTLINED_FUNCTION_16_8(&dword_0, v39, v40, "#WFChooseFromListFlow received more than one items from disambiguation, reprompting");
          OUTLINED_FUNCTION_7_0();
        }

        uint64_t v21 = *(NSObject **)(v3 + 88);
        *(void *)(v3 + 88) = v16;
        char v22 = *(unsigned char *)(v3 + 96);
        *(unsigned char *)(v3 + 96) = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_32(v19))
        {
          uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_33();
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl(&dword_0, v18, (os_log_type_t)v16, "#WFChooseFromListFlow received no item from disambiguation, reprompting", v20, 2u);
          OUTLINED_FUNCTION_7_0();
        }

        OUTLINED_FUNCTION_40_2();
        OUTLINED_FUNCTION_41_4();
        uint64_t v21 = v18;
        char v22 = (char)v16;
      }
      goto LABEL_26;
    }
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    id v28 = (id)v27;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v29);
      OUTLINED_FUNCTION_16_8(&dword_0, v30, v31, "#WFChooseFromListFlow received one item from disambiguation, finishing");
      OUTLINED_FUNCTION_7_0();
    }

    if (*((void *)v16 + 2))
    {
      id v32 = (void *)*((void *)v16 + 10);
      id v33 = *((id *)v16 + 8);
      swift_bridgeObjectRetain();
      id v34 = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for NSError(0, &lazy cache variable for type metadata for WFChooseFromListDialogResponse);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_211C70;
      *(void *)(v35 + 32) = v34;
      uint64_t v45 = v35;
      specialized Array._endMutation()();
      id v16 = v34;
      id v28 = WFChooseFromListDialogResponse.__allocating_init(items:cancelled:)(v45, 0);
      if (one-time initialization token for shared == -1)
      {
LABEL_19:
        (*(void (**)(void))(*(void *)static WFDialogState.shared + 232))();

        uint64_t v21 = *(NSObject **)(v3 + 88);
        *(void *)(v3 + 88) = v28;
        char v22 = *(unsigned char *)(v3 + 96);
        *(unsigned char *)(v3 + 96) = 2;
LABEL_26:
        outlined consume of WFChooseFromListFlow.State(v21, v22);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_19;
  }
  if (v13 == enum case for PromptResult.error<A>(_:))
  {
    uint64_t v23 = OUTLINED_FUNCTION_33_4();
    v24(v23);
    swift_errorRelease();
    goto LABEL_24;
  }
  if (v13 == enum case for PromptResult.cancelled<A>(_:))
  {
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for WFChooseFromListDialogResponse);
    id v25 = WFChooseFromListDialogResponse.__allocating_init(items:cancelled:)((uint64_t)_swiftEmptyArrayStorage, 1);
LABEL_25:
    id v41 = *(NSObject **)(v1 + 88);
    *(void *)(v1 + 88) = v25;
    char v22 = *(unsigned char *)(v1 + 96);
    *(unsigned char *)(v1 + 96) = 2;
    uint64_t v21 = v41;
    goto LABEL_26;
  }
  if (v13 == enum case for PromptResult.unanswered<A>(_:))
  {
LABEL_24:
    id v25 = [objc_allocWithZone((Class)WFDialogResponse) initWithResponseCode:1];
    goto LABEL_25;
  }
  lazy protocol witness table accessor for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError();
  uint64_t v42 = swift_allocError();
  *unint64_t v43 = 0;
  uint64_t v44 = *(void **)(v1 + 88);
  *(void *)(v1 + 88) = v42;
  LOBYTE(v43) = *(unsigned char *)(v1 + 96);
  *(unsigned char *)(v1 + 96) = 1;
  outlined consume of WFChooseFromListFlow.State(v44, (char)v43);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v5);
}

id WFChooseFromListDialogResponse.__allocating_init(items:cancelled:)(uint64_t a1, char a2)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for WFDialogListItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithItems:isa cancelled:a2 & 1];

  return v5;
}

uint64_t WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:));
}

uint64_t WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)()
{
  OUTLINED_FUNCTION_13_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_3(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v4);
    OUTLINED_FUNCTION_23_0(&dword_0, v5, v6, "#WFChooseFromListFlow starts initializing dialog items");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v8 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v9 = v0[16];

  v0[14] = Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, WFChooseFromListDisambiguationItem));
  uint64_t v10 = (void *)swift_task_alloc();
  v0[20] = v10;
  v10[2] = v9;
  v10[3] = v7;
  uint64_t v10[4] = v8;
  v10[5] = v0 + 14;
  os_log_type_t v11 = (void *)swift_task_alloc();
  v0[21] = v11;
  *os_log_type_t v11 = v0;
  v11[1] = WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

void WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)()
{
  uint64_t v2 = v1[14];
  uint64_t v38 = *(void *)(v2 + 16);
  if (v38)
  {
    unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(0);
    if ((v4 & 1) == 0)
    {
LABEL_11:
      uint64_t v20 = (void *)Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_32(v21))
      {
        char v22 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_28_2(v22);
        OUTLINED_FUNCTION_42_0(&dword_0, v23, v24, "Disambiguation list is missing elements");
        OUTLINED_FUNCTION_7_0();
      }

      OUTLINED_FUNCTION_40_2();
      OUTLINED_FUNCTION_41_4();
      outlined consume of WFChooseFromListFlow.State(v20, v0);
LABEL_18:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_23_7();
      __asm { BRAA            X1, X16 }
    }
    os_log_type_t v36 = v1;
    os_log_type_t v37 = (uint64_t *)(v1[18] + 80);
    uint64_t v5 = 1;
    uint64_t v35 = v2;
    while (1)
    {
      uint64_t v6 = *(void *)(v2 + 56) + 56 * v3;
      uint64_t v7 = *(void *)(v6 + 8);
      uint64_t v8 = *(void *)(v6 + 24);
      uint64_t v40 = *(void *)(v6 + 16);
      uint64_t v41 = *(void *)v6;
      uint64_t v9 = *(void **)(v6 + 32);
      long long v42 = *(_OWORD *)(v6 + 40);
      swift_beginAccess();
      uint64_t v10 = *v37;
      id v11 = v9;
      swift_bridgeObjectRetain_n();
      id v12 = *((id *)&v42 + 1);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v39 = v11;
      id v13 = v12;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *os_log_type_t v37 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v10 = v18;
        *os_log_type_t v37 = v18;
      }
      unint64_t v15 = *(void *)(v10 + 16);
      char v0 = 56;
      if (v15 >= *(void *)(v10 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v10 = v19;
        *os_log_type_t v37 = v19;
      }
      *(void *)(v10 + 16) = v15 + 1;
      uint64_t v16 = v10 + 56 * v15;
      *(void *)(v16 + 32) = v41;
      *(void *)(v16 + 40) = v7;
      *(void *)(v16 + 48) = v40;
      *(void *)(v16 + 56) = v8;
      *(void *)(v16 + 64) = v9;
      *(_OWORD *)(v16 + 72) = v42;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      uint64_t v2 = v35;
      uint64_t v1 = v36;
      if (v38 == v5) {
        break;
      }
      if (*(void *)(v35 + 16))
      {
        unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v5++);
        if (v17) {
          continue;
        }
      }
      goto LABEL_11;
    }
  }
  swift_retain();
  id v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v28 = v1[18];
  if (v27)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 134217984;
    OUTLINED_FUNCTION_40_2();
    v1[15] = *(void *)(*(void *)(v28 + 80) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_0, v25, v26, "#WFChooseFromListFlow initialized dialog items, count: %ld", v29, 0xCu);
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_release();
  }

  uint64_t v30 = v1[18];
  OUTLINED_FUNCTION_40_2();
  uint64_t v31 = *(void **)(v30 + 88);
  *(void *)(v30 + 88) = *(void *)(v30 + 80);
  char v32 = *(unsigned char *)(v30 + 96);
  *(unsigned char *)(v30 + 96) = 0;
  swift_bridgeObjectRetain();
  outlined consume of WFChooseFromListFlow.State(v31, v32);
  goto LABEL_18;
}

uint64_t closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[21] = a5;
  v6[22] = a6;
  v6[19] = a3;
  v6[20] = a4;
  v6[18] = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<(Int, WFChooseFromListDisambiguationItem)>.Iterator);
  v6[23] = v7;
  v6[24] = *(void *)(v7 - 8);
  v6[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[26] = swift_task_alloc();
  v6[27] = swift_task_alloc();
  return _swift_task_switch(closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:), 0, 0);
}

uint64_t closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)()
{
  unint64_t v1 = *(void *)(v0 + 152);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2 < 0)
    {
      __break(1u);
      return TaskGroup.Iterator.next(isolation:)();
    }
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  }
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v20 = v2;
    uint64_t v21 = type metadata accessor for TaskPriority();
    do
    {
      uint64_t v5 = *(void *)(v0 + 208);
      uint64_t v4 = *(void *)(v0 + 216);
      uint64_t v7 = *(void *)(v0 + 160);
      uint64_t v6 = *(void *)(v0 + 168);
      uint64_t v8 = *(void *)(v0 + 152);
      __swift_storeEnumTagSinglePayload(v4, 1, 1, v21);
      uint64_t v9 = (void *)swift_allocObject();
      v9[2] = 0;
      v9[3] = 0;
      v9[4] = v3;
      v9[5] = v7;
      void v9[6] = v8;
      v9[7] = v6;
      outlined init with copy of TaskPriority?(v4, v5);
      LODWORD(v5) = __swift_getEnumTagSinglePayload(v5, 1, v21);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_unknownObjectRetain();
      if (v5 == 1)
      {
        outlined destroy of FlowActivity?(*(void *)(v0 + 208), &demangling cache variable for type metadata for TaskPriority?);
      }
      else
      {
        TaskPriority.rawValue.getter();
        OUTLINED_FUNCTION_66();
        v10();
      }
      if (v9[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v13 = v12;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v13 = 0;
      }
      uint64_t v14 = **(void **)(v0 + 144);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:);
      *(void *)(v15 + 24) = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, WFChooseFromListDisambiguationItem));
      uint64_t v16 = v13 | v11;
      if (v13 | v11)
      {
        uint64_t v16 = v0 + 80;
        *(void *)(v0 + 80) = 0;
        *(void *)(v0 + 88) = 0;
        *(void *)(v0 + 96) = v11;
        *(void *)(v0 + 104) = v13;
      }
      ++v3;
      uint64_t v17 = *(void *)(v0 + 216);
      *(void *)(v0 + 112) = 1;
      *(void *)(v0 + 120) = v16;
      *(void *)(v0 + 128) = v14;
      swift_task_create();
      swift_release();
      outlined destroy of FlowActivity?(v17, &demangling cache variable for type metadata for TaskPriority?);
    }
    while (v20 != v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, WFChooseFromListDisambiguationItem));
  TaskGroup.makeAsyncIterator()();
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v18;
  *uint64_t v18 = v0;
  v18[1] = closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:);
  OUTLINED_FUNCTION_10_0();
  return TaskGroup.Iterator.next(isolation:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  unint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  unint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  if (!v2)
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_18_2();
    __asm { BRAA            X1, X16 }
  }
  char v32 = v0[3];
  id v33 = v0[5];
  uint64_t v3 = v0[8];
  uint64_t v34 = v0[6];
  uint64_t v35 = v0[7];
  uint64_t v4 = v0[9];
  uint64_t v5 = (uint64_t *)v0[22];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v5;
  v0[17] = *v5;
  *uint64_t v5 = 0x8000000000000000;
  uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v1);
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v11 = (v9 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  uint64_t v31 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, WFChooseFromListDisambiguationItem>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12))
  {
LABEL_12:
    uint64_t v21 = (void *)v0[17];
    if (v14)
    {
      uint64_t v22 = (void *)(v21[7] + 56 * v13);
      uint64_t v23 = (void *)v22[4];
      uint64_t v24 = (void *)v22[6];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      *uint64_t v22 = v32;
      v22[1] = v2;
      v22[2] = v33;
      v22[3] = v34;
      v22[4] = v35;
      v22[5] = v31;
      v22[6] = v4;
      goto LABEL_16;
    }
    v21[(v13 >> 6) + 8] |= 1 << v13;
    *(void *)(v21[6] + 8 * v13) = v1;
    id v25 = (void *)(v21[7] + 56 * v13);
    NSObject *v25 = v32;
    v25[1] = v2;
    long long v25[2] = v33;
    v25[3] = v34;
    v25[4] = v35;
    v25[5] = v31;
    v25[6] = v4;
    os_log_type_t v26 = v21[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (!v27)
    {
      void v21[2] = v28;
LABEL_16:
      *(void *)v0[22] = v21;
      swift_bridgeObjectRelease();
      uint64_t v29 = (void *)swift_task_alloc();
      v0[28] = v29;
      *uint64_t v29 = v0;
      v29[1] = closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:);
      OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_18_2();
      return TaskGroup.Iterator.next(isolation:)();
    }
LABEL_20:
    __break(1u);
    return TaskGroup.Iterator.next(isolation:)();
  }
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v1);
  if ((v14 & 1) == (v16 & 1))
  {
    uint64_t v13 = v15;
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_18_2();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  v7[9] = a1;
  return _swift_task_switch(closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:), 0, 0);
}

uint64_t closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 80);
  **(void **)(v0 + 72) = v2;
  unint64_t v3 = v1 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v2, (v1 & 0xC000000000000001) == 0);
  if (v3) {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v4 = *(id *)(*(void *)(v0 + 96) + 8 * *(void *)(v0 + 80) + 32);
  }
  uint64_t v5 = (uint64_t)v4;
  *(void *)(v0 + 112) = v4;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:);
  uint64_t v7 = *(void *)(v0 + 104);
  return WFChooseFromListFlow.loadDialogListItem(item:dataStore:)(v0 + 16, v5, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = *(void **)(v1 + 112);
  unint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *id v4 = v3;
  swift_task_dealloc();

  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  long long v1;
  long long v2;
  long long v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  uint64_t v1 = *(_OWORD *)(v0 + 16);
  uint64_t v2 = *(_OWORD *)(v0 + 32);
  unint64_t v3 = *(_OWORD *)(v0 + 48);
  id v4 = *(void *)(v0 + 72);
  *(void *)(v4 + 56) = *(void *)(v0 + 64);
  *(_OWORD *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 24) = v2;
  *(_OWORD *)(v4 + 8) = v1;
  OUTLINED_FUNCTION_18_0();
  return v5();
}

uint64_t WFChooseFromListFlow.loadDialogListItem(item:dataStore:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[42] = a2;
  v3[43] = a3;
  v3[41] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WFChooseFromListFlow.loadDialogListItem(item:dataStore:));
}

uint64_t WFChooseFromListFlow.loadDialogListItem(item:dataStore:)()
{
  OUTLINED_FUNCTION_21_0();
  id v1 = [*(id *)(v0 + 336) identifier];
  NSString v2 = v1;
  NSString v3 = v1;
  NSString v4 = v1;
  NSString v5 = v1;
  if (!v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 368) = v4;
  *(void *)(v0 + 376) = v5;
  *(void *)(v0 + 352) = v2;
  *(void *)(v0 + 360) = v3;
  if (*(void *)(v0 + 344))
  {
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 120) = v0 + 312;
    *(void *)(v0 + 88) = WFChooseFromListFlow.loadDialogListItem(item:dataStore:);
    swift_continuation_init();
    *(void *)(v0 + 272) = _NSConcreteStackBlock;
    OUTLINED_FUNCTION_34_4(COERCE_DOUBLE(0x40000000));
    *(void *)(v0 + 288) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool;
    *(void *)(v0 + 296) = &block_descriptor_2;
    *(void *)(v0 + 304) = v6;
    id v7 = v1;
    [(id)swift_unknownObjectRetain() hasSubtitleForIdentifier:v5 completion:v0 + 272];
    return _swift_continuation_await(v0 + 80);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 336);
    id v9 = v1;

    id v10 = [v8 title];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    uint64_t v15 = *(uint64_t **)(v0 + 328);
    uint64_t v14 = *(void **)(v0 + 336);
    *uint64_t v15 = v11;
    v15[1] = v13;
    v15[2] = 0;
    v15[3] = 0;
    OUTLINED_FUNCTION_32_6(v14);
    return v17();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_3_13();
  id v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *NSString v2 = v1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  id v1 = v0 + 312;
  NSString v2 = *(unsigned __int8 *)(v0 + 312);

  NSString v3 = *(void **)(v0 + 368);
  if (v2 == 1)
  {
    NSString v4 = *(void **)(v0 + 344);
    *(void *)(v0 + 208) = v0;
    *(void *)(v0 + 248) = v1;
    *(void *)(v0 + 216) = WFChooseFromListFlow.loadDialogListItem(item:dataStore:);
    swift_continuation_init();
    *(void *)(v0 + 272) = _NSConcreteStackBlock;
    OUTLINED_FUNCTION_34_4(COERCE_DOUBLE(0x40000000));
    *(void *)(v0 + 288) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?) -> () with result type String?;
    *(void *)(v0 + 296) = &block_descriptor_25;
    *(void *)(v0 + 304) = v5;
    [v4 loadSubtitleWithIdentifier:v3 completion:v0 + 272];
  }
  else
  {

    *(void *)(v0 + 384) = 0;
    *(void *)(v0 + 392) = 0;
    uint64_t v6 = *(void *)(v0 + 360);
    id v7 = *(void **)(v0 + 344);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v1;
    *(void *)(v0 + 24) = WFChooseFromListFlow.loadDialogListItem(item:dataStore:);
    swift_continuation_init();
    *(void *)(v0 + 272) = _NSConcreteStackBlock;
    OUTLINED_FUNCTION_34_4(COERCE_DOUBLE(0x40000000));
    *(void *)(v0 + 288) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool;
    *(void *)(v0 + 296) = &block_descriptor_23;
    *(void *)(v0 + 304) = v8;
    [v7 hasImageForIdentifier:v6 completion:v0 + 272];
  }
  OUTLINED_FUNCTION_23_1();
  return _swift_continuation_await(v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_3_13();
  id v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *NSString v2 = v1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  long long v5;
  uint64_t v6;

  OUTLINED_FUNCTION_21_0();
  NSString v5 = *(_OWORD *)(v0 + 312);

  *(_OWORD *)(v0 + 384) = v5;
  id v1 = *(void *)(v0 + 360);
  NSString v2 = *(void **)(v0 + 344);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 312;
  *(void *)(v0 + 24) = WFChooseFromListFlow.loadDialogListItem(item:dataStore:);
  swift_continuation_init();
  *(void *)(v0 + 272) = _NSConcreteStackBlock;
  OUTLINED_FUNCTION_34_4(COERCE_DOUBLE(0x40000000));
  *(void *)(v0 + 288) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool;
  *(void *)(v0 + 296) = &block_descriptor_23;
  *(void *)(v0 + 304) = v3;
  [v2 hasImageForIdentifier:v1 completion:v0 + 272];
  return _swift_continuation_await(v0 + 16);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_3_13();
  id v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *NSString v2 = v1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  long long v11;
  uint64_t (*v13)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_13_1();
  id v1 = *(unsigned __int8 *)(v0 + 312);

  if (v1 == 1)
  {
    NSString v3 = *(void **)(v0 + 344);
    NSString v2 = *(void *)(v0 + 352);
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 312;
    *(void *)(v0 + 152) = WFChooseFromListFlow.loadDialogListItem(item:dataStore:);
    swift_continuation_init();
    *(void *)(v0 + 272) = _NSConcreteStackBlock;
    OUTLINED_FUNCTION_34_4(COERCE_DOUBLE(0x40000000));
    *(void *)(v0 + 288) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned WFImage?, @unowned NSDictionary?) -> () with result type (WFImage?, [WFContentItemListThumbnailOption : Any]?);
    *(void *)(v0 + 296) = &block_descriptor_24;
    *(void *)(v0 + 304) = v4;
    objc_msgSend(v3, "loadImageWithIdentifier:size:completion:", v2, v0 + 272, 31.0, 31.0);
    return _swift_continuation_await(v0 + 144);
  }
  else
  {

    NSString v5 = [*(id *)(v0 + 336) title];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    swift_unknownObjectRelease();
    id v10 = *(void *)(v0 + 328);
    id v9 = *(void **)(v0 + 336);
    uint64_t v11 = *(_OWORD *)(v0 + 384);
    *(void *)id v10 = v6;
    *(void *)(v10 + 8) = v8;
    *(_OWORD *)(v10 + 16) = v11;
    OUTLINED_FUNCTION_32_6(v9);
    return v13();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_3_13();
  id v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *NSString v2 = v1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  long long v10;
  uint64_t (*v11)(void);
  id v12;
  id v13;
  uint64_t (*v15)(void);
  uint64_t v16;

  OUTLINED_FUNCTION_21_0();
  id v1 = *(void **)(v0 + 312);

  swift_bridgeObjectRelease();
  if (v1)
  {
    NSString v2 = v1;
    NSString v3 = (unint64_t)WFImage.convertToINImage()();
  }
  else
  {
    NSString v3 = 0;
  }
  NSString v4 = [*(id *)(v0 + 336) title];
  NSString v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = v6;

  swift_unknownObjectRelease();
  id v9 = *(void *)(v0 + 328);
  uint64_t v8 = *(void *)(v0 + 336);
  id v10 = *(_OWORD *)(v0 + 384);
  *(void *)id v9 = v5;
  *(void *)(v9 + 8) = v7;
  *(_OWORD *)(v9 + 16) = v10;
  *(void *)(v9 + 32) = v3;
  *(void *)(v9 + 40) = _swiftEmptyArrayStorage;
  *(void *)(v9 + 48) = v8;
  OUTLINED_FUNCTION_18_0();
  uint64_t v15 = v11;
  uint64_t v13 = v12;
  return v15();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool(uint64_t a1, char a2)
{
  return specialized _resumeUnsafeContinuation<A>(_:_:)(*(void *)(a1 + 32), a2);
}

uint64_t specialized _resumeUnsafeContinuation<A>(_:_:)(uint64_t a1, char a2)
{
  **(unsigned char **)(*(void *)(a1 + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t specialized _resumeUnsafeContinuation<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  outlined init with take of String?((uint64_t)v4, *(void *)(*(void *)(a1 + 64) + 40));
  return swift_continuation_resume();
}

{
  void *v3;

  NSString v3 = *(void **)(*(void *)(a1 + 64) + 40);
  *NSString v3 = a2;
  v3[1] = a3;
  return swift_continuation_resume();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?) -> () with result type String?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }

  return specialized _resumeUnsafeContinuation<A>(_:_:)(v2, v3, v5);
}

uint64_t WFChooseFromListFlow.deinit()
{
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 40);
  swift_bridgeObjectRelease();
  outlined consume of WFChooseFromListFlow.State(*(void **)(v0 + 88), *(unsigned char *)(v0 + 96));
  return v0;
}

uint64_t WFChooseFromListFlow.__deallocating_deinit()
{
  WFChooseFromListFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance WFChooseFromListFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFChooseFromListFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for Flow.execute() in conformance WFChooseFromListFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 192) + **(int **)(**(void **)v1 + 192));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFChooseFromListFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 168))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  char v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *char v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = swift_task_alloc();
  char v4 = (void *)OUTLINED_FUNCTION_10_13(v3);
  *char v4 = v5;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5TQ0_;
  return v7(v1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5TQ0_()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t type metadata accessor for WFChooseFromListFlow()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]> and conformance PromptForDisambiguationFlowAsync<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]> and conformance PromptForDisambiguationFlowAsync<A, B>;
  if (!lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]> and conformance PromptForDisambiguationFlowAsync<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<WFChooseFromListDisambiguationItem, [WFChooseFromListDisambiguationItem]> and conformance PromptForDisambiguationFlowAsync<A, B>);
  }
  return result;
}

void outlined consume of WFChooseFromListFlow.State(void *a1, char a2)
{
  switch(a2)
  {
    case 2:

      break;
    case 1:
      swift_errorRelease();
      break;
    case 0:
      swift_bridgeObjectRelease();
      break;
  }
}

unint64_t lazy protocol witness table accessor for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError;
  if (!lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError;
  if (!lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFChooseFromListFlowError and conformance WFChooseFromListFlowError);
  }
  return result;
}

uint64_t base witness table accessor for Flow in WFChooseFromListFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow(&lazy protocol witness table cache variable for type WFChooseFromListFlow and conformance WFChooseFromListFlow, a2, (void (*)(uint64_t))type metadata accessor for WFChooseFromListFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in WFChooseFromListFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow(&lazy protocol witness table cache variable for type WFChooseFromListFlow and conformance WFChooseFromListFlow, a2, (void (*)(uint64_t))type metadata accessor for WFChooseFromListFlow);
}

unsigned char *storeEnumTagSinglePayload for WFChooseFromListFlowError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x735E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WFChooseFromListFlowError()
{
  return &type metadata for WFChooseFromListFlowError;
}

uint64_t initializeBufferWithCopyOfBuffer for WFChooseFromListFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of WFChooseFromListFlow.State(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of WFChooseFromListFlow.State(id result, char a2)
{
  switch(a2)
  {
    case 2:
      return result;
    case 1:
      return (id)swift_errorRetain();
    case 0:
      return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for WFChooseFromListFlow.State(uint64_t a1)
{
}

uint64_t assignWithCopy for WFChooseFromListFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of WFChooseFromListFlow.State(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of WFChooseFromListFlow.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for WFChooseFromListFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of WFChooseFromListFlow.State(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for WFChooseFromListFlow.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WFChooseFromListFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for WFChooseFromListFlow.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for WFChooseFromListFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void *type metadata accessor for WFChooseFromListFlow.State()
{
  return &unk_289C80;
}

uint64_t outlined destroy of FlowActivity?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_66();
  v3();
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  char v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  unsigned int v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *unsigned int v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_5_0();
  *unsigned int v3 = v2;
  char v5 = *(unsigned char **)(v4 + 16);
  uint64_t v6 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  *char v5 = *(unsigned char *)(v2 + 32);
  uint64_t v8 = *(uint64_t (**)(void))(v6 + 8);
  return v8();
}

uint64_t sub_73A08()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TA()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_13(v0);
  void *v1 = v2;
  v1[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  uint64_t v3 = OUTLINED_FUNCTION_13_11();
  return v4(v3);
}

uint64_t lazy protocol witness table accessor for type WFChooseFromListFlow and conformance WFChooseFromListFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v8 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_10_13(v9);
  *uint64_t v10 = v11;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)(v4, v2, v5, v6, v8, v7);
}

uint64_t sub_73BDC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_10_13(v4);
  *uint64_t v5 = v6;
  v5[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  uint64_t v7 = OUTLINED_FUNCTION_31_3();
  return closure #1 in closure #1 in WFChooseFromListFlow.loadDisambiguationItems(items:dataStore:)(v7, v8, v9, v10, v1, v3, v2);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVt_Tg5TA()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_13(v0);
  void *v1 = v2;
  v1[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  uint64_t v3 = OUTLINED_FUNCTION_13_11();
  return v4(v3);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_13(v0);
  void *v1 = v2;
  v1[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  uint64_t v3 = OUTLINED_FUNCTION_13_11();
  return v4(v3);
}

uint64_t OUTLINED_FUNCTION_9_10()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_10_13(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_13_11()
{
  return v0;
}

id OUTLINED_FUNCTION_28_3(id a1)
{
  *(void *)(v1 + 88) = a1;
  *(unsigned char *)(v1 + 96) = 2;
  return a1;
}

uint64_t OUTLINED_FUNCTION_31_3()
{
  return v0;
}

id OUTLINED_FUNCTION_32_6@<X0>(void *a1@<X8>)
{
  void v1[4] = 0;
  v1[5] = v2;
  v1[6] = a1;
  return a1;
}

uint64_t OUTLINED_FUNCTION_33_4()
{
  return v0;
}

void OUTLINED_FUNCTION_34_4(double a1)
{
  *(double *)(v1 + 280) = a1;
}

uint64_t OUTLINED_FUNCTION_38_3()
{
  return type metadata accessor for TaskPriority();
}

uint64_t OUTLINED_FUNCTION_39_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_40_2()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_41_4()
{
  *(void *)(v0 + 88) = *(void *)(v0 + 80);
  *(unsigned char *)(v0 + 96) = 0;
  return swift_bridgeObjectRetain();
}

SiriLinkFlowPlugin::ListShortcutsCATsSimple::Properties_optional __swiftcall ListShortcutsCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ListShortcutsCATsSimple.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = SiriLinkFlowPlugin_ListShortcutsCATsSimple_Properties_viewShortcutsInApp;
  }
  else {
    v4.value = SiriLinkFlowPlugin_ListShortcutsCATsSimple_Properties_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t ListShortcutsCATsSimple.Properties.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000020;
  }
  else {
    return 0xD000000000000017;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListShortcutsCATsSimple.Properties(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ListShortcutsCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ListShortcutsCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ListShortcutsCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::ListShortcutsCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ListShortcutsCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::ListShortcutsCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = ListShortcutsCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ListShortcutsCATsSimple.Properties@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ListShortcutsCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ListShortcutsCATsSimple.launchApp(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)ListShortcutsCATsSimple.launchApp(device:));
}

uint64_t ListShortcutsCATsSimple.launchApp(device:)()
{
  unint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  v0[4] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_1_2(v2, (__n128)xmmword_212160);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_3_1();
  unint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *unint64_t v4 = v0;
  v4[1] = ListShortcutsCATsSimple.launchApp(device:);
  OUTLINED_FUNCTION_52();
  return v6(0xD000000000000017);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  unint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(ListShortcutsCATsSimple.launchApp(device:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = OUTLINED_FUNCTION_10_14();
    return v7(v6);
  }
}

BOOL ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:);
  return ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunVoiceCommandCATsSimple.OpenAppDialogIds.rawValue.getter()
{
  return 1852141679;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance ListShortcutsCATsSimple.LaunchAppDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ListShortcutsCATsSimple.LaunchAppDialogIds(void *a1@<X8>)
{
}

uint64_t ListShortcutsCATsSimple.launchAppAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)ListShortcutsCATsSimple.launchAppAsLabels(device:));
}

uint64_t ListShortcutsCATsSimple.launchAppAsLabels(device:)()
{
  unint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  v0[4] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_1_2(v2, (__n128)xmmword_212160);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_3_1();
  unint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  lazy protocol witness table accessor for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds();
  *unint64_t v4 = v0;
  v4[1] = ListShortcutsCATsSimple.launchAppAsLabels(device:);
  OUTLINED_FUNCTION_52();
  return v6(0xD000000000000017);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  unint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(ListShortcutsCATsSimple.launchAppAsLabels(device:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = OUTLINED_FUNCTION_10_14();
    return v7(v6);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t lazy protocol witness table accessor for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds;
  if (!lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds;
  if (!lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsCATsSimple.LaunchAppDialogIds and conformance ListShortcutsCATsSimple.LaunchAppDialogIds);
  }
  return result;
}

uint64_t ListShortcutsCATsSimple.viewShortcutsInApp()()
{
  uint64_t v3 = (uint64_t (*)(unint64_t))((char *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:)
                                                + async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = ListShortcutsCATsSimple.viewShortcutsInApp();
  OUTLINED_FUNCTION_52();
  return v3(0xD000000000000020);
}

BOOL ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds.init(rawValue:);
  return ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(a1, v1);
}

BOOL ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  return v5 != 0;
}

uint64_t ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds.rawValue.getter()
{
  return 2003134838;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds(void *a1@<X8>)
{
}

uint64_t ListShortcutsCATsSimple.viewShortcutsInAppAsLabels()()
{
  Swift::String v3 = (uint64_t (*)(unint64_t))((char *)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:)
                                                + async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  Swift::OpaquePointer v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds();
  void *v1 = v0;
  v1[1] = ListShortcutsCATsSimple.viewShortcutsInAppAsLabels();
  OUTLINED_FUNCTION_52();
  return v3(0xD000000000000020);
}

uint64_t ListShortcutsCATsSimple.viewShortcutsInAppAsLabels()(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *v2;
  OUTLINED_FUNCTION_4_0();
  *Swift::Int v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return v7(v6);
}

unint64_t lazy protocol witness table accessor for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds;
  if (!lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds;
  if (!lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds and conformance ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds);
  }
  return result;
}

uint64_t ListShortcutsCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return ListShortcutsCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ListShortcutsCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v12 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of URL?(a1);
  return v12;
}

uint64_t ListShortcutsCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_56();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v1;
}

uint64_t ListShortcutsCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_56();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type ListShortcutsCATsSimple.Properties and conformance ListShortcutsCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type ListShortcutsCATsSimple.Properties and conformance ListShortcutsCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type ListShortcutsCATsSimple.Properties and conformance ListShortcutsCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListShortcutsCATsSimple.Properties and conformance ListShortcutsCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for ListShortcutsCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for ListShortcutsCATsSimple;
  if (!type metadata singleton initialization cache for ListShortcutsCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ListShortcutsCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ListShortcutsCATsSimple()
{
  return type metadata accessor for ListShortcutsCATsSimple();
}

unsigned char *storeEnumTagSinglePayload for ListShortcutsCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x74FACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ListShortcutsCATsSimple.Properties()
{
}

void type metadata accessor for ListShortcutsCATsSimple.LaunchAppDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for ListShortcutsCATsSimple.LaunchAppDialogIds(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x7508CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for ListShortcutsCATsSimple.ViewShortcutsInAppDialogIds()
{
}

void OUTLINED_FUNCTION_9_11(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = 0xE400000000000000;
}

uint64_t OUTLINED_FUNCTION_10_14()
{
  return v0;
}

Swift::Bool __swiftcall LNActionOutput.hasCustomOutput()()
{
  id v1 = [v0 dialog];

  if (v1) {
    goto LABEL_4;
  }
  id v2 = [v0 viewSnippet];
  if (v2)
  {

LABEL_4:
    LOBYTE(v2) = 1;
  }
  return (char)v2;
}

Swift::Bool __swiftcall LNSuccessResult.hasCustomOutput()()
{
  id v1 = [v0 output];
  Swift::Bool v2 = LNActionOutput.hasCustomOutput()();

  return v2;
}

uint64_t String.convertedToURL()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v34 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)&v33 - v5;
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v33 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - v13;
  URL.init(string:)();
  outlined init with copy of URL?((uint64_t)v14, (uint64_t)v12);
  uint64_t v15 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v15) == 1)
  {
    outlined destroy of URL?((uint64_t)v12);
LABEL_6:
    outlined init with copy of URL?((uint64_t)v14, (uint64_t)v9);
    goto LABEL_7;
  }
  URL.scheme.getter();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8);
  v18(v12, v15);
  if (!v17) {
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  outlined init with copy of URL?((uint64_t)v14, (uint64_t)v9);
  outlined init with copy of URL?((uint64_t)v9, (uint64_t)v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v15) == 1)
  {
    outlined destroy of URL?((uint64_t)v9);
    uint64_t v9 = v6;
LABEL_7:
    outlined destroy of URL?((uint64_t)v9);
    goto LABEL_8;
  }
  URL.host.getter();
  uint64_t v31 = v30;
  outlined destroy of URL?((uint64_t)v9);
  v18(v6, v15);
  if (v31)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v14;
    return outlined init with take of URL?(v32, v35);
  }
LABEL_8:
  id v19 = objc_allocWithZone((Class)NSDataDetector);
  id v20 = @nonobjc NSDataDetector.init(types:)(-1);
  uint64_t v22 = v20;
  if (v20)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    id v24 = objc_msgSend(v22, "firstMatchInString:options:range:", v23, 0, 0, String.count.getter());

    if (!v24)
    {
      outlined destroy of URL?((uint64_t)v14);

      return __swift_storeEnumTagSinglePayload(v35, 1, 1, v15);
    }
    if (![v24 range])
    {
      [v24 range];
      if (v25 == String.count.getter())
      {
        id v26 = [v24 URL];
        if (v26)
        {
          BOOL v27 = v26;
          uint64_t v28 = (uint64_t)v34;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v29 = 0;
        }
        else
        {
          uint64_t v29 = 1;
          uint64_t v28 = (uint64_t)v34;
        }

        outlined destroy of URL?((uint64_t)v14);
        __swift_storeEnumTagSinglePayload(v28, v29, 1, v15);
        uint64_t v32 = v28;
        return outlined init with take of URL?(v32, v35);
      }
    }
  }
  outlined destroy of URL?((uint64_t)v14);
  return __swift_storeEnumTagSinglePayload(v35, 1, 1, v15);
}

id @nonobjc NSDataDetector.init(types:)(uint64_t a1)
{
  id v6 = 0;
  id v2 = [v1 initWithTypes:a1 error:&v6];
  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t ShowOutputAndCloseFlow.__allocating_init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)(char a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  ShowOutputAndCloseFlow.init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t ShowOutputAndCloseFlow.init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)(char a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)(v5 + 112) = a1;
  outlined init with take of AceServiceInvokerAsync(a2, v5 + 16);
  outlined init with take of AceServiceInvokerAsync(a3, v5 + 56);
  *(void *)(v5 + 96) = a4;
  *(void *)(v5 + 104) = a5;
  return v5;
}

uint64_t ShowOutputAndCloseFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

unint64_t lazy protocol witness table accessor for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow;
  if (!lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow)
  {
    type metadata accessor for ShowOutputAndCloseFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow);
  }
  return result;
}

uint64_t type metadata accessor for ShowOutputAndCloseFlow()
{
  return self;
}

uint64_t ShowOutputAndCloseFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return _swift_task_switch(ShowOutputAndCloseFlow.execute(), 0, 0);
}

uint64_t ShowOutputAndCloseFlow.execute()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_23_0(&dword_0, v4, v5, "Submitting output");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v6 = v0[13];

  uint64_t v9 = (uint64_t (*)(void *))(*(void *)(v6 + 96) + **(int **)(v6 + 96));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[15] = v7;
  *uint64_t v7 = v0;
  v7[1] = ShowOutputAndCloseFlow.execute();
  return v9(v0 + 2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_4_0();
  *os_log_type_t v3 = v2;
  *(void *)(v4 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = ShowOutputAndCloseFlow.execute();
  }
  else {
    uint64_t v5 = ShowOutputAndCloseFlow.execute();
  }
  return _swift_task_switch(v5, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = v1[5];
  os_log_type_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v4;
  *uint64_t v4 = v0;
  v4[1] = ShowOutputAndCloseFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v2, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_4_0();
  *os_log_type_t v3 = v2;
  *(void *)(v4 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = ShowOutputAndCloseFlow.execute();
  }
  else {
    uint64_t v5 = ShowOutputAndCloseFlow.execute();
  }
  return _swift_task_switch(v5, 0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  if (*(unsigned char *)(*(void *)(v0 + 104) + 112) == 1)
  {
    uint64_t v1 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_23_0(&dword_0, v3, v4, "Dismissing Siri");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v5 = *(void *)(v0 + 104);

    __swift_project_boxed_opaque_existential_1((void *)(v5 + 56), *(void *)(v5 + 80));
    uint64_t v6 = [objc_allocWithZone((Class)SAUICloseAssistant) init];
    AceServiceInvokerAsync.submitAndForget(_:)();
  }
  static ExecuteResponse.complete()();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_18_0();
  return v7();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v11 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    OUTLINED_FUNCTION_5_10();
    uint64_t v10 = swift_slowAlloc();
    OUTLINED_FUNCTION_4_8(4.8149e-34);
    os_log_type_t v3 = Error.localizedDescription.getter();
    uint64_t v5 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, &v10);
    OUTLINED_FUNCTION_3_14(v5);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_9_12(&dword_0, v6, v7, "Hit an error publishing output %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  static ExecuteResponse.complete()();
  OUTLINED_FUNCTION_18_0();
  return v8();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v11 = v0;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    OUTLINED_FUNCTION_5_10();
    uint64_t v10 = swift_slowAlloc();
    OUTLINED_FUNCTION_4_8(4.8149e-34);
    os_log_type_t v3 = Error.localizedDescription.getter();
    uint64_t v5 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, &v10);
    OUTLINED_FUNCTION_3_14(v5);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_9_12(&dword_0, v6, v7, "Hit an error publishing output %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  static ExecuteResponse.complete()();
  OUTLINED_FUNCTION_18_0();
  return v8();
}

uint64_t ShowOutputAndCloseFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  return v0;
}

uint64_t ShowOutputAndCloseFlow.__deallocating_deinit()
{
  ShowOutputAndCloseFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ShowOutputAndCloseFlow()
{
  return ShowOutputAndCloseFlow.execute(completion:)();
}

uint64_t protocol witness for Flow.execute() in conformance ShowOutputAndCloseFlow(uint64_t a1)
{
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return ShowOutputAndCloseFlow.execute()(a1);
}

uint64_t OUTLINED_FUNCTION_3_14(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_4_8(float a1)
{
  float *v1 = a1;
  return swift_getErrorValue();
}

uint64_t OUTLINED_FUNCTION_5_10()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_9_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

INImage_optional __swiftcall WFImage.convertToINImage()()
{
  uint64_t v1 = outlined bridged method (pb) of @objc WFImage.pngRepresentation.getter(v0);
  if (v2 >> 60 == 15)
  {
    id v3 = 0;
  }
  else
  {
    uint64_t v4 = v1;
    unint64_t v5 = v2;
    type metadata accessor for INImage();
    outlined copy of Data._Representation(v4, v5);
    id v3 = @nonobjc INImage.__allocating_init(imageData:)(v4, v5);
    [v0 sizeInPoints];
    double v7 = v6;
    [v0 sizeInPoints];
    [v3 _setImageSize:v7];
    [v3 _setRenderingMode:WFImage.getRenderingMode()()];
    outlined consume of Data?(v4, v5);
  }
  uint64_t v8 = (objc_class *)v3;
  result.is_nil = v2;
  result.value.super.Class isa = v8;
  return result;
}

id @nonobjc INImage.__allocating_init(imageData:)(uint64_t a1, unint64_t a2)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v5 = [(id)swift_getObjCClassFromMetadata() imageWithImageData:isa];
  outlined consume of Data._Representation(a1, a2);

  return v5;
}

id WFImage.getRenderingMode()()
{
  id result = [v0 renderingMode];
  if ((unint64_t)result >= 3) {
    return 0;
  }
  return result;
}

uint64_t outlined bridged method (pb) of @objc WFImage.pngRepresentation.getter(void *a1)
{
  id v1 = [a1 PNGRepresentation];
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for INImage()
{
  unint64_t result = lazy cache variable for type metadata for INImage;
  if (!lazy cache variable for type metadata for INImage)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INImage);
  }
  return result;
}

void RunLinkActionCATsSimple.Properties.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      OUTLINED_FUNCTION_52();
      break;
    default:
      return;
  }
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::Properties_optional __swiftcall RunLinkActionCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunLinkActionCATsSimple.Properties.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v1 >= 9) {
    return (SiriLinkFlowPlugin::RunLinkActionCATsSimple::Properties_optional)9;
  }
  else {
    return (SiriLinkFlowPlugin::RunLinkActionCATsSimple::Properties_optional)v1;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.Properties()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  RunLinkActionCATsSimple.Properties.rawValue.getter(v1);
  *uint64_t v0 = v2;
  v0[1] = v3;
}

uint64_t RunLinkActionCATsSimple.actionConfirmation(customDialog:verb:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  uint64_t v4 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_46_2(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  void (*v10)(void);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_45_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_38_2();
  uint64_t v3 = OUTLINED_FUNCTION_44_1(v2);
  *(_OWORD *)(v3 + 16) = xmmword_212170;
  uint64_t v4 = OUTLINED_FUNCTION_1_14(v3);
  OUTLINED_FUNCTION_51_1(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_13(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_42_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_38_4();
  outlined init with copy of AppDisplayInfo?(v9, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_9_13();
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v10();
  }
  uint64_t v11 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 64) = v11;
  *uint64_t v11 = v0;
  v11[1] = RunLinkActionCATsSimple.actionConfirmation(customDialog:verb:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(32);
  OUTLINED_FUNCTION_23_1();
  return v15(v12, v13, v14, v15, v16, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_50_2();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ActionConfirmationDialogIds_optional __swiftcall RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunLinkActionCATsSimple::ActionConfirmationDialogIds_optional)RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunLinkActionCATsSimple.ActionConfirmationDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6D7269666E6F63;
  }
  if (a1 == 1) {
    return 0x6D6F74737563;
  }
  return 0x62726556736168;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ActionConfirmationDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::ActionConfirmationDialogIds_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunLinkActionCATsSimple.ActionConfirmationDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  uint64_t v4 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_46_2(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  void (*v10)(void);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_45_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_38_2();
  uint64_t v3 = OUTLINED_FUNCTION_44_1(v2);
  *(_OWORD *)(v3 + 16) = xmmword_212170;
  uint64_t v4 = OUTLINED_FUNCTION_1_14(v3);
  OUTLINED_FUNCTION_51_1(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_13(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_42_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_38_4();
  outlined init with copy of AppDisplayInfo?(v9, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_9_13();
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v10();
  }
  uint64_t v11 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 64) = v11;
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v11 = v12;
  v11[1] = RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(32);
  OUTLINED_FUNCTION_23_1();
  return v18(v13, v14, v15, v16, v17, v18, v19, v20);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_50_2();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationDialogIds);
  }
  return result;
}

uint64_t RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  void v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_33_5(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_59();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_58_1(v8);
  *uint64_t v9 = v10;
  v9[1] = RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(38);
  OUTLINED_FUNCTION_23_1();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

BOOL RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.rawValue.getter()
{
  return 0x6D6F74737563;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds(void *a1@<X8>)
{
}

uint64_t RunLinkActionCATsSimple.actionConfirmationHeaderAsLabels(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  void v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  Swift::OpaquePointer v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_33_5(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = (void *)(v2 + 48);
  uint64_t v4 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_55_1(v9);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v10;
  v3[1] = RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(38);
  OUTLINED_FUNCTION_23_1();
  return v16(v11, v12, v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds and conformance RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds);
  }
  return result;
}

uint64_t RunLinkActionCATsSimple.actionPerformed(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  void v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  Swift::OpaquePointer v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_33_5(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_59();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_58_1(v8);
  *uint64_t v9 = v10;
  v9[1] = RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(29);
  OUTLINED_FUNCTION_23_1();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

BOOL RunLinkActionCATsSimple.ActionPerformedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ActionPerformedDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunCustomIntentCATsSimple.DoneButtonDialogIds.rawValue.getter()
{
  return 1701736292;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ActionPerformedDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunLinkActionCATsSimple.ActionPerformedDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ActionPerformedDialogIds(void *a1@<X8>)
{
}

uint64_t RunLinkActionCATsSimple.actionPerformedAsLabels(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  void v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  Swift::OpaquePointer v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_33_5(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = (void *)(v2 + 48);
  uint64_t v4 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_55_1(v9);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v10;
  v3[1] = RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(29);
  OUTLINED_FUNCTION_23_1();
  return v16(v11, v12, v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ActionPerformedDialogIds and conformance RunLinkActionCATsSimple.ActionPerformedDialogIds);
  }
  return result;
}

uint64_t RunLinkActionCATsSimple.confirmationButtonLabel(confirmationVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  void v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v12)(unint64_t, unint64_t, uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_50_0();
  uint64_t v3 = OUTLINED_FUNCTION_33_5(v2);
  *(_OWORD *)(v3 + 16) = xmmword_212160;
  *(void *)(v3 + 32) = 0xD000000000000010;
  *(void *)(v3 + 40) = 0x80000000002272D0;
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_17_2();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_58_1(v8);
  *uint64_t v9 = v10;
  v9[1] = RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:);
  return v12(0xD000000000000025, 0x8000000000223B20, v1);
}

BOOL RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds.rawValue.getter()
{
  return 0x6D7269666E6F63;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds(void *a1@<X8>)
{
}

uint64_t RunLinkActionCATsSimple.confirmationButtonLabelAsLabels(confirmationVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  void v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v11)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  Swift::OpaquePointer v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_33_5(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = (void *)(v2 + 48);
  *(void *)(v2 + 32) = 0xD000000000000010;
  *(void *)(v2 + 40) = 0x80000000002272D0;
  OUTLINED_FUNCTION_25_5(v2, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_55_1(v8);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v9;
  v3[1] = RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:);
  OUTLINED_FUNCTION_52();
  return v11();
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds and conformance RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds);
  }
  return result;
}

uint64_t RunLinkActionCATsSimple.continueInApp(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  void v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  Swift::OpaquePointer v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_33_5(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_59();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_58_1(v8);
  *uint64_t v9 = v10;
  v9[1] = RunLinkActionCATsSimple.continueInApp(customDialog:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(27);
  OUTLINED_FUNCTION_23_1();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  Swift::OpaquePointer v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ContinueInAppDialogIds_optional __swiftcall RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunLinkActionCATsSimple::ContinueInAppDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunLinkActionCATsSimple.ContinueInAppDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6D6F74737563;
  }
  else {
    return 0x65756E69746E6F63;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ContinueInAppDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::ContinueInAppDialogIds_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ContinueInAppDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunLinkActionCATsSimple.ContinueInAppDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunLinkActionCATsSimple.continueInAppAsLabels(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  void v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_33_5(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = (void *)(v2 + 48);
  uint64_t v4 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_55_1(v9);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v10;
  v3[1] = RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(27);
  OUTLINED_FUNCTION_23_1();
  return v16(v11, v12, v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ContinueInAppDialogIds and conformance RunLinkActionCATsSimple.ContinueInAppDialogIds);
  }
  return result;
}

uint64_t RunLinkActionCATsSimple.errorDialog(customDialog:nonOptionalParameterIsNil:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(void);
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_38_2();
  uint64_t v4 = OUTLINED_FUNCTION_33_5(v3);
  *(_OWORD *)(v4 + 16) = xmmword_212170;
  uint64_t v5 = OUTLINED_FUNCTION_1_14(v4);
  OUTLINED_FUNCTION_25_5(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v7);
  if (v8)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v9();
  }
  uint64_t v10 = *(unsigned char *)(v0 + 64);
  *(void *)(v2 + 80) = 0xD000000000000019;
  *(void *)(v2 + 88) = 0x80000000002272F0;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(unsigned char *)(v2 + 96) = v10;
  uint64_t v11 = OUTLINED_FUNCTION_59();
  uint64_t v12 = (void *)OUTLINED_FUNCTION_58_1(v11);
  char *v12 = v13;
  v12[1] = RunLinkActionCATsSimple.continueInApp(customDialog:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(25);
  OUTLINED_FUNCTION_23_1();
  return v17(v14, v15, v16, v17, v18, v19, v20, v21);
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ErrorDialogDialogIds_optional __swiftcall RunLinkActionCATsSimple.ErrorDialogDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ErrorDialogDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunLinkActionCATsSimple::ErrorDialogDialogIds_optional)RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunLinkActionCATsSimple.ErrorDialogDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_43_2();
  }
  if (a1 == 1) {
    return 0x726F727265;
  }
  return 0x6D617261506C696ELL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ErrorDialogDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::ErrorDialogDialogIds_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.ErrorDialogDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunLinkActionCATsSimple.ErrorDialogDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunLinkActionCATsSimple.errorDialogAsLabels(customDialog:nonOptionalParameterIsNil:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(void);
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_38_2();
  uint64_t v4 = OUTLINED_FUNCTION_33_5(v3);
  *(_OWORD *)(v4 + 16) = xmmword_212170;
  uint64_t v5 = (void *)(v4 + 48);
  uint64_t v6 = OUTLINED_FUNCTION_1_14(v4);
  OUTLINED_FUNCTION_25_5(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v8);
  if (v9)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v10();
  }
  uint64_t v11 = *(unsigned char *)(v0 + 64);
  *(void *)(v2 + 80) = 0xD000000000000019;
  *(void *)(v2 + 88) = 0x80000000002272F0;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(unsigned char *)(v2 + 96) = v11;
  uint64_t v12 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_55_1(v12);
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v5 = v13;
  v5[1] = RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(25);
  OUTLINED_FUNCTION_23_1();
  return v19(v14, v15, v16, v17, v18, v19, v20, v21);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ErrorDialogDialogIds and conformance RunLinkActionCATsSimple.ErrorDialogDialogIds);
  }
  return result;
}

uint64_t RunLinkActionCATsSimple.needsDisambiguation(customDialog:items:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_38_2();
  v0[6] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_212170;
  uint64_t v3 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  OUTLINED_FUNCTION_48_2();
  *(void *)(v2 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v2 + 96) = v2 + 48;
  OUTLINED_FUNCTION_56_1();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[7] = v8;
  *uint64_t v8 = v0;
  v8[1] = RunLinkActionCATsSimple.needsDisambiguation(customDialog:items:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(33);
  OUTLINED_FUNCTION_23_1();
  return v12(v9, v10, v11, v12, v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL RunLinkActionCATsSimple.NeedsDisambiguationDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.NeedsDisambiguationDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(Swift::String a1, Swift::OpaquePointer a2)
{
  OUTLINED_FUNCTION_40_3(a1, a2);
  OUTLINED_FUNCTION_97();
  return v2 != 0;
}

uint64_t RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.rawValue.getter()
{
  return 0x6769626D61736964;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunLinkActionCATsSimple.NeedsDisambiguationDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds(void *a1@<X8>)
{
}

uint64_t RunLinkActionCATsSimple.needsDisambiguationAsLabels(customDialog:items:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_38_2();
  v0[6] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_212170;
  uint64_t v3 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  OUTLINED_FUNCTION_48_2();
  *(void *)(v2 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v2 + 96) = v2 + 48;
  OUTLINED_FUNCTION_56_1();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[7] = v8;
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v8 = v9;
  v8[1] = RunLinkActionCATsSimple.needsDisambiguationAsLabels(customDialog:items:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(33);
  OUTLINED_FUNCTION_23_1();
  return v15(v10, v11, v12, v13, v14, v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsDisambiguationDialogIds and conformance RunLinkActionCATsSimple.NeedsDisambiguationDialogIds);
  }
  return result;
}

uint64_t RunLinkActionCATsSimple.needsValue(customDialog:parameterName:isSearchAction:isDeleteAction:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_59_1(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_46_2(v6);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  void (*v10)(void);
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_45_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = swift_allocObject();
  char v3 = OUTLINED_FUNCTION_44_1(v2);
  *(_OWORD *)(v3 + 16) = xmmword_214D20;
  char v4 = OUTLINED_FUNCTION_1_14(v3);
  OUTLINED_FUNCTION_51_1(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_13(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_42_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_23_8();
  outlined init with copy of AppDisplayInfo?(v9, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_9_13();
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v10();
  }
  OUTLINED_FUNCTION_30_5();
  OUTLINED_FUNCTION_35_4(v11);
  uint64_t v12 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 64) = v12;
  char *v12 = v0;
  v12[1] = RunLinkActionCATsSimple.actionConfirmation(customDialog:verb:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(24);
  OUTLINED_FUNCTION_23_1();
  return v16(v13, v14, v15, v16, v17, v18, v19, v20);
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::NeedsValueDialogIds_optional __swiftcall RunLinkActionCATsSimple.NeedsValueDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.NeedsValueDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunLinkActionCATsSimple::NeedsValueDialogIds_optional)RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(Swift::String a1, Swift::OpaquePointer a2)
{
  OUTLINED_FUNCTION_40_3(a1, a2);
  OUTLINED_FUNCTION_97();
  if (v2 >= 3) {
    return 3;
  }
  else {
    return v2;
  }
}

uint64_t RunLinkActionCATsSimple.NeedsValueDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_43_2();
  }
  if (a1 == 1) {
    return 0x74706D6F7270;
  }
  return 0x6341686372616573;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.NeedsValueDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.NeedsValueDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.NeedsValueDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.NeedsValueDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::NeedsValueDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.NeedsValueDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::NeedsValueDialogIds_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.NeedsValueDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.NeedsValueDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunLinkActionCATsSimple.NeedsValueDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunLinkActionCATsSimple.needsValueAsLabels(customDialog:parameterName:isSearchAction:isDeleteAction:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_59_1(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_46_2(v6);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  void (*v10)(void);
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_45_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = swift_allocObject();
  char v3 = OUTLINED_FUNCTION_44_1(v2);
  *(_OWORD *)(v3 + 16) = xmmword_214D20;
  char v4 = OUTLINED_FUNCTION_1_14(v3);
  OUTLINED_FUNCTION_51_1(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_13(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_42_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_23_8();
  outlined init with copy of AppDisplayInfo?(v9, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_9_13();
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v10();
  }
  OUTLINED_FUNCTION_30_5();
  OUTLINED_FUNCTION_35_4(v11);
  uint64_t v12 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 64) = v12;
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds();
  OUTLINED_FUNCTION_44();
  char *v12 = v13;
  v12[1] = RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(24);
  OUTLINED_FUNCTION_23_1();
  return v19(v14, v15, v16, v17, v18, v19, v20, v21);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.NeedsValueDialogIds and conformance RunLinkActionCATsSimple.NeedsValueDialogIds);
  }
  return result;
}

uint64_t RunLinkActionCATsSimple.parameterConfirmation(customDialog:parameterValue:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  uint64_t v4 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_46_2(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  void (*v10)(void);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_45_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_38_2();
  uint64_t v3 = OUTLINED_FUNCTION_44_1(v2);
  *(_OWORD *)(v3 + 16) = xmmword_212170;
  uint64_t v4 = OUTLINED_FUNCTION_1_14(v3);
  OUTLINED_FUNCTION_51_1(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_13(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_42_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_24_6();
  outlined init with copy of AppDisplayInfo?(v9, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_9_13();
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v10();
  }
  uint64_t v11 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 64) = v11;
  *uint64_t v11 = v0;
  v11[1] = RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(35);
  OUTLINED_FUNCTION_23_1();
  return v15(v12, v13, v14, v15, v16, v17, v18, v19);
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ParameterConfirmationDialogIds_optional __swiftcall RunLinkActionCATsSimple.ParameterConfirmationDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunLinkActionCATsSimple.ParameterConfirmationDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunLinkActionCATsSimple::ParameterConfirmationDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(Swift::String a1, Swift::OpaquePointer a2)
{
  OUTLINED_FUNCTION_40_3(a1, a2);
  OUTLINED_FUNCTION_97();
  if (v2 == 1) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = 2;
  }
  if (v2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t RunLinkActionCATsSimple.ParameterConfirmationDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6D6F74737563;
  }
  else {
    return 0x6D7269666E6F63;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunLinkActionCATsSimple::ParameterConfirmationDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATsSimple::ParameterConfirmationDialogIds_optional *a2@<X8>)
{
  result.value = RunLinkActionCATsSimple.ParameterConfirmationDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunLinkActionCATsSimple.ParameterConfirmationDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunLinkActionCATsSimple.parameterConfirmationAsLabels(customDialog:parameterValue:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  uint64_t v4 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_46_2(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  void (*v10)(void);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_45_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_38_2();
  uint64_t v3 = OUTLINED_FUNCTION_44_1(v2);
  *(_OWORD *)(v3 + 16) = xmmword_212170;
  uint64_t v4 = OUTLINED_FUNCTION_1_14(v3);
  OUTLINED_FUNCTION_51_1(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_13(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_42_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_24_6();
  outlined init with copy of AppDisplayInfo?(v9, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_9_13();
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v10();
  }
  uint64_t v11 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 64) = v11;
  lazy protocol witness table accessor for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v11 = v12;
  v11[1] = RunLinkActionCATsSimple.actionConfirmationAsLabels(customDialog:verb:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(35);
  OUTLINED_FUNCTION_23_1();
  return v18(v13, v14, v15, v16, v17, v18, v19, v20);
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.ParameterConfirmationDialogIds and conformance RunLinkActionCATsSimple.ParameterConfirmationDialogIds);
  }
  return result;
}

uint64_t RunLinkActionCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return RunLinkActionCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t RunLinkActionCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_16(v10);
  __chkstk_darwin(v11);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t RunLinkActionCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_56();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v1;
}

uint64_t RunLinkActionCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_56();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATsSimple.Properties and conformance RunLinkActionCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATsSimple.Properties and conformance RunLinkActionCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATsSimple.Properties and conformance RunLinkActionCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATsSimple.Properties and conformance RunLinkActionCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for RunLinkActionCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for RunLinkActionCATsSimple;
  if (!type metadata singleton initialization cache for RunLinkActionCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RunLinkActionCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for RunLinkActionCATsSimple()
{
  return type metadata accessor for RunLinkActionCATsSimple();
}

uint64_t getEnumTagSinglePayload for RunLinkActionCATsSimple.Properties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RunLinkActionCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7A074);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void type metadata accessor for RunLinkActionCATsSimple.Properties()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ActionConfirmationDialogIds()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ActionPerformedDialogIds()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ConfirmationButtonLabelDialogIds()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ContinueInAppDialogIds()
{
}

void type metadata accessor for RunLinkActionCATsSimple.ErrorDialogDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x7A19CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for RunLinkActionCATsSimple.NeedsDisambiguationDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for RunLinkActionCATsSimple.ActionConfirmationDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7A29CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for RunLinkActionCATsSimple.NeedsValueDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for RunLinkActionCATsSimple.ContinueInAppDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7A39CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for RunLinkActionCATsSimple.ParameterConfirmationDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_1_14(uint64_t result)
{
  *(unsigned char *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_15(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_7_13(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_9_13()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

unint64_t OUTLINED_FUNCTION_18_9(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

unint64_t OUTLINED_FUNCTION_19_7(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_23_8()
{
  uint64_t result = *(void *)(v0 + 24);
  strcpy((char *)(v1 + 80), "parameterName");
  *(_WORD *)(v1 + 94) = -4864;
  return result;
}

uint64_t OUTLINED_FUNCTION_24_6()
{
  uint64_t result = *(void *)(v0 + 24);
  strcpy((char *)(v1 + 80), "parameterValue");
  *(unsigned char *)(v1 + 95) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_25_5(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with copy of AppDisplayInfo?(v3, v4, a3);
}

uint64_t *OUTLINED_FUNCTION_28_4()
{
  *(void *)(v2 + 72) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

void OUTLINED_FUNCTION_30_5()
{
  strcpy((char *)(v0 + 128), "isSearchAction");
  *(unsigned char *)(v0 + 143) = -18;
}

uint64_t OUTLINED_FUNCTION_33_5(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

void OUTLINED_FUNCTION_35_4(char a1@<W8>)
{
  *(unsigned char *)(v4 + 144) = v1;
  *(void *)(v4 + 168) = v2;
  *(void *)(v4 + 176) = 0x6574656C65447369;
  *(void *)(v4 + 184) = v3;
  *(void *)(v4 + 216) = v2;
  *(unsigned char *)(v4 + 192) = a1;
}

uint64_t OUTLINED_FUNCTION_38_4()
{
  uint64_t result = *(void *)(v0 + 24);
  *(void *)(v1 + 80) = 1651664246;
  *(void *)(v1 + 88) = 0xE400000000000000;
  return result;
}

Swift::Int OUTLINED_FUNCTION_40_3(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  uint64_t countAndFlagsBits = string._countAndFlagsBits;
  unsigned int v6 = object;
  return _findStringSwitchCase(cases:string:)(cases, *(Swift::String *)&countAndFlagsBits);
}

uint64_t *OUTLINED_FUNCTION_42_4()
{
  *(void *)(v2 + 72) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_43_2()
{
  return 0x6D6F74737563;
}

uint64_t OUTLINED_FUNCTION_44_1(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_46_2(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_47_2(uint64_t result, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = result;
  return result;
}

void OUTLINED_FUNCTION_48_2()
{
  *(void *)(v0 + 80) = 0x736D657469;
  *(void *)(v0 + 88) = 0xE500000000000000;
}

uint64_t OUTLINED_FUNCTION_49_1()
{
  return *v0;
}

uint64_t OUTLINED_FUNCTION_50_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_51_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with copy of AppDisplayInfo?(v3, v4, a3);
}

void OUTLINED_FUNCTION_54_0(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = v2;
}

uint64_t OUTLINED_FUNCTION_55_1(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_56_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_58_1(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_59_1(uint64_t result, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = v4;
  *(unsigned char *)(v5 + 81) = a4;
  *(unsigned char *)(v5 + 80) = a3;
  *(void *)(v5 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_61_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t one-time initialization function for usoTaskTransformer(uint64_t a1)
{
  return one-time initialization function for usoTaskTransformer(a1, &demangling cache variable for type metadata for Transformer<UsoTask, String>, static Transformer<>.usoTaskTransformer, (void (*)(void))&type metadata accessor for UsoTask);
}

uint64_t closure #1 in closure #1 in variable initialization expression of static Transformer<>.usoTaskTransformer@<X0>(void *a1@<X8>)
{
  void (*v4)(void *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void v9[4];
  uint64_t v10;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v9[3])
  {
    outlined destroy of Any?((uint64_t)v9);
    goto LABEL_8;
  }
  type metadata accessor for UsoTask_run_common_VoiceCommand();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    unsigned int v6 = type metadata accessor for TransformationError();
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    *BOOL v7 = 0xD000000000000034;
    v7[1] = 0x8000000000227350;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v6 - 8) + 104))(v7, enum case for TransformationError.cannotTransform(_:), v6);
    return swift_willThrow();
  }
  if (one-time initialization token for workflowNameTransformer != -1) {
    swift_once();
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_run_common_VoiceCommand, String>);
  __swift_project_value_buffer(v3, (uint64_t)static Transformer<>.workflowNameTransformer);
  uint64_t v4 = (void (*)(void *__return_ptr, uint64_t *))Transformer.transform.getter();
  v4(v9, &v10);
  swift_release();
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v8 = v9[1];
    *a1 = v9[0];
    a1[1] = v8;
  }
  return result;
}

uint64_t Transformer<>.workflowNameTransformer.unsafeMutableAddressor()
{
  return Transformer<>.workflowNameTransformer.unsafeMutableAddressor(&one-time initialization token for workflowNameTransformer, &demangling cache variable for type metadata for Transformer<UsoTask_run_common_VoiceCommand, String>, (uint64_t)static Transformer<>.workflowNameTransformer);
}

uint64_t Transformer<>.usoTaskTransformer.unsafeMutableAddressor()
{
  return Transformer<>.workflowNameTransformer.unsafeMutableAddressor(&one-time initialization token for usoTaskTransformer, &demangling cache variable for type metadata for Transformer<UsoTask, String>, (uint64_t)static Transformer<>.usoTaskTransformer);
}

uint64_t Transformer<>.workflowNameTransformer.unsafeMutableAddressor(void *a1, uint64_t *a2, uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);

  return __swift_project_value_buffer(v5, a3);
}

uint64_t static Transformer<>.usoTaskTransformer.getter@<X0>(uint64_t a1@<X8>)
{
  return static Transformer<>.usoTaskTransformer.getter(&one-time initialization token for usoTaskTransformer, &demangling cache variable for type metadata for Transformer<UsoTask, String>, (uint64_t)static Transformer<>.usoTaskTransformer, a1);
}

uint64_t one-time initialization function for workflowNameTransformer(uint64_t a1)
{
  return one-time initialization function for usoTaskTransformer(a1, &demangling cache variable for type metadata for Transformer<UsoTask_run_common_VoiceCommand, String>, static Transformer<>.workflowNameTransformer, (void (*)(void))&type metadata accessor for UsoTask_run_common_VoiceCommand);
}

uint64_t one-time initialization function for usoTaskTransformer(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  __swift_allocate_value_buffer(v6, a3);
  __swift_project_value_buffer(v6, (uint64_t)a3);
  a4(0);
  return Transformer.init(transform:)();
}

uint64_t closure #1 in closure #1 in variable initialization expression of static Transformer<>.workflowNameTransformer@<X0>(uint64_t *a1@<X8>)
{
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  if (v12
    && (swift_retain(), v2 = dispatch thunk of UsoEntity_common_VoiceCommand.name.getter(), uint64_t v4 = v3, swift_release(), v4))
  {
    uint64_t result = swift_release();
    *a1 = v2;
    a1[1] = v4;
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    BOOL v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "Shortcut name could not be retrieved from USOGraph", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = type metadata accessor for TransformationError();
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    *uint64_t v11 = 0xD000000000000020;
    v11[1] = 0x8000000000227390;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v11, enum case for TransformationError.cannotTransform(_:), v10);
    swift_willThrow();
    return swift_release();
  }
  return result;
}

uint64_t static Transformer<>.workflowNameTransformer.getter@<X0>(uint64_t a1@<X8>)
{
  return static Transformer<>.usoTaskTransformer.getter(&one-time initialization token for workflowNameTransformer, &demangling cache variable for type metadata for Transformer<UsoTask_run_common_VoiceCommand, String>, (uint64_t)static Transformer<>.workflowNameTransformer, a1);
}

uint64_t static Transformer<>.usoTaskTransformer.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type TransformationError and conformance TransformationError()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationError and conformance TransformationError;
  if (!lazy protocol witness table cache variable for type TransformationError and conformance TransformationError)
  {
    type metadata accessor for TransformationError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError);
  }
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg50112_s18SiriLinkFlowPlugin18CATSpeakableStringC034getPropertiesWithWrapperInTemplateF008templateF0SaySSGSS_tFZSSSo20deF6CXEfU_So8NSStringCTf1cn_nTm(unint64_t a1, void *a2)
{
  unint64_t v3 = v2;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v5)
  {
    while (1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v5 < 0) {
        break;
      }
      uint64_t v16 = v3;
      uint64_t v6 = 0;
      while (v5 != v6)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v7 = *(id *)(a1 + 8 * v6 + 32);
        }
        uint64_t v8 = v7;
        id v9 = objc_msgSend(v7, "range", v16);
        id v11 = objc_msgSend(a2, "substringWithRange:", v9, v10);
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        unint64_t v3 = _swiftEmptyArrayStorage[2];
        if (v3 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v6;
        _swiftEmptyArrayStorage[2] = v3 + 1;
        uint64_t v15 = &_swiftEmptyArrayStorage[2 * v3];
        v15[4] = v12;
        v15[5] = v14;
        if (v5 == v6) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
  }
}

Swift::String_optional __swiftcall DialogExecutionResult.firstDialogFullPrint()()
{
  id v1 = [v0 dialog];
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      goto LABEL_12;
    }
    id v5 = *(id *)(v2 + 32);
  }
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  id v7 = [v6 fullPrint];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_9:
  uint64_t v3 = OUTLINED_FUNCTION_19();
LABEL_12:
  result.value._object = v4;
  result.value._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t static CATSpeakableString.getPropertiesWithWrapperInTemplateString(templateString:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  __chkstk_darwin(v0 - 8);
  OUTLINED_FUNCTION_51_0();
  uint64_t v3 = v1 - v2;
  uint64_t v5 = __chkstk_darwin(v4);
  id v7 = (char *)&v58 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v60 = (uint64_t)&v58 - v9;
  __chkstk_darwin(v8);
  id v11 = (char *)&v58 - v10;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_2();
  uint64_t v61 = v13;
  uint64_t v62 = v12;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_51_0();
  uint64_t v16 = v14 - v15;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_24_7();
  uint64_t v58 = v18;
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = objc_allocWithZone((Class)NSRegularExpression);
  id v21 = @nonobjc NSRegularExpression.init(pattern:options:)(0xD00000000000001DLL, 0x80000000002273C0, 0);
  uint64_t v59 = v11;
  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = objc_msgSend(v21, "matchesInString:options:range:", v22, 0, 0, objc_msgSend(v19, "length"));

    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult);
    unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v25 = v19;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg50112_s18SiriLinkFlowPlugin18CATSpeakableStringC034getPropertiesWithWrapperInTemplateF008templateF0SaySSGSS_tFZSSSo20deF6CXEfU_So8NSStringCTf1cn_nTm(v24, v25);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    id v28 = objc_allocWithZone((Class)NSRegularExpression);
    id v29 = @nonobjc NSRegularExpression.init(pattern:options:)(0xD00000000000001CLL, 0x8000000000227440, 0);
    if (v29)
    {
      NSString v30 = String._bridgeToObjectiveC()();
      id v31 = objc_msgSend(v29, "matchesInString:options:range:", v30, 0, 0, objc_msgSend(v25, "length"));

      unint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v33 = v25;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg50112_s18SiriLinkFlowPlugin18CATSpeakableStringC034getPropertiesWithWrapperInTemplateF008templateF0SaySSGSS_tFZSSSo20deF6CXEfU_So8NSStringCTf1cn_nTm(v32, v33);
      swift_bridgeObjectRelease();
      v64[0] = v27;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)();

      swift_bridgeObjectRelease();
      return v64[0];
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v38 = v62;
    uint64_t v39 = __swift_project_value_buffer(v62, (uint64_t)static Logger.voiceCommands);
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    uint64_t v41 = v58;
    v40(v58, v39, v38);
    uint64_t v42 = (uint64_t)v59;
    v40((uint64_t)v59, v41, v38);
    __swift_storeEnumTagSinglePayload(v42, 0, 1, v38);
    uint64_t v43 = v60;
    outlined init with copy of Logger?(v42, v60);
    if (__swift_getEnumTagSinglePayload(v43, 1, v38) == 1)
    {
      outlined destroy of SiriWorkflowRunnerEvent?(v60, &demangling cache variable for type metadata for Logger?);
    }
    else
    {
      uint64_t v51 = (void *)Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_32(v52))
      {
        uint64_t v53 = swift_slowAlloc();
        v64[0] = OUTLINED_FUNCTION_26_6();
        *(_DWORD *)uint64_t v53 = 136315650;
        uint64_t v54 = StaticString.description.getter();
        uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_23_9();
        uint64_t v63 = 122;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v53 + 22) = 2080;
        uint64_t v63 = OUTLINED_FUNCTION_4_9();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_28_5(&dword_0, v56, v57, "FatalError at %s:%lu - %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    }
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v35 = v62;
    uint64_t v36 = __swift_project_value_buffer(v62, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    v37(v16, v36, v35);
    v37((uint64_t)v7, v16, v35);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v35);
    outlined init with copy of Logger?((uint64_t)v7, v3);
    if (__swift_getEnumTagSinglePayload(v3, 1, v35) == 1)
    {
      outlined destroy of SiriWorkflowRunnerEvent?(v3, &demangling cache variable for type metadata for Logger?);
    }
    else
    {
      uint64_t v44 = (void *)Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_32(v45))
      {
        uint64_t v46 = swift_slowAlloc();
        v64[0] = OUTLINED_FUNCTION_26_6();
        *(_DWORD *)uint64_t v46 = 136315650;
        uint64_t v47 = StaticString.description.getter();
        uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_23_9();
        uint64_t v63 = 115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v46 + 22) = 2080;
        uint64_t v63 = OUTLINED_FUNCTION_4_9();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_28_5(&dword_0, v49, v50, "FatalError at %s:%lu - %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v3, v62);
    }
  }
  OUTLINED_FUNCTION_5_11();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static CATSpeakableString.applyPronunciationHints(template:variablesWithWrapper:intent:intentResponse:tokens:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a3 + 16);
  if (!v8)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (uint64_t i = a3 + 40; ; i += 16)
  {
    id v11 = *(void **)(i - 8);
    swift_bridgeObjectRetain();
    uint64_t v12 = static CATSpeakableString.unwrapProperty(propertyName:)();
    static CATSpeakableString.resolveVariable(variable:intent:intentResponse:tokens:)(v12, v13, a4, a5, a6, &v27);
    swift_bridgeObjectRelease();
    if (!v28)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)&v27, &demangling cache variable for type metadata for Any?);
      goto LABEL_17;
    }
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INObject);
    if ((swift_dynamicCast() & 1) == 0) {
      break;
    }
    uint64_t v14 = v26;
    uint64_t v15 = outlined bridged method (pb) of @objc INObject.pronunciationHint.getter(v26);
    if (!v16) {
      goto LABEL_11;
    }
    uint64_t v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0) {
      uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (!v17)
    {
      swift_bridgeObjectRelease();
LABEL_11:
      *(void *)&long long v27 = a1;
      *((void *)&v27 + 1) = a2;
      uint64_t v26 = v11;
      id v20 = [v14 displayString];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      lazy protocol witness table accessor for type String and conformance String();
      a1 = OUTLINED_FUNCTION_1_15();
      uint64_t v19 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    *(void *)&long long v27 = a1;
    *((void *)&v27 + 1) = a2;
    uint64_t v26 = v11;
    lazy protocol witness table accessor for type String and conformance String();
    a1 = OUTLINED_FUNCTION_1_15();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();

    a2 = v19;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  return 0;
}

#error "7BB30: call analysis failed (funcsize=26)"

void *static CATSpeakableString.getPropertiesInTemplateString(templateString:)()
{
  uint64_t v0 = static CATSpeakableString.getPropertiesWithWrapperInTemplateString(templateString:)();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v0 + 40;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = static CATSpeakableString.unwrapProperty(propertyName:)();
      uint64_t v5 = v4;
      swift_bridgeObjectRelease();
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      if (v6 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v2 += 16;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      id v7 = &_swiftEmptyArrayStorage[2 * v6];
      v7[4] = v3;
      v7[5] = v5;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t static CATSpeakableString.unwrapProperty(propertyName:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

void specialized Array.append<A>(contentsOf:)()
{
  OUTLINED_FUNCTION_18_10();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = v4;
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 > *(void *)(v1 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v1 = v7;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if ((*(void *)(v1 + 24) >> 1) - *(void *)(v1 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)();
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v1;
    return;
  }
  uint64_t v8 = *(void *)(v1 + 16);
  BOOL v5 = __OFADD__(v8, v2);
  uint64_t v9 = v8 + v2;
  if (!v5)
  {
    *(void *)(v1 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_18_10();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v4 > *(void *)(v1 + 24) >> 1)
  {
    if (v3 <= v4) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v3;
    }
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v1);
  }
  if (!*(void *)(v7 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(v1 + 16);
  id v11 = (*(void *)(v1 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(type metadata accessor for DisplayHint() - 8);
  if (v11 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  specialized UnsafeMutablePointer.initialize(from:count:)(v7 + v13, v2, v1 + v13 + *(void *)(v12 + 72) * v10);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v1;
    return;
  }
  uint64_t v14 = *(void *)(v1 + 16);
  uint64_t v6 = __OFADD__(v14, v2);
  uint64_t v15 = v14 + v2;
  if (!v6)
  {
    *(void *)(v1 + 16) = v15;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *v1;
  uint64_t v8 = *(void *)(*v1 + 16);
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t v11 = *(void *)(v7 + 24) >> 1, v11 < v9))
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v7 = v12;
    uint64_t v11 = *(void *)(v12 + 24) >> 1;
  }
  uint64_t v13 = *(void *)(v7 + 16);
  uint64_t v14 = v11 - v13;
  uint64_t v15 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v38, (void *)(v7 + 16 * v13 + 32), v11 - v13, a1);
  if (v15 < v6) {
    goto LABEL_12;
  }
  if (v15)
  {
    uint64_t v17 = *(void *)(v7 + 16);
    BOOL v18 = __OFADD__(v17, v15);
    uint64_t v19 = v17 + v15;
    if (v18)
    {
      __break(1u);
LABEL_46:
      int64_t v30 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_68;
      }
      int64_t v36 = (unint64_t)(v16 + 64) >> 6;
      if (v30 >= v36) {
        goto LABEL_10;
      }
      if (!*(void *)(v37 + 8 * v30))
      {
        OUTLINED_FUNCTION_20_7();
        if (v23 == v18) {
          goto LABEL_10;
        }
        OUTLINED_FUNCTION_19_5();
        if (!v31)
        {
          OUTLINED_FUNCTION_20_7();
          if (v23 == v18) {
            goto LABEL_10;
          }
          OUTLINED_FUNCTION_19_5();
          if (!v32)
          {
            OUTLINED_FUNCTION_20_7();
            if (v23 == v18) {
              goto LABEL_10;
            }
            OUTLINED_FUNCTION_19_5();
            if (!v33)
            {
              OUTLINED_FUNCTION_20_11();
              if (v23 == v18) {
                goto LABEL_10;
              }
              if (!*(void *)(v37 + 8 * v34))
              {
                while (1)
                {
                  OUTLINED_FUNCTION_20_11();
                  if (v23 == v18) {
                    break;
                  }
                  if (*(void *)(v37 + 8 * v35)) {
                    goto LABEL_49;
                  }
                }
LABEL_10:
                outlined consume of [String : DMFPolicy].Iterator._Variant();
                uint64_t *v1 = v7;
                return;
              }
            }
          }
        }
      }
LABEL_49:
      OUTLINED_FUNCTION_7_14();
      goto LABEL_15;
    }
    *(void *)(v7 + 16) = v19;
  }
  if (v15 != v14) {
    goto LABEL_10;
  }
LABEL_13:
  uint64_t v3 = *(void *)(v7 + 16);
  uint64_t v37 = v38[1];
  uint64_t v16 = v39;
  uint64_t v9 = v40;
  if (!v41) {
    goto LABEL_46;
  }
  uint64_t v5 = (v41 - 1) & v41;
  int64_t v36 = (unint64_t)(v39 + 64) >> 6;
LABEL_15:
  OUTLINED_FUNCTION_22_9();
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v20 = *(void *)(v7 + 24) >> 1;
    if (v20 < v3 + 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v7 = v29;
      uint64_t v20 = *(void *)(v29 + 24) >> 1;
    }
    if (v3 < v20) {
      break;
    }
LABEL_43:
    *(void *)(v7 + 16) = v3;
  }
  while (1)
  {
    uint64_t v21 = (void *)(v7 + 32 + 16 * v3);
    *uint64_t v21 = v4;
    v21[1] = v2;
    ++v3;
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_40;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v22 >= v36) {
      goto LABEL_44;
    }
    if (!*(void *)(v37 + 8 * v22))
    {
      OUTLINED_FUNCTION_20_7();
      if (v23 == v18) {
        goto LABEL_44;
      }
      OUTLINED_FUNCTION_19_5();
      if (!v24)
      {
        OUTLINED_FUNCTION_20_7();
        if (v23 == v18) {
          goto LABEL_44;
        }
        OUTLINED_FUNCTION_19_5();
        if (!v25)
        {
          OUTLINED_FUNCTION_20_7();
          if (v23 == v18) {
            goto LABEL_44;
          }
          OUTLINED_FUNCTION_19_5();
          if (!v26)
          {
            OUTLINED_FUNCTION_20_11();
            if (v23 == v18) {
              goto LABEL_44;
            }
            if (!*(void *)(v37 + 8 * v27))
            {
              while (1)
              {
                OUTLINED_FUNCTION_20_11();
                if (v23 == v18) {
                  break;
                }
                if (*(void *)(v37 + 8 * v28)) {
                  goto LABEL_39;
                }
              }
LABEL_44:
              *(void *)(v7 + 16) = v3;
              goto LABEL_10;
            }
          }
        }
      }
    }
LABEL_39:
    OUTLINED_FUNCTION_7_14();
LABEL_40:
    OUTLINED_FUNCTION_22_9();
    if (v3 >= v20)
    {
      swift_bridgeObjectRetain();
      goto LABEL_43;
    }
    swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_68:
  __break(1u);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, specialized UnsafeMutablePointer.initialize(from:count:), &lazy protocol witness table cache variable for type [SABaseCommand] and conformance [A], &demangling cache variable for type metadata for [SABaseCommand], specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized UnsafeMutablePointer.initialize(from:count:), &lazy protocol witness table cache variable for type [SFCardSection] and conformance [A], &demangling cache variable for type metadata for [SFCardSection], specialized protocol witness for Collection.subscript.read in conformance [A]);
}

void specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8));
  }
  if (__OFADD__(v4, v3))
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v5;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
    {
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
      if (v4 + v3 <= *(void *)((char *)&dword_18 + (v5 & 0xFFFFFFFFFFFFFF8)) >> 1) {
        goto LABEL_12;
      }
    }
  }
  if (v5 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v1 = v8;
    uint64_t v7 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_12:
    uint64_t v9 = OUTLINED_FUNCTION_16_10(v7);
    specialized Array._copyContents(initializing:)(v9, v10, a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    OUTLINED_FUNCTION_27_7();
    if (v14)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();

  specialized Array._endMutation()();
}

#error "7C548: call analysis failed (funcsize=129)"

uint64_t TemplatingResult.init(dialogId:print:speak:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  __chkstk_darwin(v5 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v52 = v7 - v6;
  uint64_t v8 = type metadata accessor for TemplatingSection();
  OUTLINED_FUNCTION_0_2();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_25_6();
  uint64_t v57 = v12;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_24_7();
  uint64_t v56 = v14;
  uint64_t v55 = type metadata accessor for TemplatingText();
  OUTLINED_FUNCTION_0_2();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_25_6();
  uint64_t v51 = v18;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_24_7();
  uint64_t v54 = v20;
  uint64_t v21 = type metadata accessor for BehaviorAfterSpeaking();
  OUTLINED_FUNCTION_0_2();
  uint64_t v23 = v22;
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_51_0();
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_24_7();
  uint64_t v50 = *(void *)(a1 + 16);
  uint64_t v47 = v27;
  uint64_t v48 = v26;
  if (v50)
  {
    uint64_t v44 = v23;
    uint64_t v45 = v21;
    uint64_t v46 = a3;
    type metadata accessor for CATSpeakableString();
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    unint64_t v49 = *(void *)(a2 + 16);
    int64_t v30 = _swiftEmptyArrayStorage;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = OUTLINED_FUNCTION_19();
      static CATSpeakableString.stripTTSHint(print:)(v31, v32, v33, v34, v35, v36, v37, v38, v44, v45, v46);
      uint64_t result = swift_bridgeObjectRelease();
      if (v29 < v49)
      {
        if (v29 >= *(void *)(a2 + 16))
        {
          __break(1u);
          return result;
        }
        swift_bridgeObjectRetain();
        static CATSpeakableString.applyTTSHint(speak:)();
        swift_bridgeObjectRelease();
      }
      TemplatingText.init(text:speakableTextOverride:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v51, v54, v55);
      __swift_storeEnumTagSinglePayload(v52, 1, 1, v55);
      swift_bridgeObjectRetain();
      TemplatingSection.init(id:content:caption:spokenOnly:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v57, v56, v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v30 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, (uint64_t)v30);
      }
      unint64_t v41 = v30[2];
      unint64_t v40 = v30[3];
      if (v41 >= v40 >> 1) {
        int64_t v30 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, (uint64_t)v30);
      }
      ++v29;
      v30[2] = v41 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))((unint64_t)v30+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v41, v57, v8);
      OUTLINED_FUNCTION_66();
      v42();
      OUTLINED_FUNCTION_66();
      v43();
      v28 += 16;
      if (v50 == v29)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = v45;
        uint64_t v23 = v44;
        goto LABEL_13;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_13:
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v47, enum case for BehaviorAfterSpeaking.defaultBehavior(_:), v21);
  static TemplatingResult.getBehaviorAfterSpeaking(behavior:)(v48);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v47, v21);
  return TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)();
}

#error "7CD2C: call analysis failed (funcsize=231)"

void static CATSpeakableString.stripTTSHint(print:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  OUTLINED_FUNCTION_10_16();
  uint64_t v11 = self;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 parseAnnotatedString:v12];

  id v14 = [v13 components];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WFTTSStringComponent);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v15 >> 62)
  {
    OUTLINED_FUNCTION_2_13();
    uint64_t v28 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease_n();
    unint64_t v15 = v28;
  }
  else
  {
    uint64_t v16 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    if (swift_dynamicCastMetatype() || (uint64_t v26 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8))) == 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = (void *)(v16 + 32);
      while (*v27)
      {
        ++v27;
        if (!--v26) {
          goto LABEL_3;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v15 = v16 | 1;
    }
  }
  if (!(v15 >> 62))
  {
    uint64_t v17 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8));
    if (v17) {
      goto LABEL_6;
    }
LABEL_26:

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_12();
    return;
  }
  OUTLINED_FUNCTION_2_13();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_26;
  }
LABEL_6:
  if (v17 >= 1)
  {
    for (uint64_t i = 0; i != v17; ++i)
    {
      if ((v15 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_unknownObjectRetain();
      }
      swift_unknownObjectRetain();
      if (swift_dynamicCast())
      {
        v19._uint64_t countAndFlagsBits = a10;
        v19._object = a11;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_unknownObjectRetain();
        self;
        uint64_t v20 = (void *)swift_dynamicCastObjCClass();
        if (v20)
        {
          id v21 = [v20 displayString];
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;

          v25._uint64_t countAndFlagsBits = v22;
          v25._object = v24;
          String.append(_:)(v25);
          swift_bridgeObjectRelease();
        }
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_26;
  }
  __break(1u);
}

uint64_t static CATSpeakableString.applyTTSHint(speak:)()
{
  uint64_t v0 = self;
  NSString v1 = String._bridgeToObjectiveC()();
  uint64_t v2 = (char *)[v0 parseAnnotatedString:v1];

  id v3 = [v2 components];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WFTTSStringComponent);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = (char *)&type metadata for Swift.AnyObject;
  if (v4 >> 62) {
    goto LABEL_33;
  }
  uint64_t v6 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  if (swift_dynamicCastMetatype() || (uint64_t v29 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8))) == 0)
  {
LABEL_3:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  int64_t v30 = (void *)(v6 + 32);
  while (*v30)
  {
    ++v30;
    if (!--v29) {
      goto LABEL_3;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v4 = v6 | 1;
LABEL_4:
  while (2)
  {
    if (v4 >> 62)
    {
      OUTLINED_FUNCTION_2_13();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v8)
      {
LABEL_35:

        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8));
      if (!v8) {
        goto LABEL_35;
      }
    }
    if (v8 >= 1)
    {
      uint64_t v32 = v2;
      uint64_t v2 = 0;
      unint64_t v9 = v4 & 0xC000000000000001;
      uint64_t v10 = &type metadata for String;
      uint64_t v11 = v5 + 8;
      uint64_t v33 = v8;
      while (1)
      {
        if (v9) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_unknownObjectRetain();
        }
        swift_unknownObjectRetain();
        if (!swift_dynamicCast()) {
          break;
        }
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
LABEL_22:
        ++v2;
        swift_unknownObjectRelease();
        if ((char *)v8 == v2)
        {

          swift_bridgeObjectRelease();
          return 0;
        }
      }
      swift_unknownObjectRetain();
      self;
      NSString v12 = (void *)swift_dynamicCastObjCClass();
      if (v12)
      {
        uint64_t v5 = (char *)[v12 seconds];
        [v5 doubleValue];
        double v14 = v13;

        double v15 = round(v14 * 1000.0);
        if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          OUTLINED_FUNCTION_2_13();
          uint64_t v31 = _bridgeCocoaArray<A>(_:)();
          uint64_t result = swift_bridgeObjectRelease_n();
          unint64_t v4 = v31;
          continue;
        }
        if (v15 <= -9.22337204e18) {
          goto LABEL_31;
        }
        if (v15 >= 9.22337204e18) {
          goto LABEL_32;
        }
        v34._uint64_t countAndFlagsBits = 0x3D65737561705C1BLL;
        v34._object = (void *)0xE800000000000000;
        v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._uint64_t countAndFlagsBits = 92;
        v17._object = (void *)0xE100000000000000;
        String.append(_:)(v17);
        v18._uint64_t countAndFlagsBits = 0x3D65737561705C1BLL;
        v18._object = (void *)0xE800000000000000;
        String.append(_:)(v18);
      }
      else
      {
        self;
        Swift::String v19 = (void *)swift_dynamicCastObjCClass();
        if (!v19)
        {
LABEL_21:
          swift_unknownObjectRelease();
          goto LABEL_22;
        }
        id v20 = [v19 spokenString];
        id v21 = v11;
        unint64_t v22 = v9;
        unint64_t v23 = v4;
        uint64_t v24 = v10;
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;

        v28._uint64_t countAndFlagsBits = v25;
        uint64_t v10 = v24;
        unint64_t v4 = v23;
        unint64_t v9 = v22;
        uint64_t v11 = v21;
        uint64_t v8 = v33;
        v28._object = v27;
        String.append(_:)(v28);
      }
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    break;
  }
  __break(1u);
  return result;
}

Swift::String __swiftcall CATSpeakableString.toString()()
{
  NSString v1 = (void *)v0[5];
  if (!v1)
  {
    uint64_t v4 = v0[2];
    uint64_t v2 = (void *)v0[3];
LABEL_9:
    swift_bridgeObjectRetain();
    goto LABEL_10;
  }
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  BOOL v5 = v4 == v3 && v1 == v2;
  if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_9;
  }
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v2;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0x3A7374742FLL;
  v7._object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = v3;
  v8._object = v1;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 93;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  uint64_t v4 = 5985107;
  uint64_t v2 = (void *)0xE300000000000000;
LABEL_10:
  uint64_t v10 = v4;
  uint64_t v11 = v2;
  result._object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

uint64_t CATSpeakableString.asSpeakableString.getter()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return SpeakableString.init(print:speak:)();
}

double static CATSpeakableString.resolveVariable(variable:intent:intentResponse:tokens:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.getter(a1, a2, a5, &v21);
    swift_bridgeObjectRelease();
    if (v22)
    {
LABEL_12:
      outlined init with take of Any(&v21, v20);
      double v14 = v20;
      goto LABEL_13;
    }
    outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
  }
  if (a4)
  {
    uint64_t v12 = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(a4);
    if (v12)
    {
      uint64_t v13 = v12;
      *(void *)&long long v18 = a1;
      *((void *)&v18 + 1) = a2;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.getter((uint64_t)v20, v13, &v18);
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v20);
      if (v19)
      {
        outlined init with take of Any(&v18, &v21);
        double v14 = &v21;
LABEL_13:
        outlined init with take of Any(v14, a6);
        return result;
      }
      outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)&v18, &demangling cache variable for type metadata for Any?);
    }
  }
  if (a3)
  {
    uint64_t v15 = outlined bridged method (pb) of @objc INIntent.parametersByName.getter(a3);
    if (v15)
    {
      uint64_t v16 = v15;
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.getter(a1, a2, v16, &v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v22) {
        goto LABEL_12;
      }
      outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
    }
  }
  double result = 0.0;
  *a6 = 0u;
  a6[1] = 0u;
  return result;
}

uint64_t CATSpeakableString.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CATSpeakableString.__deallocating_deinit()
{
  CATSpeakableString.deinit();

  return swift_deallocClassInstance();
}

uint64_t static TemplatingResult.getBehaviorAfterSpeaking(behavior:)@<X0>(uint64_t a1@<X8>)
{
  if (static TemplatingResult.getListenAfterSpeakingDisabled()())
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v5))
    {
      Swift::String v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v6 = 0;
      _os_log_impl(&dword_0, v4, v1, "ListenAfterSpeakingDisabled is set to true", v6, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v7 = enum case for BehaviorAfterSpeaking.continueWithoutListening(_:);
    type metadata accessor for BehaviorAfterSpeaking();
    OUTLINED_FUNCTION_6();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
    return v10(a1, v7, v8);
  }
  else
  {
    type metadata accessor for BehaviorAfterSpeaking();
    OUTLINED_FUNCTION_6();
    uint64_t v12 = OUTLINED_FUNCTION_19();
    return v13(v12);
  }
}

id static TemplatingResult.getListenAfterSpeakingDisabled()()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  id v1 = @nonobjc NSUserDefaults.init(suiteName:)(0xD00000000000001BLL, 0x8000000000227460);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (!v4)
  {
    memset(v8, 0, sizeof(v8));

    outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)v8, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)v8, &demangling cache variable for type metadata for Any?);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v2 BOOLForKey:v5];

  return v6;
}

Swift::String_optional __swiftcall TemplatingResult.firstSectionContentText()()
{
  uint64_t v0 = type metadata accessor for TemplatingText();
  OUTLINED_FUNCTION_0_2();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_20_0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  __chkstk_darwin(v7 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = TemplatingResult.sections.getter();
  specialized Collection.first.getter(v11, v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for TemplatingSection();
  if (__swift_getEnumTagSinglePayload(v10, 1, v12) == 1)
  {
    outlined destroy of SiriWorkflowRunnerEvent?(v10, &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v13 = 0;
    double v14 = 0;
  }
  else
  {
    TemplatingSection.content.getter();
    OUTLINED_FUNCTION_66();
    v15();
    uint64_t v13 = TemplatingText.text.getter();
    double v14 = v16;
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  }
  uint64_t v17 = v13;
  long long v18 = v14;
  result.value._object = v18;
  result.value._uint64_t countAndFlagsBits = v17;
  return result;
}

id @nonobjc NSRegularExpression.init(pattern:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithPattern:v5 options:a3 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for CATSpeakableString()
{
  return self;
}

void specialized Array._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  specialized Array._copyContents(initializing:)(a1, a2, a3, (uint64_t)specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t)&lazy protocol witness table cache variable for type [INIntentSlotDescription] and conformance [A], (uint64_t)&demangling cache variable for type metadata for [INIntentSlotDescription], (uint64_t)specialized protocol witness for Collection.subscript.read in conformance [A], a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

{
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t (*v30)(char *, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t *v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  void (*v35)(unint64_t, void, uint64_t);
  void (*v36)(unint64_t, void, uint64_t);
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  void (*v48)(char *, void);
  id *v49;
  id v50;

  OUTLINED_FUNCTION_10_16();
  a25 = v26;
  a26 = v28;
  int64_t v30 = v29;
  uint64_t v32 = v31;
  Swift::String v34 = v33;
  uint64_t v36 = v35;
  uint64_t v37 = v27;
  uint64_t v39 = v38;
  unint64_t v41 = v40;
  uint64_t v42 = v27 >> 62;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v43) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v43 = *(void *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFFF8));
    if (!v43)
    {
LABEL_13:
      OUTLINED_FUNCTION_19();
      OUTLINED_FUNCTION_11_12();
      return;
    }
  }
  if (v41)
  {
    if (v42)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v44 <= v39)
      {
        if (v43 >= 1)
        {
          uint64_t v45 = lazy protocol witness table accessor for type [SFCardSection] and conformance [A](v34, v32);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v43; ++i)
          {
            uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(v32);
            uint64_t v48 = (void (*)(char *, void))v30(&a11, i, v37, v47, v45);
            uint64_t v50 = *v49;
            v48(&a11, 0);
            *(void *)(v41 + 8 * i) = v50;
          }
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFFF8)) <= v39)
      {
        v36((v37 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFFF8)), v41);
        goto LABEL_13;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    Swift::String_optional result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      Swift::String_optional result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [SFCardSection] and conformance [A](&lazy protocol witness table cache variable for type [UsoEntityBuilder_common_VoiceCommandPayload] and conformance [A], &demangling cache variable for type metadata for [UsoEntityBuilder_common_VoiceCommandPayload]);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoEntityBuilder_common_VoiceCommandPayload]);
            id v10 = specialized protocol witness for Collection.subscript.read in conformance [A]();
            uint64_t v12 = *v11;
            swift_retain();
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type [SFCardSection] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_2_13()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7265206C61746166, 0xEB00000000726F72, (uint64_t *)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_5_11()
{
  return static SiriKitLifecycle._logCrashToEventBus(_:)();
}

uint64_t OUTLINED_FUNCTION_16_10@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8 * *(void *)(a1 + 16) + 32;
}

uint64_t OUTLINED_FUNCTION_22_9()
{
  return *(void *)(*(void *)(v1 + 48) + 16 * v0 + 8);
}

void OUTLINED_FUNCTION_23_9()
{
  *(_WORD *)(v0 + 12) = 2048;
}

uint64_t OUTLINED_FUNCTION_26_6()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_28_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0x20u);
}

BOOL static CustomIntentSnippetProvider.isDoneButtonEligible(deviceState:intent:siriEnvironment:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ResponseMode();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v40 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v40 - v12;
  SiriEnvironment.currentRequest.getter();
  CurrentRequest.responseMode.getter();
  swift_release();
  static ResponseMode.voiceOnly.getter();
  char v14 = static ResponseMode.== infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v44 = v5 + 8;
  v15(v11, v4);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v50);
  if (v14)
  {
    int v43 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_2_14(v50);
    int v43 = dispatch thunk of DeviceState.isHomePod.getter();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
  OUTLINED_FUNCTION_2_14(a1);
  char v16 = dispatch thunk of DeviceState.isPhone.getter();
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v49);
  if (v16)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
    outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v48);
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
    outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v47);
LABEL_8:
    char v18 = 1;
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_2_14(v49);
  char v17 = dispatch thunk of DeviceState.isPad.getter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v48);
  if (v17) {
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_2_14(v48);
  char v39 = dispatch thunk of DeviceState.isPod.getter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
  outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v47);
  if (v39) {
    goto LABEL_8;
  }
  __swift_project_boxed_opaque_existential_1(v47, v47[3]);
  char v18 = dispatch thunk of DeviceState.isXRDevice.getter();
LABEL_9:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
  id v19 = [a2 _metadata];
  if (v19)
  {
    id v20 = v19;
    unsigned int v21 = [v19 showsWhenRun];
  }
  else
  {
    unsigned int v21 = 0;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v13, v4);
  uint64_t v42 = v23;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    unint64_t v41 = v15;
    uint64_t v27 = v26;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v46 = v40;
    *(_DWORD *)uint64_t v27 = 136315906;
    lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode();
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41(v8, v4);
    *(_WORD *)(v27 + 12) = 1024;
    char v30 = v43;
    LODWORD(v45) = v43 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 18) = 1024;
    LODWORD(v45) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 24) = 1024;
    LODWORD(v45) = v18 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v24, v25, "#CustomIntentSnippetProvider responseMode: %s, isVox: %{BOOL}d, showsWhenRun: %{BOOL}d, userCanInteractWithButton: %{BOOL}d", (uint8_t *)v27, 0x1Eu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    uint64_t v15 = v41;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_6_9();
    ((void (*)(void))v15)();

    char v30 = v43;
  }
  char v31 = v30 | v21 ^ 1 | v18 ^ 1;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  if (v31)
  {
    if (v34)
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      os_log_type_t v36 = v33;
      uint64_t v37 = "#CustomIntentSnippetProvider isDoneButtonEligible - NOT eligible";
LABEL_22:
      _os_log_impl(&dword_0, v32, v36, v37, v35, 2u);
      OUTLINED_FUNCTION_7_0();
    }
  }
  else if (v34)
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    os_log_type_t v36 = v33;
    uint64_t v37 = "#CustomIntentSnippetProvider isDoneButtonEligible returning true";
    goto LABEL_22;
  }

  OUTLINED_FUNCTION_6_9();
  ((void (*)(void))v15)();
  return (v31 & 1) == 0;
}

uint64_t ShortcutsUnlockDeviceStrategy.dialogingTemplates.getter()
{
  return swift_retain();
}

uint64_t AppShortcutGeneralizedInvocation.parameterIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CustomIntentSnippetProvider.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 40, a1);
}

uint64_t CustomIntentSnippetProvider.siriEnvironment.getter()
{
  return swift_retain();
}

void *CustomIntentSnippetProvider.__allocating_init(voiceCommandName:templatingService:deviceState:siriEnvironment:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[3] = a1;
  uint64_t v10[4] = a2;
  v10[2] = a3;
  outlined init with take of AceServiceInvokerAsync(a4, (uint64_t)(v10 + 5));
  v10[10] = a5;
  return v10;
}

void *CustomIntentSnippetProvider.init(voiceCommandName:templatingService:deviceState:siriEnvironment:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  v5[3] = a1;
  v5[4] = a2;
  v5[2] = a3;
  outlined init with take of AceServiceInvokerAsync(a4, (uint64_t)(v5 + 5));
  v5[10] = a5;
  return v5;
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[98] = v8;
  v9[97] = v11;
  v9[96] = a8;
  v9[95] = a7;
  v9[94] = a6;
  v9[93] = a5;
  v9[92] = a4;
  v9[91] = a3;
  v9[90] = a2;
  v9[89] = a1;
  return _swift_task_switch(CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:), 0, 0);
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)()
{
  uint64_t v1 = v0[98];
  type metadata accessor for VoiceShortcutClientWrapper();
  uint64_t v2 = swift_allocObject();
  v0[99] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[100] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for VCVoiceShortcut?);
  swift_asyncLet_begin();
  v0[88] = _swiftEmptyArrayStorage;
  return _swift_asyncLet_get(v0 + 2, v0 + 87, CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:), v0 + 82);
}

{
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:));
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  unint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v29;

  uint64_t v1 = v0 + 87;
  uint64_t v2 = (void *)v0[91];
  uint64_t v3 = (void *)v0[90];
  uint64_t v4 = v0[89];
  uint64_t v5 = (void *)v0[87];
  uint64_t v6 = (void *)(v0[98] + 40);
  uint64_t v7 = v5;
  uint64_t v8 = (unint64_t)static CustomIntentPlatformSpecificSnippets.buildIntentsSnippet(app:intent:intentResponse:isForConfirmation:vcShortcut:device:)(v4, v3, v2, 1, (uint64_t)v5, v6);

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    id v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_3;
    }
LABEL_8:
    unsigned int v21 = (void *)v0[97];
    uint64_t v22 = v0[96];
    uint64_t v23 = v0[95];
    uint64_t v24 = (void *)v0[94];
    os_log_type_t v25 = v0[93];
    uint64_t v26 = v0[92];
    swift_bridgeObjectRelease();
    uint64_t v27 = [objc_allocWithZone((Class)SAUISnippet) init];
    static CustomIntentPlatformSpecificSnippets.attachConfirmationButtons(snippet:yes:no:device:)(v27, v26, v25, v24, v23, v22, v21, v6);
    char v17 = v27;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    OUTLINED_FUNCTION_4_10();
    if (!v19) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  if (!*(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_8;
  }
LABEL_3:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v8 & 0xC000000000000001) == 0);
  if ((v8 & 0xC000000000000001) != 0) {
    uint64_t v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v9 = *(id *)(v8 + 32);
  }
  uint64_t v10 = v9;
  uint64_t v11 = (void *)v0[97];
  uint64_t v12 = v0[96];
  uint64_t v13 = v0[95];
  char v14 = (void *)v0[94];
  uint64_t v15 = v0[93];
  char v16 = v0[92];
  swift_bridgeObjectRelease();
  static CustomIntentPlatformSpecificSnippets.attachConfirmationButtons(snippet:yes:no:device:)(v10, v16, v15, v14, v13, v12, v11, v6);
  char v17 = v10;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_4_10();
  if (!v19)
  {
    uint64_t v1 = v0 + 87;
    goto LABEL_9;
  }
  uint64_t v1 = v0 + 87;
LABEL_14:
  OUTLINED_FUNCTION_8_9(v18);
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_9:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  v0[101] = v0[88];
  return _swift_asyncLet_finish(v0 + 2, v1, CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:), v0 + 82);
}

{
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:));
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  uint64_t v2 = *(void *)(v0 + 808);
  return v1(v2);
}

uint64_t implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:), 0, 0);
}

uint64_t implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v4;
  *uint64_t v4 = v0;
  v4[1] = implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:);
  return VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(v3, v2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 48) = v3;
  swift_task_dealloc();
  return _swift_task_switch(implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:), 0, 0);
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = *v3;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:));
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:)()
{
  uint64_t v1 = v0[8];
  type metadata accessor for VoiceShortcutClientWrapper();
  v0[10] = swift_initStackObject();
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:);
  return VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(v2, v3);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 96) = v3;
  swift_task_dealloc();
  return _swift_task_switch(CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v13)(uint64_t);
  uint64_t (*v14)(void);
  uint64_t v15;

  uint64_t v1 = (void *)(*(void *)(v0 + 64) + 40);
  uint64_t v2 = (unint64_t)static CustomIntentPlatformSpecificSnippets.buildIntentsSnippet(app:intent:intentResponse:isForConfirmation:vcShortcut:device:)(*(void *)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), 0, *(void *)(v0 + 96), v1);
  if (v2 >> 62)
  {
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
    uint64_t v3 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
    uint64_t v3 = v2;
  }
  uint64_t v4 = *(void **)(v0 + 48);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 32) = v3;
  if (static CustomIntentSnippetProvider.isDoneButtonEligible(deviceState:intent:siriEnvironment:)(v1, v4)
    && (uint64_t v5 = (*(uint64_t (**)(void, void, void))(**(void **)(v0 + 64) + 144))(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 40)), (*(void *)(v0 + 104) = v5) != 0))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "Creating done button in the handle view", v9, 2u);
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v10 = *(void *)(v0 + 64);

    char v14 = (uint64_t (*)(void))(*(void *)(**(void **)(v10 + 16) + 400) + **(int **)(**(void **)(v10 + 16) + 400));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v11;
    *uint64_t v11 = v0;
    v11[1] = CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:);
    return v14();
  }
  else
  {

    OUTLINED_FUNCTION_15_3();
    return v13(v3);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;
  uint64_t v17;

  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 104);
  uint64_t v4 = [objc_allocWithZone((Class)SAUIButton) init];
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v1, v2, v4, (SEL *)&selRef_setText_);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_211C70;
  *(void *)(v5 + 32) = v3;
  char v16 = v5;
  specialized Array._endMutation()();
  uint64_t v6 = v3;
  outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(v16, v4);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v7, v8, v4, (SEL *)&selRef_setItemType_);
  uint64_t v9 = v4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_4_10();
  if (v11)
  {
    OUTLINED_FUNCTION_8_9(v10);
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  uint64_t v12 = *(void **)(v0 + 104);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v13 = *(void *)(v0 + 32);
  OUTLINED_FUNCTION_15_3();
  return v14(v13);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)v0[12];
  uint64_t v2 = (void *)v0[13];
  swift_release();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v3;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[15] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:);
  }
  else
  {
    v7[16] = a2;
    v7[17] = a1;
    uint64_t v11 = CustomIntentSnippetProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:);
  }
  return _swift_task_switch(v11, 0, 0);
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForResolveNeedsConfirmation_preRFv2(app:yesButton:noButton:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  _OWORD v8[2] = a1;
  v8[3] = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentSnippetProvider.makeAceViewsForResolveNeedsConfirmation_preRFv2(app:yesButton:noButton:));
}

uint64_t CustomIntentSnippetProvider.makeAceViewsForResolveNeedsConfirmation_preRFv2(app:yesButton:noButton:)()
{
  OUTLINED_FUNCTION_9_0();
  id v1 = static CustomIntentPlatformSpecificSnippets.buildConfirmationSnippet(app:yes:no:device:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void **)(v0 + 64), (void *)(*(void *)(v0 + 72) + 40));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_211C70;
  *(void *)(v2 + 32) = v1;
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_15_3();
  return v3();
}

id CustomIntentSnippetProvider.makeDirectInvocation(customIntent:intentResponse:app:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = v4[4];
  v24[0] = v4[3];
  v24[1] = v7;
  v24[2] = (uint64_t)a1;
  long long v24[3] = (uint64_t)a2;
  v24[4] = a3;
  swift_bridgeObjectRetain();
  id v8 = a1;
  id v9 = a2;
  swift_retain();
  uint64_t v10 = static ShortcutDoneButtonConverter.toUserData(shortcutDoneButton:)(v24);
  if (v10)
  {
    uint64_t v11 = v10;
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
    id v23 = v9;
    id v12 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v11);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v14, v12);
    __swift_project_boxed_opaque_existential_1(v4 + 5, v4[8]);
    uint64_t v15 = (void *)DeviceState.asInvocationContext.getter();
    [v15 setInputOrigin:SAInputOriginDialogButtonTapValue];
    char v16 = self;
    id v17 = [v16 runSiriKitExecutorCommandWithContext:v15 payload:v12];
    id v18 = [objc_allocWithZone((Class)SAIntentGroupSiriKitAppSelectionState) init];
    id v19 = [objc_allocWithZone((Class)SASyncAppIdentifyingInfo) init];
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 setBundleId:v20];

    [v18 setRequestedApp:v19];
    [v17 setAppSelectionState:v18];

    id v21 = [v16 wrapCommandInStartLocalRequest:v17];
    swift_bridgeObjectRelease();

    id v9 = v23;
  }
  else
  {

    swift_bridgeObjectRelease();
    id v21 = 0;
  }
  swift_release();

  return v21;
}

id SKIDirectInvocationPayload.__allocating_init(identifier:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithIdentifier:v1];

  return v2;
}

uint64_t CustomIntentSnippetProvider.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 40);
  swift_release();
  return v0;
}

uint64_t CustomIntentSnippetProvider.__deallocating_deinit()
{
  CustomIntentSnippetProvider.deinit();

  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode;
  if (!lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode)
  {
    type metadata accessor for ResponseMode();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode;
  if (!lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode)
  {
    type metadata accessor for ResponseMode();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:);
  return implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)(a1, v5, v4);
}

uint64_t partial apply for implicit closure #1 in CustomIntentSnippetProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:yesButton:noButton:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

void outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setUserData:isa];
}

void outlined bridged method (mbnn) of @objc SAUIButton.text.setter(uint64_t a1, uint64_t a2, void *a3)
{
}

void outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setCommands:isa];
}

uint64_t type metadata accessor for CustomIntentSnippetProvider()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_2_14(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

BOOL OUTLINED_FUNCTION_8_9@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

id ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionMetadata.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t AppShortcutGeneralizedInvocation.bundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CustomIntentResponseGenerator.dialogTemplating.getter()
{
  return swift_retain();
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.linkActionPatterns.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 64, a1);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.runLinkActionCatWrapper.getter()
{
  return swift_retain();
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.enableTCCLabelsProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 112, a1);
}

uint64_t RunCustomIntentReadingDelegate.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 152, a1);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 192, a1);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.serviceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 232, a1);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 272, a1);
}

uint64_t *ShortcutsLinkPromptForConfirmationFlowStrategy.__allocating_init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_allocObject();
  uint64_t v12 = *(void *)(a7 + 24);
  uint64_t v44 = *(void *)(a7 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a7, v12);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v13);
  uint64_t v15 = OUTLINED_FUNCTION_10_17(v14, v41);
  v16(v15);
  uint64_t v17 = *(void *)(a9 + 24);
  uint64_t v42 = *(void *)(a9 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a9, v17);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v18);
  NSString v20 = OUTLINED_FUNCTION_11_13(v19, v42);
  v21(v20);
  uint64_t v23 = *(void *)(a10 + 24);
  uint64_t v22 = *(void *)(a10 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a10, v23);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_20_0();
  uint64_t v27 = v26 - v25;
  (*(void (**)(uint64_t))(v28 + 16))(v26 - v25);
  OUTLINED_FUNCTION_27_8();
  uint64_t v35 = OUTLINED_FUNCTION_31_4(a1, a2, v29, v30, v31, v32, v33, v34, v10, v27, v37, v38, v39, v40, v17, v23, v12, v43, v22,
          v44);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  return v35;
}

uint64_t *ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void *)(a7 + 24);
  uint64_t v44 = *(void *)(a7 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a7, v12);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v13);
  uint64_t v15 = OUTLINED_FUNCTION_10_17(v14, v41);
  v16(v15);
  uint64_t v17 = *(void *)(a9 + 24);
  uint64_t v43 = *(void *)(a9 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a9, v17);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v18);
  NSString v20 = OUTLINED_FUNCTION_11_13(v19, v42);
  v21(v20);
  uint64_t v23 = *(void *)(a10 + 24);
  uint64_t v22 = *(void *)(a10 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a10, v23);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_20_0();
  uint64_t v27 = v26 - v25;
  (*(void (**)(uint64_t))(v28 + 16))(v26 - v25);
  OUTLINED_FUNCTION_27_8();
  uint64_t v35 = OUTLINED_FUNCTION_31_4(a1, a2, v29, v30, v31, v32, v33, v34, v10, v27, v37, v38, v39, v40, v17, v23, v12, v43, v22,
          v44);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  return v35;
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:)()
{
  uint64_t v1 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v0;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  Input.parse.getter();
  int v14 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  if (v14 == 3) {
    return static ActionForInput.ignore()();
  }
  else {
    return static ActionForInput.handle()();
  }
}

uint64_t closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  return _swift_task_switch(closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:), 0, 0);
}

uint64_t closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[13] = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#ShortcutsLinkPromptForConfirmationFlowStrategy submitting empty output to clear screen and prevent double-taps", v4, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v5 = v0[12];

  outlined init with copy of DeviceState(v5 + 272, (uint64_t)(v0 + 2));
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v6);
  static OutputUtils.makeTemporaryOutput()(v0 + 7);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[14] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 7, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *os_log_type_t v3 = v2;
  uint64_t v4 = v2 + 56;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 120) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "#ShortcutsLinkPromptForConfirmationFlowStrategy failed to submit empty output to clear screen", v3, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_18_0();
  return v4();
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.parseConfirmationResponse(input:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[6] = v2;
  v1[7] = v0;
  v1[5] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  OUTLINED_FUNCTION_16(v4);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v1[10] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[11] = v6;
  v1[12] = OUTLINED_FUNCTION_25();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_16(v7);
  v1[13] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for Parse();
  v1[14] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[15] = v9;
  v1[16] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t (*v6)(void);
  uint64_t v8;

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  __swift_project_value_buffer(*(void *)(v0 + 80), (uint64_t)static Logger.voiceCommands);
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v3 = 0;
    OUTLINED_FUNCTION_7_0();
  }
  OUTLINED_FUNCTION_29_5();
  type metadata accessor for ConfirmationResponse();
  OUTLINED_FUNCTION_28_6();
  uint64_t v4 = OUTLINED_FUNCTION_20_12();
  v5(v4);
  OUTLINED_FUNCTION_19_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v6();
}

void ShortcutsLinkPromptForConfirmationFlowStrategy.parseConfirmationResponse(input:)()
{
  uint64_t v31 = v0;
  Input.parse.getter();
  char v1 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  uint64_t v2 = OUTLINED_FUNCTION_4_11();
  v3(v2);
  switch(v1)
  {
    case 1:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[10], (uint64_t)static Logger.voiceCommands);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v10, v11)) {
        goto LABEL_14;
      }
      break;
    case 2:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[10], (uint64_t)static Logger.voiceCommands);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v10, v11)) {
        goto LABEL_14;
      }
      break;
    case 3:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v19 = v0[11];
      uint64_t v18 = v0[12];
      uint64_t v21 = v0[9];
      uint64_t v20 = v0[10];
      uint64_t v22 = v0[8];
      uint64_t v23 = __swift_project_value_buffer(v20, (uint64_t)static Logger.voiceCommands);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
      v24(v18, v23, v20);
      v24(v21, v18, v20);
      __swift_storeEnumTagSinglePayload(v21, 0, 1, v20);
      outlined init with copy of Logger?(v21, v22);
      if (__swift_getEnumTagSinglePayload(v22, 1, v20) == 1)
      {
        outlined destroy of Logger?(v0[8]);
      }
      else
      {
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc();
          uint64_t v30 = swift_slowAlloc();
          *(_DWORD *)uint64_t v27 = 136315650;
          uint64_t v28 = StaticString.description.getter();
          v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 12) = 2048;
          v0[3] = 79;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v27 + 22) = 2080;
          v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000043, 0x8000000000227570, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_0, v25, v26, "FatalError at %s:%lu - %s", (uint8_t *)v27, 0x20u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }

        (*(void (**)(void, void))(v0[11] + 8))(v0[8], v0[10]);
      }
      static SiriKitLifecycle._logCrashToEventBus(_:)();
      _assertionFailure(_:_:file:line:flags:)();
      OUTLINED_FUNCTION_3();
      return;
    default:
      id v4 = [*(id *)(v0[7] + 32) systemProtocols];
      type metadata accessor for LNSystemProtocol();
      v0[17] = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v5 = (void *)swift_task_alloc();
      v0[18] = v5;
      *uint64_t v5 = v0;
      v5[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.parseConfirmationResponse(input:);
      OUTLINED_FUNCTION_3();
      static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v6, v7, v8);
      return;
  }
  uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_33();
  *(_WORD *)uint64_t v13 = 0;
  _os_log_impl(&dword_0, v10, v11, v12, v13, 2u);
  OUTLINED_FUNCTION_7_0();
LABEL_14:
  OUTLINED_FUNCTION_29_5();
  type metadata accessor for ConfirmationResponse();
  OUTLINED_FUNCTION_28_6();
  uint64_t v14 = OUTLINED_FUNCTION_20_12();
  v15(v14);
  OUTLINED_FUNCTION_19_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_3();
  __asm { BRAA            X1, X16 }
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[32] = v2;
  v1[33] = v0;
  v1[31] = v3;
  uint64_t v4 = type metadata accessor for ImageElement.ImageStyle();
  v1[34] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[35] = v5;
  v1[36] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for ImageElement();
  v1[37] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[38] = v7;
  v1[39] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[40] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[41] = v9;
  v1[42] = OUTLINED_FUNCTION_25();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v10);
  v1[43] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_16(v11);
  v1[44] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for OutputGenerationManifest();
  v1[45] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[46] = v13;
  v1[47] = OUTLINED_FUNCTION_25();
  uint64_t v14 = type metadata accessor for NLContextUpdate();
  v1[48] = v14;
  OUTLINED_FUNCTION_1_0(v14);
  v1[49] = v15;
  v1[50] = OUTLINED_FUNCTION_25();
  uint64_t v16 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v16);
  v1[51] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v17, v18, v19);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  v2[58] = v4;
  v2[59] = v5;
  v2[60] = v6;
  v2[61] = v7;
  v2[62] = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  uint64_t v41 = v0;
  char v1 = [*(id *)(v0 + 440) viewSnippet];
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 viewData];

    uint64_t v2 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = 0xF000000000000000;
  }
  char v39 = v5;
  *(void *)(v0 + 504) = v2;
  *(void *)(v0 + 512) = v5;
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v7 = *(void *)(v0 + 400);
  uint64_t v8 = *(void *)(v0 + 384);
  uint64_t v9 = *(void *)(v0 + 344);
  uint64_t v10 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 336);
  uint64_t v12 = *(void *)(v0 + 320);
  static DialogPhase.confirmation.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, v7, v8);
  __swift_storeEnumTagSinglePayload(v9, 0, 1, v8);
  OutputGenerationManifest.nlContextUpdate.setter();
  static TemplatingResult.getListenAfterSpeakingDisabled()();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v11, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v12);
  uint64_t v13 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  if (v13)
  {
    uint64_t v14 = *(void *)(v0 + 264);
    uint64_t v15 = v14 + 192;
    type metadata accessor for App();
    uint64_t v16 = *(void *)(v14 + 40);
    *(void *)(v0 + 520) = v16;
    uint64_t v17 = *(void *)(v14 + 48);
    *(void *)(v0 + 528) = v17;
    swift_bridgeObjectRetain();
    App.__allocating_init(appIdentifier:)();
    uint64_t v18 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(v15, 2);
    uint64_t v20 = v19;
    swift_release();
    *(void *)(v0 + 536) = v20;
    *(void *)(v0 + 544) = v18;
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
    uint64_t v22 = 0xE000000000000000;
    if (v20) {
      uint64_t v22 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    if ((v22 & 0x2000000000000000) != 0) {
      uint64_t v21 = HIBYTE(v22) & 0xF;
    }
    if (!v21)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
      swift_retain();
      uint64_t v24 = Logger.logObject.getter();
      uint64_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v26 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_0, v24, v25, "#ShortcutsLinkPromptForConfirmationFlowStrategy: failed to get app's displayName; bundleId='%s'",
          v26,
          0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        swift_release();
      }
    }
    uint64_t v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 552) = v38;
    long long *v38 = v0;
    v38[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    return LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:)();
  }
  else
  {
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v27;
    *uint64_t v27 = v0;
    v27[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    uint64_t v44 = *(void *)(v0 + 376);
    uint64_t v43 = v39;
    OUTLINED_FUNCTION_3();
    return ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:)(v28, v29, v30, v31, v32, v33, v34, v35);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 560) = v5;
  *(void *)(v3 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *object;
  Swift::String_optional v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t countAndFlagsBits;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  char v1 = *(void *)(v0 + 448);
  uint64_t v2 = [*(id *)(v0 + 560) catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  if (v1)
  {
    uint64_t v4 = DialogExecutionResult.firstDialogFullPrint()();
    object = v4.value._object;
    uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = 0;
  }
  uint64_t v37 = (uint64_t)object;
  uint64_t v38 = (uint64_t *)(v0 + 184);
  *(void *)(v0 + 576) = object;
  os_log_type_t v36 = *(void **)(v0 + 560);
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v6 = *(void *)(v0 + 536);
  uint64_t v24 = *(void *)(v0 + 528);
  uint64_t v7 = *(void *)(v0 + 520);
  uint64_t v31 = *(void *)(v0 + 504);
  uint64_t v32 = *(void *)(v0 + 512);
  unint64_t v29 = *(void *)(v0 + 480);
  uint64_t v30 = *(void *)(v0 + 488);
  uint64_t v27 = *(void *)(v0 + 464);
  uint64_t v28 = *(void *)(v0 + 472);
  uint64_t v9 = *(void *)(v0 + 280);
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v10 = *(void **)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 272);
  if (!v6)
  {
    uint64_t v6 = 0xE000000000000000;
    uint64_t v5 = 0;
  }
  uint64_t v25 = v5;
  os_log_type_t v26 = v6;
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for ImageElement.ImageStyle.default(_:), v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  uint64_t v12 = type metadata accessor for _ProtoIdiom();
  OUTLINED_FUNCTION_12_1();
  uint64_t v14 = v13;
  uint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_212160;
  (*(void (**)(unint64_t, void, uint64_t))(v14 + 104))(v16 + v15, enum case for _ProtoIdiom.default(_:), v12);
  specialized Set.init(_nonEmptyArrayLiteral:)(v16);
  static ImageElement.appIcon(_:imageStyle:idioms:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
  uint64_t v33 = v10[22];
  uint64_t v34 = v10[23];
  __swift_project_boxed_opaque_existential_1(v10 + 19, v33);
  *(void *)(v0 + 208) = type metadata accessor for WorkflowDataModels(0);
  *(void *)(v0 + 216) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
  uint64_t *boxed_opaque_existential_1 = v7;
  boxed_opaque_existential_1[1] = v24;
  boxed_opaque_existential_1[2] = v25;
  boxed_opaque_existential_1[3] = v26;
  boxed_opaque_existential_1[4] = v27;
  boxed_opaque_existential_1[5] = v28;
  boxed_opaque_existential_1[6] = v29;
  boxed_opaque_existential_1[7] = v30;
  boxed_opaque_existential_1[8] = v31;
  boxed_opaque_existential_1[9] = v32;
  *((unsigned char *)boxed_opaque_existential_1 + 80) = 0;
  boxed_opaque_existential_1[11] = countAndFlagsBits;
  boxed_opaque_existential_1[12] = v37;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_211C70;
  *(void *)(v18 + 32) = v36;
  char v39 = v18;
  specialized Array._endMutation()();
  *(void *)(v0 + 584) = v39;
  swift_bridgeObjectRetain();
  outlined copy of Data?(v31, v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v31, v32);
  swift_bridgeObjectRetain();
  uint64_t v19 = v36;
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v20;
  *uint64_t v20 = v0;
  v20[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  uint64_t v21 = *(void *)(v0 + 376);
  uint64_t v22 = *(void *)(v0 + 248);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v22, v38, v39, v21, v33, v34);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 184;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v2 = v0[63];
  char v1 = v0[64];
  uint64_t v3 = (void *)v0[56];
  uint64_t v4 = v0[49];
  uint64_t v5 = v0[46];
  uint64_t v14 = v0[47];
  uint64_t v12 = (void *)v0[70];
  uint64_t v13 = v0[45];
  uint64_t v6 = v0[38];
  uint64_t v11 = v0[39];
  uint64_t v10 = v0[37];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v2, v1);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  outlined consume of Data?(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v10);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v14, v13);
  uint64_t v7 = v0[50];
  OUTLINED_FUNCTION_30_6();
  (*(void (**)(uint64_t))(v4 + 8))(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 608) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_15_10();
  swift_release();
  swift_release();
  outlined consume of Data?(v0, v1);
  uint64_t v3 = OUTLINED_FUNCTION_4_11();
  v4(v3);
  uint64_t v5 = *(void *)(v2 + 400);
  OUTLINED_FUNCTION_30_6();
  (*(void (**)(uint64_t))(v6 + 8))(v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v7();
}

void ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  char v1 = *(void **)(v0 + 264);
  type metadata accessor for WorkflowNLContextProvider();
  *(void *)(v0 + 416) = swift_initStackObject();
  outlined init with copy of DeviceState((uint64_t)(v1 + 24), v0 + 144);
  uint64_t v2 = v1[7];
  type metadata accessor for RunLinkActionCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v5 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v6 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t inited = (void *)swift_initStackObject();
  *(void *)(v0 + 424) = inited;
  *(void *)(v0 + 432) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)((long long *)(v0 + 144), v3, v2, v4, v5, v6, inited);
  OUTLINED_FUNCTION_10_0();
  VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
  uint64_t v8 = (void *)v1[3];
  *(void *)(v0 + 440) = v8;
  *(void *)(v0 + 448) = [v8 dialog];
  __swift_project_boxed_opaque_existential_1(v1 + 14, v1[17]);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v9;
  *uint64_t v9 = v0;
  v9[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  OUTLINED_FUNCTION_3();
  __asm { BRAA            X3, X16 }
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();

  swift_release();
  swift_release();
  uint64_t v13 = OUTLINED_FUNCTION_9_14();
  v14(v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_0();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

{
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_15_10();
  swift_release();
  swift_release();
  outlined consume of Data?(v12, v13);
  uint64_t v15 = OUTLINED_FUNCTION_4_11();
  v16(v15);
  (*(void (**)(void, void))(v14[49] + 8))(v14[50], v14[48]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_25_0();
  uint64_t v13 = *(void *)(v12 + 504);
  uint64_t v14 = *(void *)(v12 + 512);

  swift_release();
  swift_release();
  outlined consume of Data?(v13, v14);
  uint64_t v15 = OUTLINED_FUNCTION_4_11();
  v16(v15);
  uint64_t v17 = OUTLINED_FUNCTION_9_14();
  v18(v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[55] = v14;
  v9[56] = v8;
  v9[53] = a8;
  v9[54] = v13;
  v9[51] = a6;
  v9[52] = a7;
  v9[49] = a4;
  v9[50] = a5;
  v9[47] = a2;
  v9[48] = a3;
  v9[46] = a1;
  uint64_t v10 = type metadata accessor for OutputGenerationManifest();
  v9[57] = v10;
  v9[58] = *(void *)(v10 - 8);
  v9[59] = swift_task_alloc();
  type metadata accessor for CATOption();
  v9[60] = swift_task_alloc();
  return _swift_task_switch(ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:), 0, 0);
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:)()
{
  uint64_t v1 = *(void *)(v0 + 448);
  outlined init with copy of DeviceState(v1 + 192, v0 + 248);
  uint64_t v2 = *(void *)(v1 + 104);
  outlined init with copy of DeviceState(v1 + 64, v0 + 288);
  type metadata accessor for RunLinkActionCATsSimple();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v14 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v3 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t inited = (void *)swift_initStackObject();
  *(void *)(v0 + 488) = inited;
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 288, v6);
  OUTLINED_FUNCTION_12_1();
  uint64_t v9 = v8;
  uint64_t v10 = OUTLINED_FUNCTION_25();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v7, v6);
  *(void *)(v0 + 496) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)((long long *)(v0 + 248), v2, v14, v13, v3, v10, inited, v6, v5);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 288);
  swift_task_dealloc();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v11;
  *uint64_t v11 = v0;
  v11[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:);
  return LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 512) = v4;
  *(void *)(v2 + 520) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;

  uint64_t v1 = (void *)v0[48];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[66] = v3;
    *uint64_t v3 = v0;
    v3[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:);
    return LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:)();
  }
  else
  {
    uint64_t v5 = v0[58];
    uint64_t v18 = v0[59];
    uint64_t v19 = v0[57];
    uint64_t v20 = (id)v0[64];
    uint64_t v6 = v0[56];
    uint64_t v17 = v0[55];
    uint64_t v8 = v0[53];
    uint64_t v7 = v0[54];
    uint64_t v9 = v0[52];
    uint64_t v16 = v0[51];
    uint64_t v11 = v0[49];
    uint64_t v10 = v0[50];
    uint64_t v13 = *(void *)(v6 + 40);
    uint64_t v12 = *(void *)(v6 + 48);
    outlined init with copy of DeviceState(v6 + 192, (uint64_t)(v0 + 41));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v8, v7);
    ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)(v13, v12, v11, v10, v16, v9, 0, 0, (uint64_t)(v0 + 18), 0, v8, v7, (uint64_t)(v0 + 41));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v18, v17, v19);
    uint64_t v14 = [v20 patternId];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    OutputGenerationManifest.responseViewId.setter();
    uint64_t v15 = (void *)swift_task_alloc();
    v0[70] = v15;
    *uint64_t v15 = v0;
    v15[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:);
    return ActionConfirmationVisual.data.getter();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  *(void *)(v7 + 536) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    *(void *)(v7 + 544) = v3;
    *(void *)(v7 + 552) = v5;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v16 = *(void *)(v0 + 552);
  uint64_t v14 = *(void *)(v0 + 544);
  uint64_t v19 = *(void **)(v0 + 512);
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v17 = *(void *)(v0 + 472);
  uint64_t v18 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v15 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 416);
  uint64_t v13 = *(void *)(v0 + 408);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v7 = *(void *)(v0 + 400);
  uint64_t v9 = *(void *)(v2 + 40);
  uint64_t v8 = *(void *)(v2 + 48);
  outlined init with copy of DeviceState(v2 + 192, v0 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v4, v3);
  ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)(v9, v8, v6, v7, v13, v5, 0, v16, v0 + 144, v14, v4, v3, v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v17, v15, v18);
  uint64_t v10 = [v19 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v11;
  *uint64_t v11 = v0;
  v11[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:);
  return ActionConfirmationVisual.data.getter();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[71] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[72] = v3;
    v7[73] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 448);
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(*(void *)(v0 + 584), *(void *)(v0 + 576), *(void **)(v0 + 512));
  uint64_t v2 = v1[22];
  uint64_t v3 = v1[23];
  __swift_project_boxed_opaque_existential_1(v1 + 19, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v4;
  *uint64_t v4 = v0;
  v4[1] = ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:yesLabel:noLabel:viewData:manifest:);
  uint64_t v5 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 472);
  uint64_t v7 = *(void *)(v0 + 368);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v7, v5, v6, v2, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 600) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = (void *)v0[64];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[57];
  uint64_t v4 = v0[58];
  outlined release of ActionConfirmationVisual((uint64_t)(v0 + 18));

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 384);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_26_7();

  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_30();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_26_7();

  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_30();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

id *ShortcutsLinkPromptForConfirmationFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 8));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 14));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 19));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 29));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 34));
  return v0;
}

uint64_t ShortcutsLinkPromptForConfirmationFlowStrategy.__deallocating_deinit()
{
  ShortcutsLinkPromptForConfirmationFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance ShortcutsLinkPromptForConfirmationFlowStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ShortcutsLinkPromptForConfirmationFlowStrategy.parseConfirmationResponse(input:)();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance ShortcutsLinkPromptForConfirmationFlowStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ShortcutsLinkPromptForConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance ShortcutsLinkPromptForConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance ShortcutsLinkPromptForConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance ShortcutsLinkPromptForConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkPromptForConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance ShortcutsLinkPromptForConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, v9, a4);
}

uint64_t *specialized ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long *a11, long long *a12, long long *a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a14[11] = a17;
  a14[12] = a20;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a14 + 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a17 - 8) + 32))(boxed_opaque_existential_1, a7, a17);
  a14[17] = a15;
  a14[18] = a18;
  uint64_t v23 = __swift_allocate_boxed_opaque_existential_1(a14 + 14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a15 - 8) + 32))(v23, a9, a15);
  a14[22] = a16;
  a14[23] = a19;
  uint64_t v24 = __swift_allocate_boxed_opaque_existential_1(a14 + 19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a16 - 8) + 32))(v24, a10, a16);
  a14[2] = a1;
  a14[3] = a2;
  a14[4] = a3;
  a14[5] = a4;
  a14[6] = a5;
  a14[7] = a6;
  a14[13] = a8;
  outlined init with take of AceServiceInvokerAsync(a11, (uint64_t)(a14 + 24));
  outlined init with take of AceServiceInvokerAsync(a12, (uint64_t)(a14 + 29));
  outlined init with take of AceServiceInvokerAsync(a13, (uint64_t)(a14 + 34));
  return a14;
}

uint64_t sub_83F38()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return closure #1 in ShortcutsLinkPromptForConfirmationFlowStrategy.actionForInput(_:)(v3, v4, v5, v6);
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *associated type witness table accessor for PromptForConfirmationFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in ShortcutsLinkPromptForConfirmationFlowStrategy()
{
  return &protocol witness table for SimpleConfirmationResponseProvider;
}

uint64_t type metadata accessor for ShortcutsLinkPromptForConfirmationFlowStrategy()
{
  return self;
}

uint64_t outlined release of ActionConfirmationVisual(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  unint64_t v3 = *(void *)(a1 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v2, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_14()
{
  return *(void *)(v0 + 400);
}

char *OUTLINED_FUNCTION_10_17@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

char *OUTLINED_FUNCTION_11_13@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_15_10()
{
  uint64_t v2 = *(void **)(v0 + 448);
}

uint64_t OUTLINED_FUNCTION_19_8()
{
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return SimpleConfirmationResponseProvider.init(_:)();
}

uint64_t OUTLINED_FUNCTION_20_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_26_7()
{
  return outlined release of ActionConfirmationVisual(v0 + 144);
}

__n128 OUTLINED_FUNCTION_27_8()
{
  return *(__n128 *)(v0 - 160);
}

void OUTLINED_FUNCTION_29_5()
{
}

uint64_t *OUTLINED_FUNCTION_31_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long *a11, long long *a12, long long *a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v23 = *(void *)(v21 - 120);
  uint64_t v24 = *(void *)(v21 - 112);
  uint64_t v25 = *(void *)(v21 - 104);
  uint64_t v26 = *(void *)(v21 - 96);
  uint64_t v27 = *(void *)(v21 - 88);
  return specialized ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)(a1, a2, v23, v24, v25, v26, v20, v27, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t *VoiceCommandsAppPolicyHandler.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static VoiceCommandsAppPolicyHandler.instance;
}

void *one-time initialization function for instance()
{
  type metadata accessor for VoiceCommandsAppPolicyHandler();
  swift_allocObject();
  unint64_t result = VoiceCommandsAppPolicyHandler.().init()();
  static VoiceCommandsAppPolicyHandler.instance = (uint64_t)result;
  return result;
}

uint64_t static VoiceCommandsAppPolicyHandler.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return swift_retain();
}

void *VoiceCommandsAppPolicyHandler.().init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  v1[2] = 0;
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  void v1[4] = &_swiftEmptyDictionarySingleton;
  id v8 = objc_allocWithZone((Class)DMFApplicationPolicyMonitor);
  swift_retain();
  id v9 = @nonobjc DMFApplicationPolicyMonitor.init(policyChangeHandler:)((uint64_t)partial apply for closure #1 in VoiceCommandsAppPolicyHandler.().init(), (uint64_t)v1);
  uint64_t v10 = (void *)v1[2];
  v1[2] = v9;

  return v1;
}

#error "846B4: call analysis failed (funcsize=222)"

unint64_t DMFPolicy.debugDescription.getter()
{
  return 0xD000000000000011;
}

uint64_t VoiceCommandsAppPolicyHandler.executeWithApps(_:)()
{
  OUTLINED_FUNCTION_10_18();
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = v6;
  uint64_t v10 = v1;
  uint64_t v11 = v0;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  return swift_release();
}

uint64_t closure #1 in VoiceCommandsAppPolicyHandler.executeWithApps(_:)(uint64_t a1, void (*a2)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result + 32;
    swift_beginAccess();
    a2(v4);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

void VoiceCommandsAppPolicyHandler.register(bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_4_12();
  a21 = v24;
  a22 = v25;
  OUTLINED_FUNCTION_10_18();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    OUTLINED_FUNCTION_25_2();
    a10 = OUTLINED_FUNCTION_22_3();
    OUTLINED_FUNCTION_11_14(4.8149e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &a10);
    OUTLINED_FUNCTION_3_16();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_9_15(&dword_0, v29, v30, "VoiceCommandsAppPolicyHandler register, %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v23;
  *(void *)(v31 + 24) = v22;
  swift_bridgeObjectRetain();
  VoiceCommandsAppPolicyHandler.executeWithApps(_:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_212160;
  *(void *)(v32 + 32) = v23;
  *(void *)(v32 + 40) = v22;
  swift_bridgeObjectRetain();
  VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_10();
}

void closure #1 in VoiceCommandsAppPolicyHandler.register(bundleIdentifier:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(*(void *)a1 + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    char v6 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = 0;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v8, v9))
  {

    swift_bridgeObjectRelease_n();
    if (v6) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v10 = swift_slowAlloc();
  uint64_t v13 = swift_slowAlloc();
  *(_DWORD *)uint64_t v10 = 136315394;
  if (v6) {
    uint64_t v11 = 1702195828;
  }
  else {
    uint64_t v11 = 0x65736C6166;
  }
  if (v6) {
    unint64_t v12 = 0xE400000000000000;
  }
  else {
    unint64_t v12 = 0xE500000000000000;
  }
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v10 + 12) = 2080;
  swift_bridgeObjectRetain();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v13);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_0, v8, v9, "VoiceCommandsAppPolicyHandler isRegistered, %s %s", (uint8_t *)v10, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if ((v6 & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.setValue(_:forKey:)(0, a2, a3);
    swift_bridgeObjectRelease();
  }
}

uint64_t VoiceCommandsAppPolicyHandler.getDMFPolicy(bundleIdentifier:)()
{
  OUTLINED_FUNCTION_10_18();
  VoiceCommandsAppPolicyHandler.register(bundleIdentifier:)(v2, v3, v4, v5, v6, v7, v8, v9, v19, v20[0], v20[1], v20[2], v20[3], v20[4], v20[5], v20[6], v20[7], v20[8], v20[9],
    v20[10],
    v20[11],
    v20[12]);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    OUTLINED_FUNCTION_25_2();
    v20[0] = OUTLINED_FUNCTION_22_3();
    OUTLINED_FUNCTION_11_14(4.8149e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, v20);
    OUTLINED_FUNCTION_3_16();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_9_15(&dword_0, v13, v14, "VoiceCommandsAppPolicyHandler getDMFPolicy, %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(unsigned char *)(v15 + 24) = 1;
  uint64_t v16 = (void *)swift_allocObject();
  long long v16[2] = v15;
  v16[3] = v1;
  v16[4] = v0;
  swift_bridgeObjectRetain();
  VoiceCommandsAppPolicyHandler.executeWithApps(_:)();
  swift_retain();
  swift_release();
  swift_beginAccess();
  uint64_t v17 = *(void *)(v15 + 16);
  swift_release();
  return v17;
}

void closure #1 in VoiceCommandsAppPolicyHandler.getDMFPolicy(bundleIdentifier:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized Dictionary.subscript.getter(a3, a4, v7);
  LOBYTE(v7) = v9;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = v7 & 1;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_beginAccess();
    char v14 = *(unsigned char *)(a2 + 24);
    uint64_t v21 = *(void *)(a2 + 16);
    char v22 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DMFPolicy?);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v11, v12, "VoiceCommandsAppPolicyHandler getDMFPolicy, %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  if (*(unsigned char *)(a2 + 24) == 1)
  {
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_0, v17, v18, "VoiceCommandsAppPolicyHandler checkPolicy, app policy undefined", v19, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t VoiceCommandsAppPolicyHandler.refreshAllAppsAsync()()
{
  *(void *)(swift_allocObject() + 16) = _swiftEmptyArrayStorage;
  VoiceCommandsAppPolicyHandler.executeWithApps(_:)();
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)(v0);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in VoiceCommandsAppPolicyHandler.refreshAllAppsAsync()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(a2 + 16) = v4;
  return swift_bridgeObjectRelease();
}

void VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    *(_DWORD *)uint64_t v7 = 134217984;
    OUTLINED_FUNCTION_7_15((uint64_t)v7, v8, (uint64_t)(v7 + 4), (uint64_t)(v7 + 12), v9, v10, v11, v12, *(void *)(a1 + 16));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v5, v6, "VoiceCommandsAppPolicyHandler refreshApps : %ld", v7, 0xCu);
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  if (!*(void *)(a1 + 16))
  {
    v15.super.Class isa = (Class)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled((os_log_t)v15.super.isa, v17)) {
      goto LABEL_14;
    }
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v18 = 0;
    uint64_t v19 = "VoiceCommandsAppPolicyHandler refreshApps, no apps registered";
LABEL_13:
    _os_log_impl(&dword_0, (os_log_t)v15.super.isa, v17, v19, v18, 2u);
    OUTLINED_FUNCTION_7_0();
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)(v1 + 16);
  if (!v13)
  {
    v15.super.Class isa = (Class)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v15.super.isa, v17)) {
      goto LABEL_14;
    }
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v18 = 0;
    uint64_t v19 = "VoiceCommandsAppPolicyHandler appPolicyMonitor not initialized";
    goto LABEL_13;
  }
  id v14 = v13;
  v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  v20[4] = partial apply for closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:);
  v20[5] = v2;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  _OWORD v20[2] = thunk for @escaping @callee_guaranteed (@guaranteed [String : NSNumber]?, @guaranteed Error?) -> ();
  uint64_t v20[3] = &block_descriptor_3;
  unint64_t v16 = _Block_copy(v20);
  swift_retain();
  swift_release();
  [v14 requestPoliciesForBundleIdentifiers:v15.super.isa completionHandler:v16];
  _Block_release(v16);

LABEL_14:
}

void closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_0, v5, v6, "VoiceCommandsAppPolicyHandler requestPolicies completion returned", v7, 2u);
    swift_slowDealloc();
  }

  if (!a2)
  {
    if (a1)
    {
      *(void *)(swift_allocObject() + 16) = a1;
      swift_bridgeObjectRetain();
      VoiceCommandsAppPolicyHandler.executeWithApps(_:)();
      swift_release();
      oslog = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(oslog, v12)) {
        goto LABEL_15;
      }
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      id v14 = "VoiceCommandsAppPolicyHandler refreshApps complete";
    }
    else
    {
      oslog = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(oslog, v12)) {
        goto LABEL_15;
      }
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      id v14 = "VoiceCommandsAppPolicyHandler refreshApps policies not set";
    }
    _os_log_impl(&dword_0, oslog, v12, v14, v13, 2u);
    swift_slowDealloc();
    goto LABEL_15;
  }
  swift_errorRetain();
  swift_errorRetain();
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, oslog, v8, "VoiceCommandsAppPolicyHandler refreshApps appPolicyMonitor requestPolicies has an error : %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    return;
  }
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
LABEL_15:
}

uint64_t closure #1 in closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v43 = a2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a2 + 64);
  int64_t v44 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  int64_t v46 = v6;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v11 << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = *(void **)(*(void *)(a2 + 56) + 8 * i);
    swift_bridgeObjectRetain_n();
    id v47 = v16;
    static DMFPolicy.from(number:)();
    uint64_t v18 = v17;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v22 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)&v48);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2080;
      unint64_t v23 = 0xEC0000004B4F2E79;
      uint64_t v24 = 0x63696C6F50464D44;
      switch(v18)
      {
        case 0:
          break;
        case 1:
          unint64_t v23 = 0xEE006E7261772E79;
          break;
        case 2:
          unint64_t v23 = 0xED00006B73612E79;
          break;
        case 3:
          uint64_t v24 = 0xD000000000000014;
          unint64_t v23 = 0x8000000000227760;
          break;
        case 4:
          uint64_t v25 = "DMFPolicy.UNKNOWN";
          goto LABEL_29;
        default:
          uint64_t v25 = "rovider";
LABEL_29:
          unint64_t v23 = (unint64_t)v25 | 0x8000000000000000;
          uint64_t v24 = 0xD000000000000011;
          break;
      }
      *(void *)(v22 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, (uint64_t *)&v48);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v20, v21, "VoiceCommandsAppPolicyHandler refreshApps, %s to %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v48 = (void *)*a1;
    uint64_t v27 = (uint64_t)v48;
    *a1 = 0x8000000000000000;
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
    uint64_t v30 = *(void *)(v27 + 16);
    BOOL v31 = (v29 & 1) == 0;
    Swift::Int v32 = v30 + v31;
    if (__OFADD__(v30, v31))
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    unint64_t v33 = v28;
    char v34 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, DMFPolicy>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32))
    {
      unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_48;
      }
      unint64_t v33 = v35;
    }
    uint64_t v37 = v48;
    if (v34)
    {
      *(void *)(v48[7] + 8 * v33) = v18;
    }
    else
    {
      v48[(v33 >> 6) + 8] |= 1 << v33;
      uint64_t v38 = (uint64_t *)(v37[6] + 16 * v33);
      uint64_t *v38 = v14;
      v38[1] = v15;
      *(void *)(v37[7] + 8 * v33) = v18;
      uint64_t v39 = v37[2];
      BOOL v40 = __OFADD__(v39, 1);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_45;
      }
      v37[2] = v41;
      swift_bridgeObjectRetain();
    }
    *a1 = (uint64_t)v37;

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    int64_t v6 = v46;
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_46;
    }
    if (v9 >= v44) {
      break;
    }
    unint64_t v10 = *(void *)(v43 + 8 * v9);
    int64_t v11 = v6 + 1;
    if (!v10)
    {
      int64_t v11 = v6 + 2;
      if (v6 + 2 >= v44) {
        break;
      }
      unint64_t v10 = *(void *)(v43 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v6 + 3;
        if (v6 + 3 >= v44) {
          break;
        }
        unint64_t v10 = *(void *)(v43 + 8 * v11);
        if (!v10)
        {
          uint64_t v12 = v6 + 4;
          if (v6 + 4 >= v44) {
            break;
          }
          unint64_t v10 = *(void *)(v43 + 8 * v12);
          if (v10)
          {
            int64_t v11 = v6 + 4;
            goto LABEL_18;
          }
          while (1)
          {
            int64_t v11 = v12 + 1;
            if (__OFADD__(v12, 1)) {
              break;
            }
            if (v11 >= v44) {
              goto LABEL_41;
            }
            unint64_t v10 = *(void *)(v43 + 8 * v11);
            ++v12;
            if (v10) {
              goto LABEL_18;
            }
          }
LABEL_47:
          __break(1u);
LABEL_48:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x861D0);
        }
      }
    }
LABEL_18:
    unint64_t v5 = (v10 - 1) & v10;
    int64_t v46 = v11;
  }
LABEL_41:

  return swift_release();
}

void static DMFPolicy.from(number:)()
{
  OUTLINED_FUNCTION_4_12();
  uint64_t v1 = v0;
  if ((unint64_t)[v0 integerValue] >= 5)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
    id v3 = v1;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      int64_t v6 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      unint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)int64_t v6 = 138412290;
      id v8 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v7 = v3;

      _os_log_impl(&dword_0, v4, v5, "DMFPolicy parse unknown number %@, default to OK", v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
  }
  OUTLINED_FUNCTION_6_10();
}

uint64_t VoiceCommandsAppPolicyHandler.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VoiceCommandsAppPolicyHandler.__deallocating_deinit()
{
  VoiceCommandsAppPolicyHandler.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for VoiceCommandsAppPolicyHandling.isAllowedByScreenTime(bundleIdentifier:) in conformance VoiceCommandsAppPolicyHandler()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))() & 1;
}

id @nonobjc DMFApplicationPolicyMonitor.init(policyChangeHandler:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v6[4] = a1;
    v6[5] = a2;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 1107296256;
    uint64_t v6[2] = thunk for @escaping @callee_guaranteed () -> ();
    v6[3] = &block_descriptor_25_0;
    id v3 = _Block_copy(v6);
    swift_release();
  }
  else
  {
    id v3 = 0;
  }
  id v4 = [v2 initWithPolicyChangeHandler:v3];
  _Block_release(v3);
  return v4;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t type metadata accessor for VoiceCommandsAppPolicyHandler()
{
  return self;
}

void partial apply for closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)(uint64_t a1, uint64_t a2)
{
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_86600()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)(uint64_t *a1)
{
  return closure #1 in closure #1 in VoiceCommandsAppPolicyHandler.refreshAppsAsync(bundleIdentifiers:)(a1, *(void *)(v1 + 16));
}

void specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OUTLINED_FUNCTION_0_13(a1, a2, a3, a4, a5);
  if (v7) {
    __break(1u);
  }
  else {
    OUTLINED_FUNCTION_12_10(v5, v6);
  }
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t partial apply for closure #1 in VoiceCommandsAppPolicyHandler.refreshAllAppsAsync()(uint64_t a1)
{
  return closure #1 in VoiceCommandsAppPolicyHandler.refreshAllAppsAsync()(a1, v1);
}

uint64_t sub_866CC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in VoiceCommandsAppPolicyHandler.register(bundleIdentifier:)(uint64_t a1)
{
  closure #1 in VoiceCommandsAppPolicyHandler.register(bundleIdentifier:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_8670C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in VoiceCommandsAppPolicyHandler.executeWithApps(_:)()
{
  return closure #1 in VoiceCommandsAppPolicyHandler.executeWithApps(_:)(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = OUTLINED_FUNCTION_5_12(a1, a6 + 8 * (a1 >> 6));
  uint64_t v8 = (void *)(v7[6] + 16 * result);
  *uint64_t v8 = v9;
  v8[1] = v10;
  int64_t v11 = (void *)(v7[7] + 16 * result);
  *int64_t v11 = v12;
  v11[1] = v13;
  uint64_t v14 = v7[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    v7[2] = v16;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  OUTLINED_FUNCTION_10_18();
  OUTLINED_FUNCTION_5_12(v9, v8 + 8 * (v9 >> 6));
  uint64_t v11 = *(void *)(v10 + 48);
  uint64_t v12 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11 + *(void *)(*(void *)(v12 - 8) + 72) * v5, v4, v12);
  *(unsigned char *)(*(void *)(a4 + 56) + v5) = a3;
  uint64_t v14 = *(void *)(a4 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(a4 + 16) = v16;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = OUTLINED_FUNCTION_5_12(a1, a4 + 8 * (a1 >> 6));
  *(unsigned char *)(v5[6] + result) = v6;
  *(unsigned char *)(v5[7] + result) = v7;
  uint64_t v8 = v5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    v5[2] = v10;
  }
  return result;
}

uint64_t sub_86888()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_86898()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #1 in VoiceCommandsAppPolicyHandler.getDMFPolicy(bundleIdentifier:)(uint64_t *a1)
{
  closure #1 in VoiceCommandsAppPolicyHandler.getDMFPolicy(bundleIdentifier:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t OUTLINED_FUNCTION_0_13(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_16()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_5_12@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) |= 1 << result;
  return result;
}

uint64_t *OUTLINED_FUNCTION_7_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t OUTLINED_FUNCTION_8_10(uint64_t a1, ...)
{
  va_start(va, a1);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v1, (uint64_t *)va);
}

void OUTLINED_FUNCTION_9_15(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_11_14(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_12_10(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = a2;
}

void Siri_Nlu_External_UserDialogAct.extractAutoShortcutInvocation(groupIndex:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = OUTLINED_FUNCTION_16(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_56();
  uint64_t v7 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_2();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_0();
  uint64_t v13 = v12 - v11;
  if (!specialized static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)(0))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    uint64_t v38 = (void *)OUTLINED_FUNCTION_26_1(v37, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v39))
    {
      BOOL v40 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v40);
      OUTLINED_FUNCTION_2_15(&dword_0, v41, v42, "can't extract UsoTask for AutoShortcutInvocation");
      OUTLINED_FUNCTION_7_0();
    }

    type metadata accessor for AutoShortcutInvocation();
    OUTLINED_FUNCTION_38_5();
    OUTLINED_FUNCTION_27_1();
    __swift_storeEnumTagSinglePayload(v43, v44, v45, v46);
    return;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v70[3])
  {
    swift_release();
    outlined destroy of Any?((uint64_t)v70, &demangling cache variable for type metadata for Any?);
LABEL_49:
    type metadata accessor for AutoShortcutInvocation();
    uint64_t v48 = OUTLINED_FUNCTION_38_5();
    goto LABEL_50;
  }
  type metadata accessor for UsoTask_run_common_VoiceCommand();
  if ((OUTLINED_FUNCTION_37_4() & 1) == 0)
  {
LABEL_48:
    swift_release();
    goto LABEL_49;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  swift_release();
  if (!v70[0])
  {
LABEL_47:
    swift_release();
    goto LABEL_48;
  }
  swift_retain();
  uint64_t v14 = OUTLINED_FUNCTION_10_19();
  swift_release();
  if (!v14)
  {
    swift_release();
    goto LABEL_47;
  }
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 + 16);
  if (!v16)
  {
    swift_release();
LABEL_52:
    swift_release();
LABEL_55:
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  uint64_t v61 = v0;
  uint64_t v62 = v4;
  uint64_t v63 = 0;
  uint64_t countAndFlagsBits = 0;
  uint64_t v66 = 0;
  object = 0;
  uint64_t v65 = 0;
  uint64_t v68 = 0;
  uint64_t v17 = 0;
  uint64_t v19 = v9 + 16;
  uint64_t v18 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
  unint64_t v20 = v15 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64));
  uint64_t v69 = *(void *)(v19 + 56);
  os_log_type_t v21 = (void (**)(uint64_t, uint64_t))(v19 - 8);
  do
  {
    v18(v13, v20, v7);
    uint64_t v22 = UsoIdentifier.groupIndex.getter();
    if ((v22 & 0x100000000) == 0 && v22 == v2)
    {
      uint64_t v23 = v2;
      uint64_t v25 = UsoIdentifier.namespace.getter();
      uint64_t v26 = v24;
      if (v24)
      {
        if (v25 == 0xD000000000000018 && v24 == 0x8000000000227840 || (OUTLINED_FUNCTION_13_12() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v68 = UsoIdentifier.value.getter();
          uint64_t v17 = v27;
LABEL_15:
          uint64_t v2 = v23;
          goto LABEL_31;
        }
        if (v25 == 0xD000000000000014 && v26 == 0x8000000000227820 || (OUTLINED_FUNCTION_13_12() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          UsoIdentifier.value.getter();
          uint64_t v65 = v28;
          goto LABEL_15;
        }
      }
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v26)
      {
        if (v29 == v25 && v26 == v30)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v32 = OUTLINED_FUNCTION_13_12();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0) {
            goto LABEL_30;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        UsoIdentifier.value.getter();
        Swift::String_optional v33 = String.extractActionIdentifier()();
        uint64_t countAndFlagsBits = v33.value._countAndFlagsBits;
        object = v33.value._object;
        swift_bridgeObjectRelease();
        uint64_t v63 = UsoIdentifier.appBundleId.getter();
        uint64_t v66 = v34;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
LABEL_30:
      uint64_t v2 = v23;
    }
LABEL_31:
    (*v21)(v13, v7);
    v20 += v69;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  if (!object)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  if (!v66)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_52;
  }
  uint64_t v35 = v17;
  if (v65)
  {
    uint64_t v36 = v61;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for UUID();
    uint64_t v36 = v61;
    uint64_t v52 = OUTLINED_FUNCTION_15_11();
    __swift_storeEnumTagSinglePayload(v52, v53, v54, v55);
  }
  uint64_t v56 = type metadata accessor for AutoShortcutProvider();
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = [objc_allocWithZone((Class)LNAutoShortcutsProvider) init];
  uint64_t v58 = (int *)type metadata accessor for AutoShortcutInvocation();
  uint64_t v59 = (uint64_t *)((char *)v62 + v58[8]);
  v59[3] = v56;
  v59[4] = (uint64_t)&protocol witness table for AutoShortcutProvider;
  *uint64_t v59 = v57;
  id v60 = [self sharedPreferences];
  swift_release();
  swift_release();
  swift_release();
  *uint64_t v62 = v63;
  v62[1] = v66;
  void v62[2] = countAndFlagsBits;
  v62[3] = (uint64_t)object;
  v62[4] = v68;
  v62[5] = v35;
  outlined init with take of UUID?(v36, (uint64_t)v62 + v58[7], &demangling cache variable for type metadata for UUID?);
  *(uint64_t *)((char *)v62 + v58[9]) = (uint64_t)v60;
  uint64_t v48 = (uint64_t)v62;
  uint64_t v49 = 0;
  uint64_t v50 = 1;
  uint64_t v51 = (uint64_t)v58;
LABEL_50:
  __swift_storeEnumTagSinglePayload(v48, v49, v50, v51);
  OUTLINED_FUNCTION_27_1();
}

void Siri_Nlu_External_UserDialogAct.convertToStarterShortcut()()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL??);
  uint64_t v2 = OUTLINED_FUNCTION_16(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_56();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_51_0();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t v11 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_2();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_20_0();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v19 = OUTLINED_FUNCTION_16(v18);
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_20_0();
  uint64_t v22 = v21 - v20;
  if (!specialized static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)(0))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    uint64_t v38 = (void *)OUTLINED_FUNCTION_26_1(v37, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_16_11(v39))
    {
      BOOL v40 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v40);
      OUTLINED_FUNCTION_20(&dword_0, v41, v42, "can't extract UsoTask for starterShortcut");
      OUTLINED_FUNCTION_7_0();
    }

    goto LABEL_25;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v67[3])
  {
    swift_release();
    uint64_t v43 = &demangling cache variable for type metadata for Any?;
    uint64_t v44 = v67;
    goto LABEL_21;
  }
  type metadata accessor for UsoTask_run_common_VoiceCommand();
  if ((OUTLINED_FUNCTION_37_4() & 1) == 0)
  {
LABEL_24:
    swift_release();
    goto LABEL_25;
  }
  uint64_t v23 = v66;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  swift_release();
  if (!v67[0])
  {
LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  uint64_t v62 = v23;
  uint64_t v60 = v13;
  uint64_t v24 = v67[0];
  swift_retain();
  uint64_t v58 = dispatch thunk of UsoEntity_common_VoiceCommand.name.getter();
  uint64_t v26 = v25;
  swift_release();
  uint64_t v61 = v26;
  if (!v26)
  {
    swift_release();
    goto LABEL_23;
  }
  swift_retain();
  uint64_t v27 = OUTLINED_FUNCTION_10_19();
  swift_release();
  if (!v27)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v55 = v3;
  uint64_t v56 = v24;
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v27 + 16);
  uint64_t v57 = v28;
  if (!v29)
  {
    uint64_t v36 = 1;
    goto LABEL_31;
  }
  uint64_t v52 = v10;
  uint64_t v53 = v0;
  uint64_t v54 = v7;
  uint64_t v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v60 + 16);
  unint64_t v31 = v28 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
  char v32 = (void (**)(uint64_t, uint64_t))(v60 + 8);
  uint64_t v64 = *(void *)(v60 + 72);
  uint64_t v65 = v30;
  swift_bridgeObjectRetain();
  uint64_t v63 = "tcutInvocationData(semantic: ";
  unint64_t v59 = 0x8000000000225C00;
  while (1)
  {
    v65(v17, v31, v11);
    uint64_t v33 = UsoIdentifier.namespace.getter();
    if (!v34) {
      goto LABEL_13;
    }
    if (v33 == 0xD000000000000010 && v34 == v59) {
      break;
    }
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_29;
    }
LABEL_13:
    (*v32)(v17, v11);
    v31 += v64;
    if (!--v29)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = 1;
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease();
LABEL_29:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_73();
  v45();
  uint64_t v36 = 0;
LABEL_30:
  uint64_t v0 = v53;
  uint64_t v7 = v54;
  uint64_t v10 = v52;
LABEL_31:
  uint64_t v46 = v55;
  __swift_storeEnumTagSinglePayload(v22, v36, 1, v11);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24_8(v22, 1, v11);
  if (v47)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v43 = &demangling cache variable for type metadata for UsoIdentifier?;
    uint64_t v44 = (void *)v22;
  }
  else
  {
    uint64_t v48 = UsoIdentifier.value.getter();
    uint64_t v50 = v49;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v22, v11);
    if (one-time initialization token for semanticToURL != -1) {
      swift_once();
    }
    uint64_t v51 = static TopLevelStarterShortcuts.semanticToURL;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.getter(v48, v50, v51, v0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_24_8(v0, 1, v46);
    if (!v47)
    {
      outlined init with take of UUID?(v0, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for URL?);
      outlined init with take of UUID?((uint64_t)v10, v7, (uint64_t *)&demangling cache variable for type metadata for URL?);
      type metadata accessor for InstallVoiceShortcutInvocationData();
      swift_allocObject();
      InstallVoiceShortcutInvocationData.init(semantic:url:utterance:)(v48, v50, v7, v58, v61);
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = &demangling cache variable for type metadata for URL??;
    uint64_t v44 = (void *)v0;
  }
LABEL_21:
  outlined destroy of Any?((uint64_t)v44, v43);
LABEL_25:
  OUTLINED_FUNCTION_27_1();
}

void Siri_Nlu_External_UserDialogAct.convertToVoiceCommandTask()()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShortcutIdentification?);
  uint64_t v3 = OUTLINED_FUNCTION_16(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_51_0();
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v41 - v8);
  uint64_t v10 = (_DWORD *)type metadata accessor for ShortcutIdentification(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_51_0();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v41 - v16;
  if (!specialized static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)(0)) {
    goto LABEL_8;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v44)
  {
    swift_release();
    outlined destroy of Any?((uint64_t)&v43, &demangling cache variable for type metadata for Any?);
LABEL_8:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = (void *)OUTLINED_FUNCTION_26_1(v20, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v23);
      OUTLINED_FUNCTION_2_15(&dword_0, v24, v25, "can't extract UsoTask for voiceCommand-task");
      OUTLINED_FUNCTION_7_0();
    }

    goto LABEL_13;
  }
  outlined init with take of Any(&v43, v45);
  OUTLINED_FUNCTION_23_10();
  type metadata accessor for UsoTask_run_common_VoiceCommand();
  if (OUTLINED_FUNCTION_41_5())
  {
    ShortcutIdentification.init(runTask:)(v9);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);
    OUTLINED_FUNCTION_24_8((uint64_t)v9, 1, (uint64_t)v10);
    if (!v18)
    {
      outlined init with take of ShortcutIdentification((uint64_t)v9, (uint64_t)v17);
      uint64_t v30 = (uint64_t)v17;
LABEL_23:
      outlined init with take of ShortcutIdentification(v30, v1);
      type metadata accessor for VoiceCommandTask(0);
      OUTLINED_FUNCTION_36_4();
      uint64_t v26 = OUTLINED_FUNCTION_14_9();
      goto LABEL_14;
    }
    uint64_t v19 = (uint64_t)v9;
  }
  else
  {
    OUTLINED_FUNCTION_23_10();
    type metadata accessor for UsoTask_execute_common_VoiceCommand();
    if (!OUTLINED_FUNCTION_41_5())
    {
      OUTLINED_FUNCTION_23_10();
      type metadata accessor for UsoTask_enable_common_Setting();
      if (OUTLINED_FUNCTION_42_5())
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter();
        swift_release();
        uint64_t v31 = v43;
        uint64_t v32 = v1;
        char v33 = 0;
      }
      else
      {
        OUTLINED_FUNCTION_23_10();
        type metadata accessor for UsoTask_disable_common_Setting();
        if (OUTLINED_FUNCTION_42_5())
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter();
          swift_release();
          uint64_t v31 = v43;
          uint64_t v32 = v1;
          char v33 = 1;
        }
        else
        {
          OUTLINED_FUNCTION_23_10();
          type metadata accessor for UsoTask_toggle_common_Setting();
          if (!swift_dynamicCast())
          {
            if (one-time initialization token for voiceCommands != -1) {
              swift_once();
            }
            uint64_t v34 = type metadata accessor for Logger();
            __swift_project_value_buffer(v34, (uint64_t)static Logger.voiceCommands);
            OUTLINED_FUNCTION_23_10();
            char v35 = (void *)Logger.logObject.getter();
            os_log_type_t v36 = static os_log_type_t.error.getter();
            if (OUTLINED_FUNCTION_28_7(v36))
            {
              OUTLINED_FUNCTION_27_9();
              uint64_t v42 = OUTLINED_FUNCTION_26_8();
              *uint64_t v10 = 136315138;
              __swift_project_boxed_opaque_existential_1(&v43, v44);
              swift_getDynamicType();
              uint64_t v37 = _typeName(_:qualified:)();
              uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v42);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v43);
              OUTLINED_FUNCTION_17_8(&dword_0, v39, v40, "unknown task type: %s");
              swift_arrayDestroy();
              OUTLINED_FUNCTION_7_0();
              OUTLINED_FUNCTION_7_0();
            }
            else
            {

              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v43);
            }
            swift_release();
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);
            goto LABEL_13;
          }
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter();
          swift_release();
          uint64_t v31 = v43;
          uint64_t v32 = v1;
          char v33 = 2;
        }
      }
      VoiceCommandTask.init(mode:reference:)(v33, v31, v32);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);
      goto LABEL_15;
    }
    ShortcutIdentification.init(exeTask:)();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);
    OUTLINED_FUNCTION_24_8(v6, 1, (uint64_t)v10);
    if (!v18)
    {
      outlined init with take of ShortcutIdentification(v6, v14);
      uint64_t v30 = v14;
      goto LABEL_23;
    }
    uint64_t v19 = v6;
  }
  outlined destroy of Any?(v19, &demangling cache variable for type metadata for ShortcutIdentification?);
LABEL_13:
  type metadata accessor for VoiceCommandTask(0);
  uint64_t v26 = OUTLINED_FUNCTION_15_11();
LABEL_14:
  __swift_storeEnumTagSinglePayload(v26, v27, v28, v29);
LABEL_15:
  OUTLINED_FUNCTION_27_1();
}

void Siri_Nlu_External_UserDialogAct.extractGeneralizedAppShortcutInvocation(groupIndex:provider:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v118 = v0;
  uint64_t v124 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_2();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_25_6();
  uint64_t v119 = v8;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v9);
  uint64_t v123 = (char *)&v108 - v10;
  OUTLINED_FUNCTION_25_7();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v108 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v108 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v19 = OUTLINED_FUNCTION_16(v18);
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_25_6();
  uint64_t v117 = v20;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v21);
  uint64_t v122 = (uint64_t)&v108 - v22;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v23);
  uint64_t v120 = (void (*)(char *, uint64_t, uint64_t))((char *)&v108 - v24);
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v108 - v26;
  uint64_t v28 = specialized static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)(0);
  if (!v28)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    uint64_t v52 = (void *)OUTLINED_FUNCTION_26_1(v51, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v53))
    {
      uint64_t v54 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v54);
      OUTLINED_FUNCTION_2_15(&dword_0, v55, v56, "can't extract UsoTask for AutoShortcutInvocation");
      OUTLINED_FUNCTION_7_0();
    }

    goto LABEL_43;
  }
  uint64_t v29 = v28;
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v126)
  {
    outlined destroy of Any?((uint64_t)&v125, &demangling cache variable for type metadata for Any?);
    goto LABEL_38;
  }
  type metadata accessor for UsoTask_execute_common_VoiceCommand();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_38:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_26_1(v57, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v59))
    {
      uint64_t v60 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v60);
      OUTLINED_FUNCTION_2_15(&dword_0, v61, v62, "Could not cast to VoiceCommand task to create AppShortcut invocation");
      OUTLINED_FUNCTION_7_0();
    }

    swift_release();
LABEL_43:
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)uint64_t v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    goto LABEL_44;
  }
  uint64_t v30 = v127;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.reference.getter();
  uint64_t v114 = v30;
  swift_release();
  if (!(void)v125)
  {
    uint64_t v32 = (uint64_t)v120;
    goto LABEL_46;
  }
  uint64_t v31 = OUTLINED_FUNCTION_10_19();
  swift_release();
  uint64_t v32 = (uint64_t)v120;
  if (!v31)
  {
LABEL_46:
    OUTLINED_FUNCTION_34_6();
    goto LABEL_47;
  }
  uint64_t v111 = v14;
  uint64_t v33 = *(void *)(v31 + 16);
  if (!v33)
  {
LABEL_31:
    OUTLINED_FUNCTION_34_6();
    swift_bridgeObjectRelease();
    uint64_t v14 = v111;
    goto LABEL_47;
  }
  v112 = v27;
  uint64_t v113 = v29;
  char v109 = v3;
  uint64_t v110 = v6;
  uint64_t v3 = v6 + 2;
  uint64_t v121 = (void (*)(char *, uint64_t, uint64_t))v6[2];
  OUTLINED_FUNCTION_33_6();
  uint64_t v115 = (void *)v6[9];
  uint64_t v116 = IdentifierNamespaceItemId;
  uint64_t v108 = v31;
  swift_bridgeObjectRetain();
  while (1)
  {
    v121(v17, v29, v4);
    uint64_t v34 = UsoIdentifier.namespace.getter();
    uint64_t v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if ((v124 & 0x100000000) != 0) {
      break;
    }
    if (!v36)
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = OUTLINED_FUNCTION_9_16();
      v44(v43);
LABEL_24:
      OUTLINED_FUNCTION_30_7();
      v45();
      goto LABEL_29;
    }
    BOOL v39 = v34 == v37 && v36 == v38;
    if (v39)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v46 = OUTLINED_FUNCTION_9_16();
      v47(v46);
    }
    else
    {
      OUTLINED_FUNCTION_6_11();
      OUTLINED_FUNCTION_46_3();
      swift_bridgeObjectRelease();
      uint64_t v40 = OUTLINED_FUNCTION_9_16();
      v41(v40);
      if ((v34 & 1) == 0) {
        goto LABEL_24;
      }
    }
    uint64_t v48 = UsoIdentifier.groupIndex.getter();
    OUTLINED_FUNCTION_30_7();
    v49();
    if ((v48 & 0x100000000) == 0 && v48 == v124)
    {
LABEL_89:
      uint64_t v3 = (void *)v108;
      goto LABEL_91;
    }
LABEL_29:
    OUTLINED_FUNCTION_30_7();
    v50();
    v29 += (uint64_t)v115;
    if (!--v33)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_45_2();
      uint64_t v27 = v112;
      uint64_t v29 = v113;
      uint64_t v6 = v110;
      uint64_t v32 = (uint64_t)v120;
      goto LABEL_31;
    }
  }
  if (!v36)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  if (v34 != v37 || v36 != v38)
  {
    OUTLINED_FUNCTION_6_11();
    OUTLINED_FUNCTION_46_3();
    swift_bridgeObjectRelease();
    if (v34) {
      goto LABEL_89;
    }
    goto LABEL_29;
  }
  uint64_t v3 = (void *)v108;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_91:
  swift_bridgeObjectRelease();
  uint64_t v6 = v110;
  uint64_t v27 = v112;
  OUTLINED_FUNCTION_73();
  v106();
  __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v4);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_45_2();
  uint64_t v29 = v113;
  uint64_t v14 = v111;
  uint64_t v32 = (uint64_t)v120;
LABEL_47:
  outlined init with copy of UsoIdentifier?((uint64_t)v27, v32);
  OUTLINED_FUNCTION_24_8(v32, 1, v4);
  uint64_t v63 = v122;
  if (v39)
  {
    outlined destroy of Any?(v32, &demangling cache variable for type metadata for UsoIdentifier?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    uint64_t v65 = (void *)OUTLINED_FUNCTION_26_1(v64, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v66))
    {
      uint64_t v67 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v67);
      OUTLINED_FUNCTION_2_15(&dword_0, v68, v69, "Could not extract App Shortcut action identifier from USO parse when creating AppShortcut invocation");
      OUTLINED_FUNCTION_7_0();
    }
    swift_release();

    swift_release();
    outlined destroy of Any?((uint64_t)v27, &demangling cache variable for type metadata for UsoIdentifier?);
    *(_OWORD *)uint64_t v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    goto LABEL_44;
  }
  v112 = v27;
  uint64_t v70 = v6 + 4;
  uint64_t v120 = (void (*)(char *, uint64_t, uint64_t))v6[4];
  v120(v14, v32, v4);
  swift_retain();
  uint64_t v71 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
  swift_release();
  uint64_t v113 = v29;
  if (!v71
    || (uint64_t v72 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.appEntity.getter(), swift_release(), !v72)
    || (uint64_t v73 = OUTLINED_FUNCTION_10_19(), swift_release(), !v73))
  {
    OUTLINED_FUNCTION_35_5();
    goto LABEL_84;
  }
  uint64_t v110 = v6;
  uint64_t v74 = *(void *)(v73 + 16);
  if (!v74)
  {
LABEL_82:
    OUTLINED_FUNCTION_35_5();
    swift_bridgeObjectRelease();
    uint64_t v6 = v110;
LABEL_84:
    uint64_t v92 = v63;
    goto LABEL_85;
  }
  uint64_t v115 = v70;
  uint64_t v111 = v14;
  char v109 = v3;
  uint64_t v3 = v110 + 2;
  id v75 = (void (*)(char *, uint64_t, uint64_t))v110[2];
  OUTLINED_FUNCTION_33_6();
  uint64_t v121 = (void (*)(char *, uint64_t, uint64_t))v3[7];
  uint64_t v116 = v73;
  swift_bridgeObjectRetain();
  uint64_t v76 = v123;
  while (1)
  {
    v75(v76, v29, v4);
    uint64_t v77 = UsoIdentifier.namespace.getter();
    uint64_t v79 = v78;
    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if ((v124 & 0x100000000) != 0) {
      break;
    }
    if (!v79)
    {
      swift_bridgeObjectRelease();
      uint64_t v85 = OUTLINED_FUNCTION_11_15();
      ((void (*)(uint64_t))v75)(v85);
LABEL_75:
      uint64_t v86 = OUTLINED_FUNCTION_29_6();
      v87(v86);
      goto LABEL_80;
    }
    if (v77 == v80 && v79 == v81)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v88 = OUTLINED_FUNCTION_11_15();
      ((void (*)(uint64_t))v75)(v88);
    }
    else
    {
      OUTLINED_FUNCTION_6_11();
      OUTLINED_FUNCTION_46_3();
      swift_bridgeObjectRelease();
      uint64_t v83 = OUTLINED_FUNCTION_11_15();
      ((void (*)(uint64_t))v75)(v83);
      if ((v77 & 1) == 0) {
        goto LABEL_75;
      }
    }
    uint64_t v89 = UsoIdentifier.groupIndex.getter();
    uint64_t v90 = OUTLINED_FUNCTION_29_6();
    v91(v90);
    if ((v89 & 0x100000000) == 0 && v89 == v124)
    {
LABEL_92:
      uint64_t v3 = (void *)v116;
      goto LABEL_94;
    }
LABEL_80:
    uint64_t v76 = v123;
    ((void (*)(char *, uint64_t))*(v3 - 1))(v123, v4);
    v29 += (uint64_t)v121;
    if (!--v74)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_45_2();
      uint64_t v14 = v111;
      uint64_t v63 = v122;
      goto LABEL_82;
    }
  }
  if (!v79)
  {
    swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  if (v77 != v80 || v79 != v81)
  {
    OUTLINED_FUNCTION_6_11();
    OUTLINED_FUNCTION_46_3();
    swift_bridgeObjectRelease();
    if (v77) {
      goto LABEL_92;
    }
    goto LABEL_80;
  }
  uint64_t v3 = (void *)v116;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_94:
  swift_bridgeObjectRelease();
  uint64_t v92 = v122;
  OUTLINED_FUNCTION_73();
  v107();
  __swift_storeEnumTagSinglePayload(v92, 0, 1, v4);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_45_2();
  uint64_t v6 = v110;
  uint64_t v14 = v111;
LABEL_85:
  unint64_t v93 = v6;
  uint64_t v94 = UsoIdentifier.appBundleId.getter();
  uint64_t v123 = v95;
  uint64_t v124 = v94;
  uint64_t v96 = UsoIdentifier.value.getter();
  uint64_t v98 = v97;
  uint64_t v99 = v92;
  uint64_t v100 = v117;
  outlined init with copy of UsoIdentifier?(v99, v117);
  OUTLINED_FUNCTION_24_8(v100, 1, v4);
  if (v39)
  {
    outlined destroy of Any?(v100, &demangling cache variable for type metadata for UsoIdentifier?);
    uint64_t v101 = 0;
    uint64_t v103 = 0;
  }
  else
  {
    uint64_t v101 = UsoIdentifier.value.getter();
    uint64_t v103 = v102;
    ((void (*)(uint64_t, uint64_t))v93[1])(v100, v4);
  }
  outlined init with copy of DeviceState(v118, (uint64_t)&v125);
  id v104 = [self sharedPreferences];
  swift_release();
  swift_release();
  outlined destroy of Any?(v122, &demangling cache variable for type metadata for UsoIdentifier?);
  ((void (*)(char *, uint64_t))v93[1])(v14, v4);
  outlined destroy of Any?((uint64_t)v112, &demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v105 = v123;
  v3[5] = v124;
  v3[6] = v105;
  v3[3] = v101;
  v3[4] = v103;
  v3[1] = v96;
  v3[2] = v98;
  *uint64_t v3 = v104;
  outlined init with take of AceServiceInvokerAsync(&v125, (uint64_t)(v3 + 7));
LABEL_44:
  OUTLINED_FUNCTION_27_1();
}

uint64_t ShortcutIdentification.init(runTask:)@<X0>(uint64_t *a1@<X8>)
{
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  if (v15)
  {
    uint64_t v2 = dispatch thunk of UsoEntity_common_VoiceCommand.name.getter();
    unint64_t v4 = v3;
    swift_release();
    if (v4)
    {
      uint64_t v5 = HIBYTE(v4) & 0xF;
      if ((v4 & 0x2000000000000000) == 0) {
        uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
      }
      if (v5)
      {
        swift_release();
        *a1 = v2;
        a1[1] = v4;
        type metadata accessor for ShortcutIdentification(0);
        OUTLINED_FUNCTION_36_4();
        uint64_t v6 = OUTLINED_FUNCTION_14_9();
        return __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
      }
      swift_bridgeObjectRelease();
    }
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = OUTLINED_FUNCTION_26_1(v10, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "reference-name NOT found in run VoiceCommand task", v13, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  swift_release();
  type metadata accessor for ShortcutIdentification(0);
  uint64_t v6 = OUTLINED_FUNCTION_15_11();
  return __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
}

void ShortcutIdentification.init(exeTask:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = OUTLINED_FUNCTION_16(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_50_1();
  uint64_t v54 = v8;
  uint64_t v55 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_2();
  uint64_t v53 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_50_1();
  uint64_t v52 = v11;
  uint64_t v63 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_2();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_51_0();
  unint64_t v17 = v15 - v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v50 - v19;
  uint64_t v56 = v3;
  dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.reference.getter();
  if (!v64 || (uint64_t v21 = OUTLINED_FUNCTION_10_19(), swift_release(), !v21))
  {
LABEL_24:
    uint64_t v1 = (char *)v55;
    static ShortcutIdentification.extractShortcutId(identifiers:)();
    uint64_t v0 = v34;
    unint64_t v17 = v35;
    swift_bridgeObjectRelease();
    if (v17)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = v54;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_24_8(v36, 1, (uint64_t)v1);
      if (!v28)
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v44 = v52;
        uint64_t v45 = *(void (**)(uint64_t, uint64_t, char *))(v53 + 32);
        v45(v52, v36, v1);
        v45(v5, v44, v1);
        uint64_t v46 = type metadata accessor for ShortcutIdentification(0);
        swift_storeEnumTagMultiPayload();
        uint64_t v47 = v5;
        uint64_t v48 = 0;
        uint64_t v49 = v46;
        goto LABEL_36;
      }
      outlined destroy of Any?(v36, &demangling cache variable for type metadata for UUID?);
    }
    if (one-time initialization token for voiceCommands != -1) {
      goto LABEL_38;
    }
    goto LABEL_29;
  }
  uint64_t v64 = _swiftEmptyArrayStorage;
  uint64_t v62 = *(void *)(v21 + 16);
  if (!v62)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  unint64_t v51 = v5;
  unint64_t v5 = 0;
  uint64_t v61 = v13 + 16;
  os_log_type_t v59 = (void (**)(void))(v13 + 32);
  uint64_t v60 = IdentifierNamespaceSemanticValue;
  unint64_t v57 = v17;
  uint64_t v58 = (void (**)(char *, uint64_t))(v13 + 8);
  while (v5 < *(void *)(v21 + 16))
  {
    uint64_t v1 = (char *)((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v0 = *(void *)(v13 + 72);
    uint64_t v22 = v21;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, &v1[v21 + v0 * v5], v63);
    uint64_t v23 = UsoIdentifier.namespace.getter();
    uint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v25)
    {
      BOOL v28 = v23 == v26 && v25 == v27;
      if (v28)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_16:
        uint64_t v30 = *v59;
        OUTLINED_FUNCTION_73();
        v30();
        uint64_t v31 = v64;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1);
          uint64_t v31 = v64;
        }
        unint64_t v33 = v31[2];
        unint64_t v32 = v31[3];
        if (v33 >= v32 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
          uint64_t v31 = v64;
        }
        v31[2] = v33 + 1;
        unint64_t v17 = v57;
        OUTLINED_FUNCTION_73();
        v30();
        uint64_t v64 = v31;
        goto LABEL_21;
      }
      char v29 = OUTLINED_FUNCTION_13_12();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v29) {
        goto LABEL_16;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*v58)(v20, v63);
LABEL_21:
    uint64_t v21 = v22;
    if (v62 == ++v5)
    {
      unint64_t v5 = v51;
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_38:
  swift_once();
LABEL_29:
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain();
  uint64_t v38 = (void *)Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_28_7(v39))
  {
    OUTLINED_FUNCTION_27_9();
    uint64_t v64 = (void *)OUTLINED_FUNCTION_26_8();
    *(_DWORD *)uint64_t v1 = 136315138;
    if (v17)
    {
      unint64_t v40 = v17;
    }
    else
    {
      uint64_t v0 = 63;
      unint64_t v40 = 0xE100000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v40, (uint64_t *)&v64);
    OUTLINED_FUNCTION_39_6(v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_8(&dword_0, v42, v43, "UUID NOT found in execute VoiceCommand task; idString=%s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_release();
  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v49 = type metadata accessor for ShortcutIdentification(0);
  uint64_t v47 = v5;
  uint64_t v48 = 1;
LABEL_36:
  __swift_storeEnumTagSinglePayload(v47, v48, 1, v49);
  OUTLINED_FUNCTION_27_1();
}

uint64_t VoiceCommandTask.init(mode:reference:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = static VoiceCommandTask.extractAssociatedAppId(reference:)(a2);
  uint64_t v7 = v6;
  swift_release();
  if (v7)
  {
    *(unsigned char *)a3 = a1;
    *(void *)(a3 + 8) = v5;
    *(void *)(a3 + 16) = v7;
    type metadata accessor for VoiceCommandTask(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v8 = OUTLINED_FUNCTION_14_9();
  }
  else
  {
    type metadata accessor for VoiceCommandTask(0);
    uint64_t v8 = OUTLINED_FUNCTION_15_11();
  }

  return __swift_storeEnumTagSinglePayload(v8, v9, v10, v11);
}

Swift::String_optional __swiftcall String.extractActionIdentifier()()
{
  v0._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (v1[2])
  {
    uint64_t v2 = v1[4];
    uint64_t v3 = (void *)v1[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  result.value._object = v5;
  result.value._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t Siri_Nlu_External_UserDialogAct.getFirstTask()()
{
  unint64_t v0 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v9 = v0;
  unint64_t v10 = v0 >> 62;
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter())
    {
LABEL_10:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v9 & 0xC000000000000001) == 0);
      if ((v9 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(v9 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      if (v10)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v12 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8));
      }
      swift_bridgeObjectRelease();
      if (v12 >= 2)
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        uint64_t v14 = (void *)OUTLINED_FUNCTION_26_1(v13, (uint64_t)static Logger.voiceCommands);
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_32(v15))
        {
          uint64_t v16 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_22_10(v16);
          OUTLINED_FUNCTION_2_15(&dword_0, v17, v18, "#LINK More than one task found in UDA");
          OUTLINED_FUNCTION_7_0();
        }
      }
      return v7;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_26_1(v1, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_16_11(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v4);
    OUTLINED_FUNCTION_20(&dword_0, v5, v6, "No tasks found in UDA");
    OUTLINED_FUNCTION_7_0();
  }

  return 0;
}

uint64_t specialized static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)(char a1)
{
  unint64_t v2 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v3 = v2;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.voiceCommands);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "dialogAct has no task", v15, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
  if (!v4) {
    goto LABEL_18;
  }
LABEL_3:
  if (v4 >= 2)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_0, v6, v7, "dialogAct has more than 1 task", v8, 2u);
      swift_slowDealloc();
    }

    if (a1)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v3 & 0xC000000000000001) == 0);
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)(char a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  LOBYTE(v4) = 0;
  unint64_t v5 = a3(a2);
  unint64_t v6 = v5;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    os_log_type_t v15 = (void *)OUTLINED_FUNCTION_26_1(v14, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_16_11(v16))
    {
      uint64_t v17 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v17);
      OUTLINED_FUNCTION_20(&dword_0, v18, v19, "dialogAct has no task");
      OUTLINED_FUNCTION_7_0();
    }

    return 0;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
  if (!v7) {
    goto LABEL_18;
  }
LABEL_3:
  if (v7 >= 2)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = OUTLINED_FUNCTION_26_1(v8, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v10))
    {
      uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_0, v9, (os_log_type_t)v4, "dialogAct has more than 1 task", v11, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    if (a1)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000001) == 0);
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v12 = *(void *)(v6 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t implicit closure #1 in default argument 2 of static Siri_Nlu_External_UserDialogAct.extractUsoTask(expectSingleTask:uda:convertUserDialogActToTasks:)()
{
  return static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
}

void static ShortcutIdentification.extractShortcutId(identifiers:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = v6 - v5;
  if (v2)
  {
    if (*(void *)(v2 + 16) < 2uLL)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v8 = one-time initialization token for voiceCommands;
      swift_bridgeObjectRetain();
      if (v8 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      os_log_type_t v10 = (void *)Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_28_7(v11))
      {
        OUTLINED_FUNCTION_27_9();
        uint64_t v26 = OUTLINED_FUNCTION_26_8();
        *unint64_t v0 = 136315138;
        type metadata accessor for UsoIdentifier();
        swift_bridgeObjectRetain();
        uint64_t v12 = Array.description.getter();
        unint64_t v14 = v13;
        swift_bridgeObjectRelease();
        uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v26);
        OUTLINED_FUNCTION_39_6(v15);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    specialized Collection.first.getter(v2, v7);
    swift_bridgeObjectRelease();
    uint64_t v24 = type metadata accessor for UsoIdentifier();
    OUTLINED_FUNCTION_24_8(v7, 1, v24);
    if (v25)
    {
      outlined destroy of Any?(v7, &demangling cache variable for type metadata for UsoIdentifier?);
    }
    else
    {
      UsoIdentifier.value.getter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v7, v24);
    }
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = (void *)OUTLINED_FUNCTION_26_1(v18, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_16_11(v20))
    {
      uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v21);
      OUTLINED_FUNCTION_7_0();
    }
  }
  OUTLINED_FUNCTION_27_1();
}

const char *VoiceCommandTask.enablementSettingValue.unsafeMutableAddressor()
{
  return "shortcuts";
}

uint64_t static VoiceCommandTask.enablementSettingValue.getter()
{
  return 0x74756374726F6873;
}

uint64_t static VoiceCommandTask.extractAssociatedAppId(reference:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v75 - v7;
  uint64_t v9 = type metadata accessor for UsoIdentifier();
  uint64_t v85 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v77 = (char *)v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v78 = (char *)v75 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v84 = (char *)v75 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v75 - v16;
  if (!a1) {
    goto LABEL_28;
  }
  uint64_t v76 = v6;
  uint64_t v18 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  unint64_t v19 = v18;
  if (!v18)
  {
    uint64_t v1 = 0;
    goto LABEL_29;
  }
  os_log_type_t v20 = _swiftEmptyArrayStorage;
  uint64_t v87 = _swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(v18 + 16);
  uint64_t v80 = v9;
  uint64_t v83 = v21;
  if (v21)
  {
    v75[0] = v8;
    v75[1] = a1;
    unint64_t v22 = 0;
    uint64_t v82 = v85 + 16;
    uint64_t v81 = (void (*)(char *, uint64_t))IdentifierNamespaceShortcutSetting;
    uint64_t v23 = (void (**)(char *, char *, uint64_t))(v85 + 32);
    uint64_t v79 = (void (**)(char *, uint64_t))(v85 + 8);
    while (1)
    {
      if (v22 >= *(void *)(v19 + 16))
      {
        __break(1u);
LABEL_77:
        swift_once();
LABEL_30:
        uint64_t v38 = type metadata accessor for Logger();
        __swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
        swift_bridgeObjectRetain();
        os_log_type_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          uint64_t v87 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136315138;
          if (v19)
          {
            unint64_t v42 = v19;
          }
          else
          {
            uint64_t v1 = 63;
            unint64_t v42 = 0xE100000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v42, (uint64_t *)&v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v39, v40, "ignoring non-enablement common_Setting; parse identifier value=%s",
            v41,
            0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return 0;
      }
      unint64_t v24 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      uint64_t v1 = *(void *)(v85 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v85 + 16))(v17, v19 + v24 + v1 * v22, v9);
      uint64_t v25 = UsoIdentifier.namespace.getter();
      uint64_t v27 = v26;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v27)
      {
        if (v25 == v28 && v27 == v29)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_16:
          unint64_t v32 = *v23;
          (*v23)(v84, v17, v9);
          unint64_t v33 = v87;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1);
            unint64_t v33 = v87;
          }
          unint64_t v35 = v33[2];
          unint64_t v34 = v33[3];
          if (v35 >= v34 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
            unint64_t v33 = v87;
          }
          v33[2] = v35 + 1;
          uint64_t v36 = (char *)v33 + v24 + v35 * v1;
          uint64_t v9 = v80;
          v32(v36, v84, v80);
          uint64_t v87 = v33;
          goto LABEL_21;
        }
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v31) {
          goto LABEL_16;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      (*v79)(v17, v9);
LABEL_21:
      if (v83 == ++v22)
      {
        uint64_t v37 = v87;
        uint64_t v8 = (char *)v75[0];
        os_log_type_t v20 = _swiftEmptyArrayStorage;
        goto LABEL_25;
      }
    }
  }
  uint64_t v37 = _swiftEmptyArrayStorage;
LABEL_25:
  swift_bridgeObjectRelease();
  if (!v37) {
    goto LABEL_28;
  }
  specialized Collection.first.getter((uint64_t)v37, (uint64_t)v8);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for UsoIdentifier?);
LABEL_28:
    uint64_t v1 = 0;
    unint64_t v19 = 0;
    goto LABEL_29;
  }
  uint64_t v1 = UsoIdentifier.value.getter();
  unint64_t v19 = v45;
  uint64_t v81 = *(void (**)(char *, uint64_t))(v85 + 8);
  uint64_t v82 = v85 + 8;
  v81(v8, v9);
  BOOL v46 = v1 == 0x74756374726F6873 && v19 == 0xE900000000000073;
  if (!v46 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_29:
    if (one-time initialization token for voiceCommands != -1) {
      goto LABEL_77;
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  uint64_t v47 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
  uint64_t v48 = v80;
  if (!v47 || (uint64_t v49 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(), swift_release(), !v49))
  {
LABEL_72:
    if (one-time initialization token for voiceCommands != -1) {
      goto LABEL_79;
    }
    goto LABEL_73;
  }
  uint64_t v87 = _swiftEmptyArrayStorage;
  uint64_t v50 = *(void *)(v49 + 16);
  if (!v50)
  {
LABEL_65:
    swift_bridgeObjectRelease();
    if (v20)
    {
      uint64_t v67 = (uint64_t)v76;
      specialized Collection.first.getter((uint64_t)v20, (uint64_t)v76);
      swift_bridgeObjectRelease();
      if (__swift_getEnumTagSinglePayload(v67, 1, v48) == 1)
      {
        outlined destroy of Any?(v67, &demangling cache variable for type metadata for UsoIdentifier?);
      }
      else
      {
        uint64_t v43 = UsoIdentifier.value.getter();
        unint64_t v69 = v68;
        v81((char *)v67, v48);
        uint64_t v70 = HIBYTE(v69) & 0xF;
        if ((v69 & 0x2000000000000000) == 0) {
          uint64_t v70 = v43 & 0xFFFFFFFFFFFFLL;
        }
        if (v70) {
          return v43;
        }
        swift_bridgeObjectRelease();
      }
    }
    goto LABEL_72;
  }
  unint64_t v51 = 0;
  uint64_t v84 = (char *)(v85 + 16);
  uint64_t v83 = IdentifierNamespaceItemId;
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v85 + 32);
  while (v51 < *(void *)(v49 + 16))
  {
    unint64_t v53 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
    uint64_t v54 = *(void *)(v85 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v85 + 16))(v78, v49 + v53 + v54 * v51, v48);
    uint64_t v55 = UsoIdentifier.namespace.getter();
    uint64_t v57 = v56;
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v57)
    {
      if (v55 == v58 && v57 == v59)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_58:
        uint64_t v62 = *v52;
        (*v52)(v77, v78, v48);
        uint64_t v63 = v87;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1);
          uint64_t v63 = v87;
        }
        unint64_t v65 = v63[2];
        unint64_t v64 = v63[3];
        if (v65 >= v64 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1);
          uint64_t v63 = v87;
        }
        v63[2] = v65 + 1;
        os_log_type_t v66 = (char *)v63 + v53 + v65 * v54;
        uint64_t v48 = v80;
        v62(v66, v77, v80);
        uint64_t v87 = v63;
        goto LABEL_63;
      }
      char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v61) {
        goto LABEL_58;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v81(v78, v48);
LABEL_63:
    if (v50 == ++v51)
    {
      os_log_type_t v20 = v87;
      goto LABEL_65;
    }
  }
  __break(1u);
LABEL_79:
  swift_once();
LABEL_73:
  uint64_t v71 = type metadata accessor for Logger();
  __swift_project_value_buffer(v71, (uint64_t)static Logger.voiceCommands);
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v74 = 0;
    _os_log_impl(&dword_0, v72, v73, "associatedApp-ID NOT found", v74, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();

  return _typeName(_:qualified:)();
}

uint64_t outlined init with take of ShortcutIdentification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShortcutIdentification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UsoIdentifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_2_15(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_6_11()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_9_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_19()
{
  return dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
}

uint64_t OUTLINED_FUNCTION_11_15()
{
  return *(void *)(v0 - 184);
}

uint64_t OUTLINED_FUNCTION_13_12()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_14_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_11()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_16_11(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_17_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

_WORD *OUTLINED_FUNCTION_22_10(_WORD *result)
{
  *Swift::String_optional result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_23_10()
{
  return outlined init with copy of Any(v0 - 112, v0 - 144);
}

uint64_t OUTLINED_FUNCTION_24_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_26_8()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_27_9()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_28_7(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_29_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_6()
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_35_5()
{
  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_36_4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_37_4()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_38_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_39_6(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t OUTLINED_FUNCTION_41_5()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_42_5()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_46_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t AutoShortcutProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)LNAutoShortcutsProvider) init];
  return v0;
}

uint64_t AutoShortcutProvider.init()()
{
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)LNAutoShortcutsProvider) init];
  return v0;
}

uint64_t AutoShortcutProvider.autoShortcuts(forBundleIdentifier:localeIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutProvider.autoShortcuts(forBundleIdentifier:localeIdentifier:));
}

uint64_t AutoShortcutProvider.autoShortcuts(forBundleIdentifier:localeIdentifier:)()
{
  uint64_t v1 = *(void **)(v0[20] + 16);
  NSString v2 = String._bridgeToObjectiveC()();
  v0[21] = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[22] = v3;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = AutoShortcutProvider.autoShortcuts(forBundleIdentifier:localeIdentifier:);
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [LNAutoShortcut];
  v0[13] = &block_descriptor_4;
  v0[14] = v4;
  [v1 autoShortcutsForBundleIdentifier:v2 localeIdentifier:v3 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_16();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 184) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 168);

  NSString v2 = OUTLINED_FUNCTION_39_0();
  return v3(v2);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 176);
  NSString v2 = *(void **)(v0 + 168);
  swift_willThrow();

  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [LNAutoShortcut](uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, v4);
  }
  else
  {
    type metadata accessor for LNAutoShortcut();
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, v6);
  }
}

uint64_t AutoShortcutProvider.retrieveAction(for:)(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutProvider.retrieveAction(for:));
}

uint64_t AutoShortcutProvider.retrieveAction(for:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[16];
  uint64_t v2 = *(void **)(v0[17] + 16);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = AutoShortcutProvider.retrieveAction(for:);
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
  v0[13] = &block_descriptor_2;
  v0[14] = v3;
  [v2 retrieveActionForLocalizedPhrase:v1 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_16();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 144) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 120));
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_willThrow();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t AutoShortcutProvider.retrieveAction(bundleIdentifier:basePhraseTemplate:actionIdentifier:parameterIdentifier:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[22] = v2;
  v1[23] = v0;
  v1[20] = v3;
  v1[21] = v4;
  v1[18] = v5;
  v1[19] = v6;
  v1[16] = v7;
  v1[17] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v1[24] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  NSString v4;
  NSString v5;
  NSString v6;
  uint64_t v7;
  int EnumTagSinglePayload;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v1 = v0[24];
  uint64_t v2 = v0[22];
  uint64_t v3 = *(void **)(v0[23] + 16);
  uint64_t v4 = String._bridgeToObjectiveC()();
  v0[25] = v4;
  uint64_t v5 = String._bridgeToObjectiveC()();
  v0[26] = v5;
  uint64_t v6 = String._bridgeToObjectiveC()();
  v0[27] = v6;
  outlined init with copy of UUID?(v2, v1);
  uint64_t v7 = type metadata accessor for UUID();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v7);
  Class isa = 0;
  if (EnumTagSinglePayload != 1)
  {
    uint64_t v10 = v0[24];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v10, v7);
  }
  v0[28] = isa;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = AutoShortcutProvider.retrieveAction(bundleIdentifier:basePhraseTemplate:actionIdentifier:parameterIdentifier:);
  uint64_t v11 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
  v0[13] = &block_descriptor_4;
  v0[14] = v11;
  [v3 retrieveActionForBundleIdentifier:v4 basePhraseTemplate:v5 actionIdentifier:v6 parameterIdentifier:isa completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_16();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 232) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 200);
  uint64_t v2 = *(void **)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 120);

  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[28];
  uint64_t v3 = (void *)v0[26];
  uint64_t v2 = (void *)v0[27];
  uint64_t v4 = (void *)v0[25];
  swift_willThrow();

  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v5();
}

uint64_t AutoShortcutProvider.retrieveAction(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[21] = a6;
  v7[22] = v6;
  v7[19] = a4;
  v7[20] = a5;
  v7[17] = a2;
  v7[18] = a3;
  v7[16] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutProvider.retrieveAction(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:));
}

uint64_t AutoShortcutProvider.retrieveAction(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:)()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = *(void **)(v0[22] + 16);
  NSString v3 = String._bridgeToObjectiveC()();
  v0[23] = v3;
  NSString v4 = String._bridgeToObjectiveC()();
  v0[24] = v4;
  if (v1) {
    NSString v5 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v5 = 0;
  }
  v0[25] = v5;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = AutoShortcutProvider.retrieveAction(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:);
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
  v0[13] = &block_descriptor_6_0;
  v0[14] = v6;
  [v2 retrieveActionForBundleIdentifier:v3 appShortcutIdentifier:v4 parameterIdentifier:v5 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_16();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 208) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void **)(v0 + 184);

  NSString v3 = OUTLINED_FUNCTION_39_0();
  return v4(v3);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[25];
  NSString v3 = (void *)v0[23];
  uint64_t v2 = (void *)v0[24];
  swift_willThrow();

  OUTLINED_FUNCTION_18_0();
  return v4();
}

uint64_t AutoShortcutProvider.deinit()
{
  return v0;
}

uint64_t AutoShortcutProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AutoShortcutsProviding.autoShortcuts(forBundleIdentifier:localeIdentifier:) in conformance AutoShortcutProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v4 + 96)
                                                                   + **(int **)(**(void **)v4 + 96));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for AutoShortcutsProviding.autoShortcuts(forBundleIdentifier:localeIdentifier:) in conformance AutoShortcutProvider;
  return v12(a1, a2, a3, a4);
}

uint64_t protocol witness for AutoShortcutsProviding.autoShortcuts(forBundleIdentifier:localeIdentifier:) in conformance AutoShortcutProvider()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = *v1;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v0) {
    uint64_t v4 = v3;
  }
  return v5(v4);
}

uint64_t protocol witness for AutoShortcutsProviding.retrieveAction(for:) in conformance AutoShortcutProvider(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 104) + **(int **)(**(void **)v1 + 104));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for AutoShortcutsProviding.retrieveAction(for:) in conformance AutoShortcutProvider;
  return v6(a1);
}

uint64_t protocol witness for AutoShortcutsProviding.retrieveAction(bundleIdentifier:basePhraseTemplate:actionIdentifier:parameterIdentifier:) in conformance AutoShortcutProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v7 + 112)
                                                                                              + **(int **)(**(void **)v7 + 112));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = protocol witness for AutoShortcutsProviding.retrieveAction(for:) in conformance AutoShortcutProvider;
  return v18(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for AutoShortcutsProviding.retrieveAction(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:) in conformance AutoShortcutProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v6
                                                                                                 + 120)
                                                                                     + **(int **)(**(void **)v6 + 120));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  *uint64_t v14 = v7;
  v14[1] = protocol witness for AutoShortcutsProviding.retrieveAction(for:) in conformance AutoShortcutProvider;
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t type metadata accessor for AutoShortcutProvider()
{
  return self;
}

unint64_t type metadata accessor for LNAutoShortcut()
{
  unint64_t result = lazy cache variable for type metadata for LNAutoShortcut;
  if (!lazy cache variable for type metadata for LNAutoShortcut)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut);
  }
  return result;
}

uint64_t String.asSpeakableString.getter()
{
  swift_bridgeObjectRetain();

  return SpeakableString.init(print:speak:)();
}

uint64_t ShortcutsUnlockDeviceStrategy.__allocating_init(dialogingTemplates:deviceState:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  outlined init with take of AceServiceInvokerAsync(a2, v4 + 24);
  return v4;
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[10] = v2;
  v1[11] = v0;
  v1[8] = v3;
  v1[9] = v4;
  uint64_t v5 = type metadata accessor for DialogPhase();
  v1[12] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[13] = v6;
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[16] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[17] = v8;
  v1[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[19] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[20] = v10;
  v1[21] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  void *v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v15)(void);
  uint64_t (*v16)(void);
  uint64_t v17;

  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[19];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4)
  {
    OUTLINED_FUNCTION_20_13((void *)v0[10]);
    OUTLINED_FUNCTION_4_13();
    if (v6)
    {
      uint64_t v15 = (uint64_t (*)(void))(*(void *)(v5 + 368) + **(int **)(v5 + 368));
      uint64_t v7 = (void *)swift_task_alloc();
      v0[22] = (uint64_t)v7;
      *uint64_t v7 = v0;
      v7[1] = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:);
      return v15();
    }
    else
    {
      uint64_t v16 = (uint64_t (*)(void))(*(void *)(v5 + 216) + **(int **)(v5 + 216));
      uint64_t v14 = (void *)swift_task_alloc();
      v0[23] = (uint64_t)v14;
      *uint64_t v14 = v0;
      v14[1] = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:);
      return v16();
    }
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[28] = (uint64_t)v9;
    *uint64_t v9 = v10;
    v9[1] = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:);
    uint64_t v11 = v0[10];
    uint64_t v12 = v0[8];
    uint64_t v13 = v0[9];
    return static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:)(v12, v13, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  v3[2] = v1;
  v3[3] = v5;
  v3[4] = v0;
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v8();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v10, v11, v12);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  v3[5] = v1;
  v3[6] = v5;
  v3[7] = v0;
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v8();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v10, v11, v12);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = (void *)v14[3];
  OUTLINED_FUNCTION_13_13();
  id v16 = [v15 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = OUTLINED_FUNCTION_8_11();
  v18(v17);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v19 = OUTLINED_FUNCTION_15_12();
  v20(v19);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v14[25] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_18_11(v21, (__n128)xmmword_211C70);
  v14[26] = a11;
  OUTLINED_FUNCTION_24_9();
  unint64_t v22 = (void *)swift_task_alloc();
  v14[27] = v22;
  *unint64_t v22 = v14;
  v22[1] = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:);
  OUTLINED_FUNCTION_11_16();
  OUTLINED_FUNCTION_3();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14);
}

{
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t);
  __n128 *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = (void *)v14[6];
  OUTLINED_FUNCTION_13_13();
  id v16 = [v15 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = OUTLINED_FUNCTION_8_11();
  v18(v17);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v19 = OUTLINED_FUNCTION_15_12();
  v20(v19);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v14[25] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_18_11(v21, (__n128)xmmword_211C70);
  v14[26] = a11;
  OUTLINED_FUNCTION_24_9();
  unint64_t v22 = (void *)swift_task_alloc();
  v14[27] = v22;
  *unint64_t v22 = v14;
  v22[1] = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:);
  OUTLINED_FUNCTION_11_16();
  OUTLINED_FUNCTION_3();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14);
}

uint64_t ShortcutsUnlockDeviceStrategy.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 24, a1);
}

uint64_t ShortcutsUnlockDeviceStrategy.authenticationPolicy.getter()
{
  return static UnlockDevicePolicy.requiringDeviceUnlock.getter();
}

uint64_t ShortcutsUnlockDeviceStrategy.init(dialogingTemplates:deviceState:)(uint64_t a1, long long *a2)
{
  *(void *)(v2 + 16) = a1;
  outlined init with take of AceServiceInvokerAsync(a2, v2 + 24);
  return v2;
}

uint64_t ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock()(uint64_t a1)
{
  _OWORD v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock()()
{
  OUTLINED_FUNCTION_14_0();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 40) = v1;
  void *v1 = v2;
  v1[1] = ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock();
  return static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock(dialogingTemplates:deviceState:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  return _swift_task_switch(static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:), 0, 0);
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:)()
{
  OUTLINED_FUNCTION_20_13(*(void **)(v0 + 72));
  OUTLINED_FUNCTION_4_13();
  if (v2)
  {
    uint64_t v10 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 376) + **(int **)(v1 + 376));
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 128) = v3;
    *uint64_t v3 = v4;
    v3[1] = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:);
    uint64_t v5 = *(void *)(v0 + 112);
    return v10(v5);
  }
  else
  {
    uint64_t v11 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 224) + **(int **)(v1 + 224));
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 144) = v7;
    *uint64_t v7 = v8;
    v7[1] = static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:);
    uint64_t v9 = *(void *)(v0 + 104);
    return v11(v9);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 136) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 152) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t static ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock_preRFv2(dialogingTemplates:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v19 = *(void *)(v15 + 120);
  uint64_t v20 = *(void *)(v15 + 96);
  OUTLINED_FUNCTION_19_9();
  uint64_t v21 = OUTLINED_FUNCTION_17_9();
  v22(v21);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v23 = type metadata accessor for NLContextUpdate();
  uint64_t v24 = OUTLINED_FUNCTION_22_11(v23);
  *(_OWORD *)(v15 + 32) = 0u;
  *(void *)(v15 + 48) = 0;
  *(_OWORD *)(v15 + 16) = 0u;
  v18[3] = v24;
  v18[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v18);
  OUTLINED_FUNCTION_7_16();
  outlined destroy of URL?(v15 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v14, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_3();
  return v26(v25, v26, v27, v28, v29, v30, v31, v32, v15 + 16, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v19 = *(void *)(v15 + 120);
  uint64_t v20 = *(void *)(v15 + 96);
  OUTLINED_FUNCTION_19_9();
  uint64_t v21 = OUTLINED_FUNCTION_17_9();
  v22(v21);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v23 = type metadata accessor for NLContextUpdate();
  uint64_t v24 = OUTLINED_FUNCTION_22_11(v23);
  *(_OWORD *)(v15 + 32) = 0u;
  *(void *)(v15 + 48) = 0;
  *(_OWORD *)(v15 + 16) = 0u;
  v18[3] = v24;
  v18[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v18);
  OUTLINED_FUNCTION_7_16();
  outlined destroy of URL?(v15 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v14, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_3();
  return v26(v25, v26, v27, v28, v29, v30, v31, v32, v15 + 16, a10, a11, a12, a13, a14);
}

uint64_t ShortcutsUnlockDeviceStrategy.makeShortcutsUnlockDeviceFlow()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
  uint64_t v1 = type metadata accessor for CommonFlowGuard();
  OUTLINED_FUNCTION_1_0(v1);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_212160;
  v4[3] = type metadata accessor for ShortcutsUnlockDeviceStrategy();
  v4[4] = lazy protocol witness table accessor for type ShortcutsUnlockDeviceStrategy and conformance ShortcutsUnlockDeviceStrategy();
  v4[0] = v0;
  swift_retain();
  static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  uint64_t v2 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t ShortcutsUnlockDeviceStrategy.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  return v0;
}

uint64_t ShortcutsUnlockDeviceStrategy.__deallocating_deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.authenticationPolicy.getter in conformance ShortcutsUnlockDeviceStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock() in conformance ShortcutsUnlockDeviceStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 112) + **(int **)(**(void **)v1 + 112));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t type metadata accessor for ShortcutsUnlockDeviceStrategy()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type ShortcutsUnlockDeviceStrategy and conformance ShortcutsUnlockDeviceStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type ShortcutsUnlockDeviceStrategy and conformance ShortcutsUnlockDeviceStrategy;
  if (!lazy protocol witness table cache variable for type ShortcutsUnlockDeviceStrategy and conformance ShortcutsUnlockDeviceStrategy)
  {
    type metadata accessor for ShortcutsUnlockDeviceStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsUnlockDeviceStrategy and conformance ShortcutsUnlockDeviceStrategy);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_7_16()
{
  return static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t OUTLINED_FUNCTION_8_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_16()
{
  return *(void *)(v0 + 64);
}

uint64_t OUTLINED_FUNCTION_13_13()
{
  *(void *)(v1 + 192) = v0;
  return static DialogPhase.completion.getter();
}

uint64_t OUTLINED_FUNCTION_15_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_11(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_20_13(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return dispatch thunk of DeviceState.isHomePod.getter();
}

uint64_t OUTLINED_FUNCTION_22_11(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  return type metadata accessor for AceOutput();
}

id OUTLINED_FUNCTION_24_9()
{
  return v0;
}

uint64_t WFChooseFromListPromptFlowStrategy.__allocating_init(request:shortcutName:appBundleId:siriEnvironment:deviceState:runCustomCatWrapper:runCustomCatWrapperSimple:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject();
  WFChooseFromListPromptFlowStrategy.init(request:shortcutName:appBundleId:siriEnvironment:deviceState:runCustomCatWrapper:runCustomCatWrapperSimple:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

__n128 WFChooseFromListDisambiguationItem.init(component:item:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  unint64_t v4 = a1[2].n128_u64[0];
  unint64_t v5 = a1[2].n128_u64[1];
  a3->n128_u64[0] = a1->n128_u64[0];
  a3->n128_u64[1] = v3;
  __n128 result = a1[1];
  a3[1] = result;
  a3[2].n128_u64[0] = v4;
  a3[2].n128_u64[1] = v5;
  a3[3].n128_u64[0] = a2;
  return result;
}

uint64_t WFChooseFromListDisambiguationItem.component.getter@<X0>(void *a1@<X8>)
{
  OUTLINED_FUNCTION_18_12(a1);
  swift_bridgeObjectRetain();
  id v2 = v1;

  return swift_bridgeObjectRetain();
}

__n128 WFChooseFromListDisambiguationItem.component.setter(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 32) = result;
  return result;
}

uint64_t WFChooseFromListDisambiguationItem.toDisambiguationItemModel()()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 144) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_16(v2);
  *(void *)(v1 + 152) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  _OWORD *v1;
  long long v2;
  long long v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __n128 *inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(_OWORD **)(v0 + 144);
  uint64_t v3 = v1[1];
  uint64_t v2 = v1[2];
  *(_OWORD *)(v0 + 80) = *v1;
  *(_OWORD *)(v0 + 96) = v3;
  *(_OWORD *)(v0 + 112) = v2;
  uint64_t v4 = *(void *)(v0 + 88);
  *(void *)(v0 + 160) = *(void *)(v0 + 80);
  *(void *)(v0 + 168) = v4;
  uint64_t v5 = *(void *)(v0 + 104);
  *(void *)(v0 + 176) = *(void *)(v0 + 96);
  *(void *)(v0 + 184) = v5;
  outlined init with take of INImage?(v0 + 112, v0 + 136);
  outlined init with take of INImage?(v0 + 136, v0 + 128);
  if (!*(void *)(v0 + 128))
  {
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v12 = type metadata accessor for VisualProperty();
    __swift_storeEnumTagSinglePayload(v11, 1, 1, v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_11_17(inited, (__n128)xmmword_212160);
    Dictionary.init(dictionaryLiteral:)();
    type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
    uint64_t v14 = OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_9_17(v14, v15, v16, v17, v18, v19, v20, v21, 1);
    swift_task_dealloc();
    OUTLINED_FUNCTION_11_4();
    OUTLINED_FUNCTION_6_1();
    __asm { BRAA            X2, X16 }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 192) = v6;
  *uint64_t v6 = v7;
  v6[1] = WFChooseFromListDisambiguationItem.toDisambiguationItemModel();
  OUTLINED_FUNCTION_6_1();
  return INImage.convertToVisualProperty()(v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  __n128 *inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_21_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_11_17(inited, (__n128)xmmword_212160);
  Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
  uint64_t v1 = OUTLINED_FUNCTION_35_2();
  OUTLINED_FUNCTION_9_17(v1, v2, v3, v4, v5, v6, v7, v8, 1);
  swift_task_dealloc();
  uint64_t v9 = OUTLINED_FUNCTION_11_4();
  return v10(v9);
}

uint64_t Array<A>.toDisambiguationItemModels()()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 88) = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_16(v2);
  *(void *)(v0 + 96) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *inited;
  __n128 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  void *v34;
  uint64_t v35;

  v1[10] = _swiftEmptyArrayStorage;
  uint64_t v2 = v1 + 10;
  uint64_t v3 = *(void *)(v1[11] + 16);
  v1[13] = v3;
  if (v3)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      v1[14] = v5;
      OUTLINED_FUNCTION_7_17((void *)(v4 + 56 * v5));
      v1[20] = *(void *)(v6 + 72);
      uint64_t v7 = *(void **)(v6 + 80);
      v1[21] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v0;
      swift_bridgeObjectRetain();
      uint64_t v8 = v7;
      if (v0) {
        break;
      }
      uint64_t v9 = v1[12];
      uint64_t v10 = type metadata accessor for VisualProperty();
      __swift_storeEnumTagSinglePayload(v9, 1, 1, v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v12 = v1[15];
      uint64_t v11 = v1[16];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      uint64_t inited = (__n128 *)swift_initStackObject();
      uint64_t v14 = OUTLINED_FUNCTION_21_7(inited, (__n128)xmmword_212160);
      v14[2].n128_u64[1] = v15;
      v14[3].n128_u64[0] = v12;
      v14[3].n128_u64[1] = v11;
      swift_bridgeObjectRetain();
      uint64_t v16 = Dictionary.init(dictionaryLiteral:)();
      type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
      OUTLINED_FUNCTION_35_2();
      OUTLINED_FUNCTION_33_7();
      WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(v17, v18, v19, v20, v21, v22, 0x8000000000226000, v16, 1);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_37_5();
      if (v24)
      {
        OUTLINED_FUNCTION_34_7(v23);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      uint64_t v0 = (void *)v1[20];
      unint64_t v34 = (void *)v1[21];
      uint64_t v25 = (void *)v1[19];
      uint64_t v26 = v2;
      uint64_t v27 = v1[13];
      uint64_t v28 = v1[14] + 1;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      if (v28 == v27)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      uint64_t v5 = v1[14] + 1;
      uint64_t v4 = v1[11];
      uint64_t v2 = v26;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v29 = (void *)swift_task_alloc();
    v1[22] = v29;
    *uint64_t v29 = v1;
    v29[1] = Array<A>.toDisambiguationItemModels();
    uint64_t v30 = v1[12];
    return INImage.convertToVisualProperty()(v30);
  }
  else
  {
LABEL_12:
    swift_task_dealloc();
    uint64_t v32 = OUTLINED_FUNCTION_11_4();
    return v33(v32);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  __n128 *inited;
  __n128 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;

  while (1)
  {
    uint64_t v1 = v0[15];
    uint64_t v2 = v0[16];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    uint64_t v4 = OUTLINED_FUNCTION_21_7(inited, (__n128)xmmword_212160);
    v4[2].n128_u64[1] = v5;
    v4[3].n128_u64[0] = v1;
    v4[3].n128_u64[1] = v2;
    swift_bridgeObjectRetain();
    uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
    type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_33_7();
    WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(v7, v8, v9, v10, v11, v12, 0x8000000000226000, v6, 1);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    OUTLINED_FUNCTION_37_5();
    if (v14)
    {
      OUTLINED_FUNCTION_34_7(v13);
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v30 = (void *)v0[21];
    uint64_t v15 = (void *)v0[19];
    uint64_t v16 = (void *)v0[13];
    uint64_t v17 = v0[14] + 1;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if ((void *)v17 == v16)
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      OUTLINED_FUNCTION_11_4();
      OUTLINED_FUNCTION_22_12();
      __asm { BRAA            X2, X16 }
    }
    uint64_t v18 = v0[14] + 1;
    v0[14] = v18;
    OUTLINED_FUNCTION_7_17((void *)(v0[11] + 56 * v18));
    v0[20] = *(void *)(v19 + 72);
    uint64_t v20 = *(void **)(v19 + 80);
    v0[21] = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16;
    swift_bridgeObjectRetain();
    uint64_t v21 = v20;
    if (v16) {
      break;
    }
    unint64_t v22 = v0[12];
    uint64_t v23 = type metadata accessor for VisualProperty();
    __swift_storeEnumTagSinglePayload(v22, 1, 1, v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = (void *)swift_task_alloc();
  v0[22] = v26;
  *uint64_t v26 = v0;
  v26[1] = Array<A>.toDisambiguationItemModels();
  OUTLINED_FUNCTION_22_12();
  return INImage.convertToVisualProperty()(v27);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 96) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  *(void *)(v0 + 104) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v2, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char v58;
  uint64_t (*v59)(void *);
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;

  uint64_t v1 = _swiftEmptyArrayStorage;
  *(void *)(v0 + 80) = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(*(void *)(v0 + 96) + 16);
  *(void *)(v0 + 112) = v2;
  if (!v2)
  {
LABEL_20:
    swift_task_dealloc();
    uint64_t v59 = *(uint64_t (**)(void *))(v0 + 8);
    return v59(v1);
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = self;
  uint64_t v4 = 0;
  *(void *)(v0 + 120) = v3;
  os_log_type_t v66 = 138412290;
  while (1)
  {
    *(void *)(v0 + 128) = v4;
    uint64_t v5 = *(void **)(v0 + 120);
    uint64_t v6 = (void *)(*(void *)(v0 + 96) + 56 * v4);
    uint64_t v7 = v6[4];
    uint64_t v8 = v6[5];
    *(void *)(v0 + 136) = v8;
    uint64_t v9 = v6[6];
    uint64_t v10 = v6[7];
    *(void *)(v0 + 144) = v10;
    uint64_t v11 = (void *)v6[8];
    *(void *)(v0 + 152) = v11;
    *(void *)(v0 + 160) = v6[9];
    uint64_t v12 = (void *)v6[10];
    *(void *)(v0 + 168) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v67 = v11;
    swift_bridgeObjectRetain();
    uint64_t v13 = v12;
    *(void *)(v0 + 88) = 0;
    uint64_t v14 = [v5 archivedDataWithRootObject:v13 requiringSecureCoding:1 error:v0 + 88];
    uint64_t v15 = *(id *)(v0 + 88);
    if (!v14)
    {
      uint64_t v38 = v15;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      os_log_type_t v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      os_log_type_t v40 = v67;
      swift_bridgeObjectRetain_n();
      uint64_t v41 = v13;
      unint64_t v42 = v40;
      uint64_t v43 = v41;
      uint64_t v44 = Logger.logObject.getter();
      unint64_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        BOOL v46 = OUTLINED_FUNCTION_25_2();
        uint64_t v47 = (void *)OUTLINED_FUNCTION_88();
        *(_DWORD *)BOOL v46 = v66;
        *(void *)(v46 + 4) = v43;
        *uint64_t v47 = v43;
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_7_32();

        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v44, v45, "Could not archive disambiguation data for value: %@", (uint8_t *)v46, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_7_32();

        swift_bridgeObjectRelease_n();
      }

      goto LABEL_17;
    }
    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    *(void *)(v0 + 176) = v16;
    *(void *)(v0 + 184) = v18;
    type metadata accessor for CATSpeakableString();
    swift_bridgeObjectRetain();
    static CATSpeakableString.stripTTSHint(print:)(v7, v8, v19, v20, v21, v22, v23, v24, v63, v65, (void *)v66);
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 192) = v26;
    *(void *)(v0 + 200) = v28;
    if (v10)
    {
      swift_bridgeObjectRetain();
      static CATSpeakableString.stripTTSHint(print:)(v9, v10, v29, v30, v31, v32, v33, v34, v64, v65, (void *)v66);
      uint64_t v9 = v35;
      uint64_t v37 = v36;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v37 = 0;
    }
    *(void *)(v0 + 208) = v9;
    *(void *)(v0 + 216) = v37;
    if (v11) {
      break;
    }
    uint64_t v48 = type metadata accessor for VisualProperty();
    OUTLINED_FUNCTION_12_16(v48);
    uint64_t v49 = *(void *)(v0 + 208);
    uint64_t v50 = *(void *)(v0 + 216);
    uint64_t v52 = *(void *)(v0 + 192);
    unint64_t v51 = *(void *)(v0 + 200);
    uint64_t v54 = *(void *)(v0 + 176);
    unint64_t v53 = *(void *)(v0 + 184);
    uint64_t v55 = *(void *)(v0 + 104);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_212160;
    OUTLINED_FUNCTION_9_35();
    v56[4] = v57;
    v56[5] = 0xE500000000000000;
    v56[6] = v54;
    v56[7] = v53;
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_16_22();
    OUTLINED_FUNCTION_35_2();
    WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(v52, v51, v49, v50, v55, 0xD000000000000043, 0x8000000000226000, v53, 0);
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + (*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8)) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v43 = *(id *)(v0 + 168);
    unint64_t v42 = *(id *)(v0 + 152);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_31();
    if (v58)
    {
      swift_bridgeObjectRelease();
      uint64_t v1 = *(void **)(v0 + 80);
      goto LABEL_20;
    }
  }
  char v61 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v61;
  *char v61 = v0;
  v61[1] = Array<A>.toDisambiguationItemModels();
  uint64_t v62 = *(void *)(v0 + 104);
  return INImage.convertToVisualProperty()(v62);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v0, v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;

  unint64_t v68 = v0 + 88;
  uint64_t v1 = 0x8000000000226000;
  uint64_t v63 = (void *)0x8000000000226000;
  while (2)
  {
    unint64_t v69 = *(void *)(v0 + 216);
    uint64_t v2 = *(void *)(v0 + 192);
    unint64_t v65 = *(void *)(v0 + 200);
    os_log_type_t v66 = *(void *)(v0 + 208);
    uint64_t v4 = *(void *)(v0 + 176);
    uint64_t v3 = *(void *)(v0 + 184);
    unint64_t v64 = *(void *)(v0 + 104);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_212160;
    OUTLINED_FUNCTION_9_35();
    v5[4] = v6;
    v5[5] = 0xE500000000000000;
    v5[6] = v4;
    v5[7] = v3;
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_16_22();
    OUTLINED_FUNCTION_35_2();
    WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(v2, v65, v66, v69, v64, 0xD000000000000043, v1, v3, 0);
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + (*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8)) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v7 = *(void **)(v0 + 168);
    uint64_t v8 = *(void **)(v0 + 152);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    while (1)
    {
      OUTLINED_FUNCTION_10_31();
      if (v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v55 = *(void *)(v0 + 80);
        swift_task_dealloc();
        uint64_t v56 = *(uint64_t (**)(uint64_t))(v0 + 8);
        return v56(v55);
      }
      *(void *)(v0 + 128) = v9;
      uint64_t v11 = *(void **)(v0 + 120);
      uint64_t v12 = (void *)(*(void *)(v0 + 96) + 56 * v9);
      uint64_t v14 = v12[4];
      uint64_t v13 = v12[5];
      *(void *)(v0 + 136) = v13;
      uint64_t v15 = v12[6];
      uint64_t v16 = v12[7];
      *(void *)(v0 + 144) = v16;
      uint64_t v17 = (void *)v12[8];
      *(void *)(v0 + 152) = v17;
      *(void *)(v0 + 160) = v12[9];
      uint64_t v18 = (void *)v12[10];
      *(void *)(v0 + 168) = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v70 = v17;
      swift_bridgeObjectRetain();
      uint64_t v19 = v18;
      *(void *)(v0 + 88) = 0;
      uint64_t v20 = [v11 archivedDataWithRootObject:v19 requiringSecureCoding:1 error:v68];
      uint64_t v21 = *(id *)(v0 + 88);
      if (v20) {
        break;
      }
      unint64_t v22 = v21;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v24 = v70;
      swift_bridgeObjectRetain_n();
      uint64_t v25 = v19;
      uint64_t v26 = v24;
      uint64_t v27 = v25;
      uint64_t v28 = Logger.logObject.getter();
      uint64_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = OUTLINED_FUNCTION_25_2();
        uint64_t v31 = (void *)OUTLINED_FUNCTION_88();
        *(_DWORD *)uint64_t v30 = 138412290;
        *(void *)(v30 + 4) = v27;
        *uint64_t v31 = v27;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        OUTLINED_FUNCTION_7_32();
        _os_log_impl(&dword_0, v28, v29, "Could not archive disambiguation data for value: %@", (uint8_t *)v30, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        OUTLINED_FUNCTION_7_32();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      uint64_t v0 = v67;
    }
    uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    *(void *)(v0 + 176) = v32;
    *(void *)(v0 + 184) = v34;
    type metadata accessor for CATSpeakableString();
    swift_bridgeObjectRetain();
    static CATSpeakableString.stripTTSHint(print:)(v14, v13, v35, v36, v37, v38, v39, v40, v60, v62, v63);
    unint64_t v42 = v41;
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 192) = v42;
    *(void *)(v0 + 200) = v44;
    if (v16)
    {
      swift_bridgeObjectRetain();
      static CATSpeakableString.stripTTSHint(print:)(v15, v16, v45, v46, v47, v48, v49, v50, v61, v62, v63);
      uint64_t v15 = v51;
      unint64_t v53 = v52;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v53 = 0;
    }
    *(void *)(v0 + 208) = v15;
    *(void *)(v0 + 216) = v53;
    if (!v17)
    {
      uint64_t v54 = type metadata accessor for VisualProperty();
      OUTLINED_FUNCTION_12_16(v54);
      uint64_t v1 = (uint64_t)v63;
      continue;
    }
    break;
  }
  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v58;
  void *v58 = v0;
  v58[1] = Array<A>.toDisambiguationItemModels();
  uint64_t v59 = *(void *)(v0 + 104);
  return INImage.convertToVisualProperty()(v59);
}

void *WFChooseFromListPromptFlowStrategy.init(request:shortcutName:appBundleId:siriEnvironment:deviceState:runCustomCatWrapper:runCustomCatWrapperSimple:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v18 = type metadata accessor for CATOption();
  uint64_t v19 = OUTLINED_FUNCTION_16(v18);
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_20_0();
  v10[2] = 6;
  v10[3] = a1;
  uint64_t v10[4] = a2;
  v10[5] = a3;
  v10[6] = a4;
  v10[7] = a5;
  unsigned char v10[16] = a6;
  outlined init with copy of DeviceState(a7, (uint64_t)(v10 + 8));
  uint64_t v30 = (void *)a7;
  outlined init with copy of DeviceState(a7, (uint64_t)v32);
  uint64_t v20 = one-time initialization token for shared;
  id v29 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v21 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v22 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATsSimple();
  OUTLINED_FUNCTION_36_5();
  uint64_t v23 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_36_5();
  uint64_t v24 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_36_5();
  uint64_t v25 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
  OUTLINED_FUNCTION_36_5();
  uint64_t v26 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject();
  v10[13] = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v32, v21, v22, v23, a8, a9, v24, v25, v26);
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t v27 = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(v30);

  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
  v10[14] = v27;
  type metadata accessor for WorkflowNLContextProvider();
  v10[15] = swift_allocObject();
  return v10;
}

uint64_t outlined init with take of INImage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INImage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t WFChooseFromListPromptFlowStrategy.paginationStyle()()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 64), *(void *)(v0 + 88));
  if (DeviceState.isVox.getter())
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_2_15(&dword_0, v4, v5, "#WFChooseFromListPromptFlowStrategy paginationStyle() return pagination with size = 6");
      OUTLINED_FUNCTION_7_0();
    }

    return static PaginationStyle.pageSize(_:)();
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_2_15(&dword_0, v10, v11, "#WFChooseFromListPromptFlowStrategy paginationStyle() return no pagniation");
      OUTLINED_FUNCTION_7_0();
    }

    return static PaginationStyle.noPagination()();
  }
}

uint64_t WFChooseFromListPromptFlowStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_2();
  uint64_t v51 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  uint64_t v52 = v8 - v7;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v54 = v10;
  uint64_t v55 = v9;
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v53 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v48 - v13;
  uint64_t v15 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_2();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_20_0();
  uint64_t v21 = v20 - v19;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v21, a1, v15);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v49 = v4;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v50 = a2;
    uint64_t v57 = v27;
    v48[2] = a1;
    *(_DWORD *)uint64_t v26 = 136315138;
    v48[1] = v26 + 4;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = OUTLINED_FUNCTION_35_6();
    v31(v30);
    _os_log_impl(&dword_0, v23, v24, "#WFChooseFromListPromptFlowStrategy actionForInput: %s", v26, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    uint64_t v4 = v49;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v32 = OUTLINED_FUNCTION_35_6();
    v33(v32);
  }

  Input.parse.getter();
  char v34 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  unint64_t v35 = *(void (**)(char *, uint64_t))(v54 + 8);
  v35(v14, v55);
  switch(v34)
  {
    case 2:
      swift_bridgeObjectRelease();
      return static ActionForInput.ignore()();
    case 3:
      goto LABEL_8;
    default:
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v36) {
        return static ActionForInput.ignore()();
      }
LABEL_8:
      uint64_t v37 = v53;
      Input.parse.getter();
      uint64_t v38 = OUTLINED_FUNCTION_32_7();
      int v40 = v39(v38);
      if (v40 == enum case for Parse.NLv3IntentOnly(_:)) {
        goto LABEL_9;
      }
      if (v40 == enum case for Parse.directInvocation(_:))
      {
        uint64_t v42 = OUTLINED_FUNCTION_32_7();
        v43(v42);
        uint64_t v44 = v51;
        (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v52, v37, v4);
        if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000043 && v45 == 0x8000000000226000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v47 & 1) == 0)
          {
            static ActionForInput.ignore()();
            return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v52, v4);
          }
        }
        static ActionForInput.handle()();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v52, v4);
      }
      if (v40 == enum case for Parse.uso(_:) && (SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) != 0) {
LABEL_9:
      }
        static ActionForInput.handle()();
      else {
        static ActionForInput.ignore()();
      }
      uint64_t v46 = OUTLINED_FUNCTION_32_7();
      return ((uint64_t (*)(uint64_t))v35)(v46);
  }
}

uint64_t WFChooseFromListPromptFlowStrategy.parseDisambiguationResponse(input:paginatedItems:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[6] = v2;
  v1[7] = v0;
  void v1[4] = v3;
  v1[5] = v4;
  uint64_t v5 = type metadata accessor for Parse();
  v1[8] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[9] = v6;
  v1[10] = OUTLINED_FUNCTION_25();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>?);
  OUTLINED_FUNCTION_16(v7);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Input();
  v1[13] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[14] = v9;
  v1[15] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  int EnumTagSinglePayload;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t (*v26)(void);
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  uint64_t v30 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[5];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.debug.getter();
  uint64_t v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[14];
  uint64_t v9 = v0[15];
  if (v8)
  {
    uint64_t v28 = v0[13];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    unint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v12 = Input.description.getter();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v28);
    _os_log_impl(&dword_0, v6, v7, "#WFChooseFromListPromptFlowStrategy parseDisambiguationResponse with input: %s", v11, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[15], v0[13]);
  }

  uint64_t v14 = v0[12];
  uint64_t v16 = v0[9];
  uint64_t v15 = v0[10];
  Input.parse.getter();
  WFChooseFromListPromptFlowStrategy.getVoiceCommandPagination(parse:)(v15, v14);
  uint64_t v17 = *(void (**)(void))(v16 + 8);
  OUTLINED_FUNCTION_32_7();
  OUTLINED_FUNCTION_20_14();
  v17();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v14, 1, v18);
  uint64_t v20 = v0[12];
  if (EnumTagSinglePayload != 1) {
    goto LABEL_9;
  }
  uint64_t v21 = v0[11];
  outlined destroy of Any?(v0[12], &demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>?);
  Input.parse.getter();
  WFChooseFromListPromptFlowStrategy.getConfirmationForPagination(parse:)(v21);
  OUTLINED_FUNCTION_20_14();
  v17();
  uint64_t v22 = __swift_getEnumTagSinglePayload(v21, 1, v18);
  uint64_t v20 = v0[11];
  if (v22 == 1)
  {
    uint64_t v23 = v0[5];
    outlined destroy of Any?(v0[11], &demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<WFChooseFromListDisambiguationItem>);
    os_log_type_t v24 = PaginatedItemContainer.items.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputToDisambiguationItemsConverter<WFChooseFromListDisambiguationItem>);
    swift_allocObject();
    uint64_t v25 = specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(v24, 0, (uint64_t)&outlined read-only object #0 of specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:));
    v0[2] = (*(uint64_t (**)(uint64_t))(*v25 + 128))(v23);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WFChooseFromListDisambiguationItem]);
    static DisambiguationResult.chosenItem(_:)();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_9:
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v0[4], v20, v18);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v26();
}

uint64_t WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[8] = v2;
  v1[9] = v0;
  v1[7] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v4);
  v1[10] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for DialogPhase();
  v1[11] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[12] = v6;
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[15] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[16] = v8;
  v1[17] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[18] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[19] = v10;
  v1[20] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  v1[21] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[22] = v12;
  v1[23] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#WFChooseFromListPromptFlowStrategy make prompt for disambiguation item", v4, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v6 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v7 = v0[18];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<WFChooseFromListDisambiguationItem>);
  uint64_t v8 = PaginatedItemContainer.items.getter();
  v0[24] = v8;
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v9 + 216))();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v7);
  uint64_t v10 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v10)
  {
    uint64_t v11 = v0[9];
    uint64_t v12 = *(void *)(v11 + 24);
    uint64_t v13 = *(void *)(v11 + 128);
    OUTLINED_FUNCTION_16_5();
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 224) + **(int **)(v14 + 224));
    uint64_t v15 = (void *)swift_task_alloc();
    v0[25] = v15;
    *uint64_t v15 = v0;
    v15[1] = WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:);
    return v19(v12, v8, v13);
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[35] = v17;
    *uint64_t v17 = v18;
    v17[1] = WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:);
    return WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation_preRFv2(items:nlContextUpdate:)();
  }
}

{
  Swift::String_optional *v0;
  void *v1;
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  v0[14] = DialogExecutionResult.firstDialogFullPrint()();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[15].value._uint64_t countAndFlagsBits = (uint64_t)v1;
  void *v1 = v0;
  v1[1] = WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:);
  return Array<A>.toDisambiguationItemModels()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  *(void *)(v6 + 248) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);

  OUTLINED_FUNCTION_20_14();
  v4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  OUTLINED_FUNCTION_26_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 288) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  OUTLINED_FUNCTION_26_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v1();
}

uint64_t WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 208) = v1;
  swift_task_dealloc();
  if (v1) {
    swift_bridgeObjectRelease();
  }
  else {
    *(void *)(v5 + 216) = a1;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

void WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  long long v18 = *(_OWORD *)(v0 + 224);
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v19 = *(void *)(v0 + 248);
  uint64_t v20 = v1;
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 80);
  uint64_t v16 = *(void *)(v0 + 168);
  static DialogPhase.clarification.getter();
  id v7 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v15, v17, v16);
  __swift_storeEnumTagSinglePayload(v15, 0, 1, v16);
  OutputGenerationManifest.nlContextUpdate.setter();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  *(void *)(v0 + 256) = ResponseFactory.init()();
  *(void *)(v0 + 40) = type metadata accessor for WorkflowDataModels(0);
  *(void *)(v0 + 48) = _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  *(_OWORD *)boxed_opaque_existential_1 = v18;
  boxed_opaque_existential_1[2] = v19;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_211C70;
  *(void *)(v9 + 32) = v20;
  uint64_t v21 = v9;
  specialized Array._endMutation()();
  *(void *)(v0 + 264) = v21;
  id v10 = v20;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 272) = v11;
  *uint64_t v11 = v12;
  v11[1] = WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation(paginatedItems:);
  OUTLINED_FUNCTION_22_12();
  __asm { BR              X4 }
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_21_0();
  uint64_t v0 = OUTLINED_FUNCTION_10_20();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  __asm { BRAA            X1, X16 }
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_21_0();
  uint64_t v0 = OUTLINED_FUNCTION_10_20();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  __asm { BRAA            X1, X16 }
}

uint64_t WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation_preRFv2(items:nlContextUpdate:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[9] = v2;
  v1[10] = v0;
  v1[7] = v3;
  v1[8] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v5);
  v1[11] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[12] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[13] = v7;
  v1[14] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[10];
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 128);
  OUTLINED_FUNCTION_16_5();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 232) + **(int **)(v4 + 232));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[15] = v5;
  *uint64_t v5 = v6;
  v5[1] = WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation_preRFv2(items:nlContextUpdate:);
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[8];
  return v10(v7, v2, v8, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[10];
  __swift_project_boxed_opaque_existential_1(v1 + 8, v1[11]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  type metadata accessor for ViewFactory();
  OUTLINED_FUNCTION_35_2();
  v0[17] = ViewFactory.init(ttsEnabled:)();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v2 = dispatch thunk of ViewFactory.makeUtteranceViews(template:listenAfterSpeaking:canUseServerTTS:)();
  v0[18] = v2;
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v6 = v1[7];
  OUTLINED_FUNCTION_16_5();
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 112)
                                                                                     + **(int **)(v7 + 112));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[19] = v8;
  *uint64_t v8 = v0;
  v8[1] = WFChooseFromListPromptFlowStrategy.makePromptForDisambiguation_preRFv2(items:nlContextUpdate:);
  uint64_t v9 = v0[8];
  return v11(v3, v4, v5, v6, v9, v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  *(void *)(v6 + 160) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(uint64_t **)(v0 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 80) + 64), *(void *)(*(void *)(v0 + 80) + 88));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v2, v4);
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v4);
  uint64_t v6 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v3[3] = v6;
  v3[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v3);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of Any?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_20_14();
  v8(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v9();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WFChooseFromListPromptFlowStrategy.getVoiceCommandPagination(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_25_8();
  uint64_t v10 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_27_6();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v3, a1, v10);
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 88))(v3, v10);
  if (v14 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v15 = OUTLINED_FUNCTION_27_10();
    v16(v15);
LABEL_5:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v2, v3, v6);
    WFChooseFromListPromptFlowStrategy.getPaginationFromNLIntent(intent:)(v2, a2);
    OUTLINED_FUNCTION_20_14();
    return v19();
  }
  if (v14 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v17 = OUTLINED_FUNCTION_27_10();
    v18(v17);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    goto LABEL_5;
  }
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>);
  __swift_storeEnumTagSinglePayload(a2, 1, 1, v21);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v3, v10);
}

uint64_t WFChooseFromListPromptFlowStrategy.getPaginationFromNLIntent(intent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for PaginationRequest();
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_27_6();
  type metadata accessor for VoiceCommandsNLIntent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_20_0();
  uint64_t v8 = v7 - v6;
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, a1);
  if (one-time initialization token for voiceCommandPaginationNode != -1) {
    swift_once();
  }
  _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v14 - 2 >= 2)
  {
    if (v14) {
      static PaginationRequest.previousPage()();
    }
    else {
      static PaginationRequest.nextPage()();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WFChooseFromListDisambiguationItem]);
    static DisambiguationResult.paginate(_:)();
    OUTLINED_FUNCTION_20_14();
    v11();
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 1;
  }
  outlined destroy of VoiceCommandsNLIntent(v8);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>);
  return __swift_storeEnumTagSinglePayload(a2, v10, 1, v12);
}

uint64_t WFChooseFromListPromptFlowStrategy.getConfirmationForPagination(parse:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PaginationRequest();
  OUTLINED_FUNCTION_0_2();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_25_8();
  if (static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)() == 1)
  {
    static PaginationRequest.nextPage()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WFChooseFromListDisambiguationItem]);
    static DisambiguationResult.paginate(_:)();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>);
    return __swift_storeEnumTagSinglePayload(a1, 0, 1, v9);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<[WFChooseFromListDisambiguationItem]>);
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v7);
  }
}

uint64_t WFChooseFromListPromptFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t WFChooseFromListPromptFlowStrategy.__deallocating_deinit()
{
  WFChooseFromListPromptFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.paginationStyle() in conformance WFChooseFromListPromptFlowStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.actionForInput(_:) in conformance WFChooseFromListPromptFlowStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.parseDisambiguationResponse(input:paginatedItems:) in conformance WFChooseFromListPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 176)
                                                          + **(int **)(*(void *)v3 + 176));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v10(a1, a2, a3);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:) in conformance WFChooseFromListPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 184) + **(int **)(*(void *)v2 + 184));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v8(a1, a2);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:) in conformance WFChooseFromListPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for WFChooseFromListPromptFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:) in conformance WFChooseFromListPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for WFChooseFromListPromptFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse() in conformance WFChooseFromListPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:) in conformance WFChooseFromListPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, a3, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription.getter in conformance WFChooseFromListPromptFlowStrategy()
{
  return PromptForDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription.getter();
}

void *specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(uint64_t a1, uint64_t a2)
{
  return specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(a1, a2, (uint64_t)&outlined read-only object #0 of specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:));
}

{
  return specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(a1, a2, (uint64_t)&outlined read-only object #0 of specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:));
}

void *specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a3;
  v3[2] = a1;
  if (a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = swift_bridgeObjectRetain();
  }
  v3[3] = v4;
  return v3;
}

void destroy for WFChooseFromListDisambiguationItem(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 48);
}

void *initializeWithCopy for WFChooseFromListDisambiguationItem(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v6 = (void *)a2[4];
  uint64_t v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  uint64_t v7 = (void *)a2[6];
  a1[6] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v6;
  swift_bridgeObjectRetain();
  id v9 = v7;
  return a1;
}

void *assignWithCopy for WFChooseFromListDisambiguationItem(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  id v6 = v5;

  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)a2[6];
  id v8 = (void *)a1[6];
  a1[6] = v7;
  id v9 = v7;

  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for WFChooseFromListDisambiguationItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  swift_bridgeObjectRelease();
  id v6 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for WFChooseFromListDisambiguationItem(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WFChooseFromListDisambiguationItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WFChooseFromListDisambiguationItem()
{
  return &type metadata for WFChooseFromListDisambiguationItem;
}

uint64_t type metadata accessor for WFChooseFromListPromptFlowStrategy()
{
  return self;
}

uint64_t _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void OUTLINED_FUNCTION_7_17(void *a1@<X8>)
{
  v1[15] = a1[4];
  v1[16] = a1[5];
  v1[17] = a1[6];
  v1[18] = a1[7];
  v1[19] = a1[8];
}

void *OUTLINED_FUNCTION_9_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(v14, v13, v12, v11, v10, 0xD000000000000043, v9 | 0x8000000000000000, v15, a9);
}

uint64_t OUTLINED_FUNCTION_10_20()
{
  return *(void *)(v0 + 184);
}

uint64_t OUTLINED_FUNCTION_11_17(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x656C746974;
  a1[2].n128_u64[1] = 0xE500000000000000;
  a1[3].n128_u64[0] = v3;
  a1[3].n128_u64[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_18_12@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v7 = v1[5];
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v8;
  a1[5] = v7;
  return swift_bridgeObjectRetain();
}

__n128 *OUTLINED_FUNCTION_21_7(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x656C746974;
  return result;
}

uint64_t OUTLINED_FUNCTION_26_9()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_27_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_7()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_34_7@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_35_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_36_5()
{
  return static CATOption.defaultMode.getter();
}

uint64_t Array<A>.isAudioStarting.getter(unint64_t a1)
{
  uint64_t v2 = self;
  id v3 = [v2 audioStartingProtocol];
  char v4 = specialized Sequence<>.contains(_:)((uint64_t)v3, a1);

  if (v4) {
    return 1;
  }
  id v6 = [v2 audioRecordingProtocol];
  char v7 = specialized Sequence<>.contains(_:)((uint64_t)v6, a1);

  return v7 & 1;
}

uint64_t LNActionPresentationStyle.asSiriLinkFlowProvisionalActionPresentationStyle()(unint64_t a1)
{
  if (a1 < 3) {
    return (a1 + 1);
  }
  else {
    return 0;
  }
}

void __swiftcall LNAction.asSiriLinkFlowProvisionalLinkAction()(SiriLinkFlowProvisionalLinkAction_optional *__return_ptr retstr)
{
  id v2 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalLinkAction) init];
  if (!v2) {
    goto LABEL_16;
  }
  id v3 = [v1 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v4, v6, v2, (SEL *)&selRef_setIdentifier_);
  id v7 = [v1 presentationStyle];
  if ((unint64_t)v7 < 3) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 0;
  }
  [v2 setPresentationStyle:v8];
  id v9 = [v1 parameters];
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNProperty);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8));
    if (v11) {
      goto LABEL_7;
    }
LABEL_15:
    swift_bridgeObjectRelease();
LABEL_16:
    OUTLINED_FUNCTION_27_1();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_15;
  }
LABEL_7:
  if (v11 >= 1)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v10 + 8 * i + 32);
      }
      uint64_t v14 = v13;
      id v15 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalLinkActionParameter) init];
      if (v15)
      {
        uint64_t v16 = v15;
        id v17 = [v14 identifier];
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;

        outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v18, v20, v16, (SEL *)&selRef_setName_);
        [v2 addParameters:v16];
      }
    }
    goto LABEL_15;
  }
  __break(1u);
}

void specialized static ProvisionalInstrumentationUtils.emitLinkFlowProvisionalInstrumentation<A>(event:siriEnvironment:)(uint64_t a1, uint64_t a2)
{
}

void specialized static ProvisionalInstrumentationUtils.emitLinkFlowProvisionalInstrumentation<A>(event:siriEnvironment:)(uint64_t a1, uint64_t a2, uint64_t *a3, SEL *a4)
{
  uint64_t v56 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_2();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4_14();
  __chkstk_darwin(v11);
  id v13 = (char *)&v52 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  id v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v52 - v18;
  id v20 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalSiriLinkFlowClientEvent) init];
  if (!v20)
  {
LABEL_29:
    OUTLINED_FUNCTION_27_1();
    return;
  }
  id v57 = v20;
  id v55 = [objc_allocWithZone((Class)FLOWSchemaFLOWEventMetadata) init];
  if (v55)
  {
    uint64_t v53 = v9;
    uint64_t ObjectType = swift_getObjectType();
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v52 = String.init<A>(describing:)();
    unint64_t v54 = v21;
    SiriEnvironment.flowTask.getter();
    uint64_t v22 = dispatch thunk of FlowTaskProvider.id.getter();
    unint64_t v24 = v23;
    swift_release();
    if (v24)
    {
      UUID.init(uuidString:)();
      outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v17);
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v7) == 1)
      {
        outlined destroy of UUID?((uint64_t)v17);
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
        unint64_t v26 = v54;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = swift_slowAlloc();
          uint64_t ObjectType = swift_slowAlloc();
          *(_DWORD *)uint64_t v29 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &ObjectType);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v29 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v26, &ObjectType);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_0, v27, v28, "#LINK SELF Log, current taskId: %s, is not a valid UUID String, cannot emit %s", (uint8_t *)v29, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = v53;
        (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v13, v17, v7);
        type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v4, v13, v7);
        id v39 = SISchemaUUID.__allocating_init(nsuuid:)(v4);
        id v40 = v55;
        [v55 setTaskId:v39];

        id v41 = static ProvisionalInstrumentationUtils.createFlowId(siriEnvironment:)();
        [v40 setFlowId:v41];

        SiriEnvironment.currentRequest.getter();
        CurrentRequest.resultCandidateId.getter();
        uint64_t v43 = v42;
        swift_release();
        if (v43)
        {
          NSString v44 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v44 = 0;
        }
        unint64_t v45 = v54;
        [v40 setResultCandidateId:v44];

        [v57 setEventMetadata:v40];
        objc_msgSend(v57, *v56, a1);
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v46 = type metadata accessor for Logger();
        __swift_project_value_buffer(v46, (uint64_t)static Logger.voiceCommands);
        swift_bridgeObjectRetain();
        char v47 = Logger.logObject.getter();
        os_log_type_t v48 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = (uint8_t *)swift_slowAlloc();
          uint64_t ObjectType = swift_slowAlloc();
          *(_DWORD *)uint64_t v49 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v45, &ObjectType);
          OUTLINED_FUNCTION_39_6(v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_0, v47, v48, "#LINK Provisional SELF emitting %s", v49, 0xCu);
          swift_arrayDestroy();
          id v40 = v55;
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        id v51 = [self sharedStream];
        [v51 emitMessage:v57];

        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v7);
      }
      outlined destroy of UUID?((uint64_t)v19);
    }
    else
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.voiceCommands);
      unint64_t v33 = v54;
      swift_bridgeObjectRetain();
      char v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        char v36 = (uint8_t *)swift_slowAlloc();
        uint64_t ObjectType = swift_slowAlloc();
        *(_DWORD *)char v36 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v33, &ObjectType);
        OUTLINED_FUNCTION_39_6(v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v34, v35, "#LINK SELF Log, current taskId is nil, cannot emit %s", v36, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    goto LABEL_29;
  }
  OUTLINED_FUNCTION_27_1();
}

id static ProvisionalInstrumentationUtils.createFlowId(siriEnvironment:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v0 - 8);
  id v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v27 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  static ProvisionalInstrumentationUtils.createFlowUUID(siriEnvironment:)((uint64_t)v2);
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) == 1)
  {
    outlined destroy of UUID?((uint64_t)v2);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#LINK SELF Log, invalid executionRequestId string, cannot derive flowId form it", v16, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v2, v3);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v30(v10, v12, v3);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_t v28 = v19;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v29 = v7;
      uint64_t v22 = (uint8_t *)v21;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v32 = v27;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v23 = UUID.uuidString.getter();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v10, v3);
      uint64_t v19 = v28;
      _os_log_impl(&dword_0, v28, v20, "#LINK SELF Log, created flowId: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v7 = v29;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v10, v3);
    }

    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    v30(v7, v12, v3);
    id v17 = SISchemaUUID.__allocating_init(nsuuid:)((uint64_t)v7);
    v25(v12, v3);
  }
  return v17;
}

void static ProvisionalInstrumentationUtils.createFlowUUID(siriEnvironment:)(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_4_14();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v48 - v12;
  __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)v48 - v14;
  SiriEnvironment.currentRequest.getter();
  CurrentRequest.executionRequestId.getter();
  uint64_t v17 = v16;
  swift_release();
  if (v17)
  {
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1)
    {
      outlined destroy of UUID?((uint64_t)v5);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        OUTLINED_FUNCTION_6_12(&dword_0, v21, v22, "#LINK SELF Log, invalid executionRequestId string, cannot derive flowId form it");
        OUTLINED_FUNCTION_7_0();
      }

      uint64_t v23 = a1;
      uint64_t v24 = 1;
    }
    else
    {
      id v51 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v51(v15, v5, v6);
      os_log_type_t v35 = self;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v37 = [v35 derivedIdentifierForComponent:3 fromSourceIdentifier:isa];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v52 = a1;
      uint64_t v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v1, v13, v6);
      id v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        id v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        uint64_t v53 = v49;
        uint64_t v50 = v8 + 32;
        *(_DWORD *)id v41 = 136315138;
        v48[1] = v41 + 4;
        uint64_t v42 = UUID.uuidString.getter();
        uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v53);
        OUTLINED_FUNCTION_39_6(v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v45 = *(void (**)(void))(v8 + 8);
        OUTLINED_FUNCTION_5_13();
        v45();
        _os_log_impl(&dword_0, v39, v40, "#LINK SELF Log, created flowId: %s", v41, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();

        OUTLINED_FUNCTION_5_13();
        v45();
      }
      else
      {

        uint64_t v46 = *(void (**)(void))(v8 + 8);
        OUTLINED_FUNCTION_5_13();
        v46();
        ((void (*)(char *, uint64_t))v46)(v15, v6);
      }
      uint64_t v47 = v52;
      v51((char *)v52, v13, v6);
      uint64_t v23 = v47;
      uint64_t v24 = 0;
    }
    __swift_storeEnumTagSinglePayload(v23, v24, 1, v6);
    OUTLINED_FUNCTION_27_1();
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_6_12(&dword_0, v28, v29, "#LINK SELF Log, invalid executionRequestId, cannot derive flowId form it");
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_27_1();
    __swift_storeEnumTagSinglePayload(v30, v31, v32, v33);
  }
}

void static ProvisionalInstrumentationUtils.emitActionCompleteSuccessProvisionalInstrumentation(targetBundle:action:siriEnvironment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalLinkActionCompletion) init];
  if (v7)
  {
    id v11 = v7;
    LNAction.asSiriLinkFlowProvisionalLinkAction()(v8);
    uint64_t v10 = v9;
    [v11 setAction:v9];

    outlined bridged method (mbgnn) of @objc SiriLinkFlowProvisionalLinkActionCompletion.targetBundle.setter(a1, a2, v11);
    [v11 setIsSuccess:1];
    specialized static ProvisionalInstrumentationUtils.emitLinkFlowProvisionalInstrumentation<A>(event:siriEnvironment:)((uint64_t)v11, a4, &demangling cache variable for type metadata for SiriLinkFlowProvisionalLinkActionCompletion.Type, (SEL *)&selRef_setLinkActionCompletion_);
  }
}

void static ProvisionalInstrumentationUtils.emitActionCompleteErrorInstrumentation(targetBundle:action:errorDescription:siriEnvironment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalLinkActionCompletion) init];
  if (v11)
  {
    id v15 = v11;
    LNAction.asSiriLinkFlowProvisionalLinkAction()(v12);
    uint64_t v14 = v13;
    [v15 setAction:v13];

    outlined bridged method (mbgnn) of @objc SiriLinkFlowProvisionalLinkActionCompletion.targetBundle.setter(a1, a2, v15);
    [v15 setIsSuccess:0];
    outlined bridged method (mbgnn) of @objc SiriLinkFlowProvisionalLinkActionCompletion.errorDescription.setter(a4, a5, v15);
    specialized static ProvisionalInstrumentationUtils.emitLinkFlowProvisionalInstrumentation<A>(event:siriEnvironment:)((uint64_t)v15, a6, &demangling cache variable for type metadata for SiriLinkFlowProvisionalLinkActionCompletion.Type, (SEL *)&selRef_setLinkActionCompletion_);
  }
}

void static ProvisionalInstrumentationUtils.emitActionConversionInstrumentation(isSuccess:siriEnvironment:)(char a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)SiriLinkFlowProvisionalLinkActionConversion) init];
  if (v4)
  {
    id v5 = v4;
    [v4 setIsSuccess:a1 & 1];
    specialized static ProvisionalInstrumentationUtils.emitLinkFlowProvisionalInstrumentation<A>(event:siriEnvironment:)((uint64_t)v5, a2, &demangling cache variable for type metadata for SiriLinkFlowProvisionalLinkActionConversion.Type, (SEL *)&selRef_setLinkActionConversion_);
  }
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void outlined bridged method (mbgnn) of @objc SiriLinkFlowProvisionalLinkActionCompletion.targetBundle.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setTargetBundle:v4];
}

void outlined bridged method (mbgnn) of @objc SiriLinkFlowProvisionalLinkActionCompletion.errorDescription.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setErrorDescription:v4];
}

ValueMetadata *type metadata accessor for ProvisionalInstrumentationUtils()
{
  return &type metadata for ProvisionalInstrumentationUtils;
}

void OUTLINED_FUNCTION_6_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

Swift::Bool __swiftcall INIntent.requiresDeviceToBeUnlocked()()
{
  if ([v0 _isUserConfirmationRequired])
  {
    id v1 = [v0 typeName];
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;

    LOBYTE(v1) = static VoiceCommandsParity.isParityIntent(intentName:)(v2, v4);
    swift_bridgeObjectRelease();
    char v5 = v1 ^ 1;
    return v5 & 1;
  }
  Swift::String v6 = INIntent.category()();
  BOOL v7 = v6._countAndFlagsBits == 0x59524F4745544143 && v6._object == (void *)0xEE00524544524F5FLL;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v6._countAndFlagsBits == 0xD000000000000011 && v6._object == (void *)0x80000000002279B0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    char v5 = 1;
    return v5 & 1;
  }
  OUTLINED_FUNCTION_52();
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v9) {
    goto LABEL_9;
  }

  return INIntent.isRestricted()();
}

Swift::String __swiftcall INIntent.category()()
{
  id v1 = [v0 _metadata];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [v1 intentCategory];

    switch((int)v3)
    {
      case 1:
        uint64_t v4 = @"CATEGORY_INFORMATION";
        goto LABEL_25;
      case 2:
        uint64_t v4 = @"CATEGORY_PLAY_AUDIO";
        goto LABEL_25;
      case 3:
        uint64_t v4 = @"CATEGORY_PLAY_VIDEO";
        goto LABEL_25;
      case 4:
        uint64_t v4 = @"CATEGORY_ORDER";
        goto LABEL_25;
      case 5:
        uint64_t v4 = @"CATEGORY_NAVIGATION";
        goto LABEL_25;
      case 6:
        uint64_t v4 = @"CATEGORY_START";
        goto LABEL_25;
      case 7:
        uint64_t v4 = @"CATEGORY_SHARE";
        goto LABEL_25;
      case 8:
        uint64_t v4 = @"CATEGORY_CREATE";
        goto LABEL_25;
      case 9:
        uint64_t v4 = @"CATEGORY_SEARCH";
        goto LABEL_25;
      case 11:
        uint64_t v4 = @"CATEGORY_TOGGLE";
        goto LABEL_25;
      case 12:
        uint64_t v4 = @"CATEGORY_DOWNLOAD";
        goto LABEL_25;
      case 13:
        uint64_t v4 = @"CATEGORY_LOG";
        goto LABEL_25;
      case 14:
        uint64_t v4 = @"CATEGORY_CHECK_IN";
        goto LABEL_25;
      case 15:
        uint64_t v4 = @"CATEGORY_WORKFLOW";
        goto LABEL_25;
      case 16:
        uint64_t v4 = @"CATEGORY_REQUEST";
        goto LABEL_25;
      case 17:
        uint64_t v4 = @"CATEGORY_SET";
        goto LABEL_25;
      case 18:
        uint64_t v4 = @"CATEGORY_CALL_AUDIO";
        goto LABEL_25;
      case 19:
        uint64_t v4 = @"CATEGORY_CALL_VIDEO";
        goto LABEL_25;
      case 20:
        uint64_t v4 = @"CATEGORY_PLAY_SOUND";
        goto LABEL_25;
      case 21:
        uint64_t v4 = @"CATEGORY_USER_ACTIVITY";
LABEL_25:
        BOOL v7 = v4;
        break;
      default:
        uint64_t v4 = +[NSString stringWithFormat:@"(unknown: %i)", v3];
        break;
    }
    uint64_t v8 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v9;
  }
  else
  {
    unint64_t v5 = 0x80000000002279D0;
    uint64_t v6 = 0xD000000000000014;
  }
  uint64_t v10 = v6;
  id v11 = (void *)v5;
  result._object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

Swift::Bool __swiftcall INIntent.isRestricted()()
{
  id v1 = v0;
  id v2 = [v0 _codableDescription];
  id v3 = [v2 schema];

  if (!v3
    || (id v4 = [v3 dictionaryRepresentationForIntent:v1],
        v3,
        !v4)
    || (uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(), v4, !v5))
  {
    long long v26 = 0u;
    long long v27 = 0u;
    goto LABEL_24;
  }
  specialized Dictionary.subscript.getter(0x746E65746E494E49, 0xE900000000000073, v5, &v26);
  swift_bridgeObjectRelease();
  if (!*((void *)&v27 + 1)) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(v24 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  uint64_t v23 = (char *)&type metadata for Any + 8;
  while (1)
  {
    uint64_t v8 = *(void *)(v24 + 8 * v7 + 32);
    uint64_t v9 = *(void *)(v8 + 16);
    swift_bridgeObjectRetain();
    if (v9
      && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x80000000002279F0),
          (v11 & 1) != 0)
      && (outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v10, (uint64_t)&v26),
          swift_dynamicCast()))
    {
      uint64_t v13 = v24;
      uint64_t v12 = v25;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v12 = 0;
    }
    id v14 = objc_msgSend(v1, "_className", v23);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    if (!v12)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    if (v13 == v15 && v12 == v17)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    if (v6 == ++v7)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_30:
  OUTLINED_FUNCTION_52();
  specialized Dictionary.subscript.getter(v21, v22, v8, &v26);
  swift_bridgeObjectRelease();
  if (!*((void *)&v27 + 1))
  {
LABEL_24:
    outlined destroy of Any?((uint64_t)&v26);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v24 > 0;
  }
  return 0;
}

Swift::String __swiftcall INIntent.verb()()
{
  uint64_t v0 = INIntent.verb()((SEL *)&selRef_categoryVerb);
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall INIntent.shouldSupressIntentResponseDialog()()
{
  id v1 = [v0 typeName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.lowercased()();
  swift_bridgeObjectRelease();
  if ((INIntent.showsWhenRun.getter() & 1) != 0
    && (OUTLINED_FUNCTION_52(),
        String.lowercased()(),
        lazy protocol witness table accessor for type String and conformance String(),
        char v2 = OUTLINED_FUNCTION_0_14(),
        swift_bridgeObjectRelease(),
        (v2 & 1) == 0))
  {
    OUTLINED_FUNCTION_52();
    String.lowercased()();
    char v3 = OUTLINED_FUNCTION_0_14();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v3 = 1;
  }
  return v3 & 1;
}

uint64_t INIntent.showsWhenRun.getter()
{
  id v1 = [v0 _metadata];
  if (!v1) {
    return 1;
  }
  char v2 = v1;
  id v3 = [v1 showsWhenRun];

  return (uint64_t)v3;
}

uint64_t INIntent.bundleId.getter()
{
  return INIntent.verb()((SEL *)&selRef_launchId);
}

uint64_t INIntent.verb()(SEL *a1)
{
  id v3 = [v1 _metadata];
  if (!v3 || (uint64_t result = outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(v3, a1), !v5))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(void *a1)
{
  return outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(a1, (SEL *)&selRef_launchId);
}

uint64_t outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t OUTLINED_FUNCTION_0_14()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t static LocaleUtils.siriLanguageCode()()
{
  id v0 = [self sharedPreferences];
  if (!v0
    || (uint64_t result = outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(v0, (SEL *)&selRef__cachedSiriLanguageCode), !v2))
  {
    swift_bridgeObjectRelease();
    return 28261;
  }
  return result;
}

uint64_t static LocaleUtils.getPreferredLocationFromIntent(intentName:preferredLanguageCode:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for intentBundleCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static LocaleUtils.intentBundleCache;
  if (*(void *)(static LocaleUtils.intentBundleCache + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = OUTLINED_FUNCTION_16_12();
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v8)
    {
      uint64_t v9 = *(void **)(*(void *)(v4 + 56) + 8 * v7);
      swift_endAccess();
      id v10 = v9;
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSBundle);
  uint64_t v11 = OUTLINED_FUNCTION_16_12();
  static LocaleUtils.getBundleId(intentName:)(v11, v12);
  id v13 = @nonobjc NSBundle.__allocating_init(identifier:)();
  if (!v13) {
    return 0;
  }
  id v14 = v13;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v10 = v14;
  specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v10, a1, a2, (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
  swift_endAccess();
LABEL_9:
  swift_bridgeObjectRelease();
  Class isa = (Class)[v10 localizations];
  if (!isa)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = self;
  Class v17 = Array._bridgeToObjectiveC()().super.isa;
  id v18 = [v16 preferredLocalizationsFromArray:isa forPreferences:v17];

  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  return v19;
}

uint64_t static LocaleUtils.getLocale(preferredLocalizations:)(uint64_t a1)
{
  id v2 = [self sharedPreferences];
  if (v2
    && (outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(v2, (SEL *)&selRef__cachedSiriLanguageCode), v3))
  {
    if (!a1) {
      return OUTLINED_FUNCTION_30_0();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (!a1) {
      return OUTLINED_FUNCTION_30_0();
    }
  }
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain_n();
    specialized Collection.prefix(_:)(2);
    Swift::String v4 = Substring.lowercased()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Collection.prefix(_:)(2);
    Swift::String v5 = Substring.lowercased()();
    swift_bridgeObjectRelease();
    if (v4._countAndFlagsBits != v5._countAndFlagsBits || v4._object != v5._object) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return OUTLINED_FUNCTION_30_0();
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    String.subscript.getter();
    OUTLINED_FUNCTION_9_18();
    return OUTLINED_FUNCTION_17_10();
  }
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t result = specialized Array.index(_:offsetBy:limitedBy:)(0, v3, v5);
  if (v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = result;
  }
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10 < 0)
    {
LABEL_25:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
  }
  if (v9 < v8)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v2 & 0xC000000000000001) != 0 && v8)
  {
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNStaticDeferredLocalizedString);
    Swift::Int v11 = 0;
    do
    {
      Swift::Int v12 = v11 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v11);
      Swift::Int v11 = v12;
    }
    while (v8 != v12);
  }
  if (!v4) {
    return v2 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.subscript.getter();
  swift_bridgeObjectRelease_n();
  return v13;
}

void one-time initialization function for TypesRequiringDictationMode()
{
  static INCodableAttribute.TypesRequiringDictationMode = (uint64_t)&outlined read-only object #0 of one-time initialization function for TypesRequiringDictationMode;
}

uint64_t one-time initialization function for TargetNodesForType()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_215A60;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x8000000000223C90;
  *(void *)(inited + 48) = &outlined read-only object #0 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 56) = 0xD000000000000011;
  *(void *)(inited + 64) = 0x8000000000227CB0;
  *(void *)(inited + 72) = &outlined read-only object #1 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x8000000000227CD0;
  *(void *)(inited + 96) = &outlined read-only object #2 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 104) = 0xD000000000000011;
  *(void *)(inited + 112) = 0x8000000000227CF0;
  *(void *)(inited + 120) = &outlined read-only object #3 of one-time initialization function for TargetNodesForType;
  strcpy((char *)(inited + 128), "foundation.URL");
  *(unsigned char *)(inited + 143) = -18;
  *(void *)(inited + 144) = &outlined read-only object #4 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 152) = 0xD000000000000019;
  *(void *)(inited + 160) = 0x8000000000227D10;
  *(void *)(inited + 168) = &outlined read-only object #5 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 176) = 0xD000000000000017;
  *(void *)(inited + 184) = 0x8000000000227D30;
  *(void *)(inited + 192) = &outlined read-only object #6 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 200) = 0xD000000000000019;
  *(void *)(inited + 208) = 0x8000000000227D50;
  *(void *)(inited + 216) = &outlined read-only object #7 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 224) = 0xD000000000000013;
  *(void *)(inited + 232) = 0x8000000000227D70;
  *(void *)(inited + 240) = &outlined read-only object #8 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 248) = 0xD000000000000016;
  *(void *)(inited + 256) = 0x8000000000227D90;
  *(void *)(inited + 264) = &outlined read-only object #9 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 272) = 0xD000000000000011;
  *(void *)(inited + 280) = 0x8000000000227DB0;
  *(void *)(inited + 288) = &outlined read-only object #10 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 296) = 0x697461646E756F66;
  *(void *)(inited + 304) = 0xEF7373614D2E6E6FLL;
  *(void *)(inited + 312) = &outlined read-only object #11 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 320) = 0xD000000000000011;
  *(void *)(inited + 328) = 0x8000000000227DD0;
  *(void *)(inited + 336) = &outlined read-only object #12 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 344) = 0xD000000000000010;
  *(void *)(inited + 352) = 0x8000000000227DF0;
  *(void *)(inited + 360) = &outlined read-only object #13 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 368) = 0xD000000000000011;
  *(void *)(inited + 376) = 0x8000000000227E10;
  *(void *)(inited + 384) = &outlined read-only object #14 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 392) = 0xD000000000000018;
  *(void *)(inited + 400) = 0x8000000000227E30;
  *(void *)(inited + 408) = &outlined read-only object #15 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 416) = 0xD000000000000014;
  *(void *)(inited + 424) = 0x8000000000227E50;
  *(void *)(inited + 432) = &outlined read-only object #16 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 440) = 0xD000000000000011;
  *(void *)(inited + 448) = 0x8000000000227E70;
  *(void *)(inited + 456) = &outlined read-only object #17 of one-time initialization function for TargetNodesForType;
  *(void *)(inited + 464) = 0x697461646E756F66;
  *(void *)(inited + 472) = 0xEF656C69462E6E6FLL;
  *(void *)(inited + 480) = _swiftEmptyArrayStorage;
  *(void *)(inited + 488) = 0xD000000000000011;
  *(void *)(inited + 496) = 0x8000000000223CB0;
  *(void *)(inited + 504) = &outlined read-only object #18 of one-time initialization function for TargetNodesForType;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static INCodableAttribute.TargetNodesForType = result;
  return result;
}

uint64_t INCodableAttribute.localizedPrompt(promptDialogType:intent:appInfo:tokens:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v8 = [v4 promptDialogWithType:a1];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v48 = static LocaleUtils.siriLanguageCode()();
    unint64_t v11 = v10;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    uint64_t v46 = a4;
    uint64_t v47 = a2;
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v49 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v11, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v13, v14, "INCodableAttribute localized prompt, siri locale: %s", v15, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    Swift::String_optional v16 = INCodableAttributePromptDialog.getLanguageCode()();
    id v17 = [v9 formatString];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    uint64_t v21 = static LocaleUtils.getContentLocale(dialogLocale:appInfo:formatString:)(v16.value._countAndFlagsBits, (unint64_t)v16.value._object, a3, v18, v20);
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      uint64_t v44 = v21;
      unint64_t v45 = v11;
      if (v23) {
        uint64_t v27 = v21;
      }
      else {
        uint64_t v27 = 7104878;
      }
      if (v23) {
        unint64_t v28 = v23;
      }
      else {
        unint64_t v28 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      if (v16.value._object) {
        uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
      }
      else {
        uint64_t countAndFlagsBits = 7104878;
      }
      if (v16.value._object) {
        object = v16.value._object;
      }
      else {
        object = (void *)0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v31 = countAndFlagsBits;
      uint64_t v21 = v44;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, (unint64_t)object, &v49);
      unint64_t v11 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v24, v25, "INCodableAttribute localized prompt, content locale: %s, dialog language code: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    char v32 = static LocaleUtils.compatibleLocale(siriLocale:contentLocale:)(v48, v11, v21, v23);
    swift_bridgeObjectRelease();
    if (v32)
    {
      if (v46) {
        v33.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      }
      else {
        v33.super.Class isa = 0;
      }
      NSString v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v41 = v9;
      id v42 = [v9 localizedDialogWithIntent:v47 tokens:v33.super.isa forLanguage:v40];

      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      return v39;
    }

    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v35 = (void *)Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_16_11(v36))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_20(&dword_0, v37, v38, "INCodableAttribute localized prompt dialog is nil");
    OUTLINED_FUNCTION_7_0();
  }

  return 0;
}

Swift::String_optional __swiftcall INCodableAttributePromptDialog.getLanguageCode()()
{
  uint64_t v1 = outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter(v0, (SEL *)&selRef_dictionaryRepresentation);
  if (!v1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
    id v8 = (void *)Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_16_11(v9)) {
      goto LABEL_15;
    }
    *(_WORD *)swift_slowAlloc() = 0;
    uint64_t v12 = "INCodableAttributePromptDialog dictionary is nil";
    goto LABEL_14;
  }
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_6_13();
  specialized Dictionary.subscript.getter(0xD000000000000035, v3, v2, v4);
  swift_bridgeObjectRelease();
  if (!v19)
  {
    outlined destroy of Any?((uint64_t)v18);
    goto LABEL_10;
  }
  if ((OUTLINED_FUNCTION_5_14() & 1) == 0)
  {
LABEL_10:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    id v8 = (void *)Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_16_11(v14)) {
      goto LABEL_15;
    }
    *(_WORD *)swift_slowAlloc() = 0;
    uint64_t v12 = "INCodableAttributePromptDialog language code is nil";
LABEL_14:
    OUTLINED_FUNCTION_20(&dword_0, v10, v11, v12);
    OUTLINED_FUNCTION_7_0();
LABEL_15:

    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_16;
  }
  uint64_t v5 = v16;
  uint64_t v6 = v17;
LABEL_16:
  result.value._object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t static LocaleUtils.getContentLocale(dialogLocale:appInfo:formatString:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (!a5)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
    id v17 = a3;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v30 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v20 = 136315138;
      if (!a3
        || (Swift::String_optional v22 = SAAppInfo.getAppLanguage()(), countAndFlagsBits = v22.value._countAndFlagsBits, !v22.value._object))
      {
        uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
      }
      OUTLINED_FUNCTION_13_14(countAndFlagsBits);
      OUTLINED_FUNCTION_7_18();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v18, v19, "LocationUtils.getContentLocale(), format String is nil, appInfo language: %s", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();

      if (!a3) {
        goto LABEL_38;
      }
    }
    else
    {

      if (!a3) {
        goto LABEL_38;
      }
    }
    if ((unint64_t)SAAppInfo.getAppLanguage()().value._object) {
      goto LABEL_37;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_12_11();
  }
  type metadata accessor for CATSpeakableString();
  uint64_t v8 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)()[2];
  swift_bridgeObjectRelease();
  if (v8)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
    id v10 = a3;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v30 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v13 = 136315138;
      if (!a3 || (v15 = SAAppInfo.getAppLanguage()(), uint64_t v14 = v15.value._countAndFlagsBits, !v15.value._object)) {
        uint64_t v14 = swift_bridgeObjectRelease();
      }
      OUTLINED_FUNCTION_13_14(v14);
      OUTLINED_FUNCTION_7_18();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v11, v12, "LocationUtils.getContentLocale(), appInfo language: %s", v13, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();

      if (!a3) {
        return OUTLINED_FUNCTION_12_11();
      }
    }
    else
    {

      if (!a3) {
        return OUTLINED_FUNCTION_12_11();
      }
    }
    SAAppInfo.getAppLanguage()();
LABEL_37:
    OUTLINED_FUNCTION_14_10();
    return OUTLINED_FUNCTION_12_11();
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v30 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v26 = 136315138;
    if (a2) {
      uint64_t v27 = a1;
    }
    else {
      uint64_t v27 = 7104878;
    }
    if (a2) {
      unint64_t v28 = a2;
    }
    else {
      unint64_t v28 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v24, v25, "LocationUtils.getContentLocale(), no properties in template, dialogLocale: %s", v26, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_12_11();
}

uint64_t static LocaleUtils.compatibleLocale(siriLocale:contentLocale:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a4) {
    return 1;
  }
  OUTLINED_FUNCTION_4_15(95);
  if (v6 & 1) != 0 && (OUTLINED_FUNCTION_4_15(45), (v7))
  {
    OUTLINED_FUNCTION_30_0();
    Swift::String v12 = String.lowercased()();
    uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    object = v12._object;
  }
  else
  {
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    Swift::String v8 = String.lowercased()();
    uint64_t countAndFlagsBits = v8._countAndFlagsBits;
    object = v8._object;
    swift_bridgeObjectRelease();
  }
  specialized Collection<>.firstIndex(of:)(95, 0xE100000000000000, a3, a4);
  if (v13 & 1) != 0 && (specialized Collection<>.firstIndex(of:)(45, 0xE100000000000000, a3, a4), (v14))
  {
    OUTLINED_FUNCTION_12_11();
    String.lowercased()();
    OUTLINED_FUNCTION_14_10();
  }
  else
  {
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    String.lowercased()();
    OUTLINED_FUNCTION_14_10();
    swift_bridgeObjectRelease();
  }
  BOOL v15 = countAndFlagsBits == 26746 && object == (void *)0xE200000000000000;
  if (v15
    || (OUTLINED_FUNCTION_30_0(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    || (countAndFlagsBits == 6649209 ? (BOOL v20 = object == (void *)0xE300000000000000) : (BOOL v20 = 0),
        v20 || (OUTLINED_FUNCTION_30_0(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = &outlined read-only object #0 of static LocaleUtils.compatibleLocale(siriLocale:contentLocale:);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v16 = (_UNKNOWN **)swift_allocObject();
    *((_OWORD *)v16 + 1) = xmmword_212160;
    v16[4] = (_UNKNOWN *)countAndFlagsBits;
    v16[5] = object;
  }
  uint64_t v17 = OUTLINED_FUNCTION_12_11();
  char v19 = specialized Sequence<>.contains(_:)(v17, v18, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t INCodableAttribute.localizedUnsupportedDialog(unsupportedReasonCode:intent:appInfo:tokens:)(uint64_t a1, uint64_t a2, void *a3, Class isa)
{
  id v8 = [v4 unsupportedReasonWithIndex:a1];
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v24 = a2;
  static LocaleUtils.siriLanguageCode()();
  Swift::String_optional v10 = INCodableAttributeUnsupportedReason.getLanguageCode()();
  id v11 = [v9 formatString];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  uint64_t v15 = static LocaleUtils.getContentLocale(dialogLocale:appInfo:formatString:)(v10.value._countAndFlagsBits, (unint64_t)v10.value._object, a3, v12, v14);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = OUTLINED_FUNCTION_16_12();
  LOBYTE(v14) = static LocaleUtils.compatibleLocale(siriLocale:contentLocale:)(v18, v19, v15, v17);
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  OUTLINED_FUNCTION_16_12();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v9 localizedDialogWithIntent:v24 tokens:isa forLanguage:v20];

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v22;
}

Swift::String_optional __swiftcall INCodableAttributeUnsupportedReason.getLanguageCode()()
{
  uint64_t v1 = outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter(v0, (SEL *)&selRef_dictionaryRepresentation);
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_6_13();
  specialized Dictionary.subscript.getter(0xD00000000000003ALL, v3, v2, v4);
  swift_bridgeObjectRelease();
  if (!v10)
  {
    outlined destroy of Any?((uint64_t)v9);
    goto LABEL_6;
  }
  if ((OUTLINED_FUNCTION_5_14() & 1) == 0)
  {
LABEL_6:
    uint64_t v1 = 0;
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  uint64_t v1 = v7;
  uint64_t v5 = v8;
LABEL_8:
  result.value._object = v5;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

id INCodableAttribute.localizedPromptTemplate(promptDialogType:appInfo:)(uint64_t a1)
{
  id result = [v1 promptDialogWithType:a1];
  if (result)
  {
    uint64_t v3 = result;
    id v4 = [result dictionaryRepresentation];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      static LocaleUtils.siriLanguageCode()();
      OUTLINED_FUNCTION_23_11(0xD000000000000035, (uint64_t)"INIntentParameterPromptDialogFormatStringLanguageCode", v11, v13, v14);
      if (v15) {
        OUTLINED_FUNCTION_21_8();
      }
      else {
        outlined destroy of Any?((uint64_t)&v14);
      }
      id v7 = [v3 formatString];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      OUTLINED_FUNCTION_10_21();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v8 = OUTLINED_FUNCTION_15_13();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v8)
      {
        OUTLINED_FUNCTION_6_13();
        specialized Dictionary.subscript.getter(0xD000000000000029, v9, v6, v10);

        swift_bridgeObjectRelease();
        if (v15)
        {
          if (OUTLINED_FUNCTION_5_14()) {
            return (id)v12;
          }
          else {
            return 0;
          }
        }
        outlined destroy of Any?((uint64_t)&v14);
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
    return 0;
  }
  return result;
}

id INCodableAttribute.localizedUnsupportedDialogTemplate(unsupportedReasonCode:appInfo:)(uint64_t a1)
{
  id result = [v1 unsupportedReasonWithIndex:a1];
  if (result)
  {
    uint64_t v3 = result;
    id v4 = [result dictionaryRepresentation];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      static LocaleUtils.siriLanguageCode()();
      OUTLINED_FUNCTION_23_11(0xD00000000000003ALL, (uint64_t)"INIntentParameterUnsupportedReasonFormatStringLanguageCode", v11, v13, v14);
      if (v15) {
        OUTLINED_FUNCTION_21_8();
      }
      else {
        outlined destroy of Any?((uint64_t)&v14);
      }
      id v7 = [v3 formatString];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      OUTLINED_FUNCTION_10_21();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v8 = OUTLINED_FUNCTION_15_13();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v8)
      {
        OUTLINED_FUNCTION_6_13();
        specialized Dictionary.subscript.getter(0xD00000000000002ELL, v9, v6, v10);

        swift_bridgeObjectRelease();
        if (v15)
        {
          if (OUTLINED_FUNCTION_5_14()) {
            return (id)v12;
          }
          else {
            return 0;
          }
        }
        outlined destroy of Any?((uint64_t)&v14);
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
    return 0;
  }
  return result;
}

Swift::Bool __swiftcall INCodableAttribute.requiresDictationPrompt()()
{
  if (one-time initialization token for TypesRequiringDictationMode != -1) {
    swift_once();
  }
  id v0 = (void *)static INCodableAttribute.TypesRequiringDictationMode;
  swift_bridgeObjectRetain();
  uint64_t v1 = INCodableAttribute.typeString()();
  char v3 = specialized Sequence<>.contains(_:)(v1, v2, v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t INCodableAttribute.typeString()()
{
  if ([v0 valueType]
    || (uint64_t v8 = outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(v0)) == 0)
  {
    uint64_t v1 = static CustomTypeReference.fromSlotValueType(valueType:)((uint64_t)[v0 valueType]);
    uint64_t v3 = v2;
    uint64_t v5 = v4;
    uint64_t v17 = v1;
    swift_bridgeObjectRetain();
    v6._uint64_t countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRetain();
    v7._uint64_t countAndFlagsBits = v3;
    v7._object = v5;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = static CustomTypeReference.buildFromAttributeHash(attributeHash:)(v8);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    uint64_t v17 = v9;
    swift_bridgeObjectRetain();
    v14._uint64_t countAndFlagsBits = 46;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = v11;
    v15._object = v13;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v17;
}

void *INCodableAttribute.promptTargets()()
{
  if (one-time initialization token for TargetNodesForType != -1) {
    swift_once();
  }
  uint64_t v0 = static INCodableAttribute.TargetNodesForType;
  uint64_t v1 = INCodableAttribute.typeString()();
  uint64_t v3 = specialized Dictionary.subscript.getter(v1, v2, v0);
  swift_bridgeObjectRelease();
  if (v3) {
    return (void *)v3;
  }
  else {
    return _swiftEmptyArrayStorage;
  }
}

void *INCodableAttribute.disambiguationPromptTargets()()
{
  uint64_t v0 = INCodableAttribute.promptTargets()();
  unint64_t v1 = v0[2];
  unint64_t v2 = v1 + 2;
  if (__OFADD__(v1, 2))
  {
    __break(1u);
LABEL_10:
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = v10;
    int64_t v4 = v10[3] >> 1;
    goto LABEL_6;
  }
  uint64_t v3 = v0;
  if (!swift_isUniquelyReferenced_nonNull_native() || (int64_t v4 = v3[3] >> 1, v4 < (uint64_t)v2))
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = v5;
    int64_t v4 = v5[3] >> 1;
  }
  unint64_t v2 = v3[2];
  unint64_t v1 = v2 + 1;
  if (v4 <= v2) {
    goto LABEL_10;
  }
LABEL_6:
  v3[2] = v1;
  Swift::String v6 = &v3[2 * v2];
  v6[4] = 0xD000000000000024;
  v6[5] = 0x8000000000227C80;
  uint64_t v7 = v2 + 2;
  if (v4 < v7)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = v11;
  }
  v3[2] = v7;
  uint64_t v8 = &v3[2 * v1];
  v8[4] = 0xD000000000000027;
  v8[5] = 0x8000000000223C60;
  return v3;
}

void one-time initialization function for intentBundleCache()
{
  static LocaleUtils.intentBundleCache = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t *LocaleUtils.intentBundleCache.unsafeMutableAddressor()
{
  if (one-time initialization token for intentBundleCache != -1) {
    swift_once();
  }
  return &static LocaleUtils.intentBundleCache;
}

uint64_t static LocaleUtils.intentBundleCache.getter()
{
  if (one-time initialization token for intentBundleCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static LocaleUtils.intentBundleCache.setter(uint64_t a1)
{
  if (one-time initialization token for intentBundleCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static LocaleUtils.intentBundleCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static LocaleUtils.intentBundleCache.modify())()
{
  if (one-time initialization token for intentBundleCache != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_30_0();
  swift_beginAccess();
  return static LocaleUtils.intentBundleCache.modify;
}

Swift::String_optional __swiftcall SAAppInfo.getAppLanguage()()
{
  if (SAAppInfo.isShortcutsApp()())
  {
    outlined bridged method (pb) of @objc SAAppInfo.displayAppName.getter(v0);
    if (v3)
    {
      OUTLINED_FUNCTION_14_10();
      uint64_t v4 = outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter(v0, (SEL *)&selRef_appNameMap);
      if (v4)
      {
        uint64_t v5 = v4;
        if (*(void *)(v4 + 16))
        {
          if (v2 != 0x74756374726F6853 || v1 != (void *)0xE900000000000073)
          {
            OUTLINED_FUNCTION_12_11();
            uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((v7 & 1) == 0)
            {
              int64_t v19 = 0;
              uint64_t v20 = v5 + 64;
              uint64_t v21 = 1 << *(unsigned char *)(v5 + 32);
              uint64_t v22 = -1;
              if (v21 < 64) {
                uint64_t v22 = ~(-1 << v21);
              }
              unint64_t v23 = v22 & *(void *)(v5 + 64);
              int64_t v24 = (unint64_t)(v21 + 63) >> 6;
              while (1)
              {
                if (v23)
                {
                  unint64_t v25 = __clz(__rbit64(v23));
                  v23 &= v23 - 1;
                  unint64_t v26 = v25 | (v19 << 6);
                }
                else
                {
                  int64_t v27 = v19 + 1;
                  if (__OFADD__(v19, 1))
                  {
                    __break(1u);
                    goto LABEL_60;
                  }
                  if (v27 >= v24) {
                    goto LABEL_58;
                  }
                  unint64_t v28 = *(void *)(v20 + 8 * v27);
                  ++v19;
                  if (!v28)
                  {
                    int64_t v19 = v27 + 1;
                    if (v27 + 1 >= v24) {
                      goto LABEL_58;
                    }
                    unint64_t v28 = *(void *)(v20 + 8 * v19);
                    if (!v28)
                    {
                      int64_t v19 = v27 + 2;
                      if (v27 + 2 >= v24) {
                        goto LABEL_58;
                      }
                      unint64_t v28 = *(void *)(v20 + 8 * v19);
                      if (!v28)
                      {
                        int64_t v29 = v27 + 3;
                        if (v29 >= v24)
                        {
LABEL_58:
                          swift_bridgeObjectRelease();
                          swift_release();
                          goto LABEL_14;
                        }
                        unint64_t v28 = *(void *)(v20 + 8 * v29);
                        if (!v28)
                        {
                          while (1)
                          {
                            int64_t v19 = v29 + 1;
                            if (__OFADD__(v29, 1)) {
                              break;
                            }
                            if (v19 >= v24) {
                              goto LABEL_58;
                            }
                            unint64_t v28 = *(void *)(v20 + 8 * v19);
                            ++v29;
                            if (v28) {
                              goto LABEL_46;
                            }
                          }
LABEL_60:
                          __break(1u);
LABEL_61:
                          __break(1u);
LABEL_62:
                          __break(1u);
                          goto LABEL_63;
                        }
                        int64_t v19 = v29;
                      }
                    }
                  }
LABEL_46:
                  unint64_t v23 = (v28 - 1) & v28;
                  unint64_t v26 = __clz(__rbit64(v28)) + (v19 << 6);
                }
                uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v26);
                uint64_t v10 = *v30;
                unint64_t v9 = v30[1];
                uint64_t v31 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v26);
                uint64_t v7 = *v31;
                uint64_t v8 = (void *)v31[1];
                if (*v31 != v2 || v1 != v8)
                {
                  uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((v7 & 1) == 0) {
                    continue;
                  }
                }
                if (v10 != 1702060354 || v9 != 0xE400000000000000)
                {
                  uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((v7 & 1) == 0)
                  {
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    swift_release();
                    goto LABEL_27;
                  }
                }
              }
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v9 = 0xE200000000000000;
          uint64_t v10 = 28261;
          goto LABEL_27;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
  }
LABEL_14:
  uint64_t v7 = (uint64_t)[v0 appIdentifyingInfo];
  if (!v7) {
    goto LABEL_61;
  }
  uint64_t v11 = outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter((void *)v7, (SEL *)&selRef_bundleId);
  if (v12)
  {
    if (v11 == 0xD000000000000026 && v12 == 0x8000000000227A30)
    {
      swift_bridgeObjectRelease();
LABEL_26:
      uint64_t v10 = 0;
      unint64_t v9 = 0;
      goto LABEL_27;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_26;
    }
  }
  uint64_t v7 = (uint64_t)[v0 appIdentifyingInfo];
  if (!v7) {
    goto LABEL_62;
  }
  uint64_t v7 = outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter((void *)v7, (SEL *)&selRef_bundleId);
  if (!v8)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSBundle);
  id v14 = @nonobjc NSBundle.__allocating_init(identifier:)();
  if (!v14) {
    goto LABEL_26;
  }
  Swift::String v15 = v14;
  id v16 = [v14 developmentLocalization];
  if (!v16)
  {

    goto LABEL_26;
  }
  uint64_t v17 = v16;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v18;

LABEL_27:
  uint64_t v7 = v10;
  uint64_t v8 = (void *)v9;
LABEL_64:
  result.value._object = v8;
  result.value._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t static LocaleUtils.extractLanguageCode(locale:)()
{
  OUTLINED_FUNCTION_4_15(95);
  if (v0 & 1) != 0 && (OUTLINED_FUNCTION_4_15(45), (v1))
  {
    OUTLINED_FUNCTION_30_0();
    return String.lowercased()()._countAndFlagsBits;
  }
  else
  {
    swift_bridgeObjectRetain();
    String.subscript.getter();
    OUTLINED_FUNCTION_9_18();
    OUTLINED_FUNCTION_17_10();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
    swift_bridgeObjectRelease();
    return countAndFlagsBits;
  }
}

unint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v11) {
      return v8;
    }
    unint64_t v8 = String.index(after:)();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

unint64_t specialized Collection.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t static LocaleUtils.getBundleId(intentName:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = String.count.getter();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v5 >= v4) {
    return 0;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.count.getter();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  unint64_t v6 = String.Index.init<A>(utf16Offset:in:)();
  swift_bridgeObjectRetain();
  specialized Collection.subscript.getter(v6, a1, a2);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v7 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v7 + 16) <= 1uLL)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<String>);
  lazy protocol witness table accessor for type ArraySlice<String> and conformance ArraySlice<A>();
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v8;
}

id @nonobjc NSBundle.__allocating_init(identifier:)()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() bundleWithIdentifier:v0];

  return v1;
}

id SAAppInfo.isShortcutsApp()()
{
  id result = [v0 appIdentifyingInfo];
  if (result)
  {
    uint64_t v2 = outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(result, (SEL *)&selRef_bundleId);
    if (v3)
    {
      if (v2 == 0xD000000000000013 && v3 == 0x8000000000225330) {
        goto LABEL_11;
      }
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v4)
      {
        char v5 = 1;
        return (id)(v5 & 1);
      }
    }
    id result = [v0 appIdentifyingInfo];
    if (result)
    {
      uint64_t v6 = outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(result, (SEL *)&selRef_bundleId);
      if (!v7)
      {
        char v5 = 0;
        return (id)(v5 & 1);
      }
      if (v6 != 0xD000000000000026 || v7 != 0x8000000000227A30)
      {
        char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_14;
      }
LABEL_11:
      char v5 = 1;
LABEL_14:
      swift_bridgeObjectRelease();
      return (id)(v5 & 1);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)()
{
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v0;
  *NSString v0 = 0x8000000000000000;
  id v1 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  OUTLINED_FUNCTION_3_17((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);

  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_2_17();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  OUTLINED_FUNCTION_3_17(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);

  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  OUTLINED_FUNCTION_20_15();
  uint64_t v6 = OUTLINED_FUNCTION_1_16();
  a4(v6);
  *uint64_t v4 = v8;

  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OUTLINED_FUNCTION_20_15();
  uint64_t v5 = OUTLINED_FUNCTION_1_16();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, v6, v7, a4, v8);
  OUTLINED_FUNCTION_3_17(v9, v10, v11, v12, v13, v14, v15, v16, v18, v19);

  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  char v3 = OUTLINED_FUNCTION_2_17();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, a2, v4);
  OUTLINED_FUNCTION_3_17(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);

  return swift_bridgeObjectRelease();
}

uint64_t outlined bridged method (pb) of @objc SAAppInfo.displayAppName.getter(void *a1)
{
  id v1 = [a1 displayAppName];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter(a1, (SEL *)&selRef_appNameMap);
}

uint64_t outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

ValueMetadata *type metadata accessor for LocaleUtils()
{
  return &type metadata for LocaleUtils;
}

uint64_t specialized Array.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<String> and conformance ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<String>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_16()
{
  *NSString v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_2_17()
{
  *NSString v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_3_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

unint64_t OUTLINED_FUNCTION_4_15(uint64_t a1)
{
  return specialized Collection<>.firstIndex(of:)(a1, 0xE100000000000000, v2, v1);
}

uint64_t OUTLINED_FUNCTION_5_14()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_7_18()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_18()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_10_21()
{
  return static LocaleUtils.getContentLocale(dialogLocale:appInfo:formatString:)(v2, v1, v0, v3, v4);
}

uint64_t OUTLINED_FUNCTION_12_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_14(uint64_t a1, ...)
{
  va_start(va, a1);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v1, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_15_13()
{
  return static LocaleUtils.compatibleLocale(siriLocale:contentLocale:)(v2, v1, v0, v3);
}

uint64_t OUTLINED_FUNCTION_16_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_15()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_21_8()
{
  return swift_dynamicCast();
}

double OUTLINED_FUNCTION_23_11@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, long long a5)
{
  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000, v5, &a5);
}

id static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(void *a1)
{
  self;
  uint64_t v3 = OUTLINED_FUNCTION_22_13();
  if (!v3)
  {
    self;
    uint64_t v10 = (void *)OUTLINED_FUNCTION_22_13();
    if (v10) {
      return [v10 unitType];
    }
    self;
    uint64_t v17 = OUTLINED_FUNCTION_22_13();
    if (!v17)
    {
      self;
      if (OUTLINED_FUNCTION_22_13())
      {
        OUTLINED_FUNCTION_17_11();
        return &dword_4 + 3;
      }
      self;
      uint64_t v42 = OUTLINED_FUNCTION_22_13();
      if (v42)
      {
        unint64_t v43 = (void *)v42;
        id v44 = a1;
        id v45 = [v43 enumerationIdentifier];
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        return (id)v9;
      }
      self;
      if (OUTLINED_FUNCTION_22_13()) {
        return 0;
      }
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      uint64_t v53 = __swift_project_value_buffer(v52, (uint64_t)static Logger.voiceCommands);
      id v54 = a1;
      uint64_t v9 = v53;
      id v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v55, v56))
      {
        OUTLINED_FUNCTION_26_10();
        id v57 = (void *)OUTLINED_FUNCTION_57_0();
        *(_DWORD *)uint64_t v1 = 138412290;
        id v58 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v57 = v54;

        _os_log_impl(&dword_0, v55, v56, "#LNValueTypeMap: cannot map unsupported %@", v1, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();

        return (id)v9;
      }

LABEL_53:
      OUTLINED_FUNCTION_17_11();
      return &dword_C;
    }
    uint64_t v18 = v17;
    uint64_t v19 = self;
    id v6 = a1;
    id v20 = [v19 timerValueType];
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNIntentsValueType);
    uint64_t v21 = static NSObject.== infix(_:_:)();

    if (v21) {
      goto LABEL_3;
    }
    id v22 = v6;
    id v23 = [v19 personValueType];
    char v24 = OUTLINED_FUNCTION_16_13();

    if (v24)
    {

      OUTLINED_FUNCTION_17_11();
      return &dword_8 + 1;
    }
    id v39 = v22;
    id v40 = [v19 currencyAmountValueType];
    char v41 = static NSObject.== infix(_:_:)();

    if (v41)
    {

      OUTLINED_FUNCTION_17_11();
      return &dword_0 + 3;
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    uint64_t v9 = __swift_project_value_buffer(v46, (uint64_t)static Logger.voiceCommands);
    id v47 = v39;
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      OUTLINED_FUNCTION_26_10();
      uint64_t v50 = (void *)OUTLINED_FUNCTION_57_0();
      OUTLINED_FUNCTION_37_6(5.7779e-34);
      OUTLINED_FUNCTION_55_2();
      *uint64_t v50 = v18;

      id v51 = "#LNValueTypeMap: cannot map unsupported LNIntentsValueType %@";
LABEL_32:
      _os_log_impl(&dword_0, v48, v49, v51, (uint8_t *)v39, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();

      return (id)v9;
    }
LABEL_52:

    goto LABEL_53;
  }
  uint64_t v4 = v3;
  uint64_t v5 = self;
  id v6 = a1;
  id v7 = [v5 dateValueType];
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNPrimitiveValueType);
  uint64_t v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) == 0)
  {
    id v11 = v6;
    id v12 = [v5 dateComponentsValueType];
    char v13 = OUTLINED_FUNCTION_16_13();

    if (v13)
    {

      OUTLINED_FUNCTION_17_11();
      return &dword_4 + 1;
    }
    id v14 = v11;
    id v15 = [v5 BOOLValueType];
    char v16 = OUTLINED_FUNCTION_16_13();

    if (v16)
    {

      return &dword_0 + 2;
    }
    id v25 = v14;
    id v26 = [v5 doubleValueType];
    char v27 = OUTLINED_FUNCTION_16_13();

    if (v27)
    {

      OUTLINED_FUNCTION_17_11();
      return &dword_4 + 2;
    }
    id v28 = v25;
    id v29 = [v5 intValueType];
    char v30 = OUTLINED_FUNCTION_16_13();

    if (v30) {
      goto LABEL_23;
    }
    id v28 = v28;
    id v31 = [v5 int8ValueType];
    char v32 = OUTLINED_FUNCTION_16_13();

    if (v32) {
      goto LABEL_23;
    }
    id v28 = v28;
    id v33 = [v5 int16ValueType];
    char v34 = OUTLINED_FUNCTION_16_13();

    if (v34) {
      goto LABEL_23;
    }
    id v28 = v28;
    id v35 = [v5 int32ValueType];
    char v36 = OUTLINED_FUNCTION_16_13();

    if ((v36 & 1) != 0
      || (id v28 = v28,
          id v37 = [v5 int64ValueType],
          char v38 = OUTLINED_FUNCTION_16_13(),
          v28,
          (id)v8,
          (v38 & 1) != 0))
    {
LABEL_23:

      OUTLINED_FUNCTION_17_11();
      return &dword_8;
    }
    id v59 = v28;
    id v60 = [v5 placemarkValueType];
    char v61 = OUTLINED_FUNCTION_16_13();

    if (v61)
    {

      OUTLINED_FUNCTION_17_11();
      return &dword_8 + 2;
    }
    id v62 = v59;
    id v63 = [v5 URLValueType];
    char v64 = OUTLINED_FUNCTION_16_13();

    if (v64)
    {

      OUTLINED_FUNCTION_17_11();
      return &dword_C + 1;
    }
    id v65 = v62;
    id v66 = [v5 stringValueType];
    char v67 = OUTLINED_FUNCTION_16_13();

    if (v67)
    {

      OUTLINED_FUNCTION_17_11();
      return &dword_8 + 3;
    }
    id v39 = v65;
    id v68 = [v5 attributedStringValueType];
    char v69 = static NSObject.== infix(_:_:)();

    if (v69)
    {

      OUTLINED_FUNCTION_17_11();
      return &dword_0 + 1;
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    uint64_t v9 = __swift_project_value_buffer(v70, (uint64_t)static Logger.voiceCommands);
    id v47 = v39;
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      OUTLINED_FUNCTION_26_10();
      uint64_t v71 = (void *)OUTLINED_FUNCTION_57_0();
      OUTLINED_FUNCTION_37_6(5.7779e-34);
      OUTLINED_FUNCTION_55_2();
      *uint64_t v71 = v4;

      id v51 = "#LNValueTypeMap: cannot map unsupported LNPrimitiveValueType %@";
      goto LABEL_32;
    }
    goto LABEL_52;
  }
LABEL_3:

  OUTLINED_FUNCTION_17_11();
  return &dword_4;
}

uint64_t LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = a3[3];
  uint64_t v10 = a3[4];
  id v11 = __swift_project_boxed_opaque_existential_1(a3, v9);
  id v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)
                                                                                              + async function pointer to specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:));
  id v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v12;
  void *v12 = v5;
  v12[1] = protocol witness for VoiceShortcutClientWrapping.getVoiceShortcut(voiceCommandName:) in conformance VoiceShortcutClientWrapper;
  return v14(a1, a2, (uint64_t)v11, a4, v4, v9, v10);
}

uint64_t static VoiceCommandIntentValueType.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 == 1)
    {
      if (a6 == 1) {
        return a1 == a4;
      }
      return 0;
    }
    switch(a1)
    {
      case 1:
        if (a6 != 2 || a4 != 1) {
          return 0;
        }
        break;
      case 2:
        if (a6 != 2 || a4 != 2) {
          return 0;
        }
        break;
      case 3:
        if (a6 != 2 || a4 != 3) {
          return 0;
        }
        break;
      case 4:
        if (a6 != 2 || a4 != 4) {
          return 0;
        }
        break;
      case 5:
        if (a6 != 2 || a4 != 5) {
          return 0;
        }
        break;
      case 6:
        if (a6 != 2 || a4 != 6) {
          return 0;
        }
        break;
      case 7:
        if (a6 != 2 || a4 != 7) {
          return 0;
        }
        break;
      case 8:
        if (a6 != 2 || a4 != 8) {
          return 0;
        }
        break;
      case 9:
        if (a6 != 2 || a4 != 9) {
          return 0;
        }
        break;
      case 10:
        if (a6 != 2 || a4 != 10) {
          return 0;
        }
        break;
      case 11:
        if (a6 != 2 || a4 != 11) {
          return 0;
        }
        break;
      case 12:
        if (a6 != 2 || a4 != 12) {
          return 0;
        }
        break;
      case 13:
        if (a6 != 2 || a4 != 13) {
          return 0;
        }
        break;
      default:
        return a6 == 2 && !(a5 | a4);
    }
    return !a5;
  }
  if (a6) {
    return 0;
  }
  if (a1 != a4 || a2 != a5) {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoiceCommandIntentValueType(uint64_t a1, uint64_t a2)
{
  return static VoiceCommandIntentValueType.__derived_enum_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

_UNKNOWN **LNValueType.toPromptTargetType()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    id v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    id v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v6 = v2;

    _os_log_impl(&dword_0, v3, v4, "#LNValueType has type %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
  }
  uint64_t v8 = (uint64_t)static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(v2);
  if (v10)
  {
    if (v10 == 1) {
      return &outlined read-only object #2 of LNValueType.toPromptTargetType();
    }
    else {
      return off_28A8B0[v8];
    }
  }
  else
  {
    outlined consume of VoiceCommandIntentValueType(v8, v9, 0);
    return &outlined read-only object #4 of LNValueType.toPromptTargetType();
  }
}

Swift::Bool __swiftcall LNValueType.requiresStrictDictationPrompt()()
{
  uint64_t v1 = (uint64_t)static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(v0);
  if (v3 == 2 && __PAIR128__(v2, v1) < 0xE && ((0x2881u >> v1) & 1) != 0) {
    return 1;
  }
  outlined consume of VoiceCommandIntentValueType(v1, v2, v3);
  return 0;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v1;
  v0[78] = v3;
  v0[77] = v4;
  v0[76] = v5;
  v0[75] = v6;
  uint64_t v7 = type metadata accessor for Locale();
  v0[79] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v0[80] = v8;
  v0[81] = OUTLINED_FUNCTION_25();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_16(v9);
  v0[82] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for URL();
  v0[83] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v0[84] = v11;
  v0[85] = OUTLINED_FUNCTION_25();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_16(v12);
  v0[86] = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for DateComponents();
  v0[87] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v0[88] = v14;
  v0[89] = OUTLINED_FUNCTION_25();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_16(v15);
  v0[90] = OUTLINED_FUNCTION_25();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_16(v16);
  v0[91] = OUTLINED_FUNCTION_25();
  uint64_t v17 = type metadata accessor for Date();
  v0[92] = v17;
  OUTLINED_FUNCTION_1_0(v17);
  v0[93] = v18;
  v0[94] = OUTLINED_FUNCTION_25();
  uint64_t v19 = type metadata accessor for ContactResolver();
  v0[95] = v19;
  v0[5] = v19;
  v0[6] = &protocol witness table for ContactResolver;
  v0[2] = v2;
  swift_retain();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v20, v21, v22);
}

{
  uint64_t v0;
  id v1;
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  NSString v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void *v60;
  os_log_type_t v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  void *v66;
  void *v67;
  os_log_type_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  os_log_type_t v94;
  _WORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  void *v101;
  uint64_t v103;
  unint64_t *v104;
  char v105;
  void *v106;
  uint64_t v107;
  uint64_t result;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  id v113;
  Class v114;
  NSObject *v115;
  os_log_type_t v116;
  void *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  void *v133;
  uint64_t v134;
  os_log_type_t v135;
  _WORD *v136;
  uint64_t v137;
  void (*v138)(uint64_t);
  void (*v139)(void);
  id v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t);
  uint64_t v143;
  os_log_type_t v144;
  _WORD *v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  os_log_t v155;
  NSObject *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  os_log_t log;
  os_log_t loga;
  os_log_t logb;
  NSObject *logc;
  uint64_t type;
  void *v165;
  void *v166;
  uint64_t v167[3];
  void *v168;
  uint64_t v169;

  v169 = v0;
  os_log_type_t type = v0 + 592;
  uint64_t v1 = static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(*(void **)(v0 + 624));
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v165 = (void *)(v0 + 16);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
  *(void *)(v0 + 768) = v7;
  uint64_t v8 = OUTLINED_FUNCTION_40_4();
  uint64_t v9 = static os_log_type_t.debug.getter();
  uint64_t v166 = (void *)v0;
  if (os_log_type_enabled(v8, v9))
  {
    OUTLINED_FUNCTION_35_7();
    uint64_t v157 = OUTLINED_FUNCTION_22_3();
    OUTLINED_FUNCTION_20_16(4.8149e-34);
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v12 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v167);
    OUTLINED_FUNCTION_86(v12, v13, v14, v15, v16, v17, v18, v19, v148, v153, v157, (uint64_t)log, type);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v1 = v8;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51_2();
    OUTLINED_FUNCTION_59_2(&dword_0, v20, v21, "#LNValueType getting value of %s", v22, v23, v24, v25, v149, v154, v158, loga);
    uint64_t v8 = v156;
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_39_7();
  }
  if ((_BYTE)v5)
  {
    id v26 = v0;
    char v27 = v0 + 576;
    if (v5 == 1)
    {
      id v28 = static InputUtils.getMeasurement(from:)(*(void *)(v0 + 600));
      if (v30 != -1)
      {
        if (v30)
        {
          outlined copy of ParsedMeasurement(v28, v29, 1);
          if (v1 == (id)LNMeasurementUnitTypeOfUnit())
          {
            id v66 = *(void **)(v0 + 624);
            *(void *)(v0 + 360) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
            __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 336));
            OUTLINED_FUNCTION_80_0();
            type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSUnit);
            OUTLINED_FUNCTION_82_0();
            objc_allocWithZone((Class)LNValue);
            @nonobjc LNValue.init(_:valueType:)((void *)(v0 + 336), v66);
            OUTLINED_FUNCTION_12_12();
            goto LABEL_24;
          }
          char v67 = (void *)OUTLINED_FUNCTION_41_6();
          id v68 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_5_3(v68))
          {
            OUTLINED_FUNCTION_28_8();
            logb = (os_log_t)swift_slowAlloc();
            v167[0] = (uint64_t)logb;
            v8->Class isa = (Class)OUTLINED_FUNCTION_69_0(4.8151e-34);
            type metadata accessor for LNMeasurementUnitType(0);
            char v69 = OUTLINED_FUNCTION_68_0();
            uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v167);
            OUTLINED_FUNCTION_47_3(v71);
            swift_bridgeObjectRelease();
            uint64_t v72 = OUTLINED_FUNCTION_18_13();
            uint64_t v80 = OUTLINED_FUNCTION_85_0(v72, v73, v74, v75, v76, v77, v78, v79, v148);
            OUTLINED_FUNCTION_36_6(v80, v81, v82, v83, v84, v85, v86, v87, v150, v153, v156);
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_46_4(&dword_0, v88, v89, "Measurement unit type %s does not match requested %s.", v90, v91, v92, v93, v151, v155, v159, (uint64_t)logb, (os_log_type_t)type);
            OUTLINED_FUNCTION_62();
            OUTLINED_FUNCTION_7_0();
            OUTLINED_FUNCTION_7_0();

            OUTLINED_FUNCTION_12_12();
            goto LABEL_24;
          }
          OUTLINED_FUNCTION_27_11();
        }
        else
        {
          id v31 = *(uint64_t **)(v0 + 608);
          LNActionParameterMetadata.measurementDefaultUnitSymbol.getter();
          if (v32)
          {
            id v33 = OUTLINED_FUNCTION_49_2();
            char v34 = (id)LNMeasurementUnitTypeToUnit();
            swift_bridgeObjectRelease();

            *(void *)(v27 + 456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
            __swift_allocate_boxed_opaque_existential_1(v31);
            type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSUnit);
            id v35 = v34;
            OUTLINED_FUNCTION_81_0();
            char v36 = objc_allocWithZone((Class)LNValue);
            OUTLINED_FUNCTION_77(v166);

LABEL_24:
            OUTLINED_FUNCTION_12_12();
            goto LABEL_72;
          }
          char v67 = (void *)Logger.logObject.getter();
          uint64_t v94 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_5_3(v94))
          {
            uint64_t v95 = (_WORD *)OUTLINED_FUNCTION_33();
            OUTLINED_FUNCTION_22_10(v95);
            OUTLINED_FUNCTION_24_10(&dword_0, v96, v97, "Could not create valid measurement due to missing unit symbol.");
            OUTLINED_FUNCTION_7_0();
          }
        }

        goto LABEL_24;
      }
      id v60 = (void *)Logger.logObject.getter();
      char v61 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_5_3(v61)) {
        goto LABEL_71;
      }
      id v62 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v62);
      id v65 = "Unable to parse measurement from nl intent.";
      goto LABEL_70;
    }
    OUTLINED_FUNCTION_75_0();
    switch(v57)
    {
      case 1:
        if (!static InputUtils.getAttributedText(from:)().super.isa) {
          goto LABEL_68;
        }
        OUTLINED_FUNCTION_84();
        id v104 = (unint64_t *)&lazy cache variable for type metadata for NSAttributedString;
        goto LABEL_41;
      case 2:
        uint64_t v105 = static InputUtils.getBool(from:)();
        if (v105 == 2) {
          goto LABEL_68;
        }
        uint64_t v0 = *(void *)(v0 + 624);
        uint64_t v168 = &type metadata for Bool;
        LOBYTE(v167[0]) = v105 & 1;
        break;
      case 3:
        if (!static InputUtils.getCurrency(from:locale:)()) {
          goto LABEL_68;
        }
        OUTLINED_FUNCTION_84();
        id v104 = (unint64_t *)&lazy cache variable for type metadata for INCurrencyAmount;
LABEL_41:
        uint64_t v168 = (void *)type metadata accessor for NSError(0, v104);
        v167[0] = v7;
        break;
      case 4:
        if (one-time initialization token for voiceCommandDateTimeNode != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_78_0();
        type metadata accessor for VoiceCommandsNLIntent(0);
        lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent();
        OUTLINED_FUNCTION_66_0();
        OUTLINED_FUNCTION_38_6();
        static AceService.currentAsync.getter();
        char v106 = (void *)swift_task_alloc();
        v166[97] = v106;
        *char v106 = v166;
        v106[1] = specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:);
        OUTLINED_FUNCTION_54_1();
        OUTLINED_FUNCTION_3_18();
        return static InputUtils.getDate(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)();
      case 5:
        if (one-time initialization token for voiceCommandDateTimeNode != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_52_0();
        type metadata accessor for VoiceCommandsNLIntent(0);
        lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent();
        OUTLINED_FUNCTION_65_0();
        OUTLINED_FUNCTION_71_0();
        static AceService.currentAsync.getter();
        char v109 = (void *)swift_task_alloc();
        v166[98] = v109;
        *char v109 = v166;
        v109[1] = specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:);
        OUTLINED_FUNCTION_53_0();
        OUTLINED_FUNCTION_3_18();
        return static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)();
      case 6:
      case 8:
        id v58 = static InputUtils.getDouble(from:)();
        if (v59) {
          goto LABEL_68;
        }
        uint64_t v0 = *(void *)(v0 + 624);
        uint64_t v168 = &type metadata for Double;
        v167[0] = v58;
        break;
      case 7:
        static InputUtils.getText(from:)();
        if (!v111) {
          goto LABEL_68;
        }
        OUTLINED_FUNCTION_76_0();
        v112 = [self stringValueType];
        uint64_t v113 = objc_allocWithZone((Class)LNValue);
        OUTLINED_FUNCTION_64();
        goto LABEL_16;
      case 9:
        uint64_t v114 = OUTLINED_FUNCTION_70(v49, v50, v51, v52, v53, v54, v55, v56, v148, v153, (uint64_t)v156, (uint64_t)log, type, v165);
        if (v3)
        {
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v115 = Logger.logObject.getter();
          uint64_t v116 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v115, v116))
          {
            logc = v115;
            OUTLINED_FUNCTION_26_10();
            v167[0] = OUTLINED_FUNCTION_22_3();
            OUTLINED_FUNCTION_32_8(4.8149e-34);
            uint64_t v117 = *(void **)(v0 + 496);
            uint64_t v118 = Error.localizedDescription.getter();
            uint64_t v126 = OUTLINED_FUNCTION_85_0(v118, v119, v120, v121, v122, v123, v124, v125, v148);
            OUTLINED_FUNCTION_48_3(v126);
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            OUTLINED_FUNCTION_34_8(&dword_0, v127, v128, "Encountered an error when trying to resolve person %s", v129, v130, v131, v132, v152, v153, (uint64_t)v156, logc);
            OUTLINED_FUNCTION_72_0();
            OUTLINED_FUNCTION_7_0();
            OUTLINED_FUNCTION_7_0();

            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          goto LABEL_68;
        }
        uint64_t v143 = (uint64_t)v114;
        if (!v114)
        {
LABEL_68:
          id v60 = (void *)Logger.logObject.getter();
          uint64_t v144 = static os_log_type_t.error.getter();
          if (!OUTLINED_FUNCTION_5_3(v144))
          {
LABEL_71:

            goto LABEL_72;
          }
          uint64_t v145 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_22_10(v145);
          id v65 = "#LNValueType: getLNValue returning nil";
LABEL_70:
          OUTLINED_FUNCTION_24_10(&dword_0, v63, v64, v65);
          OUTLINED_FUNCTION_7_0();
          goto LABEL_71;
        }
        uint64_t v0 = *(void *)(v0 + 624);
        uint64_t v168 = (void *)type metadata accessor for NSError(0, &lazy cache variable for type metadata for INPerson);
        v167[0] = v143;
        break;
      case 10:
        uint64_t v133 = (void *)swift_task_alloc();
        *(void *)(v0 + 792) = v133;
        *uint64_t v133 = v0;
        v133[1] = specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:);
        OUTLINED_FUNCTION_33_8();
        OUTLINED_FUNCTION_3_18();
        return static InputUtils.getPlacemark(from:)();
      case 11:
        goto LABEL_13;
      case 12:
        id v60 = (void *)Logger.logObject.getter();
        v135 = static os_log_type_t.error.getter();
        if (!OUTLINED_FUNCTION_5_3(v135)) {
          goto LABEL_71;
        }
        os_log_type_t v136 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_22_10(v136);
        id v65 = "#LNValueType: attempting to getLNValue from unsupported VoiceCommandIntentValueType";
        goto LABEL_70;
      case 13:
        OUTLINED_FUNCTION_67_0();
        if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v0) != 1)
        {
          uint64_t v137 = OUTLINED_FUNCTION_19_10();
          v138(v137);
          *(void *)(v0 + 488) = v8;
          __swift_allocate_boxed_opaque_existential_1(v3);
          OUTLINED_FUNCTION_45_3();
          v139();
          uint64_t v140 = objc_allocWithZone((Class)LNValue);
          OUTLINED_FUNCTION_43_3(v5);
          uint64_t v141 = OUTLINED_FUNCTION_44_2();
          char v41 = (id)v142(v141);
          goto LABEL_72;
        }
        outlined destroy of URL?(*(void *)(v0 + 656), (uint64_t *)&demangling cache variable for type metadata for URL?);
        goto LABEL_68;
      default:
        self;
        uint64_t v98 = OUTLINED_FUNCTION_22_13();
        *(void *)(v0 + 808) = v98;
        if (v98)
        {
          uint64_t v99 = (void *)v98;
          uint64_t v100 = *(id *)(v0 + 624);
          *(void *)(v0 + 816) = [v99 memberValueType];
          swift_allocObject();
          *(void *)(v0 + 824) = ContactResolver.init()();
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), *(void *)(v0 + 80));
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
          uint64_t v101 = (void *)OUTLINED_FUNCTION_79_0();
          *(void *)(v0 + 832) = v101;
          *uint64_t v101 = v0;
          v101[1] = specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:);
          OUTLINED_FUNCTION_33_8();
          OUTLINED_FUNCTION_3_18();
          __asm { BR              X5 }
        }
        goto LABEL_68;
    }
  }
  else
  {
    outlined consume of VoiceCommandIntentValueType((uint64_t)v1, (uint64_t)v3, 0);
    id v26 = v0;
LABEL_13:
    static InputUtils.getText(from:)();
    if (!v37) {
      goto LABEL_68;
    }
    uint64_t v0 = *(void *)(v26 + 624);
    OUTLINED_FUNCTION_76_0();
  }
  char v38 = objc_allocWithZone((Class)LNValue);
  id v39 = (id)v0;
  id v40 = v167;
LABEL_16:
  char v41 = @nonobjc LNValue.init(_:valueType:)(v40, v39);
LABEL_72:
  OUTLINED_FUNCTION_23_12((uint64_t)v41, v42, v43, v44, v45, v46, v47, v48, v148, v153, (uint64_t)v156, (uint64_t)log, type, (uint64_t)v165);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_3_18();
  __asm { BRAA            X2, X16 }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  OUTLINED_FUNCTION_58_2();
  uint64_t v7 = *(void *)(v6 + 720);
  uint64_t v8 = *v3;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v9 = v8;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  outlined destroy of URL?(v2, &demangling cache variable for type metadata for LocationProviding?);
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  OUTLINED_FUNCTION_50_3();
  uint64_t v7 = *(void *)(v6 + 720);
  uint64_t v8 = *v3;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v9 = v8;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for LocationProviding?);
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 800) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void v12[4];
  uint64_t v13;
  uint64_t v14;

  uint64_t v13 = v0;
  uint64_t v1 = *(void *)(v0 + 800);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 624);
    void v12[3] = type metadata accessor for NSError(0, &lazy cache variable for type metadata for CLPlacemark);
    v12[0] = v1;
    uint64_t v3 = objc_allocWithZone((Class)LNValue);
    @nonobjc LNValue.init(_:valueType:)(v12, v2);
  }
  else
  {
    uint64_t v4 = (void *)Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v6);
      OUTLINED_FUNCTION_23_0(&dword_0, v7, v8, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_7_0();
    }
  }
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = OUTLINED_FUNCTION_11_4();
  return v10(v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v4 = *(void **)(v3 + 816);
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 840) = v7;
  swift_task_dealloc();

  uint64_t v9 = OUTLINED_FUNCTION_30();
  v10(v9);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  id v1;
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  NSString v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void *v60;
  os_log_type_t v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  void *v66;
  void *v67;
  os_log_type_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  os_log_type_t v94;
  _WORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  void *v101;
  uint64_t v103;
  unint64_t *v104;
  char v105;
  void *v106;
  uint64_t v107;
  uint64_t result;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  id v113;
  Class v114;
  NSObject *v115;
  os_log_type_t v116;
  void *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  void *v133;
  uint64_t v134;
  os_log_type_t v135;
  _WORD *v136;
  uint64_t v137;
  void (*v138)(uint64_t);
  void (*v139)(void);
  id v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t);
  uint64_t v143;
  os_log_type_t v144;
  _WORD *v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  os_log_t v155;
  NSObject *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  os_log_t log;
  os_log_t loga;
  os_log_t logb;
  NSObject *logc;
  uint64_t type;
  void *v165;
  void *v166;
  uint64_t v167[3];
  void *v168;
  uint64_t v169;

  v169 = v0;
  os_log_type_t type = v0 + 592;
  uint64_t v1 = static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(*(void **)(v0 + 624));
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v165 = (void *)(v0 + 16);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
  *(void *)(v0 + 760) = v7;
  uint64_t v8 = OUTLINED_FUNCTION_40_4();
  uint64_t v9 = static os_log_type_t.debug.getter();
  uint64_t v166 = (void *)v0;
  if (os_log_type_enabled(v8, v9))
  {
    OUTLINED_FUNCTION_35_7();
    uint64_t v157 = OUTLINED_FUNCTION_22_3();
    OUTLINED_FUNCTION_20_16(4.8149e-34);
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v12 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v167);
    OUTLINED_FUNCTION_86(v12, v13, v14, v15, v16, v17, v18, v19, v148, v153, v157, (uint64_t)log, type);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v1 = v8;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51_2();
    OUTLINED_FUNCTION_59_2(&dword_0, v20, v21, "#LNValueType getting value of %s", v22, v23, v24, v25, v149, v154, v158, loga);
    uint64_t v8 = v156;
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_39_7();
  }
  if ((_BYTE)v5)
  {
    id v26 = v0;
    char v27 = v0 + 576;
    if (v5 == 1)
    {
      id v28 = static InputUtils.getMeasurement(from:)(*(void *)(v0 + 600));
      if (v30 != -1)
      {
        if (v30)
        {
          outlined copy of ParsedMeasurement(v28, v29, 1);
          if (v1 == (id)LNMeasurementUnitTypeOfUnit())
          {
            id v66 = *(void **)(v0 + 624);
            *(void *)(v0 + 360) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
            __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 336));
            OUTLINED_FUNCTION_80_0();
            type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSUnit);
            OUTLINED_FUNCTION_82_0();
            objc_allocWithZone((Class)LNValue);
            @nonobjc LNValue.init(_:valueType:)((void *)(v0 + 336), v66);
            OUTLINED_FUNCTION_12_12();
            goto LABEL_24;
          }
          char v67 = (void *)OUTLINED_FUNCTION_41_6();
          id v68 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_5_3(v68))
          {
            OUTLINED_FUNCTION_28_8();
            logb = (os_log_t)swift_slowAlloc();
            v167[0] = (uint64_t)logb;
            v8->Class isa = (Class)OUTLINED_FUNCTION_69_0(4.8151e-34);
            type metadata accessor for LNMeasurementUnitType(0);
            char v69 = OUTLINED_FUNCTION_68_0();
            uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v167);
            OUTLINED_FUNCTION_47_3(v71);
            swift_bridgeObjectRelease();
            uint64_t v72 = OUTLINED_FUNCTION_18_13();
            uint64_t v80 = OUTLINED_FUNCTION_85_0(v72, v73, v74, v75, v76, v77, v78, v79, v148);
            OUTLINED_FUNCTION_36_6(v80, v81, v82, v83, v84, v85, v86, v87, v150, v153, v156);
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_46_4(&dword_0, v88, v89, "Measurement unit type %s does not match requested %s.", v90, v91, v92, v93, v151, v155, v159, (uint64_t)logb, (os_log_type_t)type);
            OUTLINED_FUNCTION_62();
            OUTLINED_FUNCTION_7_0();
            OUTLINED_FUNCTION_7_0();

            OUTLINED_FUNCTION_12_12();
            goto LABEL_24;
          }
          OUTLINED_FUNCTION_27_11();
        }
        else
        {
          id v31 = *(uint64_t **)(v0 + 608);
          LNActionParameterMetadata.measurementDefaultUnitSymbol.getter();
          if (v32)
          {
            id v33 = OUTLINED_FUNCTION_49_2();
            char v34 = (id)LNMeasurementUnitTypeToUnit();

            swift_bridgeObjectRelease();
            *(void *)(v27 + 456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
            __swift_allocate_boxed_opaque_existential_1(v31);
            type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSUnit);
            id v35 = v34;
            OUTLINED_FUNCTION_81_0();
            char v36 = objc_allocWithZone((Class)LNValue);
            OUTLINED_FUNCTION_77(v166);

LABEL_24:
            OUTLINED_FUNCTION_12_12();
            goto LABEL_72;
          }
          char v67 = (void *)Logger.logObject.getter();
          uint64_t v94 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_5_3(v94))
          {
            uint64_t v95 = (_WORD *)OUTLINED_FUNCTION_33();
            OUTLINED_FUNCTION_22_10(v95);
            OUTLINED_FUNCTION_24_10(&dword_0, v96, v97, "Could not create valid measurement due to missing unit symbol.");
            OUTLINED_FUNCTION_7_0();
          }
        }

        goto LABEL_24;
      }
      id v60 = (void *)Logger.logObject.getter();
      char v61 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_5_3(v61)) {
        goto LABEL_71;
      }
      id v62 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v62);
      id v65 = "Unable to parse measurement from nl intent.";
      goto LABEL_70;
    }
    OUTLINED_FUNCTION_75_0();
    switch(v57)
    {
      case 1:
        if (!static InputUtils.getAttributedText(from:)().super.isa) {
          goto LABEL_68;
        }
        OUTLINED_FUNCTION_84();
        id v104 = (unint64_t *)&lazy cache variable for type metadata for NSAttributedString;
        goto LABEL_41;
      case 2:
        uint64_t v105 = static InputUtils.getBool(from:)();
        if (v105 == 2) {
          goto LABEL_68;
        }
        uint64_t v0 = *(void *)(v0 + 624);
        uint64_t v168 = &type metadata for Bool;
        LOBYTE(v167[0]) = v105 & 1;
        break;
      case 3:
        if (!static InputUtils.getCurrency(from:locale:)()) {
          goto LABEL_68;
        }
        OUTLINED_FUNCTION_84();
        id v104 = (unint64_t *)&lazy cache variable for type metadata for INCurrencyAmount;
LABEL_41:
        uint64_t v168 = (void *)type metadata accessor for NSError(0, v104);
        v167[0] = v7;
        break;
      case 4:
        if (one-time initialization token for voiceCommandDateTimeNode != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_78_0();
        type metadata accessor for VoiceCommandsNLIntent(0);
        lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent();
        OUTLINED_FUNCTION_66_0();
        OUTLINED_FUNCTION_38_6();
        static AceService.currentAsync.getter();
        char v106 = (void *)swift_task_alloc();
        v166[96] = v106;
        *char v106 = v166;
        v106[1] = specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:);
        OUTLINED_FUNCTION_54_1();
        OUTLINED_FUNCTION_3_18();
        return static InputUtils.getDate(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)();
      case 5:
        if (one-time initialization token for voiceCommandDateTimeNode != -1) {
          swift_once();
        }
        OUTLINED_FUNCTION_52_0();
        type metadata accessor for VoiceCommandsNLIntent(0);
        lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent();
        OUTLINED_FUNCTION_65_0();
        OUTLINED_FUNCTION_71_0();
        static AceService.currentAsync.getter();
        char v109 = (void *)swift_task_alloc();
        v166[97] = v109;
        *char v109 = v166;
        v109[1] = specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:);
        OUTLINED_FUNCTION_53_0();
        OUTLINED_FUNCTION_3_18();
        return static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)();
      case 6:
      case 8:
        id v58 = static InputUtils.getDouble(from:)();
        if (v59) {
          goto LABEL_68;
        }
        uint64_t v0 = *(void *)(v0 + 624);
        uint64_t v168 = &type metadata for Double;
        v167[0] = v58;
        break;
      case 7:
        static InputUtils.getText(from:)();
        if (!v111) {
          goto LABEL_68;
        }
        OUTLINED_FUNCTION_76_0();
        v112 = [self stringValueType];
        uint64_t v113 = objc_allocWithZone((Class)LNValue);
        OUTLINED_FUNCTION_64();
        goto LABEL_16;
      case 9:
        uint64_t v114 = OUTLINED_FUNCTION_70(v49, v50, v51, v52, v53, v54, v55, v56, v148, v153, (uint64_t)v156, (uint64_t)log, type, v165);
        if (v3)
        {
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v115 = Logger.logObject.getter();
          uint64_t v116 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v115, v116))
          {
            logc = v115;
            OUTLINED_FUNCTION_26_10();
            v167[0] = OUTLINED_FUNCTION_22_3();
            OUTLINED_FUNCTION_32_8(4.8149e-34);
            uint64_t v117 = *(void **)(v0 + 496);
            uint64_t v118 = Error.localizedDescription.getter();
            uint64_t v126 = OUTLINED_FUNCTION_85_0(v118, v119, v120, v121, v122, v123, v124, v125, v148);
            OUTLINED_FUNCTION_48_3(v126);
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            OUTLINED_FUNCTION_34_8(&dword_0, v127, v128, "Encountered an error when trying to resolve person %s", v129, v130, v131, v132, v152, v153, (uint64_t)v156, logc);
            OUTLINED_FUNCTION_72_0();
            OUTLINED_FUNCTION_7_0();
            OUTLINED_FUNCTION_7_0();

            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          goto LABEL_68;
        }
        uint64_t v143 = (uint64_t)v114;
        if (!v114)
        {
LABEL_68:
          id v60 = (void *)Logger.logObject.getter();
          uint64_t v144 = static os_log_type_t.error.getter();
          if (!OUTLINED_FUNCTION_5_3(v144))
          {
LABEL_71:

            goto LABEL_72;
          }
          uint64_t v145 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_22_10(v145);
          id v65 = "#LNValueType: getLNValue returning nil";
LABEL_70:
          OUTLINED_FUNCTION_24_10(&dword_0, v63, v64, v65);
          OUTLINED_FUNCTION_7_0();
          goto LABEL_71;
        }
        uint64_t v0 = *(void *)(v0 + 624);
        uint64_t v168 = (void *)type metadata accessor for NSError(0, &lazy cache variable for type metadata for INPerson);
        v167[0] = v143;
        break;
      case 10:
        uint64_t v133 = (void *)swift_task_alloc();
        *(void *)(v0 + 784) = v133;
        *uint64_t v133 = v0;
        v133[1] = specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:);
        OUTLINED_FUNCTION_33_8();
        OUTLINED_FUNCTION_3_18();
        return static InputUtils.getPlacemark(from:)();
      case 11:
        goto LABEL_13;
      case 12:
        id v60 = (void *)Logger.logObject.getter();
        v135 = static os_log_type_t.error.getter();
        if (!OUTLINED_FUNCTION_5_3(v135)) {
          goto LABEL_71;
        }
        os_log_type_t v136 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_22_10(v136);
        id v65 = "#LNValueType: attempting to getLNValue from unsupported VoiceCommandIntentValueType";
        goto LABEL_70;
      case 13:
        OUTLINED_FUNCTION_67_0();
        if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v0) != 1)
        {
          uint64_t v137 = OUTLINED_FUNCTION_19_10();
          v138(v137);
          *(void *)(v0 + 488) = v8;
          __swift_allocate_boxed_opaque_existential_1(v3);
          OUTLINED_FUNCTION_45_3();
          v139();
          uint64_t v140 = objc_allocWithZone((Class)LNValue);
          OUTLINED_FUNCTION_43_3(v5);
          uint64_t v141 = OUTLINED_FUNCTION_44_2();
          char v41 = (id)v142(v141);
          goto LABEL_72;
        }
        outlined destroy of URL?(*(void *)(v0 + 656), (uint64_t *)&demangling cache variable for type metadata for URL?);
        goto LABEL_68;
      default:
        self;
        uint64_t v98 = OUTLINED_FUNCTION_22_13();
        *(void *)(v0 + 800) = v98;
        if (v98)
        {
          uint64_t v99 = (void *)v98;
          uint64_t v100 = *(id *)(v0 + 624);
          *(void *)(v0 + 808) = [v99 memberValueType];
          type metadata accessor for ContactResolver();
          swift_allocObject();
          *(void *)(v0 + 816) = ContactResolver.init()();
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), *(void *)(v0 + 80));
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
          uint64_t v101 = (void *)OUTLINED_FUNCTION_79_0();
          *(void *)(v0 + 824) = v101;
          *uint64_t v101 = v0;
          v101[1] = specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:);
          OUTLINED_FUNCTION_33_8();
          OUTLINED_FUNCTION_3_18();
          __asm { BR              X5 }
        }
        goto LABEL_68;
    }
  }
  else
  {
    outlined consume of VoiceCommandIntentValueType((uint64_t)v1, (uint64_t)v3, 0);
    id v26 = v0;
LABEL_13:
    static InputUtils.getText(from:)();
    if (!v37) {
      goto LABEL_68;
    }
    uint64_t v0 = *(void *)(v26 + 624);
    OUTLINED_FUNCTION_76_0();
  }
  char v38 = objc_allocWithZone((Class)LNValue);
  id v39 = (id)v0;
  id v40 = v167;
LABEL_16:
  char v41 = @nonobjc LNValue.init(_:valueType:)(v40, v39);
LABEL_72:
  OUTLINED_FUNCTION_23_12((uint64_t)v41, v42, v43, v44, v45, v46, v47, v48, v148, v153, (uint64_t)v156, (uint64_t)log, type, (uint64_t)v165);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_3_18();
  __asm { BRAA            X2, X16 }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  OUTLINED_FUNCTION_58_2();
  uint64_t v7 = *(void *)(v6 + 720);
  uint64_t v8 = *v3;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v9 = v8;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  outlined destroy of URL?(v2, &demangling cache variable for type metadata for LocationProviding?);
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  OUTLINED_FUNCTION_50_3();
  uint64_t v7 = *(void *)(v6 + 720);
  uint64_t v8 = *v3;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v9 = v8;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for LocationProviding?);
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 792) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void v12[4];
  uint64_t v13;
  uint64_t v14;

  uint64_t v13 = v0;
  uint64_t v1 = *(void *)(v0 + 792);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 624);
    void v12[3] = type metadata accessor for NSError(0, &lazy cache variable for type metadata for CLPlacemark);
    v12[0] = v1;
    uint64_t v3 = objc_allocWithZone((Class)LNValue);
    @nonobjc LNValue.init(_:valueType:)(v12, v2);
  }
  else
  {
    uint64_t v4 = (void *)Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v6);
      OUTLINED_FUNCTION_23_0(&dword_0, v7, v8, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_7_0();
    }
  }
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = OUTLINED_FUNCTION_11_4();
  return v10(v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v4 = *(void **)(v3 + 808);
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 832) = v7;
  swift_task_dealloc();

  uint64_t v9 = OUTLINED_FUNCTION_30();
  v10(v9);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}