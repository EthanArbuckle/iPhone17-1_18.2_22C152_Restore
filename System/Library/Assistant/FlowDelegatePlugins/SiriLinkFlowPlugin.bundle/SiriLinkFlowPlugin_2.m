unsigned char *storeEnumTagSinglePayload for CustomParameterOptions(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  if (a3 + 1 >= 0xFFFF00) {
    v3 = 4;
  }
  else {
    v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    v4 = 1;
  }
  else {
    v4 = v3;
  }
  if (a3 >= 0xFF) {
    v5 = v4;
  }
  else {
    v5 = 0;
  }
  if (a2 > 0xFE)
  {
    v6 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12B98CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for CustomParameterOptions()
{
}

uint64_t destroy for CustomTypeReference()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CustomTypeReference(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CustomTypeReference(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for CustomTypeReference(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomTypeReference(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomTypeReference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for CustomTypeReference()
{
}

unsigned char *storeEnumTagSinglePayload for CustomTypeReference.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12BC58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CustomTypeReference.CodingKeys()
{
  return &unk_28D1D8;
}

void *type metadata accessor for CustomParameterOptions.CodingKeys()
{
  return &unk_28D268;
}

unsigned char *storeEnumTagSinglePayload for CustomRequestParameterDefinition.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12BD70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CustomRequestParameterDefinition.CodingKeys()
{
  return &unk_28D2F8;
}

void *type metadata accessor for CustomRequestDefinition.CodingKeys()
{
  return &unk_28D388;
}

unsigned char *storeEnumTagSinglePayload for CustomParameterOptions.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x12BE54);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for CustomIntentDefinition.CodingKeys()
{
  return &unk_28D418;
}

void *OUTLINED_FUNCTION_1_27()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

char *OUTLINED_FUNCTION_2_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  return &a17;
}

uint64_t OUTLINED_FUNCTION_3_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_27(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  uint64_t v13 = *(void *)(v11 + 56) + 32 * a1;
  return outlined init with copy of Any(v13, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_5_25(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v5 = *(void *)(v3 + 56) + 32 * a1;
  return outlined init with copy of Any(v5, (uint64_t)va);
}

void *OUTLINED_FUNCTION_9_31()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_10_30()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_13_27()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_21()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_17_18()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

unint64_t OUTLINED_FUNCTION_20_25()
{
  return 0xD000000000000015;
}

void CustomIntentNeedsDisambiguationFlowStrategy.__allocating_init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)()
{
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_36();
  v21 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  v7 = v6;
  v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  v15 = *(void *)(v6 + 24);
  v14 = *(void *)(v6 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v6, v15);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_20_0();
  v19 = v18 - v17;
  (*(void (**)(uint64_t))(v20 + 16))(v18 - v17);
  v21(v13, v11, v9, v19, v5, v3, v0, v15, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v7);
  OUTLINED_FUNCTION_27_1();
}

void CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)()
{
}

void CustomIntentNeedsDisambiguationFlowStrategy.paginationStyle(resolveRecord:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_12_1();
  uint64_t v38 = v4;
  uint64_t v39 = v3;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_50_1();
  uint64_t v37 = v5;
  type metadata accessor for ParameterIdentifier();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v7 = ParameterIdentifier.name.getter();
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_37_15();
  v10();
  uint64_t v11 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v12 = (void *)ParameterResolutionRecord.intent.getter();
  if ((static OutputUtils.shouldReadItemsInDisambiguationList(siriEnvironment:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    static PaginationStyle.noPagination()();
LABEL_14:

    OUTLINED_FUNCTION_27_1();
    return;
  }
  uint64_t v13 = v11;
  uint64_t v36 = v2;
  type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  uint64_t v35 = v0;
  outlined init with copy of DeviceState(v0 + 16, (uint64_t)&v41);
  static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)();
  uint64_t v15 = v14;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v41);
  id v16 = [v12 _codableDescription];
  uint64_t v34 = v7;
  id v17 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(v7, v9, v16);

  if (!v17)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    static PaginationStyle.noPagination()();
    uint64_t v11 = v13;
    goto LABEL_14;
  }
  id v18 = [v17 windowSize];

  uint64_t v19 = *(void *)(v15 + 16);
  swift_bridgeObjectRelease();
  if (!__OFADD__(v18, 1))
  {
    if ((uint64_t)v18 + 1 < v19)
    {
      v33[0] = v18;
      uint64_t v20 = v35;
      v21 = (void *)OUTLINED_FUNCTION_30_0();
      __swift_project_boxed_opaque_existential_1(v21, v22);
      v33[1] = v33;
      OUTLINED_FUNCTION_12_1();
      __chkstk_darwin(v23);
      OUTLINED_FUNCTION_41_9();
      OUTLINED_FUNCTION_59_0();
      v24();
      uint64_t v25 = v37;
      dispatch thunk of DeviceState.siriLocale.getter();
      OUTLINED_FUNCTION_30_0();
      OUTLINED_FUNCTION_81();
      v26();
      uint64_t v11 = v13;
      v27 = INIntentResolutionResult.getDisplayHints(intent:parameter:locale:shouldIncludeOrdinalReference:)(v12, v34, v9, v25, 0);
      OUTLINED_FUNCTION_66();
      v28();
      *(void *)(v20 + 56) = v27;
      swift_bridgeObjectRelease();
      uint64_t v29 = OUTLINED_FUNCTION_16_12();
      uint64_t v30 = INIntentResolutionResult.safeJSONDictionaryRepresentation(for:parameterName:)(v29);
      swift_bridgeObjectRelease();
      specialized Dictionary.subscript.getter(0x6F697463656C6573, 0xEE00736D6574496ELL, v30, &v41);
      swift_bridgeObjectRelease();
      if (v42)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
        int v31 = swift_dynamicCast();
        uint64_t v32 = v40;
        if (!v31) {
          uint64_t v32 = 0;
        }
      }
      else
      {
        outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)&v41, &demangling cache variable for type metadata for Any?);
        uint64_t v32 = 0;
      }
      *(void *)(v35 + 64) = v32;
      swift_bridgeObjectRelease();
      static PaginationStyle.pageSize(_:)();
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
}

void static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v47 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_12_1();
  uint64_t v52 = v2;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v48 = v5;
  v49 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v51 = (char *)&v41 - v6;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, CustomIntentDisambiguationItem>);
  OUTLINED_FUNCTION_12_1();
  uint64_t v50 = v7;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_50_1();
  uint64_t v54 = v9;
  uint64_t v46 = type metadata accessor for ParameterIdentifier();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_50_1();
  uint64_t v45 = v11;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  uint64_t v12 = (void *)ParameterResolutionRecord.result.getter();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
  id v14 = v12;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    id v17 = (uint8_t *)swift_slowAlloc();
    id v18 = (void *)swift_slowAlloc();
    uint64_t v42 = v17;
    *(_DWORD *)id v17 = 138412290;
    id v55 = v14;
    id v19 = v14;
    v43 = v1;
    id v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v18 = v14;

    uint64_t v1 = v43;
    _os_log_impl(&dword_0, v15, v16, "intentResolutionResult: %@", v42, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
  }
  id v21 = [v14 disambiguationItems];
  uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v23 = *(void *)(v22 + 16);
  swift_bridgeObjectRelease();
  v24 = &selRef_alternatives;
  if (v23) {
    v24 = &selRef_disambiguationItems;
  }
  id v25 = [v14 *v24];
  uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v27 = (void *)ParameterResolutionRecord.intent.getter();
  id v28 = [v27 _codableDescription];

  ParameterResolutionRecord.parameter.getter();
  uint64_t v29 = ParameterIdentifier.name.getter();
  uint64_t v31 = v30;
  OUTLINED_FUNCTION_81();
  v32();
  id v33 = outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)(v29, v31, v28, (SEL *)&selRef_attributeByKeyPath_);

  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  OUTLINED_FUNCTION_28_1();
  dispatch thunk of DeviceState.siriLocale.getter();
  OUTLINED_FUNCTION_59_0();
  v34();
  *(void *)(swift_allocObject() + 16) = v33;
  OUTLINED_FUNCTION_73();
  v35();
  id v36 = v33;
  uint64_t v37 = v54;
  Transformer.init(transform:)();
  OUTLINED_FUNCTION_53_1();
  uint64_t v39 = v38();
  __chkstk_darwin(v39);
  *(&v41 - 2) = v37;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVsAE_pTg5((void (*)(void *__return_ptr, uint64_t, uint64_t *))partial apply for closure #1 in static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:), (uint64_t)(&v41 - 4), v26);

  OUTLINED_FUNCTION_66();
  v40();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_27_1();
}

void CustomIntentNeedsDisambiguationFlowStrategy.actionForInput(_:resolveRecord:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v70 = type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_12_1();
  uint64_t v73 = v6;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_50_1();
  uint64_t v72 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  OUTLINED_FUNCTION_12_1();
  uint64_t v71 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_25_6();
  uint64_t v69 = v12;
  __chkstk_darwin(v13);
  v68 = (char *)v65 - v14;
  uint64_t v77 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v75 = v15;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_25_6();
  uint64_t v74 = v17;
  __chkstk_darwin(v18);
  type metadata accessor for Input();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_20_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.voiceCommands);
  uint64_t v76 = v3;
  OUTLINED_FUNCTION_59_0();
  v21();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    v65[1] = v1;
    id v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v66 = v9;
    uint64_t v79 = v26;
    uint64_t v67 = v5;
    *(_DWORD *)id v25 = 136315138;
    v65[0] = v25 + 4;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v29 = OUTLINED_FUNCTION_69_6();
    v30(v29);
    _os_log_impl(&dword_0, v22, v23, "#CustomIntentNeedsDisambiguationFlowStrategy actionForInput: %s", v25, 0xCu);
    swift_arrayDestroy();
    uint64_t v9 = v66;
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v31 = OUTLINED_FUNCTION_69_6();
    v32(v31);
  }

  Input.parse.getter();
  char v33 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  uint64_t v34 = v75;
  uint64_t v35 = *(void (**)(void))(v75 + 8);
  uint64_t v36 = v77;
  OUTLINED_FUNCTION_33_16();
  v35();
  switch(v33)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 3:
      goto LABEL_8;
    default:
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v37) {
        goto LABEL_15;
      }
LABEL_8:
      uint64_t v38 = v74;
      Input.parse.getter();
      int v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 88))(v38, v36);
      if (v39 == enum case for Parse.NLv3IntentOnly(_:))
      {
        OUTLINED_FUNCTION_33_16();
        v35();
        goto LABEL_13;
      }
      if (v39 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
      {
        if (v39 == enum case for Parse.directInvocation(_:))
        {
          uint64_t v45 = OUTLINED_FUNCTION_50_9();
          v46(v45);
          OUTLINED_FUNCTION_30_0();
          OUTLINED_FUNCTION_73();
          v47();
          if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000043 && v48 == 0x8000000000226000)
          {
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_59_0();
            v49();
          }
          else
          {
            char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v58 = v71;
            uint64_t v59 = v69;
            OUTLINED_FUNCTION_59_0();
            v60();
            if ((v57 & 1) == 0)
            {
              (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v9);
              goto LABEL_33;
            }
          }
          v61 = (void *)ParameterResolutionRecord.intent.getter();
          v62 = (char *)[v61 _type];

          OUTLINED_FUNCTION_33_16();
          v63();
          if (v62 == (unsigned char *)&dword_0 + 2)
          {
            static ActionForInput.handle()();
LABEL_34:
            OUTLINED_FUNCTION_66();
            v64();
            goto LABEL_16;
          }
LABEL_33:
          static ActionForInput.ignore()();
          goto LABEL_34;
        }
        if (v39 == enum case for Parse.uso(_:))
        {
          char v50 = SiriLinkFlowFeatureFlags.isEnabled.getter(0);
          uint64_t v51 = v71;
          uint64_t v52 = v68;
          OUTLINED_FUNCTION_59_0();
          v53();
          if (v50)
          {
            uint64_t v54 = (void *)ParameterResolutionRecord.intent.getter();
            id v55 = (char *)[v54 _type];

            OUTLINED_FUNCTION_53_1();
            v56();
            if (v55 == (unsigned char *)&dword_0 + 2)
            {
              static ActionForInput.handle()();
LABEL_31:
              OUTLINED_FUNCTION_33_16();
              v35();
              goto LABEL_16;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v9);
          }
        }
        static ActionForInput.ignore()();
        goto LABEL_31;
      }
      uint64_t v40 = OUTLINED_FUNCTION_50_9();
      v41(v40);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
      swift_release();
      type metadata accessor for NLIntent();
      OUTLINED_FUNCTION_6();
      (*(void (**)(uint64_t))(v42 + 8))(v38);
LABEL_13:
      v43 = (void *)ParameterResolutionRecord.intent.getter();
      uint64_t v44 = (char *)[v43 _type];

      if (v44 == (unsigned char *)&dword_0 + 2) {
        static ActionForInput.handle()();
      }
      else {
LABEL_15:
      }
        static ActionForInput.ignore()();
LABEL_16:
      OUTLINED_FUNCTION_27_1();
      return;
  }
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:));
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 64);
  type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  outlined init with copy of DeviceState(v1 + 16, v0 + 16);
  static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)();
  uint64_t v3 = v2;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[32] = v2;
  v1[33] = v0;
  v1[30] = v3;
  v1[31] = v4;
  v1[29] = v5;
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation();
  v1[34] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[35] = v7;
  v1[36] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for USOParse();
  v1[37] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[38] = v9;
  v1[39] = OUTLINED_FUNCTION_25();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
  v1[40] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[41] = v11;
  v1[42] = OUTLINED_FUNCTION_13_0();
  v1[43] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Parse();
  v1[44] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[45] = v13;
  v1[46] = OUTLINED_FUNCTION_13_0();
  v1[47] = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>?);
  OUTLINED_FUNCTION_16(v14);
  v1[48] = OUTLINED_FUNCTION_13_0();
  v1[49] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for ParameterIdentifier();
  v1[50] = v15;
  OUTLINED_FUNCTION_1_0(v15);
  v1[51] = v16;
  v1[52] = OUTLINED_FUNCTION_25();
  uint64_t v17 = type metadata accessor for Input();
  v1[53] = v17;
  OUTLINED_FUNCTION_1_0(v17);
  v1[54] = v18;
  v1[55] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v19, v20, v21);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  void (*v19)(void);
  uint64_t v20;
  int EnumTagSinglePayload;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  int v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  _WORD *v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  id v58;
  void (*v59)(void);
  void (*v60)(void);
  id v61;
  void (*v62)(void);
  void (*v63)(void);
  char v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void (*v73)(void);
  uint64_t v74;
  unsigned char *v75;
  os_log_type_t v76;
  _WORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char v81;
  os_log_type_t v82;
  _WORD *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned char *v86;
  void *v87;
  os_log_type_t v88;
  _WORD *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  id v93;
  void (*v94)(void);
  void (*v95)(void);
  os_log_type_t v96;
  _WORD *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  os_log_type_t v101;
  _WORD *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  long long v110;
  long long v111;
  void *v112;
  uint64_t v113;

  v112 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = v0[54];
  uint64_t v1 = v0[55];
  uint64_t v3 = v0[53];
  uint64_t v4 = v0[30];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(void *)&v110 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)&v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_33_16();
    v11();
    _os_log_impl(&dword_0, v6, v7, "#CustomIntentNeedsDisambiguationFlowStrategy received input: %s", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    (*(void (**)(void, void))(v0[54] + 8))(v0[55], v0[53]);
  }

  uint64_t v12 = v0[49];
  uint64_t v13 = v0[47];
  uint64_t v14 = v0[45];
  v108 = v0[44];
  v109 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  ParameterResolutionRecord.parameter.getter();
  v106 = ParameterIdentifier.name.getter();
  v107 = v15;
  uint64_t v16 = OUTLINED_FUNCTION_75();
  v17(v16);
  uint64_t v18 = (void *)ParameterResolutionRecord.intent.getter();
  Input.parse.getter();
  CustomIntentNeedsDisambiguationFlowStrategy.getVoiceCommandPagination(parse:)();
  uint64_t v19 = *(void (**)(void))(v14 + 8);
  ((void (*)(uint64_t, uint64_t))v19)(v13, v108);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v12, 1, v20);
  uint64_t v22 = v0[49];
  if (EnumTagSinglePayload != 1) {
    goto LABEL_11;
  }
  uint64_t v23 = v0[48];
  outlined destroy of SiriWorkflowRunnerEvent?(v0[49], &demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>?);
  Input.parse.getter();
  CustomIntentNeedsDisambiguationFlowStrategy.getVoiceCommandConfirmation(parse:)(v23);
  OUTLINED_FUNCTION_37_15();
  v19();
  uint64_t v24 = __swift_getEnumTagSinglePayload(v23, 1, v20);
  uint64_t v22 = v0[48];
  if (v24 != 1)
  {
LABEL_11:
    uint64_t v34 = v0[29];

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v34, v22, v20);
    goto LABEL_12;
  }
  id v25 = v0;
  unint64_t v28 = v0 + 45;
  uint64_t v27 = v0[45];
  uint64_t v26 = v28[1];
  uint64_t v29 = v25[44];
  outlined destroy of SiriWorkflowRunnerEvent?(v22, &demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>?);
  Input.parse.getter();
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 88))(v26, v29);
  if (v30 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(void, void))(v25[45] + 96))(v25[46], v25[44]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v31 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    uint64_t v32 = [v31 _codableDescription];

    char v33 = outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)(v106, v107, v32, (SEL *)&selRef_attributeByName_);
    if (v33)
    {
      *((void *)&v111 + 1) = type metadata accessor for NSError(0, &lazy cache variable for type metadata for INCodableAttribute);
      *(void *)&v110 = v33;
    }
    else
    {
      v110 = 0u;
      v111 = 0u;
    }
    v61 = v33;
    Parse.ServerConversion.siriKitIntent.getter();
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    static DisambiguationResult.chosenItem(_:)();

    swift_release();
    OUTLINED_FUNCTION_81();
    v62();
    type metadata accessor for NLIntent();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_66();
    v63();
    goto LABEL_12;
  }
  if (v30 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v38 = v109[45];
    char v37 = v109[46];
    int v39 = (uint8_t *)v109[44];
    uint64_t v41 = v109[35];
    uint64_t v40 = v109[36];
    uint64_t v42 = v109[34];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint8_t *))(v38 + 96))(v37, v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v40, v37, v42);
    v43 = Logger.logObject.getter();
    uint64_t v44 = static os_log_type_t.debug.getter();
    uint64_t v45 = v44;
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v46 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v46);
      _os_log_impl(&dword_0, v43, (os_log_type_t)v45, "CustomIntentNeedsDisambiguationFlowStrategy parsing direct Invocation", v39, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000043 && v47 == 0x8000000000226000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v64 & 1) == 0)
      {
        Logger.logObject.getter();
        v82 = static os_log_type_t.debug.getter();
        v65 = v109;
        if (OUTLINED_FUNCTION_32(v82))
        {
          v83 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_28_2(v83);
          OUTLINED_FUNCTION_42_0(&dword_0, v84, v85, "#CustomIntentNeedsDisambiguationFlowStrategy unsupported direct invocation type");
          OUTLINED_FUNCTION_7_0();
        }
        OUTLINED_FUNCTION_29_16();
        lazy protocol witness table accessor for type DisambiguationError and conformance DisambiguationError();
        OUTLINED_FUNCTION_9_6();
        *v86 = 0;
LABEL_46:
        swift_willThrow();

LABEL_47:
        ((void (*)(uint64_t, NSObject *))v65[1])(v45, v43);
        goto LABEL_48;
      }
    }
    v65 = v109;
    uint64_t v66 = Parse.DirectInvocation.userData.getter();
    if (v66)
    {
      uint64_t v45 = v66;
      static SLFDisambiguationItemConverter.toIntent(userData:)();
      v68 = v67;
      swift_bridgeObjectRelease();
      if (v68)
      {
        uint64_t v69 = v109[42];
        uint64_t v70 = v109[41];
        uint64_t v71 = v109[40];
        v110 = 0u;
        v111 = 0u;
        type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
        uint64_t v72 = v68;
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        OUTLINED_FUNCTION_28_1();
        static DisambiguationResult.chosenItem(_:)();

        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
        OUTLINED_FUNCTION_81();
        v73();
        goto LABEL_12;
      }
      Logger.logObject.getter();
      v96 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_32(v96))
      {
        v97 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_28_2(v97);
        OUTLINED_FUNCTION_42_0(&dword_0, v98, v99, "#CustomIntentNeedsDisambiguationFlowStrategy cannot parse user data");
        OUTLINED_FUNCTION_7_0();
      }
      OUTLINED_FUNCTION_29_16();
      lazy protocol witness table accessor for type DisambiguationError and conformance DisambiguationError();
      OUTLINED_FUNCTION_9_6();
      v81 = 2;
    }
    else
    {
      Logger.logObject.getter();
      uint64_t v76 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_32(v76))
      {
        uint64_t v77 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_28_2(v77);
        OUTLINED_FUNCTION_42_0(&dword_0, v78, v79, "#CustomIntentNeedsDisambiguationFlowStrategy no user data");
        OUTLINED_FUNCTION_7_0();
      }
      OUTLINED_FUNCTION_29_16();
      lazy protocol witness table accessor for type DisambiguationError and conformance DisambiguationError();
      OUTLINED_FUNCTION_9_6();
      v81 = 1;
    }
    *v80 = v81;
    goto LABEL_46;
  }
  uint64_t v48 = v109[46];
  if (v30 == enum case for Parse.uso(_:))
  {
    v49 = v109 + 13;
    char v50 = v109[39];
    uint64_t v51 = v109[38];
    uint64_t v52 = v109[37];
    (*(void (**)(void, void))(v109[45] + 96))(v109[46], v109[44]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v50, v48, v52);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<CustomIntentDisambiguationItem>);
    uint64_t v53 = PaginatedItemContainer.items.getter();
    uint64_t v54 = PaginatedItemContainer.page.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputToDisambiguationItemsConverter<CustomIntentDisambiguationItem>);
    swift_allocObject();
    id v55 = specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(v53, v54);
    v56 = (*(uint64_t (**)(uint64_t))(*v55 + 136))(v50);
    specialized Collection.first.getter(v56, (uint64_t)(v109 + 13));
    swift_bridgeObjectRelease();
    if (!v109[14])
    {
      outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)v49, &demangling cache variable for type metadata for CustomIntentDisambiguationItem?);
      v87 = (void *)Logger.logObject.getter();
      v88 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_32(v88))
      {
        v89 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_28_2(v89);
        OUTLINED_FUNCTION_42_0(&dword_0, v90, v91, "#parseDisambiguationResult: cannot get selected items");
        OUTLINED_FUNCTION_7_0();
      }

      *((_OWORD *)v109 + 12) = 0u;
      *((_OWORD *)v109 + 13) = 0u;
      v92 = static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)(v18, v106, v107, (uint64_t)(v109 + 24), 0, 1);
      outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)(v109 + 24), &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease();
      v110 = 0u;
      v111 = 0u;
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
      v93 = v92;
      IntentPromptAnswer.init(answeredValue:updatedIntent:)();
      static DisambiguationResult.chosenItem(_:)();

      swift_release();
      OUTLINED_FUNCTION_53_1();
      v94();
      OUTLINED_FUNCTION_33_16();
      v95();
      goto LABEL_12;
    }
    memcpy(v109 + 2, v49, 0x51uLL);
    char v57 = (void *)static SLFDisambiguationItemConverter.getUpdatedIntent(intent:chosenItem:parameterName:)(v18, (uint64_t)(v109 + 2), v106, v107);
    swift_bridgeObjectRelease();
    if (!v57)
    {
      v100 = (void *)Logger.logObject.getter();
      v101 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_32(v101))
      {
        v102 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_28_2(v102);
        OUTLINED_FUNCTION_42_0(&dword_0, v103, v104, "#parseDisambiguationResult: cannot update intent");
        OUTLINED_FUNCTION_7_0();
      }
      uint64_t v45 = v109[39];
      v65 = (void *)v109[38];
      v43 = v109[37];

      lazy protocol witness table accessor for type DisambiguationError and conformance DisambiguationError();
      OUTLINED_FUNCTION_9_6();
      *v105 = 3;
      swift_willThrow();

      swift_release();
      outlined destroy of CustomIntentDisambiguationItem((uint64_t)(v109 + 2));
      goto LABEL_47;
    }
    CustomIntentDisambiguationItem.getRawValue()((uint64_t)&v110);
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
    uint64_t v58 = v57;
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    static DisambiguationResult.chosenItem(_:)();

    swift_release();
    OUTLINED_FUNCTION_33_16();
    v59();
    outlined destroy of CustomIntentDisambiguationItem((uint64_t)(v109 + 2));
    OUTLINED_FUNCTION_53_1();
    v60();
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    goto LABEL_13;
  }
  uint64_t v74 = v109[44];
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
  OUTLINED_FUNCTION_9_6();
  *uint64_t v75 = 0;
  swift_willThrow();

  ((void (*)(uint64_t, uint64_t))v19)(v48, v74);
LABEL_48:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
LABEL_13:
  return v35();
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:));
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_13_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<CustomIntentDisambiguationItem>);
  uint64_t v1 = PaginatedItemContainer.pageSize.getter();
  uint64_t v2 = *(void *)(PaginatedItemContainer.items.getter() + 16);
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.voiceCommands);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v15);
      OUTLINED_FUNCTION_23_0(&dword_0, v16, v17, "#CustomIntentNeedsDisambiguationFlowStrategy: prompt without pagination");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v18 = v0[15];

    uint64_t v22 = (uint64_t (*)(void *, uint64_t))(*(void *)(*(void *)v18 + 288)
                                                    + **(int **)(*(void *)v18 + 288));
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[18] = v19;
    *uint64_t v19 = v20;
    v19[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    uint64_t v21 = v0[14];
    return v22(v0 + 2, v21);
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.voiceCommands);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v6);
      OUTLINED_FUNCTION_23_0(&dword_0, v7, v8, "#CustomIntentNeedsDisambiguationFlowStrategy: prompt with pagination");
      OUTLINED_FUNCTION_7_0();
    }

    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[16] = v9;
    *uint64_t v9 = v10;
    v9[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    return CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *os_log_type_t v5 = v4;
  *(void *)(v6 + 136) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 56), *(void *)(v0 + 96));
  *(unsigned char *)(*(void *)(v0 + 120) + 72) = 0;
  OUTLINED_FUNCTION_12_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *os_log_type_t v5 = v4;
  *(void *)(v6 + 152) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 16), *(void *)(v0 + 96));
  *(unsigned char *)(*(void *)(v0 + 120) + 72) = 0;
  OUTLINED_FUNCTION_12_0();
  return v1();
}

{
  return OUTLINED_FUNCTION_32_18();
}

{
  return OUTLINED_FUNCTION_32_18();
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[54] = v2;
  v1[55] = v0;
  v1[53] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INShortcut?);
  OUTLINED_FUNCTION_16(v4);
  v1[56] = OUTLINED_FUNCTION_13_0();
  v1[57] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_16(v5);
  v1[58] = OUTLINED_FUNCTION_13_0();
  v1[59] = swift_task_alloc();
  v1[60] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DialogPhase();
  v1[61] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[62] = v7;
  v1[63] = OUTLINED_FUNCTION_13_0();
  v1[64] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[65] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[66] = v9;
  v1[67] = OUTLINED_FUNCTION_25();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v10);
  v1[68] = OUTLINED_FUNCTION_13_0();
  v1[69] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ParameterIdentifier();
  v1[70] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[71] = v12;
  v1[72] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 440);
  *(void *)(v0 + 584) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  uint64_t v2 = ParameterResolutionRecord.intent.getter();
  *(void *)(v0 + 592) = v2;
  ParameterResolutionRecord.parameter.getter();
  uint64_t v3 = ParameterIdentifier.name.getter();
  uint64_t v14 = v4;
  uint64_t v15 = v3;
  *(void *)(v0 + 600) = v3;
  *(void *)(v0 + 608) = v4;
  OUTLINED_FUNCTION_53_1();
  v5();
  type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  outlined init with copy of DeviceState(v1 + 16, v0 + 72);
  static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)();
  uint64_t v7 = v6;
  *(void *)(v0 + 616) = v6;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  *(unsigned char *)(v0 + 784) = INIntent.isRestricted()();
  outlined init with copy of DeviceState(v1 + 16, v0 + 112);
  type metadata accessor for CustomIntentNLContextProvider();
  inited = swift_initStackObject();
  *(void *)(v0 + 624) = inited;
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 112), inited + 16);
  uint64_t v9 = ParameterResolutionRecord.result.getter();
  *(void *)(v0 + 632) = v9;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 640) = v10;
  *uint64_t v10 = v11;
  v10[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:);
  uint64_t v12 = *(void *)(v0 + 552);
  return CustomIntentNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:disambiguationItems:)(v12, v2, v15, v14, v9, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = *(void **)(v1 + 632);
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  swift_task_dealloc();

  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 672) = v7;
  *(void *)(v3 + 680) = v0;
  swift_task_dealloc();

  swift_release();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 720) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumTagSinglePayload;
  uint64_t v9;
  void *v10;
  void (*v11)(void);
  id v12;
  unint64_t v13;
  id v14;
  Swift::String_optional v15;
  uint64_t countAndFlagsBits;
  void *object;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  uint64_t v1 = *(void **)(v0 + 720);
  if (!v1) {
    goto LABEL_10;
  }
  uint64_t v2 = [*(id *)(v0 + 720) shortcut];
  if (v2)
  {
    uint64_t v3 = v2;
    static INShortcut._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 1;
  }
  uint64_t v6 = *(void *)(v0 + 448);
  uint64_t v5 = *(void *)(v0 + 456);
  uint64_t v7 = type metadata accessor for INShortcut();
  __swift_storeEnumTagSinglePayload(v6, v4, 1, v7);
  outlined init with take of UUID?(v6, v5, &demangling cache variable for type metadata for INShortcut?);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v5, 1, v7);
  uint64_t v9 = *(void *)(v0 + 456);
  if (EnumTagSinglePayload == 1)
  {

    outlined destroy of SiriWorkflowRunnerEvent?(v9, &demangling cache variable for type metadata for INShortcut?);
LABEL_10:
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  uint64_t v10 = (void *)INShortcut.intent.getter();
  OUTLINED_FUNCTION_16_12();
  OUTLINED_FUNCTION_66();
  v11();
  if (v10)
  {
    uint64_t v12 = [v10 _keyImage];

    outlined bridged method (ob) of @objc INImage._imageData.getter(v12);
    if (v13 >> 60 == 15)
    {

      goto LABEL_10;
    }
    uint64_t v20 = *(void *)(v0 + 696);
    uint64_t v22 = *(void *)(v0 + 472);
    uint64_t v21 = *(void *)(v0 + 480);
    uint64_t v23 = [v1 shortcutName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v24;

    OUTLINED_FUNCTION_28_1();
    static WorkflowDataModels.getThumbnail(imageData:)();

    id v25 = OUTLINED_FUNCTION_28_1();
    outlined consume of Data?(v25, v26);
    outlined destroy of SiriWorkflowRunnerEvent?(v21, &demangling cache variable for type metadata for VisualProperty?);
    __swift_storeEnumTagSinglePayload(v22, 0, 1, v20);
    outlined init with take of UUID?(v22, v21, &demangling cache variable for type metadata for VisualProperty?);
  }
  else
  {
  }
LABEL_11:
  *(void *)(v0 + 728) = v10;
  if (*(void *)(v0 + 688))
  {
    OUTLINED_FUNCTION_63_5();
    if (v10)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = *(id *)(*(void *)(v0 + 672) + 32);
    }
    uint64_t v15 = DialogExecutionResult.firstDialogFullPrint()();
    countAndFlagsBits = v15.value._countAndFlagsBits;
    object = v15.value._object;
  }
  else
  {
    countAndFlagsBits = 0;
    object = 0;
  }
  *(void *)(v0 + 744) = object;
  *(void *)(v0 + 736) = countAndFlagsBits;
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 752) = v18;
  *uint64_t v18 = v0;
  v18[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:);
  OUTLINED_FUNCTION_40_15();
  return Array<A>.toDisambiguationItemModels(intent:parameterName:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  v3[45] = v1;
  v3[46] = v5;
  v3[47] = v0;
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v7 = v6;
  v3[95] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _UNKNOWN **v6;
  ValueMetadata *v7;
  void (*v8)(void *@<X8>);
  uint64_t *boxed_opaque_existential_1;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  uint64_t v1 = *(void *)(v0 + 728);
  swift_bridgeObjectRelease();
  if (v1
    && (uint64_t v2 = *(void *)(v0 + 696),
        uint64_t v3 = *(void *)(v0 + 464),
        outlined init with copy of RunCustomIntentReadingDelegate.Templating?(*(void *)(v0 + 480), v3, &demangling cache variable for type metadata for VisualProperty?), LODWORD(v2) = __swift_getEnumTagSinglePayload(v3, 1, v2), uint64_t v4 = OUTLINED_FUNCTION_75(), outlined destroy of SiriWorkflowRunnerEvent?(v4, v5), v2 != 1))
  {
    uint64_t v6 = &protocol witness table for WorkflowDataModels.DisambiguateSmartPromptItemsModel;
    uint64_t v7 = &type metadata for WorkflowDataModels.DisambiguateSmartPromptItemsModel;
  }
  else
  {
    uint64_t v6 = &protocol witness table for WorkflowDataModels.DisambiguateItemsModel;
    uint64_t v7 = &type metadata for WorkflowDataModels.DisambiguateItemsModel;
  }
  *(void *)(v0 + 176) = v7;
  *(void *)(v0 + 184) = v6;
  *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 736);
  *(void *)(v0 + 168) = *(void *)(v0 + 368);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  *(void *)(v0 + 768) = ResponseFactory.init()();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 152), (uint64_t)v7);
  uint64_t v8 = (void (*)(void *@<X8>))v6[1];
  *(void *)(v0 + 216) = type metadata accessor for WorkflowDataModels(0);
  *(void *)(v0 + 224) = _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, 255, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 192));
  v8(boxed_opaque_existential_1);
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)
                                                                   + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 776) = v10;
  *uint64_t v10 = v11;
  v10[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:);
  uint64_t v12 = *(void *)(v0 + 672);
  uint64_t v13 = *(void *)(v0 + 536);
  uint64_t v14 = *(void *)(v0 + 424);
  return v16(v14, v0 + 192, v12, v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 192;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

void CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void *)(v0[55] + 80);
  v0[81] = ParameterResolutionRecord.app.getter();
  v0[82] = ParameterResolutionRecord.result.getter();
  uint64_t v3 = *(void *)(*(void *)v1 + 200) + **(int **)(*(void *)v1 + 200);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[83] = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:);
  __asm { BRAA            X9, X16 }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[74];
  uint64_t v2 = v0[69];
  uint64_t v3 = v0[60];
  swift_release();

  outlined destroy of SiriWorkflowRunnerEvent?(v3, &demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_33_16();
  v4();
  outlined destroy of SiriWorkflowRunnerEvent?(v2, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 19));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_2_1();
  __asm { BRAA            X1, X16 }
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  unint64_t v23 = *(void *)(v22 + 672);
  static DialogPhase.clarification.getter();
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v24 = *(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  *(void *)(v22 + 688) = v24;
  if (v24)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v23 & 0xC000000000000001) == 0);
    if ((v23 & 0xC000000000000001) != 0) {
      id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v25 = *(id *)(*(void *)(v22 + 672) + 32);
    }
    swift_bridgeObjectRelease();
    id v26 = [v25 catId];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v72 = *(void *)(v22 + 552);
  uint64_t v27 = *(void *)(v22 + 544);
  uint64_t v73 = *(void *)(v22 + 480);
  id v74 = *(id *)(v22 + 592);
  OUTLINED_FUNCTION_59_0();
  v28();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  OUTLINED_FUNCTION_37_15();
  v29();
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  outlined init with copy of RunCustomIntentReadingDelegate.Templating?(v72, v27, &demangling cache variable for type metadata for NLContextUpdate?);
  OutputGenerationManifest.nlContextUpdate.setter();
  uint64_t v30 = type metadata accessor for VisualProperty();
  *(void *)(v22 + 696) = v30;
  __swift_storeEnumTagSinglePayload(v73, 1, 1, v30);
  id v31 = [v74 typeName];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  if (v32 == 0xD000000000000051 && v34 == 0x8000000000226870) {
    goto LABEL_10;
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v35 & 1) == 0)
  {
    id v36 = [*(id *)(v22 + 592) typeName];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;

    if (v37 == 0xD00000000000005ALL && v39 == 0x8000000000228250)
    {
LABEL_10:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {
      uint64_t v45 = 0;
      goto LABEL_34;
    }
  }
LABEL_15:
  uint64_t v41 = *(void **)(v22 + 592);
  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = [v41 valueForKey:v42];

  if (v43)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v22 + 264) = 0u;
    *(_OWORD *)(v22 + 280) = 0u;
  }
  outlined init with take of UUID?(v22 + 264, v22 + 232, &demangling cache variable for type metadata for Any?);
  if (!*(void *)(v22 + 256))
  {
    uint64_t v48 = v22 + 232;
LABEL_28:
    outlined destroy of SiriWorkflowRunnerEvent?(v48, &demangling cache variable for type metadata for Any?);
    goto LABEL_29;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_29;
  }
  uint64_t v44 = *(void **)(v22 + 592);
  uint64_t v45 = *(void *)(v22 + 408);
  NSString v46 = String._bridgeToObjectiveC()();
  id v47 = [v44 valueForKey:v46];

  if (v47)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v22 + 328) = 0u;
    *(_OWORD *)(v22 + 344) = 0u;
  }
  uint64_t v49 = OUTLINED_FUNCTION_16_12();
  outlined init with take of UUID?(v49, v50, v51);
  if (!*(void *)(v22 + 320))
  {
    swift_bridgeObjectRelease();
    uint64_t v48 = v22 + 296;
    goto LABEL_28;
  }
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for INFile);
  OUTLINED_FUNCTION_16_12();
  if (swift_dynamicCast())
  {
    uint64_t v53 = *(void *)(v22 + 472);
    uint64_t v52 = *(void *)(v22 + 480);
    uint64_t v54 = *(void **)(v22 + 416);
    id v55 = [v54 data];
    uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v58 = v57;

    static WorkflowDataModels.getThumbnail(imageData:)();
    outlined consume of Data._Representation(v56, v58);

    outlined destroy of SiriWorkflowRunnerEvent?(v52, &demangling cache variable for type metadata for VisualProperty?);
    __swift_storeEnumTagSinglePayload(v53, 0, 1, v30);
    uint64_t v59 = OUTLINED_FUNCTION_16_12();
    outlined init with take of UUID?(v59, v60, &demangling cache variable for type metadata for VisualProperty?);
LABEL_34:
    *(void *)(v22 + 728) = v45;
    if (*(void *)(v22 + 688))
    {
      OUTLINED_FUNCTION_63_5();
      if (v30)
      {
        swift_bridgeObjectRetain();
        id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v66 = *(id *)(*(void *)(v22 + 672) + 32);
      }
      Swift::String_optional v67 = DialogExecutionResult.firstDialogFullPrint()();
      uint64_t countAndFlagsBits = v67.value._countAndFlagsBits;
      object = v67.value._object;
    }
    else
    {
      uint64_t countAndFlagsBits = 0;
      object = 0;
    }
    *(void *)(v22 + 744) = object;
    *(void *)(v22 + 736) = countAndFlagsBits;
    uint64_t v70 = (void *)swift_task_alloc();
    *(void *)(v22 + 752) = v70;
    *uint64_t v70 = v22;
    v70[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:);
    OUTLINED_FUNCTION_40_15();
    OUTLINED_FUNCTION_3();
    return Array<A>.toDisambiguationItemModels(intent:parameterName:)();
  }
  swift_bridgeObjectRelease();
LABEL_29:
  type metadata accessor for VoiceShortcutClientWrapper();
  *(void *)(v22 + 704) = swift_initStackObject();
  v61 = (void *)swift_task_alloc();
  *(void *)(v22 + 712) = v61;
  void *v61 = v22;
  v61[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:);
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_3();
  return VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(v62, v63);
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForDisambiguationNoPagination(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v16 = *(void **)(v15 + 592);
  swift_release();

  OUTLINED_FUNCTION_22_24();
  outlined destroy of SiriWorkflowRunnerEvent?(v14, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_3();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = *(void **)(v14 + 592);
  uint64_t v16 = *(void *)(v14 + 480);
  swift_release();

  outlined destroy of SiriWorkflowRunnerEvent?(v16, &demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_37_15();
  v17();
  OUTLINED_FUNCTION_22_24();
  outlined destroy of SiriWorkflowRunnerEvent?(v16, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_3();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[17] = v2;
  v1[18] = v0;
  v1[15] = v3;
  v1[16] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v5);
  v1[19] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for DialogPhase();
  v1[20] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[21] = v7;
  v1[22] = OUTLINED_FUNCTION_13_0();
  v1[23] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[24] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[25] = v9;
  v1[26] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  v1[27] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[28] = v11;
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for ParameterIdentifier();
  v1[30] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[31] = v13;
  v1[32] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v22;
  void *v23;
  uint64_t v25;
  void *v26;

  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 240);
  *(void *)(v0 + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  id v26 = (void *)ParameterResolutionRecord.intent.getter();
  *(void *)(v0 + 272) = v26;
  ParameterResolutionRecord.parameter.getter();
  uint64_t v4 = ParameterIdentifier.name.getter();
  uint64_t v6 = v5;
  *(void *)(v0 + 280) = v4;
  *(void *)(v0 + 288) = v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  *(void *)(v0 + 296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<CustomIntentDisambiguationItem>);
  uint64_t v7 = *(void *)(PaginatedItemContainer.items.getter() + 16);
  *(void *)(v0 + 304) = v7;
  swift_bridgeObjectRelease();
  __n128 result = PaginatedItemContainer.pageSize.getter();
  *(void *)(v0 + 312) = result;
  if (!result)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v9 = result;
  if (v7 % result) {
    uint64_t v10 = v7 / result + 1;
  }
  else {
    uint64_t v10 = v7 / result;
  }
  __n128 result = PaginatedItemContainer.getCurrentPageIndex()();
  uint64_t v11 = result * v9;
  if ((unsigned __int128)(result * (__int128)v9) >> 64 != (result * v9) >> 63) {
    goto LABEL_17;
  }
  *(void *)(v0 + 320) = v7 - v11;
  if (__OFSUB__(v7, v11))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v12 = v10 - result;
  if (__OFSUB__(v10, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(void *)(v0 + 328) = v12 - 1;
  if (!__OFSUB__(v12, 1))
  {
    uint64_t v13 = *(void *)(v0 + 232);
    uint64_t v14 = v4;
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v15 = *(void *)(v0 + 144);
    outlined init with copy of DeviceState(v15 + 16, v0 + 72);
    type metadata accessor for CustomIntentNLContextProvider();
    uint64_t v17 = swift_initStackObject() + 16;
    outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 72), v17);
    uint64_t v19 = *(void **)(v15 + 56);
    uint64_t v18 = *(void **)(v15 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:)(v26, v14, v6, v19, v18, v16, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    __swift_destroy_boxed_opaque_existential_1Tm(v17);
    *(void *)(v0 + 112) = _swiftEmptyArrayStorage;
    if (*(unsigned char *)(v15 + 72) == 1)
    {
      *(void *)(v0 + 336) = ParameterResolutionRecord.app.getter();
      OUTLINED_FUNCTION_12_26();
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 344) = v20;
      *uint64_t v20 = v0;
      v20[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:);
      OUTLINED_FUNCTION_2_1();
      __asm { BRAA            X6, X16 }
    }
    *(void *)(v0 + 376) = OUTLINED_FUNCTION_42_14();
    *(void *)(v0 + 384) = ParameterResolutionRecord.result.getter();
    OUTLINED_FUNCTION_12_26();
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v23;
    *uint64_t v23 = v0;
    v23[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:);
    OUTLINED_FUNCTION_35_13();
    OUTLINED_FUNCTION_2_1();
    __asm { BRAA            X7, X16 }
  }
LABEL_20:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 352) = v5;
  *(void *)(v3 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  char v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_13_1();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_23_19();
  if (v1) {
    OUTLINED_FUNCTION_25_15();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v0[47] = OUTLINED_FUNCTION_42_14();
  v0[48] = ParameterResolutionRecord.result.getter();
  OUTLINED_FUNCTION_12_26();
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(v2 + 264) + **(int **)(v2 + 264));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[49] = v3;
  *uint64_t v3 = v0;
  v3[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:);
  uint64_t v4 = OUTLINED_FUNCTION_35_13();
  return v6(v4);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[50] = v5;
  v3[51] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = (void *)v3[48];
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = (void *)v3[48];
    swift_bridgeObjectRelease();

    swift_release();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_23_19();
  if (v1) {
    OUTLINED_FUNCTION_25_15();
  }
  uint64_t v2 = v0[46];
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v3 = PaginatedItemContainer.page.getter();
  v0[52] = v3;
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v2 + 248) + **(int **)(*(void *)v2 + 248));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[53] = v4;
  *uint64_t v4 = v0;
  v4[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:);
  return v6(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 432) = v5;
  *(void *)(v3 + 440) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 456) = v5;
  *(void *)(v3 + 464) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_23_19();
  if (v15) {
    OUTLINED_FUNCTION_25_15();
  }
  uint64_t v16 = *(void *)(v14 + 328);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (v16 >= 1)
  {
    a11 = (void *)(**(void **)(v14 + 368) + 208);
    uint64_t v41 = *a11 + *(int *)*a11;
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v14 + 448) = v17;
    *uint64_t v17 = v14;
    v17[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:);
    OUTLINED_FUNCTION_3();
    return v21(v18, v19, v20, v21, v22, v23, v24, v25, a9, v41, a11, a12, a13, a14);
  }
  static DialogPhase.clarification.getter();
  unint64_t v27 = *(void *)(v14 + 112);
  if (v27 >> 62)
  {
    OUTLINED_FUNCTION_61_6();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_9;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v41 = 0;
    goto LABEL_14;
  }
  uint64_t v28 = *(void *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v28) {
    goto LABEL_13;
  }
LABEL_9:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v27 & 0xC000000000000001) == 0);
  if ((v27 & 0xC000000000000001) != 0) {
    id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v29 = *(id *)(v27 + 32);
  }
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  id v31 = [v30 catId];

  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_14:
  uint64_t v32 = OUTLINED_FUNCTION_8_24();
  v33(v32);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v34 = OUTLINED_FUNCTION_47_9();
  v35(v34);
  INIntent.isRestricted()();
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  uint64_t v36 = OUTLINED_FUNCTION_39_11();
  v37(v36);
  OUTLINED_FUNCTION_64_3();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v38 = ResponseFactory.init()();
  uint64_t v39 = *(void *)(v14 + 112);
  *(void *)(v14 + 472) = v38;
  *(void *)(v14 + 480) = v39;
  char v40 = (void *)OUTLINED_FUNCTION_40_14();
  *(void *)(v14 + 488) = v40;
  *char v40 = v14;
  v40[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:);
  OUTLINED_FUNCTION_59_7();
  OUTLINED_FUNCTION_3();
  return v21(v18, v19, v20, v21, v22, v23, v24, v25, a9, v41, a11, a12, a13, a14);
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_23_19();
  if (v15) {
    OUTLINED_FUNCTION_25_15();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  static DialogPhase.clarification.getter();
  unint64_t v16 = v14[14];
  if (v16 >> 62)
  {
    OUTLINED_FUNCTION_61_6();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v17)
    {
LABEL_5:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v16 & 0xC000000000000001) == 0);
      if ((v16 & 0xC000000000000001) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(v16 + 32);
      }
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      id v20 = [v19 catId];

      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v39 = 0;
LABEL_10:
  uint64_t v21 = OUTLINED_FUNCTION_8_24();
  v22(v21);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v23 = OUTLINED_FUNCTION_47_9();
  v24(v23);
  INIntent.isRestricted()();
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  uint64_t v25 = OUTLINED_FUNCTION_39_11();
  v26(v25);
  OUTLINED_FUNCTION_64_3();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v27 = ResponseFactory.init()();
  uint64_t v28 = v14[14];
  v14[59] = v27;
  v14[60] = v28;
  id v29 = (void *)OUTLINED_FUNCTION_40_14();
  v14[61] = v29;
  *id v29 = v14;
  v29[1] = CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:);
  OUTLINED_FUNCTION_59_7();
  OUTLINED_FUNCTION_3();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, v39, a11, a12, a13, a14);
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.makePromptForPagination(resolveRecord:paginatedItems:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = *(void *)(v12 + 208);
  uint64_t v14 = *(void *)(v12 + 192);
  uint64_t v15 = *(void *)(v12 + 200);
  uint64_t v26 = *(void *)(v12 + 152);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_81();
  v16();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_28_0();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, v26, a10, a11, a12);
}

{
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_7_27();
  uint64_t v12 = OUTLINED_FUNCTION_12_28();
  v13(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_7_27();
  uint64_t v12 = OUTLINED_FUNCTION_12_28();
  v13(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_7_27();
  uint64_t v12 = OUTLINED_FUNCTION_12_28();
  v13(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_7_27();
  uint64_t v12 = OUTLINED_FUNCTION_12_28();
  v13(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

void CustomIntentNeedsDisambiguationFlowStrategy.getVoiceCommandPagination(parse:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v57 = v2;
  type metadata accessor for PaginationRequest();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_50_1();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v5 = OUTLINED_FUNCTION_16(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_25_8();
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  uint64_t v56 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_50_1();
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_50_1();
  type metadata accessor for VoiceCommandsNLIntent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_41_9();
  uint64_t v10 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_12_1();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_20_0();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_20_0();
  uint64_t v23 = v22 - v21;
  OUTLINED_FUNCTION_59_0();
  v24();
  int v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v23, v17);
  if (v25 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v26 = OUTLINED_FUNCTION_51_9();
    v27(v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    OUTLINED_FUNCTION_73();
    v28();
    OUTLINED_FUNCTION_59_0();
    v29();
    if (one-time initialization token for voiceCommandPaginationNode != -1) {
      swift_once();
    }
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, 255, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
    IntentNodeTraversable.value<A>(forNode:)();
    SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = v58;
    outlined destroy of VoiceCommandsNLIntent(v0);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
    goto LABEL_5;
  }
  if (v25 == enum case for Parse.uso(_:))
  {
    uint64_t v31 = OUTLINED_FUNCTION_51_9();
    v32(v31);
    OUTLINED_FUNCTION_73();
    v33();
    USOParse.userParse.getter();
    uint64_t v34 = Siri_Nlu_External_UserParse.userDialogActs.getter();
    OUTLINED_FUNCTION_66();
    v35();
    specialized Collection.first.getter(v34, (uint64_t)v1);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload((uint64_t)v1, 1, v56) == 1)
    {
      outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)v1, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.voiceCommands);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v39);
        _os_log_impl(&dword_0, v37, v38, "could not pagination value", v1, 2u);
        OUTLINED_FUNCTION_7_0();
      }

      OUTLINED_FUNCTION_53_1();
      v40();
    }
    else
    {
      OUTLINED_FUNCTION_73();
      v47();
      v48.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = Siri_Nlu_External_UserDialogAct.paginationValue()().value;
      if (!v49)
      {
        SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = v48.value;
        uint64_t v53 = OUTLINED_FUNCTION_46_11();
        v54(v53);
        OUTLINED_FUNCTION_53_1();
        v55();
LABEL_5:
        switch(value)
        {
          case SiriLinkFlowPlugin_VoiceCommandsNLIntent_VoiceCommandPagination_previous:
            static PaginationRequest.previousPage()();
            break;
          case SiriLinkFlowPlugin_VoiceCommandsNLIntent_VoiceCommandPagination_repeat:
          case SiriLinkFlowPlugin_VoiceCommandsNLIntent_VoiceCommandPagination_unknownDefault:
            goto LABEL_19;
          default:
            static PaginationRequest.nextPage()();
            break;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
        static DisambiguationResult.paginate(_:)();
        OUTLINED_FUNCTION_66();
        v43();
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
        uint64_t v45 = v57;
        uint64_t v46 = 0;
        goto LABEL_20;
      }
      uint64_t v50 = OUTLINED_FUNCTION_46_11();
      v51(v50);
      OUTLINED_FUNCTION_53_1();
      v52();
      swift_errorRelease();
    }
LABEL_19:
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
    uint64_t v45 = v57;
    uint64_t v46 = 1;
LABEL_20:
    __swift_storeEnumTagSinglePayload(v45, v46, 1, v44);
    goto LABEL_21;
  }
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
  __swift_storeEnumTagSinglePayload(v57, 1, 1, v41);
  OUTLINED_FUNCTION_81();
  v42();
LABEL_21:
  OUTLINED_FUNCTION_27_1();
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.getVoiceCommandConfirmation(parse:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PaginationRequest();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_25_8();
  if (static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)() == 1)
  {
    static PaginationRequest.nextPage()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
    static DisambiguationResult.paginate(_:)();
    OUTLINED_FUNCTION_53_1();
    v5();
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
    return __swift_storeEnumTagSinglePayload(a1, 0, 1, v6);
  }
  else
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationResult<IntentPromptAnswer<INIntent>>);
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v3);
  }
}

uint64_t closure #1 in static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)(uint64_t a1, uint64_t a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, CustomIntentDisambiguationItem>);
  uint64_t v6 = (void (*)(uint64_t))Transformer.transform.getter();
  v6(a1);
  uint64_t result = swift_release();
  if (v3) {
    *a3 = v3;
  }
  return result;
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 88);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t CustomIntentNeedsDisambiguationFlowStrategy.__deallocating_deinit()
{
  CustomIntentNeedsDisambiguationFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter in conformance CustomIntentNeedsDisambiguationFlowStrategy()
{
  return NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v2 + 264) + **(int **)(**(void **)v2 + 264));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return v7(a2);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v4 + 272)
                                                                   + **(int **)(**(void **)v4 + 272));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return v12(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 280)
                                                          + **(int **)(**(void **)v3 + 280));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();

  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)(a1, v5, a3);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  *uint64_t v14 = v7;
  v14[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

id outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)(uint64_t a1, uint64_t a2, void *a3)
{
  return outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)(a1, a2, a3, (SEL *)&selRef_attributeByName_);
}

id outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(a3, *a4, v6);

  return v7;
}

uint64_t outlined bridged method (ob) of @objc INImage._imageData.getter(void *a1)
{
  id v2 = [a1 _imageData];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t specialized CustomIntentNeedsDisambiguationFlowStrategy.__allocating_init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v22 = a6;
  uint64_t v15 = *(void *)(a8 - 8);
  __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  uint64_t v18 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a4, a8);
  uint64_t v19 = specialized CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)(a1, a2, a3, (uint64_t)v17, a5, v22, v18, a8, a9);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a4, a8);
  return v19;
}

uint64_t specialized CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = type metadata accessor for CATOption();
  __chkstk_darwin(v17 - 8);
  uint64_t v28 = a8;
  uint64_t v29 = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(boxed_opaque_existential_1, a4, a8);
  *(void *)(a7 + 56) = 0;
  *(void *)(a7 + 64) = 0;
  *(void *)(a7 + 128) = a1;
  *(void *)(a7 + 136) = a2;
  outlined init with copy of DeviceState(a3, a7 + 16);
  outlined init with copy of DeviceState(a7 + 16, (uint64_t)v26);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v19 = static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v20 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v21 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v22 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for AppNameResolver();
  uint64_t v23 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v24 = swift_allocObject();
  *(void *)(a7 + 80) = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(v26, v19, 0, 1, v20, a6, v21, v22, v23, v24);
  outlined init with take of AceServiceInvokerAsync(&v27, a7 + 88);
  *(void *)(a7 + 144) = a5;
  *(unsigned char *)(a7 + 72) = 1;
  return a7;
}

uint64_t type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy()
{
  return self;
}

uint64_t sub_1330CC()
{
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_12_1();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 24) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;

  OUTLINED_FUNCTION_53_1();
  v8();

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t partial apply for closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for Locale() - 8);
  return closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)(a1, *(void **)(v2 + 16), v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

uint64_t partial apply for closure #1 in static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)(uint64_t a1, void *a2)
{
  return closure #1 in static CustomIntentNeedsDisambiguationFlowStrategy.makeDisambiguationList(resolveRecord:deviceState:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type DisambiguationError and conformance DisambiguationError()
{
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError;
  if (!lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError;
  if (!lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationError and conformance DisambiguationError);
  }
  return result;
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in CustomIntentNeedsDisambiguationFlowStrategy(uint64_t a1, uint64_t a2)
{
  return _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type CustomIntentNeedsDisambiguationFlowStrategy and conformance CustomIntentNeedsDisambiguationFlowStrategy, a2, (void (*)(uint64_t))type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy);
}

unint64_t lazy protocol witness table accessor for type CustomIntentDisambiguationItemContainer and conformance CustomIntentDisambiguationItemContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDisambiguationItemContainer and conformance CustomIntentDisambiguationItemContainer;
  if (!lazy protocol witness table cache variable for type CustomIntentDisambiguationItemContainer and conformance CustomIntentDisambiguationItemContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDisambiguationItemContainer and conformance CustomIntentDisambiguationItemContainer);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DisambiguationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x133410);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisambiguationError()
{
  return &type metadata for DisambiguationError;
}

uint64_t _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void OUTLINED_FUNCTION_7_27()
{
  uint64_t v2 = *(void **)(v0 + 272);
}

uint64_t OUTLINED_FUNCTION_8_24()
{
  return *(void *)(v0 + 176);
}

uint64_t OUTLINED_FUNCTION_12_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_15()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_29_16()
{
}

uint64_t OUTLINED_FUNCTION_32_18()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OUTLINED_FUNCTION_35_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_39_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_40_15()
{
  return *(void *)(v0 + 592);
}

uint64_t OUTLINED_FUNCTION_42_14()
{
  *(void *)(v0 + 368) = *(void *)(*(void *)(v0 + 144) + 80);
  return ParameterResolutionRecord.app.getter();
}

uint64_t OUTLINED_FUNCTION_46_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_47_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_50_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_59_7()
{
  return *(void *)(v0 + 120);
}

uint64_t OUTLINED_FUNCTION_61_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_63_5()
{
  BOOL v2 = (*(void *)(v0 + 672) & 0xC000000000000001) == 0;
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v2);
}

uint64_t OUTLINED_FUNCTION_64_3()
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t OUTLINED_FUNCTION_69_6()
{
  return v0;
}

uint64_t AutoShortcutFirstRunFlow.__allocating_init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)()
{
  OUTLINED_FUNCTION_63_1();
  swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1(v0, *(void *)(v0 + 24));
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_12(v2, v15);
  uint64_t v5 = v4(v3);
  uint64_t v13 = OUTLINED_FUNCTION_32_19(v5, v6, v7, v8, v9, v10, v11, v12, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return v13;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_16SiriDialogEngine23SirikitLocalizedAppNameCs5NeverOTg507_sS2S16de8Engine23ghij27CIgggo_SS3key_SS5valuetACs5K96OIegnrzr_TR04_s16ab8Engine10df35C0A14LinkFlowPluginEyACSgSScfcAA0d9e2E4G12CSS_SStXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v6)
  {
    v12[1] = v1;
    uint64_t v19 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = specialized Dictionary.startIndex.getter(a1);
    if (result < 0 || (unint64_t v9 = result, result >= 1 << *(unsigned char *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)v19;
    }
    else
    {
      uint64_t v10 = a1 + 64;
      uint64_t v13 = a1 + 64;
      uint64_t v14 = a1;
      while ((*(void *)(v10 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
      {
        if (v8 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v16 = v8;
        unint64_t v17 = v9 >> 6;
        uint64_t v15 = v6;
        uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 16 * v9);
        type metadata accessor for SirikitLocalizedAppName.Builder();
        swift_allocObject();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        SirikitLocalizedAppName.Builder.init()();
        String.toSpeakableString.getter();
        uint64_t v11 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v11);
        dispatch thunk of SirikitLocalizedAppName.Builder.withLocale(_:)();
        swift_release();
        _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v5, &demangling cache variable for type metadata for SpeakableString?);
        String.toSpeakableString.getter();
        __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v11);
        dispatch thunk of SirikitLocalizedAppName.Builder.withAppName(_:)();
        swift_release();
        _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v5, &demangling cache variable for type metadata for SpeakableString?);
        dispatch thunk of SirikitLocalizedAppName.Builder.build()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        a1 = v14;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if ((uint64_t)v9 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_18;
        }
        uint64_t v10 = v13;
        if ((*(void *)(v13 + 8 * v17) & (1 << v9)) == 0) {
          goto LABEL_19;
        }
        if (v16 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        uint64_t v6 = v15 - 1;
        if (v15 == 1) {
          return (uint64_t)v19;
        }
        unint64_t v9 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          uint64_t v8 = *(unsigned int *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

uint64_t AutoShortcutFirstRunFlow.exitValue.getter()
{
  if ((*(unsigned char *)(v0 + 272) & 0xC0) == 0x40) {
    return *(unsigned char *)(v0 + 272) & 1;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    OUTLINED_FUNCTION_20(&dword_0, v5, v6, "#AutoShortcutFirstRunFlow exited in the wrong state");
    OUTLINED_FUNCTION_7_0();
  }

  return 0;
}

uint64_t AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)()
{
  OUTLINED_FUNCTION_63_1();
  __swift_mutable_project_boxed_opaque_existential_1(v1, *(void *)(v1 + 24));
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v2);
  os_log_type_t v4 = OUTLINED_FUNCTION_24_12(v3, v16);
  uint64_t v6 = v5(v4);
  uint64_t v14 = OUTLINED_FUNCTION_32_19(v6, v7, v8, v9, v10, v11, v12, v13, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return v14;
}

uint64_t AutoShortcutFirstRunFlow.on(input:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_20_0();
  uint64_t v31 = v7 - v6;
  uint64_t v8 = type metadata accessor for Input();
  OUTLINED_FUNCTION_12_1();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_20_0();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v16 = OUTLINED_FUNCTION_16(v15);
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_20_0();
  uint64_t v17 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_12_16(v17);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v0;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_59_0();
  v20();
  uint64_t v21 = v8;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v30 = v1;
    uint64_t v24 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v32 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v25 = Input.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v21);
    _os_log_impl(&dword_0, v22, v23, "#AutoShortcutFirstRunFlow on input: %s", v24, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    uint64_t v1 = v30;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v21);
  }

  Input.parse.getter();
  unsigned __int8 v27 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v31, v2);
  if (v27 - 1 < 2)
  {
    char v28 = 0;
LABEL_10:
    *(unsigned char *)(v1 + 272) = v28;
    return 1;
  }
  if (!v27)
  {
    char v28 = 1;
    goto LABEL_10;
  }
  return 1;
}

uint64_t closure #1 in AutoShortcutFirstRunFlow.on(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  return _swift_task_switch(closure #1 in AutoShortcutFirstRunFlow.on(input:), 0, 0);
}

uint64_t closure #1 in AutoShortcutFirstRunFlow.on(input:)()
{
  OUTLINED_FUNCTION_21_0();
  outlined init with copy of AppShortcutInvoking(*(void *)(v1 + 96) + 136, v1 + 16);
  OUTLINED_FUNCTION_77_5();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v1 + 16);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    uint64_t v3 = (void *)OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v4))
    {
      uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v5);
      OUTLINED_FUNCTION_35_12(&dword_0, v6, v7, "#AutoShortcutFirstRunFlow failed to submit empty output to clear screen");
      OUTLINED_FUNCTION_7_0();
    }
    swift_errorRelease();

    OUTLINED_FUNCTION_18_0();
    return v8();
  }
  else
  {
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v1 + 104) = v10;
    *uint64_t v10 = v1;
    v10[1] = closure #1 in AutoShortcutFirstRunFlow.on(input:);
    uint64_t v11 = OUTLINED_FUNCTION_58_9();
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  os_log_type_t v4 = v2 + 56;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 112) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_26_1(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    os_log_type_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v4);
    OUTLINED_FUNCTION_42_0(&dword_0, v5, v6, "#AutoShortcutFirstRunFlow failed to submit empty output to clear screen");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_18_0();
  return v7();
}

uint64_t AutoShortcutFirstRunFlow.execute(completion:)()
{
  type metadata accessor for AutoShortcutFirstRunFlow();
  lazy protocol witness table accessor for type AutoShortcutFirstRunFlow and conformance AutoShortcutFirstRunFlow(&lazy protocol witness table cache variable for type AutoShortcutFirstRunFlow and conformance AutoShortcutFirstRunFlow, v0, (void (*)(uint64_t))type metadata accessor for AutoShortcutFirstRunFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t AutoShortcutFirstRunFlow.execute()(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  OUTLINED_FUNCTION_17_15();
  v2[26] = v3;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutFirstRunFlow.execute());
}

uint64_t AutoShortcutFirstRunFlow.execute()()
{
  OUTLINED_FUNCTION_30_4();
  uint64_t v2 = *(void *)(v1 + 200);
  unsigned int v3 = *(unsigned __int8 *)(v2 + 272);
  *(unsigned char *)(v1 + 340) = v3;
  if (v3 >> 6)
  {
    if (v3 >> 6 == 1)
    {
      static ExecuteResponse.complete()();
      goto LABEL_21;
    }
    if (v3 == 128)
    {
      uint64_t v19 = (void *)swift_task_alloc();
      *(void *)(v1 + 216) = v19;
      *uint64_t v19 = v1;
      v19[1] = AutoShortcutFirstRunFlow.execute();
      OUTLINED_FUNCTION_22_16();
      __asm { BRAA            X1, X16 }
    }
    outlined init with copy of AppShortcutInvoking(v2 + 136, v1 + 56);
    OUTLINED_FUNCTION_77_5();
    if (v0)
    {
      __swift_destroy_boxed_opaque_existential_1Tm(v1 + 56);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      os_log_type_t v23 = (void *)OUTLINED_FUNCTION_26_1(v22, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_5_3(v24))
      {
        uint64_t v25 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_28_2(v25);
        OUTLINED_FUNCTION_35_12(&dword_0, v26, v27, "#AutoShortcutFirstRunFlow failed to submit empty output to clear screen");
        OUTLINED_FUNCTION_7_0();
      }
      swift_errorRelease();

      OUTLINED_FUNCTION_41_14();
LABEL_21:
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_22_16();
      __asm { BRAA            X1, X16 }
    }
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v1 + 264) = v30;
    *uint64_t v30 = v1;
    v30[1] = AutoShortcutFirstRunFlow.execute();
    OUTLINED_FUNCTION_58_9();
    OUTLINED_FUNCTION_22_16();
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v31, v32, v33);
  }
  else
  {
    int v4 = v3 & 1;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    *(void *)(v1 + 280) = __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 67109120;
      *(_DWORD *)(v1 + 336) = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v6, (os_log_type_t)v0, "#AutoShortcutFirstRunFlow receivedInput: %{BOOL}d", v8, 8u);
      OUTLINED_FUNCTION_7_0();
    }

    __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v1 + 200) + 16), *(void *)(*(void *)(v1 + 200) + 40));
    OUTLINED_FUNCTION_67_6();
    OUTLINED_FUNCTION_39_12();
    v9();
    *(void *)(v1 + 288) = v10;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v1 + 296) = v11;
    *uint64_t v11 = v1;
    v11[1] = AutoShortcutFirstRunFlow.execute();
    OUTLINED_FUNCTION_22_16();
    return static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:)(v12, v13, v14, v15, v16);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(unsigned char *)(v1 + 341) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_5_0();
  *unsigned int v3 = v2;
  *unsigned int v3 = *v1;
  *(void *)(v2 + 240) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 200) + 136), *(void *)(*(void *)(v0 + 200) + 160));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutFirstRunFlow.execute();
  uint64_t v2 = OUTLINED_FUNCTION_71();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *unsigned int v3 = v2;
  int v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 256) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
  OUTLINED_FUNCTION_42_15();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *unsigned int v3 = v2;
  int v4 = v2 + 96;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 272) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  OUTLINED_FUNCTION_41_14();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *unsigned int v3 = v2;
  int v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 312) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 200) + 136), *(void *)(*(void *)(v0 + 200) + 160));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutFirstRunFlow.execute();
  uint64_t v2 = OUTLINED_FUNCTION_71();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *unsigned int v3 = v2;
  int v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 328) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v2))
  {
    unsigned int v3 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v3);
    OUTLINED_FUNCTION_42_0(&dword_0, v4, v5, "#AutoShortcutFirstRunFlow failed to submit output");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_42_15();
  OUTLINED_FUNCTION_18_0();
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_26_1(v1, (uint64_t)static Logger.voiceCommands);
  unsigned int v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    int v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v4);
    OUTLINED_FUNCTION_42_0(&dword_0, v5, v6, "#AutoShortcutFirstRunFlow failed to submit output");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_42_15();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_26_1(v1, (uint64_t)static Logger.voiceCommands);
  unsigned int v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    int v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v4);
    OUTLINED_FUNCTION_42_0(&dword_0, v5, v6, "#AutoShortcutFirstRunFlow failed to submit empty output to clear screen");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_41_14();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

#error "13492C: call analysis failed (funcsize=137)"

#error "1351A8: call analysis failed (funcsize=108)"

#error "135480: call analysis failed (funcsize=25)"

#error "1357E8: call analysis failed (funcsize=42)"

#error "1358A0: call analysis failed (funcsize=44)"

uint64_t static AutoShortcutFirstRunFlow.getAppName(bundleId:appNameResolver:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4];
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(a3, v6);

  return specialized static AutoShortcutFirstRunFlow.getAppName(bundleId:appNameResolver:)(a1, a2, (uint64_t)v8, v3, v6, v7);
}

uint64_t static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 56) = a5;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  *(unsigned char *)(v5 + 96) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:));
}

uint64_t static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:)()
{
  uint64_t v20 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  *(void *)(v0 + 64) = v2;
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = OUTLINED_FUNCTION_5_3(v4);
  unint64_t v6 = *(void *)(v0 + 40);
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 32);
    int v17 = *(unsigned __int8 *)(v0 + 96);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_79_4();
    *(_DWORD *)(v0 + 92) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v3, (os_log_type_t)v2, "AppShortcuts enablement for %s is %{BOOL}d", v8, 0x12u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = *(void **)(v0 + 48);
  uint64_t v10 = v9[3];
  uint64_t v11 = v9[4];
  __swift_project_boxed_opaque_existential_1(v9, v10);
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 48)
                                                                            + **(int **)(v11 + 48));
  char v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v12;
  *char v12 = v0;
  v12[1] = static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:);
  uint64_t v13 = *(void *)(v0 + 32);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v15 = *(unsigned __int8 *)(v0 + 96);
  return v18(v15, v13, v14, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  os_log_type_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *BOOL v5 = v4;
  *(void *)(v6 + 80) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  if ((*(unsigned char *)(v0 + 96) & 1) == 0)
  {
    uint64_t v1 = OUTLINED_FUNCTION_26_20();
    v2(v1);
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(1);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint8_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_30_4();
  char v12 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v4 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
    BOOL v5 = *(unsigned __int8 *)(v0 + 96);
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)unint64_t v6 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_79_4();
    *(_DWORD *)(v0 + 88) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v1, v2, "failed to set AppShortcuts enablement for %s to %{BOOL}d", v6, 0x12u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  swift_errorRelease();

  if ((*(unsigned char *)(v0 + 96) & 1) == 0)
  {
    uint64_t v7 = OUTLINED_FUNCTION_26_20();
    v8(v7);
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v9(1);
}

uint64_t AutoShortcutFirstRunFlow.makePromptOutput(appName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutFirstRunFlow.makePromptOutput(appName:));
}

uint64_t AutoShortcutFirstRunFlow.makePromptOutput(appName:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v1[5]);
  unint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(v2 + 16) + **(int **)(v2 + 16));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  v3[1] = AutoShortcutFirstRunFlow.makePromptOutput(appName:);
  uint64_t v4 = OUTLINED_FUNCTION_75();
  return v6(v4);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 64) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint8_t *v11;
  id v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t (*v28)(void *);
  uint64_t v29;
  uint64_t v30;

  if (one-time initialization token for voiceCommands != -1) {
LABEL_30:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = v0[8];
  if (!v5)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }
  uint64_t v1 = (uint8_t *)OUTLINED_FUNCTION_25_2();
  *(_DWORD *)uint64_t v1 = 134217984;
  if (v6 >> 62) {
    goto LABEL_37;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
  while (1)
  {
    swift_bridgeObjectRelease();
    v0[2] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, v4, "auto shortcuts count: %ld", v1, 0xCu);
    OUTLINED_FUNCTION_7_0();
LABEL_7:

    if (v0[8] >> 62) {
      break;
    }
    uint64_t v3 = *(NSObject **)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v3) {
      goto LABEL_32;
    }
LABEL_9:
    if ((uint64_t)v3 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v6 & 0xC000000000000001;
      uint64_t v29 = v0[8] + 32;
      uint64_t v10 = _swiftEmptyArrayStorage;
      while (1)
      {
        if (v9) {
          uint64_t v11 = (uint8_t *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v11 = (uint8_t *)*(id *)(v29 + 8 * v8);
        }
        uint64_t v1 = v11;
        char v12 = [(uint8_t *)v11 orderedPhrases];
        type metadata accessor for LNAutoShortcutLocalizedPhrase();
        uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v13 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v22)
          {
LABEL_25:
            swift_bridgeObjectRelease();

            goto LABEL_26;
          }
        }
        else if (!*(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8)))
        {
          goto LABEL_25;
        }
        if ((v13 & 0xC000000000000001) != 0)
        {
          uint64_t v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8)))
          {
            __break(1u);
            goto LABEL_30;
          }
          uint64_t v14 = *(id *)(v13 + 32);
        }
        uint64_t v15 = v14;
        swift_bridgeObjectRelease();
        uint64_t v16 = [v15 localizedPhrase];

        int v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v10 = v23;
        }
        uint64_t v20 = v10[2];
        if (v20 >= v10[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v10 = v24;
        }
        v10[2] = v20 + 1;
        uint64_t v21 = &v10[2 * v20];
        v21[4] = v17;
        v21[5] = v19;
LABEL_26:
        if (v3 == ++v8) {
          goto LABEL_33;
        }
      }
    }
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  if (v3) {
    goto LABEL_9;
  }
LABEL_32:
  uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_33:
  v0[9] = v10;
  swift_bridgeObjectRelease_n();
  OUTLINED_FUNCTION_17_15();
  char v28 = (uint64_t (*)(void *))(*(void *)(v25 + 288) + **(int **)(v25 + 288));
  uint64_t v26 = (void *)swift_task_alloc();
  v0[10] = v26;
  *uint64_t v26 = v0;
  v26[1] = AutoShortcutFirstRunFlow.makePromptOutput(appName:);
  return v28(v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 88) = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *BOOL v5 = v4;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *BOOL v5 = v4;
  *(void *)(v6 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void AutoShortcutFirstRunFlow.makePromptOutput(appName:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[6];
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 96), *(void *)(v1 + 120));
  OUTLINED_FUNCTION_67_6();
  if ((dispatch thunk of DeviceState.isHomePod.getter() & 1) != 0
    || (__swift_project_boxed_opaque_existential_1((void *)(v1 + 96), *(void *)(v1 + 120)),
        OUTLINED_FUNCTION_67_6(),
        (dispatch thunk of DeviceState.isCarPlay.getter() & 1) != 0))
  {
    OUTLINED_FUNCTION_29_17();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[13] = v2;
    *uint64_t v2 = v0;
    v2[1] = AutoShortcutFirstRunFlow.makePromptOutput(appName:);
    OUTLINED_FUNCTION_57_4();
    OUTLINED_FUNCTION_48_0();
    __asm { BRAA            X5, X16 }
  }
  OUTLINED_FUNCTION_29_17();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[15] = v5;
  *BOOL v5 = v6;
  v5[1] = AutoShortcutFirstRunFlow.makePromptOutput(appName:);
  OUTLINED_FUNCTION_57_4();
  OUTLINED_FUNCTION_48_0();
  __asm { BRAA            X5, X16 }
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v6);
  v1[7] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for DialogPhase();
  v1[8] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[9] = v8;
  v1[10] = OUTLINED_FUNCTION_13_0();
  v1[11] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v1[12] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[13] = v10;
  v1[14] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  v1[15] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[16] = v12;
  v1[17] = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[18] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v1[19] = v14;
  v1[20] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v15, v16, v17);
}

{
  char v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  void *v14;
  uint64_t v16;

  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = OUTLINED_FUNCTION_47_10();
  v3(v2);
  RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v4 = OUTLINED_FUNCTION_48_8();
  v5(v4);
  if (v0)
  {
    uint64_t v6 = (void *)v1[5];
    uint64_t v7 = v6[2];
    if (v7)
    {
      uint64_t v8 = v6[5];
      swift_bridgeObjectRetain();
      if (v7 != 1)
      {
        uint64_t v13 = v6[7];
        swift_bridgeObjectRetain();
LABEL_11:
        v1[21] = v8;
        v1[22] = v13;
        v1[23] = *(void *)(v1[6] + 176);
        OUTLINED_FUNCTION_17_15();
        uint64_t v14 = (void *)swift_task_alloc();
        v1[24] = v14;
        *uint64_t v14 = v1;
        v14[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:);
        OUTLINED_FUNCTION_48_0();
        __asm { BRAA            X7, X16 }
      }
    }
    else
    {
      uint64_t v8 = 0xE000000000000000;
    }
    uint64_t v13 = 0xE000000000000000;
    goto LABEL_11;
  }
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v1[36] = v9;
  *uint64_t v9 = v10;
  v9[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:);
  OUTLINED_FUNCTION_48_0();
  return AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod_preRFv2(appName:autoShortcutPhrases:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v13)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  *uint64_t v4 = v5;
  v3[25] = v6;
  v3[26] = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    uint64_t v10 = v3[23];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = (uint64_t (*)(void))(*(void *)(*(void *)v10 + 232) + **(int **)(*(void *)v10 + 232));
    uint64_t v11 = (void *)swift_task_alloc();
    v3[27] = v11;
    *uint64_t v11 = v5;
    v11[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:);
    return v13();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v12 = v11;
  uint64_t v13 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v14 = v13;
  v11[28] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v11[29] = v3;
    v11[30] = v5;
    v11[31] = v7;
    v11[32] = v9;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_6_1();
  return _swift_task_switch(v15, v16, v17);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *);
  id v7;
  void (*v8)(void);
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[29];
  uint64_t v22 = v0[16];
  os_log_type_t v23 = v0[15];
  uint64_t v16 = v0[30];
  uint64_t v17 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v18 = (id)v0[25];
  uint64_t v19 = v0[8];
  uint64_t v20 = v0[17];
  uint64_t v21 = v0[7];
  OUTLINED_FUNCTION_16_5();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(v5 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6(v2, v1, v16, v3, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  static DialogPhase.confirmation.getter();
  uint64_t v7 = [v18 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_59_0();
  v8();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v17, v19);
  OutputGenerationManifest.listenAfterSpeaking.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v20, v23);
  __swift_storeEnumTagSinglePayload(v21, 0, 1, v23);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v0[33] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_211C70;
  *(void *)(v9 + 32) = v18;
  uint64_t v25 = v9;
  specialized Array._endMutation()();
  v0[34] = v25;
  os_log_type_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
                                                          + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
  uint64_t v10 = v18;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[35] = v11;
  *uint64_t v11 = v12;
  v11[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:);
  uint64_t v13 = v0[14];
  uint64_t v14 = v0[2];
  return v24(v14, v25, v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_13_1();

  uint64_t v1 = OUTLINED_FUNCTION_34_13();
  v2(v1);
  uint64_t v3 = OUTLINED_FUNCTION_29_15();
  v4(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_64_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();

  OUTLINED_FUNCTION_64_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod(appName:autoShortcutPhrases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_2_0();
  uint64_t v11 = *v10;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v12 = v11;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_1();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod_preRFv2(appName:autoShortcutPhrases:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[10] = v2;
  v1[11] = v0;
  v1[8] = v3;
  v1[9] = v4;
  v1[7] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v6);
  v1[12] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  v1[13] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[14] = v8;
  v1[15] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for TemplatingResult();
  v1[16] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[17] = v10;
  v1[18] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v13)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 184) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_29_17();
    uint64_t v13 = (uint64_t (*)(void))(*(void *)(v10 + 232) + **(int **)(v10 + 232));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v3 + 192) = v11;
    *uint64_t v11 = v5;
    v11[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod_preRFv2(appName:autoShortcutPhrases:);
    return v13();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v12 = v11;
  uint64_t v13 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v14 = v13;
  v11[25] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v11[26] = v3;
    v11[27] = v5;
    v11[28] = v7;
    v11[29] = v9;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_6_1();
  return _swift_task_switch(v15, v16, v17);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *);
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v4 = v0[26];
  uint64_t v3 = v0[27];
  uint64_t v5 = v0[11];
  uint64_t v16 = v0[12];
  uint64_t v17 = v0[13];
  uint64_t v18 = (uint64_t *)v0[7];
  OUTLINED_FUNCTION_16_5();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(v6 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(v1, v2, v3, v4, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  __swift_project_boxed_opaque_existential_1((void *)(v5 + 96), *(void *)(v5 + 120));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  OUTLINED_FUNCTION_59_0();
  v8();
  __swift_storeEnumTagSinglePayload(v16, 0, 1, v17);
  type metadata accessor for AceOutput();
  OUTLINED_FUNCTION_56_5();
  v18[3] = v9;
  v18[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v18);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v17, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v16, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_66();
  v11(v10);
  OUTLINED_FUNCTION_66();
  v13(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v14();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

void AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod_preRFv2(appName:autoShortcutPhrases:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = v1[2];
  if (v2)
  {
    unint64_t v3 = v1[5];
    swift_bridgeObjectRetain();
    if (v2 != 1)
    {
      unint64_t v4 = v1[7];
      swift_bridgeObjectRetain();
LABEL_7:
      v0[19] = v3;
      v0[20] = v4;
      v0[21] = *(void *)(v0[11] + 176);
      OUTLINED_FUNCTION_17_15();
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      v0[22] = v5;
      *uint64_t v5 = v6;
      v5[1] = AutoShortcutFirstRunFlow.makeFirstRunPromptForHomePod_preRFv2(appName:autoShortcutPhrases:);
      OUTLINED_FUNCTION_48_0();
      __asm { BRAA            X8, X16 }
    }
  }
  else
  {
    unint64_t v3 = 0xE000000000000000;
  }
  unint64_t v4 = 0xE000000000000000;
  goto LABEL_7;
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[10] = v2;
  v1[11] = v0;
  v1[8] = v3;
  v1[9] = v4;
  v1[7] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v6);
  v1[12] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for DialogPhase();
  v1[13] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[14] = v8;
  v1[15] = OUTLINED_FUNCTION_13_0();
  v1[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v1[17] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[18] = v10;
  v1[19] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[20] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[21] = v12;
  v1[22] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  char v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = OUTLINED_FUNCTION_47_10();
  v3(v2);
  RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v4 = OUTLINED_FUNCTION_48_8();
  v5(v4);
  uint64_t v6 = (void *)v1[11];
  if (v0)
  {
    v1[23] = v6[22];
    OUTLINED_FUNCTION_16_5();
    uint64_t v7 = (void *)swift_task_alloc();
    v1[24] = v7;
    *uint64_t v7 = v1;
    v7[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
    uint64_t v8 = OUTLINED_FUNCTION_60_5(v1[8]);
    return v9(v8);
  }
  else
  {
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*v6 + 248) + **(int **)(*v6 + 248));
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v1[43] = v11;
    *uint64_t v11 = v12;
    v11[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
    uint64_t v13 = v1[10];
    uint64_t v14 = v1[8];
    uint64_t v15 = v1[9];
    uint64_t v16 = v1[7];
    return v17(v16, v14, v15, v13);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  v2[28] = v4;
  v2[29] = v5;
  v2[30] = v6;
  v2[31] = v7;
  v2[32] = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  void *v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 16);
  OUTLINED_FUNCTION_29_17();
  OUTLINED_FUNCTION_27_20(v2 + 248);
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v4;
  *uint64_t v4 = v0;
  v4[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
  return v6(v1);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  *uint64_t v4 = v5;
  v3[34] = v6;
  v3[35] = v7;
  v3[36] = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    OUTLINED_FUNCTION_29_17();
    uint64_t v11 = (void *)swift_task_alloc();
    v3[37] = (uint64_t)v11;
    *uint64_t v11 = v5;
    v11[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
    uint64_t v12 = OUTLINED_FUNCTION_60_5(v3[8]);
    return v13(v12);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 304) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 312) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void (*v7)(void);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;

  uint64_t v1 = *(void **)(v0 + 312);
  uint64_t v31 = *(void *)(v0 + 280);
  uint64_t v32 = v1;
  uint64_t v30 = *(void *)(v0 + 272);
  uint64_t v33 = *(void *)(v0 + 248);
  uint64_t v27 = *(void *)(v0 + 240);
  uint64_t v25 = *(void *)(v0 + 232);
  uint64_t v34 = *(void *)(v0 + 224);
  uint64_t v29 = *(_OWORD *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = *(void **)(v0 + 88);
  uint64_t v26 = *(void *)(v0 + 96);
  char v28 = *(void *)(v0 + 80);
  static DialogPhase.confirmation.getter();
  uint64_t v6 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_59_0();
  v7();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OUTLINED_FUNCTION_16_5();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(v8 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v34, v25, v27, v33, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v26, 0, 1, v10);
  OutputGenerationManifest.nlContextUpdate.setter();
  uint64_t v11 = v5[6];
  __swift_project_boxed_opaque_existential_1(v5 + 2, v5[5]);
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v11 + 32);
  swift_bridgeObjectRetain();
  uint64_t v13 = OUTLINED_FUNCTION_75();
  uint64_t v14 = v12(v13);
  uint64_t v16 = v15;
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  *(void *)(v0 + 320) = ResponseFactory.init()();
  *(void *)(v0 + 40) = type metadata accessor for WorkflowDataModels(0);
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type AutoShortcutFirstRunFlow and conformance AutoShortcutFirstRunFlow((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, 255, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  uint64_t *boxed_opaque_existential_1 = v28;
  boxed_opaque_existential_1[1] = 3;
  boxed_opaque_existential_1[2] = v14;
  boxed_opaque_existential_1[3] = v16;
  *((_OWORD *)boxed_opaque_existential_1 + 2) = v29;
  boxed_opaque_existential_1[6] = v30;
  boxed_opaque_existential_1[7] = v31;
  boxed_opaque_existential_1[8] = 0;
  boxed_opaque_existential_1[9] = 0;
  boxed_opaque_existential_1[10] = v34;
  boxed_opaque_existential_1[11] = v25;
  boxed_opaque_existential_1[12] = v27;
  boxed_opaque_existential_1[13] = v33;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_211C70;
  *(void *)(v18 + 32) = v32;
  uint64_t v36 = v18;
  specialized Array._endMutation()();
  *(void *)(v0 + 328) = v36;
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)
                                                                   + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:));
  uint64_t v19 = v32;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 336) = v20;
  *uint64_t v20 = v21;
  v20[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
  uint64_t v22 = *(void *)(v0 + 152);
  os_log_type_t v23 = *(void *)(v0 + 56);
  return v35(v23, v0 + 16, v36, v22);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();

  uint64_t v1 = OUTLINED_FUNCTION_21_6();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_2_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_43_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_43_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_43_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:)()
{
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  *uint64_t v4 = v5;
  v3[25] = v6;
  v3[26] = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_48_0();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_29_17();
  uint64_t v10 = (void *)swift_task_alloc();
  v3[27] = v10;
  *uint64_t v10 = v5;
  v10[1] = AutoShortcutFirstRunFlow.makeFirstRunOutput(appName:autoShortcutPhrases:);
  OUTLINED_FUNCTION_48_0();
  __asm { BRAA            X1, X16 }
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[27] = v2;
  v1[28] = v0;
  v1[25] = v3;
  v1[26] = v4;
  v1[24] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v6);
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for DialogPhase();
  v1[30] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[31] = v8;
  v1[32] = OUTLINED_FUNCTION_13_0();
  v1[33] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v1[34] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[35] = v10;
  v1[36] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for TemplatingText();
  v1[37] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[38] = v12;
  v1[39] = OUTLINED_FUNCTION_25();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_16(v13);
  v1[40] = OUTLINED_FUNCTION_13_0();
  v1[41] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for TemplatingResult();
  v1[42] = v14;
  OUTLINED_FUNCTION_1_0(v14);
  v1[43] = v15;
  v1[44] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v16, v17, v18);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  v0[45] = *(void *)(v0[28] + 176);
  OUTLINED_FUNCTION_16_5();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 120) + **(int **)(v1 + 120));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[46] = v2;
  *uint64_t v2 = v3;
  v2[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
  uint64_t v4 = v0[44];
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[26];
  return v8(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v13)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_29_17();
    uint64_t v13 = (uint64_t (*)(void))(*(void *)(v10 + 232) + **(int **)(v10 + 232));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v3 + 384) = v11;
    *uint64_t v11 = v5;
    v11[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
    return v13();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  v2[49] = v4;
  v2[50] = v5;
  v2[51] = v6;
  v2[52] = v7;
  v2[53] = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  void *v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(*(void *)(v0 + 216) + 16);
  OUTLINED_FUNCTION_29_17();
  OUTLINED_FUNCTION_27_20(v2 + 248);
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v4;
  *uint64_t v4 = v0;
  v4[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
  return v6(v1);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  *uint64_t v4 = v5;
  v3[55] = v6;
  v3[56] = v7;
  v3[57] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    OUTLINED_FUNCTION_29_17();
    uint64_t v11 = (void *)swift_task_alloc();
    v3[58] = (uint64_t)v11;
    *uint64_t v11 = v5;
    v11[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
    uint64_t v12 = OUTLINED_FUNCTION_60_5(v3[25]);
    return v13(v12);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 472) = v5;
  *(void *)(v3 + 480) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void (*v20)(void);
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  long long v28;
  long long v29;
  uint64_t v30;

  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 352);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 224) + 96), *(void *)(*(void *)(v0 + 224) + 120));
  uint64_t v5 = dispatch thunk of DeviceState.isWatch.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = TemplatingResult.sections.getter();
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 328);
    specialized Collection.first.getter(v6, v7);
    swift_bridgeObjectRelease();
    uint64_t v8 = type metadata accessor for TemplatingSection();
    if (OUTLINED_FUNCTION_87_0(v8) == 1)
    {
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 328), &demangling cache variable for type metadata for TemplatingSection?);
      uint64_t v3 = 0;
      uint64_t v7 = 0xE000000000000000;
    }
    else
    {
      uint64_t v4 = *(void *)(v0 + 312);
      TemplatingSection.content.getter();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_66();
      v11();
      TemplatingText.text.getter();
      uint64_t v12 = OUTLINED_FUNCTION_49_9();
      v13(v12);
    }
    *(void *)(v0 + 488) = v7;
    uint64_t v14 = OUTLINED_FUNCTION_17_19();
    uint64_t v16 = v15(v14);
    *(void *)(v0 + 104) = v4;
    *(void *)(v0 + 496) = v17;
    *(_OWORD *)(v0 + 112) = v28;
    *(_OWORD *)(v0 + 128) = v29;
    *(void *)(v0 + 144) = v2;
    *(void *)(v0 + 152) = v1;
    *(void *)(v0 + 160) = v3;
    *(void *)(v0 + 168) = v7;
    *(void *)(v0 + 176) = v16;
    *(void *)(v0 + 184) = v17;
    swift_bridgeObjectRetain();
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v18;
    *uint64_t v18 = v0;
    v18[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
    return AutoShortcutFirstRunWatchVisual.data.getter();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 320);
    specialized Collection.first.getter(v6, v9);
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for TemplatingSection();
    if (OUTLINED_FUNCTION_87_0(v10) == 1)
    {
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 320), &demangling cache variable for type metadata for TemplatingSection?);
      uint64_t v3 = 0;
      uint64_t v9 = 0xE000000000000000;
    }
    else
    {
      uint64_t v4 = *(void *)(v0 + 312);
      TemplatingSection.content.getter();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_66();
      v20();
      TemplatingText.text.getter();
      uint64_t v21 = OUTLINED_FUNCTION_49_9();
      v22(v21);
    }
    *(void *)(v0 + 536) = v9;
    os_log_type_t v23 = OUTLINED_FUNCTION_17_19();
    uint64_t v25 = v24(v23);
    *(void *)(v0 + 16) = v4;
    *(void *)(v0 + 544) = v26;
    *(_OWORD *)(v0 + 24) = v28;
    *(_OWORD *)(v0 + 40) = v29;
    *(void *)(v0 + 56) = v2;
    *(void *)(v0 + 64) = v1;
    *(void *)(v0 + 72) = v3;
    *(void *)(v0 + 80) = v9;
    *(void *)(v0 + 88) = v25;
    *(void *)(v0 + 96) = v26;
    swift_bridgeObjectRetain();
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 552) = v27;
    void *v27 = v0;
    v27[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
    return AutoShortcutFirstRunVisual.data.getter();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[64] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    OUTLINED_FUNCTION_71_6();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7[65] = v3;
    v7[66] = v5;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  void (*v3)(void);
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(*(void *)(v1 + 528), *(void *)(v1 + 520), *(void **)(v1 + 472));
  OUTLINED_FUNCTION_20_26();
  uint64_t v2 = [v0 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_59_0();
  v3();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v4 = OUTLINED_FUNCTION_54_5();
  v5(v4);
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OUTLINED_FUNCTION_16_5();
  uint64_t v7 = *(void (**)(uint64_t))(v6 + 80);
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v15 = OUTLINED_FUNCTION_37_16(v8, v9, v10, v11, (uint64_t)_swiftEmptyArrayStorage, v12, v13, v14, v21, v22, v23, v24, v25, v26);
  v7(v15);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_62_5(v16);
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  *(void *)(v1 + 584) = ResponseFactory.init()();
  uint64_t v17 = (void *)OUTLINED_FUNCTION_80_3();
  *(void *)(v1 + 592) = v17;
  *uint64_t v17 = v1;
  v17[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
  uint64_t v18 = OUTLINED_FUNCTION_68_5();
  return v19(v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[70] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    OUTLINED_FUNCTION_71_6();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7[71] = v3;
    v7[72] = v5;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  void (*v3)(void);
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(*(void *)(v1 + 576), *(void *)(v1 + 568), *(void **)(v1 + 472));
  OUTLINED_FUNCTION_20_26();
  uint64_t v2 = [v0 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_59_0();
  v3();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v4 = OUTLINED_FUNCTION_54_5();
  v5(v4);
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OUTLINED_FUNCTION_16_5();
  uint64_t v7 = *(void (**)(uint64_t))(v6 + 80);
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v15 = OUTLINED_FUNCTION_37_16(v8, v9, v10, v11, (uint64_t)_swiftEmptyArrayStorage, v12, v13, v14, v21, v22, v23, v24, v25, v26);
  v7(v15);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_62_5(v16);
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  *(void *)(v1 + 584) = ResponseFactory.init()();
  uint64_t v17 = (void *)OUTLINED_FUNCTION_80_3();
  *(void *)(v1 + 592) = v17;
  *uint64_t v17 = v1;
  v17[1] = AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:);
  uint64_t v18 = OUTLINED_FUNCTION_68_5();
  return v19(v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 600) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 272);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v7();
}

uint64_t AutoShortcutFirstRunFlow.makeFirstRunPatternOutput_preRFv2(appName:autoShortcutPhrases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_7_28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v10 = OUTLINED_FUNCTION_31_15();
  v11(v10);
  OUTLINED_FUNCTION_7_28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v10 = OUTLINED_FUNCTION_31_15();
  v11(v10);
  OUTLINED_FUNCTION_7_28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v10 = OUTLINED_FUNCTION_31_15();
  v11(v10);
  OUTLINED_FUNCTION_7_28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();

  uint64_t v11 = OUTLINED_FUNCTION_21_6();
  v12(v11);
  OUTLINED_FUNCTION_7_28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();

  uint64_t v11 = OUTLINED_FUNCTION_21_6();
  v12(v11);
  OUTLINED_FUNCTION_7_28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();

  uint64_t v11 = OUTLINED_FUNCTION_34_13();
  v12(v11);
  uint64_t v13 = OUTLINED_FUNCTION_29_15();
  v14(v13);
  OUTLINED_FUNCTION_7_28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

uint64_t AutoShortcutFirstRunFlow.shouldPresentFirstRunExperience()()
{
  *(void *)(v1 + 32) = v0;
  OUTLINED_FUNCTION_17_15();
  *(void *)(v1 + 40) = v2;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutFirstRunFlow.shouldPresentFirstRunExperience());
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[4];
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), *(void *)(v1 + 40));
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_39_12();
  uint64_t v3 = v2();
  uint64_t v5 = v4;
  v0[6] = v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = AutoShortcutFirstRunFlow.shouldPresentFirstRunExperience();
  return static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)(v3, v5, v1 + 232);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *(unsigned char *)(v6 + 64) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  os_log_type_t v24 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 64);
  if (v1 == 2)
  {
LABEL_14:
    uint64_t v11 = 0;
    goto LABEL_15;
  }
  if (v1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.voiceCommands);
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.debug.getter();
    uint64_t v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 32);
    if (v15)
    {
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      os_log_type_t v23 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v17 = 136315138;
      __swift_project_boxed_opaque_existential_1((void *)(v16 + 16), *(void *)(v16 + 40));
      OUTLINED_FUNCTION_39_12();
      uint64_t v19 = v18();
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v13, v14, "First run: App shortcuts enabled for %s, omitting first run prompt", v17, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_release_n();
    }

    goto LABEL_14;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 32);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    os_log_type_t v23 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v7 = 136315138;
    __swift_project_boxed_opaque_existential_1((void *)(v6 + 16), *(void *)(v6 + 40));
    OUTLINED_FUNCTION_39_12();
    uint64_t v9 = v8();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v3, v4, "First run: App shortcuts not enabled for %s, showing first run prompt", v7, 0xCu);
    uint64_t v11 = 1;
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_release_n();

    uint64_t v11 = 1;
  }
LABEL_15:
  uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v21(v11);
}

uint64_t static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:));
}

uint64_t static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[8] = v5;
  *uint64_t v5 = v6;
  v5[1] = static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:);
  OUTLINED_FUNCTION_10_0();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v7, v8, v9, 0xD000000000000039, v10, v11, v4, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 80));
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_30_4();
  uint64_t v12 = v0;
  swift_task_dealloc();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[9];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v11 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[2] = v5;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = String.init<A>(describing:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "failed to get enablement status with error: %s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(2);
}

uint64_t closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v11 + 40))(a3, v16, partial apply for closure #1 in closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:), v13, v10, v11);
  return swift_release();
}

uint64_t closure #1 in closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t AutoShortcutFirstRunFlow.makeUserDeniedOutput()()
{
  OUTLINED_FUNCTION_9_0();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v3);
  v1[9] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v1[10] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[11] = v5;
  v1[12] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_16_5();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 304) + **(int **)(v1 + 304));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutFirstRunFlow.makeUserDeniedOutput();
  uint64_t v3 = *(void *)(v0 + 96);
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t AutoShortcutFirstRunFlow.makeUserDeniedOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 72);
  uint64_t v13 = *(uint64_t **)(v10 + 56);
  uint64_t v14 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_12_16(v14);
  type metadata accessor for AceOutput();
  OUTLINED_FUNCTION_56_5();
  v13[3] = v15;
  v13[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v13);
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v11, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v12, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v16 = OUTLINED_FUNCTION_75();
  v17(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_6_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, v11, a10);
}

uint64_t AutoShortcutFirstRunFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 232);
  return v0;
}

uint64_t AutoShortcutFirstRunFlow.__deallocating_deinit()
{
  AutoShortcutFirstRunFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance AutoShortcutFirstRunFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance AutoShortcutFirstRunFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for Flow.execute() in conformance AutoShortcutFirstRunFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 208) + **(int **)(**(void **)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance AutoShortcutFirstRunFlow@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 176))();
  *a1 = result & 1;
  return result;
}

uint64_t SirikitApp.init(_:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_16(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_20_0();
  uint64_t v5 = v4 - v3;
  type metadata accessor for App();
  swift_bridgeObjectRetain();
  App.__allocating_init(appIdentifier:)();
  uint64_t v6 = static SAAppInfoFactory.createAppInfo(app:)();
  swift_release();
  if (!v6)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    uint64_t v6 = OUTLINED_FUNCTION_26_1(v10, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v11))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_20(&dword_0, v12, v13, "SirikitApp unsuccessfully instantiated, since SAAppInfoFactory was unable to create the app info");
      OUTLINED_FUNCTION_7_0();
    }
    goto LABEL_13;
  }
  uint64_t v7 = outlined bridged method (pb) of @objc SAAppInfo.appNameMap.getter(v6);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = OUTLINED_FUNCTION_26_1(v14, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_32(v16))
    {
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v0, "SirikitApp unsuccessfully instantiated, since appInfo does not contain app name map", v17, 2u);
      OUTLINED_FUNCTION_7_0();
    }

LABEL_13:
    return 0;
  }
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_16SiriDialogEngine23SirikitLocalizedAppNameCs5NeverOTg507_sS2S16de8Engine23ghij27CIgggo_SS3key_SS5valuetACs5K96OIegnrzr_TR04_s16ab8Engine10df35C0A14LinkFlowPluginEyACSgSScfcAA0d9e2E4G12CSS_SStXEfU_Tf3nnnpf_nTf1cn_n(v7);
  swift_bridgeObjectRelease();
  type metadata accessor for SirikitApp.Builder();
  OUTLINED_FUNCTION_35_2();
  SirikitApp.Builder.init()();
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v5, 0, 1, v8);
  dispatch thunk of SirikitApp.Builder.withAppId(_:)();
  swift_release();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  dispatch thunk of SirikitApp.Builder.withLocalizedAppNames(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v9 = dispatch thunk of SirikitApp.__allocating_init(builder:)();

  return v9;
}

void outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(uint64_t a1, unint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(a1, a2);
  [a3 setVisual:isa];
}

uint64_t specialized AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = type metadata accessor for CATOption();
  __chkstk_darwin(v17 - 8);
  uint64_t v27 = a8;
  uint64_t v28 = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(boxed_opaque_existential_1, a6, a8);
  outlined init with copy of AppShortcutInvoking(a1, a7 + 16);
  outlined init with copy of AppShortcutInvoking(a2, a7 + 56);
  outlined init with copy of AppShortcutInvoking(a3, a7 + 232);
  outlined init with copy of AppShortcutInvoking(a5, a7 + 96);
  outlined init with copy of AppShortcutInvoking(a4, a7 + 136);
  type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a7 + 184) = swift_allocObject();
  outlined init with copy of AppShortcutInvoking(a5, (uint64_t)v25);
  type metadata accessor for AutoShortcutCATs();
  static CATOption.defaultMode.getter();
  uint64_t v19 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AutoShortcutCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v20 = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v21 = type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v22 = CATWrapper.__allocating_init(options:globals:)();
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  type metadata accessor for AutoShortcutDialogTemplating();
  uint64_t v23 = (void *)swift_allocObject();
  v23[12] = v21;
  v23[13] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  v23[9] = v22;
  outlined init with take of AceServiceInvokerAsync(v25, (uint64_t)(v23 + 2));
  v23[7] = v19;
  v23[8] = v20;
  *(void *)(a7 + 176) = v23;
  outlined init with take of AceServiceInvokerAsync(&v26, a7 + 192);
  *(unsigned char *)(a7 + 272) = 0x80;
  return a7;
}

uint64_t sub_13C4D4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in AutoShortcutFirstRunFlow.on(input:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v8;
  v7[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return closure #1 in AutoShortcutFirstRunFlow.on(input:)(v3, v4, v5, v6);
}

uint64_t type metadata accessor for AutoShortcutFirstRunFlow()
{
  return self;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized static AutoShortcutFirstRunFlow.getAppName(bundleId:appNameResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  OUTLINED_FUNCTION_12_1();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_20_0();
  uint64_t v15 = v14 - v13;
  OUTLINED_FUNCTION_59_0();
  v16();
  if (a2)
  {
    type metadata accessor for App();
    swift_bridgeObjectRetain();
    App.__allocating_init(appIdentifier:)();
    a1 = (*(uint64_t (**)(void))(a6 + 8))();
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, a5);
  return a1;
}

unint64_t type metadata accessor for LNAutoShortcutLocalizedPhrase()
{
  unint64_t result = lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase;
  if (!lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AutoShortcutFirstRunFlow and conformance AutoShortcutFirstRunFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)(uint64_t a1)
{
  return closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t getEnumTagSinglePayload for AutoShortcutFirstRunFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    unsigned int v5 = -1;
    return v5 + 1;
  }
  if (a2 >= 0x7E)
  {
    if (a2 + 130 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 130) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    unsigned int v5 = (*a1 | (v4 << 8)) - 131;
    return v5 + 1;
  }
LABEL_17:
  unsigned int v5 = ((*a1 >> 6) & 0xFFFFFF83 | (4 * ((*a1 >> 1) & 0x1F))) ^ 0x7F;
  if (v5 >= 0x7D) {
    unsigned int v5 = -1;
  }
  return v5 + 1;
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutFirstRunFlow.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 130 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 130) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x7E) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x7D)
  {
    unsigned int v6 = ((a2 - 126) >> 8) + 1;
    *uint64_t result = a2 - 126;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x13C990);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for AutoShortcutFirstRunFlow.State(unsigned char *a1)
{
  int v1 = (char)*a1;
  if (v1 >= 0) {
    return *a1 >> 6;
  }
  else {
    return v1 & 1 | 2u;
  }
}

unsigned char *destructiveProjectEnumData for AutoShortcutFirstRunFlow.State(unsigned char *result)
{
  *result &= 0x3Fu;
  return result;
}

unsigned char *destructiveInjectEnumTag for AutoShortcutFirstRunFlow.State(unsigned char *result, unsigned int a2)
{
  if (a2 < 2) {
    char v2 = *result & 1 | ((_BYTE)a2 << 6);
  }
  else {
    char v2 = a2 & 1 | 0x80;
  }
  *uint64_t result = v2;
  return result;
}

void *type metadata accessor for AutoShortcutFirstRunFlow.State()
{
  return &unk_28D588;
}

uint64_t sub_13CA1C()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  OUTLINED_FUNCTION_40();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = ((v2 + 16) & ~v2) + *(void *)(v1 + 56);
  uint64_t v4 = v2 | 7;
  OUTLINED_FUNCTION_66();
  v5();

  return _swift_deallocObject(v0, v3, v4);
}

uint64_t partial apply for closure #1 in closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);

  return closure #1 in closure #1 in static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_7_28()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_17_19()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_20_26()
{
  return static DialogPhase.confirmation.getter();
}

void OUTLINED_FUNCTION_23_20(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  char v26 = *(unsigned char *)(v24 + 340);
  *(unsigned char *)(*(void *)(v24 + 200) + 272) = v26 & 1 | 0x40;
  static InstrumentationUtils.emitFirstRunConfirmationEndedInstrumentation(enabled:)(v26 & 1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
}

uint64_t OUTLINED_FUNCTION_26_20()
{
  uint64_t v1 = *(void *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 56), *(void *)(*(void *)(v0 + 56) + 24));
  return v1;
}

uint64_t OUTLINED_FUNCTION_27_20(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x3FDE000000000000;
}

uint64_t OUTLINED_FUNCTION_31_15()
{
  return *(void *)(v0 + 352);
}

uint64_t OUTLINED_FUNCTION_32_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized AutoShortcutFirstRunFlow.init(autoShortcutInvocation:aceServiceInvoker:voiceShortcutsClient:outputPublisher:deviceState:userDefaults:)(v14, v13, v12, v11, v10, v16, v9, v15, a9);
}

uint64_t OUTLINED_FUNCTION_37_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return a14;
}

uint64_t OUTLINED_FUNCTION_41_14()
{
  *(unsigned char *)(*(void *)(v0 + 200) + 272) = 0x80;
  return static ExecuteResponse.ongoing(requireInput:)();
}

uint64_t OUTLINED_FUNCTION_42_15()
{
  *(unsigned char *)(*(void *)(v0 + 200) + 272) = -127;
  return static ExecuteResponse.ongoing(requireInput:)();
}

uint64_t OUTLINED_FUNCTION_43_8()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_47_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_49_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_54_5()
{
  return v0;
}

double OUTLINED_FUNCTION_56_5()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_57_4()
{
  return *(void *)(v0 + 24);
}

uint64_t OUTLINED_FUNCTION_58_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_60_5@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_62_5(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t OUTLINED_FUNCTION_64_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_67_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_68_5()
{
  return *(void *)(v0 + 192);
}

uint64_t OUTLINED_FUNCTION_71_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_77_5()
{
  __swift_project_boxed_opaque_existential_1(v2, v0);
  return static OutputUtils.makeTemporaryOutput()(v1);
}

void OUTLINED_FUNCTION_79_4()
{
  *(_WORD *)(v0 + 12) = 1024;
}

uint64_t OUTLINED_FUNCTION_80_3()
{
  return swift_task_alloc();
}

void __swiftcall AutoShortcutAppPhrasesViewModel.init(shortcutPhrases:maxPhrases:bundleId:prompt:moreShortcutsLabel:footnoteLabel:)(SiriLinkFlowPlugin::AutoShortcutAppPhrasesViewModel *__return_ptr retstr, Swift::OpaquePointer shortcutPhrases, Swift::Int maxPhrases, Swift::String bundleId, Swift::String prompt, Swift::String_optional moreShortcutsLabel, Swift::String_optional footnoteLabel)
{
  retstr->shortcutPhrases = shortcutPhrases;
  retstr->maxPhrases = maxPhrases;
  retstr->bundleId = bundleId;
  retstr->prompt = prompt;
  retstr->moreShortcutsLabel = moreShortcutsLabel;
  retstr->footnoteLabel = footnoteLabel;
}

uint64_t AutoShortcutFirstRunWatchVisual.shortcutPhrases.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutoShortcutAppPhrasesViewModel.maxPhrases.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AutoShortcutAppPhrasesViewModel.moreShortcutsLabel.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t AutoShortcutAppPhrasesViewModel.footnoteLabel.getter()
{
  return OUTLINED_FUNCTION_19();
}

BOOL AutoShortcutAppPhrasesViewModel.needToShowMore.getter()
{
  return v0[1] < *(void *)(*v0 + 16);
}

unint64_t AutoShortcutAppPhrasesViewModel.punchoutURL.getter()
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000019;
}

void *AutoShortcutAppPhrasesViewModel.displayPhrases.getter()
{
  double result = (void *)*v0;
  uint64_t v2 = v0[1];
  if (v2 >= *(void *)(*v0 + 16))
  {
    return (void *)swift_bridgeObjectRetain();
  }
  else if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = (uint64_t)(result + 4);
    unint64_t v4 = (2 * v2) | 1;
    uint64_t v5 = swift_bridgeObjectRetain();
    return specialized Array.init<A>(_:)(v5, v3, 0, v4);
  }
  return result;
}

uint64_t AutoShortcutAppPhrasesViewModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74756374726F6873 && a2 == 0xEF73657361726850;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x736172685078616DLL && a2 == 0xEA00000000007365;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x74706D6F7270 && a2 == 0xE600000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000012 && a2 == 0x80000000002298E0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0x65746F6E746F6F66 && a2 == 0xED00006C6562614CLL)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 5;
          }
          else {
            return 6;
          }
        }
      }
    }
  }
}

unint64_t AutoShortcutAppPhrasesViewModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x74756374726F6873;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x736172685078616DLL;
      break;
    case 2:
      unint64_t result = 0x6449656C646E7562;
      break;
    case 3:
      unint64_t result = 0x74706D6F7270;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x65746F6E746F6F66;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AutoShortcutAppPhrasesViewModel.CodingKeys()
{
  return AutoShortcutAppPhrasesViewModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutoShortcutAppPhrasesViewModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = AutoShortcutAppPhrasesViewModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutoShortcutAppPhrasesViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutoShortcutAppPhrasesViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AutoShortcutAppPhrasesViewModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutoShortcutAppPhrasesViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  char v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = *v3;
  v12[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v12[6] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[5] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[4] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[3] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    void v12[2] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }
  return result;
}

uint64_t AutoShortcutAppPhrasesViewModel.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutoShortcutAppPhrasesViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  char v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  char v39 = 0;
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = v40;
  char v38 = 1;
  swift_bridgeObjectRetain();
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
  char v37 = 2;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v33 = v13;
  uint64_t v30 = v12;
  char v36 = 3;
  swift_bridgeObjectRetain();
  uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
  char v35 = 4;
  uint64_t v32 = v14;
  swift_bridgeObjectRetain();
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v28 = v15;
  char v34 = 5;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v18 = v17;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v26 = v16;
  v19(v10, v5);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v20 = v28;
  swift_bridgeObjectRelease();
  uint64_t v21 = v32;
  swift_bridgeObjectRelease();
  uint64_t v22 = v33;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v24 = v31;
  *a2 = v11;
  a2[1] = v24;
  a2[2] = v30;
  a2[3] = v22;
  a2[4] = v29;
  a2[5] = v21;
  a2[6] = v27;
  a2[7] = v20;
  a2[8] = v26;
  a2[9] = v18;
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *protocol witness for Decodable.init(from:) in conformance AutoShortcutAppPhrasesViewModel@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)AutoShortcutAppPhrasesViewModel.init(from:)(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x50uLL);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutoShortcutAppPhrasesViewModel(void *a1)
{
  return AutoShortcutAppPhrasesViewModel.encode(to:)(a1);
}

uint64_t destroy for AutoShortcutAppPhrasesViewModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AutoShortcutAppPhrasesViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AutoShortcutAppPhrasesViewModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for AutoShortcutAppPhrasesViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutAppPhrasesViewModel(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutAppPhrasesViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutAppPhrasesViewModel()
{
  return &type metadata for AutoShortcutAppPhrasesViewModel;
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutAppPhrasesViewModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x13E004);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AutoShortcutAppPhrasesViewModel.CodingKeys()
{
  return &unk_28D6D0;
}

uint64_t OUTLINED_FUNCTION_0_26()
{
  return v0;
}

uint64_t key path setter for ShortcutsHandoffFlow.state : ShortcutsHandoffFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShortcutsHandoffFlow.State(0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ShortcutsHandoffFlow.State(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 96))(v6);
}

uint64_t ShortcutsHandoffFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin20ShortcutsHandoffFlow_state;
  swift_beginAccess();
  return outlined init with copy of ShortcutsHandoffFlow.State(v3, a1);
}

uint64_t outlined init with copy of ShortcutsHandoffFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShortcutsHandoffFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ShortcutsHandoffFlow.State(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for ShortcutsHandoffFlow.State);
}

uint64_t ShortcutsHandoffFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin20ShortcutsHandoffFlow_state;
  swift_beginAccess();
  outlined assign with take of ShortcutsHandoffFlow.State(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of ShortcutsHandoffFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShortcutsHandoffFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ShortcutsHandoffFlow.state.modify())()
{
  return static LocaleUtils.intentBundleCache.modify;
}

BOOL ShortcutsHandoffFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShortcutsHandoffFlow.State(0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v13 - v6;
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v8 + 88))();
  uint64_t v9 = type metadata accessor for Input();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 2, v9);
  if (EnumTagSinglePayload == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v5, a1, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 2, v9);
    OUTLINED_FUNCTION_16_5();
    (*(void (**)(char *))(v11 + 96))(v5);
  }
  else
  {
    outlined destroy of ShortcutsHandoffFlow.State((uint64_t)v7);
  }
  return EnumTagSinglePayload == 1;
}

uint64_t outlined destroy of ShortcutsHandoffFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShortcutsHandoffFlow.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ShortcutsHandoffFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentityCheckFlowStrategy.HandoffConfiguration?);
  v1[7] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for UserIdentityCheckFlowStrategy();
  v1[8] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[9] = v4;
  v1[10] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for ExecuteOnRemoteDeviceSpecification();
  v1[11] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[12] = v6;
  v1[13] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for UserIdentityCheckFlowStrategy.HandoffConfiguration();
  v1[14] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[15] = v8;
  v1[16] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for CompanionDeviceInfoRequirement();
  v1[17] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[18] = v10;
  v1[19] = OUTLINED_FUNCTION_25();
  type metadata accessor for ShortcutsHandoffFlow.State(0);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Input();
  v1[22] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[23] = v12;
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  return _swift_task_switch(ShortcutsHandoffFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v3 + 88))();
  if (__swift_getEnumTagSinglePayload(v2, 2, v1))
  {
    outlined destroy of ShortcutsHandoffFlow.State(v0[21]);
    static ExecuteResponse.complete()();
  }
  else
  {
    uint64_t v4 = v0[22];
    uint64_t v5 = v0[20];
    uint64_t v7 = v0[18];
    uint64_t v6 = v0[19];
    uint64_t v8 = v0[17];
    uint64_t v27 = v0[16];
    uint64_t v28 = v0[25];
    uint64_t v21 = v0[15];
    uint64_t v22 = v0[14];
    uint64_t v9 = v0[12];
    uint64_t v17 = v0[13];
    uint64_t v18 = v0[11];
    uint64_t v19 = v0[24];
    uint64_t v23 = v0[10];
    uint64_t v25 = v0[9];
    uint64_t v26 = v0[8];
    uint64_t v10 = v0[6];
    uint64_t v20 = v0[7];
    uint64_t v24 = v0[23];
    (*(void (**)(void))(v24 + 32))();
    __swift_storeEnumTagSinglePayload(v5, 2, 2, v4);
    (*(void (**)(uint64_t))(*(void *)v10 + 96))(v5);
    type metadata accessor for CompanionCompatibilityCheckFlowStrategy();
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for CompanionDeviceInfoRequirement.supportsPeerToPeerHandoff(_:), v8);
    static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    type metadata accessor for SimpleHandoffStrategy();
    swift_allocObject();
    lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy(&lazy protocol witness table cache variable for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy, v11, (void (*)(uint64_t))type metadata accessor for SimpleHandoffStrategy);
    swift_retain();
    UserIdentityCheckFlowStrategy.HandoffConfiguration.init(companionCompatiblityCheck:handoffStrategy:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v19, v28, v4);
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v17, enum case for ExecuteOnRemoteDeviceSpecification.userCompanion(_:), v18);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for ExecuteOnRemoteFlow();
    swift_allocObject();
    v0[2] = ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
    uint64_t v12 = type metadata accessor for CommonFlowGuard();
    OUTLINED_FUNCTION_1_0(v12);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_2138B0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v27, v22);
    __swift_storeEnumTagSinglePayload(v20, 0, 1, v22);
    UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffConfiguration:requireSpeechProfile:)();
    static CommonFlowGuard.ensuringUserIdentity(using:)();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v26);
    static CommonFlowGuard.ensuringPersonalRequestsAreEnabledWhenApplicable.getter();
    static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)();
    uint64_t v13 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
    swift_bridgeObjectRelease();
    v0[3] = v13;
    type metadata accessor for GuardFlow();
    uint64_t v14 = Flow.guarded<A>(by:)();
    swift_release();
    swift_release();
    v0[4] = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    lazy protocol witness table accessor for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>();
    Flow.eraseToAnyFlow()();
    swift_release();
    static ExecuteResponse.complete(next:)();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v27, v22);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v4);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t type metadata accessor for SimpleHandoffStrategy()
{
  return self;
}

uint64_t ShortcutsHandoffFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t ShortcutsHandoffFlow.deinit()
{
  outlined destroy of ShortcutsHandoffFlow.State(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin20ShortcutsHandoffFlow_state);
  return v0;
}

uint64_t ShortcutsHandoffFlow.__deallocating_deinit()
{
  outlined destroy of ShortcutsHandoffFlow.State(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin20ShortcutsHandoffFlow_state);

  return swift_deallocClassInstance();
}

uint64_t ShortcutsHandoffFlow.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin20ShortcutsHandoffFlow_state;
  uint64_t v2 = type metadata accessor for Input();
  __swift_storeEnumTagSinglePayload(v1, 1, 2, v2);
  return v0;
}

uint64_t ShortcutsHandoffFlow.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin20ShortcutsHandoffFlow_state;
  uint64_t v2 = type metadata accessor for Input();
  __swift_storeEnumTagSinglePayload(v1, 1, 2, v2);
  return v0;
}

uint64_t protocol witness for Flow.on(input:) in conformance ShortcutsHandoffFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ShortcutsHandoffFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for Flow.execute() in conformance ShortcutsHandoffFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 120) + **(int **)(**(void **)v1 + 120));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance ListShortcutsFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ShortcutsHandoffFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ShortcutsHandoffFlow(0);

  return Flow<>.exitValue.getter(v3, a2);
}

unint64_t lazy protocol witness table accessor for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>;
  if (!lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>);
  }
  return result;
}

uint64_t type metadata accessor for ShortcutsHandoffFlow(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for ShortcutsHandoffFlow);
}

uint64_t lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse() in conformance SimpleHandoffStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance ListShortcutsFlow;
  return HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse()(a1, a2, a3);
}

uint64_t sub_13F1B0()
{
  OUTLINED_FUNCTION_16_5();
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t ObjC metadata update function for ShortcutsHandoffFlow()
{
  return type metadata accessor for ShortcutsHandoffFlow(0);
}

uint64_t type metadata completion function for ShortcutsHandoffFlow()
{
  uint64_t result = type metadata accessor for ShortcutsHandoffFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShortcutsHandoffFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for Input();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for ShortcutsHandoffFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for ShortcutsHandoffFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for ShortcutsHandoffFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 2, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for ShortcutsHandoffFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for ShortcutsHandoffFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 2, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShortcutsHandoffFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13F834);
}

uint64_t sub_13F834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Input();
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 3) {
    return EnumTagSinglePayload - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ShortcutsHandoffFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13F890);
}

uint64_t sub_13F890(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for Input();

  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for ShortcutsHandoffFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();

  return __swift_getEnumTagSinglePayload(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for ShortcutsHandoffFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Input();

  return __swift_storeEnumTagSinglePayload(a1, a2, 2, v4);
}

uint64_t type metadata completion function for ShortcutsHandoffFlow.State()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)()
{
  OUTLINED_FUNCTION_7_29();
  OUTLINED_FUNCTION_0_2();
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v10 = OUTLINED_FUNCTION_1_28(v2, v3, v4, v5, v6, v7, v8, v9, v17);
  v11(v10);
  OUTLINED_FUNCTION_5_26();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = OUTLINED_FUNCTION_3_29(v12);
  v14(v13);
  id v15 = v0;
  return Transformer.init(transform:)();
}

uint64_t closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a1;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v5);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, CustomIntentDisambiguationItem>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v7 = v6;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v29 - v12;
  if (!a2) {
    goto LABEL_6;
  }
  self;
  uint64_t v14 = swift_dynamicCastObjCClass();
  if (!v14) {
    goto LABEL_6;
  }
  id v15 = (void *)v14;
  id v16 = a2;
  if (objc_msgSend(v15, "valueType", v29) != (char *)&stru_20.vmsize + 1)
  {

LABEL_6:
    uint64_t v23 = OUTLINED_FUNCTION_4_28();
    v24(v23);
    swift_allocObject();
    OUTLINED_FUNCTION_6_30();
    v25();
    Transformer.init(transform:)();
    uint64_t v26 = v30;
    uint64_t v27 = (void (*)(uint64_t))Transformer.transform.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v26);
    v27(v32);
    return swift_release();
  }
  uint64_t v17 = OUTLINED_FUNCTION_4_28();
  v18(v17);
  *(void *)(swift_allocObject() + 16) = v15;
  OUTLINED_FUNCTION_6_30();
  v19();
  id v20 = v16;
  Transformer.init(transform:)();
  uint64_t v21 = v30;
  uint64_t v22 = (void (*)(uint64_t))Transformer.transform.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v21);
  v22(v32);

  return swift_release();
}

uint64_t _s13SiriUtilities11TransformerV0A14LinkFlowPluginypRszAD30CustomIntentDisambiguationItemVRs_rlE014disambiguationjC017attributeMetadata6localeACyypAFGSo18INCodableAttributeCSg_10Foundation6LocaleVtFZAFypKcfU_TA_0(uint64_t a1)
{
  return partial apply for closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:));
}

uint64_t static Transformer<>.enumTransformer(attribute:locale:)()
{
  OUTLINED_FUNCTION_7_29();
  OUTLINED_FUNCTION_0_2();
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v10 = OUTLINED_FUNCTION_1_28(v2, v3, v4, v5, v6, v7, v8, v9, v17);
  v11(v10);
  OUTLINED_FUNCTION_5_26();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = OUTLINED_FUNCTION_3_29(v12);
  v14(v13);
  id v15 = v0;
  return Transformer.init(transform:)();
}

uint64_t static Transformer<>.valueTransformer(locale:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_7_29();
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v1);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return Transformer.init(transform:)();
}

uint64_t closure #1 in static Transformer<>.enumTransformer(attribute:locale:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v54 = a3;
  uint64_t v45 = a4;
  uint64_t v41 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v41 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v41);
  unint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, CustomIntentDisambiguationItem>);
  uint64_t v42 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Locale.Language();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  __chkstk_darwin(v14 - 8);
  id v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult);
  uint64_t v40 = a1;
  uint64_t v43 = v17;
  id v18 = static INIntentResolutionResult.getCodableEnumValueFromAny(item:attribute:)(a1, v44);
  uint64_t v19 = v54;
  uint64_t v44 = v18;
  if (v18)
  {
    char v37 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    char v38 = v9;
    Locale.language.getter();
    Locale.Language.languageCode.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v20 = type metadata accessor for Locale.LanguageCode();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v20) == 1)
    {
      outlined destroy of Locale.LanguageCode?((uint64_t)v16);
      uint64_t v21 = 0xE200000000000000;
      uint64_t v22 = 28261;
    }
    else
    {
      uint64_t v22 = Locale.LanguageCode.identifier.getter();
      uint64_t v21 = v23;
      (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v16, v20);
    }
    uint64_t v24 = v44;
    id v25 = [v44 index];
    unint64_t v26 = static INIntentResolutionResult.getSynonymsForEnum(enumValue:language:)(v24, v22, v21);
    v47[0] = v25;
    v47[1] = v26;
    char v48 = 0;
    uint64_t v27 = outlined bridged method (mbnb) of @objc INCodableEnumValue.localizedDisplayName(forLanguage:)(v22, v21, v24);
    if (v28)
    {
      uint64_t v29 = v45;
LABEL_8:
      *(void *)&long long v49 = v27;
      *((void *)&v49 + 1) = v28;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v53 = _swiftEmptyArrayStorage;
      outlined init with copy of CustomIntentDisambiguationRawValue((uint64_t)v47, (uint64_t)v46);
      CustomIntentDisambiguationItem.init(component:rawValue:)(&v49, (uint64_t)v46, v29);

      return outlined destroy of CustomIntentDisambiguationRawValue((uint64_t)v47);
    }
    uint64_t v27 = outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(v24);
    uint64_t v29 = v45;
    if (v28) {
      goto LABEL_8;
    }
    outlined destroy of CustomIntentDisambiguationRawValue((uint64_t)v47);

    uint64_t v9 = v38;
    uint64_t v19 = v54;
    unint64_t v7 = v37;
  }
  uint64_t v31 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v19, v41);
  unint64_t v32 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v33 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v33 + v32, v7, v31);
  Transformer.init(transform:)();
  uint64_t v34 = v39;
  char v35 = (void (*)(uint64_t))Transformer.transform.getter();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v34);
  v35(v40);
  return swift_release();
}

uint64_t partial apply for closure #1 in static Transformer<>.enumTransformer(attribute:locale:)(uint64_t a1)
{
  return partial apply for closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))closure #1 in static Transformer<>.enumTransformer(attribute:locale:));
}

uint64_t closure #1 in static Transformer<>.valueTransformer(locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  static Transformer<>.getDisambiguationItemComponent(value:locale:)(a1, a2, (uint64_t)v7);
  outlined init with copy of Any(a1, (uint64_t)v6);
  v6[32] = 1;
  return CustomIntentDisambiguationItem.init(component:rawValue:)(v7, (uint64_t)v6, a3);
}

uint64_t partial apply for closure #1 in static Transformer<>.valueTransformer(locale:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return partial apply for closure #1 in static Transformer<>.valueTransformer(locale:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_2_31(v5);
  return closure #1 in static Transformer<>.valueTransformer(locale:)(a1, v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a2);
}

double static Transformer<>.getDisambiguationItemComponent(value:locale:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v26[-1] - v11;
  outlined init with copy of Any(a1, (uint64_t)v29);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringLocalizable);
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast())
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
      static Transformer<>.ItemTypeHandlers.measurement(input:locale:)((uint64_t *)v30);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    else
    {
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INObject);
      if (swift_dynamicCast())
      {
        uint64_t v20 = v26[0];
        static Transformer<>.ItemTypeHandlers.customObject(input:locale:)(v26[0], (uint64_t *)v30);
      }
      else
      {
        type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          uint64_t v22 = *(void **)&v30[0];
          id v23 = [*(id *)&v30[0] stringValue];
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v17 = v24;

          goto LABEL_3;
        }
        if (swift_dynamicCast())
        {
          uint64_t v18 = 0;
          unint64_t v17 = *((void *)&v30[0] + 1);
          uint64_t v15 = *(void *)&v30[0];
          goto LABEL_4;
        }
        type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSDateComponents);
        if (!swift_dynamicCast())
        {
          if (!swift_dynamicCast())
          {
            uint64_t v15 = 0;
            uint64_t v18 = 0;
            long long v25 = 0u;
            uint64_t v19 = _swiftEmptyArrayStorage;
            unint64_t v17 = 0xE000000000000000;
            goto LABEL_11;
          }
          static Transformer<>.ItemTypeHandlers.object(input:locale:)(v26[0], (uint64_t *)v30);
          swift_unknownObjectRelease();
          goto LABEL_10;
        }
        uint64_t v20 = v26[0];
        static Transformer<>.ItemTypeHandlers.date(input:locale:)((uint64_t *)v30);
      }
    }
LABEL_10:
    uint64_t v18 = v31;
    uint64_t v19 = v32;
    long long v25 = v30[1];
    unint64_t v17 = *((void *)&v30[0] + 1);
    uint64_t v15 = *(void *)&v30[0];
    goto LABEL_11;
  }
  outlined init with take of AceServiceInvokerAsync(v30, (uint64_t)v26);
  uint64_t v13 = v27;
  uint64_t v14 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 8))(a2, v13, v14);
  unint64_t v17 = v16;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
LABEL_3:
  uint64_t v18 = 0;
LABEL_4:
  long long v25 = 0u;
  uint64_t v19 = _swiftEmptyArrayStorage;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v17;
  double result = *(double *)&v25;
  *(_OWORD *)(a3 + 16) = v25;
  *(void *)(a3 + 32) = v18;
  *(void *)(a3 + 40) = v19;
  return result;
}

void static Transformer<>.ItemTypeHandlers.measurement(input:locale:)(uint64_t *a1@<X8>)
{
  id v2 = [objc_allocWithZone((Class)NSMeasurementFormatter) init];
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  [v2 setLocale:isa];

  [v2 setUnitOptions:1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  NSMeasurement v9 = Measurement._bridgeToObjectiveC()();
  Class v4 = v9.super.isa;
  id v5 = objc_msgSend(v2, "stringFromMeasurement:", v9.super.isa, v9._doubleValue);

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *a1 = v6;
  a1[1] = v8;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = (uint64_t)_swiftEmptyArrayStorage;
}

void static Transformer<>.ItemTypeHandlers.customObject(input:locale:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale.Language();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.language.getter();
  Locale.Language.languageCode.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v11 = type metadata accessor for Locale.LanguageCode();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11) == 1)
  {
    outlined destroy of Locale.LanguageCode?((uint64_t)v10);
    uint64_t v12 = 0xE200000000000000;
    uint64_t v13 = 28261;
  }
  else
  {
    uint64_t v13 = Locale.LanguageCode.identifier.getter();
    uint64_t v12 = v14;
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  id v15 = objc_allocWithZone((Class)INStringLocalizer);
  id v16 = @nonobjc INStringLocalizer.init(languageCode:)(v13, v12);
  id v17 = objc_msgSend(a1, "_intents_readableTitleWithLocalizer:", v16);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  id v22 = objc_msgSend(a1, "_intents_readableSubtitleWithLocalizer:", v16);
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v26 = 0;
  }
  id v27 = [a1 displayImage];

  *a2 = v19;
  a2[1] = v21;
  a2[2] = v24;
  a2[3] = v26;
  a2[4] = (uint64_t)v27;
  a2[5] = (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t static Transformer<>.ItemTypeHandlers.date(input:locale:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale.Language();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.language.getter();
  Locale.Language.languageCode.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = type metadata accessor for Locale.LanguageCode();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13) == 1)
  {
    outlined destroy of Locale.LanguageCode?((uint64_t)v12);
  }
  else
  {
    Locale.LanguageCode.identifier.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  }
  Locale.init(identifier:)();
  uint64_t v14 = NSDateComponents.toRelativeLocalizedString(locale:)();
  unint64_t v16 = v15;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v16) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = 0xE000000000000000;
  if (v16) {
    unint64_t v19 = v16;
  }
  *a1 = v18;
  a1[1] = v19;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

void static Transformer<>.ItemTypeHandlers.object(input:locale:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale.Language();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.language.getter();
  Locale.Language.languageCode.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v11 = type metadata accessor for Locale.LanguageCode();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11) == 1)
  {
    outlined destroy of Locale.LanguageCode?((uint64_t)v10);
    uint64_t v12 = 0xE200000000000000;
    uint64_t v13 = 28261;
  }
  else
  {
    uint64_t v13 = Locale.LanguageCode.identifier.getter();
    uint64_t v12 = v14;
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  id v15 = objc_allocWithZone((Class)INStringLocalizer);
  id v16 = @nonobjc INStringLocalizer.init(languageCode:)(v13, v12);
  id v17 = objc_msgSend(a1, "_intents_readableTitleWithLocalizer:", v16);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    unint64_t v21 = 0xE000000000000000;
  }

  *a2 = v19;
  a2[1] = v21;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t outlined destroy of Locale.LanguageCode?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id @nonobjc INStringLocalizer.init(languageCode:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithLanguageCode:v3];

  return v4;
}

uint64_t outlined bridged method (mbnb) of @objc INCodableEnumValue.localizedDisplayName(forLanguage:)(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [a3 localizedDisplayNameForLanguage:v4];

  if (!v5) {
    return 0;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t outlined destroy of CustomIntentDisambiguationRawValue(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of CustomIntentDisambiguationRawValue(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v1 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t partial apply for closure #1 in static Transformer<>.disambiguationItemTransformer(attributeMetadata:locale:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  uint64_t v5 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_2_31(v5);
  return a2(a1, *(void *)(v2 + 16), v2 + ((*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
}

char *OUTLINED_FUNCTION_1_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_2_31(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_3_29(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return a1 + v2;
}

uint64_t OUTLINED_FUNCTION_4_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_29()
{
  return type metadata accessor for Locale();
}

void *static INIntentParameterHelper.removeParameterValue<A>(_:_:)(void *a1, uint64_t a2, unint64_t a3)
{
  memset(v5, 0, sizeof(v5));
  static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)(a1, a2, a3, (uint64_t)v5, 0, 1);
  outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
  return a1;
}

double static INIntentParameterHelper.extractParameterValue(_:_:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  specialized static INIntentParameterHelper.makeParameterKey<A>(_:_:)(a1, a2, a3);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [a1 valueForKeyPath:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t specialized static INIntentParameterHelper.makeParameterKey<A>(_:_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  NSString v6 = (void *)specialized static INIntentParameterHelper.makeParameterDescription<A>(_:_:)(a1, a2, a3);
  id v7 = [v6 facadePropertyName];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    id v10 = a1;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t type = v12;
      uint64_t v13 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, (unint64_t)a3, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      id v14 = [v10 typeName];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v11, type, "Cannot get a key for parameter: %s on intent type: %s. Will use parameterName instead. This may result in a crash.", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[39] = a5;
  unsigned char v6[40] = a6;
  v6[37] = a3;
  v6[38] = a4;
  v6[35] = a1;
  v6[36] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v6[41] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
  v6[42] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v6[43] = v8;
  v6[44] = swift_task_alloc();
  v6[45] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v6[46] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v6[47] = v10;
  v6[48] = swift_task_alloc();
  return _swift_task_switch(static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:), 0, 0);
}

uint64_t static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:)()
{
  uint64_t v81 = v0;
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 328);
  USOParse.userParse.getter();
  uint64_t v4 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  uint64_t v5 = *(void (**)(uint64_t))(v2 + 8);
  uint64_t v6 = OUTLINED_FUNCTION_12_29();
  v5(v6);
  specialized Collection.first.getter(v4, v3);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v3, 1, v1) == 1)
  {
    outlined destroy of URL?(*(void *)(v0 + 328), &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    OUTLINED_FUNCTION_45_7();
    if (!v41) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_23_0(&dword_0, v10, v11, "No UDA found in USO parse");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v12 = *(_OWORD **)(v0 + 280);

    *uint64_t v12 = 0u;
    v12[1] = 0u;
    goto LABEL_40;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 376) + 32))(*(void *)(v0 + 384), *(void *)(v0 + 328), *(void *)(v0 + 368));
  USOParse.userParse.getter();
  uint64_t v13 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  uint64_t v14 = OUTLINED_FUNCTION_12_29();
  v5(v14);
  unint64_t v15 = *(void *)(v13 + 16);
  swift_bridgeObjectRelease();
  if (v15 >= 2)
  {
    OUTLINED_FUNCTION_45_7();
    if (!v41) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_0, v17, v18, "More than one task found in UDA", v19, 2u);
      OUTLINED_FUNCTION_7_0();
    }
  }
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v20 = *(void *)(v0 + 312);
  id v22 = [*(id *)(v0 + 288) _codableDescription];
  id v23 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byKeyPath:)(v21, v20, v22);
  *(void *)(v0 + 392) = v23;

  if (!v23) {
    goto LABEL_31;
  }
  self;
  if (OUTLINED_FUNCTION_11_29())
  {
    uint64_t v24 = Siri_Nlu_External_UserDialogAct.stringValue.getter();
    static INIntentParameterHelper.buildCustomObjectValueDictionary(attribute:value:)(v23, v24, v25, *(void *)(v0 + 280));

    swift_bridgeObjectRelease();
    uint64_t v26 = OUTLINED_FUNCTION_30();
    v27(v26);
    goto LABEL_40;
  }
  self;
  if (OUTLINED_FUNCTION_11_29())
  {
    OUTLINED_FUNCTION_45_7();
    if (!v41) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_23_0(&dword_0, v31, v32, "Received needsValue for an enum parameter, this is unexpected");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v33 = *(_OWORD **)(v0 + 280);

    uint64_t v34 = OUTLINED_FUNCTION_30();
    v35(v34);
    *uint64_t v33 = 0u;
    v33[1] = 0u;
    goto LABEL_40;
  }
  self;
  if (!OUTLINED_FUNCTION_11_29())
  {
LABEL_31:
    OUTLINED_FUNCTION_45_7();
    if (!v41) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.voiceCommands);
    id v44 = v23;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      id v47 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v80 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)id v47 = 136315138;
      if (v23) {
        id v48 = [v44 valueType];
      }
      else {
        id v48 = 0;
      }
      *(void *)(v0 + 240) = v48;
      *(unsigned char *)(v0 + 248) = v23 == 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INIntentSlotValueType?);
      uint64_t v49 = String.init<A>(describing:)();
      *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v45, v46, "SiriLinkFlow received INCodableAttribute of type: %s", v47, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
    uint64_t v51 = Siri_Nlu_External_UserDialogAct.stringValue.getter();
    uint64_t v55 = v52;
    uint64_t v56 = *(void *)(v0 + 280);
    if (v52)
    {
      uint64_t v57 = v51;
      *(void *)(v56 + 24) = &type metadata for String;

      *(void *)uint64_t v56 = v57;
      *(void *)(v56 + 8) = v55;
      uint64_t v58 = OUTLINED_FUNCTION_21_6();
      v59(v58);
    }
    else
    {

      uint64_t v60 = OUTLINED_FUNCTION_21_6();
      v61(v60);
      *(_OWORD *)uint64_t v56 = 0u;
      *(_OWORD *)(v56 + 16) = 0u;
    }
LABEL_40:
    OUTLINED_FUNCTION_8_25();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_2_1();
    __asm { BRAA            X1, X16 }
  }
  self;
  uint64_t v36 = OUTLINED_FUNCTION_11_29();
  if (!v36)
  {
    uint64_t v62 = *(_OWORD **)(v0 + 280);

    uint64_t v63 = OUTLINED_FUNCTION_21_6();
    v64(v63);
    _OWORD *v62 = 0u;
    v62[1] = 0u;
    goto LABEL_40;
  }
  char v37 = (void *)v36;
  id v38 = v23;
  uint64_t v39 = outlined bridged method (ob) of @objc INCodableObjectAttribute.typeName.getter(v37);
  if (!v40)
  {
LABEL_30:
    [v37 valueType];
    goto LABEL_48;
  }
  BOOL v41 = v39 == 0x6E61656C6F6F42 && v40 == 0xE700000000000000;
  if (!v41)
  {
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v42) {
      goto LABEL_48;
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
LABEL_48:
  *(void *)(v0 + 40) = type metadata accessor for LocationResolver();
  *(void *)(v0 + 48) = &protocol witness table for LocationResolver;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  LocationResolver.init()();
  static AceService.currentAsync.getter();
  uint64_t v65 = type metadata accessor for LocationProvider();
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = 0x3FA999999999999ALL;
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 96), v66 + 24);
  *(void *)(v0 + 160) = v65;
  *(void *)(v0 + 168) = &protocol witness table for LocationProvider;
  *(void *)(v0 + 136) = v66;
  *(void *)(v0 + 80) = type metadata accessor for DateTimeResolver();
  *(void *)(v0 + 88) = &protocol witness table for DateTimeResolver;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 56));
  DateTimeResolver.init()();
  uint64_t v67 = type metadata accessor for ContactResolver();
  swift_allocObject();
  uint64_t v68 = ContactResolver.init()();
  *(void *)(v0 + 200) = v67;
  *(void *)(v0 + 208) = &protocol witness table for ContactResolver;
  *(void *)(v0 + 176) = v68;
  uint64_t v69 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v69;
  *uint64_t v69 = v0;
  v69[1] = static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:);
  OUTLINED_FUNCTION_2_1();
  return INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)(v70, v71, v72, v73, v74, v75, v76, v77);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v2 = *(void *)v1 + 16;
  uint64_t v3 = *(void *)v1 + 56;
  uint64_t v4 = *(void *)v1 + 136;
  uint64_t v5 = *(void *)v1 + 176;
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v5);
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  if (v0) {
    uint64_t v6 = static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:);
  }
  else {
    uint64_t v6 = static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:);
  }
  return _swift_task_switch(v6, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[48];
  uint64_t v2 = (void *)v0[49];
  uint64_t v3 = v0[46];
  uint64_t v4 = v0[47];

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  OUTLINED_FUNCTION_8_25();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

void static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 384);
  uint64_t v6 = *(void **)(v0 + 392);
  uint64_t v7 = *(void *)(v0 + 368);
  uint64_t v8 = *(void *)(v0 + 376);
  if (v4)
  {
    uint64_t v16 = *(void *)(v0 + 368);
    unint64_t v15 = *(void **)(v0 + 392);
    os_log_type_t v9 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v17 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)os_log_type_t v9 = 136315138;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "Could not extract parameter values from USO parse %s", v9, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v16);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v7);
  }
  uint64_t v12 = *(_OWORD **)(v0 + 280);
  *uint64_t v12 = 0u;
  v12[1] = 0u;
  OUTLINED_FUNCTION_8_25();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_2_1();
  __asm { BRAA            X1, X16 }
}

double static INIntentParameterHelper.buildCustomObjectValueDictionary(attribute:value:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1)
  {
    if ([a1 valueType] == (char *)&stru_B8.size + 1)
    {
      self;
      if (swift_dynamicCastObjCClass())
      {
        if (a3)
        {
          uint64_t v8 = a1;
          swift_bridgeObjectRetain();
          if ((INCodableAttribute.supportsMultipleValues.getter() & 1) == 0)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_212160;
            strcpy((char *)(inited + 32), "displayString");
            *(_WORD *)(inited + 46) = -4864;
            *(void *)(inited + 48) = a2;
            *(void *)(inited + 56) = a3;
            uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
            *(void *)(a4 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);

            *(void *)a4 = v15;
            return result;
          }
          swift_bridgeObjectRelease();
          if (one-time initialization token for voiceCommands != -1) {
            swift_once();
          }
          uint64_t v9 = type metadata accessor for Logger();
          __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
          uint64_t v10 = Logger.logObject.getter();
          os_log_type_t v11 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v10, v11))
          {
            uint64_t v12 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v12 = 0;
            _os_log_impl(&dword_0, v10, v11, "SiriLinkFlow does not support parsing multiple values", v12, 2u);
            swift_slowDealloc();
            uint64_t v13 = v8;
          }
          else
          {
            uint64_t v13 = v10;
            uint64_t v10 = v8;
          }
        }
      }
    }
  }
  double result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

id static INIntentParameterHelper.applyParameterValue(_:_:_:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)(a1, a2, a3, a4, 0, 1);
}

id static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  id v88 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v83 - v15;
  uint64_t v17 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_12_1();
  uint64_t v87 = v18;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = (void *)OUTLINED_FUNCTION_4_29();
  static INIntentParameterHelper.extractParameterValue(_:_:)(v22, v23, v24, v25);
  uint64_t v26 = *(void *)(a4 + 24);
  outlined init with copy of SpeakableString?((uint64_t)v95, (uint64_t)v93, &demangling cache variable for type metadata for Any?);
  if (!(v26 | v94))
  {
    outlined destroy of URL?((uint64_t)v93, &demangling cache variable for type metadata for Any?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (_DWORD *)OUTLINED_FUNCTION_25_2();
      v92[0] = OUTLINED_FUNCTION_22_3();
      *uint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      v90[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_38_7(&dword_0, v30, v31, "Parameter '%s' value is already nil. Nothing to do");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    goto LABEL_27;
  }
  v84 = v14;
  uint64_t v85 = v17;
  outlined destroy of URL?((uint64_t)v93, &demangling cache variable for type metadata for Any?);
  uint64_t v32 = (void *)OUTLINED_FUNCTION_4_29();
  uint64_t v86 = specialized static INIntentParameterHelper.makeParameterKey<A>(_:_:)(v32, v33, v34);
  unint64_t v36 = v35;
  char v37 = (void *)OUTLINED_FUNCTION_4_29();
  uint64_t v40 = (void *)specialized static INIntentParameterHelper.makeParameterDescription<A>(_:_:)(v37, v38, v39);
  BOOL v41 = v40;
  if ((a6 & 1) != 0 || [v40 valueStyle] != (char *)&dword_0 + 3)
  {
    if ([v41 valueStyle] == (char *)&dword_0 + 3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_212160;
      outlined init with copy of SpeakableString?(a4, v46 + 32, &demangling cache variable for type metadata for Any?);
      v92[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
      v92[0] = v46;
    }
    else
    {
      outlined init with copy of SpeakableString?(a4, (uint64_t)v92, &demangling cache variable for type metadata for Any?);
    }
  }
  else
  {
    char v42 = (void *)OUTLINED_FUNCTION_4_29();
    specialized static INIntentParameterHelper.makeUpdatedMulticardinalValue<A>(_:_:_:_:)(v42, v43, v44, a4, a5, v45);
  }
  uint64_t v47 = v86;
  if (![v41 isEnum])
  {
    outlined init with copy of SpeakableString?((uint64_t)v92, (uint64_t)v90, &demangling cache variable for type metadata for Any?);
    uint64_t v54 = v91;
    if (v91)
    {
      __swift_project_boxed_opaque_existential_1(v90, v91);
      OUTLINED_FUNCTION_12_1();
      uint64_t v56 = v55;
      __chkstk_darwin(v57);
      uint64_t v59 = (char *)&v83 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v56 + 16))(v59);
      uint64_t v60 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v59, v54);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v90);
    }
    else
    {
      uint64_t v60 = 0;
    }
    v61.super.super.Class isa = (Class)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v88 setValue:v60 forKey:v61.super.super.isa];
    swift_unknownObjectRelease();
LABEL_26:

    outlined destroy of URL?((uint64_t)v92, &demangling cache variable for type metadata for Any?);
LABEL_27:
    outlined destroy of URL?((uint64_t)v95, &demangling cache variable for type metadata for Any?);
    id v63 = v88;
    return v63;
  }
  outlined init with copy of SpeakableString?((uint64_t)v92, (uint64_t)v90, &demangling cache variable for type metadata for Any?);
  uint64_t v48 = v91;
  outlined destroy of URL?((uint64_t)v90, &demangling cache variable for type metadata for Any?);
  if (!v48)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v85, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (_DWORD *)OUTLINED_FUNCTION_25_2();
      v90[0] = OUTLINED_FUNCTION_22_3();
      _DWORD *v51 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v36, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_38_7(&dword_0, v52, v53, "Setting enum value for '%s' to rawValue=0. If this is not your default value then implement the code to remove values in your domain code.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v61.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    NSString v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v88 setValue:v61.super.super.isa forKey:v62];

    BOOL v41 = v62;
    goto LABEL_26;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v65 = (void *)__swift_project_value_buffer(v85, (uint64_t)static Logger.voiceCommands);
  id v66 = v88;
  swift_bridgeObjectRetain();
  id v67 = v66;
  id v88 = v65;
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    v90[0] = v83;
    *(_DWORD *)uint64_t v70 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v36, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v70 + 12) = 2080;
    uint64_t v86 = v70 + 14;
    id v71 = [v67 typeName];
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v74 = v73;

    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v74, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v68, v69, "\nCannot generically set enumerated values due to incompatibilities between Swift and Objective-C.\nIf you are seeing this message please implement the code to apply values for parameter '%s' on intent type '%s' in your domain code.\nYou can use the typed setters on the intent to set enum types rather than using 'setValue'.", (uint8_t *)v70, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v75 = *(void (**)(char *, id, uint64_t))(v87 + 16);
  uint64_t v76 = v85;
  v75(v21, v88, v85);
  v75(v16, v21, v76);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v76);
  uint64_t v77 = (uint64_t)v84;
  outlined init with copy of SpeakableString?((uint64_t)v16, (uint64_t)v84, &demangling cache variable for type metadata for Logger?);
  if (__swift_getEnumTagSinglePayload(v77, 1, v76) == 1)
  {
    outlined destroy of URL?((uint64_t)v84, &demangling cache variable for type metadata for Logger?);
  }
  else
  {
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = OUTLINED_FUNCTION_22_3();
      v90[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 136315650;
      uint64_t v81 = StaticString.description.getter();
      uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v80 + 12) = 2048;
      uint64_t v89 = 106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v80 + 22) = 2080;
      uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000044, 0x8000000000229960, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v78, v79, "FatalError at %s:%lu - %s", (uint8_t *)v80, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }

    (*(void (**)(char *, uint64_t))(v87 + 8))(v84, v85);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static INIntentParameterHelper.makeParameterDescription<A>(_:_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [a1 _intentInstanceDescription];
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 slotByName:v16];

  if (v17) {
    return (uint64_t)v17;
  }
  uint64_t v41 = v12;
  char v42 = v9;
  uint64_t v40 = v11;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v19 = v41;
  uint64_t v20 = __swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v21(v14, v20, v19);
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v22._uint64_t countAndFlagsBits = 0xD000000000000032;
  v22._object = (void *)0x8000000000229A30;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = a2;
  v23._object = a3;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000000229A70;
  v24._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v24);
  id v25 = [a1 typeName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  os_log_type_t v28 = v27;

  v29._uint64_t countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  uint64_t v30 = v45;
  unint64_t v31 = v46;
  uint64_t v32 = (uint64_t)v40;
  v21(v40, (uint64_t)v14, v19);
  __swift_storeEnumTagSinglePayload(v32, 0, 1, v19);
  uint64_t v33 = (uint64_t)v42;
  outlined init with copy of SpeakableString?(v32, (uint64_t)v42, &demangling cache variable for type metadata for Logger?);
  if (__swift_getEnumTagSinglePayload(v33, 1, v19) == 1)
  {
    outlined destroy of URL?((uint64_t)v42, &demangling cache variable for type metadata for Logger?);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315650;
      uint64_t v37 = StaticString.description.getter();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2048;
      uint64_t v44 = 155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v34, v35, "FatalError at %s:%lu - %s", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v41);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized static INIntentParameterHelper.makeUpdatedMulticardinalValue<A>(_:_:_:_:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void *a6@<X8>)
{
  static INIntentParameterHelper.extractParameterValue(_:_:)(a1, a2, a3, &v21);
  if (v22)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if (swift_dynamicCast())
    {
      uint64_t v9 = (void *)v19;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v9 = _swiftEmptyArrayStorage;
LABEL_6:
  if (v9[2] <= (int64_t)a5)
  {
    outlined init with copy of SpeakableString?(a4, (uint64_t)&v19, &demangling cache variable for type metadata for Any?);
    if (!v20)
    {
      outlined destroy of URL?((uint64_t)&v19, &demangling cache variable for type metadata for Any?);
      goto LABEL_22;
    }
    outlined init with take of Any(&v19, &v21);
    outlined init with copy of Any((uint64_t)&v21, (uint64_t)&v19);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_14:
      unint64_t v11 = v9[2];
      if (v11 >= v9[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v9 = v17;
      }
      v9[2] = v11 + 1;
      outlined init with take of Any(&v19, &v9[4 * v11 + 4]);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
      goto LABEL_22;
    }
LABEL_26:
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v9 = v16;
    goto LABEL_14;
  }
  outlined init with copy of SpeakableString?(a4, (uint64_t)&v19, &demangling cache variable for type metadata for Any?);
  if (v20)
  {
    outlined init with take of Any(&v19, &v21);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((a5 & 0x8000000000000000) == 0) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      uint64_t v9 = v15;
      if ((a5 & 0x8000000000000000) == 0)
      {
LABEL_10:
        if (v9[2] > a5)
        {
          uint64_t v10 = &v9[4 * a5 + 4];
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
          outlined init with take of Any(&v21, v10);
LABEL_22:
          a6[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
          *a6 = v9;
          return;
        }
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  outlined destroy of URL?((uint64_t)&v19, &demangling cache variable for type metadata for Any?);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    uint64_t v9 = v18;
  }
  unint64_t v12 = v9[2];
  if (v12 > a5)
  {
    unint64_t v13 = v12 - 1;
    uint64_t v14 = (char *)&v9[4 * a5];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v14 + 32));
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14 + 64, v13 - a5, v14 + 32);
    v9[2] = v13;
    goto LABEL_22;
  }
  __break(1u);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t outlined bridged method (ob) of @objc INCodableObjectAttribute.typeName.getter(void *a1)
{
  id v2 = [a1 typeName];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

ValueMetadata *type metadata accessor for INIntentParameterHelper()
{
  return &type metadata for INIntentParameterHelper;
}

uint64_t OUTLINED_FUNCTION_4_29()
{
  return *(void *)(v0 - 232);
}

uint64_t OUTLINED_FUNCTION_8_25()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_11_29()
{
  return swift_dynamicCastObjCClass();
}

uint64_t OUTLINED_FUNCTION_12_29()
{
  return v0;
}

double static WFPausedShortcutConverter.toSiriWorkflowInput(userData:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v8 = Dictionary.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v5, v6, "toSiriWorkflowInput userData: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = static WFPausedShortcutConverter.getWFPausedShortcutData(userData:)(a1);
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_0_27();
    specialized Dictionary.subscript.getter(v12, v13, a1, v14);
    if (v22[3])
    {
      int v15 = swift_dynamicCast();
      uint64_t v16 = v20;
      uint64_t v17 = v21;
      if (!v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v22);
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    char v18 = 3;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v18 = -1;
  }
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v17;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = v18;
  return result;
}

const char *WFPausedShortcutConverter.shortcutNameField.unsafeMutableAddressor()
{
  return "shortcutName";
}

uint64_t static WFPausedShortcutConverter.shortcutNameField.getter()
{
  return OUTLINED_FUNCTION_0_27();
}

void *WFPausedShortcutConverter.pausedShortcutDataField.unsafeMutableAddressor()
{
  return &static WFPausedShortcutConverter.pausedShortcutDataField;
}

unint64_t static WFPausedShortcutConverter.pausedShortcutDataField.getter()
{
  return 0xD000000000000012;
}

uint64_t static WFPausedShortcutConverter.toUserData(pausedShortcutData:runnerInput:)(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
  outlined init with take of SiriWorkflowRunnerInput?(a2, (uint64_t)v16);
  if (v16[64] != 255)
  {
    outlined init with take of SiriWorkflowRunnerInput((uint64_t)v16, (uint64_t)v17);
    outlined init with take of SiriWorkflowRunnerInput((uint64_t)v17, (uint64_t)v18);
    if (!v19)
    {
      int v15 = &type metadata for String;
      id v13 = (id)v18[0];
      uint64_t v14 = v18[1];
      outlined retain of SiriWorkflowRunnerInput?(a2);
      specialized Dictionary.subscript.setter((uint64_t)&v13);
    }
  }
  uint64_t v4 = self;
  id v13 = 0;
  id v5 = [v4 archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v13];
  id v6 = v13;
  if (v5)
  {
    uint64_t v7 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    int v15 = &type metadata for Data;
    id v13 = v7;
    uint64_t v14 = v9;
    specialized Dictionary.subscript.setter((uint64_t)&v13);
  }
  else
  {
    unint64_t v10 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  return v12;
}

uint64_t static WFPausedShortcutConverter.getWFPausedShortcutData(userData:)(uint64_t a1)
{
  specialized Dictionary.subscript.getter(0xD000000000000012, 0x8000000000229A90, a1, &v14);
  if (!v15)
  {
    outlined destroy of Any?((uint64_t)&v14);
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "Cannot get data from userData", v9, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for WFPausedShortcutData);
  uint64_t v1 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  uint64_t v10 = v1;
  if (v1)
  {
    outlined consume of Data._Representation(v12, v13);
    return v10;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Cannot unarchive WFPausedShortcutData", v5, 2u);
    swift_slowDealloc();
  }
  outlined consume of Data._Representation(v12, v13);

  return 0;
}

uint64_t outlined init with take of SiriWorkflowRunnerInput?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SiriWorkflowRunnerInput?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of SiriWorkflowRunnerInput?(uint64_t a1)
{
  return a1;
}

id outlined copy of SiriWorkflowRunnerInput?(id result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return outlined copy of SiriWorkflowRunnerInput(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

ValueMetadata *type metadata accessor for WFPausedShortcutConverter()
{
  return &type metadata for WFPausedShortcutConverter;
}

uint64_t OUTLINED_FUNCTION_0_27()
{
  return 0x74756374726F6873;
}

uint64_t Optional<A>.asNLContextUpdate()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    swift_unknownObjectRetain();
    NLContextUpdate.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_211C70;
    *(void *)(v4 + 32) = a1;
    specialized Array._endMutation()();
    NLContextUpdate.systemDialogActs.setter();
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = type metadata accessor for NLContextUpdate();

  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

uint64_t Siri_Nlu_External_SystemDialogAct.asNLContextUpdate()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  NLContextUpdate.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_212160;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16))(v7 + v6, v2, v4);
  NLContextUpdate.nluSystemDialogActs.setter();
  uint64_t v8 = type metadata accessor for NLContextUpdate();

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v8);
}

uint64_t DeviceState.isActualHomePod.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = dispatch thunk of DeviceState.isHomePod.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  if (v6) {
    char v7 = dispatch thunk of DeviceState.isSidekick.getter() ^ 1;
  }
  else {
    char v7 = 0;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  return v7 & 1;
}

uint64_t VoiceCommandParityFlow.__allocating_init(intent:app:outputPublisher:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = swift_allocObject();
  VoiceCommandParityFlow.init(intent:app:outputPublisher:)(a1, a2, a3);
  return v6;
}

uint64_t VoiceCommandParityFlow.exitValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 80);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 88);
  uint64_t v4 = (uint64_t)v1;
  if (v3 >> 6)
  {
    if (v3 >> 6 == 1)
    {
      uint64_t v4 = *(void *)(v0 + 72);
    }
    else
    {
      lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
      uint64_t v4 = OUTLINED_FUNCTION_9_6();
      *uint64_t v5 = 0;
    }
  }
  outlined copy of VoiceCommandParityFlow.State(v1, v2, v3);
  return v4;
}

uint64_t VoiceCommandParityFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 32, a1);
}

uint64_t VoiceCommandParityFlow.init(intent:app:outputPublisher:)(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  outlined init with take of AceServiceInvokerAsync(a3, v3 + 32);
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0;
  *(unsigned char *)(v3 + 88) = 0x80;
  return v3;
}

id outlined copy of VoiceCommandParityFlow.State(id result, void *a2, char a3)
{
  if (a3 >> 6 == 1) {
    return (id)swift_errorRetain();
  }
  if (!(a3 >> 6)) {
    return outlined copy of ParityFlowExecutionResult(result, a2, a3);
  }
  return result;
}

id outlined copy of ParityFlowExecutionResult(id result, void *a2, char a3)
{
  if (a3 == 1)
  {
    return (id)swift_errorRetain();
  }
  else if (!a3)
  {
    id v4 = result;
    return a2;
  }
  return result;
}

uint64_t VoiceCommandParityFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(VoiceCommandParityFlow.execute(), 0, 0);
}

uint64_t VoiceCommandParityFlow.execute()()
{
  uint64_t v16 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v15 = v7;
    id v8 = [*(id *)(v5 + 16) debugDescription];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v2, v3, "#VoiceCommandParityFlow execute intent: %s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_release_n();
  }

  if (*(char *)(v0[4] + 88) < 0)
  {
    long long v14 = (void *)swift_task_alloc();
    v0[5] = v14;
    *long long v14 = v0;
    v14[1] = ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock();
    return VoiceCommandParityFlow.executeIntent(intent:app:)();
  }
  else
  {
    static ExecuteResponse.complete()();
    OUTLINED_FUNCTION_18_0();
    return v12();
  }
}

uint64_t VoiceCommandParityFlow.execute(completion:)()
{
  type metadata accessor for VoiceCommandParityFlow();
  lazy protocol witness table accessor for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow(&lazy protocol witness table cache variable for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow, v0, (void (*)(uint64_t))type metadata accessor for VoiceCommandParityFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t VoiceCommandParityFlow.executeIntent(intent:app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[19] = v2;
  v1[20] = v0;
  v1[17] = v3;
  v1[18] = v4;
  uint64_t v5 = type metadata accessor for AceOutput();
  v1[21] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[22] = v6;
  v1[23] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  v1[26] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[27] = v8;
  v1[28] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for Parse.DirectInvocation();
  v1[30] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[31] = v10;
  v1[32] = OUTLINED_FUNCTION_25();
  return _swift_task_switch(VoiceCommandParityFlow.executeIntent(intent:app:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  os_log_type_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned char *v26;
  uint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned char *v42;
  uint64_t v43;
  os_log_type_t v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *boxed_opaque_existential_1;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(void);
  os_log_type_t v78;
  os_log_type_t type;
  _OWORD v80[2];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  unint64_t v82 = v0;
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v3 = static VoiceCommandsParity.processIntent(intent:)(*(void **)(v0 + 144));
  *(void *)(v0 + 264) = v3;
  static VoiceCommandsParity.buildDirectInvocationParse(intent:app:)(v3, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1)
  {
    outlined destroy of URL?(*(void *)(v0 + 232), &demangling cache variable for type metadata for Parse.DirectInvocation?);
    lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
    uint64_t v4 = OUTLINED_FUNCTION_9_6();
    *uint64_t v5 = 1;
    OUTLINED_FUNCTION_2_32(v4);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    uint64_t v8 = v3;
    OUTLINED_FUNCTION_9_32();
    uint64_t v9 = v3;
    uint64_t v10 = Logger.logObject.getter();
    unint64_t v11 = static os_log_type_t.error.getter();
    uint64_t v12 = OUTLINED_FUNCTION_8_26(v11);
    unint64_t v13 = *(void *)(v0 + 152);
    if (v12)
    {
      long long v14 = swift_slowAlloc();
      *(void *)&v80[0] = swift_slowAlloc();
      *(_DWORD *)long long v14 = 136315394;
      uint64_t v15 = [v9 debugDescription];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v18 = v17;

      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v14 + 12) = 2080;
      *(void *)(v0 + 56) = v13;
      type metadata accessor for App();
      lazy protocol witness table accessor for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow(&lazy protocol witness table cache variable for type App and conformance App, 255, (void (*)(uint64_t))&type metadata accessor for App);
      char v19 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v10, v7, "cannot build direction invocation for intent: %s, app: %s", (uint8_t *)v14, 0x16u);
      OUTLINED_FUNCTION_12_30();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_release_n();
    }

    static ExecuteResponse.complete()();
LABEL_27:
    OUTLINED_FUNCTION_4_30();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v76();
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 248) + 32))(*(void *)(v0 + 256), *(void *)(v0 + 232), *(void *)(v0 + 240));
  uint64_t v21 = static FlowLocator.findFlow(forInvocation:)();
  *(void *)(v0 + 272) = v21;
  if (!v21)
  {
LABEL_16:
    lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
    uint64_t v41 = OUTLINED_FUNCTION_9_6();
    *char v42 = 2;
    OUTLINED_FUNCTION_2_32(v41);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    uint64_t v44 = __swift_project_value_buffer(v43, (uint64_t)static Logger.voiceCommands);
    uint64_t v45 = v3;
    OUTLINED_FUNCTION_9_32();
    unint64_t v46 = v3;
    uint64_t v47 = Logger.logObject.getter();
    uint64_t v48 = static os_log_type_t.error.getter();
    uint64_t v49 = OUTLINED_FUNCTION_8_26(v48);
    os_log_type_t v50 = *(void *)(v0 + 152);
    if (v49)
    {
      os_log_type_t type = v44;
      uint64_t v51 = swift_slowAlloc();
      *(void *)&v80[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136315394;
      uint64_t v52 = [v46 debugDescription];
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v55 = v54;

      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v51 + 12) = 2080;
      *(void *)(v0 + 80) = v50;
      type metadata accessor for App();
      lazy protocol witness table accessor for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow(&lazy protocol witness table cache variable for type App and conformance App, 255, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v47, type, "cannot build flow for direct invocation, intent: %s, app: %s", (uint8_t *)v51, 0x16u);
      OUTLINED_FUNCTION_12_30();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_release_n();
    }

    uint64_t v59 = *(void *)(v0 + 248);
    uint64_t v58 = *(void *)(v0 + 256);
    uint64_t v60 = *(void *)(v0 + 240);
    static ExecuteResponse.complete()();

    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
    goto LABEL_27;
  }
  *(void *)(v0 + 280) = type metadata accessor for AnyVoiceCommandsParityFlow();
  uint64_t v22 = swift_dynamicCastClass();
  *(void *)(v0 + 288) = v22;
  if (!v22)
  {
    swift_release();
    goto LABEL_16;
  }
  Swift::String v24 = *(void *)(v0 + 200);
  Swift::String v23 = *(void *)(v0 + 208);
  static VoiceCommandsParity.buildNLContextUpdate(intent:app:)(v24);
  if (__swift_getEnumTagSinglePayload(v24, 1, v23) == 1)
  {
    outlined destroy of URL?(*(void *)(v0 + 200), &demangling cache variable for type metadata for NLContextUpdate?);
    lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
    id v25 = OUTLINED_FUNCTION_9_6();
    *uint64_t v26 = 0;
    OUTLINED_FUNCTION_2_32(v25);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    id v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v28 = v3;
    OUTLINED_FUNCTION_9_32();
    Swift::String v29 = v3;
    uint64_t v30 = Logger.logObject.getter();
    unint64_t v31 = static os_log_type_t.error.getter();
    uint64_t v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void *)(v0 + 152);
    if (v32)
    {
      uint64_t v34 = swift_slowAlloc();
      *(void *)&v80[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v78 = v31;
      os_log_type_t v35 = [v29 debugDescription];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v34 + 12) = 2080;
      *(void *)(v0 + 104) = v33;
      type metadata accessor for App();
      lazy protocol witness table accessor for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow(&lazy protocol witness table cache variable for type App and conformance App, 255, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v30, v78, "cannot build contextUpdate for direct invocation, intent: %s, app: %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_release_n();
    }

    unint64_t v74 = *(void *)(v0 + 248);
    unint64_t v73 = *(void *)(v0 + 256);
    uint64_t v75 = *(void *)(v0 + 240);
    static ExecuteResponse.complete()();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
    goto LABEL_27;
  }
  NSString v62 = *(void *)(v0 + 216);
  NSNumber v61 = *(void *)(v0 + 224);
  id v63 = *(void *)(v0 + 208);
  uint64_t v64 = *(void *)(v0 + 184);
  uint64_t v65 = *(void *)(v0 + 192);
  id v66 = *(void *)(v0 + 168);
  id v67 = *(void *)(v0 + 176);
  uint64_t v68 = *(void **)(v0 + 160);
  (*(void (**)(uint64_t, void, uint64_t))(v62 + 32))(v61, *(void *)(v0 + 200), v63);
  uint64_t v81 = 0;
  memset(v80, 0, sizeof(v80));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v65, v61, v63);
  __swift_storeEnumTagSinglePayload(v65, 0, 1, v63);
  AceOutput.init(commands:flowActivity:nlContextUpdate:)();
  os_log_type_t v69 = v68[7];
  uint64_t v70 = v68[8];
  __swift_project_boxed_opaque_existential_1(v68 + 4, v69);
  *(void *)(v0 + 40) = v66;
  *(void *)(v0 + 48) = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v67 + 16))(boxed_opaque_existential_1, v64, v66);
  uint64_t v72 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v72;
  *uint64_t v72 = v0;
  v72[1] = VoiceCommandParityFlow.executeIntent(intent:app:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v69, v70);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v3 + 304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = VoiceCommandParityFlow.executeIntent(intent:app:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 16);
    uint64_t v6 = VoiceCommandParityFlow.executeIntent(intent:app:);
  }
  return _swift_task_switch(v6, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = v0[31];
  uint64_t v12 = v0[32];
  uint64_t v2 = v0[27];
  uint64_t v10 = v0[28];
  unint64_t v11 = v0[30];
  uint64_t v8 = (void *)v0[33];
  uint64_t v9 = v0[26];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v5 = v0[21];
  v0[16] = v0[36];
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v10, v9);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v12, v11);
  swift_release();
  OUTLINED_FUNCTION_4_30();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v6();
}

{
  void *v0;
  uint64_t v1;
  os_log_type_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_8_26(v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v2, "submitting contextUpdate failed.", v5, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v6 = v0[31];
  uint64_t v22 = v0[30];
  Swift::String v23 = v0[32];
  uint64_t v7 = v0[27];
  uint64_t v21 = v0[28];
  char v19 = (void *)v0[33];
  uint64_t v20 = v0[26];
  uint64_t v8 = v0[22];
  char v18 = v0[23];
  uint64_t v9 = v0[20];
  uint64_t v10 = v0[21];

  lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
  unint64_t v11 = OUTLINED_FUNCTION_9_6();
  *uint64_t v12 = 2;
  long long v14 = *(void **)(v9 + 72);
  unint64_t v13 = *(void **)(v9 + 80);
  *(void *)(v9 + 72) = v11;
  *(void *)(v9 + 80) = 0;
  uint64_t v15 = *(unsigned char *)(v9 + 88);
  *(unsigned char *)(v9 + 88) = 64;
  outlined consume of VoiceCommandParityFlow.State(v14, v13, v15);
  static ExecuteResponse.complete()();
  swift_release();
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v18, v10);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v21, v20);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v23, v22);
  OUTLINED_FUNCTION_4_30();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v16();
}

void VoiceCommandParityFlow.processParityRequestExecutionResult(executionResult:)(uint64_t a1)
{
  uint64_t v2 = static VoiceCommandsParity.processExecutionResult(intent:executionResult:)(*(void **)(v1 + 16), a1);
  uint64_t v3 = *(void **)(v1 + 72);
  uint64_t v4 = *(void **)(v1 + 80);
  *(void *)(v1 + 72) = v2;
  *(void *)(v1 + 80) = v5;
  char v6 = *(unsigned char *)(v1 + 88);
  *(unsigned char *)(v1 + 88) = v7;

  outlined consume of VoiceCommandParityFlow.State(v3, v4, v6);
}

uint64_t VoiceCommandParityFlow.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  outlined consume of VoiceCommandParityFlow.State(*(void **)(v0 + 72), *(void **)(v0 + 80), *(unsigned char *)(v0 + 88));
  return v0;
}

uint64_t VoiceCommandParityFlow.__deallocating_deinit()
{
  VoiceCommandParityFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance VoiceCommandParityFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance VoiceCommandParityFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for Flow.execute() in conformance VoiceCommandParityFlow(uint64_t a1)
{
  char v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 160) + **(int **)(**(void **)v1 + 160));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance VoiceCommandParityFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 112))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t type metadata accessor for VoiceCommandParityFlow()
{
  return self;
}

void outlined consume of VoiceCommandParityFlow.State(void *a1, void *a2, char a3)
{
  if (a3 >> 6 == 1)
  {
    swift_errorRelease();
  }
  else if (!(a3 >> 6))
  {
    outlined consume of ParityFlowExecutionResult(a1, a2, a3);
  }
}

void outlined consume of ParityFlowExecutionResult(void *a1, void *a2, char a3)
{
  if (a3 == 1)
  {
    swift_errorRelease();
  }
  else if (!a3)
  {
  }
}

uint64_t base witness table accessor for Flow in VoiceCommandParityFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow(&lazy protocol witness table cache variable for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow, a2, (void (*)(uint64_t))type metadata accessor for VoiceCommandParityFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in VoiceCommandParityFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow(&lazy protocol witness table cache variable for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow, a2, (void (*)(uint64_t))type metadata accessor for VoiceCommandParityFlow);
}

void destroy for VoiceCommandParityFlow.State(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for VoiceCommandParityFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of VoiceCommandParityFlow.State(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for VoiceCommandParityFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of VoiceCommandParityFlow.State(*(id *)a2, v4, v5);
  char v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of VoiceCommandParityFlow.State(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for VoiceCommandParityFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of VoiceCommandParityFlow.State(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceCommandParityFlow.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x3E && *(unsigned char *)(a1 + 17))
    {
      unsigned int v2 = *(_DWORD *)a1 + 61;
    }
    else
    {
      unsigned int v2 = (*(unsigned char *)(a1 + 16) & 0x3C | (*(unsigned __int8 *)(a1 + 16) >> 6)) ^ 0x3F;
      if (v2 >= 0x3D) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for VoiceCommandParityFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 62;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3E) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3E) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for VoiceCommandParityFlow.State(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for VoiceCommandParityFlow.State(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for VoiceCommandParityFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(unsigned char *)(result + 16) & 3 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    char v2 = 0x80;
  }
  *(unsigned char *)(result + 16) = v2;
  return result;
}

void *type metadata accessor for VoiceCommandParityFlow.State()
{
  return &unk_28D8D0;
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError;
  if (!lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError;
  if (!lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsParityError and conformance VoiceCommandsParityError);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type VoiceCommandParityFlow and conformance VoiceCommandParityFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void OUTLINED_FUNCTION_2_32(uint64_t a1)
{
  uint64_t v4 = *(void **)(v1 + 72);
  unsigned int v3 = *(void **)(v1 + 80);
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = 0;
  char v5 = *(unsigned char *)(v1 + 88);
  *(unsigned char *)(v1 + 88) = 64;
  outlined consume of VoiceCommandParityFlow.State(v4, v3, v5);
}

uint64_t OUTLINED_FUNCTION_4_30()
{
  return swift_task_dealloc();
}

BOOL OUTLINED_FUNCTION_8_26(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_9_32()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_12_30()
{
  return swift_arrayDestroy();
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi3key_SS5valuetG_SSs5NeverOTg50126_s18SiriLinkFlowPlugin28AutoShortcutDialogTemplatingC04makeF7Phrases08shortcutJ0SaySSGAF_tYaKFAFScGySi_0a3KitC00H6ResultVtSgGzv64XEfU_SSSi3key_SS5valuet_tcfu_33_9884fbf80a26ee2659924377586aa6b9Y20AL_SSAMtSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    unsigned int v3 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      char v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      v3 += 3;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *AutoShortcutDialogTemplating.__allocating_init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)()
{
  OUTLINED_FUNCTION_78_3();
  swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1(v0, *(void *)(v0 + 24));
  OUTLINED_FUNCTION_22_25();
  __chkstk_darwin(v1);
  unsigned int v3 = OUTLINED_FUNCTION_33_17(v2, v7);
  v4(v3);
  uint64_t v5 = OUTLINED_FUNCTION_44_11();
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return v5;
}

void *AutoShortcutDialogTemplating.MAXSHORTCUTNUM.unsafeMutableAddressor()
{
  return &static AutoShortcutDialogTemplating.MAXSHORTCUTNUM;
}

void *AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)()
{
  OUTLINED_FUNCTION_78_3();
  __swift_mutable_project_boxed_opaque_existential_1(v1, *(void *)(v1 + 24));
  OUTLINED_FUNCTION_22_25();
  __chkstk_darwin(v2);
  uint64_t v4 = OUTLINED_FUNCTION_33_17(v3, v8);
  v5(v4);
  unint64_t v6 = OUTLINED_FUNCTION_44_11();
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return v6;
}

uint64_t AutoShortcutDialogTemplating.firstRun_preRFv2(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  v1[6] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_66_5();
  OUTLINED_FUNCTION_8_27();
  uint64_t v0 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_6_31(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_64_0(v1);
  *uint64_t v2 = v3;
  v2[1] = AutoShortcutDialogTemplating.firstRun_preRFv2(app:);
  OUTLINED_FUNCTION_30_15();
  return v7(v4, v5, v6, v7, v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v12();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_59_8();
  return v0();
}

uint64_t AutoShortcutDialogTemplating.firstRunAsLabels(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  v1[5] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_76_7();
  OUTLINED_FUNCTION_8_27();
  uint64_t v1 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_6_31(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutDialogTemplating.firstRunAsLabels(app:);
  OUTLINED_FUNCTION_75_5();
  OUTLINED_FUNCTION_30_15();
  return v5(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_12_31();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 56) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 40);
  if (!v0) {
    *(void *)(v5 + 64) = v1;
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v0 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v2 = v1;
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_78_1();
  return v3(v0, v2);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_58_10();
  return v0();
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablement(appName:isEnabling:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 24) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_67_7();
  OUTLINED_FUNCTION_8_27();
  uint64_t v0 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_6_31(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_64_0(v1);
  *uint64_t v2 = v3;
  v2[1] = AutoShortcutDialogTemplating.confirmChangeEnablement(appName:isEnabling:);
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_30_15();
  return v7(v4, v5, v6, v7, v8, v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_12_31();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v2 + 48), &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_10_14();
    OUTLINED_FUNCTION_23_1();
    return v12(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablement(appName:isEnabling:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v12, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  unint64_t v13 = (void *)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v14))
  {
    OUTLINED_FUNCTION_20_27();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_11_30(v15);
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutDialogTemplating - error getting RFv2 confirmChangeEnablement result; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_55_6();
  OUTLINED_FUNCTION_28_0();
  return v20(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablement_preRFv2(appName:isEnabling:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 80) = v2;
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = v0;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_66_5();
  OUTLINED_FUNCTION_8_27();
  uint64_t v0 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_6_31(v0);
  uint64_t v1 = swift_task_alloc();
  char v2 = (void *)OUTLINED_FUNCTION_14_6(v1);
  *char v2 = v3;
  v2[1] = AutoShortcutDialogTemplating.confirmChangeEnablement_preRFv2(appName:isEnabling:);
  OUTLINED_FUNCTION_57_5();
  OUTLINED_FUNCTION_30_15();
  return v8(v4, v5, v6, v7, v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 72) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = type metadata accessor for TemplatingResult();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablement_preRFv2(appName:isEnabling:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v12, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  unint64_t v13 = (void *)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v14))
  {
    OUTLINED_FUNCTION_20_27();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_11_30(v15);
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutDialogTemplating - error getting confirmChangeEnablement result; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_65_6(v18);
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = v3;
  *(unsigned char *)(v4 + 72) = a3;
  *(void *)(v4 + 24) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:));
}

uint64_t AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:)()
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = v1[4];
  uint64_t v3 = v1[3];
  uint64_t v4 = OUTLINED_FUNCTION_74_2(v1[5]);
  v1[6] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v18 = *(void *)(v0 + 48) + **(int **)(v0 + 48);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_64_0(v5);
  *uint64_t v6 = v7;
  v6[1] = AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:);
  OUTLINED_FUNCTION_48_9();
  OUTLINED_FUNCTION_42_7();
  return v15(v8, v9, v10, v11, v12, v13, v14, v15, v18, v0 + 48);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

uint64_t AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  swift_task_dealloc();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v12, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v13 = (void *)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v14))
  {
    OUTLINED_FUNCTION_20_27();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_11_30(v15);
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutDialogTemplating - error making confirmChangeEnablementPattern result; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_55_6();
  OUTLINED_FUNCTION_28_0();
  return v20(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablementDeclined(appName:isEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 24) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_67_7();
  OUTLINED_FUNCTION_8_27();
  uint64_t v0 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_6_31(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_64_0(v1);
  *uint64_t v2 = v3;
  v2[1] = AutoShortcutDialogTemplating.confirmChangeEnablementDeclined(appName:isEnabled:);
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_30_15();
  return v7(v4, v5, v6, v7, v8, v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_12_31();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v2 + 48), &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_10_14();
    OUTLINED_FUNCTION_23_1();
    return v12(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablementDeclined(appName:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v12, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v13 = (void *)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v14))
  {
    OUTLINED_FUNCTION_20_27();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_11_30(v15);
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutDialogTemplating - error getting confirmChangeEnablementDeclined result; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_55_6();
  OUTLINED_FUNCTION_28_0();
  return v20(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablementDeclined_preRFv2(appName:isEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 80) = v2;
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = v0;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_66_5();
  OUTLINED_FUNCTION_8_27();
  uint64_t v0 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_6_31(v0);
  uint64_t v1 = swift_task_alloc();
  char v2 = (void *)OUTLINED_FUNCTION_14_6(v1);
  *char v2 = v3;
  v2[1] = AutoShortcutDialogTemplating.confirmChangeEnablementDeclined_preRFv2(appName:isEnabled:);
  OUTLINED_FUNCTION_57_5();
  OUTLINED_FUNCTION_30_15();
  return v8(v4, v5, v6, v7, v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 72) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t AutoShortcutDialogTemplating.confirmChangeEnablementDeclined_preRFv2(appName:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v12, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v13 = (void *)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v14))
  {
    OUTLINED_FUNCTION_20_27();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_11_30(v15);
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutDialogTemplating - error getting confirmChangeEnablementDeclined result; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_65_6(v18);
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t AutoShortcutDialogTemplating.appEnabled(appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  char v3 = *(void **)(v1 + 64);
  v0[6] = OUTLINED_FUNCTION_18_19((void *)(v1 + 16));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_36_7();
  uint64_t v4 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v4);
  uint64_t v17 = *(void *)(class metadata base offset for AutoShortcutCATsSimple + *v3 + 16)
      + **(int **)(class metadata base offset for AutoShortcutCATsSimple + *v3 + 16);
  uint64_t v18 = class metadata base offset for AutoShortcutCATsSimple + *v3 + 16;
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_64_0(v5);
  *uint64_t v6 = v7;
  v6[1] = AutoShortcutDialogTemplating.appEnabled(appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_47_11();
  OUTLINED_FUNCTION_42_7();
  return v12(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 64) = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_64_1();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v1)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v5, v6, v7);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_67_2();
    OUTLINED_FUNCTION_23_1();
    return v11(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_59_8();
  return v0();
}

uint64_t AutoShortcutDialogTemplating.appEnabled_preRFv2(appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 80) = v2;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[5];
  char v2 = v0[6];
  uint64_t v3 = *(void **)(v1 + 56);
  v0[7] = OUTLINED_FUNCTION_18_19((void *)(v1 + 16));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_36_7();
  uint64_t v4 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v4);
  uint64_t v17 = *(void *)(class metadata base offset for AutoShortcutCATs + *v3 + 8)
      + **(int **)(class metadata base offset for AutoShortcutCATs + *v3 + 8);
  uint64_t v18 = class metadata base offset for AutoShortcutCATs + *v3 + 8;
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_14_6(v5);
  *uint64_t v6 = v7;
  v6[1] = AutoShortcutDialogTemplating.appEnabled_preRFv2(appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_41_15();
  OUTLINED_FUNCTION_42_7();
  return v13(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v12();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t AutoShortcutDialogTemplating.appDisabled(appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_18_19((void *)(*(void *)(v0 + 32) + 16));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_36_7();
  uint64_t v1 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_23_21(v1);
  uint64_t v15 = *(void *)(v2 + class metadata base offset for AutoShortcutCATsSimple)
      + **(int **)(v2 + class metadata base offset for AutoShortcutCATsSimple);
  uint64_t v16 = v2 + class metadata base offset for AutoShortcutCATsSimple;
  char v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_64_0(v3);
  *uint64_t v4 = v5;
  v4[1] = AutoShortcutDialogTemplating.appDisabled(appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_47_11();
  OUTLINED_FUNCTION_42_7();
  return v10(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 64) = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_64_1();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v1)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v5, v6, v7);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_67_2();
    OUTLINED_FUNCTION_23_1();
    return v11(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t AutoShortcutDialogTemplating.appDisabled_preRFv2(appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 80) = v2;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_18_19((void *)(*(void *)(v0 + 40) + 16));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_36_7();
  uint64_t v1 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_23_21(v1);
  uint64_t v15 = *(void *)(v2 + class metadata base offset for AutoShortcutCATs)
      + **(int **)(v2 + class metadata base offset for AutoShortcutCATs);
  uint64_t v16 = v2 + class metadata base offset for AutoShortcutCATs;
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_14_6(v3);
  *uint64_t v4 = v5;
  v4[1] = AutoShortcutDialogTemplating.appDisabled_preRFv2(appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_41_15();
  OUTLINED_FUNCTION_42_7();
  return v11(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v12();
  }
}

uint64_t AutoShortcutDialogTemplating.openInShortcuts()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutDialogTemplating.openInShortcuts());
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_56_6();
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v1 + 144)
                         + **(int **)(class metadata base offset for AutoShortcutCATsSimple + v1 + 144));
  char v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *char v2 = v0;
  v2[1] = AutoShortcutDialogTemplating.openInShortcuts();
  return v4();
}

uint64_t AutoShortcutDialogTemplating.openInShortcuts_preRFv2()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutDialogTemplating.openInShortcuts_preRFv2());
}

uint64_t AutoShortcutDialogTemplating.openInShortcuts_preRFv2()()
{
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_50_10();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(class metadata base offset for AutoShortcutCATs + v1 + 72)
                                       + **(int **)(class metadata base offset for AutoShortcutCATs + v1 + 72));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutDialogTemplating.openInShortcuts_preRFv2();
  uint64_t v3 = *(void *)(v0 + 16);
  return v5(v3);
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutAppEnabledPattern(appName:wasAlreadyEnabled:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 64) = a3;
  *(void *)(v4 + 16) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutDialogTemplating.makeAutoShortcutAppEnabledPattern(appName:wasAlreadyEnabled:));
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutAppEnabledPattern(appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[2];
  uint64_t v4 = OUTLINED_FUNCTION_74_2(v1[4]);
  v1[5] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v16 = *(void *)(v0 + 32) + **(int **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  v1[6] = v5;
  *uint64_t v5 = v1;
  v5[1] = AutoShortcutDialogTemplating.makeAutoShortcutAppEnabledPattern(appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_48_9();
  OUTLINED_FUNCTION_42_7();
  return v13(v6, v7, v8, v9, v10, v11, v12, v13, v16, v0 + 32);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

uint64_t AutoShortcutDialogTemplating.ButtonLabels.button0.getter()
{
  return OUTLINED_FUNCTION_30_0();
}

uint64_t AutoShortcutDialogTemplating.ButtonLabels.button1.getter()
{
  return OUTLINED_FUNCTION_30_0();
}

void *AutoShortcutDialogTemplating.ButtonLabels.default.unsafeMutableAddressor()
{
  return &static AutoShortcutDialogTemplating.ButtonLabels.default;
}

uint64_t static AutoShortcutDialogTemplating.ButtonLabels.default.getter()
{
  return 0;
}

uint64_t AutoShortcutDialogTemplating.enableAndCancel()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for TemplatingText();
  v1[3] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for TemplatingSection();
  v1[6] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[7] = v5;
  v1[8] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[9] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[10] = v7;
  v1[11] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[12] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[13] = v9;
  v1[14] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = OUTLINED_FUNCTION_47_10();
  v3(v2);
  RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v4 = OUTLINED_FUNCTION_48_8();
  v5(v4);
  if (v0)
  {
    OUTLINED_FUNCTION_56_6();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v1 + 120) = v6;
    *uint64_t v6 = v1;
    v6[1] = AutoShortcutDialogTemplating.enableAndCancel();
    OUTLINED_FUNCTION_30_15();
    return v8(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    OUTLINED_FUNCTION_50_10();
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v1 + 136) = v16;
    *uint64_t v16 = v1;
    v16[1] = AutoShortcutDialogTemplating.enableAndCancel();
    OUTLINED_FUNCTION_30_15();
    return v19(v17, v18, v19, v20, v21, v22, v23, v24);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v9();
  }
  else
  {
    *(void *)(v5 + 128) = v3;
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_21_0();
  *(unsigned char *)(v0 + 152) = 1;
  dispatch thunk of LabelExecutionResult.subscript.getter();
  *(unsigned char *)(v0 + 153) = 0;
  dispatch thunk of LabelExecutionResult.subscript.getter();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_72_7();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(void);
  void (*v19)(void);
  uint64_t (*v20)(uint64_t, unint64_t, uint64_t, unint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t, unint64_t, uint64_t);
  uint64_t v26;

  uint64_t v1 = *(void *)(TemplatingResult.sections.getter() + 16);
  swift_bridgeObjectRelease();
  if (v1 != 2)
  {
    OUTLINED_FUNCTION_2_6();
    v19();
    uint64_t v9 = 0;
    uint64_t v15 = 0;
    uint64_t v11 = 0xE000000000000000;
    uint64_t v17 = 0xE000000000000000;
    goto LABEL_6;
  }
  uint64_t result = TemplatingResult.sections.getter();
  if (!*(void *)(result + 16))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v7 = v0[3];
  uint64_t v8 = v0[4];
  uint64_t v23 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v25 = *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
  v25(v3, result + v23, v5);
  swift_bridgeObjectRelease();
  TemplatingSection.content.getter();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v24(v3, v5);
  uint64_t v9 = TemplatingText.text.getter();
  uint64_t v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  uint64_t result = TemplatingResult.sections.getter();
  if (*(void *)(result + 16) < 2uLL)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v12 = v0[10];
  uint64_t v13 = v0[8];
  uint64_t v21 = v0[9];
  uint64_t v22 = v0[11];
  uint64_t v14 = v0[6];
  v25(v13, result + v23 + *(void *)(v0[7] + 72), v14);
  swift_bridgeObjectRelease();
  TemplatingSection.content.getter();
  v24(v13, v14);
  uint64_t v15 = TemplatingText.text.getter();
  uint64_t v17 = v16;
  OUTLINED_FUNCTION_66();
  v18();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v22, v21);
LABEL_6:
  OUTLINED_FUNCTION_73_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, unint64_t))v0[1];
  return v20(v9, v11, v15, v17);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t AutoShortcutDialogTemplating.disableAndCancel()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for TemplatingText();
  v1[3] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for TemplatingSection();
  v1[6] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[7] = v5;
  v1[8] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[9] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[10] = v7;
  v1[11] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[12] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[13] = v9;
  v1[14] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = OUTLINED_FUNCTION_47_10();
  v3(v2);
  RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v4 = OUTLINED_FUNCTION_48_8();
  v5(v4);
  if (v0)
  {
    OUTLINED_FUNCTION_56_6();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v1 + 120) = v6;
    *uint64_t v6 = v1;
    v6[1] = AutoShortcutDialogTemplating.disableAndCancel();
    OUTLINED_FUNCTION_30_15();
    return v8(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    OUTLINED_FUNCTION_50_10();
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v1 + 136) = v16;
    *uint64_t v16 = v1;
    v16[1] = AutoShortcutDialogTemplating.disableAndCancel();
    OUTLINED_FUNCTION_30_15();
    return v19(v17, v18, v19, v20, v21, v22, v23, v24);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 128) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v6();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
}

{
  uint64_t v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v20;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = [*(id *)(v0 + 128) dialog];
  type metadata accessor for DialogElement();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(v0 + 128);
  if (v3 == 2)
  {
    uint64_t v5 = [v4 dialog];
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000001) == 0);
    if ((v6 & 0xC000000000000001) != 0) {
      uint64_t v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v7 = *(id *)(v6 + 32);
    }
    uint64_t v8 = v7;
    uint64_t v9 = *(void **)(v0 + 128);
    swift_bridgeObjectRelease();
    uint64_t v10 = [v8 fullPrint];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = [v9 dialog];
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, (v12 & 0xC000000000000001) == 0);
    if ((v12 & 0xC000000000000001) != 0) {
      uint64_t v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v13 = *(id *)(v12 + 40);
    }
    uint64_t v14 = v13;
    uint64_t v15 = *(void **)(v0 + 128);
    swift_bridgeObjectRelease();
    uint64_t v16 = [v14 fullPrint];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
  }
  OUTLINED_FUNCTION_73_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = OUTLINED_FUNCTION_72_7();
  return v18(v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t AutoShortcutDialogTemplating.moreShortcuts(numberOfShortcuts:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for TemplatingText();
  v1[4] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[5] = v4;
  v1[6] = OUTLINED_FUNCTION_25();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_16(v5);
  v1[7] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[8] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[9] = v7;
  v1[10] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[11] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[12] = v9;
  v1[13] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  char v0;
  void *v1;
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  void *v12;
  double v13;
  uint64_t (*v14)(void, void);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void, void);
  uint64_t (*v20)(uint64_t, void, void);
  uint64_t v21;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_26_12();
  uint64_t result = dispatch thunk of DeviceState.isPhone.getter();
  if ((result & 1) == 0)
  {
    OUTLINED_FUNCTION_26_12();
    uint64_t result = dispatch thunk of DeviceState.isPad.getter();
    if ((result & 1) == 0) {
      goto LABEL_9;
    }
  }
  uint64_t v3 = v1[2];
  uint64_t v4 = __OFSUB__(v3, 3);
  uint64_t v5 = v3 - 3;
  if (v4)
  {
    __break(1u);
    return result;
  }
  if (v5 < 1)
  {
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_78_1();
    uint64_t v13 = 0.0;
    return v14(*(void *)&v13, 0);
  }
  uint64_t v6 = (double)v5;
  uint64_t v7 = OUTLINED_FUNCTION_47_10();
  v8(v7);
  RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v9 = OUTLINED_FUNCTION_48_8();
  v10(v9);
  if (v0)
  {
    OUTLINED_FUNCTION_56_6();
    uint64_t v19 = (uint64_t (*)(void, void))(*(void *)(class metadata base offset for AutoShortcutCATsSimple
                                                             + v11
                                                             + 136)
                                                 + **(int **)(class metadata base offset for AutoShortcutCATsSimple
                                                            + v11
                                                            + 136));
    uint64_t v12 = (void *)swift_task_alloc();
    v1[14] = v12;
    *uint64_t v12 = v1;
    v12[1] = AutoShortcutDialogTemplating.moreShortcuts(numberOfShortcuts:);
    uint64_t v13 = v6;
    uint64_t v14 = v19;
    return v14(*(void *)&v13, 0);
  }
  OUTLINED_FUNCTION_50_10();
  uint64_t v20 = (uint64_t (*)(uint64_t, void, void))(*(void *)(class metadata base offset for AutoShortcutCATs
                                                                    + v15
                                                                    + 64)
                                                        + **(int **)(class metadata base offset for AutoShortcutCATs
                                                                   + v15
                                                                   + 64));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v1[16] = v16;
  *uint64_t v16 = v17;
  v16[1] = AutoShortcutDialogTemplating.moreShortcuts(numberOfShortcuts:);
  uint64_t v18 = v1[10];
  return v20(v18, *(void *)&v6, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v9();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  dispatch thunk of LabelExecutionResult.subscript.getter();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_78_1();
  OUTLINED_FUNCTION_23_1();
  return v3(v0, v1, v2, v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 136) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumTagSinglePayload;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v18;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = TemplatingResult.sections.getter();
  specialized Collection.first.getter(v2, v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for TemplatingSection();
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v3);
  uint64_t v5 = *(void *)(v0 + 56);
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v6 = OUTLINED_FUNCTION_80_4();
    v7(v6);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    TemplatingSection.content.getter();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_66();
    v10();
    uint64_t v8 = TemplatingText.text.getter();
    uint64_t v9 = v11;
    uint64_t v12 = OUTLINED_FUNCTION_33_15();
    v13(v12);
    uint64_t v14 = OUTLINED_FUNCTION_80_4();
    v15(v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_78_1();
  return v16(v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutFirstRunPattern(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[2] = v1;
  v0[3] = v2;
  uint64_t v3 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v3);
  v0[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[2];
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  v0[5] = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v3 = swift_task_alloc();
  v0[6] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_64_0(v4);
  *uint64_t v5 = v6;
  v5[1] = AutoShortcutDialogTemplating.makeAutoShortcutFirstRunPattern(app:);
  OUTLINED_FUNCTION_30_15();
  return v11(v7, v8, v9, v10, v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v12(v3);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_59_8();
  return v0();
}

uint64_t closure #1 in AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_16(v2);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_36_7();
  uint64_t v6 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  return outlined assign with take of SpeakableString?((uint64_t)v5, a1);
}

uint64_t AutoShortcutDialogTemplating.firstRun(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  v1[5] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_76_7();
  OUTLINED_FUNCTION_8_27();
  uint64_t v1 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_6_31(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutDialogTemplating.firstRun(app:);
  OUTLINED_FUNCTION_75_5();
  OUTLINED_FUNCTION_30_15();
  return v5(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_64_1();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v4 + 40), &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v5, v6, v7);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v8 = OUTLINED_FUNCTION_67_2();
    return v9(v8);
  }
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog(app:firstPhrase:secondPhrase:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[7] = v2;
  v1[8] = v0;
  v1[5] = v3;
  v1[6] = v4;
  v1[3] = v5;
  v1[4] = v6;
  v1[2] = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[2];
  uint64_t v3 = *(void **)(v0[8] + 64);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_36_7();
  uint64_t v4 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_54_6(v4);
  OUTLINED_FUNCTION_36_7();
  OUTLINED_FUNCTION_79_5();
  OUTLINED_FUNCTION_36_7();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(class metadata base offset for AutoShortcutCATsSimple
                                                                      + *v3
                                                                      + 112)
                                                          + **(int **)(class metadata base offset for AutoShortcutCATsSimple
                                                                     + *v3
                                                                     + 112));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog(app:firstPhrase:secondPhrase:);
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[9];
  return v10(v7, v6, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;

  OUTLINED_FUNCTION_13_1();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 104) = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_64_1();
  uint64_t v9 = *(void *)(v8 + 88);
  uint64_t v10 = *(void *)(v0 + 80);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 72), &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v10, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v9, &demangling cache variable for type metadata for SpeakableString?);
  if (v1)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v14(v4);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog_preRFv2(app:firstPhrase:secondPhrase:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[8] = v2;
  v1[9] = v0;
  v1[6] = v3;
  v1[7] = v4;
  v1[4] = v5;
  v1[5] = v6;
  v1[2] = v7;
  v1[3] = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v9);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[3];
  uint64_t v3 = *(void **)(v0[9] + 56);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_36_7();
  uint64_t v4 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_54_6(v4);
  OUTLINED_FUNCTION_36_7();
  OUTLINED_FUNCTION_79_5();
  OUTLINED_FUNCTION_36_7();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(class metadata base offset for AutoShortcutCATs
                                                                               + *v3
                                                                               + 56)
                                                                   + **(int **)(class metadata base offset for AutoShortcutCATs
                                                                              + *v3
                                                                              + 56));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[13] = v5;
  *uint64_t v5 = v6;
  v5[1] = AutoShortcutDialogTemplating.makeAutoShortcutFirstRunHomePodDialog_preRFv2(app:firstPhrase:secondPhrase:);
  uint64_t v8 = v0[11];
  uint64_t v7 = v0[12];
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[2];
  return v12(v10, v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = v5[12];
  uint64_t v7 = v5[11];
  uint64_t v8 = v5[10];
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v14();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:));
}

uint64_t AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult)?);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v5;
  v4[1] = AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v1, v3, 0, 0, &async function pointer to partial apply for closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:), v2, v1);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  uint64_t v5 = type metadata accessor for TemplatingText();
  v4[15] = v5;
  v4[16] = *(void *)(v5 - 8);
  v4[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  v4[18] = swift_task_alloc();
  v4[19] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult)?);
  v4[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v4[21] = v6;
  v4[22] = *(void *)(v6 - 8);
  v4[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult)??);
  v4[24] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<(Int, TemplatingResult)?>.Iterator);
  v4[25] = v7;
  v4[26] = *(void *)(v7 - 8);
  v4[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  return _swift_task_switch(closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:), 0, 0);
}

uint64_t closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v23 = *(void *)(v1 + 16);
  if (v23)
  {
    uint64_t v22 = type metadata accessor for TaskPriority();
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
    uint64_t v3 = (void *)(v1 + 40);
    do
    {
      uint64_t v5 = *(void *)(v0 + 224);
      uint64_t v4 = *(void *)(v0 + 232);
      uint64_t v6 = *(void *)(v0 + 112);
      uint64_t v24 = v3;
      uint64_t v7 = *(v3 - 1);
      uint64_t v8 = *v3;
      __swift_storeEnumTagSinglePayload(v4, 1, 1, v22);
      uint64_t v9 = (void *)swift_allocObject();
      v9[2] = 0;
      v9[3] = 0;
      v9[4] = v6;
      v9[5] = v7;
      v9[6] = v8;
      v9[7] = v2;
      outlined init with copy of TaskPriority?(v4, v5);
      LODWORD(v5) = __swift_getEnumTagSinglePayload(v5, 1, v22);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v5 == 1)
      {
        _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 224), &demangling cache variable for type metadata for TaskPriority?);
      }
      else
      {
        TaskPriority.rawValue.getter();
        OUTLINED_FUNCTION_66();
        v10();
      }
      if (v9[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v13 = v12;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v13 = 0;
      }
      uint64_t v14 = **(void **)(v0 + 96);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:);
      *(void *)(v15 + 24) = v9;
      uint64_t v16 = v13 | v11;
      if (v13 | v11)
      {
        uint64_t v16 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v11;
        *(void *)(v0 + 40) = v13;
      }
      ++v2;
      uint64_t v17 = *(void *)(v0 + 232);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v16;
      *(void *)(v0 + 64) = v14;
      swift_task_create();
      swift_release();
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v17, &demangling cache variable for type metadata for TaskPriority?);
      uint64_t v3 = v24 + 2;
    }
    while (v23 != v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  TaskGroup.makeAsyncIterator()();
  *(void *)(v0 + 240) = v18;
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v19;
  *uint64_t v19 = v0;
  v19[1] = closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_2_1();
  return TaskGroup.Iterator.next(isolation:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(void);
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  Swift::Int v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  void (*v44)(void);
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;

  uint64_t v48 = v0;
  if (__swift_getEnumTagSinglePayload(v0[24], 1, v0[19]) == 1)
  {
    uint64_t v1 = v0[30];
    OUTLINED_FUNCTION_2_6();
    v2();
    swift_bridgeObjectRetain_n();
    uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v1);
    swift_bridgeObjectRelease();
    uint64_t v47 = v3;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v47);
    uint64_t v14 = (void *)v0[11];
    swift_bridgeObjectRelease();
    uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi3key_SS5valuetG_SSs5NeverOTg50126_s18SiriLinkFlowPlugin28AutoShortcutDialogTemplatingC04makeF7Phrases08shortcutJ0SaySSGAF_tYaKFAFScGySi_0a3KitC00H6ResultVtSgGzv64XEfU_SSSi3key_SS5valuet_tcfu_33_9884fbf80a26ee2659924377586aa6b9Y20AL_SSAMtSSTf3nnnpk_nTf1cn_n((uint64_t)v47);
    swift_release();
    swift_bridgeObjectRelease();
    *uint64_t v14 = v15;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_2_1();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v4 = v0[20];
  uint64_t v5 = OUTLINED_FUNCTION_30_0();
  outlined init with take of (Int, TemplatingResult)?(v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult));
  if (__swift_getEnumTagSinglePayload(v4, 1, v7) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0[20], &demangling cache variable for type metadata for (Int, TemplatingResult)?);
    goto LABEL_26;
  }
  uint64_t v8 = (uint64_t *)v0[20];
  uint64_t v9 = *v8;
  (*(void (**)(void, char *, void))(v0[22] + 32))(v0[23], (char *)v8 + *(int *)(v7 + 48), v0[21]);
  uint64_t v10 = *(void *)(TemplatingResult.sections.getter() + 16);
  uint64_t v11 = type metadata accessor for TemplatingSection();
  if (v10)
  {
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v12 + 16))();
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 1;
  }
  uint64_t v18 = v0[18];
  __swift_storeEnumTagSinglePayload(v18, v13, 1, v11);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v18, 1, v11) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0[18], &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v19 = (void *)v0[30];
LABEL_25:
    OUTLINED_FUNCTION_2_6();
    v44();
    v0[30] = v19;
LABEL_26:
    uint64_t v45 = (void *)swift_task_alloc();
    v0[31] = v45;
    *uint64_t v45 = v0;
    v45[1] = closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:);
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_2_1();
    return TaskGroup.Iterator.next(isolation:)();
  }
  uint64_t v20 = v0[30];
  TemplatingSection.content.getter();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_66();
  v21();
  uint64_t v22 = TemplatingText.text.getter();
  uint64_t v24 = v23;
  uint64_t v25 = OUTLINED_FUNCTION_33_15();
  v26(v25);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v0[10] = v20;
  os_log_type_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  uint64_t v30 = *(void *)(v20 + 16);
  unint64_t v31 = (v29 & 1) == 0;
  uint64_t v32 = v30 + v31;
  if (__OFADD__(v30, v31))
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v33 = v28;
  uint64_t v34 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, String>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32))
  {
LABEL_20:
    uint64_t v19 = (void *)v0[10];
    if (v34)
    {
      uint64_t v39 = (uint64_t *)(v19[7] + 16 * v33);
      swift_bridgeObjectRelease();
      *uint64_t v39 = v22;
      v39[1] = v24;
LABEL_24:
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    v19[(v33 >> 6) + 8] |= 1 << v33;
    *(void *)(v19[6] + 8 * v33) = v9;
    uint64_t v40 = (uint64_t *)(v19[7] + 16 * v33);
    *uint64_t v40 = v22;
    v40[1] = v24;
    uint64_t v41 = v19[2];
    char v42 = __OFADD__(v41, 1);
    uint64_t v43 = v41 + 1;
    if (!v42)
    {
      v19[2] = v43;
      goto LABEL_24;
    }
LABEL_30:
    __break(1u);
    return TaskGroup.Iterator.next(isolation:)();
  }
  os_log_type_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v34 & 1) == (v36 & 1))
  {
    uint64_t v33 = v35;
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_2_1();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  _OWORD v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7[7] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for TemplatingResult();
  v7[8] = v8;
  v7[9] = *(void *)(v8 - 8);
  v7[10] = swift_task_alloc();
  return _swift_task_switch(closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:), 0, 0);
}

uint64_t closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)()
{
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_66_5();
  OUTLINED_FUNCTION_8_27();
  uint64_t v1 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_6_31(v1);
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 88) = v2;
  *uint64_t v2 = v3;
  v2[1] = closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:);
  OUTLINED_FUNCTION_30_15();
  return v7(v4, v5, v6, v7, v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 96) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)v0[2];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult));
  uint64_t v7 = (char *)v5 + *(int *)(v6 + 48);
  *uint64_t v5 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v7, v1, v3);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_errorRelease();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult));
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t AutoShortcutDialogTemplating.makeUserDeniedDialog()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutDialogTemplating.makeUserDeniedDialog());
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_56_6();
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(class metadata base offset for AutoShortcutCATsSimple + v1 + 176)
                         + **(int **)(class metadata base offset for AutoShortcutCATsSimple + v1 + 176));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutDialogTemplating.makeUserDeniedDialog();
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t AutoShortcutDialogTemplating.makeUserDeniedDialog_rfv1()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutDialogTemplating.makeUserDeniedDialog_rfv1());
}

uint64_t AutoShortcutDialogTemplating.makeUserDeniedDialog_rfv1()()
{
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_50_10();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(class metadata base offset for AutoShortcutCATs + v1 + 88)
                                       + **(int **)(class metadata base offset for AutoShortcutCATs + v1 + 88));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutDialogTemplating.makeUserDeniedDialog_rfv1();
  uint64_t v3 = *(void *)(v0 + 16);
  return v5(v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t AutoShortcutDialogTemplating.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  return v0;
}

uint64_t AutoShortcutDialogTemplating.__deallocating_deinit()
{
  AutoShortcutDialogTemplating.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_125;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t)specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v90 = a1;
  uint64_t v91 = result;
  uint64_t v93 = v3;
  uint64_t v94 = v6;
  if (v3 <= 0)
  {
    v95 = (char *)_swiftEmptyArrayStorage;
    unint64_t v29 = _swiftEmptyArrayStorage[2];
LABEL_91:
    if (v29 < 2)
    {
LABEL_102:
      uint64_t result = swift_bridgeObjectRelease();
      if (v93 >= -1)
      {
        *(void *)(v91 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_130;
    }
    uint64_t v83 = *v90;
    while (1)
    {
      unint64_t v84 = v29 - 2;
      if (v29 < 2) {
        break;
      }
      if (!v83) {
        goto LABEL_134;
      }
      uint64_t v85 = v95;
      uint64_t v86 = *(void *)&v95[16 * v84 + 32];
      uint64_t v87 = *(void *)&v95[16 * v29 + 24];
      uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v83 + 24 * v86), (char *)(v83 + 24 * *(void *)&v95[16 * v29 + 16]), v83 + 24 * v87, v94);
      if (v1) {
        goto LABEL_87;
      }
      if (v87 < v86) {
        goto LABEL_120;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
        uint64_t v85 = (char *)result;
      }
      if (v84 >= *((void *)v85 + 2)) {
        goto LABEL_121;
      }
      id v88 = &v85[16 * v84 + 32];
      *(void *)id v88 = v86;
      *((void *)v88 + 1) = v87;
      unint64_t v89 = *((void *)v85 + 2);
      if (v29 > v89) {
        goto LABEL_122;
      }
      uint64_t result = (uint64_t)memmove(&v85[16 * v29 + 16], &v85[16 * v29 + 32], 16 * (v89 - v29));
      v95 = v85;
      *((void *)v85 + 2) = v89 - 1;
      unint64_t v29 = v89 - 1;
      if (v89 <= 2) {
        goto LABEL_102;
      }
    }
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    return result;
  }
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  v95 = (char *)_swiftEmptyArrayStorage;
  uint64_t v92 = v5;
  while (1)
  {
    Swift::Int v9 = v7++;
    if (v7 < v3)
    {
      uint64_t v10 = *(void *)(v8 + 24 * v7);
      uint64_t v11 = *(void *)(v8 + 24 * v9);
      Swift::Int v7 = v9 + 2;
      if (v9 + 2 < v3)
      {
        uint64_t v12 = (uint64_t *)(v8 + 48 + 24 * v9);
        uint64_t v13 = v10;
        while (1)
        {
          uint64_t v15 = *v12;
          v12 += 3;
          uint64_t v14 = v15;
          if (v10 < v11 == v15 >= v13) {
            break;
          }
          ++v7;
          uint64_t v13 = v14;
          if (v7 >= v3)
          {
            Swift::Int v7 = v3;
            break;
          }
        }
      }
      if (v10 < v11)
      {
        if (v7 < v9) {
          goto LABEL_127;
        }
        if (v9 < v7)
        {
          uint64_t v16 = 24 * v7;
          uint64_t v17 = 24 * v9;
          Swift::Int v18 = v7;
          Swift::Int v19 = v9;
          do
          {
            if (v19 != --v18)
            {
              if (!v8) {
                goto LABEL_133;
              }
              uint64_t v20 = v8 + v17;
              uint64_t v21 = v8 + v16;
              uint64_t v22 = *(void *)(v8 + v17 + 16);
              long long v23 = *(_OWORD *)(v8 + v17);
              uint64_t v24 = *(void *)(v8 + v16 - 8);
              *(_OWORD *)uint64_t v20 = *(_OWORD *)(v8 + v16 - 24);
              *(void *)(v20 + 16) = v24;
              *(_OWORD *)(v21 - 24) = v23;
              *(void *)(v21 - 8) = v22;
            }
            ++v19;
            v16 -= 24;
            v17 += 24;
          }
          while (v19 < v18);
        }
      }
    }
    if (v7 >= v3) {
      goto LABEL_26;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_124;
    }
    if (v7 - v9 >= v5) {
      goto LABEL_26;
    }
    Swift::Int v25 = v9 + v5;
    if (__OFADD__(v9, v5)) {
      goto LABEL_128;
    }
    if (v25 >= v3) {
      Swift::Int v25 = v3;
    }
    if (v25 < v9) {
      goto LABEL_129;
    }
    if (v7 == v25)
    {
LABEL_26:
      uint64_t v26 = v95;
    }
    else
    {
      uint64_t v77 = v8 - 24 + 24 * v7;
      uint64_t v26 = v95;
      do
      {
        uint64_t v78 = *(void *)(v8 + 24 * v7);
        Swift::Int v79 = v9;
        uint64_t v80 = v77;
        do
        {
          if (v78 >= *(void *)v80) {
            break;
          }
          if (!v8) {
            goto LABEL_131;
          }
          uint64_t v81 = *(void *)(v80 + 32);
          uint64_t v82 = *(void *)(v80 + 40);
          *(_OWORD *)(v80 + 24) = *(_OWORD *)v80;
          *(void *)(v80 + 40) = *(void *)(v80 + 16);
          *(void *)uint64_t v80 = v78;
          *(void *)(v80 + 8) = v81;
          *(void *)(v80 + 16) = v82;
          v80 -= 24;
          ++v79;
        }
        while (v7 != v79);
        ++v7;
        v77 += 24;
      }
      while (v7 != v25);
      Swift::Int v7 = v25;
    }
    if (v7 < v9) {
      goto LABEL_123;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v26 + 2) + 1, 1, v26);
      uint64_t v26 = (char *)result;
    }
    unint64_t v28 = *((void *)v26 + 2);
    unint64_t v27 = *((void *)v26 + 3);
    unint64_t v29 = v28 + 1;
    if (v28 >= v27 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v26);
      uint64_t v26 = (char *)result;
    }
    *((void *)v26 + 2) = v29;
    uint64_t v30 = v26 + 32;
    unint64_t v31 = (Swift::Int *)&v26[16 * v28 + 32];
    *unint64_t v31 = v9;
    v31[1] = v7;
    v95 = v26;
    if (v28) {
      break;
    }
    unint64_t v29 = 1;
LABEL_75:
    uint64_t v5 = v92;
    Swift::Int v3 = v93;
    if (v7 >= v93) {
      goto LABEL_91;
    }
  }
  while (1)
  {
    unint64_t v32 = v29 - 1;
    if (v29 >= 4)
    {
      uint64_t v37 = &v30[2 * v29];
      uint64_t v38 = *(v37 - 8);
      uint64_t v39 = *(v37 - 7);
      BOOL v43 = __OFSUB__(v39, v38);
      uint64_t v40 = v39 - v38;
      if (v43) {
        goto LABEL_108;
      }
      uint64_t v42 = *(v37 - 6);
      uint64_t v41 = *(v37 - 5);
      BOOL v43 = __OFSUB__(v41, v42);
      uint64_t v35 = v41 - v42;
      char v36 = v43;
      if (v43) {
        goto LABEL_109;
      }
      unint64_t v44 = v29 - 2;
      uint64_t v45 = &v30[2 * v29 - 4];
      uint64_t v47 = *v45;
      uint64_t v46 = v45[1];
      BOOL v43 = __OFSUB__(v46, v47);
      uint64_t v48 = v46 - v47;
      if (v43) {
        goto LABEL_110;
      }
      BOOL v43 = __OFADD__(v35, v48);
      uint64_t v49 = v35 + v48;
      if (v43) {
        goto LABEL_112;
      }
      if (v49 >= v40)
      {
        id v67 = &v30[2 * v32];
        uint64_t v69 = *v67;
        uint64_t v68 = v67[1];
        BOOL v43 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v43) {
          goto LABEL_118;
        }
        BOOL v60 = v35 < v70;
        goto LABEL_64;
      }
    }
    else
    {
      if (v29 != 3)
      {
        uint64_t v61 = *((void *)v26 + 4);
        uint64_t v62 = *((void *)v26 + 5);
        BOOL v43 = __OFSUB__(v62, v61);
        uint64_t v54 = v62 - v61;
        char v55 = v43;
        goto LABEL_58;
      }
      uint64_t v34 = *((void *)v26 + 4);
      uint64_t v33 = *((void *)v26 + 5);
      BOOL v43 = __OFSUB__(v33, v34);
      uint64_t v35 = v33 - v34;
      char v36 = v43;
    }
    if (v36) {
      goto LABEL_111;
    }
    unint64_t v44 = v29 - 2;
    os_log_type_t v50 = &v30[2 * v29 - 4];
    uint64_t v52 = *v50;
    uint64_t v51 = v50[1];
    BOOL v53 = __OFSUB__(v51, v52);
    uint64_t v54 = v51 - v52;
    char v55 = v53;
    if (v53) {
      goto LABEL_113;
    }
    uint64_t v56 = &v30[2 * v32];
    uint64_t v58 = *v56;
    uint64_t v57 = v56[1];
    BOOL v43 = __OFSUB__(v57, v58);
    uint64_t v59 = v57 - v58;
    if (v43) {
      goto LABEL_115;
    }
    if (__OFADD__(v54, v59)) {
      goto LABEL_117;
    }
    if (v54 + v59 >= v35)
    {
      BOOL v60 = v35 < v59;
LABEL_64:
      if (v60) {
        unint64_t v32 = v44;
      }
      goto LABEL_66;
    }
LABEL_58:
    if (v55) {
      goto LABEL_114;
    }
    id v63 = &v30[2 * v32];
    uint64_t v65 = *v63;
    uint64_t v64 = v63[1];
    BOOL v43 = __OFSUB__(v64, v65);
    uint64_t v66 = v64 - v65;
    if (v43) {
      goto LABEL_116;
    }
    if (v66 < v54) {
      goto LABEL_75;
    }
LABEL_66:
    unint64_t v71 = v32 - 1;
    if (v32 - 1 >= v29)
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    if (!v8) {
      goto LABEL_132;
    }
    uint64_t v72 = &v30[2 * v71];
    uint64_t v73 = *v72;
    unint64_t v74 = &v30[2 * v32];
    uint64_t v75 = v74[1];
    uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v8 + 24 * *v72), (char *)(v8 + 24 * *v74), v8 + 24 * v75, v94);
    if (v1) {
      break;
    }
    if (v75 < v73) {
      goto LABEL_105;
    }
    if (v32 > *((void *)v95 + 2)) {
      goto LABEL_106;
    }
    *uint64_t v72 = v73;
    v30[2 * v71 + 1] = v75;
    unint64_t v76 = *((void *)v95 + 2);
    if (v32 >= v76) {
      goto LABEL_107;
    }
    uint64_t v26 = v95;
    unint64_t v29 = v76 - 1;
    uint64_t result = (uint64_t)memmove(&v30[2 * v32], v74 + 2, 16 * (v76 - 1 - v32));
    *((void *)v95 + 2) = v76 - 1;
    if (v76 <= 2) {
      goto LABEL_75;
    }
  }
LABEL_87:
  uint64_t result = swift_bridgeObjectRelease();
  if (v93 < -1) {
    goto LABEL_126;
  }
  *(void *)(v91 + 16) = 0;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  int v15;
  Swift::Int v16;
  void *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;

  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_144;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t)specialized static Array._allocateUninitialized(_:)(v3 / 2, &demangling cache variable for type metadata for (key: String, value: Double));
  v102 = result;
  v103 = v3;
  v105 = v6;
  v100 = a1;
  if (v3 <= 0)
  {
    Swift::Int v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v42 = _swiftEmptyArrayStorage[2];
LABEL_110:
    uint64_t result = (uint64_t)v9;
    if (v42 < 2)
    {
LABEL_121:
      uint64_t result = swift_bridgeObjectRelease();
      if (v103 >= -1)
      {
        *(void *)(v102 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_149;
    }
    uint64_t v91 = *v100;
    while (1)
    {
      uint64_t v92 = v42 - 2;
      if (v42 < 2) {
        break;
      }
      if (!v91) {
        goto LABEL_153;
      }
      uint64_t v93 = result;
      uint64_t v94 = *(void *)(result + 32 + 16 * v92);
      v95 = *(void *)(result + 32 + 16 * (v42 - 1) + 8);
      uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v91 + 24 * v94), (char *)(v91 + 24 * *(void *)(result + 32 + 16 * (v42 - 1))), v91 + 24 * v95, v105);
      if (v1) {
        goto LABEL_106;
      }
      if (v95 < v94) {
        goto LABEL_139;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v93);
        uint64_t v93 = result;
      }
      if (v92 >= *(void *)(v93 + 16)) {
        goto LABEL_140;
      }
      v96 = (void *)(v93 + 32 + 16 * v92);
      *v96 = v94;
      v96[1] = v95;
      v97 = *(void *)(v93 + 16);
      if (v42 > v97) {
        goto LABEL_141;
      }
      memmove((void *)(v93 + 32 + 16 * (v42 - 1)), (const void *)(v93 + 32 + 16 * v42), 16 * (v97 - v42));
      uint64_t result = v93;
      *(void *)(v93 + 16) = v97 - 1;
      uint64_t v42 = v97 - 1;
      if (v97 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return result;
  }
  v101 = v5;
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  v98 = *a1 - 24;
  v99 = *a1 + 8;
  Swift::Int v9 = (char *)_swiftEmptyArrayStorage;
  v104 = v8;
  while (1)
  {
    uint64_t v10 = v7++;
    if (v7 >= v3) {
      goto LABEL_32;
    }
    uint64_t v11 = (uint64_t *)(v8 + 24 * v7);
    uint64_t result = *v11;
    uint64_t v12 = v11[1];
    uint64_t v13 = (void *)(v8 + 24 * v10);
    if (result == *v13 && v12 == v13[1])
    {
      uint64_t v16 = v10 + 2;
      if (v10 + 2 >= v103) {
        goto LABEL_31;
      }
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v15 = result;
      uint64_t v16 = v10 + 2;
      if (v10 + 2 >= v103) {
        goto LABEL_23;
      }
    }
    uint64_t v17 = (void *)(v99 + 24 * v16);
    do
    {
      uint64_t result = *(v17 - 1);
      Swift::Int v18 = (void *)(v8 + 24 * v7);
      if (result == *v18 && *v17 == v18[1])
      {
        if (v15) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((v15 ^ result)) {
          goto LABEL_23;
        }
      }
      v17 += 3;
      uint64_t v20 = v16 + 1;
      Swift::Int v7 = v16;
      uint64_t v16 = v20;
    }
    while (v20 < v103);
    uint64_t v16 = v20;
LABEL_23:
    Swift::Int v7 = v16;
    if (v15)
    {
LABEL_24:
      if (v16 < v10) {
        goto LABEL_148;
      }
      if (v10 < v16)
      {
        uint64_t v21 = 24 * v16;
        uint64_t v22 = 24 * v10;
        long long v23 = v16;
        uint64_t v24 = v10;
        do
        {
          if (v24 != --v23)
          {
            if (!v8) {
              goto LABEL_152;
            }
            Swift::Int v25 = v8 + v22;
            uint64_t v26 = v8 + v21;
            unint64_t v27 = *(void *)(v8 + v22);
            unint64_t v28 = *(void *)(v8 + v22 + 8);
            unint64_t v29 = *(void *)(v8 + v22 + 16);
            uint64_t v30 = *(void *)(v8 + v21 - 8);
            *(_OWORD *)Swift::Int v25 = *(_OWORD *)(v8 + v21 - 24);
            *(void *)(v25 + 16) = v30;
            *(void *)(v26 - 24) = v27;
            *(void *)(v26 - 16) = v28;
            *(void *)(v26 - 8) = v29;
          }
          ++v24;
          v21 -= 24;
          v22 += 24;
        }
        while (v24 < v23);
      }
LABEL_31:
      Swift::Int v7 = v16;
    }
LABEL_32:
    if (v7 < v103)
    {
      if (__OFSUB__(v7, v10)) {
        goto LABEL_143;
      }
      if (v7 - v10 < v101)
      {
        if (__OFADD__(v10, v101)) {
          goto LABEL_146;
        }
        if (v10 + v101 >= v103) {
          unint64_t v31 = v103;
        }
        else {
          unint64_t v31 = v10 + v101;
        }
        if (v31 < v10) {
          goto LABEL_147;
        }
        if (v7 != v31)
        {
          unint64_t v32 = (uint64_t *)(v98 + 24 * v7);
          do
          {
            uint64_t v33 = (uint64_t *)(v8 + 24 * v7);
            uint64_t result = *v33;
            uint64_t v34 = v33[1];
            uint64_t v35 = v10;
            char v36 = v32;
            do
            {
              if (result == *v36 && v34 == v36[1]) {
                break;
              }
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) == 0) {
                break;
              }
              if (!v8) {
                goto LABEL_150;
              }
              uint64_t result = v36[3];
              uint64_t v34 = v36[4];
              uint64_t v38 = v36[5];
              uint64_t v39 = v36[2];
              *(_OWORD *)(v36 + 3) = *(_OWORD *)v36;
              v36[5] = v39;
              *char v36 = result;
              v36[1] = v34;
              v36[2] = v38;
              v36 -= 3;
              ++v35;
            }
            while (v7 != v35);
            ++v7;
            v32 += 3;
          }
          while (v7 != v31);
          Swift::Int v7 = v31;
        }
      }
    }
    if (v7 < v10) {
      goto LABEL_142;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
      Swift::Int v9 = (char *)result;
    }
    uint64_t v41 = *((void *)v9 + 2);
    uint64_t v40 = *((void *)v9 + 3);
    uint64_t v42 = v41 + 1;
    if (v41 >= v40 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v9);
      Swift::Int v9 = (char *)result;
    }
    *((void *)v9 + 2) = v42;
    BOOL v43 = v9 + 32;
    unint64_t v44 = &v9[16 * v41 + 32];
    *(void *)unint64_t v44 = v10;
    *((void *)v44 + 1) = v7;
    if (v41) {
      break;
    }
    uint64_t v42 = 1;
    uint64_t v8 = v104;
LABEL_101:
    Swift::Int v3 = v103;
    if (v7 >= v103) {
      goto LABEL_110;
    }
  }
  uint64_t v8 = v104;
  while (1)
  {
    uint64_t v45 = v42 - 1;
    if (v42 >= 4)
    {
      os_log_type_t v50 = &v43[2 * v42];
      uint64_t v51 = *(v50 - 8);
      uint64_t v52 = *(v50 - 7);
      uint64_t v56 = __OFSUB__(v52, v51);
      BOOL v53 = v52 - v51;
      if (v56) {
        goto LABEL_127;
      }
      char v55 = *(v50 - 6);
      uint64_t v54 = *(v50 - 5);
      uint64_t v56 = __OFSUB__(v54, v55);
      uint64_t v48 = v54 - v55;
      uint64_t v49 = v56;
      if (v56) {
        goto LABEL_128;
      }
      uint64_t v57 = v42 - 2;
      uint64_t v58 = &v43[2 * v42 - 4];
      BOOL v60 = *v58;
      uint64_t v59 = v58[1];
      uint64_t v56 = __OFSUB__(v59, v60);
      uint64_t v61 = v59 - v60;
      if (v56) {
        goto LABEL_129;
      }
      uint64_t v56 = __OFADD__(v48, v61);
      uint64_t v62 = v48 + v61;
      if (v56) {
        goto LABEL_131;
      }
      if (v62 >= v53)
      {
        uint64_t v80 = &v43[2 * v45];
        uint64_t v82 = *v80;
        uint64_t v81 = v80[1];
        uint64_t v56 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v56) {
          goto LABEL_137;
        }
        uint64_t v73 = v48 < v83;
        goto LABEL_90;
      }
    }
    else
    {
      if (v42 != 3)
      {
        unint64_t v74 = *((void *)v9 + 4);
        uint64_t v75 = *((void *)v9 + 5);
        uint64_t v56 = __OFSUB__(v75, v74);
        id v67 = v75 - v74;
        uint64_t v68 = v56;
        goto LABEL_84;
      }
      uint64_t v47 = *((void *)v9 + 4);
      uint64_t v46 = *((void *)v9 + 5);
      uint64_t v56 = __OFSUB__(v46, v47);
      uint64_t v48 = v46 - v47;
      uint64_t v49 = v56;
    }
    if (v49) {
      goto LABEL_130;
    }
    uint64_t v57 = v42 - 2;
    id v63 = &v43[2 * v42 - 4];
    uint64_t v65 = *v63;
    uint64_t v64 = v63[1];
    uint64_t v66 = __OFSUB__(v64, v65);
    id v67 = v64 - v65;
    uint64_t v68 = v66;
    if (v66) {
      goto LABEL_132;
    }
    uint64_t v69 = &v43[2 * v45];
    unint64_t v71 = *v69;
    uint64_t v70 = v69[1];
    uint64_t v56 = __OFSUB__(v70, v71);
    uint64_t v72 = v70 - v71;
    if (v56) {
      goto LABEL_134;
    }
    if (__OFADD__(v67, v72)) {
      goto LABEL_136;
    }
    if (v67 + v72 >= v48)
    {
      uint64_t v73 = v48 < v72;
LABEL_90:
      if (v73) {
        uint64_t v45 = v57;
      }
      goto LABEL_92;
    }
LABEL_84:
    if (v68) {
      goto LABEL_133;
    }
    unint64_t v76 = &v43[2 * v45];
    uint64_t v78 = *v76;
    uint64_t v77 = v76[1];
    uint64_t v56 = __OFSUB__(v77, v78);
    Swift::Int v79 = v77 - v78;
    if (v56) {
      goto LABEL_135;
    }
    if (v79 < v67) {
      goto LABEL_101;
    }
LABEL_92:
    unint64_t v84 = v45 - 1;
    if (v45 - 1 >= v42)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v8) {
      goto LABEL_151;
    }
    uint64_t v85 = v8;
    uint64_t v86 = &v43[2 * v84];
    uint64_t v87 = *v86;
    id v88 = &v43[2 * v45];
    unint64_t v89 = v88[1];
    uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v85 + 24 * *v86), (char *)(v85 + 24 * *v88), v85 + 24 * v89, v105);
    if (v1) {
      break;
    }
    if (v89 < v87) {
      goto LABEL_124;
    }
    if (v45 > *((void *)v9 + 2)) {
      goto LABEL_125;
    }
    *uint64_t v86 = v87;
    v43[2 * v84 + 1] = v89;
    v90 = *((void *)v9 + 2);
    if (v45 >= v90) {
      goto LABEL_126;
    }
    uint64_t v42 = v90 - 1;
    uint64_t result = (uint64_t)memmove(&v43[2 * v45], v88 + 2, 16 * (v90 - 1 - v45));
    *((void *)v9 + 2) = v90 - 1;
    uint64_t v73 = v90 > 2;
    uint64_t v8 = v104;
    if (!v73) {
      goto LABEL_101;
    }
  }
LABEL_106:
  uint64_t result = swift_bridgeObjectRelease();
  if (v103 < -1) {
    goto LABEL_145;
  }
  *(void *)(v102 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 24 * a3 - 24;
    while (2)
    {
      uint64_t v6 = *(void *)(v4 + 24 * a3);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      do
      {
        if (v6 >= *(void *)v8) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = *(void *)(v8 + 32);
        uint64_t v10 = *(void *)(v8 + 40);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)v8;
        *(void *)(v8 + 40) = *(void *)(v8 + 16);
        *(void *)uint64_t v8 = v6;
        *(void *)(v8 + 8) = v9;
        *(void *)(v8 + 16) = v10;
        v8 -= 24;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 24;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 24 * a3 - 24;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 24 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (void *)v8;
      do
      {
        if (result == *v12 && v10 == v12[1]) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        uint64_t result = v12[3];
        uint64_t v10 = v12[4];
        uint64_t v14 = v12[5];
        uint64_t v15 = v12[2];
        *(_OWORD *)(v12 + 3) = *(_OWORD *)v12;
        v12[5] = v15;
        *uint64_t v12 = result;
        v12[1] = v10;
        void v12[2] = v14;
        v12 -= 3;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 24;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 24, a4);
    uint64_t v12 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_39;
    }
    unint64_t v19 = a3 - 24;
    while (1)
    {
      uint64_t v20 = (char *)(v19 + 24);
      uint64_t v21 = v6 - 24;
      if (*((void *)v12 - 3) >= *((void *)v6 - 3))
      {
        BOOL v23 = v20 != v12 || v19 >= (unint64_t)v12;
        uint64_t v21 = v12 - 24;
        v12 -= 24;
        if (!v23) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v22 = v20 != v6 || v19 >= (unint64_t)v6;
        v6 -= 24;
        if (!v22) {
          goto LABEL_35;
        }
      }
      long long v24 = *(_OWORD *)v21;
      *(void *)(v19 + 16) = *((void *)v21 + 2);
      *(_OWORD *)unint64_t v19 = v24;
LABEL_35:
      v19 -= 24;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_39;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 24, a4);
  uint64_t v12 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (*(void *)v6 >= *(void *)v4)
    {
      uint64_t v14 = v4;
      BOOL v15 = v7 == v4;
      v4 += 24;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      v7 += 24;
      if (v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_17;
      }
    }
    uint64_t v14 = v6;
    BOOL v15 = v7 == v6;
    v6 += 24;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    long long v16 = *(_OWORD *)v14;
    *((void *)v7 + 2) = *((void *)v14 + 2);
    *(_OWORD *)uint64_t v7 = v16;
    goto LABEL_12;
  }
LABEL_17:
  uint64_t v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 24, v6);
  return 1;
}

{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v14;
  char *v15;
  long long v16;
  unint64_t v19;
  char *v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  long long v25;

  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 24, a4);
    uint64_t v12 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_47;
    }
    unint64_t v19 = a3 - 24;
    while (1)
    {
      uint64_t v20 = (char *)(v19 + 24);
      uint64_t v21 = v12 - 24;
      BOOL v22 = *((void *)v12 - 3) == *((void *)v6 - 3) && *((void *)v12 - 2) == *((void *)v6 - 2);
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        long long v24 = v20 != v12 || v19 >= (unint64_t)v12;
        v12 -= 24;
        if (!v24) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v23 = v20 != v6 || v19 >= (unint64_t)v6;
        uint64_t v21 = v6 - 24;
        v6 -= 24;
        if (!v23) {
          goto LABEL_43;
        }
      }
      Swift::Int v25 = *(_OWORD *)v21;
      *(void *)(v19 + 16) = *((void *)v21 + 2);
      *(_OWORD *)unint64_t v19 = v25;
LABEL_43:
      v19 -= 24;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 24, a4);
  uint64_t v12 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      uint64_t v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      BOOL v15 = v4;
      uint64_t v14 = v7 == v4;
      v4 += 24;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 24;
      if (v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    BOOL v15 = v6;
    uint64_t v14 = v7 == v6;
    v6 += 24;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    long long v16 = *(_OWORD *)v15;
    *((void *)v7 + 2) = *((void *)v15 + 2);
    *(_OWORD *)uint64_t v7 = v16;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 24, v6);
  return 1;
}

void *specialized AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  a5[12] = a6;
  a5[13] = a7;
  __swift_allocate_boxed_opaque_existential_1(a5 + 9);
  OUTLINED_FUNCTION_40();
  (*(void (**)(void))(v11 + 32))();
  outlined init with take of AceServiceInvokerAsync(a1, (uint64_t)(a5 + 2));
  a5[7] = a2;
  a5[8] = a3;
  return a5;
}

unint64_t type metadata accessor for DialogElement()
{
  unint64_t result = lazy cache variable for type metadata for DialogElement;
  if (!lazy cache variable for type metadata for DialogElement)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
  }
  return result;
}

uint64_t partial apply for closure #1 in AutoShortcutDialogTemplating.makeAutoShortcutFirstRunPattern(app:)(uint64_t a1)
{
  return closure #1 in AutoShortcutDialogTemplating.makeConfirmChangeEnablementPattern(appName:isEnabling:)(a1);
}

uint64_t partial apply for closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_10_13(v7);
  *uint64_t v8 = v9;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)(v4, v2, v6, v5);
}

uint64_t type metadata accessor for AutoShortcutDialogTemplating()
{
  return self;
}

ValueMetadata *type metadata accessor for AutoShortcutDialogTemplating.ButtonLabels()
{
  return &type metadata for AutoShortcutDialogTemplating.ButtonLabels;
}

uint64_t sub_14DED0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_10_13(v9);
  *uint64_t v10 = v11;
  v10[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return closure #1 in closure #1 in AutoShortcutDialogTemplating.makeShortcutPhrases(shortcutPhrases:)(v2, v3, v4, v5, v6, v8, v7);
}

uint64_t sub_14DFE0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5TA()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_13(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5Tu
                             + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSi_11SiriKitFlow16TemplatingResultVtSg_Tg5Tu);
  return v3();
}

uint64_t outlined init with take of (Int, TemplatingResult)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, TemplatingResult)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_6_31(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_8_27()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_11_30(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_18_19(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return DeviceState.asSiriKitDeviceState()(v1, v2);
}

uint64_t OUTLINED_FUNCTION_19_18(float a1)
{
  *uint64_t v1 = a1;
  return swift_errorRetain();
}

uint64_t OUTLINED_FUNCTION_20_27()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_21_19(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_23_21(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

char *OUTLINED_FUNCTION_33_17@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_38_14()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_39_13()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_41_15()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_42_16(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_errorRetain();
}

void *OUTLINED_FUNCTION_44_11()
{
  return specialized AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)(v3, v2, v1, v6, v0, v4, v5);
}

uint64_t OUTLINED_FUNCTION_47_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_9()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_53_5()
{
  return *(void *)(v0 + 48);
}

uint64_t OUTLINED_FUNCTION_54_6(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_55_6()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_57_5()
{
  return *(void *)(v0 + 24);
}

uint64_t OUTLINED_FUNCTION_58_10()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_59_8()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_62_6()
{
  void *v0 = v1;
  return swift_errorRelease();
}

uint64_t OUTLINED_FUNCTION_65_6(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_66_5()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_67_7()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_72_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_73_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_74_2@<X0>(uint64_t a1@<X8>)
{
  __swift_project_boxed_opaque_existential_1((void *)(a1 + 72), *(void *)(a1 + 96));
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_75_5()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_76_7()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_79_5()
{
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_80_4()
{
  return v0;
}

uint64_t AutoShortcutFirstRunWatchVisual.enableButtonLabel.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t AutoShortcutFirstRunWatchVisual.cancelButtonLabel.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t AutoShortcutFirstRunWatchVisual.moreShortcutsLabel.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t AutoShortcutFirstRunWatchVisual.promptLabel.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t AutoShortcutAppEnabledVisual.showOnWatch.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t AutoShortcutAppEnabledVisual.response.getter()
{
  OUTLINED_FUNCTION_9_0();
  v1[13] = v2;
  v1[14] = v0;
  uint64_t v3 = type metadata accessor for CustomCanvas();
  v1[15] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[16] = v4;
  v1[17] = swift_task_alloc();
  return _swift_task_switch(AutoShortcutAppEnabledVisual.response.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = *(uint64_t **)(v0 + 112);
  uint64_t v2 = v1[4];
  Swift::Int v18 = v1[5];
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[6];
  uint64_t v6 = v1[7];
  uint64_t v8 = v1[8];
  if (v1[9]) {
    uint64_t v9 = 4;
  }
  else {
    uint64_t v9 = 3;
  }
  uint64_t v10 = one-time initialization token for encoder;
  unint64_t v19 = *v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = v19;
  *(void *)(v0 + 24) = 3;
  *(void *)(v0 + 32) = v18;
  *(void *)(v0 + 40) = v7;
  *(void *)(v0 + 48) = v5;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = v3;
  *(void *)(v0 + 72) = v4;
  *(void *)(v0 + 80) = v6;
  *(void *)(v0 + 88) = v8;
  *(unsigned char *)(v0 + 96) = v9;
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v11 = *(void *)(v0 + 136);
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 128);
  CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SectionConvertible>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_212160;
  *(void *)(v14 + 56) = v12;
  *(void *)(v14 + 64) = &protocol witness table for CustomCanvas;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v14 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(boxed_opaque_existential_1, v11, v12);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  swift_task_dealloc();
  long long v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t AutoShortcutAppEnabledVisual.data.getter()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for Response();
  v0[2] = v1;
  OUTLINED_FUNCTION_1_0(v1);
  v0[3] = v2;
  v0[4] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = AutoShortcutAppEnabledVisual.data.getter;
  return AutoShortcutAppEnabledVisual.response.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ShowAlertVisual.data.getter;
  }
  else {
    uint64_t v2 = ShowAlertVisual.data.getter;
  }
  return _swift_task_switch(v2, 0, 0);
}

void __swiftcall AutoShortcutAppEnabledVisual.init(shortcutPhrases:moreShortcutsLabel:messageLabel:bundleId:footnoteLabel:showOnWatch:)(SiriLinkFlowPlugin::AutoShortcutAppEnabledVisual *__return_ptr retstr, Swift::OpaquePointer shortcutPhrases, Swift::String_optional moreShortcutsLabel, Swift::String messageLabel, Swift::String bundleId, Swift::String footnoteLabel, Swift::Bool showOnWatch)
{
  retstr->shortcutPhrases = shortcutPhrases;
  retstr->moreShortcutsLabel = moreShortcutsLabel;
  retstr->messageLabel = messageLabel;
  retstr->bundleId = bundleId;
  retstr->footnoteLabel = footnoteLabel;
  retstr->showOnWatch = showOnWatch;
}

uint64_t destroy for AutoShortcutAppEnabledVisual()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AutoShortcutAppEnabledVisual(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutoShortcutAppEnabledVisual(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void *__swift_memcpy73_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x49uLL);
}

uint64_t assignWithTake for AutoShortcutAppEnabledVisual(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutAppEnabledVisual(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 73))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutAppEnabledVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutAppEnabledVisual()
{
  return &type metadata for AutoShortcutAppEnabledVisual;
}

uint64_t UsoEntity_common_GeographicArea.toLocation()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for County?);
  uint64_t v1 = OUTLINED_FUNCTION_16(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_50_1();
  uint64_t v102 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationName?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_50_1();
  uint64_t v101 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AddressReference?);
  uint64_t v7 = OUTLINED_FUNCTION_16(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_50_1();
  uint64_t v100 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContinentName?);
  uint64_t v10 = OUTLINED_FUNCTION_16(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_50_1();
  uint64_t v99 = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StreetAddress?);
  uint64_t v13 = OUTLINED_FUNCTION_16(v12);
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_4_31();
  uint64_t v15 = v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Landmark?);
  uint64_t v17 = OUTLINED_FUNCTION_16(v16);
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_4_31();
  uint64_t v19 = v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proximity?);
  uint64_t v21 = OUTLINED_FUNCTION_16(v20);
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_20_0();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Place?);
  uint64_t v26 = OUTLINED_FUNCTION_16(v25);
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_20_0();
  uint64_t v29 = v28 - v27;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Centroid?);
  uint64_t v31 = OUTLINED_FUNCTION_16(v30);
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_20_0();
  uint64_t v34 = v33 - v32;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for City?);
  uint64_t v36 = OUTLINED_FUNCTION_16(v35);
  __chkstk_darwin(v36);
  OUTLINED_FUNCTION_20_0();
  uint64_t v39 = v38 - v37;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State?);
  uint64_t v41 = OUTLINED_FUNCTION_16(v40);
  __chkstk_darwin(v41);
  OUTLINED_FUNCTION_20_0();
  uint64_t v44 = v43 - v42;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zipcode?);
  uint64_t v46 = OUTLINED_FUNCTION_16(v45);
  __chkstk_darwin(v46);
  OUTLINED_FUNCTION_20_0();
  uint64_t v49 = v48 - v47;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Country?);
  uint64_t v51 = OUTLINED_FUNCTION_16(v50);
  __chkstk_darwin(v51);
  OUTLINED_FUNCTION_20_0();
  uint64_t v54 = v53 - v52;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Radius?);
  uint64_t v56 = OUTLINED_FUNCTION_16(v55);
  __chkstk_darwin(v56);
  OUTLINED_FUNCTION_20_0();
  uint64_t v59 = v58 - v57;
  uint64_t v60 = type metadata accessor for Radius();
  OUTLINED_FUNCTION_0_28(v59, v61, v62, v60);
  uint64_t v63 = type metadata accessor for Country();
  OUTLINED_FUNCTION_0_28(v54, v64, v65, v63);
  uint64_t v66 = type metadata accessor for Zipcode();
  OUTLINED_FUNCTION_0_28(v49, v67, v68, v66);
  uint64_t v69 = type metadata accessor for State();
  OUTLINED_FUNCTION_0_28(v44, v70, v71, v69);
  uint64_t v72 = type metadata accessor for City();
  OUTLINED_FUNCTION_0_28(v39, v73, v74, v72);
  uint64_t v75 = type metadata accessor for Centroid();
  OUTLINED_FUNCTION_0_28(v34, v76, v77, v75);
  uint64_t v78 = type metadata accessor for Place();
  OUTLINED_FUNCTION_0_28(v29, v79, v80, v78);
  uint64_t v81 = type metadata accessor for Proximity();
  OUTLINED_FUNCTION_0_28(v24, v82, v83, v81);
  uint64_t v84 = type metadata accessor for Landmark();
  OUTLINED_FUNCTION_0_28(v19, v85, v86, v84);
  uint64_t v87 = type metadata accessor for StreetAddress();
  OUTLINED_FUNCTION_0_28(v15, v88, v89, v87);
  uint64_t v90 = type metadata accessor for ContinentName();
  OUTLINED_FUNCTION_0_28(v99, v91, v92, v90);
  uint64_t v93 = type metadata accessor for AddressReference();
  OUTLINED_FUNCTION_0_28(v100, v94, v95, v93);
  uint64_t v96 = type metadata accessor for LocationName();
  __swift_storeEnumTagSinglePayload(v101, 1, 1, v96);
  dispatch thunk of UsoEntity_common_GeographicArea.name.getter();
  uint64_t v97 = type metadata accessor for County();
  __swift_storeEnumTagSinglePayload(v102, 1, 1, v97);
  return Location.init(radius:country:zipcode:state:city:centroid:place:timezone:proximity:landmark:streetAddress:continentName:addressReference:locationName:locationLabel:county:locationAccuracy:)();
}

uint64_t OUTLINED_FUNCTION_0_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 0;
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[27] = v2;
  v1[28] = v0;
  v1[25] = v3;
  v1[26] = v4;
  v1[24] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for DialogPhase();
  v1[30] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[31] = v7;
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[34] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[35] = v9;
  v1[36] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  v1[37] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[38] = v11;
  v1[39] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[40] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[41] = v13;
  v1[42] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  char v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  Swift::String v7;
  void *v8;
  void *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void *);
  uint64_t v13;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = OUTLINED_FUNCTION_47_10();
  v3(v2);
  RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v4 = OUTLINED_FUNCTION_48_8();
  v5(v4);
  if (v0)
  {
    uint64_t v6 = *(void *)(v1[28] + 56);
    v1[43] = v6;
    uint64_t v7 = INIntent.verb()();
    v1[44] = v7._object;
    uint64_t v12 = (uint64_t (*)(uint64_t, void *))(*(void *)(*(void *)v6 + 152)
                                                  + **(int **)(*(void *)v6 + 152));
    uint64_t v8 = (void *)swift_task_alloc();
    v1[45] = v8;
    *uint64_t v8 = v1;
    v8[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
    return v12(v7._countAndFlagsBits, v7._object);
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v1[64] = v10;
    *uint64_t v10 = v11;
    v10[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
    return CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:)();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[46] = v5;
  v3[47] = v6;
  v3[48] = v7;
  v3[49] = v8;
  v3[50] = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, void);
  uint64_t v11;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[43];
  uint64_t v2 = v0[27];
  type metadata accessor for WFDialogState();
  uint64_t v3 = App.appIdentifier.getter();
  uint64_t v5 = static WFDialogState.isAppFirstRun(appId:)(v3, v4);
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)v1 + 320)
                                                                  + **(int **)(*(void *)v1 + 320));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[51] = v6;
  *uint64_t v6 = v0;
  v6[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
  uint64_t v8 = v0[25];
  uint64_t v7 = v0[26];
  return v10(v8, v7, v2, v5 & 1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 416) = v4;
  *(void *)(v2 + 424) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 456) = v0;
  swift_task_dealloc();

  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = (void *)v0[52];
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[58] = ResponseFactory.init()();
  uint64_t v2 = v0[18];
  __swift_project_boxed_opaque_existential_1(v0 + 14, v0[17]);
  uint64_t v3 = *(void (**)(uint64_t))(v2 + 8);
  v0[22] = type metadata accessor for WorkflowDataModels(0);
  v0[23] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  __swift_allocate_boxed_opaque_existential_1(v0 + 19);
  uint64_t v4 = OUTLINED_FUNCTION_15_8();
  v3(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_211C70;
  *(void *)(v5 + 32) = v1;
  uint64_t v13 = v5;
  specialized Array._endMutation()();
  v0[59] = v13;
  uint64_t v12 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:);
  uint64_t v6 = v1;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[60] = v7;
  *uint64_t v7 = v8;
  v7[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
  uint64_t v9 = v0[36];
  uint64_t v10 = v0[24];
  return ((uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))v12)(v10, v0 + 19, v13, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 152;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 280);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  OUTLINED_FUNCTION_18_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v7();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_2_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[52];
  uint64_t v3 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v5 = v0[36];
  uint64_t v4 = v0[37];
  uint64_t v6 = v0[34];
  uint64_t v7 = v0[35];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_9_33();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v8();
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  id v47 = *(id *)(v9 + 416);
  uint64_t v46 = *(void *)(v9 + 376);
  uint64_t v45 = *(void *)(v9 + 368);
  uint64_t v10 = *(void *)(v9 + 288);
  uint64_t v11 = *(void *)(v9 + 264);
  uint64_t v48 = *(void *)(v9 + 256);
  uint64_t v12 = *(void *)(v9 + 248);
  uint64_t v49 = *(void *)(v9 + 240);
  uint64_t v50 = *(void *)(v9 + 232);
  uint64_t v13 = *(void **)(v9 + 216);
  uint64_t v14 = *(void **)(v9 + 208);
  static Device.current.getter();
  type metadata accessor for CustomIntentNLContextProvider();
  uint64_t v15 = swift_initStackObject() + 16;
  outlined init with take of AceServiceInvokerAsync((long long *)(v9 + 72), v15);
  CustomIntentNLContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:acceptLabel:denyLabel:)(v14, v13, v45, v46);
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1Tm(v15);
  static DialogPhase.confirmation.getter();
  id v16 = [v47 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v48, v11, v49);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OUTLINED_FUNCTION_28_1();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v49);
  OUTLINED_FUNCTION_23_22();
  v17();
  __swift_storeEnumTagSinglePayload(v50, 0, 1, v10);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void *))(v18 + 168))(v14);
  OutputGenerationManifest.canUseServerTTS.setter();
  id v19 = [v14 _metadata];
  if (v19)
  {
    uint64_t v20 = v19;
    unsigned int v21 = [v19 showsWhenRun];

    int v22 = v21 ^ 1;
  }
  else
  {
    int v22 = 0;
  }
  uint64_t v23 = *(void *)(v9 + 224);
  __swift_project_boxed_opaque_existential_1((void *)(v23 + 16), *(void *)(v23 + 40));
  OUTLINED_FUNCTION_28_1();
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) != 0
    || (__swift_project_boxed_opaque_existential_1((void *)(v23 + 16), *(void *)(v23 + 40)),
        OUTLINED_FUNCTION_28_1(),
        ((dispatch thunk of DeviceState.isHomePod.getter() | v22) & 1) != 0))
  {
    uint64_t v24 = *(void **)(v9 + 416);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for ResponseFactory();
    swift_allocObject();
    *(void *)(v9 + 488) = ResponseFactory.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_211C70;
    *(void *)(v25 + 32) = v24;
    uint64_t v52 = v25;
    specialized Array._endMutation()();
    *(void *)(v9 + 496) = v52;
    uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
                                                            + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
    id v26 = v24;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v9 + 504) = v27;
    void *v27 = v28;
    v27[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
    uint64_t v29 = *(void *)(v9 + 288);
    uint64_t v30 = *(void *)(v9 + 192);
    return v51(v30, v52, v29);
  }
  else
  {
    uint64_t v33 = *(void **)(v9 + 208);
    uint64_t v32 = *(void *)(v9 + 216);
    id v34 = [v33 _title];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;

    *(void *)(v9 + 432) = v36;
    *(void *)(v9 + 440) = [v33 _keyImage];
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v9 + 448) = v38;
    *uint64_t v38 = v39;
    v38[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:);
    uint64_t v40 = *(void *)(v9 + 384);
    uint64_t v41 = *(void *)(v9 + 368);
    uint64_t v42 = *(void *)(v9 + 376);
    uint64_t v43 = *(void *)(v9 + 200);
    uint64_t v44 = *(void *)(v9 + 208);
    return static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)(v9 + 112, v43, v44, v32, v23 + 16, v41, v42, v40, v37, a9);
  }
}

void CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 296);

  uint64_t v4 = OUTLINED_FUNCTION_28_1();
  v5(v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  OUTLINED_FUNCTION_18_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_2();
  __asm { BRAA            X1, X16 }
}

{
  uint64_t v1;

  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_33();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  __asm { BRAA            X1, X16 }
}

{
  uint64_t v1;

  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_33();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  __asm { BRAA            X1, X16 }
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  v1[33] = v6;
  v1[34] = v0;
  v1[32] = v2;
  v1[30] = v7;
  v1[31] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[35] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for ActivityType();
  v1[36] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[37] = v9;
  v1[38] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  v1[39] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[40] = v11;
  v1[41] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for TemplatingResult();
  v1[42] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[43] = v13;
  v1[44] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_16_5();
  uint64_t v17 = (uint64_t (*)(void *, uint64_t, uint64_t))(*(void *)(v14 + 192) + **(int **)(v14 + 192));
  uint64_t v15 = (void *)swift_task_alloc();
  v1[45] = v15;
  *uint64_t v15 = v1;
  v15[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:);
  return v17(v1 + 9, v3, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 368) = *(void *)(v6 + 72);
  *(_OWORD *)(v3 + 376) = *(_OWORD *)(v3 + 80);
  *(void *)(v3 + 392) = *(void *)(v6 + 96);
  *(_OWORD *)(v3 + 400) = *(_OWORD *)(v3 + 104);
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 424) = v4;
  *(void *)(v2 + 432) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, void);
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[53];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_3:
    uint64_t v2 = 0;
    goto LABEL_6;
  }
  type metadata accessor for WFDialogState();
  uint64_t v4 = App.appIdentifier.getter();
  uint64_t v2 = static WFDialogState.isAppFirstRun(appId:)(v4, v5);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v6 = v0[33];
  OUTLINED_FUNCTION_16_5();
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v7 + 328) + **(int **)(v7 + 328));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[55] = v8;
  *uint64_t v8 = v9;
  v8[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:);
  uint64_t v10 = v0[44];
  uint64_t v11 = v0[31];
  uint64_t v12 = v0[32];
  return v14(v10, v11, v12, v6, v2 & 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 448) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;

  uint64_t v17 = *(void *)(v0 + 368);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v1 = *(void *)(v0 + 304);
  id v26 = (_OWORD *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 296);
  int v22 = *(void *)(v0 + 288);
  uint64_t v3 = *(void **)(v0 + 272);
  uint64_t v23 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 256);
  static Device.current.getter();
  type metadata accessor for CustomIntentNLContextProvider();
  uint64_t v5 = swift_initStackObject() + 16;
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 120), v5);
  uint64_t v6 = (void *)OUTLINED_FUNCTION_15_8();
  CustomIntentNLContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:acceptLabel:denyLabel:)(v6, v7, v17, v18);
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1Tm(v5);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ActivityType.confirmIntent(_:), v22);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*v3 + 160))(v1, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v22);
  outlined init with copy of DeviceState((uint64_t)(v3 + 2), v0 + 160);
  __swift_project_boxed_opaque_existential_1(v3 + 2, v3[5]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  (*(void (**)(uint64_t))(*v3 + 168))(v4);
  OUTLINED_FUNCTION_23_22();
  v9();
  __swift_storeEnumTagSinglePayload(v23, 0, 1, (uint64_t)v3);
  if (v8)
  {
    *(void *)(v0 + 224) = type metadata accessor for DefaultFlowActivity();
    *(void *)(v0 + 232) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels((unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity, (void (*)(uint64_t))&type metadata accessor for DefaultFlowActivity);
    *(void *)(v0 + 200) = v8;
  }
  else
  {
    *(void *)(v0 + 232) = 0;
    *id v26 = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
  }
  id v19 = *(void **)(v0 + 408);
  uint64_t v20 = *(void **)(v0 + 384);
  uint64_t v11 = *(void *)(v0 + 344);
  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 320);
  uint64_t v24 = *(void *)(v0 + 328);
  uint64_t v25 = *(void *)(v0 + 336);
  unsigned int v21 = *(void *)(v0 + 312);
  uint64_t v13 = *(void *)(v0 + 280);
  uint64_t v14 = *(uint64_t **)(v0 + 240);
  v14[3] = type metadata accessor for AceOutput();
  v14[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v14);
  swift_retain();
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v13, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 160);
  outlined destroy of URL?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v24, v21);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v15();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 408);
  uint64_t v2 = *(void **)(v0 + 384);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22_26();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 408);
  uint64_t v2 = *(void **)(v0 + 384);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22_26();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

void CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_16_5();
  uint64_t v3 = *(void *)(v1 + 120) + **(int **)(v1 + 120);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentConfirmIntentResponseGenerator.makePromptForConfirmation_rfv1(app:intent:intentResponse:);
  __asm { BRAA            X9, X16 }
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[24] = v2;
  v1[25] = v0;
  v1[22] = v3;
  v1[23] = v4;
  v1[21] = v5;
  uint64_t v6 = type metadata accessor for DialogPhase();
  v1[26] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[27] = v7;
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[30] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[31] = v9;
  v1[32] = OUTLINED_FUNCTION_25();
  type metadata accessor for CATOption();
  v1[33] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[34] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[35] = v11;
  v1[36] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *inited;
  void *v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = OUTLINED_FUNCTION_47_10();
  v3(v2);
  RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v4 = OUTLINED_FUNCTION_48_8();
  v5(v4);
  if (v0)
  {
    static Device.current.getter();
    type metadata accessor for AutoShortcutCATs();
    static CATOption.defaultMode.getter();
    uint64_t v6 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for AutoShortcutCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v7 = CATWrapperSimple.__allocating_init(options:globals:)();
    uint64_t v8 = type metadata accessor for RunLinkActionCATPatternsExecutor(0);
    static CATOption.defaultMode.getter();
    uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for AutoShortcutDialogTemplating();
    uint64_t inited = (void *)swift_initStackObject();
    *(void *)(v1 + 296) = inited;
    inited[12] = v8;
    inited[13] = &protocol witness table for RunLinkActionCATPatternsExecutor;
    inited[9] = v9;
    outlined init with take of AceServiceInvokerAsync((long long *)(v1 + 128), (uint64_t)(inited + 2));
    inited[7] = v6;
    inited[8] = v7;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v1 + 304) = v11;
    *uint64_t v11 = v1;
    v11[1] = CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:);
    OUTLINED_FUNCTION_24_2();
    return AutoShortcutDialogTemplating.makeUserDeniedDialog()();
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v1 + 352) = v14;
    *uint64_t v14 = v15;
    v14[1] = CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:);
    OUTLINED_FUNCTION_24_2();
    return CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse_rfv1(app:intent:intentResponse:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    *(void *)(v5 + 320) = v3;
    swift_setDeallocating();
    AutoShortcutDialogTemplating.deinit();
    swift_deallocClassInstance();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = (void *)v0[40];
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[27];
  static DialogPhase.canceled.getter();
  uint64_t v6 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[41] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_211C70;
  *(void *)(v7 + 32) = v1;
  uint64_t v15 = v7;
  specialized Array._endMutation()();
  v0[42] = v15;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
                                                          + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
  uint64_t v8 = v1;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[43] = v9;
  *uint64_t v9 = v10;
  v9[1] = CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:);
  uint64_t v11 = v0[32];
  uint64_t v12 = v0[21];
  return v14(v12, v15, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 240);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  swift_setDeallocating();
  AutoShortcutDialogTemplating.deinit();
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_2_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_24_2();
  __asm { BRAA            X1, X16 }
}

uint64_t CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse_rfv1(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  uint64_t v4 = type metadata accessor for ActivityType();
  v1[15] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[16] = v5;
  v1[17] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[18] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[19] = v7;
  uint64_t v8 = OUTLINED_FUNCTION_25();
  v1[20] = v8;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v1[21] = v9;
  *uint64_t v9 = v10;
  v9[1] = CustomIntentConfirmIntentResponseGenerator.makeFlowCancelledResponse_rfv1(app:intent:intentResponse:);
  return static ResponseTemplates.taskAborted()(v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 104);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 128) + 104))(v1, enum case for ActivityType.canceled(_:), *(void *)(v0 + 120));
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 160))(v1, v3);
  uint64_t v5 = OUTLINED_FUNCTION_15_8();
  v6(v5);
  outlined init with copy of DeviceState(v2 + 16, v0 + 16);
  uint64_t v7 = (void *)OUTLINED_FUNCTION_15_8();
  __swift_project_boxed_opaque_existential_1(v7, v8);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  if (v4)
  {
    *(void *)(v0 + 80) = type metadata accessor for DefaultFlowActivity();
    *(void *)(v0 + 88) = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels((unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity, (void (*)(uint64_t))&type metadata accessor for DefaultFlowActivity);
    *(void *)(v0 + 56) = v4;
  }
  else
  {
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v9 = *(void *)(v0 + 160);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v12 = *(uint64_t **)(v0 + 96);
  v12[3] = type metadata accessor for AceOutput();
  v12[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v12);
  swift_retain();
  static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  outlined destroy of URL?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v13();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void *CustomIntentConfirmIntentResponseGenerator.__allocating_init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_23_4(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = *(void *)(a10 + 24);
  uint64_t v12 = *(void *)(a10 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a10, v11);
  OUTLINED_FUNCTION_41_13();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (*(uint64_t (**)(char *))(v16 + 16))(v15);
  uint64_t v25 = OUTLINED_FUNCTION_15_22(v17, v18, v19, v20, v21, v22, v23, v24, a9, (uint64_t)v15, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  return v25;
}

void *CustomIntentConfirmIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_23_4(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = *(void *)(a10 + 24);
  uint64_t v12 = *(void *)(a10 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a10, v11);
  OUTLINED_FUNCTION_41_13();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (*(uint64_t (**)(char *))(v16 + 16))(v15);
  uint64_t v25 = OUTLINED_FUNCTION_15_22(v17, v18, v19, v20, v21, v22, v23, v24, a9, (uint64_t)v15, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  return v25;
}

void *specialized CustomIntentConfirmIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v22 = a3;
  uint64_t v16 = *(void *)(a12 - 8);
  __chkstk_darwin(a1);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DeviceState(v19, (uint64_t)v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a10, a12);
  uint64_t v20 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(a1, a2, v22, v27, v23, v24, v25, v26, a9, (uint64_t)v18, a11, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a10, a12);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v20;
}

uint64_t type metadata accessor for CustomIntentConfirmIntentResponseGenerator()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_9_33()
{
  return swift_task_dealloc();
}

void *OUTLINED_FUNCTION_15_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19 = *(void *)(v17 - 112);
  uint64_t v20 = *(void *)(v17 - 104);
  uint64_t v21 = *(void *)(v17 - 96);
  uint64_t v22 = *(void *)(v17 - 88);
  return specialized CustomIntentConfirmIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(v16, v15, v14, v13, v19, v20, v21, v22, a9, a10, a11, a12, a13);
}

uint64_t OUTLINED_FUNCTION_18_20()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_22_26()
{
  return swift_task_dealloc();
}

void RunCustomIntentCATsSimple.Properties.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      OUTLINED_FUNCTION_52();
      break;
    case 2:
    case 8:
    case 14:
      OUTLINED_FUNCTION_52();
      OUTLINED_FUNCTION_0_16(40);
      break;
    default:
      return;
  }
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::Properties_optional __swiftcall RunCustomIntentCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_97();
  if (v1 >= 0x1B) {
    return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::Properties_optional)27;
  }
  else {
    return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::Properties_optional)v1;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::Properties_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.Properties()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  RunCustomIntentCATsSimple.Properties.rawValue.getter(v1);
  void *v0 = v2;
  v0[1] = v3;
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValue(device:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_40_11(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_12_32(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  *uint64_t v22 = v23;
  v22[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_48_0();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

BOOL RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds.rawValue.getter()
{
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueAsLabels(device:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueAsLabels(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_12_32(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_51_10();
  OUTLINED_FUNCTION_48_0();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_72_8(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v6);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *char v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_70_3();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_70_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_214D20);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_15_23(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  OUTLINED_FUNCTION_82_2();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  OUTLINED_FUNCTION_110_0();
  OUTLINED_FUNCTION_65_2();
  OUTLINED_FUNCTION_123(v24);
  uint64_t v25 = OUTLINED_FUNCTION_17_2();
  uint64_t v26 = (void *)OUTLINED_FUNCTION_132_0(v25);
  *uint64_t v26 = v27;
  v26[1] = RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_7(v12 + 30);
  OUTLINED_FUNCTION_48_0();
  return v31(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ConfirmSlotValueWithCustomTextDialogIds_optional __swiftcall RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ConfirmSlotValueWithCustomTextDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x4E707041776F6873;
  }
  else {
    return 0x6D614E7070416F6ELL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ConfirmSlotValueWithCustomTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ConfirmSlotValueWithCustomTextDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_72_8(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v6);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *char v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_70_3();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_35_10();
  return v0();
}

uint64_t RunCustomIntentCATsSimple.confirmSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_70_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_214D20);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_15_23(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  OUTLINED_FUNCTION_82_2();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v22, v12, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  OUTLINED_FUNCTION_110_0();
  OUTLINED_FUNCTION_65_2();
  OUTLINED_FUNCTION_123(v24);
  uint64_t v25 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_130_0(v25);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v26;
  v10[1] = RunCustomIntentCATsSimple.confirmSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_49_10();
  OUTLINED_FUNCTION_48_0();
  return v32(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.describeCustomIntentItem(device:item:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.describeCustomIntentItem(device:item:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_40_11(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_89_2(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  *uint64_t v22 = v23;
  v22[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_48_0();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

BOOL RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds.rawValue.getter()
{
  return 1835365481;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds(void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.describeCustomIntentItemAsLabels(device:item:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.describeCustomIntentItemAsLabels(device:item:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_89_2(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = AutoShortcutCATsSimple.appEnabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_51_10();
  OUTLINED_FUNCTION_48_0();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds and conformance RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.deviceUnlock(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.deviceUnlock(device:));
}

uint64_t RunCustomIntentCATsSimple.deviceUnlock(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v13 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_40_7(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATsSimple.deviceUnlock(device:);
  OUTLINED_FUNCTION_20_10();
  unint64_t v10 = OUTLINED_FUNCTION_80_2(28);
  return v11(v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

BOOL RunCustomIntentCATsSimple.DeviceUnlockDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DeviceUnlockDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.DeviceUnlockDialogIds.rawValue.getter()
{
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.DeviceUnlockDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds(void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void **)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  OUTLINED_FUNCTION_111(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v8;
  v3[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  OUTLINED_FUNCTION_52();
  unint64_t v9 = OUTLINED_FUNCTION_81_2(28);
  return v10(v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DeviceUnlockDialogIds and conformance RunCustomIntentCATsSimple.DeviceUnlockDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValue(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.disambiguateSlotValue(device:));
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValue(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v13 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_40_7(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  OUTLINED_FUNCTION_20_10();
  unint64_t v10 = OUTLINED_FUNCTION_80_2(37);
  return v11(v10);
}

BOOL RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.disambiguateSlotValueAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueAsLabels(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void **)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  OUTLINED_FUNCTION_111(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v8;
  v3[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  OUTLINED_FUNCTION_52();
  unint64_t v9 = OUTLINED_FUNCTION_81_2(37);
  return v10(v9);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueItems(device:customPrompt:items:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    unint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueItems(device:customPrompt:items:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_76_3();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_35_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_2138B0);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = v10[6];
  v11[6] = v12;
  OUTLINED_FUNCTION_21_14(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v16, 1, v18);
  uint64_t v19 = v10[6];
  OUTLINED_FUNCTION_29_18();
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  OUTLINED_FUNCTION_117_0();
  v11[21] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v11[18] = v11 + 12;
  OUTLINED_FUNCTION_134();
  uint64_t v22 = (void *)swift_task_alloc();
  v10[8] = v22;
  *uint64_t v22 = v10;
  v22[1] = RunCustomIntentCATsSimple.disambiguateSlotValueItems(device:customPrompt:items:);
  OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_48_0();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

BOOL RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueItemsAsLabels(device:customPrompt:items:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    unint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueItemsAsLabels(device:customPrompt:items:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_76_3();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_35_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_2138B0);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = v10[6];
  v11[6] = v12;
  OUTLINED_FUNCTION_21_14(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v16, 1, v18);
  uint64_t v19 = v10[6];
  OUTLINED_FUNCTION_29_18();
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  OUTLINED_FUNCTION_117_0();
  v11[21] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v11[18] = v11 + 12;
  OUTLINED_FUNCTION_134();
  uint64_t v22 = (void *)swift_task_alloc();
  v10[8] = v22;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v22 = v23;
  v22[1] = RunCustomIntentCATsSimple.disambiguateSlotValueItemsAsLabels(device:customPrompt:items:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_51_10();
  OUTLINED_FUNCTION_48_0();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_142_0(v1, v2, v3, v4, v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  uint64_t v7 = OUTLINED_FUNCTION_13_0();
  uint64_t v8 = OUTLINED_FUNCTION_79_2(v7);
  *(void *)(v0 + 72) = OUTLINED_FUNCTION_37_1(v8);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  char v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_116();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_141_0();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_119_0(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_213920);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_104(v17);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v11, 1, v19);
  uint64_t v20 = *(void *)(v10 + 72);
  OUTLINED_FUNCTION_29_18();
  if (v21)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v22();
    swift_retain();
  }
  uint64_t v23 = OUTLINED_FUNCTION_139_0();
  *(void *)(v12 + 128) = v24;
  *(void *)(v12 + 136) = 0x8000000000228C20;
  outlined init with copy of AppDisplayInfo?(v23, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_138_0();
  *(void *)(v12 + 176) = v27;
  *(void *)(v12 + 184) = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v26, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v28();
  }
  char v29 = *(unsigned char *)(v10 + 104);
  *(void *)(v12 + 224) = v13;
  *(void *)(v12 + 232) = 0x8000000000226BE0;
  *(void *)(v12 + 264) = &type metadata for Bool;
  *(unsigned char *)(v12 + 240) = v29;
  uint64_t v30 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v10 + 88) = v30;
  *uint64_t v30 = v10;
  v30[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_18_18(v13 + 27);
  OUTLINED_FUNCTION_6_1();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::DisambiguateSlotValueWithCustomTextDialogIds_optional __swiftcall RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::DisambiguateSlotValueWithCustomTextDialogIds_optional)RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:)(rawValue, v1);
}

unint64_t RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.rawValue.getter(char a1)
{
  unint64_t result = 0x6D6F74737563;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4E707041776F6873;
      break;
    case 2:
      OUTLINED_FUNCTION_52();
      unint64_t result = OUTLINED_FUNCTION_0_16(19);
      break;
    case 3:
      unint64_t result = 0x72746E49776F6873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::DisambiguateSlotValueWithCustomTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::DisambiguateSlotValueWithCustomTextDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  unint64_t result = RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.rawValue.getter(v1);
  unint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomTextAsLabels(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_142_0(v1, v2, v3, v4, v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  uint64_t v7 = OUTLINED_FUNCTION_13_0();
  uint64_t v8 = OUTLINED_FUNCTION_79_2(v7);
  *(void *)(v0 + 72) = OUTLINED_FUNCTION_37_1(v8);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  char v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_116();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomTextAsLabels(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_141_0();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_119_0(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_213920);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_104(v17);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v11, 1, v19);
  uint64_t v20 = *(void *)(v10 + 72);
  OUTLINED_FUNCTION_29_18();
  if (v21)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v22();
    swift_retain();
  }
  uint64_t v23 = OUTLINED_FUNCTION_139_0();
  *(void *)(v12 + 128) = v24;
  *(void *)(v12 + 136) = 0x8000000000228C20;
  outlined init with copy of AppDisplayInfo?(v23, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_138_0();
  *(void *)(v12 + 176) = v27;
  *(void *)(v12 + 184) = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v26, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v28();
  }
  char v29 = *(unsigned char *)(v10 + 104);
  *(void *)(v12 + 224) = v13;
  *(void *)(v12 + 232) = 0x8000000000226BE0;
  *(void *)(v12 + 264) = &type metadata for Bool;
  *(unsigned char *)(v12 + 240) = v29;
  uint64_t v30 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v10 + 88) = v30;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v30 = v31;
  v30[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomTextAsLabels(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_46_10();
  OUTLINED_FUNCTION_6_1();
  return v37(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.doneButton()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutCATsSimple.userDenied();
  OUTLINED_FUNCTION_52();
  return v3(0xD00000000000001ALL);
}

BOOL RunCustomIntentCATsSimple.DoneButtonDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.DoneButtonDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.DoneButtonDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.DoneButtonDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t RunCustomIntentCATsSimple.doneButtonAsLabels()()
{
  OUTLINED_FUNCTION_14_0();
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds();
  OUTLINED_FUNCTION_44();
  *Swift::OpaquePointer v1 = v2;
  v1[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_52();
  return v4(0xD00000000000001ALL);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.DoneButtonDialogIds and conformance RunCustomIntentCATsSimple.DoneButtonDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.errorWithCodeCustomError(device:customDialog:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t RunCustomIntentCATsSimple.errorWithCodeCustomError(device:customDialog:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_76_3();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_2138B0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_41_11(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  OUTLINED_FUNCTION_82_2();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_17_2();
  uint64_t v25 = (void *)OUTLINED_FUNCTION_132_0(v24);
  *uint64_t v25 = v26;
  v25[1] = RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_7(v12 + 24);
  OUTLINED_FUNCTION_48_0();
  return v30(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional __swiftcall RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional)RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.init(rawValue:)(Swift::String a1, Swift::OpaquePointer a2)
{
  OUTLINED_FUNCTION_40_3(a1, a2);
  OUTLINED_FUNCTION_97();
  if (v2 >= 4) {
    return 4;
  }
  else {
    return v2;
  }
}

uint64_t RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds.rawValue.getter(char a1)
{
  uint64_t result = 0x65756E69746E6F63;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_43_2();
      break;
    case 2:
      uint64_t result = 0x43746C7561666564;
      break;
    case 3:
      uint64_t result = 0x45746C7561666564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunCustomIntentCATsSimple.errorWithCodeCustomErrorAsLabels(device:customDialog:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t RunCustomIntentCATsSimple.errorWithCodeCustomErrorAsLabels(device:customDialog:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_76_3();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_2138B0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_41_11(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  OUTLINED_FUNCTION_82_2();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v22, v12, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_130_0(v24);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v25;
  v10[1] = RunCustomIntentCATsSimple.confirmSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_49_10();
  OUTLINED_FUNCTION_48_0();
  return v31(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.extensionTimedOut(device:actionName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.extensionTimedOut(device:actionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_40_11(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_64_5(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  *uint64_t v22 = v23;
  v22[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_48_0();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

BOOL RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds.rawValue.getter()
{
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds(void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.extensionTimedOutAsLabels(device:actionName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.extensionTimedOutAsLabels(device:actionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_64_5(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_51_10();
  OUTLINED_FUNCTION_48_0();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds and conformance RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.followupNotSupported(device:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.followupNotSupported(device:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_98(v17);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_59();
  uint64_t v23 = (void *)OUTLINED_FUNCTION_64_0(v22);
  *uint64_t v23 = v24;
  v23[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_18_18(v13 + 20);
  OUTLINED_FUNCTION_6_1();
  return v28(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
}

BOOL RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds.rawValue.getter()
{
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t RunCustomIntentCATsSimple.followupNotSupportedAsLabels(device:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.followupNotSupportedAsLabels(device:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_98(v17);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_46_10();
  OUTLINED_FUNCTION_6_1();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds and conformance RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessage(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.handoffNotificationMessage(device:));
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessage(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v13 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_40_7(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  unint64_t v10 = OUTLINED_FUNCTION_80_2(42);
  return v11(v10);
}

BOOL RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.handoffNotificationMessageAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageAsLabels(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void **)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  OUTLINED_FUNCTION_111(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v8;
  v3[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  OUTLINED_FUNCTION_52();
  unint64_t v9 = OUTLINED_FUNCTION_81_2(42);
  return v10(v9);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnly(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnly(device:));
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnly(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v13 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_40_7(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  OUTLINED_FUNCTION_20_10();
  unint64_t v10 = OUTLINED_FUNCTION_80_2(53);
  return v11(v10);
}

BOOL RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds.rawValue.getter()
{
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds(void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnlyAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnlyAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.handoffNotificationMessageHomePodOnlyAsLabels(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void **)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  OUTLINED_FUNCTION_111(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v8;
  v3[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  OUTLINED_FUNCTION_52();
  unint64_t v9 = OUTLINED_FUNCTION_81_2(53);
  return v10(v9);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds and conformance RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.initiateHandoff(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.initiateHandoff(device:));
}

uint64_t RunCustomIntentCATsSimple.initiateHandoff(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v13 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_40_7(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  OUTLINED_FUNCTION_20_10();
  unint64_t v10 = OUTLINED_FUNCTION_80_2(31);
  return v11(v10);
}

BOOL RunCustomIntentCATsSimple.InitiateHandoffDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.InitiateHandoffDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.InitiateHandoffDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds(void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.initiateHandoffAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.initiateHandoffAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.initiateHandoffAsLabels(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void **)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  OUTLINED_FUNCTION_111(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v8;
  v3[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  OUTLINED_FUNCTION_52();
  unint64_t v9 = OUTLINED_FUNCTION_81_2(31);
  return v10(v9);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.InitiateHandoffDialogIds and conformance RunCustomIntentCATsSimple.InitiateHandoffDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPrompt(device:intentCategory:categoryVerb:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_1(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  uint64_t v7 = OUTLINED_FUNCTION_79_2(v6);
  *(void *)(v0 + 72) = OUTLINED_FUNCTION_37_1(v7);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPrompt(device:intentCategory:categoryVerb:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_70_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_119_0(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_214D20);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  uint64_t v17 = v10[9];
  OUTLINED_FUNCTION_7_30(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v17, 1, v19);
  uint64_t v20 = v10[9];
  OUTLINED_FUNCTION_29_18();
  if (v21)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v22();
    swift_retain();
  }
  uint64_t v23 = v10[8];
  uint64_t v24 = OUTLINED_FUNCTION_13_28();
  outlined init with copy of AppDisplayInfo?(v24, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  OUTLINED_FUNCTION_55_7();
  OUTLINED_FUNCTION_66_2((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v26, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = (void *)OUTLINED_FUNCTION_17_2();
  v10[11] = v28;
  *uint64_t v28 = v10;
  v28[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_7(v11 + 24);
  OUTLINED_FUNCTION_48_0();
  return v32(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptDialogIds_optional __swiftcall RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)(Swift::String rawValue)
{
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptDialogIds_optional)RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptAsLabels(device:intentCategory:categoryVerb:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_1(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  uint64_t v7 = OUTLINED_FUNCTION_79_2(v6);
  *(void *)(v0 + 72) = OUTLINED_FUNCTION_37_1(v7);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptAsLabels(device:intentCategory:categoryVerb:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_70_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_119_0(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_214D20);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v11 + 56) = 0;
    *(void *)(v11 + 64) = 0;
  }
  uint64_t v16 = v10[9];
  OUTLINED_FUNCTION_7_30(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v16, 1, v18);
  uint64_t v19 = v10[9];
  OUTLINED_FUNCTION_29_18();
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  uint64_t v22 = v10[8];
  uint64_t v23 = OUTLINED_FUNCTION_13_28();
  outlined init with copy of AppDisplayInfo?(v23, v22, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  OUTLINED_FUNCTION_55_7();
  OUTLINED_FUNCTION_66_2((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v25, v22, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = (void *)OUTLINED_FUNCTION_17_2();
  v10[11] = v27;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds();
  OUTLINED_FUNCTION_44();
  void *v27 = v28;
  v27[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_49_10();
  OUTLINED_FUNCTION_48_0();
  return v34(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_87_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  *(void *)(v0 + 88) = OUTLINED_FUNCTION_35_1(v10);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *char v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_106_0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_19_2();
    OUTLINED_FUNCTION_23_1();
    return v13(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_33_1();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_143(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_2126D0);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  uint64_t v17 = v10[11];
  OUTLINED_FUNCTION_7_30(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v17, 1, v19);
  uint64_t v20 = v10[11];
  OUTLINED_FUNCTION_29_18();
  if (v21)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v22();
    swift_retain();
  }
  uint64_t v23 = v10[10];
  uint64_t v24 = OUTLINED_FUNCTION_13_28();
  outlined init with copy of AppDisplayInfo?(v24, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  OUTLINED_FUNCTION_129_0();
  OUTLINED_FUNCTION_66_2((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v26, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_73_3();
  outlined init with copy of AppDisplayInfo?(v28, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_149();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v29();
  }
  OUTLINED_FUNCTION_148();
  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_147_0(v30);
  uint64_t v31 = (void *)OUTLINED_FUNCTION_17_2();
  v10[13] = v31;
  *uint64_t v31 = v10;
  v31[1] = RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_7(v11 + 36);
  OUTLINED_FUNCTION_48_0();
  return v35(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptWithTemplateDialogIds_optional __swiftcall RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.init(rawValue:)(Swift::String rawValue)
{
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptWithTemplateDialogIds_optional)RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)();
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptWithTemplateDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentConfirmationPromptWithTemplateDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplateAsLabels(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_87_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  *(void *)(v0 + 88) = OUTLINED_FUNCTION_35_1(v10);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplateAsLabels(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_33_1();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_143(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_2126D0);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v11 + 56) = 0;
    *(void *)(v11 + 64) = 0;
  }
  uint64_t v16 = v10[11];
  OUTLINED_FUNCTION_7_30(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v16, 1, v18);
  uint64_t v19 = v10[11];
  OUTLINED_FUNCTION_29_18();
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  uint64_t v22 = v10[10];
  uint64_t v23 = OUTLINED_FUNCTION_13_28();
  outlined init with copy of AppDisplayInfo?(v23, v22, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  OUTLINED_FUNCTION_129_0();
  OUTLINED_FUNCTION_66_2((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v25, v22, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_73_3();
  outlined init with copy of AppDisplayInfo?(v27, v22, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_149();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v28();
  }
  OUTLINED_FUNCTION_148();
  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_147_0(v29);
  char v30 = (void *)OUTLINED_FUNCTION_17_2();
  v10[13] = v30;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds();
  OUTLINED_FUNCTION_44();
  *char v30 = v31;
  v30[1] = RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_49_10();
  OUTLINED_FUNCTION_48_0();
  return v37(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponse(device:intentCategory:categoryVerb:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_1(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  uint64_t v7 = OUTLINED_FUNCTION_79_2(v6);
  *(void *)(v0 + 72) = OUTLINED_FUNCTION_37_1(v7);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponse(device:intentCategory:categoryVerb:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_70_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_119_0(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_214D20);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  uint64_t v17 = v10[9];
  OUTLINED_FUNCTION_7_30(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v17, 1, v19);
  uint64_t v20 = v10[9];
  OUTLINED_FUNCTION_29_18();
  if (v21)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v22();
    swift_retain();
  }
  uint64_t v23 = v10[8];
  uint64_t v24 = OUTLINED_FUNCTION_13_28();
  outlined init with copy of AppDisplayInfo?(v24, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  OUTLINED_FUNCTION_55_7();
  OUTLINED_FUNCTION_66_2((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v26, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = (void *)OUTLINED_FUNCTION_17_2();
  v10[11] = v28;
  *uint64_t v28 = v10;
  v28[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomTextAsLabels(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_7(v11 + 21);
  OUTLINED_FUNCTION_48_0();
  return v32(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseDialogIds_optional __swiftcall RunCustomIntentCATsSimple.IntentHandledResponseDialogIds.init(rawValue:)(Swift::String rawValue)
{
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseDialogIds_optional)RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)();
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.IntentHandledResponseDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds()
{
  uint64_t v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseAsLabels(device:intentCategory:categoryVerb:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_1(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  uint64_t v7 = OUTLINED_FUNCTION_79_2(v6);
  *(void *)(v0 + 72) = OUTLINED_FUNCTION_37_1(v7);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseAsLabels(device:intentCategory:categoryVerb:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_70_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_119_0(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_214D20);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v11 + 56) = 0;
    *(void *)(v11 + 64) = 0;
  }
  uint64_t v16 = v10[9];
  OUTLINED_FUNCTION_7_30(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v16, 1, v18);
  uint64_t v19 = v10[9];
  OUTLINED_FUNCTION_29_18();
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  uint64_t v22 = v10[8];
  uint64_t v23 = OUTLINED_FUNCTION_13_28();
  outlined init with copy of AppDisplayInfo?(v23, v22, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  OUTLINED_FUNCTION_55_7();
  OUTLINED_FUNCTION_66_2((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v25, v22, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = (void *)OUTLINED_FUNCTION_17_2();
  v10[11] = v27;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds();
  OUTLINED_FUNCTION_44();
  void *v27 = v28;
  v27[1] = RunCustomIntentCATsSimple.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_49_10();
  OUTLINED_FUNCTION_48_0();
  return v34(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_87_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  *(void *)(v0 + 88) = OUTLINED_FUNCTION_35_1(v10);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *char v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_106_0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_19_2();
    OUTLINED_FUNCTION_23_1();
    return v13(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_33_1();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_143(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_2126D0);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v12[7] = 0;
    unsigned char v12[8] = 0;
  }
  uint64_t v17 = v10[11];
  OUTLINED_FUNCTION_7_30(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v17, 1, v19);
  uint64_t v20 = v10[11];
  OUTLINED_FUNCTION_29_18();
  if (v21)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v22();
    swift_retain();
  }
  uint64_t v23 = v10[10];
  uint64_t v24 = OUTLINED_FUNCTION_13_28();
  outlined init with copy of AppDisplayInfo?(v24, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_74_3();
  outlined init with copy of AppDisplayInfo?(v26, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_128_0();
  v12[28] = v11;
  v12[29] = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v28, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_149();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v29();
  }
  OUTLINED_FUNCTION_148();
  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_147_0(v30);
  uint64_t v31 = (void *)OUTLINED_FUNCTION_17_2();
  v10[13] = v31;
  *uint64_t v31 = v10;
  v31[1] = RunCustomIntentCATsSimple.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_7(v11 + 33);
  OUTLINED_FUNCTION_48_0();
  return v35(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseWithTemplateDialogIds_optional __swiftcall RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds.init(rawValue:)(Swift::String rawValue)
{
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseWithTemplateDialogIds_optional)RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)();
}

uint64_t RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)()
{
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_97();
  if (v0 >= 0x2B) {
    return 43;
  }
  else {
    return v0;
  }
}

void RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 8:
    case 28:
    case 36:
    case 40:
      OUTLINED_FUNCTION_52();
      OUTLINED_FUNCTION_0_16(17);
      break;
    case 10:
    case 14:
    case 18:
    case 22:
    case 26:
    case 32:
    case 34:
    case 38:
      OUTLINED_FUNCTION_52();
      break;
    default:
      return;
  }
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseWithTemplateDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntentHandledResponseWithTemplateDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseWithTemplateAsLabels(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_87_3(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8);
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  *(void *)(v0 + 88) = OUTLINED_FUNCTION_35_1(v10);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t RunCustomIntentCATsSimple.intentHandledResponseWithTemplateAsLabels(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_33_1();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_143(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_2126D0);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v12[7] = 0;
    unsigned char v12[8] = 0;
  }
  uint64_t v17 = v10[11];
  OUTLINED_FUNCTION_7_30(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v17, 1, v19);
  uint64_t v20 = v10[11];
  OUTLINED_FUNCTION_29_18();
  if (v21)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v22();
    swift_retain();
  }
  uint64_t v23 = v10[10];
  uint64_t v24 = OUTLINED_FUNCTION_13_28();
  outlined init with copy of AppDisplayInfo?(v24, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_74_3();
  outlined init with copy of AppDisplayInfo?(v26, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = OUTLINED_FUNCTION_128_0();
  v12[28] = v11;
  v12[29] = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v28, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v21)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_149();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v29();
  }
  OUTLINED_FUNCTION_148();
  OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_147_0(v30);
  uint64_t v31 = (void *)OUTLINED_FUNCTION_17_2();
  v10[13] = v31;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v31 = v32;
  v31[1] = RunCustomIntentCATsSimple.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_49_10();
  OUTLINED_FUNCTION_48_0();
  return v38(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds and conformance RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_112(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  char v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *char v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_35_10();
  return v0();
}

uint64_t RunCustomIntentCATsSimple.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v15 = v11[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v16 = OUTLINED_FUNCTION_141_0();
  uint64_t v17 = (__n128 *)OUTLINED_FUNCTION_65_3(v16);
  uint64_t v18 = OUTLINED_FUNCTION_1_2(v17, (__n128)xmmword_213920);
  if (v15)
  {
    uint64_t v18 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  OUTLINED_FUNCTION_79_6(v18);
  if (v19) {
    OUTLINED_FUNCTION_100_0();
  }
  else {
    uint64_t v20 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_88_2((uint64_t)v20);
  if (v21)
  {
    uint64_t v22 = 0;
    v13[19] = 0;
    v13[20] = 0;
  }
  else
  {
    uint64_t v22 = v11[4];
  }
  OUTLINED_FUNCTION_97_0(v22);
  v13[23] = 0x8000000000228C40;
  OUTLINED_FUNCTION_137((uint64_t)&type metadata for Bool);
  v13[29] = 0x8000000000228C00;
  outlined init with copy of AppDisplayInfo?(v23, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v24 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v12, 1, v24);
  uint64_t v25 = v11[7];
  OUTLINED_FUNCTION_29_18();
  if (v26)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    v13[33] = v24;
    __swift_allocate_boxed_opaque_existential_1(v10);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v27();
    swift_retain();
  }
  uint64_t v28 = OUTLINED_FUNCTION_59();
  uint64_t v29 = (void *)OUTLINED_FUNCTION_132_0(v28);
  *uint64_t v29 = v30;
  v29[1] = RunCustomIntentCATsSimple.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:);
  OUTLINED_FUNCTION_18_18(v14 + 27);
  OUTLINED_FUNCTION_6_1();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntroduceDisambiguationListDialogIds_optional __swiftcall RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntroduceDisambiguationListDialogIds_optional)RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6E756F436D657469;
  }
  if (a1 == 1) {
    return 0x656C7069746C756DLL;
  }
  return 0x72746E49776F6873;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntroduceDisambiguationListDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::IntroduceDisambiguationListDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunCustomIntentCATsSimple.introduceDisambiguationListAsLabels(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_112(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  char v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *char v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunCustomIntentCATsSimple.introduceDisambiguationListAsLabels(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = v11[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_141_0();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_213920);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  OUTLINED_FUNCTION_79_6(v17);
  if (v18) {
    OUTLINED_FUNCTION_100_0();
  }
  else {
    char v19 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_88_2((uint64_t)v19);
  if (v20)
  {
    uint64_t v21 = 0;
    v13[19] = 0;
    v13[20] = 0;
  }
  else
  {
    uint64_t v21 = v11[4];
  }
  OUTLINED_FUNCTION_97_0(v21);
  v13[23] = 0x8000000000228C40;
  OUTLINED_FUNCTION_137((uint64_t)&type metadata for Bool);
  v13[29] = 0x8000000000228C00;
  outlined init with copy of AppDisplayInfo?(v22, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v12, 1, v23);
  uint64_t v24 = v11[7];
  OUTLINED_FUNCTION_29_18();
  if (v25)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v24, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    v13[33] = v23;
    __swift_allocate_boxed_opaque_existential_1(v10);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v26();
    swift_retain();
  }
  uint64_t v27 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_130_0(v27);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v28;
  v10[1] = (uint64_t)RunCustomIntentCATsSimple.introduceDisambiguationListAsLabels(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_46_10();
  OUTLINED_FUNCTION_6_1();
  return v34(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds and conformance RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.introduceNextDisambiguationPage(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.introduceNextDisambiguationPage(device:));
}

uint64_t RunCustomIntentCATsSimple.introduceNextDisambiguationPage(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v13 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  char v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_40_7(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  OUTLINED_FUNCTION_20_10();
  unint64_t v10 = OUTLINED_FUNCTION_80_2(47);
  return v11(v10);
}

BOOL RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds.rawValue.getter()
{
  return 0x6F72746E69;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds(void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.introduceNextDisambiguationPageAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.introduceNextDisambiguationPageAsLabels(device:));
}

uint64_t RunCustomIntentCATsSimple.introduceNextDisambiguationPageAsLabels(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void **)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  char v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  OUTLINED_FUNCTION_111(v7);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v8;
  v3[1] = RunCustomIntentCATsSimple.deviceUnlockAsLabels(device:);
  OUTLINED_FUNCTION_52();
  unint64_t v9 = OUTLINED_FUNCTION_81_2(47);
  return v10(v9);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds and conformance RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.offerMoreDisambiguationItems(device:remainingPages:customSelectionPrompt:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  *(unsigned char *)(v1 + 80) = v3;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t RunCustomIntentCATsSimple.offerMoreDisambiguationItems(device:remainingPages:customSelectionPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v15 = v11[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v16 = OUTLINED_FUNCTION_76_3();
  uint64_t v17 = (__n128 *)OUTLINED_FUNCTION_35_3(v16);
  uint64_t v18 = OUTLINED_FUNCTION_1_2(v17, (__n128)xmmword_2138B0);
  if (v15)
  {
    uint64_t v18 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  OUTLINED_FUNCTION_71_7(v18);
  if (v19) {
    OUTLINED_FUNCTION_100_0();
  }
  else {
    char v20 = &type metadata for Double;
  }
  uint64_t v21 = OUTLINED_FUNCTION_107_0((uint64_t)v20);
  v13[17] = 0x8000000000228C20;
  outlined init with copy of AppDisplayInfo?(v21, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v12, 1, v22);
  uint64_t v23 = v11[6];
  OUTLINED_FUNCTION_29_18();
  if (v24)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    v13[21] = v22;
    __swift_allocate_boxed_opaque_existential_1(v10);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v25();
    swift_retain();
  }
  char v26 = (void *)OUTLINED_FUNCTION_59();
  v11[8] = v26;
  *char v26 = v11;
  v26[1] = RunCustomIntentCATsSimple.disambiguateSlotValueItemsAsLabels(device:customPrompt:items:);
  OUTLINED_FUNCTION_18_18(v14 + 23);
  OUTLINED_FUNCTION_6_1();
  return v30(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreDisambiguationItemsDialogIds_optional __swiftcall RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreDisambiguationItemsDialogIds_optional)RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_43_2();
  }
  if (a1 == 1) {
    return 0x656761507473616CLL;
  }
  return 0x726F4D726566666FLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreDisambiguationItemsDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreDisambiguationItemsDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunCustomIntentCATsSimple.offerMoreDisambiguationItemsAsLabels(device:remainingPages:customSelectionPrompt:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  *(unsigned char *)(v1 + 80) = v3;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t RunCustomIntentCATsSimple.offerMoreDisambiguationItemsAsLabels(device:remainingPages:customSelectionPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = v11[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_76_3();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_35_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_2138B0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  OUTLINED_FUNCTION_71_7(v17);
  if (v18) {
    OUTLINED_FUNCTION_100_0();
  }
  else {
    char v19 = &type metadata for Double;
  }
  uint64_t v20 = OUTLINED_FUNCTION_107_0((uint64_t)v19);
  v13[17] = 0x8000000000228C20;
  outlined init with copy of AppDisplayInfo?(v20, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v21 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v12, 1, v21);
  uint64_t v22 = v11[6];
  OUTLINED_FUNCTION_29_18();
  if (v23)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v22, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    v13[21] = v21;
    __swift_allocate_boxed_opaque_existential_1(v10);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v24();
    swift_retain();
  }
  char v25 = (void *)OUTLINED_FUNCTION_59();
  v11[8] = v25;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds();
  OUTLINED_FUNCTION_44();
  *char v25 = v26;
  v25[1] = RunCustomIntentCATsSimple.disambiguateSlotValueItemsAsLabels(device:customPrompt:items:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_46_10();
  OUTLINED_FUNCTION_6_1();
  return v32(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.offerMoreItems(device:remainingPages:nextPageSize:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v6 + 73) = a5;
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 40) = v5;
  *(unsigned char *)(v6 + 72) = a3;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.offerMoreItems(device:remainingPages:nextPageSize:));
}

uint64_t RunCustomIntentCATsSimple.offerMoreItems(device:remainingPages:nextPageSize:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v17 = v1;
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v3 = (__n128 *)OUTLINED_FUNCTION_76_3();
  v0[6] = v3;
  OUTLINED_FUNCTION_118_0(v3, (__n128)xmmword_2138B0);
  if (v2)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState();
    uint64_t v5 = v2;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    v3[3].n128_u64[1] = 0;
    v3[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_70_5(v4, v5);
  if (v6)
  {
    uint64_t v7 = 0;
    v3[6].n128_u64[1] = 0;
    v3[7].n128_u64[0] = 0;
  }
  else
  {
    uint64_t v7 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_75_6((uint64_t)v7);
  if (v8)
  {
    unint64_t v10 = 0;
    unint64_t v9 = 0;
    v3[9].n128_u64[1] = 0;
    v3[10].n128_u64[0] = 0;
  }
  else
  {
    unint64_t v9 = v0[4];
    unint64_t v10 = &type metadata for Double;
  }
  v3[10].n128_u64[1] = (unint64_t)v10;
  v3[9].n128_u64[0] = v9;
  OUTLINED_FUNCTION_3_1();
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = (void *)OUTLINED_FUNCTION_64_0(v11);
  *uint64_t v12 = v13;
  v12[1] = RunCustomIntentCATsSimple.offerMoreItems(device:remainingPages:nextPageSize:);
  OUTLINED_FUNCTION_20_10();
  unint64_t v14 = OUTLINED_FUNCTION_80_2(30);
  return v15(v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *char v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreItemsDialogIds_optional __swiftcall RunCustomIntentCATsSimple.OfferMoreItemsDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.OfferMoreItemsDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreItemsDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunCustomIntentCATsSimple.OfferMoreItemsDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x726F4D726566666FLL;
  }
  else {
    return 0x656761507478656ELL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreItemsDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::OfferMoreItemsDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.OfferMoreItemsDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunCustomIntentCATsSimple.OfferMoreItemsDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunCustomIntentCATsSimple.offerMoreItemsAsLabels(device:remainingPages:nextPageSize:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v6 + 73) = a5;
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 40) = v5;
  *(unsigned char *)(v6 + 72) = a3;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.offerMoreItemsAsLabels(device:remainingPages:nextPageSize:));
}

uint64_t RunCustomIntentCATsSimple.offerMoreItemsAsLabels(device:remainingPages:nextPageSize:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v16 = v1;
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = (void *)v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_76_3();
  v0[6] = v3;
  OUTLINED_FUNCTION_118_0(v3, (__n128)xmmword_2138B0);
  if (v2)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState();
    uint64_t v5 = (uint64_t)v2;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    v3[3].n128_u64[1] = 0;
    v3[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_70_5(v4, v5);
  if (v6)
  {
    uint64_t v7 = 0;
    v3[6].n128_u64[1] = 0;
    v3[7].n128_u64[0] = 0;
  }
  else
  {
    uint64_t v7 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_75_6((uint64_t)v7);
  if (v8)
  {
    unint64_t v10 = 0;
    unint64_t v9 = 0;
    v3[9].n128_u64[1] = 0;
    v3[10].n128_u64[0] = 0;
  }
  else
  {
    unint64_t v9 = v0[4];
    unint64_t v10 = &type metadata for Double;
  }
  v3[10].n128_u64[1] = (unint64_t)v10;
  v3[9].n128_u64[0] = v9;
  OUTLINED_FUNCTION_3_1();
  uint64_t v11 = swift_task_alloc();
  OUTLINED_FUNCTION_58_6(v11);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v2 = v12;
  v2[1] = RunCustomIntentCATsSimple.offerMoreItemsAsLabels(device:remainingPages:nextPageSize:);
  OUTLINED_FUNCTION_52();
  unint64_t v13 = OUTLINED_FUNCTION_81_2(30);
  return v14(v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *char v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.OfferMoreItemsDialogIds and conformance RunCustomIntentCATsSimple.OfferMoreItemsDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValue(device:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_40_11(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_12_32(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  *uint64_t v22 = v23;
  v22[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_48_0();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

BOOL RunCustomIntentCATsSimple.PromptForSlotValueDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.PromptForSlotValueDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void RunCustomIntentCATsSimple.PromptForSlotValueDialogIds.rawValue.getter()
{
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.PromptForSlotValueDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueAsLabels(device:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueAsLabels(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_12_32(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_51_10();
  OUTLINED_FUNCTION_48_0();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_72_8(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v6);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_70_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_214D20);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_15_23(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  OUTLINED_FUNCTION_82_2();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  OUTLINED_FUNCTION_110_0();
  OUTLINED_FUNCTION_65_2();
  OUTLINED_FUNCTION_123(v24);
  uint64_t v25 = OUTLINED_FUNCTION_17_2();
  uint64_t v26 = (void *)OUTLINED_FUNCTION_132_0(v25);
  *uint64_t v26 = v27;
  v26[1] = RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_7(v12 + 32);
  OUTLINED_FUNCTION_48_0();
  return v31(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::PromptForSlotValueWithCustomTextDialogIds_optional __swiftcall RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::PromptForSlotValueWithCustomTextDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x4E707041776F6873;
  }
  else {
    return 0x6D6F74737563;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::PromptForSlotValueWithCustomTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::PromptForSlotValueWithCustomTextDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_72_8(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v6);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t RunCustomIntentCATsSimple.promptForSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_70_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_214D20);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_15_23(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  OUTLINED_FUNCTION_82_2();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v22, v12, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  OUTLINED_FUNCTION_110_0();
  OUTLINED_FUNCTION_65_2();
  OUTLINED_FUNCTION_123(v24);
  uint64_t v25 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_130_0(v25);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v26;
  v10[1] = RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_49_10();
  OUTLINED_FUNCTION_48_0();
  return v32(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.readDisambiguationItems(device:items:)(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.readDisambiguationItems(device:items:));
}

uint64_t RunCustomIntentCATsSimple.readDisambiguationItems(device:items:)()
{
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_38_2();
  v1[5] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_1_2(v3, (__n128)xmmword_212170);
  if (v2)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v3[3].n128_u64[1] = 0;
    v3[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_91_2(v4);
  v3[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v3[6].n128_u64[0] = v0;
  OUTLINED_FUNCTION_133_0();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  v1[6] = v5;
  *uint64_t v5 = v1;
  v5[1] = RunCustomIntentCATsSimple.readDisambiguationItems(device:items:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_23_1();
  return v9(v6, v7, v8, v9, v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

BOOL RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds.rawValue.getter()
{
  return 0x736D657469;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds(void *a1@<X8>)
{
}

uint64_t RunCustomIntentCATsSimple.readDisambiguationItemsAsLabels(device:items:)(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATsSimple.readDisambiguationItemsAsLabels(device:items:));
}

uint64_t RunCustomIntentCATsSimple.readDisambiguationItemsAsLabels(device:items:)()
{
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_38_2();
  v1[5] = v3;
  uint64_t v4 = OUTLINED_FUNCTION_1_2(v3, (__n128)xmmword_212170);
  if (v2)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v3[3].n128_u64[1] = 0;
    v3[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_91_2(v4);
  v3[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v3[6].n128_u64[0] = v0;
  OUTLINED_FUNCTION_133_0();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  v1[6] = v5;
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v5 = v6;
  v5[1] = RunCustomIntentCATsSimple.readDisambiguationItemsAsLabels(device:items:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_23_1();
  return v12(v7, v8, v9, v10, v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds and conformance RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValue(device:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_40_11(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_12_32(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  *uint64_t v22 = v23;
  v22[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_52_9();
  OUTLINED_FUNCTION_48_0();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueDialogIds_optional __swiftcall RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x50746C7561666564;
  }
  else {
    return 0x61506D6F74737563;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueAsLabels(device:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueAsLabels(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_12_32(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_51_10();
  OUTLINED_FUNCTION_48_0();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_72_8(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v6);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_70_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_214D20);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_15_23(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  OUTLINED_FUNCTION_82_2();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  OUTLINED_FUNCTION_110_0();
  OUTLINED_FUNCTION_65_2();
  OUTLINED_FUNCTION_123(v24);
  uint64_t v25 = OUTLINED_FUNCTION_17_2();
  uint64_t v26 = (void *)OUTLINED_FUNCTION_132_0(v25);
  *uint64_t v26 = v27;
  v26[1] = RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_7(v12 + 34);
  OUTLINED_FUNCTION_48_0();
  return v31(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueWithCustomTextDialogIds_optional __swiftcall RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueWithCustomTextDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000012;
  }
  else {
    return 0x4E707041776F6873;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueWithCustomTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunCustomIntentCATsSimple::UnsupportedSlotValueWithCustomTextDialogIds_optional *a2@<X8>)
{
  result.SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds.init(rawValue:)(*a1).value;
  a2->SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_72_8(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v6);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t RunCustomIntentCATsSimple.unsupportedSlotValueWithCustomTextAsLabels(device:customPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_70_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_214D20);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_15_23(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  OUTLINED_FUNCTION_82_2();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v22, v12, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  OUTLINED_FUNCTION_110_0();
  OUTLINED_FUNCTION_65_2();
  OUTLINED_FUNCTION_123(v24);
  uint64_t v25 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_130_0(v25);
  lazy protocol witness table accessor for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v26;
  v10[1] = RunCustomIntentCATsSimple.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_49_10();
  OUTLINED_FUNCTION_48_0();
  return v32(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds and conformance RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds);
  }
  return result;
}

uint64_t RunCustomIntentCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return RunCustomIntentCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t RunCustomIntentCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_16(v10);
  __chkstk_darwin(v11);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t RunCustomIntentCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_56();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v1;
}

uint64_t RunCustomIntentCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_56();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type RunCustomIntentCATsSimple.Properties and conformance RunCustomIntentCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.Properties and conformance RunCustomIntentCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.Properties and conformance RunCustomIntentCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunCustomIntentCATsSimple.Properties and conformance RunCustomIntentCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for RunCustomIntentCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for RunCustomIntentCATsSimple;
  if (!type metadata singleton initialization cache for RunCustomIntentCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RunCustomIntentCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for RunCustomIntentCATsSimple()
{
  return type metadata accessor for RunCustomIntentCATsSimple();
}

uint64_t getEnumTagSinglePayload for RunCustomIntentCATsSimple.Properties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE6)
  {
    if (a2 + 26 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 26) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 27;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  int v5 = v6 - 27;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RunCustomIntentCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE5)
  {
    unsigned int v6 = ((a2 - 230) >> 8) + 1;
    *uint64_t result = a2 + 26;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x15CC7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 26;
        break;
    }
  }
  return result;
}

void type metadata accessor for RunCustomIntentCATsSimple.Properties()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DescribeCustomIntentItemDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DeviceUnlockDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DisambiguateSlotValueDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DisambiguateSlotValueItemsDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.DoneButtonDialogIds()
{
}

uint64_t getEnumTagSinglePayload for RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_127_0(-1);
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 4);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 4);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 4);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_127_0(v8);
}

unsigned char *storeEnumTagSinglePayload for RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_126_0((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_136_0((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x15CE64);
      case 4:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_124_0((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = OUTLINED_FUNCTION_125_0(result, a2 + 3);
        break;
    }
  }
  return result;
}

void type metadata accessor for RunCustomIntentCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.ExtensionTimedOutDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.FollowupNotSupportedDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.HandoffNotificationMessageDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.HandoffNotificationMessageHomePodOnlyDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.InitiateHandoffDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.IntentHandledResponseDialogIds()
{
}

uint64_t getEnumTagSinglePayload for RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_127_0(-1);
  }
  if (a2 < 0xD6) {
    goto LABEL_17;
  }
  if (a2 + 42 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 42) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 43);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 43);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 43);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2B;
  int v8 = v6 - 43;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_127_0(v8);
}

unsigned char *storeEnumTagSinglePayload for RunCustomIntentCATsSimple.IntentConfirmationPromptDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 42 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 42) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD5)
  {
    unsigned int v6 = ((a2 - 214) >> 8) + 1;
    *uint64_t result = a2 + 42;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_126_0((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_136_0((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x15D040);
      case 4:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_124_0((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = OUTLINED_FUNCTION_125_0(result, a2 + 42);
        break;
    }
  }
  return result;
}

void type metadata accessor for RunCustomIntentCATsSimple.IntentHandledResponseWithTemplateDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.IntroduceNextDisambiguationPageDialogIds()
{
}

uint64_t getEnumTagSinglePayload for RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_127_0(-1);
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 3);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 3);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 3);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_127_0(v8);
}

unsigned char *storeEnumTagSinglePayload for RunCustomIntentCATsSimple.IntroduceDisambiguationListDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_126_0((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_136_0((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x15D1D4);
      case 4:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_124_0((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = OUTLINED_FUNCTION_125_0(result, a2 + 2);
        break;
    }
  }
  return result;
}

void type metadata accessor for RunCustomIntentCATsSimple.OfferMoreDisambiguationItemsDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.OfferMoreItemsDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.PromptForSlotValueDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.PromptForSlotValueWithCustomTextDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for RunCustomIntentCATsSimple.ConfirmSlotValueDialogIds(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x15D2C8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for RunCustomIntentCATsSimple.ReadDisambiguationItemsDialogIds()
{
}

void type metadata accessor for RunCustomIntentCATsSimple.UnsupportedSlotValueDialogIds()
{
}

uint64_t getEnumTagSinglePayload for RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_127_0(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 2);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 2);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_127_0((*a1 | (v4 << 8)) - 2);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_127_0(v8);
}

unsigned char *storeEnumTagSinglePayload for RunCustomIntentCATsSimple.ConfirmSlotValueWithCustomTextDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_126_0((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_136_0((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x15D448);
      case 4:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_124_0((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = OUTLINED_FUNCTION_125_0(result, a2 + 1);
        break;
    }
  }
  return result;
}

void type metadata accessor for RunCustomIntentCATsSimple.UnsupportedSlotValueWithCustomTextDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_7_30(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "intentCategory");
  *(unsigned char *)(v2 + 95) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_32(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "parameterName");
  *(_WORD *)(v2 + 94) = -4864;
  return result;
}

uint64_t OUTLINED_FUNCTION_13_28()
{
  uint64_t result = *(void *)(v0 + 32);
  strcpy((char *)(v1 + 128), "categoryVerb");
  *(unsigned char *)(v1 + 141) = 0;
  *(_WORD *)(v1 + 142) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_15_23(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "customPrompt");
  *(unsigned char *)(v2 + 93) = 0;
  *(_WORD *)(v2 + 94) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_55_7()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_64_5(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x614E6E6F69746361;
  v2[11] = 0xEA0000000000656DLL;
  return result;
}

uint64_t OUTLINED_FUNCTION_70_5@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 48) = a2;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "remainingPages");
  *(unsigned char *)(v2 + 95) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_71_7(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "remainingPages");
  *(unsigned char *)(v2 + 95) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_72_8(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 88) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = result;
  *(void *)(v5 + 24) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_73_3()
{
  uint64_t result = *(void *)(v0 + 48);
  strcpy((char *)(v1 + 224), "customDialog");
  *(unsigned char *)(v1 + 237) = 0;
  *(_WORD *)(v1 + 238) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_74_3()
{
  uint64_t result = *(void *)(v0 + 40);
  strcpy((char *)(v1 + 176), "customDialog");
  *(unsigned char *)(v1 + 189) = 0;
  *(_WORD *)(v1 + 190) = -5120;
  return result;
}

void OUTLINED_FUNCTION_75_6(uint64_t a1@<X8>)
{
  *(void *)(v2 + 96) = v1;
  *(void *)(v2 + 120) = a1;
  strcpy((char *)(v2 + 128), "nextPageSize");
  *(unsigned char *)(v2 + 141) = 0;
  *(_WORD *)(v2 + 142) = -5120;
}

uint64_t OUTLINED_FUNCTION_79_6(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x6E756F436D657469;
  v2[11] = 0xE900000000000074;
  return result;
}

uint64_t OUTLINED_FUNCTION_87_3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v7 + 120) = a6;
  *(void *)(v7 + 48) = a5;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + 16) = result;
  *(void *)(v7 + 24) = a2;
  return result;
}

void OUTLINED_FUNCTION_88_2(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x657A695365676170;
  v2[17] = 0xE800000000000000;
}

uint64_t OUTLINED_FUNCTION_89_2(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 1835365481;
  v2[11] = 0xE400000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_91_2(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x736D657469;
  v2[11] = 0xE500000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_96_1()
{
  return 0x66666F646E6168;
}

uint64_t OUTLINED_FUNCTION_97_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v2 + 40);
  v3[18] = a1;
  v3[21] = v1;
  v3[22] = 0xD000000000000010;
  return result;
}

uint64_t OUTLINED_FUNCTION_98(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0xD000000000000010;
  return result;
}

void OUTLINED_FUNCTION_100_0()
{
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0;
}

uint64_t OUTLINED_FUNCTION_104(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0xD000000000000018;
  return result;
}

uint64_t OUTLINED_FUNCTION_106_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_107_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v2 + 32);
  v3[12] = v1;
  v3[15] = a1;
  v3[16] = 0xD000000000000015;
  return result;
}

void OUTLINED_FUNCTION_109()
{
  *(void *)(v2 + 272) = v0;
  *(void *)(v2 + 280) = (v1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_111(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_112(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = v7;
  *(unsigned char *)(v8 + 90) = a6;
  *(unsigned char *)(v8 + 89) = a5;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a4;
  *(unsigned char *)(v8 + 88) = a3;
  *(void *)(v8 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_116()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_117_0()
{
  *(void *)(v0 + 128) = 0x736D657469;
  *(void *)(v0 + 136) = 0xE500000000000000;
}

__n128 *OUTLINED_FUNCTION_118_0(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x656369766564;
  result[2].n128_u64[1] = 0xE600000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_119_0(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

void OUTLINED_FUNCTION_123(char a1@<W8>)
{
  *(void *)(v2 + 216) = v1;
  *(unsigned char *)(v2 + 192) = a1;
}

uint64_t OUTLINED_FUNCTION_124_0@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 1) = a2;
  return result;
}

unsigned char *OUTLINED_FUNCTION_125_0@<X0>(unsigned char *result@<X0>, char a2@<W8>)
{
  *uint64_t result = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_126_0@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(unsigned char *)(result + 1) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_127_0@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_128_0()
{
  return *(void *)(v0 + 48);
}

uint64_t OUTLINED_FUNCTION_129_0()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_130_0(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_132_0(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_133_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_134()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_136_0@<X0>(uint64_t result@<X0>, __int16 a2@<W8>)
{
  *(_WORD *)(result + 1) = a2;
  return result;
}

void OUTLINED_FUNCTION_137(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + 192) = v1;
  *(void *)(v2 + 216) = a1;
  *(void *)(v2 + 224) = v3 | 8;
}

uint64_t OUTLINED_FUNCTION_138_0()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_139_0()
{
  return *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_141_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_142_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = v5;
  *(unsigned char *)(v6 + 104) = a5;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_143(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

void OUTLINED_FUNCTION_147_0(char a1@<W8>)
{
  *(void *)(v2 + 312) = v1;
  *(unsigned char *)(v2 + 288) = a1;
}

uint64_t *OUTLINED_FUNCTION_149()
{
  *(void *)(v2 + 264) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t LinkMetadataProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)LNMetadataProvider) init];
  return v0;
}

id LinkMetadataProvider.actionMetadata(bundleId:actionId:)(void (*a1)(unsigned char *, uint64_t), unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v91 = a1;
  type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_0_2();
  uint64_t v83 = v8;
  uint64_t v84 = v7;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_25_6();
  uint64_t v81 = v9;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v10);
  uint64_t v82 = &v75[-v11];
  uint64_t v12 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_2();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_25_6();
  uint64_t v85 = v16;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v17);
  uint64_t v86 = &v75[-v18];
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v19);
  uint64_t v90 = &v75[-v20];
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v21);
  uint64_t v23 = &v75[-v22];
  uint64_t v24 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_0_2();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  uint64_t v29 = &v75[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v92 = a3;
  uint64_t v30 = __swift_project_value_buffer(v24, (uint64_t)static Signposter.voiceCommands);
  uint64_t v88 = v26;
  uint64_t v89 = v24;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v26 + 16))(v29, v30, v24);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v31 = OSSignposter.logHandle.getter();
  unint64_t v93 = a2;
  uint64_t v32 = v31;
  int v33 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v78 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16);
    v78(v90, v23, v12);
    uint64_t v34 = swift_slowAlloc();
    uint64_t v79 = v23;
    int v76 = v33;
    unint64_t v35 = a4;
    uint64_t v36 = v34;
    uint64_t v37 = (void *)swift_slowAlloc();
    uint64_t v80 = v14;
    uint64_t v77 = v37;
    id v95 = v37;
    *(_DWORD *)uint64_t v36 = 136315394;
    unint64_t v38 = v93;
    swift_bridgeObjectRetain();
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v91, v38, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v36 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v35, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v39 = v90;
    os_signpost_id_t v40 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v32, (os_signpost_type_t)v76, v40, "LinkFetchActionMetadata", "BundleId: %s, ActionId: %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    uint64_t v14 = v80;
    OUTLINED_FUNCTION_7_0();
    uint64_t v23 = v79;
    OUTLINED_FUNCTION_7_0();

    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v39, v12);
    v78(v39, v23, v12);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v90, v23, v12);
  }
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v91 = *(void (**)(unsigned char *, uint64_t))(v14 + 8);
  v91(v23, v12);
  uint64_t v41 = *(void **)(v87 + 16);
  NSString v42 = String._bridgeToObjectiveC()();
  NSString v43 = String._bridgeToObjectiveC()();
  id v95 = 0;
  id v44 = [v41 actionForBundleIdentifier:v42 andActionIdentifier:v43 error:&v95];

  if (v44)
  {
    unint64_t v93 = (unint64_t)v44;
    id v45 = v95;
    uint64_t v46 = (void *)OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v47 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v90 = v29;
      uint64_t v92 = v12;
      swift_retain();
      uint64_t v48 = v82;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v50 = v83;
      uint64_t v49 = v84;
      if ((*(unsigned int (**)(unsigned char *, uint64_t))(v83 + 88))(v48, v84) != enum case for OSSignpostError.doubleEnd(_:)) {
        (*(void (**)(unsigned char *, uint64_t))(v50 + 8))(v48, v49);
      }
      *(_WORD *)swift_slowAlloc() = 0;
      os_signpost_id_t v57 = OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_6_32(&dword_0, v58, v47, v57, "LinkFetchActionMetadata");
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_5_27();
    v59();
    swift_release();
    uint64_t v60 = OUTLINED_FUNCTION_2_33();
    v61(v60);
    return (id)v93;
  }
  else
  {
    id v51 = v95;
    uint64_t v52 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v53 = (void *)OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    LODWORD(v93) = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v90 = v29;
      uint64_t v92 = v12;
      swift_retain();
      uint64_t v54 = v81;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v56 = v83;
      uint64_t v55 = v84;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v83 + 88))(v54, v84) != enum case for OSSignpostError.doubleEnd(_:)) {
        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
      }
      *(_WORD *)swift_slowAlloc() = 0;
      os_signpost_id_t v62 = OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_6_32(&dword_0, v63, (os_signpost_type_t)v93, v62, "LinkFetchActionMetadata");
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_5_27();
    v64();
    swift_release();
    uint64_t v65 = OUTLINED_FUNCTION_2_33();
    v66(v65);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      uint64_t v71 = (void *)swift_slowAlloc();
      uint64_t v94 = v52;
      id v95 = v71;
      *(_DWORD *)uint64_t v70 = 136315138;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v72 = String.init<A>(describing:)();
      uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v68, v69, "LinkMetadataProvider error %s", v70, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
  }
  return v44;
}

uint64_t LinkMetadataProvider.enums(forBundleIdentifier:)()
{
  uint64_t v2 = *(void **)(v0 + 16);
  NSString v3 = String._bridgeToObjectiveC()();
  id v9 = 0;
  id v4 = [v2 enumsForBundleIdentifier:v3 error:&v9];

  id v5 = v9;
  if (v4)
  {
    type metadata accessor for LNEnumMetadata();
    uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = v5;
  }
  else
  {
    id v7 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

uint64_t LinkMetadataProvider.init()()
{
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)LNMetadataProvider) init];
  return v0;
}

id protocol witness for LinkMetadataProviding.actionMetadata(bundleId:actionId:) in conformance LinkMetadataProvider(void (*a1)(unsigned char *, uint64_t), unint64_t a2, uint64_t a3, unint64_t a4)
{
  return LinkMetadataProvider.actionMetadata(bundleId:actionId:)(a1, a2, a3, a4);
}

uint64_t protocol witness for LinkMetadataProviding.enums(forBundleIdentifier:) in conformance LinkMetadataProvider()
{
  return LinkMetadataProvider.enums(forBundleIdentifier:)();
}

unint64_t type metadata accessor for LNEnumMetadata()
{
  unint64_t result = lazy cache variable for type metadata for LNEnumMetadata;
  if (!lazy cache variable for type metadata for LNEnumMetadata)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNEnumMetadata);
  }
  return result;
}

uint64_t type metadata accessor for LinkMetadataProvider()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_2_33()
{
  return v0;
}

void OUTLINED_FUNCTION_6_32(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  _os_signpost_emit_with_name_impl(a1, v5, a3, a4, a5, v6, v7, 2u);
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.unitTaskBuilder(value:symbol:unitName:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a6;
  uint64_t v10 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_2();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoEntityBuilder_common_Measurement();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_Measurement.init()();
  if ((a2 & 1) == 0)
  {
    uint64_t v19 = v10;
    uint64_t v20 = a5;
    uint64_t v21 = v12;
    uint64_t v22 = a3;
    type metadata accessor for UsoEntityBuilder_common_MeasurementComponent();
    OUTLINED_FUNCTION_35_2();
    UsoEntityBuilder_common_MeasurementComponent.init()();
    type metadata accessor for UsoEntityBuilder_common_Integer();
    OUTLINED_FUNCTION_35_2();
    UsoEntityBuilder_common_Integer.init()();
    dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValue(value:)();
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setValue(value:)();
    swift_release();
    if (a4 && v23)
    {
      type metadata accessor for UsoEntityBuilder_common_MeasurementUnit();
      OUTLINED_FUNCTION_35_2();
      swift_bridgeObjectRetain();
      UsoEntityBuilder_common_MeasurementUnit.init()();
      dispatch thunk of UsoEntityBuilder_common_MeasurementUnit.setName(value:)();
      if (dispatch thunk of UsoEntityBuilder_common_MeasurementUnit.name.getter())
      {
        UsoIdentifier.init(value:appBundleId:namespace:)();
        dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v19);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_retain();
      dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setUnit(value:)();
      swift_release_n();
    }
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_Measurement.addComponents(value:)();
    swift_release();
    swift_release_n();
  }
  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_VoiceCommandPayload.init()();
  swift_retain();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setMeasurement(value:)();
  swift_release();
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  OUTLINED_FUNCTION_35_2();
  uint64_t v16 = UsoTaskBuilder_execute_common_VoiceCommand.init()();
  swift_retain();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)();
  swift_release();
  swift_release_n();
  return v16;
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)()
{
  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_VoiceCommandPayload.init()();
  OUTLINED_FUNCTION_2_34();
  type metadata accessor for UsoPrimitiveStringBuilder();
  OUTLINED_FUNCTION_35_2();
  swift_bridgeObjectRetain();
  UsoPrimitiveStringBuilder.init(value:)();
  dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)();
  swift_release();
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  uint64_t v0 = OUTLINED_FUNCTION_35_2();
  UsoTaskBuilder_execute_common_VoiceCommand.init()();
  OUTLINED_FUNCTION_4_32();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)();
  OUTLINED_FUNCTION_3_30();
  return v0;
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.entityTaskBuilder()()
{
  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_VoiceCommandPayload.init()();
  OUTLINED_FUNCTION_2_34();
  type metadata accessor for UsoEntityBuilder_common_AppEntity();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_AppEntity.init()();
  type metadata accessor for UsoPrimitiveStringBuilder();
  OUTLINED_FUNCTION_35_2();
  UsoPrimitiveStringBuilder.init(value:)();
  OUTLINED_FUNCTION_5_28();
  dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)();
  swift_release();
  swift_retain();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setAppEntity(value:)();
  swift_release();
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  uint64_t v0 = OUTLINED_FUNCTION_35_2();
  UsoTaskBuilder_execute_common_VoiceCommand.init()();
  OUTLINED_FUNCTION_4_32();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)();
  swift_release();
  OUTLINED_FUNCTION_3_30();
  return v0;
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.urlTaskBuilder(value:)()
{
  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_VoiceCommandPayload.init()();
  OUTLINED_FUNCTION_2_34();
  type metadata accessor for UsoEntityBuilder_common_Uri();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_Uri.init()();
  type metadata accessor for UsoPrimitiveStringBuilder();
  OUTLINED_FUNCTION_35_2();
  swift_bridgeObjectRetain();
  UsoPrimitiveStringBuilder.init(value:)();
  dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)();
  swift_release();
  swift_retain();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setContactAddress(value:)();
  swift_release();
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  uint64_t v0 = OUTLINED_FUNCTION_35_2();
  UsoTaskBuilder_execute_common_VoiceCommand.init()();
  OUTLINED_FUNCTION_4_32();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)();
  swift_release();
  OUTLINED_FUNCTION_3_30();
  return v0;
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()()
{
  return static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()((void (*)(uint64_t))&type metadata accessor for UsoEntityBuilder_common_GeographicArea, (void (*)(void))&UsoEntityBuilder_common_GeographicArea.init(), (uint64_t)&protocol witness table for UsoEntityBuilder_common_GeographicArea, (void (*)(void))&dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setGeographicArea(value:));
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.personTaskBuilder(value:)()
{
  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_VoiceCommandPayload.init()();
  OUTLINED_FUNCTION_2_34();
  type metadata accessor for UsoEntityBuilder_common_Person();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_Person.init()();
  type metadata accessor for UsoPrimitiveStringBuilder();
  OUTLINED_FUNCTION_35_2();
  swift_bridgeObjectRetain();
  UsoPrimitiveStringBuilder.init(value:)();
  OUTLINED_FUNCTION_5_28();
  dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)();
  swift_release();
  swift_retain();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setAgent(value:)();
  swift_release();
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  uint64_t v0 = OUTLINED_FUNCTION_35_2();
  UsoTaskBuilder_execute_common_VoiceCommand.init()();
  OUTLINED_FUNCTION_4_32();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)();
  swift_release();
  OUTLINED_FUNCTION_3_30();
  return v0;
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.currencyTaskBuilder(value:currencyCode:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoEntityBuilder_common_CurrencyAmount();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_CurrencyAmount.init()();
  if (a4)
  {
    type metadata accessor for UsoEntityBuilder_common_Currency();
    OUTLINED_FUNCTION_35_2();
    swift_bridgeObjectRetain();
    UsoEntityBuilder_common_Currency.init()();
    dispatch thunk of UsoEntityBuilder_common_Currency.setName(value:)();
    if (dispatch thunk of UsoEntityBuilder_common_Currency.name.getter())
    {
      UsoIdentifier.init(value:appBundleId:namespace:)();
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setCurrency(value:)();
    swift_release_n();
  }
  if ((a2 & 1) == 0)
  {
    type metadata accessor for UsoEntityBuilder_common_Integer();
    OUTLINED_FUNCTION_35_2();
    UsoEntityBuilder_common_Integer.init()();
    dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValue(value:)();
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setAmount(value:)();
    swift_release_n();
  }
  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_VoiceCommandPayload.init()();
  swift_retain();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setCurrency(value:)();
  swift_release();
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  OUTLINED_FUNCTION_35_2();
  uint64_t v12 = UsoTaskBuilder_execute_common_VoiceCommand.init()();
  swift_retain();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)();
  swift_release();
  swift_release_n();
  return v12;
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.numberTaskBuilder()()
{
  return static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()((void (*)(uint64_t))&type metadata accessor for UsoEntityBuilder_common_Number, (void (*)(void))&UsoEntityBuilder_common_Number.init(), (uint64_t)&protocol witness table for UsoEntityBuilder_common_Number, (void (*)(void))&dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setNumber(value:));
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.dateTaskBuilder()()
{
  return static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()((void (*)(uint64_t))&type metadata accessor for UsoEntityBuilder_common_DateTime, (void (*)(void))&UsoEntityBuilder_common_DateTime.init(), (uint64_t)&protocol witness table for UsoEntityBuilder_common_DateTime, (void (*)(void))&dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setDateTime(value:));
}

uint64_t static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()(void (*a1)(uint64_t), void (*a2)(void), uint64_t a3, void (*a4)(void))
{
  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_VoiceCommandPayload.init()();
  uint64_t v7 = OUTLINED_FUNCTION_2_34();
  a1(v7);
  OUTLINED_FUNCTION_35_2();
  a2();
  a4();
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  uint64_t v8 = OUTLINED_FUNCTION_35_2();
  UsoTaskBuilder_execute_common_VoiceCommand.init()();
  OUTLINED_FUNCTION_4_32();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)();
  swift_release();
  OUTLINED_FUNCTION_3_30();
  return v8;
}

uint64_t OUTLINED_FUNCTION_2_34()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_3_30()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_4_32()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_5_28()
{
  return 1701667182;
}

uint64_t CustomIntentContinueInAppFlowStrategy.__allocating_init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)()
{
  OUTLINED_FUNCTION_63_1();
  swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1(v0, *(void *)(v0 + 24));
  OUTLINED_FUNCTION_17_13();
  __chkstk_darwin(v1);
  NSString v3 = OUTLINED_FUNCTION_24_12(v2, v15);
  uint64_t v5 = v4(v3);
  uint64_t v13 = OUTLINED_FUNCTION_3_31(v5, v6, v7, v8, v9, v10, v11, v12, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return v13;
}

uint64_t CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)()
{
  OUTLINED_FUNCTION_63_1();
  __swift_mutable_project_boxed_opaque_existential_1(v1, *(void *)(v1 + 24));
  OUTLINED_FUNCTION_17_13();
  __chkstk_darwin(v2);
  id v4 = OUTLINED_FUNCTION_24_12(v3, v16);
  uint64_t v6 = v5(v4);
  uint64_t v14 = OUTLINED_FUNCTION_3_31(v6, v7, v8, v9, v10, v11, v12, v13, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return v14;
}

BOOL CustomIntentContinueInAppFlowStrategy.requireUnlock(intentResolutionRecord:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  return (dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0;
}

uint64_t CustomIntentContinueInAppFlowStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentContinueInAppFlowStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:));
}

uint64_t CustomIntentContinueInAppFlowStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:)()
{
  uint64_t v1 = (uint64_t *)v0[2];
  uint64_t v2 = *(void *)(v0[4] + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v3 = IntentResolutionRecord.app.getter();
  id v4 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v5 = (void *)IntentResolutionRecord.intentResponse.getter();
  uint64_t v6 = *(void (**)(uint64_t, void *, void *))(*(void *)v2 + 224);
  v1[3] = type metadata accessor for AceOutput();
  v1[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v1);
  v6(v3, v4, v5);

  swift_release();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t CustomIntentContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:));
}

uint64_t CustomIntentContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:)()
{
  uint64_t v1 = *(void *)(v0[4] + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v2 = IntentResolutionRecord.app.getter();
  v0[5] = v2;
  uint64_t v3 = IntentResolutionRecord.intent.getter();
  v0[6] = v3;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v1 + 232)
                                                         + **(int **)(*(void *)v1 + 232));
  id v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *id v4 = v0;
  v4[1] = CustomIntentContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  uint64_t v5 = v0[2];
  return v7(v5, v2, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  id v4 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(CustomIntentContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:), 0, 0);
  }
  else
  {

    swift_release();
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.requireUnlock(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))() & 1;
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 112)
                                                + **(int **)(**(void **)v2 + 112));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 120)
                                                + **(int **)(**(void **)v2 + 120));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance CustomIntentContinueInAppFlowStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.authenticationPolicy.getter in conformance CustomIntentContinueInAppFlowStrategy()
{
  return UnlockDeviceFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock() in conformance CustomIntentContinueInAppFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = ListShortcutsCATs.viewShortcutsInApp();
  return UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock()(a1, a2, a3);
}

uint64_t specialized CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v30 = a3;
  uint64_t v31 = a5;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v13 = *(void *)(a8 - 8);
  uint64_t v27 = a9;
  __chkstk_darwin(a1);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CATOption();
  __chkstk_darwin(v16 - 8);
  outlined init with copy of DeviceState(a4, a7 + 16);
  outlined init with copy of DeviceState(a4, (uint64_t)v32);
  type metadata accessor for RunCustomIntentCATs();
  static CATOption.defaultMode.getter();
  uint64_t v26 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v19 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for CustomIntentContinueInAppResponseGenerator();
  uint64_t v20 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a6, a8);
  specialized CustomIntentContinueInAppResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(v28, v29, v30, (uint64_t)v32, v26, v17, v18, v19, v31, (uint64_t)v15, v20, a8, v27, v24, v25, v26, v27, v28, v29,
    v30,
    v31,
    v32[0],
    (void *)v32[1],
    v32[2],
    v32[3]);
  uint64_t v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a6, a8);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  *(void *)(a7 + 56) = v22;
  return a7;
}

uint64_t base witness table accessor for ContinueInAppDialogFlowStrategyAsync in CustomIntentContinueInAppFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy);
}

uint64_t type metadata accessor for CustomIntentContinueInAppFlowStrategy()
{
  return self;
}

uint64_t base witness table accessor for UnlockDeviceFlowStrategyAsync in CustomIntentContinueInAppFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy);
}

uint64_t base witness table accessor for ContinueInAppFlowStrategy in CustomIntentContinueInAppFlowStrategy()
{
  return lazy protocol witness table accessor for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy);
}

uint64_t lazy protocol witness table accessor for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CustomIntentContinueInAppFlowStrategy();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_31(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)(v14, v13, v12, v11, v10, v16, v9, v15, a9);
}

uint64_t static RCHChildFlowProducersAsync.forCustomIntents(voiceCommandName:originDevice:runner:siriEnvironment:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9 = type metadata accessor for CATOption();
  __chkstk_darwin(v9 - 8);
  OUTLINED_FUNCTION_25_8();
  uint64_t v10 = type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for INIntentResponse);
  RCHChildFlowProducersAsync.init()();
  type metadata accessor for ModeInfoProvider();
  swift_allocObject();
  id v31 = ModeInfoProvider.init()();
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v35);
  type metadata accessor for RunCustomIntentCATs();
  static CATOption.defaultMode.getter();
  CATWrapper.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_2_34();
  uint64_t v11 = type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  CATWrapperSimple.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_92();
  type metadata accessor for CustomIntentNeedsValueFlowStrategy();
  swift_allocObject();
  uint64_t v12 = CustomIntentNeedsValueFlowStrategy.init(deviceState:catWrapper:catWrapperSimple:)(v35, v10, v11);
  *(void *)&v35[0] = v12;
  lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentNeedsValueFlowStrategy);
  OUTLINED_FUNCTION_6_33();
  static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INIntent, INIntentResponse>);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  OUTLINED_FUNCTION_1_29();
  swift_bridgeObjectRetain();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapper.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  CATWrapperSimple.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_2_34();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v30 = type metadata accessor for ResponseFactory();
  uint64_t v16 = swift_allocObject();
  ResponseFactory.init()();
  OUTLINED_FUNCTION_92();
  type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
  uint64_t v17 = OUTLINED_FUNCTION_35_2();
  uint64_t v18 = specialized CustomIntentNeedsConfirmationFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:responseFactory:)(a1, a2, a5, (uint64_t)v35, v13, (uint64_t)v12, v14, v15, v16, v17);
  *(void *)&v35[0] = v18;
  lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentNeedsConfirmationFlowStrategy and conformance CustomIntentNeedsConfirmationFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy);
  OUTLINED_FUNCTION_6_33();
  static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  swift_release();
  OUTLINED_FUNCTION_0_29();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  OUTLINED_FUNCTION_1_29();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  CATWrapperSimple.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_2_34();
  type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  uint64_t v19 = swift_allocObject();
  *(void *)&v35[0] = specialized CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)(a1, a2, (uint64_t)v35, (uint64_t)v31, a5, v18, v19);
  lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentNeedsDisambiguationFlowStrategy and conformance CustomIntentNeedsDisambiguationFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy);
  OUTLINED_FUNCTION_6_33();
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  swift_release();
  OUTLINED_FUNCTION_0_29();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  OUTLINED_FUNCTION_1_29();
  type metadata accessor for CustomIntentUnsupportedValueFlowStrategy();
  swift_allocObject();
  *(void *)&v35[0] = CustomIntentUnsupportedValueFlowStrategy.init(deviceState:)((uint64_t)v35);
  lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentUnsupportedValueFlowStrategy and conformance CustomIntentUnsupportedValueFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentUnsupportedValueFlowStrategy);
  OUTLINED_FUNCTION_2_35();
  static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_4_33();
  OUTLINED_FUNCTION_0_29();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  OUTLINED_FUNCTION_1_29();
  type metadata accessor for CustomIntentConfirmIntentFlowStrategy(0);
  OUTLINED_FUNCTION_35_2();
  swift_bridgeObjectRetain();
  swift_retain();
  *(void *)&v35[0] = CustomIntentConfirmIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)(a1, a2, a5, (uint64_t)v35);
  lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentConfirmIntentFlowStrategy and conformance CustomIntentConfirmIntentFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentConfirmIntentFlowStrategy);
  static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)();
  OUTLINED_FUNCTION_4_33();
  OUTLINED_FUNCTION_0_29();
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  OUTLINED_FUNCTION_1_29();
  type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  *(void *)&v35[0] = CustomIntentHandleIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)(a1, a2, a5, (uint64_t)v35);
  lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentHandleIntentFlowStrategy);
  OUTLINED_FUNCTION_2_35();
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_4_33();
  OUTLINED_FUNCTION_0_29();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  __swift_project_boxed_opaque_existential_1(a6, a6[3]);
  if (dispatch thunk of DeviceState.isHomePod.getter())
  {
    outlined init with copy of DeviceState(a4, (uint64_t)v35);
    outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v33);
    type metadata accessor for CustomIntentContinueInAppWithDialogStrategy();
    swift_allocObject();
    *(void *)&v35[0] = CustomIntentContinueInAppWithDialogStrategy.init(runner:deviceState:)(v35, (uint64_t)v33);
    lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentContinueInAppWithDialogStrategy);
    OUTLINED_FUNCTION_2_35();
    uint64_t v20 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithHandoffToCompanionProducer<A>(strategy:)();
    swift_release();
    uint64_t v21 = v30;
  }
  else
  {
    outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v35);
    type metadata accessor for ContinueInAppCATWrapperSimple();
    memset(v33, 0, sizeof(v33));
    uint64_t v34 = 0;
    OUTLINED_FUNCTION_35_2();
    outlined init with copy of DeviceState?((uint64_t)v33, (uint64_t)v32);
    swift_bridgeObjectRetain();
    swift_retain();
    SiriKitFlowCATWrapperSimple.init(deviceState:)();
    uint64_t v23 = v22;
    outlined destroy of DeviceState?((uint64_t)v33);
    uint64_t v21 = v30;
    uint64_t v24 = swift_allocObject();
    ResponseFactory.init()();
    OUTLINED_FUNCTION_92();
    type metadata accessor for CustomIntentContinueInAppFlowStrategy();
    uint64_t v25 = swift_allocObject();
    *(void *)&v35[0] = specialized CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)(a1, a2, a5, (uint64_t)v35, v23, v24, v25);
    lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentContinueInAppFlowStrategy);
    OUTLINED_FUNCTION_6_33();
    uint64_t v20 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)();
    swift_release();
  }
  OUTLINED_FUNCTION_0_29();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  OUTLINED_FUNCTION_1_29();
  swift_allocObject();
  ResponseFactory.init()();
  OUTLINED_FUNCTION_2_34();
  type metadata accessor for CustomIntentTCCFlowStrategy();
  uint64_t v26 = (void *)swift_allocObject();
  v26[10] = &type metadata for EnableTCCLabelsProvider;
  v26[11] = &protocol witness table for EnableTCCLabelsProvider;
  v26[15] = v21;
  v26[16] = &protocol witness table for ResponseFactory;
  v26[12] = v20;
  outlined init with take of AceServiceInvokerAsync(v35, (uint64_t)(v26 + 2));
  *(void *)&v35[0] = v26;
  lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentTCCFlowStrategy and conformance CustomIntentTCCFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentTCCFlowStrategy);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  swift_release();
  OUTLINED_FUNCTION_0_29();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  return swift_release();
}

id closure #1 in static RCHChildFlowProducersAsync.forCustomIntents(voiceCommandName:originDevice:runner:siriEnvironment:deviceState:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_25_8();
  uint64_t v5 = (void *)IntentResolutionRecord.intent.getter();
  char v6 = INIntent.showsWhenRun.getter();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, a1, v3);
  if (v6)
  {
    uint64_t v7 = (void *)IntentResolutionRecord.intent.getter();
    id v8 = [v7 _isUserConfirmationRequired];
  }
  else
  {
    id v8 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return v8;
}

uint64_t specialized CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for CATOption();
  __chkstk_darwin(v14 - 8);
  uint64_t v24 = type metadata accessor for ModeInfoProvider();
  uint64_t v25 = &protocol witness table for ModeInfoProvider;
  *(void *)&long long v23 = a4;
  *(void *)(a7 + 56) = 0;
  *(void *)(a7 + 64) = 0;
  *(void *)(a7 + 128) = a1;
  *(void *)(a7 + 136) = a2;
  outlined init with copy of DeviceState(a3, a7 + 16);
  outlined init with copy of DeviceState(a7 + 16, (uint64_t)v22);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v15 = static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v16 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v18 = type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  CATWrapperSimple.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_92();
  type metadata accessor for AppNameResolver();
  uint64_t v19 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v20 = swift_allocObject();
  *(void *)(a7 + 80) = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(v22, v15, 0, 1, v16, a6, v17, v18, v19, v20);
  outlined init with take of AceServiceInvokerAsync(&v23, a7 + 88);
  *(void *)(a7 + 144) = a5;
  *(unsigned char *)(a7 + 72) = 1;
  return a7;
}

uint64_t specialized CustomIntentNeedsConfirmationFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = (uint64_t *)(a10
                  + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_voiceCommandName);
  *uint64_t v16 = a1;
  v16[1] = a2;
  outlined init with copy of DeviceState(a4, a10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_deviceState);
  uint64_t v17 = a10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_confirmationState;
  uint64_t v18 = enum case for SiriKitConfirmationState.unset(_:);
  uint64_t v19 = type metadata accessor for SiriKitConfirmationState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v17, v18, v19);
  outlined init with copy of DeviceState(a4, (uint64_t)v30);
  type metadata accessor for ContinueInAppCATWrapperSimple();
  memset(v28, 0, sizeof(v28));
  uint64_t v29 = 0;
  OUTLINED_FUNCTION_35_2();
  outlined init with copy of DeviceState?((uint64_t)v28, (uint64_t)v27);
  swift_bridgeObjectRetain();
  SiriKitFlowCATWrapperSimple.init(deviceState:)();
  uint64_t v21 = v20;
  outlined destroy of DeviceState?((uint64_t)v28);
  type metadata accessor for CustomIntentNeedsConfirmIntentResponseGenerator();
  uint64_t v22 = (void *)swift_allocObject();
  outlined init with copy of DeviceState((uint64_t)v30, (uint64_t)v28);
  long long v23 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(a1, a2, a3, v28, a5, a6, a7, a8, v21, a9, v22);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  *(void *)(a10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_responseGenerator) = v23;
  return a10;
}

uint64_t specialized CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for CATOption();
  __chkstk_darwin(v13 - 8);
  outlined init with copy of DeviceState(a4, a7 + 16);
  outlined init with copy of DeviceState(a4, (uint64_t)v23);
  type metadata accessor for RunCustomIntentCATs();
  OUTLINED_FUNCTION_9_26();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  OUTLINED_FUNCTION_9_26();
  uint64_t v15 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_9_26();
  uint64_t v16 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_9_26();
  CATWrapperSimple.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_92();
  type metadata accessor for CustomIntentContinueInAppResponseGenerator();
  uint64_t v17 = (void *)swift_allocObject();
  outlined init with copy of DeviceState((uint64_t)v23, (uint64_t)v22);
  uint64_t v18 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(a1, a2, a3, v22, v14, v15, v16, v7, a5, a6, v17);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  *(void *)(a7 + 56) = v18;
  return a7;
}

uint64_t lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_29()
{
  return outlined init with copy of DeviceState(v0, v1 - 128);
}

uint64_t OUTLINED_FUNCTION_2_35()
{
  return v0 - 128;
}

uint64_t OUTLINED_FUNCTION_4_33()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_6_33()
{
  return v0 - 128;
}

id UsoEntity_common_MeasurementUnit.unitType.getter()
{
  type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_2();
  uint64_t v2 = v1;
  uint64_t v4 = __chkstk_darwin(v3);
  char v6 = (char *)v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v71 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v71 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MeasurementUnit.DefinedValues?);
  __chkstk_darwin(v12 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v15 = v14 - v13;
  unint64_t v16 = type metadata accessor for UsoEntity_common_MeasurementUnit.DefinedValues();
  OUTLINED_FUNCTION_0_2();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_20_0();
  uint64_t v22 = v21 - v20;
  dispatch thunk of UsoEntity_common_MeasurementUnit.definedValue.getter();
  if (__swift_getEnumTagSinglePayload(v15, 1, v16) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v18 + 32))(v22, v15, v16);
    if (one-time initialization token for voiceCommands != -1) {
LABEL_60:
    }
      swift_once();
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.voiceCommands);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_20(&dword_0, v38, v39, "Using definedValue to create measurement unit");
      OUTLINED_FUNCTION_7_0();
    }

    id v40 = UsoEntity_common_MeasurementUnit.DefinedValues.unitType.getter();
    (*(void (**)(uint64_t, unint64_t))(v18 + 8))(v22, v16);
    return v40;
  }
  outlined destroy of UsoEntity_common_MeasurementUnit.DefinedValues?(v15);
  uint64_t v23 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!v23)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
    NSString v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_20(&dword_0, v44, v45, "No uso identifiers for measurement");
      OUTLINED_FUNCTION_7_0();
    }

    return 0;
  }
  uint64_t v72 = v9;
  uint64_t v73 = v0;
  uint64_t v75 = v23;
  uint64_t v24 = *(void *)(v23 + 16);
  if (!v24) {
    goto LABEL_25;
  }
  unint64_t v16 = 0;
  uint64_t v26 = *(void *)(v2 + 16);
  uint64_t v25 = v2 + 16;
  unint64_t v27 = (*(unsigned __int8 *)(v25 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 64);
  unint64_t v28 = v75 + v27;
  uint64_t v77 = *(void *)(v25 + 56);
  uint64_t v78 = v26;
  uint64_t v79 = v25;
  uint64_t v18 = v25 - 8;
  unint64_t v76 = (unint64_t)"voiceCommandScalar";
  unint64_t v74 = 0x8000000000227F90;
  v71[0] = v27;
  v71[1] = v75 + v27;
  while (1)
  {
    OUTLINED_FUNCTION_1_30();
    v29();
    UsoIdentifier.namespace.getter();
    if (!v30)
    {
      OUTLINED_FUNCTION_7_31();
      v34();
      goto LABEL_12;
    }
    OUTLINED_FUNCTION_8_28();
    if (v31)
    {
      if (v11 == (char *)v74) {
        break;
      }
    }
    char v32 = OUTLINED_FUNCTION_4_34();
    swift_bridgeObjectRelease();
    int v33 = *(void (**)(void))v18;
    OUTLINED_FUNCTION_2_36();
    v33();
    if (v32) {
      goto LABEL_24;
    }
LABEL_12:
    ++v16;
    v28 += v77;
    if (v24 == v16) {
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
  int v33 = *(void (**)(void))v18;
  OUTLINED_FUNCTION_7_31();
  v33();
LABEL_24:
  if (v24 == v16) {
    goto LABEL_25;
  }
  v71[0] += v75;
  unint64_t v74 = v76 | 0x8000000000000000;
  while (2)
  {
    if ((v16 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_62;
    }
    if (v16 >= *(void *)(v75 + 16))
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    uint64_t v22 = (uint64_t)v72;
    OUTLINED_FUNCTION_1_30();
    v55();
    swift_bridgeObjectRetain();
    v56._uint64_t countAndFlagsBits = UsoIdentifier.value.getter();
    int value = VoiceCommandsNLIntent.VoiceCommandUnit.init(rawValue:)(v56).value;
    OUTLINED_FUNCTION_2_36();
    v33();
    swift_bridgeObjectRelease();
    if (value != 88)
    {
      if (v16 == v24) {
        break;
      }
      if (v16 < *(void *)(v75 + 16))
      {
        OUTLINED_FUNCTION_1_30();
        v62();
        v63._uint64_t countAndFlagsBits = UsoIdentifier.value.getter();
        LOBYTE(v24) = VoiceCommandsNLIntent.VoiceCommandUnit.init(rawValue:)(v63);
        OUTLINED_FUNCTION_2_36();
        id result = (id)((uint64_t (*)(void))v33)();
        if (v24 == 88)
        {
          __break(1u);
          return result;
        }
        swift_bridgeObjectRelease();
        if (one-time initialization token for voiceCommands == -1)
        {
LABEL_56:
          uint64_t v64 = type metadata accessor for Logger();
          __swift_project_value_buffer(v64, (uint64_t)static Logger.voiceCommands);
          uint64_t v65 = Logger.logObject.getter();
          os_log_type_t v66 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v65, v66))
          {
            uint64_t v67 = (uint8_t *)swift_slowAlloc();
            uint64_t v80 = swift_slowAlloc();
            *(_DWORD *)uint64_t v67 = 136315138;
            uint64_t v68 = VoiceCommandsNLIntent.VoiceCommandUnit.rawValue.getter(v24);
            uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, &v80);
            OUTLINED_FUNCTION_39_6(v70);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_0, v65, v66, "Using uso identifier to create measurement unit: %s", v67, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_7_0();
            OUTLINED_FUNCTION_7_0();
          }

          return VoiceCommandsNLIntent.VoiceCommandUnit.unitType.getter(v24);
        }
LABEL_65:
        swift_once();
        goto LABEL_56;
      }
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if (v16 == v24)
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    ++v16;
    uint64_t v58 = (char *)v74;
    if (v16 == v24) {
      break;
    }
    unint64_t v59 = v71[0] + v77 * v16;
    while (2)
    {
      if (v16 >= *(void *)(v75 + 16))
      {
        __break(1u);
        goto LABEL_60;
      }
      OUTLINED_FUNCTION_1_30();
      v60();
      UsoIdentifier.namespace.getter();
      if (!v61)
      {
        OUTLINED_FUNCTION_7_31();
        v33();
LABEL_47:
        ++v16;
        v59 += v77;
        if (v24 == v16) {
          goto LABEL_25;
        }
        continue;
      }
      break;
    }
    OUTLINED_FUNCTION_8_28();
    if (!v31 || v6 != v58)
    {
      uint64_t v22 = OUTLINED_FUNCTION_4_34();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_36();
      v33();
      if (v22) {
        goto LABEL_50;
      }
      goto LABEL_47;
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_7_31();
    v33();
LABEL_50:
    if (v24 != v16) {
      continue;
    }
    break;
  }
LABEL_25:
  swift_bridgeObjectRelease();
  CodeGenBase.entity.getter();
  static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
  swift_release();
  uint64_t v46 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
  unint64_t v48 = v47;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v80 = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v80);
    OUTLINED_FUNCTION_39_6(v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v50, v51, "Unable to create measurement unit from %s", v52, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_release();
  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t outlined destroy of UsoEntity_common_MeasurementUnit.DefinedValues?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MeasurementUnit.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id UsoEntity_common_MeasurementUnit.DefinedValues.unitType.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UsoEntity_common_MeasurementUnit.DefinedValues();
  OUTLINED_FUNCTION_0_2();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_20_0();
  uint64_t v8 = v7 - v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7 - v6, v1, v2);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v8, v2);
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_MegaHertz(_:))
  {
    id v10 = [self megahertz];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Gram(_:))
  {
    id v10 = [self grams];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilometer(_:))
  {
    id v10 = [self kilometers];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Inch(_:))
  {
    id v10 = [self inches];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Centimeter(_:))
  {
    id v10 = [self centimeters];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Mile(_:))
  {
    id v10 = [self miles];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Microgram(_:))
  {
    id v10 = [self micrograms];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Calorie(_:))
  {
    id v10 = [self calories];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Pound(_:))
  {
    id v10 = [self poundsMass];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_MeterPerSecond(_:))
  {
    id v10 = [self metersPerSecond];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Meter(_:))
  {
    id v10 = [self meters];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_KiloHertz(_:))
  {
    id v10 = [self kilohertz];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_MilePerHour(_:))
  {
    id v10 = [self milesPerHour];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Yard(_:))
  {
    id v10 = [self yards];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilocalorie(_:))
  {
    id v10 = [self kilocalories];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_KilometerPerHour(_:))
  {
    id v10 = [self kilometersPerHour];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Milligram(_:))
  {
    id v10 = [self milligrams];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Milliliter(_:))
  {
    id v10 = [self milliliters];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Stone(_:))
  {
    id v10 = [self stones];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Liter(_:))
  {
    id v10 = [self liters];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilogram(_:))
  {
    id v10 = [self kilograms];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Foot(_:))
  {
    id v10 = [self feet];
    return v10;
  }
  if (v9 == enum case for UsoEntity_common_MeasurementUnit.DefinedValues.common_MeasurementUnit_Kilojoule(_:))
  {
    id v10 = [self kilojoules];
    return v10;
  }
  OUTLINED_FUNCTION_2_36();
  v12();
  return 0;
}

uint64_t OUTLINED_FUNCTION_4_34()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t WorkflowNLContextProvider.makeContextForShowAlert()()
{
  return (*(uint64_t (**)(void, void, void, void, void *, void *))(*(void *)v0 + 80))(0, 0, 0, 0, &_swiftEmptyArrayStorage, &_swiftEmptyArrayStorage);
}

uint64_t WorkflowNLContextProvider.makeContextForConfirmInteraction(intent:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin(v3 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v6 = v5 - v4;
  uint64_t v30 = type metadata accessor for DisplayHint();
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_20_0();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_0_2();
  uint64_t v15 = v14;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v29 - v20;
  (*(void (**)(void, void, void, void, void *, void *))(*(void *)v1 + 80))(0, 0, 0, 0, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  WorkflowNLContextProvider.getNLInput(intentCategory:)((uint64_t)[a1 _intentCategory], 0);
  NLContextUpdate.nlInput.setter();
  Swift::String v22 = INIntent.verb()();
  unint64_t v23 = ((unint64_t)v22._object >> 56) & 0xF;
  if (((uint64_t)v22._object & 0x2000000000000000) == 0) {
    unint64_t v23 = v22._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v23)
  {
    SemanticValue.init(string:label:)();
    __swift_storeEnumTagSinglePayload(v6, 1, 1, v13);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v19, v21, v13);
    DisplayHint.init(idValue:displayValue:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>);
    unint64_t v24 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_212160;
    unint64_t v26 = v25 + v24;
    uint64_t v27 = v30;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v26, v12, v30);
    NLContextUpdate.displayHints.setter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v21, v13);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t WorkflowNLContextProvider.makeContextForInputText(request:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - v9;
  id v11 = [a1 textFieldConfiguration];
  id v12 = [v11 keyboardType];

  if (v12)
  {
    SiriLinkFlowPlugin::WFInputTextTypes v13 = WFTextFieldKeyboardType.toInputType()();

    NLContextUpdate.init()();
    if (v13 - 1 >= 2)
    {
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      if (v13) {
        static UsoTaskBuilder_execute_common_VoiceCommand.urlTaskBuilder(value:)();
      }
      else {
        static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)();
      }
      OUTLINED_FUNCTION_6_34();
      OUTLINED_FUNCTION_4_35();
      v20();
      swift_release();
      uint64_t v21 = OUTLINED_FUNCTION_2_37();
      v22(v21);
      uint64_t v23 = OUTLINED_FUNCTION_1_31();
      v3(v23);
    }
    else
    {
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      static UsoTaskBuilder_execute_common_VoiceCommand.numberTaskBuilder()();
      OUTLINED_FUNCTION_6_34();
      OUTLINED_FUNCTION_4_35();
      v14();
      swift_release();
      uint64_t v15 = OUTLINED_FUNCTION_2_37();
      v16(v15);
      uint64_t v17 = OUTLINED_FUNCTION_1_31();
      v3(v17);
    }
    NLContextUpdate.dictationPromptTargetNodes.setter();
    OUTLINED_FUNCTION_3_32();
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v3)(a2, v10, v6);
  }
  else
  {
    type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
    static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)();
    OUTLINED_FUNCTION_4_35();
    v18();
    swift_release();
    NLContextUpdate.dictationPromptTargetNodes.setter();
    return OUTLINED_FUNCTION_3_32();
  }
}

uint64_t WorkflowNLContextProvider.makeContextForInputDate()()
{
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  static UsoTaskBuilder_execute_common_VoiceCommand.dateTaskBuilder()();
  (*(void (**)(void))(*(void *)v0 + 128))();
  swift_release();
  NLContextUpdate.dictationPromptTargetNodes.setter();
  return OUTLINED_FUNCTION_3_32();
}

uint64_t WorkflowNLContextProvider.makeContextForChooseFromList(items:)(uint64_t a1)
{
  specialized _arrayForceCast<A, B>(_:)(a1);
  (*(void (**)(void))(*(void *)v1 + 88))();
  swift_bridgeObjectRelease();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  specialized _arrayForceCast<A, B>(_:)(a1);
  (*(void (**)(void))(*(void *)v1 + 96))();
  swift_bridgeObjectRelease();
  return NLContextUpdate.displayHints.setter();
}

uint64_t WorkflowNLContextProvider.makeContextForShortcutName()()
{
  return NLContextUpdate.dictationPromptTargetNodes.setter();
}

uint64_t WorkflowNLContextProvider.makeContextForPrompt()()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  __chkstk_darwin(v0 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_20_0();
  uint64_t v5 = v4 - v3;
  NLContextUpdate.init()();
  NLContextUpdate.dictationPromptTargetDomain.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  NLContextUpdate.currentDomainName.setter();
  Siri_Nlu_External_SystemDialogAct.init()();
  Siri_Nlu_External_SystemPrompted.init()();
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_212160;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v7 + v6, v5, v1);
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
}

uint64_t WorkflowNLContextProvider.getNLInput(intentCategory:)(uint64_t a1, char a2)
{
  if (a2) {
    return 0;
  }
  INIntentCategory.asINPBString()();
  type metadata accessor for MachineUtteranceBuilder();
  swift_allocObject();
  MachineUtteranceBuilder.init()();
  dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
  swift_release();
  swift_bridgeObjectRelease();
  dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
  swift_release();
  uint64_t v2 = dispatch thunk of MachineUtteranceBuilder.build()();
  swift_release();
  return v2;
}

uint64_t type metadata accessor for WorkflowNLContextProvider()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_1_31()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_37()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_32()
{
  return NLContextUpdate.dictationPromptTargetDomain.setter();
}

SiriLinkFlowPlugin::AutoShortcutCATs::Properties_optional __swiftcall AutoShortcutCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AutoShortcutCATs.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return (SiriLinkFlowPlugin::AutoShortcutCATs::Properties_optional)12;
  }
  else {
    return (SiriLinkFlowPlugin::AutoShortcutCATs::Properties_optional)v3;
  }
}

unint64_t AutoShortcutCATs.Properties.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000018;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0xD000000000000024;
      break;
    case 3:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 4:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 5:
    case 7:
    case 9:
    case 10:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 11:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATs.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATs.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::AutoShortcutCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATs.Properties@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATs::Properties_optional *a2@<X8>)
{
  result.int value = AutoShortcutCATs.Properties.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATs.Properties@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AutoShortcutCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AutoShortcutCATs.appDisabled(device:appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 80) = v2;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(void);
  unsigned __int8 v11;
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  uint64_t v4 = *(void *)(v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)swift_allocObject();
  *(void *)(v2 + 56) = v5;
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v5[3].n128_u64[1] = 0;
    v5[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_9_34(v6);
  outlined init with copy of AppDisplayInfo?(v7, v3, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v8);
  if (v9)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    v5[7].n128_u64[1] = v1;
    __swift_allocate_boxed_opaque_existential_1(v0);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v10();
    swift_retain();
  }
  uint64_t v11 = *(unsigned char *)(v2 + 80);
  v5[8].n128_u64[0] = 0xD000000000000011;
  v5[8].n128_u64[1] = 0x80000000002292F0;
  v5[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[9].n128_u8[0] = v11;
  id v12 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v2 + 64) = v12;
  *id v12 = v2;
  v12[1] = AutoShortcutCATs.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_14_13();
  return v13();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t AutoShortcutCATs.appEnabled(device:appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 80) = v2;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(void);
  unsigned __int8 v11;
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  uint64_t v4 = *(void *)(v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)swift_allocObject();
  *(void *)(v2 + 56) = v5;
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v5[3].n128_u64[1] = 0;
    v5[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_9_34(v6);
  outlined init with copy of AppDisplayInfo?(v7, v3, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v8);
  if (v9)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    v5[7].n128_u64[1] = v1;
    __swift_allocate_boxed_opaque_existential_1(v0);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v10();
    swift_retain();
  }
  uint64_t v11 = *(unsigned char *)(v2 + 80);
  v5[8].n128_u64[0] = 0xD000000000000011;
  v5[8].n128_u64[1] = 0x80000000002292F0;
  v5[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[9].n128_u8[0] = v11;
  id v12 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v2 + 64) = v12;
  *id v12 = v2;
  v12[1] = AutoShortcutCATs.appEnabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_14_13();
  return v13();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t AutoShortcutCATs.confirmChangeEnablement(appName:isEnabling:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 *v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_37_17();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = swift_allocObject();
  char v3 = (__n128 *)OUTLINED_FUNCTION_36_15(v2);
  uint64_t v4 = OUTLINED_FUNCTION_13_26(v3, (__n128)xmmword_212170);
  OUTLINED_FUNCTION_25_5((uint64_t)v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v8();
  }
  OUTLINED_FUNCTION_32_20();
  *(void *)(v1 + 80) = v9 & 0xFFFFFFFFFFFFLL | 0x696C000000000000;
  *(void *)(v1 + 88) = 0xEA0000000000676ELL;
  *(void *)(v1 + 120) = &type metadata for Bool;
  *(unsigned char *)(v1 + 96) = v10;
  uint64_t v11 = OUTLINED_FUNCTION_59();
  id v12 = (void *)OUTLINED_FUNCTION_18_21(v11);
  *id v12 = v13;
  v12[1] = AutoShortcutCATs.confirmChangeEnablement(appName:isEnabling:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t AutoShortcutCATs.confirmChangeEnablementDeclined(appName:isEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 *v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_37_17();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = swift_allocObject();
  char v3 = (__n128 *)OUTLINED_FUNCTION_36_15(v2);
  uint64_t v4 = OUTLINED_FUNCTION_13_26(v3, (__n128)xmmword_212170);
  OUTLINED_FUNCTION_25_5((uint64_t)v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v8();
  }
  OUTLINED_FUNCTION_32_20();
  *(void *)(v1 + 80) = v9 & 0xFFFFFFFFFFFFLL | 0x656C000000000000;
  *(void *)(v1 + 88) = 0xE900000000000064;
  *(void *)(v1 + 120) = &type metadata for Bool;
  *(unsigned char *)(v1 + 96) = v10;
  uint64_t v11 = OUTLINED_FUNCTION_59();
  id v12 = (void *)OUTLINED_FUNCTION_18_21(v11);
  *id v12 = v13;
  v12[1] = AutoShortcutCATs.confirmChangeEnablementDeclined(appName:isEnabled:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t AutoShortcutCATs.disableAndCancel()()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_17_2();
  char v3 = (void *)OUTLINED_FUNCTION_10_13(v2);
  *char v3 = v4;
  v3[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  OUTLINED_FUNCTION_35_14();
  return v6(v1, 0xD00000000000001DLL);
}

uint64_t AutoShortcutCATs.enableAndCancel()()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v0 = OUTLINED_FUNCTION_17_2();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10_13(v0);
  *uint64_t v1 = v2;
  v1[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  OUTLINED_FUNCTION_35_14();
  uint64_t v3 = OUTLINED_FUNCTION_27_21();
  return v4(v3);
}

uint64_t AutoShortcutCATs.firstRun(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  v1[5] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_37_17();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_36_15(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = OUTLINED_FUNCTION_29_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_59();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_18_21(v8);
  *uint64_t v9 = v10;
  v9[1] = AutoShortcutCATs.confirmChangeEnablementDeclined(appName:isEnabled:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  return v11();
}

uint64_t AutoShortcutCATs.firstRunHomePod(app:firstPhrase:secondPhrase:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  void *v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = swift_allocObject();
  v0[10] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_2138B0;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  OUTLINED_FUNCTION_29_14(v3);
  outlined init with copy of AppDisplayInfo?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_41_2() == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[9], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v5;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v6();
  }
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[4];
  *(void *)(v3 + 80) = 0x7268507473726966;
  *(void *)(v3 + 88) = 0xEB00000000657361;
  outlined init with copy of AppDisplayInfo?(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  if (OUTLINED_FUNCTION_41_2() == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[8], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
  }
  else
  {
    *(void *)(v3 + 120) = v5;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 96));
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v9();
  }
  uint64_t v10 = v0[7];
  uint64_t v11 = v0[5];
  strcpy((char *)(v3 + 128), "secondPhrase");
  *(unsigned char *)(v3 + 141) = 0;
  *(_WORD *)(v3 + 142) = -5120;
  outlined init with copy of AppDisplayInfo?(v11, v10, &demangling cache variable for type metadata for SpeakableString?);
  if (OUTLINED_FUNCTION_41_2() == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[7], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v3 + 144) = 0u;
    *(_OWORD *)(v3 + 160) = 0u;
  }
  else
  {
    *(void *)(v3 + 168) = v5;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 144));
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v12();
  }
  SiriLinkFlowPlugin::WFInputTextTypes v13 = (void *)OUTLINED_FUNCTION_59();
  v0[11] = v13;
  *SiriLinkFlowPlugin::WFInputTextTypes v13 = v0;
  v13[1] = AutoShortcutCATs.firstRunHomePod(app:firstPhrase:secondPhrase:);
  OUTLINED_FUNCTION_11_31();
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t AutoShortcutCATs.moreShortcuts(numberOfShortcuts:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 64) = a3;
  *(void *)(v4 + 16) = a1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t AutoShortcutCATs.moreShortcuts(numberOfShortcuts:)()
{
  OUTLINED_FUNCTION_14_0();
  char v1 = *(unsigned char *)(v0 + 64);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  *(void *)(v2 + 32) = 0xD000000000000011;
  *(void *)(v2 + 40) = 0x8000000000229310;
  if (v1)
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = &type metadata for Double;
  }
  *(void *)(v2 + 72) = v4;
  *(void *)(v2 + 48) = v3;
  uint64_t v5 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = RunCustomIntentCATs.deviceUnlock(device:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  return v7();
}

uint64_t AutoShortcutCATs.openInShortcuts()()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v0 = OUTLINED_FUNCTION_17_2();
  char v1 = (void *)OUTLINED_FUNCTION_10_13(v0);
  *char v1 = v2;
  v1[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  OUTLINED_FUNCTION_35_14();
  uint64_t v3 = OUTLINED_FUNCTION_27_21();
  return v4(v3);
}

uint64_t AutoShortcutCATs.shortcutPhrases(phrase:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  v1[5] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(void);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_37_17();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_36_15(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  *(void *)(v2 + 32) = 0x657361726870;
  *(void *)(v2 + 40) = 0xE600000000000000;
  OUTLINED_FUNCTION_25_5(v2, v3, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v4);
  if (v5)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v6();
  }
  uint64_t v7 = OUTLINED_FUNCTION_59();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_18_21(v7);
  *uint64_t v8 = v9;
  v8[1] = AutoShortcutCATs.confirmChangeEnablement(appName:isEnabling:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_11_31();
  return v10();
}

uint64_t AutoShortcutCATs.userDenied()()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_17_2();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_10_13(v2);
  *uint64_t v3 = v4;
  v3[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  OUTLINED_FUNCTION_35_14();
  return v6(v1, 0xD000000000000017);
}

uint64_t AutoShortcutCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return AutoShortcutCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t AutoShortcutCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v11;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATs.Properties and conformance AutoShortcutCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATs.Properties and conformance AutoShortcutCATs.Properties;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATs.Properties and conformance AutoShortcutCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATs.Properties and conformance AutoShortcutCATs.Properties);
  }
  return result;
}

uint64_t type metadata accessor for AutoShortcutCATs()
{
  uint64_t result = type metadata singleton initialization cache for AutoShortcutCATs;
  if (!type metadata singleton initialization cache for AutoShortcutCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AutoShortcutCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AutoShortcutCATs()
{
  return type metadata accessor for AutoShortcutCATs();
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x16456CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutCATs.Properties()
{
  return &type metadata for AutoShortcutCATs.Properties;
}

uint64_t OUTLINED_FUNCTION_9_34(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x656D614E707061;
  v2[11] = 0xE700000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_18_21(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_27_21()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_36_15(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t protocol witness for LinkConnection.bundleIdentifier.getter in conformance LNConnection()
{
  return @nonobjc LNConnection.bundleIdentifier.getter();
}

uint64_t @nonobjc LNConnection.bundleIdentifier.getter()
{
  id v1 = [v0 bundleIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_n(unint64_t a1, uint64_t a2)
{
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_nTm(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v13 = a2;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v5)
  {
    while (1)
    {
      uint64_t v16 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v5 < 0) {
        break;
      }
      uint64_t v12 = v3;
      uint64_t v6 = 0;
      uint64_t v7 = v16;
      unint64_t v3 = a1 & 0xC000000000000001;
      while (v5 != v6)
      {
        if (v3) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v8 = *(id *)(a1 + 8 * v6 + 32);
        }
        uint64_t v9 = v8;
        LNValue.toDisambiguationItem(locale:)(v14);

        uint64_t v16 = v7;
        unint64_t v10 = v7[2];
        if (v10 >= v7[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v7 = v16;
        }
        ++v6;
        v7[2] = v10 + 1;
        OUTLINED_FUNCTION_4_36((uint64_t)&v7[7 * v10], v11, v12, v13, v14[0], *(_OWORD *)&v14[1], *(_OWORD *)&v14[2], v15);
        if (v5 == v6) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_14:
      OUTLINED_FUNCTION_14_17();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18LNEnumCaseMetadataCG_18SiriLinkFlowPlugin09ShortcutsH18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18ghij5E21tol108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4m66VGSS_So08LNActionnO0CSaySo7LNValueCGSgSSAC0eO9Providing_ptFAKSo010dE9O0CXEfU1_So017LNLinkEnumerationR4TypeCSSTf1cn_n(unint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v8)
  {
    while (1)
    {
      uint64_t v19 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v8 < 0) {
        break;
      }
      uint64_t v14 = v5;
      uint64_t v9 = 0;
      unint64_t v10 = v19;
      while (v8 != v9)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v11 = *(id *)(a1 + 8 * v9 + 32);
        }
        uint64_t v12 = v11;
        LNEnumCaseMetadata.toDisambiguationItem(valueType:locale:)(a2, (uint64_t)v17);

        uint64_t v19 = v10;
        unint64_t v13 = v10[2];
        uint64_t v5 = v13 + 1;
        if (v13 >= v10[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          unint64_t v10 = v19;
        }
        ++v9;
        v10[2] = v5;
        OUTLINED_FUNCTION_4_36((uint64_t)&v10[7 * v13], v14, v15, v16, v17[0], *(_OWORD *)&v17[1], *(_OWORD *)&v17[2], v18);
        if (v8 == v9) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:

    swift_bridgeObjectRelease();
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo31LNStaticDeferredLocalizedStringCG_SSs5NeverOTg50145_sSo23LNDisplayRepresentationC18SiriLinkFlowPluginE29toDisambiguationItemComponent33_1653C942D9461C94FC73A283A98B2FB0LL6localeAC0hiJ0VSS_tFSSSo31defG6CXEfU_SSTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v2)
  {
    while (1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v2 < 0) {
        break;
      }
      uint64_t v3 = 0;
      while (v2 != v3)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v4 = *(id *)(a1 + 8 * v3 + 32);
        }
        uint64_t v5 = v4;
        NSString v6 = String._bridgeToObjectiveC()();
        id v7 = [v5 localizedStringForLocaleIdentifier:v6];

        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v10 = v9;

        unint64_t v11 = _swiftEmptyArrayStorage[2];
        if (v11 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v3;
        _swiftEmptyArrayStorage[2] = v11 + 1;
        uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
        v12[4] = v8;
        v12[5] = v10;
        if (v2 == v3) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v2) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      uint64_t v19 = v5;
      id v7 = [v5 identifier];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      id v11 = [a2 enumerationIdentifier];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      if (v8 == v12 && v10 == v14)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_17:
        uint64_t v3 = (uint64_t)v19;
        swift_bridgeObjectRelease();
        return v3;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16)
      {

        goto LABEL_17;
      }

      if (v6 == v3)
      {

        swift_bridgeObjectRelease();
        return 0;
      }
    }
    __break(1u);
LABEL_19:
    OUTLINED_FUNCTION_14_17();
  }

  swift_bridgeObjectRelease();
  return v3;
}

void *LNNeedsValueRequest.toDisambiguationItems(bundleIdentifier:actionParameterMetadata:selectedValues:locale:metadataProvider:)(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14 = a7[3];
  uint64_t v15 = a7[4];
  char v16 = __swift_project_boxed_opaque_existential_1(a7, v14);
  return specialized LNNeedsValueRequest.toDisambiguationItems(bundleIdentifier:actionParameterMetadata:selectedValues:locale:metadataProvider:)(a1, a2, a3, a4, a5, a6, (uint64_t)v16, v7, v14, v15);
}

uint64_t LNDisambiguationRequest.toDisambiguationItems(selectedValues:locale:)(unint64_t a1, uint64_t a2)
{
  if (a1)
  {
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_nTm(a1, a2);
    return v5;
  }
  else
  {
    id v7 = [v2 providedValues];
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNValue);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_nTm(v8, a2);
    uint64_t v6 = v9;
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t ShortcutsLinkDisambiguationItem.toDisambiguationVisualItem()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = ShortcutsLinkDisambiguationItem.getItemData()();
  if (v4 >> 60 == 15)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t v11 = v3;
    unint64_t v12 = v4;
    type metadata accessor for CATSpeakableString();
    uint64_t v13 = *v1;
    uint64_t v14 = v1[1];
    uint64_t v7 = v1[2];
    uint64_t v15 = v1[3];
    uint64_t v9 = (void *)v1[4];
    swift_bridgeObjectRetain();
    static CATSpeakableString.stripTTSHint(print:)(v13, v14, v16, v17, v18, v19, v20, v21, v34, v36, v38);
    uint64_t v5 = v22;
    uint64_t v6 = v23;
    swift_bridgeObjectRelease();
    if (v15)
    {
      swift_bridgeObjectRetain();
      static CATSpeakableString.stripTTSHint(print:)(v7, v15, v24, v25, v26, v27, v28, v29, v35, v37, v39);
      uint64_t v7 = v30;
      uint64_t v8 = v31;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_212160;
    id v33 = v9;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v11;
    *(void *)(inited + 80) = v12;
    uint64_t result = Dictionary.init(dictionaryLiteral:)();
  }
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = result;
  return result;
}

uint64_t ShortcutsLinkDisambiguationItem.getItemData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  uint64_t v3 = *(void **)(v0 + 48);
  id v15 = 0;
  id v4 = [v2 archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v15];
  id v5 = v15;
  if (v4)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v7 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
    outlined retain of ShortcutsLinkDisambiguationItem(v1);
    outlined retain of ShortcutsLinkDisambiguationItem(v1);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      unint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      id v15 = v3;
      id v13 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v12 = v3;
      outlined release of ShortcutsLinkDisambiguationItem(v1);
      outlined release of ShortcutsLinkDisambiguationItem(v1);
      _os_log_impl(&dword_0, v9, v10, "Could not archive disambiguation data for value: %@", v11, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      outlined release of ShortcutsLinkDisambiguationItem(v1);
      outlined release of ShortcutsLinkDisambiguationItem(v1);
    }

    return 0;
  }
  return v6;
}

uint64_t ShortcutsLinkDisambiguationItem.toDisambiguationItemModel()()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 144) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  *(void *)(v1 + 152) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v2, v3, v4);
}

{
  uint64_t v0;
  unint64_t v1;
  long long *v2;
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  __n128 *inited;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;

  *(void *)(v0 + 160) = ShortcutsLinkDisambiguationItem.getItemData()();
  *(void *)(v0 + 168) = v1;
  if (v1 >> 60 == 15)
  {
LABEL_10:
    swift_task_dealloc();
    OUTLINED_FUNCTION_85();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v2 = *(long long **)(v0 + 144);
  type metadata accessor for CATSpeakableString();
  uint64_t v3 = v2[2];
  uint64_t v4 = *v2;
  *(_OWORD *)(v0 + 96) = v2[1];
  *(_OWORD *)(v0 + 112) = v3;
  *(_OWORD *)(v0 + 80) = v4;
  id v5 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  static CATSpeakableString.stripTTSHint(print:)(v5, v6, v7, v8, v9, v10, v11, v12, v36, v38, v40);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 176) = v14;
  *(void *)(v0 + 184) = v16;
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v18 = *(void *)(v0 + 104);
  if (v18)
  {
    swift_bridgeObjectRetain();
    static CATSpeakableString.stripTTSHint(print:)(v17, v18, v19, v20, v21, v22, v23, v24, v37, v39, v41);
    uint64_t v17 = v25;
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = 0;
  }
  *(void *)(v0 + 192) = v17;
  *(void *)(v0 + 200) = v27;
  outlined init with take of INImage?(v0 + 112, v0 + 136);
  outlined init with take of INImage?(v0 + 136, v0 + 128);
  if (!*(void *)(v0 + 128))
  {
    char v32 = type metadata accessor for VisualProperty();
    OUTLINED_FUNCTION_12_16(v32);
    OUTLINED_FUNCTION_15_24();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_5_29(inited, (__n128)xmmword_212160);
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_16_22();
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_0_30();
    goto LABEL_10;
  }
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v28;
  *uint64_t v28 = v0;
  v28[1] = ShortcutsLinkDisambiguationItem.toDisambiguationItemModel();
  OUTLINED_FUNCTION_85();
  return INImage.convertToVisualProperty()(v29);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v0, v1, v2);
}

void ShortcutsLinkDisambiguationItem.toDisambiguationItemModel()()
{
  OUTLINED_FUNCTION_15_24();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_5_29(inited, (__n128)xmmword_212160);
  Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_16_22();
  OUTLINED_FUNCTION_35_2();
  OUTLINED_FUNCTION_0_30();
  swift_task_dealloc();
  OUTLINED_FUNCTION_85();
  __asm { BRAA            X2, X16 }
}

void *Array<A>.toDisambiguationVisualItems()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  id v56 = self;
  uint64_t v54 = a1;
  uint64_t v3 = (void **)(a1 + 80);
  uint64_t v60 = _swiftEmptyArrayStorage;
  uint64_t v55 = 138412290;
  do
  {
    uint64_t v4 = (uint64_t)*(v3 - 6);
    uint64_t v5 = (uint64_t)*(v3 - 5);
    uint64_t v6 = (uint64_t)*(v3 - 3);
    uint64_t v62 = (uint64_t)*(v3 - 4);
    v63[0] = 0;
    uint64_t v7 = *(v3 - 2);
    uint64_t v8 = *v3;
    id v9 = v7;
    swift_bridgeObjectRetain();
    id v10 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v11 = [v56 archivedDataWithRootObject:v10 requiringSecureCoding:1 error:v63];
    id v12 = v63[0];
    uint64_t v61 = v1;
    if (v11)
    {
      uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      type metadata accessor for CATSpeakableString();
      swift_bridgeObjectRetain();
      static CATSpeakableString.stripTTSHint(print:)(v4, v5, v16, v17, v18, v19, v20, v21, v53, v54, (void *)v55);
      uint64_t v23 = v22;
      uint64_t v58 = v24;
      swift_bridgeObjectRelease();
      uint64_t v59 = v23;
      if (v6)
      {
        swift_bridgeObjectRetain();
        static CATSpeakableString.stripTTSHint(print:)(v62, v6, v25, v26, v27, v28, v29, v30, v53, v54, (void *)v55);
        uint64_t v62 = v31;
        uint64_t v57 = v32;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v57 = 0;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_212160;
      OUTLINED_FUNCTION_9_35();
      v63[0] = v44;
      v63[1] = (id)0xE500000000000000;
      id v45 = v9;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = &type metadata for Data;
      *(void *)(inited + 72) = v13;
      *(void *)(inited + 80) = v15;
      uint64_t v46 = Dictionary.init(dictionaryLiteral:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v60 = v50;
      }
      uint64_t v47 = v61;
      unint64_t v48 = v60[2];
      if (v48 >= v60[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v60 = v51;
      }
      v60[2] = v48 + 1;
      uint64_t v49 = &v60[6 * v48];
      v49[4] = v59;
      v49[5] = v58;
      v49[6] = v62;
      v49[7] = v57;
      v49[8] = v7;
      v49[9] = v46;
    }
    else
    {
      id v33 = v12;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v35 = v9;
      swift_bridgeObjectRetain_n();
      id v36 = v10;
      id v37 = v35;
      id v38 = v36;
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = OUTLINED_FUNCTION_25_2();
        NSString v42 = (void *)OUTLINED_FUNCTION_88();
        *(_DWORD *)uint64_t v41 = v55;
        *(void *)(v41 + 4) = v38;
        *NSString v42 = v38;

        OUTLINED_FUNCTION_7_32();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v39, v40, "Could not archive disambiguation data for value: %@", (uint8_t *)v41, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v47 = v61;
    }
    v3 += 7;
    uint64_t v1 = v47 - 1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v60;
}

__n128 LNValue.toDisambiguationItem(locale:)@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2 = v1;
  id v4 = [v1 displayRepresentation];
  if (v4)
  {
    uint64_t v5 = v4;
    LNDisplayRepresentation.toDisambiguationItemComponent(locale:)(v20);

    unint64_t v7 = v22;
    uint64_t v6 = v23;
    __n128 v18 = v21;
    uint64_t v8 = v20[0];
    uint64_t v9 = v20[1];
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
    id v11 = v1;
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v19 = (void *)OUTLINED_FUNCTION_88();
      *(_DWORD *)uint64_t v14 = 138412290;
      v20[0] = (uint64_t)v11;
      id v15 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v19 = v11;

      _os_log_impl(&dword_0, v12, v13, "Link LNDisplayRepresentation was nil for %@", v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
    uint64_t v8 = 0;
    unint64_t v7 = 0;
    __n128 v18 = 0u;
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v9 = 0xE000000000000000;
  }
  id v16 = v2;
  a1->n128_u64[0] = v8;
  a1->n128_u64[1] = v9;
  __n128 result = v18;
  a1[1] = v18;
  a1[2].n128_u64[0] = v7;
  a1[2].n128_u64[1] = (unint64_t)v6;
  a1[3].n128_u64[0] = (unint64_t)v16;
  return result;
}

uint64_t LNDisplayRepresentation.toDisambiguationItemComponent(locale:)@<X0>(uint64_t *a1@<X8>)
{
  id v3 = [v1 title];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 localizedStringForLocaleIdentifier:v4];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v7;

  id v8 = [v1 subtitle];
  if (v8)
  {
    uint64_t v9 = v8;
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 localizedStringForLocaleIdentifier:v10];

    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  id v15 = [v1 image];
  if (v15)
  {
    id v16 = v15;
    self;
    uint64_t v17 = (void *)swift_dynamicCastObjCClass();
    if (v17)
    {
      NSString v18 = [v17 systemName];
      if (!v18)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v18 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      id v19 = [self systemImageNamed:v18];

      goto LABEL_12;
    }
  }
  id v20 = [v1 image];
  if (v20)
  {
    id v16 = v20;
    id v19 = [v20 inImage];
LABEL_12:
    uint64_t v21 = v26;

    goto LABEL_14;
  }
  id v19 = 0;
  uint64_t v21 = v26;
LABEL_14:
  uint64_t result = outlined bridged method (pb) of @objc LNDisplayRepresentation.synonyms.getter(v1);
  if (result)
  {
    unint64_t v23 = result;
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo31LNStaticDeferredLocalizedStringCG_SSs5NeverOTg50145_sSo23LNDisplayRepresentationC18SiriLinkFlowPluginE29toDisambiguationItemComponent33_1653C942D9461C94FC73A283A98B2FB06localeAC0hiJ0VSS_tFSSSo31defG6CXEfU_SSTf1cn_n(v23);
    uint64_t v25 = v24;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = _swiftEmptyArrayStorage;
  }
  *a1 = v6;
  a1[1] = v21;
  a1[2] = v12;
  a1[3] = v14;
  a1[4] = (uint64_t)v19;
  a1[5] = (uint64_t)v25;
  return result;
}

id LNLinkEnumerationValueType.__allocating_init(enumerationIdentifier:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithEnumerationIdentifier:v1];

  return v2;
}

__n128 LNEnumCaseMetadata.toDisambiguationItem(valueType:locale:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v5 = [v2 displayRepresentation];
  LNDisplayRepresentation.toDisambiguationItemComponent(locale:)((uint64_t *)v18);
  __n128 v15 = (__n128)v18[1];
  long long v16 = v18[0];
  uint64_t v6 = v19;
  uint64_t v7 = v20;

  id v8 = [v2 identifier];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  __n128 v17[3] = &type metadata for String;
  v17[0] = v9;
  v17[1] = v11;
  id v12 = objc_allocWithZone((Class)LNValue);
  id v13 = @nonobjc LNValue.init(_:valueType:)(v17, a1);
  __n128 result = v15;
  *(_OWORD *)a2 = v16;
  *(__n128 *)(a2 + 16) = v15;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v13;
  return result;
}

uint64_t outlined bridged method (pb) of @objc LNDisplayRepresentation.synonyms.getter(void *a1)
{
  id v1 = [a1 synonyms];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNStaticDeferredLocalizedString);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void *specialized LNNeedsValueRequest.toDisambiguationItems(bundleIdentifier:actionParameterMetadata:selectedValues:locale:metadataProvider:)(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = *(void *)(a9 - 8);
  __chkstk_darwin(a1);
  NSString v18 = *(void (**)(void))(v16 + 16);
  uint64_t v58 = v19;
  uint64_t v59 = (char *)v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18();
  id v20 = [a3 valueType];
  self;
  uint64_t v21 = swift_dynamicCastObjCClass();
  if (!v21)
  {

    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
    id v25 = a3;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412290;
      id v30 = [v25 valueType];
      id v61 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v30;

      _os_log_impl(&dword_0, v26, v27, "Can only create disambiguations for LNLinkEnumerationValueType, not %@", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    unint64_t v23 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }
  if (a4)
  {
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_nTm(a4, a5);
    unint64_t v23 = v22;

LABEL_11:
    uint64_t v33 = v58;
    uint64_t v34 = v59;
    goto LABEL_12;
  }
  uint64_t v31 = (void *)v21;
  uint64_t v32 = a1;
  uint64_t v33 = v58;
  uint64_t v34 = v59;
  unint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a10 + 16))(v32, a2, v58);
  id v37 = v20;
  id v38 = (void *)specialized Sequence.first(where:)(v36, v31);
  swift_bridgeObjectRelease();
  if (v38)
  {
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNLinkEnumerationValueType);
    id v39 = v38;
    id v40 = [v31 enumerationIdentifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v57 = v37;

    uint64_t v34 = v59;
    id v41 = LNLinkEnumerationValueType.__allocating_init(enumerationIdentifier:)();
    id v42 = [v39 cases];
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNEnumCaseMetadata);
    unint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    id v44 = v41;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18LNEnumCaseMetadataCG_18SiriLinkFlowPlugin09ShortcutsH18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18ghij5E21tol108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4m66VGSS_So08LNActionnO0CSaySo7LNValueCGSgSSAC0eO9Providing_ptFAKSo010dE9O0CXEfU1_So017LNLinkEnumerationR4TypeCSSTf1cn_n(v43, v44, a5, a6);
    unint64_t v23 = v45;

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.voiceCommands);
    id v47 = v37;
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      id v57 = (id)swift_slowAlloc();
      id v61 = v57;
      *(_DWORD *)uint64_t v50 = 136315138;
      uint64_t v33 = v58;
      v56[1] = v50 + 4;
      id v51 = [v31 enumerationIdentifier];
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      uint64_t v55 = v52;
      uint64_t v34 = v59;
      uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v54, (uint64_t *)&v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v48, v49, "Could not find LNEnumMetadata for identifier: %s", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    unint64_t v23 = _swiftEmptyArrayStorage;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t))(v16 + 8))(v34, v33);
  return v23;
}

ValueMetadata *type metadata accessor for ShortcutsLinkDisambiguationItem()
{
  return &type metadata for ShortcutsLinkDisambiguationItem;
}

uint64_t outlined retain of ShortcutsLinkDisambiguationItem(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  id v3 = *(id *)(a1 + 32);
  swift_bridgeObjectRetain();
  id v4 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ShortcutsLinkDisambiguationItem(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

void *OUTLINED_FUNCTION_0_30()
{
  return WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(v5, v3, v1, v2, v4, 0xD000000000000043, (v0 - 32) | 0x8000000000000000, v6, 0);
}

__n128 OUTLINED_FUNCTION_4_36@<Q0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, long long a6, long long a7, uint64_t a8)
{
  __n128 result = a5;
  *(void *)(a1 + 80) = a8;
  *(_OWORD *)(a1 + 48) = a6;
  *(_OWORD *)(a1 + 64) = a7;
  *(__n128 *)(a1 + 32) = a5;
  return result;
}

__n128 *OUTLINED_FUNCTION_5_29(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x65756C6176;
  result[2].n128_u64[1] = 0xE500000000000000;
  result[3].n128_u64[0] = v3;
  result[3].n128_u64[1] = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_32()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_14_17()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_16_22()
{
  return type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
}

uint64_t SiriWorkflowRunner.__allocating_init(workflowRunnerInput:deviceState:aceServiceInvoker:)()
{
  OUTLINED_FUNCTION_31_16();
  uint64_t v1 = OUTLINED_FUNCTION_38_15();
  SiriWorkflowRunner.init(workflowRunnerInput:deviceState:aceServiceInvoker:)(v1, v2, v3);
  return v0;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *static SiriWorkflowRunnerEvent.unusedHandler<A>(_:)(uint64_t a1, uint64_t a2))(Swift::OpaquePointer items)
{
  *(void *)(swift_allocObject() + 16) = a2;
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void *SiriWorkflowRunner.init(workflowRunnerInput:deviceState:aceServiceInvoker:)(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v4 = (void *)v3;
  outlined init with take of SiriWorkflowRunnerInput(a1, (uint64_t)v17);
  char v8 = v18;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  long long v9 = v17[1];
  *(_OWORD *)(v3 + 72) = v17[0];
  *(_OWORD *)(v3 + 88) = v9;
  long long v10 = v17[3];
  *(_OWORD *)(v3 + 104) = v17[2];
  *(_OWORD *)(v3 + 120) = v10;
  *(unsigned char *)(v3 + 136) = v8;
  outlined retain of SiriWorkflowRunnerInput(a1, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = static WFDialogState.shared;
  swift_retain();
  id v12 = SiriWorkflowRunnerInput.toWFSiriWorkflowRunnerClient(deviceState:aceServiceInvoker:dialogState:)(a2, a3, v11);
  swift_release();
  v4[7] = type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for WFSiriWorkflowRunnerClient);
  v4[8] = &protocol witness table for WFSiriWorkflowRunnerClient;
  v4[4] = v12;
  swift_beginAccess();
  outlined init with copy of DeviceState((uint64_t)(v4 + 4), (uint64_t)v16);
  id v13 = objc_allocWithZone((Class)type metadata accessor for SiriStateObserver());
  id v14 = SiriStateObserver.init(runnerClient:)((uint64_t)v16);
  outlined retain of SiriWorkflowRunnerInput(a1, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SiriWorkflowRunnerInput);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a3);
  v4[18] = v14;
  outlined init with take of AceServiceInvokerAsync(a2, (uint64_t)(v4 + 19));
  return v4;
}

uint64_t sub_167A84()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t SiriWorkflowRunner.__allocating_init(runnerClient:siriStateObserver:deviceState:)()
{
  OUTLINED_FUNCTION_31_16();
  uint64_t v1 = OUTLINED_FUNCTION_38_15();
  SiriWorkflowRunner.init(runnerClient:siriStateObserver:deviceState:)(v1, v2, v3);
  return v0;
}

uint64_t SiriWorkflowRunner.init(runnerClient:siriStateObserver:deviceState:)(uint64_t a1, id a2, long long *a3)
{
  uint64_t v4 = v3;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  outlined init with copy of DeviceState(a1, v4 + 32);
  if (!a2)
  {
    outlined init with copy of DeviceState(a1, (uint64_t)v10);
    id v8 = objc_allocWithZone((Class)type metadata accessor for SiriStateObserver());
    a2 = SiriStateObserver.init(runnerClient:)((uint64_t)v10);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *(void *)(v4 + 144) = a2;
  outlined init with take of AceServiceInvokerAsync(a3, v4 + 152);
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(unsigned char *)(v4 + 136) = -1;
  return v4;
}

uint64_t SiriWorkflowRunner.startExecution()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.BufferingPolicy);
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_56();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_26_1(v5, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_26_11(v7))
  {
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    OUTLINED_FUNCTION_17_5(&dword_0, v8, v9, "#SiriWorkflowRunner creating async stream");
    OUTLINED_FUNCTION_7_0();
  }

  type metadata accessor for SiriWorkflowRunnerEvent(0);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v1);
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in SiriWorkflowRunner.startExecution()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v20[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v8(v7, a1, v4);
  uint64_t v9 = (objc_class *)type metadata accessor for AnonymousSiriWorkflowRunnerClientDelegate(0);
  long long v10 = (char *)objc_allocWithZone(v9);
  v8(&v10[OBJC_IVAR____TtC18SiriLinkFlowPlugin41AnonymousSiriWorkflowRunnerClientDelegate_continuation], (uint64_t)v7, v4);
  v23.receiver = v10;
  v23.super_class = v9;
  id v11 = objc_msgSendSuper2(&v23, "init");
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  SiriWorkflowRunner.buildSiriStateObserver()();
  swift_beginAccess();
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  __swift_mutable_project_boxed_opaque_existential_1(a2 + 32, v12);
  id v14 = *(void (**)(id, uint64_t, uint64_t))(v13 + 16);
  id v15 = v11;
  v14(v11, v12, v13);
  swift_endAccess();
  outlined init with copy of DeviceState(a2 + 32, (uint64_t)v20);
  uint64_t v16 = v21;
  uint64_t v17 = v22;
  __swift_project_boxed_opaque_existential_1(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(v16, v17);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  *(void *)(swift_allocObject() + 16) = v15;
  return AsyncStream.Continuation.onTermination.setter();
}

objc_class *AnonymousSiriWorkflowRunnerClientDelegate.__allocating_init(continuation:)()
{
  id v1 = objc_allocWithZone(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_11_32();
  uint64_t v2 = OUTLINED_FUNCTION_27_22();
  v3(v2);
  v7.receiver = v1;
  v7.super_class = v0;
  objc_msgSendSuper2(&v7, "init");
  uint64_t v4 = OUTLINED_FUNCTION_29_19();
  v5(v4);
  return v0;
}

void SiriWorkflowRunner.buildSiriStateObserver()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  uint64_t v8 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v9 = *(void **)(v0 + 16);
  *(void *)(v0 + 16) = v8;

  long long v10 = *(void **)(v0 + 16);
  id v11 = *(void **)(v1 + 144);
  objc_allocWithZone((Class)AFNotifyObserver);
  id v12 = v10;
  id v13 = v11;
  id v14 = @nonobjc AFNotifyObserver.init(name:options:queue:delegate:)(0xD000000000000023, 0x8000000000229E80, 1, v10, (uint64_t)v11);
  id v15 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = v14;
}

void closure #1 in closure #1 in SiriWorkflowRunner.startExecution()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.voiceCommands);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_0, oslog, v1, "continuation.onTermination called", v2, 2u);
    swift_slowDealloc();
  }
}

Swift::Void __swiftcall SiriWorkflowRunner.continueRunningOnAppLaunch()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "#SiriWorkflowRunner continueRunningOnAppLaunch", v5, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  (*(void (**)(void))((char *)&stru_68.reloff + (swift_isaMask & **(void **)(v1 + 144))))();
}

Swift::Bool __swiftcall SiriWorkflowRunner.isLastStep()()
{
  swift_beginAccess();
  outlined init with copy of DeviceState(v0 + 32, (uint64_t)v3);
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  Swift::Bool v1 = SiriRunnerClient.isLastStep()();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  return v1;
}

uint64_t SiriWorkflowRunner.pauseShortcut()()
{
  *(void *)(v1 + 152) = v0;
  return _swift_task_switch(SiriWorkflowRunner.pauseShortcut(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  NSString v13;
  uint64_t (*v14)(id);
  uint64_t v16;

  uint64_t v1 = v0[19];
  swift_beginAccess();
  outlined init with copy of DeviceState(v1 + 32, (uint64_t)(v0 + 11));
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  __swift_project_boxed_opaque_existential_1(v0 + 11, v2);
  os_log_type_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 11));
  outlined init with take of SiriWorkflowRunnerInput?(v1 + 72, (uint64_t)(v0 + 2));
  uint64_t v5 = (void *)static WFPausedShortcutConverter.toUserData(pausedShortcutData:runnerInput:)((uint64_t)v4, (uint64_t)(v0 + 2));
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
  uint64_t v6 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v5);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v8, v6);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 152), *(void *)(v1 + 176));
  uint64_t v9 = (void *)DeviceState.asInvocationContext.getter();
  [v9 setInputOrigin:SAInputOriginDialogButtonTapValue];
  long long v10 = [self runSiriKitExecutorCommandWithContext:v9 payload:v6];
  id v11 = [objc_allocWithZone((Class)SAIntentGroupSiriKitAppSelectionState) init];
  id v12 = [objc_allocWithZone((Class)SASyncAppIdentifyingInfo) init];
  id v13 = String._bridgeToObjectiveC()();
  [v12 setBundleId:v13];

  [v11 setRequestedApp:v12];
  [v10 setAppSelectionState:v11];

  id v14 = (uint64_t (*)(id))v0[1];
  return v14(v10);
}

uint64_t SiriWorkflowRunner.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  outlined consume of SiriWorkflowRunnerInput?(*(void **)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void **)(v0 + 104), *(void **)(v0 + 112), *(void **)(v0 + 120), *(void **)(v0 + 128), *(unsigned char *)(v0 + 136));

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
  return v0;
}

uint64_t SiriWorkflowRunner.__deallocating_deinit()
{
  SiriWorkflowRunner.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SiriWorkflowRunning.startExecution() in conformance SiriWorkflowRunner()
{
  return SiriWorkflowRunner.startExecution()();
}

void protocol witness for SiriWorkflowRunning.continueRunningOnAppLaunch() in conformance SiriWorkflowRunner()
{
}

BOOL protocol witness for SiriWorkflowRunning.isLastStep() in conformance SiriWorkflowRunner()
{
  return SiriWorkflowRunner.isLastStep()();
}

uint64_t protocol witness for SiriWorkflowRunning.pauseShortcut() in conformance SiriWorkflowRunner()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for SiriWorkflowRunning.pauseShortcut() in conformance SiriWorkflowRunner;
  return SiriWorkflowRunner.pauseShortcut()();
}

uint64_t protocol witness for SiriWorkflowRunning.pauseShortcut() in conformance SiriWorkflowRunner(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t AnonymousSiriWorkflowRunnerClientDelegate.continuation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41AnonymousSiriWorkflowRunnerClientDelegate_continuation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_6();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);

  return v6(a1, v3, v4);
}

void *AnonymousSiriWorkflowRunnerClientDelegate.init(continuation:)()
{
  ObjectType = (objc_class *)swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_11_32();
  uint64_t v2 = OUTLINED_FUNCTION_27_22();
  v3(v2);
  v7.receiver = v0;
  v7.super_class = ObjectType;
  objc_msgSendSuper2(&v7, "init");
  uint64_t v4 = OUTLINED_FUNCTION_29_19();
  v5(v4);
  return v0;
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:didFinishRunningWorkflowWithOutput:error:cancelled:)()
{
  OUTLINED_FUNCTION_36();
  char v3 = v2;
  uint64_t v5 = v4;
  objc_super v7 = v6;
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_56();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_24_20();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  id v14 = OUTLINED_FUNCTION_26_1(v13, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "#AnonymousSiriWorkflowRunnerClientDelegate didFinishRunningWorkflowWithOutput", v16, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  *(void *)uint64_t v0 = v7;
  *(void *)(v0 + 8) = v5;
  *(unsigned char *)(v0 + 16) = v3 & 1;
  swift_storeEnumTagMultiPayload();
  id v17 = v7;
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_34_14();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v9);
  OUTLINED_FUNCTION_27_1();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:performSiriRequest:completionHandler:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  objc_super v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_24_20();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  __chkstk_darwin(v12 - 8);
  OUTLINED_FUNCTION_50_1();
  uint64_t v34 = v13;
  uint64_t v33 = type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v31 = (uint64_t)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v32 = (uint64_t)v28 - v17;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
  id v19 = v7;
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_26_11(v21))
  {
    long long v28[2] = v3;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v29 = v10;
    objc_super v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v30 = v8;
    v28[0] = v24;
    *(_DWORD *)objc_super v23 = 138412290;
    v28[1] = v5;
    id v35 = v19;
    id v25 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)v28[0] = v19;

    _os_log_impl(&dword_0, v20, v1, "#AnonymousSiriWorkflowRunnerClientDelegate request=%@", v23, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v8 = v30;
    OUTLINED_FUNCTION_7_0();
    uint64_t v10 = v29;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
  }
  uint64_t v26 = v34;
  static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)();
  if (__swift_getEnumTagSinglePayload(v26, 1, v33) == 1)
  {
    outlined destroy of SiriWorkflowRunnerEvent?(v26);
  }
  else
  {
    uint64_t v27 = v32;
    outlined init with take of SiriWorkflowRunnerEvent(v26, v32);
    outlined init with copy of SiriWorkflowRunnerEvent(v27, v31);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
    OUTLINED_FUNCTION_34_14();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v8);
    outlined destroy of SiriWorkflowRunnerEvent(v27);
  }
  OUTLINED_FUNCTION_27_1();
}

void static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  objc_super v7 = v6;
  uint64_t v111 = v8;
  uint64_t v9 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0_2();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_23_23();
  uint64_t v13 = type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_30_16();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v107 - v17);
  __chkstk_darwin(v16);
  uint64_t v110 = (uint64_t)&v107 - v19;
  self;
  uint64_t v20 = OUTLINED_FUNCTION_12_33();
  if (v20)
  {
    os_log_type_t v21 = (void *)v20;
    id v22 = v7;
    id v23 = [v21 utterance];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    uint64_t v27 = OUTLINED_FUNCTION_57_2();
    *(void *)(v27 + 16) = v5;
    *(void *)(v27 + 24) = v3;
    *uint64_t v18 = v24;
    v18[1] = v26;
    _OWORD v18[2] = (uint64_t)partial apply for closure #1 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v18[3] = v27;
    OUTLINED_FUNCTION_15_25();
LABEL_3:
    swift_storeEnumTagMultiPayload();
    uint64_t v0 = (uint64_t)v18;
LABEL_11:
    uint64_t v53 = v110;
    uint64_t v52 = v111;
    outlined init with take of SiriWorkflowRunnerEvent(v0, v110);
    outlined init with take of SiriWorkflowRunnerEvent(v53, v52);
    __swift_storeEnumTagSinglePayload(v52, 0, 1, v13);
    swift_retain();
    goto LABEL_12;
  }
  uint64_t v108 = v3;
  uint64_t v109 = v13;
  self;
  uint64_t v28 = OUTLINED_FUNCTION_12_33();
  if (v28)
  {
    uint64_t v29 = (void *)v28;
    id v30 = v7;
    id v31 = [v29 URL];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v0, v1, v9);
    id v32 = [v29 bundleIdentifier];
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;
    }
    else
    {

      uint64_t v34 = 0;
      uint64_t v36 = 0;
    }
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
    unint64_t v48 = (uint64_t *)(v0 + *(int *)(v47 + 48));
    os_log_type_t v49 = (void (**)(uint64_t, uint64_t))(v0 + *(int *)(v47 + 64));
    *unint64_t v48 = v34;
    v48[1] = v36;
    uint64_t v50 = OUTLINED_FUNCTION_57_2();
    uint64_t v51 = v108;
    uint64_t v13 = v109;
    *(void *)(v50 + 16) = v5;
    *(void *)(v50 + 24) = v51;
    void *v49 = partial apply for closure #2 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v49[1] = (void (*)(uint64_t, uint64_t))v50;
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  self;
  uint64_t v37 = OUTLINED_FUNCTION_12_33();
  if (v37)
  {
    id v38 = (void *)v37;
    id v39 = v7;
    id v40 = [v38 userActivity];
    id v41 = [v38 bundleIdentifier];
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;

    uint64_t v45 = OUTLINED_FUNCTION_57_2();
    uint64_t v46 = v108;
    uint64_t v13 = v109;
    *(void *)(v45 + 16) = v5;
    *(void *)(v45 + 24) = v46;
    *uint64_t v18 = (uint64_t)v40;
    v18[1] = v42;
    _OWORD v18[2] = v44;
    v18[3] = (uint64_t)partial apply for closure #3 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v18[4] = v45;
    OUTLINED_FUNCTION_15_25();
    goto LABEL_3;
  }
  self;
  unint64_t v54 = (void *)OUTLINED_FUNCTION_12_33();
  if (v54)
  {
    id v55 = [v54 intent];
    uint64_t v56 = OUTLINED_FUNCTION_57_2();
    uint64_t v57 = OUTLINED_FUNCTION_33_18(v56);
    *uint64_t v18 = (uint64_t)v55;
    v18[1] = (uint64_t)partial apply for closure #4 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    _OWORD v18[2] = v57;
    OUTLINED_FUNCTION_15_25();
    goto LABEL_3;
  }
  self;
  uint64_t v58 = (void *)OUTLINED_FUNCTION_12_33();
  if (v58)
  {
    id v59 = [v58 dialogRequest];
    uint64_t v60 = OUTLINED_FUNCTION_57_2();
    uint64_t v61 = OUTLINED_FUNCTION_33_18(v60);
    *uint64_t v18 = (uint64_t)v59;
    v18[1] = (uint64_t)partial apply for closure #5 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    _OWORD v18[2] = v61;
    OUTLINED_FUNCTION_15_25();
    goto LABEL_3;
  }
  self;
  uint64_t v62 = (void *)OUTLINED_FUNCTION_12_33();
  if (v62)
  {
    id v63 = [v62 interaction];
    uint64_t v64 = OUTLINED_FUNCTION_57_2();
    uint64_t v65 = OUTLINED_FUNCTION_33_18(v64);
    *uint64_t v18 = (uint64_t)v63;
    v18[1] = (uint64_t)partial apply for closure #6 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    _OWORD v18[2] = v65;
    OUTLINED_FUNCTION_15_25();
    goto LABEL_3;
  }
  self;
  uint64_t v66 = OUTLINED_FUNCTION_12_33();
  if (v66)
  {
    uint64_t v67 = (void *)v66;
    id v68 = v7;
    id v69 = [v67 bundleIdentifier];
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v72 = v71;

    uint64_t v73 = OUTLINED_FUNCTION_57_2();
    uint64_t v74 = v108;
    uint64_t v13 = v109;
    *(void *)(v73 + 16) = v5;
    *(void *)(v73 + 24) = v74;
    *uint64_t v18 = v70;
    v18[1] = v72;
    _OWORD v18[2] = (uint64_t)partial apply for closure #7 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v18[3] = v73;
    OUTLINED_FUNCTION_15_25();
    goto LABEL_3;
  }
  self;
  uint64_t v75 = OUTLINED_FUNCTION_12_33();
  if (v75)
  {
    unint64_t v76 = (void *)v75;
    id v77 = v7;
    id v78 = [v76 action];
    id v79 = [v76 bundleIdentifier];
    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v82 = v81;

    LOBYTE(v76) = [v76 showWhenRun];
    uint64_t v83 = OUTLINED_FUNCTION_57_2();
    uint64_t v84 = OUTLINED_FUNCTION_33_18(v83);
    *uint64_t v18 = (uint64_t)v78;
    v18[1] = v80;
    _OWORD v18[2] = v82;
    *((unsigned char *)v18 + 24) = (_BYTE)v76;
    v18[4] = (uint64_t)partial apply for closure #8 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v18[5] = v84;
    OUTLINED_FUNCTION_15_25();
    goto LABEL_3;
  }
  self;
  if (OUTLINED_FUNCTION_12_33())
  {
    uint64_t v85 = OUTLINED_FUNCTION_57_2();
    uint64_t v86 = OUTLINED_FUNCTION_33_18(v85);
    *uint64_t v18 = (uint64_t)partial apply for closure #9 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v18[1] = v86;
    OUTLINED_FUNCTION_15_25();
    goto LABEL_3;
  }
  self;
  uint64_t v87 = OUTLINED_FUNCTION_12_33();
  if (v87)
  {
    uint64_t v88 = (void *)v87;
    id v89 = v7;
    id v90 = [v88 bundleIdentifier];
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v93 = v92;

    uint64_t v94 = OUTLINED_FUNCTION_57_2();
    uint64_t v95 = v108;
    uint64_t v13 = v109;
    *(void *)(v94 + 16) = v5;
    *(void *)(v94 + 24) = v95;
    *uint64_t v18 = v91;
    v18[1] = v93;
    _OWORD v18[2] = (uint64_t)partial apply for closure #10 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    v18[3] = v94;
    OUTLINED_FUNCTION_15_25();
    goto LABEL_3;
  }
  self;
  uint64_t v96 = (void *)OUTLINED_FUNCTION_12_33();
  if (v96)
  {
    unsigned __int8 v97 = [v96 needsPreciseLocation];
    uint64_t v98 = OUTLINED_FUNCTION_57_2();
    uint64_t v99 = v108;
    uint64_t v13 = v109;
    *(void *)(v98 + 16) = v5;
    *(void *)(v98 + 24) = v99;
    *(unsigned char *)uint64_t v18 = v97;
    v18[1] = (uint64_t)partial apply for closure #11 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:);
    _OWORD v18[2] = v98;
    OUTLINED_FUNCTION_15_25();
    goto LABEL_3;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v100 = type metadata accessor for Logger();
  __swift_project_value_buffer(v100, (uint64_t)static Logger.voiceCommands);
  id v101 = v7;
  uint64_t v102 = Logger.logObject.getter();
  os_log_type_t v103 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_26_11(v103))
  {
    v104 = (uint8_t *)swift_slowAlloc();
    v105 = (void *)swift_slowAlloc();
    *(_DWORD *)v104 = 138412290;
    id v112 = v101;
    id v106 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v105 = v101;

    _os_log_impl(&dword_0, v102, (os_log_type_t)v18, "#AnonymousSiriWorkflowRunnerClientDelegate unknown request=%@", v104, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
  }
  __swift_storeEnumTagSinglePayload(v111, 1, 1, v109);
LABEL_12:
  OUTLINED_FUNCTION_27_1();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:didStartActionWithIdentifier:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = v0;
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_27_6();
  uint64_t v27 = type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_30_16();
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v22 - v14);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v24 = v3;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = v8;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v25 = v10;
    uint64_t v29 = v21;
    uint64_t v23 = v2;
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v5, &v29);
    uint64_t v2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v17, v18, "#AnonymousSiriWorkflowRunnerClientDelegate started action %s", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v25;
    OUTLINED_FUNCTION_7_0();
    uint64_t v8 = v26;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *uint64_t v15 = v7;
  v15[1] = v5;
  swift_storeEnumTagMultiPayload();
  outlined init with copy of SiriWorkflowRunnerEvent((uint64_t)v15, v2);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v8);
  outlined destroy of SiriWorkflowRunnerEvent((uint64_t)v15);
  OUTLINED_FUNCTION_27_1();
}

void closure #1 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(uint64_t a1, void (*a2)(void))
{
  id v4 = objc_allocWithZone((Class)WFSiriSpeakTextResponse);
  swift_errorRetain();
  id v5 = @nonobjc WFSiriSpeakTextResponse.init(error:)(a1);
  a2();
}

void closure #2 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, Class *a5)
{
  id v7 = objc_allocWithZone(*a5);
  swift_errorRetain();
  id v8 = @nonobjc WFSiriSpeakTextResponse.init(error:)(a2);
  a3();
}

void closure #5 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(uint64_t a1, void (*a2)(void))
{
  id v3 = [objc_allocWithZone((Class)WFSiriDialogResponse) initWithDialogResponse:a1];
  a2();
}

void closure #4 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, Class *a5, SEL *a6)
{
  id v10 = objc_allocWithZone(*a5);
  id v11 = a1;
  swift_errorRetain();
  id v12 = @nonobjc WFSiriKitIntentResponse.init(interaction:andError:)(a1, a2, a6);
  a3();
}

void closure #9 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(char a1, void (*a2)(void))
{
  id v3 = [objc_allocWithZone((Class)WFSiriPunchOutResponse) initWithShouldPunchOut:a1 & 1];
  a2();
}

void closure #10 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(char a1, uint64_t a2, void (*a3)(void))
{
  objc_allocWithZone((Class)WFSiriAppProtectionResponse);
  swift_errorRetain();
  id v6 = @nonobjc WFSiriAppProtectionResponse.init(didUnlock:andError:)(a1, a2);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  id v8 = v6;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    id v12 = v8;
    id v13 = [v12 description];
    uint64_t v17 = a3;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 1024;
    [v12 didUnlock];

    a3 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_0, v9, v10, "#AnonymousSiriWorkflowRunnerClientDelegate setting WFSiriAppProtectionResponse=%s; didUnlock=%{BOOL}d",
      (uint8_t *)v11,
      0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  a3(v8);
}

void closure #11 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(char a1, uint64_t a2, void (*a3)(void))
{
  id v6 = objc_allocWithZone((Class)WFSiriLocationAuthorizationResponse);
  if (a2)
  {
    swift_errorRetain();
    id v7 = @nonobjc WFSiriSpeakTextResponse.init(error:)(a2);
  }
  else
  {
    id v7 = [v6 initWithDidAuthorize:a1 & 1];
  }
  id v8 = v7;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  id v10 = v8;
  swift_errorRetain();
  id v11 = v10;
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315650;
    id v15 = v11;
    uint64_t v23 = a3;
    id v16 = [v15 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 18) = 2080;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    uint64_t v20 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v23;
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v12, v13, "#AnonymousSiriWorkflowRunnerClientDelegate setting WFSiriLocationAuthorizationResponse=%s; didAuthorize=%{BOOL}d; error=%s",
      (uint8_t *)v14,
      0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  id v22 = v11;
  a3();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:executeLinkAction:inApplication:completionHandler:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  id v6 = v5;
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_3_23();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_14_18(v9, v28);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_13_29(v11, v29);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  os_log_type_t v13 = (void *)OUTLINED_FUNCTION_26_1(v12, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_5_3(v14))
  {
    id v15 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_7_33(v15);
    OUTLINED_FUNCTION_23_0(&dword_0, v16, v17, "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request executeLinkAction, this method is being deprecated.");
    OUTLINED_FUNCTION_5_30();
  }

  uint64_t v18 = OUTLINED_FUNCTION_8_29();
  v19(v18);
  if (v4)
  {
    uint64_t v20 = OUTLINED_FUNCTION_57_2();
    *(void *)(v20 + 16) = v4;
    *(void *)(v20 + 24) = v2;
  }
  uint64_t v21 = OUTLINED_FUNCTION_57_2();
  uint64_t v22 = OUTLINED_FUNCTION_28_16(v21);
  *(void *)(v0 + 32) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LNActionOutput?, @in_guaranteed Error?) -> (@out ());
  *(void *)(v0 + 40) = v22;
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_35_15();
  id v23 = v6;
  OUTLINED_FUNCTION_19_19();
  uint64_t v24 = OUTLINED_FUNCTION_18_22();
  v25(v24);
  uint64_t v26 = OUTLINED_FUNCTION_16_23();
  v27(v26);
  OUTLINED_FUNCTION_27_1();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:speakTextWithUtterance:completionHandler:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v19 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_56();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_24_20();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  id v15 = OUTLINED_FUNCTION_26_1(v14, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request speakTextWithUtterance", v17, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  uint64_t v18 = OUTLINED_FUNCTION_57_2();
  *(void *)(v18 + 16) = v19;
  *(void *)(v18 + 24) = v4;
  void *v0 = v8;
  v0[1] = v6;
  v0[2] = partial apply for closure #1 in AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:speakTextWithUtterance:completionHandler:);
  v0[3] = v18;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_34_14();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v10);
  OUTLINED_FUNCTION_27_1();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:open:withBundleIdentifier:completionHandler:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v24 = v2;
  uint64_t v25 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v23 = v8;
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_17_16();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_20_18();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  id v15 = OUTLINED_FUNCTION_26_1(v14, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request open url", v17, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
  uint64_t v19 = (void *)(v0 + *(int *)(v18 + 48));
  uint64_t v20 = (uint64_t (**)(uint64_t))(v0 + *(int *)(v18 + 64));
  type metadata accessor for URL();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v0, v23);
  *uint64_t v19 = v24;
  v19[1] = v7;
  uint64_t v22 = OUTLINED_FUNCTION_57_2();
  *(void *)(v22 + 16) = v5;
  *(void *)(v22 + 24) = v25;
  *uint64_t v20 = partial apply for closure #1 in AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:open:withBundleIdentifier:completionHandler:);
  v20[1] = (uint64_t (*)(uint64_t))v22;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v10);
  OUTLINED_FUNCTION_27_1();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:handle:withBundleIdentifier:completionHandler:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v33 = v7;
  uint64_t v9 = v8;
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_3_23();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_14_18(v12, v31);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_13_29(v14, v32);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  os_log_type_t v16 = (void *)OUTLINED_FUNCTION_26_1(v15, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_5_3(v17))
  {
    uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_7_33(v18);
    OUTLINED_FUNCTION_23_0(&dword_0, v19, v20, "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request handle userActivity");
    OUTLINED_FUNCTION_5_30();
  }

  uint64_t v21 = OUTLINED_FUNCTION_8_29();
  v22(v21);
  if (v4)
  {
    uint64_t v23 = OUTLINED_FUNCTION_57_2();
    *(void *)(v23 + 16) = v4;
    *(void *)(v23 + 24) = v2;
    uint64_t v24 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  }
  else
  {
    uint64_t v24 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed Bool, @guaranteed Error?) -> ();
    uint64_t v23 = 0;
  }
  uint64_t v25 = OUTLINED_FUNCTION_57_2();
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v23;
  void *v0 = v9;
  v0[1] = v33;
  v0[2] = v6;
  v0[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool, @in_guaranteed Error?) -> (@out ());
  v0[4] = v25;
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_35_15();
  id v26 = v9;
  OUTLINED_FUNCTION_19_19();
  uint64_t v27 = OUTLINED_FUNCTION_18_22();
  v28(v27);
  uint64_t v29 = OUTLINED_FUNCTION_16_23();
  v30(v29);
  OUTLINED_FUNCTION_27_1();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer specialized thunk for @escaping @callee_guaranteed (@in_guaranteed Bool, @guaranteed Error?) -> ()(unsigned __int8 *a1)
{
  return CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)*a1);
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:execute:completionHandler:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v25 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_17_16();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_0_2();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_20_18();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_50_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  os_log_type_t v16 = OUTLINED_FUNCTION_26_1(v15, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request execute intent", v18, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v2, v25 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41AnonymousSiriWorkflowRunnerClientDelegate_continuation, v10);
  if (v6)
  {
    uint64_t v19 = OUTLINED_FUNCTION_57_2();
    *(void *)(v19 + 16) = v6;
    *(void *)(v19 + 24) = v4;
    uint64_t v20 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed INInteraction?, @guaranteed Error?) -> ();
  }
  else
  {
    uint64_t v20 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed INInteraction?, @guaranteed Error?) -> ();
    uint64_t v19 = 0;
  }
  uint64_t v21 = OUTLINED_FUNCTION_57_2();
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = v19;
  *uint64_t v1 = v8;
  v1[1] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LNActionOutput?, @in_guaranteed Error?) -> (@out ());
  v1[2] = v21;
  swift_storeEnumTagMultiPayload();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v6);
  id v22 = v8;
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v10);
  uint64_t v23 = OUTLINED_FUNCTION_16_23();
  v24(v23);
  OUTLINED_FUNCTION_27_1();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer specialized thunk for @escaping @callee_guaranteed (@in_guaranteed INInteraction?, @guaranteed Error?) -> ()(Swift::OpaquePointer *a1)
{
  return CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)a1->_rawValue);
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:show:completionHandler:)()
{
}

{
  void *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  const char *v19;

  OUTLINED_FUNCTION_36();
  uint64_t v19 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_17_16();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_23_23();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = OUTLINED_FUNCTION_26_1(v14, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v17 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)os_log_type_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, v19, v17, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  void *v0 = v8;
  v0[1] = v6;
  v0[2] = v4;
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = v8;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v10);
  OUTLINED_FUNCTION_27_1();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:openInteractionInApp:completionHandler:)()
{
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:openApp:completionHandler:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v19 = v8;
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_56();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_23_23();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = (void *)OUTLINED_FUNCTION_26_1(v14, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_26_11(v16))
  {
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    OUTLINED_FUNCTION_17_5(&dword_0, v17, v18, "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request openApp");
    OUTLINED_FUNCTION_7_0();
  }

  void *v0 = v19;
  v0[1] = v7;
  v0[2] = v5;
  v0[3] = v3;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v10);
  OUTLINED_FUNCTION_27_1();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:executeLinkAction:inApplication:withNameOverride:completionHandler:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_3_23();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_14_18(v9, v28);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_13_29(v11, v29);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = (void *)OUTLINED_FUNCTION_26_1(v12, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_5_3(v14))
  {
    uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_7_33(v15);
    OUTLINED_FUNCTION_23_0(&dword_0, v16, v17, "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request executeLinkAction with name override");
    OUTLINED_FUNCTION_5_30();
  }

  uint64_t v18 = OUTLINED_FUNCTION_8_29();
  v19(v18);
  if (v4)
  {
    uint64_t v20 = OUTLINED_FUNCTION_57_2();
    *(void *)(v20 + 16) = v4;
    *(void *)(v20 + 24) = v2;
  }
  uint64_t v21 = OUTLINED_FUNCTION_57_2();
  uint64_t v22 = OUTLINED_FUNCTION_28_16(v21);
  *(void *)(v0 + 32) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LNActionOutput?, @in_guaranteed Error?) -> (@out ());
  *(void *)(v0 + 40) = v22;
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_35_15();
  id v23 = v6;
  OUTLINED_FUNCTION_19_19();
  uint64_t v24 = OUTLINED_FUNCTION_18_22();
  v25(v24);
  uint64_t v26 = OUTLINED_FUNCTION_16_23();
  v27(v26);
  OUTLINED_FUNCTION_27_1();
}

void AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:punchOutRequestedWithCompletionHandler:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_27_6();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_18();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = OUTLINED_FUNCTION_26_1(v11, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "#AnonymousSiriWorkflowRunnerClientDelegate unexpected request punchOutRequested", v14, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  void *v0 = v5;
  v0[1] = v3;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v7);
  OUTLINED_FUNCTION_27_1();
}

void AnonymousSiriWorkflowRunnerClientDelegate.init()()
{
}

uint64_t type metadata accessor for SiriWorkflowRunnerEvent(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for SiriWorkflowRunnerEvent);
}

uint64_t partial apply for closure #1 in SiriWorkflowRunner.startExecution()(uint64_t a1)
{
  return closure #1 in SiriWorkflowRunner.startExecution()(a1, v1);
}

id @nonobjc WFSiriKitIntentResponse.init(interaction:andError:)(void *a1, uint64_t a2, SEL *a3)
{
  if (a2)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(v3, *a3, a1, v6);

  return v7;
}

id @nonobjc WFSiriAppProtectionResponse.init(didUnlock:andError:)(char a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }
  id v5 = [v2 initWithDidUnlock:a1 & 1 andError:v4];

  return v5;
}

id @nonobjc WFSiriSpeakTextResponse.init(error:)(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
  }
  else
  {
    uint64_t v2 = 0;
  }
  id v3 = [v1 initWithError:v2];

  return v3;
}

uint64_t outlined destroy of SiriWorkflowRunnerEvent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriWorkflowRunnerEvent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of SiriWorkflowRunnerEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriWorkflowRunnerEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SiriWorkflowRunnerEvent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriWorkflowRunnerEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #11 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(char a1, uint64_t a2)
{
  closure #11 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, a2, *(void (**)(void))(v2 + 16));
}

void partial apply for closure #10 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(char a1, uint64_t a2)
{
  closure #10 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, a2, *(void (**)(void))(v2 + 16));
}

void partial apply for closure #9 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(char a1)
{
  closure #9 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_16BBD0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #8 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(void *a1, uint64_t a2)
{
  closure #4 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), (Class *)WFSiriLinkResponse_ptr, (SEL *)&selRef_initWithOutput_andError_);
}

void partial apply for closure #7 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(uint64_t a1, uint64_t a2)
{
  closure #2 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), (Class *)WFSiriOpenAppResponse_ptr);
}

void partial apply for closure #6 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(uint64_t a1, uint64_t a2)
{
  closure #2 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), (Class *)WFSiriInteractionResponse_ptr);
}

void partial apply for closure #5 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(uint64_t a1)
{
  closure #5 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, *(void (**)(void))(v1 + 16));
}

void partial apply for closure #4 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(void *a1, uint64_t a2)
{
  closure #4 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), (Class *)WFSiriKitIntentResponse_ptr, (SEL *)&selRef_initWithInteraction_andError_);
}

void partial apply for closure #3 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(uint64_t a1, uint64_t a2)
{
  closure #2 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), (Class *)WFSiriUserActivityResponse_ptr);
}

void partial apply for closure #2 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(uint64_t a1, uint64_t a2)
{
  closure #2 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), (Class *)WFSiriOpenURLResponse_ptr);
}

void partial apply for closure #1 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(uint64_t a1)
{
  closure #1 in static AnonymousSiriWorkflowRunnerClientDelegate.mapRunnerEvent(from:handler:)(a1, *(void (**)(void))(v1 + 16));
}

uint64_t partial apply for closure #1 in AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:speakTextWithUtterance:completionHandler:)(uint64_t a1)
{
  return (*(uint64_t (**)(BOOL, uint64_t))(v1 + 16))(a1 == 0, a1);
}

uint64_t sub_16BD38()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in AnonymousSiriWorkflowRunnerClientDelegate.workflowRunnerClient(_:open:withBundleIdentifier:completionHandler:)(uint64_t result)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  if (v2) {
    return v2(result & 1);
  }
  return result;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool, @in_guaranteed Error?) -> (@out ())(char a1, uint64_t a2)
{
  id v3 = *(uint64_t (**)(char *, uint64_t *))(v2 + 16);
  char v6 = a1;
  uint64_t v5 = a2;
  return v3(&v6, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(unsigned __int8 *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed INInteraction?, @guaranteed Error?) -> ()(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed LNActionOutput?, @in_guaranteed Error?) -> (@out ())(uint64_t a1, uint64_t a2)
{
  id v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  return v3(&v6, &v5);
}

char *initializeBufferWithCopyOfBuffer for SiriWorkflowRunnerEvent(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = &v11[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 7u:
      case 0xAu:
        *(void *)a1 = *a2;
        uint64_t v34 = a2[3];
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        *((void *)a1 + 3) = v34;
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 2u:
        uint64_t v12 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
        uint64_t v14 = *(int *)(v13 + 48);
        uint64_t v15 = &a1[v14];
        uint64_t v16 = (uint64_t *)((char *)a2 + v14);
        uint64_t v18 = *v16;
        uint64_t v17 = v16[1];
        *(void *)uint64_t v15 = v18;
        *((void *)v15 + 1) = v17;
        uint64_t v19 = *(int *)(v13 + 64);
        uint64_t v20 = &a1[v19];
        uint64_t v21 = (char **)((char *)a2 + v19);
        uint64_t v22 = v21[1];
        *(void *)uint64_t v20 = *v21;
        *((void *)v20 + 1) = v22;
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 3u:
        id v23 = *a2;
        uint64_t v24 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v24;
        uint64_t v25 = a2[4];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((void *)a1 + 4) = v25;
        uint64_t v26 = v23;
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 4u:
      case 5u:
      case 6u:
        uint64_t v27 = a2[2];
        long long v28 = *(_OWORD *)a2;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((void *)a1 + 2) = v27;
        id v29 = (id)v28;
        swift_retain();
        break;
      case 8u:
        id v30 = *a2;
        uint64_t v31 = a2[1];
        *(void *)a1 = *a2;
        uint64_t v32 = v30;
        swift_errorRetain();
        *((void *)a1 + 1) = v31;
        a1[16] = *((unsigned char *)a2 + 16);
        break;
      case 9u:
        uint64_t v33 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v33;
        swift_retain();
        break;
      case 0xBu:
        *a1 = *(unsigned char *)a2;
        uint64_t v35 = a2[2];
        *((void *)a1 + 1) = a2[1];
        *((void *)a1 + 2) = v35;
        swift_retain();
        break;
      case 0xCu:
        uint64_t v36 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v36;
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = *a2;
        id v7 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v7;
        *((void *)a1 + 2) = a2[2];
        a1[24] = *((unsigned char *)a2 + 24);
        uint64_t v8 = a2[4];
        uint64_t v9 = a2[5];
        *((void *)a1 + 4) = v8;
        *((void *)a1 + 5) = v9;
        uint64_t v10 = v6;
        swift_bridgeObjectRetain();
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SiriWorkflowRunnerEvent(id *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 3:

      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 1:
    case 7:
    case 10:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 2:
      uint64_t v3 = type metadata accessor for URL();
      (*(void (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 4:
    case 5:
    case 6:

      goto LABEL_9;
    case 8:

      return swift_errorRelease();
    case 9:
    case 11:
LABEL_9:
      uint64_t result = swift_release();
      break;
    case 12:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for SiriWorkflowRunnerEvent(uint64_t a1, long long *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 7u:
    case 0xAu:
      *(void *)a1 = *(void *)a2;
      uint64_t v31 = *((void *)a2 + 3);
      *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
      *(void *)(a1 + 24) = v31;
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 2u:
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
      uint64_t v11 = *(int *)(v10 + 48);
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (uint64_t *)((char *)a2 + v11);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      *uint64_t v12 = v15;
      v12[1] = v14;
      uint64_t v16 = *(int *)(v10 + 64);
      uint64_t v17 = (void *)(a1 + v16);
      uint64_t v18 = (void *)((char *)a2 + v16);
      uint64_t v19 = v18[1];
      *uint64_t v17 = *v18;
      v17[1] = v19;
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 3u:
      uint64_t v20 = *(void **)a2;
      uint64_t v21 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v21;
      uint64_t v22 = *((void *)a2 + 4);
      *(_OWORD *)(a1 + 16) = a2[1];
      *(void *)(a1 + 32) = v22;
      id v23 = v20;
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 4u:
    case 5u:
    case 6u:
      uint64_t v24 = *((void *)a2 + 2);
      long long v25 = *a2;
      *(_OWORD *)a1 = *a2;
      *(void *)(a1 + 16) = v24;
      id v26 = (id)v25;
      swift_retain();
      break;
    case 8u:
      uint64_t v27 = *(void **)a2;
      uint64_t v28 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      id v29 = v27;
      swift_errorRetain();
      *(void *)(a1 + 8) = v28;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      break;
    case 9u:
      uint64_t v30 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v30;
      swift_retain();
      break;
    case 0xBu:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v32 = *((void *)a2 + 2);
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = v32;
      swift_retain();
      break;
    case 0xCu:
      uint64_t v33 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v33;
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = *(void **)a2;
      uint64_t v5 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
      uint64_t v6 = *((void *)a2 + 4);
      uint64_t v7 = *((void *)a2 + 5);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v7;
      id v8 = v4;
      swift_bridgeObjectRetain();
      swift_retain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for SiriWorkflowRunnerEvent(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of SiriWorkflowRunnerEvent((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 7u:
      case 0xAu:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v29 = a2[2];
        uint64_t v30 = a2[3];
        a1[2] = v29;
        a1[3] = v30;
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 2u:
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
        uint64_t v10 = *(int *)(v9 + 48);
        uint64_t v11 = (void *)((char *)a1 + v10);
        uint64_t v12 = (void *)((char *)a2 + v10);
        *uint64_t v11 = *v12;
        v11[1] = v12[1];
        uint64_t v13 = *(int *)(v9 + 64);
        uint64_t v14 = (void *)((char *)a1 + v13);
        uint64_t v15 = (void *)((char *)a2 + v13);
        uint64_t v16 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v16;
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 3u:
        uint64_t v17 = (void *)*a2;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        uint64_t v18 = a2[3];
        uint64_t v19 = a2[4];
        a1[3] = v18;
        a1[4] = v19;
        id v20 = v17;
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 4u:
      case 5u:
      case 6u:
        uint64_t v21 = (void *)*a2;
        *a1 = *a2;
        uint64_t v22 = a2[1];
        uint64_t v23 = a2[2];
        a1[1] = v22;
        a1[2] = v23;
        id v24 = v21;
        swift_retain();
        break;
      case 8u:
        long long v25 = (void *)*a2;
        *a1 = *a2;
        uint64_t v26 = a2[1];
        id v27 = v25;
        swift_errorRetain();
        a1[1] = v26;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        break;
      case 9u:
        uint64_t v28 = a2[1];
        *a1 = *a2;
        a1[1] = v28;
        swift_retain();
        break;
      case 0xBu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v31 = a2[2];
        a1[1] = a2[1];
        a1[2] = v31;
        swift_retain();
        break;
      case 0xCu:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v4 = (void *)*a2;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        uint64_t v5 = a2[4];
        uint64_t v6 = a2[5];
        a1[4] = v5;
        a1[5] = v6;
        id v7 = v4;
        swift_bridgeObjectRetain();
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for SiriWorkflowRunnerEvent(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
    *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
    *(_OWORD *)&a1[*(int *)(v7 + 64)] = *(_OWORD *)&a2[*(int *)(v7 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for SiriWorkflowRunnerEvent(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SiriWorkflowRunnerEvent((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
      *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
      *(_OWORD *)&a1[*(int *)(v7 + 64)] = *(_OWORD *)&a2[*(int *)(v7 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for SiriWorkflowRunnerEvent()
{
  uint64_t v3 = "0";
  uint64_t v4 = &unk_21BD90;
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v5 = &v2;
    uint64_t v6 = &unk_21BDC0;
    uint64_t v7 = &unk_21BDD8;
    uint64_t v8 = &unk_21BDD8;
    uint64_t v9 = &unk_21BDD8;
    uint64_t v10 = &unk_21BD90;
    uint64_t v11 = &unk_21BDF0;
    uint64_t v12 = (char *)&value witness table for () + 64;
    uint64_t v13 = &unk_21BD90;
    uint64_t v14 = &unk_21BDD8;
    uint64_t v15 = &unk_21BE08;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SiriWorkflowRunner()
{
  return self;
}

uint64_t ObjC metadata update function for AnonymousSiriWorkflowRunnerClientDelegate()
{
  return type metadata accessor for AnonymousSiriWorkflowRunnerClientDelegate(0);
}

uint64_t type metadata accessor for AnonymousSiriWorkflowRunnerClientDelegate(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for AnonymousSiriWorkflowRunnerClientDelegate);
}

void type metadata completion function for AnonymousSiriWorkflowRunnerClientDelegate()
{
  type metadata accessor for AsyncStream<SiriWorkflowRunnerEvent>.Continuation();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for AsyncStream<SiriWorkflowRunnerEvent>.Continuation()
{
  if (!lazy cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation)
  {
    type metadata accessor for SiriWorkflowRunnerEvent(255);
    unint64_t v0 = type metadata accessor for AsyncStream.Continuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>.Continuation);
    }
  }
}

uint64_t sub_16CF04()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned WFSiriActionResponse) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_16CF50()
{
  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in closure #1 in SiriWorkflowRunner.startExecution()()
{
}

uint64_t OUTLINED_FUNCTION_5_30()
{
  return swift_slowDealloc();
}

_WORD *OUTLINED_FUNCTION_7_33(_WORD *result)
{
  *(void *)(v2 - 136) = v1;
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_29()
{
  return *(void *)(v0 - 88);
}

uint64_t OUTLINED_FUNCTION_12_33()
{
  return swift_dynamicCastObjCClass();
}

void OUTLINED_FUNCTION_13_29(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_14_18(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 88) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_15_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_19()
{
  return AsyncStream.Continuation.yield(_:)();
}

uint64_t OUTLINED_FUNCTION_27_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_16(uint64_t result)
{
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v1;
  uint64_t v7 = *(void *)(v6 - 96);
  *(void *)uint64_t v5 = v3;
  *(void *)(v5 + 8) = v7;
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 24) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_29_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31_16()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_33_18(uint64_t result)
{
  uint64_t v3 = *(void *)(v2 - 120);
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v3;
  return result;
}

uint64_t OUTLINED_FUNCTION_34_14()
{
  return AsyncStream.Continuation.yield(_:)();
}

uint64_t OUTLINED_FUNCTION_35_15()
{
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v0);
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_38_15()
{
  return v0;
}

Swift::Bool __swiftcall AppInstallInfoProvider.isShortcutsAppInstalled()()
{
  id v0 = objc_allocWithZone((Class)LSApplicationRecord);
  uint64_t v1 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(0xD000000000000013, 0x8000000000225330, 0);
  uint64_t v3 = v1;
  if (!v1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_0, v3, v4, "#SiriLinkFlowPlugin cannot find application record for Shortcuts", v5, 2u);
      swift_slowDealloc();
    }
    goto LABEL_14;
  }
  id v6 = [v1 applicationState];
  unsigned __int8 v7 = [v6 isInstalled];

  if ((v7 & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_0, v10, v11, "#SiriLinkFlowPlugin Shortcuts app is not installed on device", v12, 2u);
      swift_slowDealloc();
    }

LABEL_14:
    Swift::Bool v8 = 0;
    goto LABEL_15;
  }
  Swift::Bool v8 = 1;
LABEL_15:

  return v8;
}

uint64_t protocol witness for AppInstallInfoProviding.isShortcutsAppInstalled() in conformance AppInstallInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))() & 1;
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t type metadata accessor for AppInstallInfoProvider()
{
  return self;
}

uint64_t UsoVoiceCommandsCustomTask.getArguments()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  if (one-time initialization token for voiceCommands == -1) {
    goto LABEL_2;
  }
LABEL_81:
  swift_once();
LABEL_2:
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  swift_retain_n();
  NSString v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  uint64_t v7 = v6;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v3 + 104))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v11 = swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 112))(v11);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v5, (os_log_type_t)v7, "Attempting to convert USOGraph for verb: %s bundleId: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  if (!*(void *)(v3 + 16))
  {
    uint64_t v64 = type metadata accessor for TransformationError();
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    *uint64_t v65 = 0xD000000000000016;
    v65[1] = 0x8000000000229EF0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v64 - 8) + 104))(v65, enum case for TransformationError.cannotTransform(_:), v64);
    swift_willThrow();
    return v7;
  }
  uint64_t v3 = UsoTask.arguments.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  uint64_t v7 = Dictionary.init(dictionaryLiteral:)();
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(v3 + 64);
  uint64_t v67 = v3 + 64;
  unint64_t v69 = v2;
  uint64_t v70 = v3;
  uint64_t v16 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v68 = (unint64_t)(v16 + 63) >> 6;
  if ((v17 & v15) != 0)
  {
LABEL_9:
    unint64_t v19 = __clz(__rbit64(v18));
    uint64_t v20 = (v18 - 1) & v18;
    unint64_t v21 = v19 | (v14 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_79;
    }
    if (v22 >= v68) {
      goto LABEL_72;
    }
    unint64_t v23 = *(void *)(v67 + 8 * v22);
    ++v14;
    if (v23) {
      goto LABEL_23;
    }
    int64_t v14 = v22 + 1;
    if (v22 + 1 >= v68) {
      goto LABEL_72;
    }
    unint64_t v23 = *(void *)(v67 + 8 * v14);
    if (v23) {
      goto LABEL_23;
    }
    int64_t v14 = v22 + 2;
    if (v22 + 2 >= v68) {
      goto LABEL_72;
    }
    unint64_t v23 = *(void *)(v67 + 8 * v14);
    if (v23) {
      goto LABEL_23;
    }
    int64_t v24 = v22 + 3;
    if (v24 >= v68)
    {
LABEL_72:
      swift_release();
      return v7;
    }
    unint64_t v23 = *(void *)(v67 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        int64_t v14 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          goto LABEL_80;
        }
        if (v14 >= v68) {
          goto LABEL_72;
        }
        unint64_t v23 = *(void *)(v67 + 8 * v14);
        ++v24;
        if (v23) {
          goto LABEL_23;
        }
      }
    }
    int64_t v14 = v24;
LABEL_23:
    uint64_t v20 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_24:
    long long v25 = (uint64_t *)(*(void *)(v70 + 48) + 16 * v21);
    uint64_t v26 = v25[1];
    uint64_t v75 = *v25;
    unint64_t v2 = *(void *)(*(void *)(v70 + 56) + 8 * v21);
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    int64_t v72 = v14;
    uint64_t v73 = v7;
    unint64_t v71 = v20;
    uint64_t v74 = v26;
    if (v3)
    {
      if (v3 >= 1)
      {
        uint64_t v27 = 0;
        uint64_t v28 = _swiftEmptyArrayStorage;
        while (1)
        {
          if ((v2 & 0xC000000000000001) != 0) {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            swift_retain();
          }
          uint64_t v29 = dispatch thunk of UsoValue.getAsPrimitiveValueString()();
          if (v30)
          {
            uint64_t v31 = v29;
            uint64_t v32 = v30;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_0_31();
              uint64_t v28 = v44;
            }
            unint64_t v33 = v28[2];
            if (v33 >= v28[3] >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v28 = v45;
            }
            long long v28[2] = v33 + 1;
            uint64_t v34 = &v28[2 * v33];
            v34[4] = v31;
            v34[5] = v32;
          }
          if (!dispatch thunk of UsoValue.getAsEntity()()) {
            goto LABEL_54;
          }
          uint64_t v35 = UsoEntity.attributes.getter();
          swift_release();
          if (*(void *)(v35 + 16))
          {
            unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(0x6156676E69727473, 0xEB0000000065756CLL);
            if (v37)
            {
              unint64_t v38 = *(void *)(*(void *)(v35 + 56) + 8 * v36);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              if (v38 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (v46)
                {
LABEL_43:
                  if ((v38 & 0xC000000000000001) != 0)
                  {
                    specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else
                  {
                    if (!*(void *)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFFF8)))
                    {
                      __break(1u);
                      goto LABEL_76;
                    }
                    swift_retain();
                  }
                  swift_bridgeObjectRelease();
                  uint64_t v39 = dispatch thunk of UsoValue.getAsPrimitiveValueString()();
                  if (v40)
                  {
                    uint64_t v41 = v40;
                    uint64_t v76 = v39;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    {
                      OUTLINED_FUNCTION_0_31();
                      uint64_t v28 = v47;
                    }
                    unint64_t v42 = v28[2];
                    if (v42 >= v28[3] >> 1)
                    {
                      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                      uint64_t v28 = v48;
                    }
                    long long v28[2] = v42 + 1;
                    uint64_t v43 = &v28[2 * v42];
                    v43[4] = v76;
                    v43[5] = v41;
                  }
                  swift_release();
LABEL_54:
                  swift_release();
                  goto LABEL_55;
                }
              }
              else if (*(void *)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFFF8)))
              {
                goto LABEL_43;
              }
            }
          }
          swift_release();
          swift_bridgeObjectRelease();
LABEL_55:
          if (v3 == ++v27) {
            goto LABEL_61;
          }
        }
      }
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    uint64_t v28 = _swiftEmptyArrayStorage;
LABEL_61:
    swift_bridgeObjectRelease();
    uint64_t v3 = (uint64_t)specialized _arrayForceCast<A, B>(_:)((uint64_t)v28);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v77 = v73;
    unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v74);
    uint64_t v52 = *(void *)(v73 + 16);
    BOOL v53 = (v51 & 1) == 0;
    Swift::Int v54 = v52 + v53;
    if (__OFADD__(v52, v53))
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    unint64_t v55 = v50;
    char v56 = v51;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Any]>);
    unint64_t v2 = v69;
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v54)) {
      break;
    }
LABEL_65:
    uint64_t v7 = v77;
    if (v56)
    {
      uint64_t v59 = *(void *)(v77 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v59 + 8 * v55) = v3;
    }
    else
    {
      *(void *)(v77 + 8 * (v55 >> 6) + 64) |= 1 << v55;
      uint64_t v60 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v55);
      *uint64_t v60 = v75;
      v60[1] = v74;
      *(void *)(*(void *)(v7 + 56) + 8 * v55) = v3;
      uint64_t v61 = *(void *)(v7 + 16);
      BOOL v62 = __OFADD__(v61, 1);
      uint64_t v63 = v61 + 1;
      if (v62) {
        goto LABEL_78;
      }
      *(void *)(v7 + 16) = v63;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v18 = v71;
    int64_t v14 = v72;
    if (v71) {
      goto LABEL_9;
    }
  }
  unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v74);
  if ((v56 & 1) == (v58 & 1))
  {
    unint64_t v55 = v57;
    goto LABEL_65;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t UsoVoiceCommandsCustomTask.verb.getter()
{
  if (*(void *)(v0 + 16)) {
    return UsoTask.verbString.getter();
  }
  else {
    return 0;
  }
}

uint64_t UsoVoiceCommandsCustomTask.bundleId.getter()
{
  if (!*(void *)(v0 + 16)) {
    return 0;
  }
  UsoTask.baseEntityAsString.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t UsoVoiceCommandsCustomTask.bundleIdWithCustomIntentTypePrefix.getter()
{
  v1._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v0 + 112))();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

uint64_t UsoVoiceCommandsCustomTask.fullyQualifiedIntentWithBundleId.getter()
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v0 + 120))();
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  uint64_t v2 = swift_bridgeObjectRelease();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 104))(v2);
  NSString v5 = v4;
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t one-time initialization function for customIntentTransformer()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask, INIntent>);
  __swift_allocate_value_buffer(v0, static Transformer<>.customIntentTransformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.customIntentTransformer);
  type metadata accessor for UsoTask();
  type metadata accessor for INIntent();
  return Transformer.init(transform:)();
}

{
  uint64_t v0;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoVoiceCommandsCustomTask, INIntent>);
  __swift_allocate_value_buffer(v0, static Transformer<>.customIntentTransformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.customIntentTransformer);
  type metadata accessor for UsoVoiceCommandsCustomTask();
  type metadata accessor for INIntent();
  return Transformer.init(transform:)();
}

uint64_t closure #1 in closure #1 in variable initialization expression of static Transformer<>.customIntentTransformer@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  void (*v9)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  type metadata accessor for UsoVoiceCommandsCustomTask();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  uint64_t v7 = one-time initialization token for customIntentTransformer;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoVoiceCommandsCustomTask, INIntent>);
  __swift_project_value_buffer(v8, (uint64_t)static Transformer<>.customIntentTransformer);
  uint64_t v9 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  uint64_t v12 = v6;
  v9(&v11, &v12);
  swift_release();
  uint64_t result = swift_release();
  if (!v3) {
    *a2 = v11;
  }
  return result;
}

uint64_t Transformer<>.customIntentTransformer.unsafeMutableAddressor()
{
  return Transformer<>.workflowNameTransformer.unsafeMutableAddressor(&one-time initialization token for customIntentTransformer, &demangling cache variable for type metadata for Transformer<UsoVoiceCommandsCustomTask, INIntent>, (uint64_t)static Transformer<>.customIntentTransformer);
}

{
  return Transformer<>.workflowNameTransformer.unsafeMutableAddressor(&one-time initialization token for customIntentTransformer, &demangling cache variable for type metadata for Transformer<UsoTask, INIntent>, (uint64_t)static Transformer<>.customIntentTransformer);
}

uint64_t static Transformer<>.customIntentTransformer.getter@<X0>(uint64_t a1@<X8>)
{
  return static Transformer<>.usoTaskTransformer.getter(&one-time initialization token for customIntentTransformer, &demangling cache variable for type metadata for Transformer<UsoTask, INIntent>, (uint64_t)static Transformer<>.customIntentTransformer, a1);
}

{
  return static Transformer<>.usoTaskTransformer.getter(&one-time initialization token for customIntentTransformer, &demangling cache variable for type metadata for Transformer<UsoVoiceCommandsCustomTask, INIntent>, (uint64_t)static Transformer<>.customIntentTransformer, a1);
}

const char *Transformer<>.customParseIntentDictionaryKey.unsafeMutableAddressor()
{
  return "intent";
}

uint64_t static Transformer<>.customParseIntentDictionaryKey.getter()
{
  return 0x746E65746E69;
}

const char *Transformer<>.parametersDictionaryKey.unsafeMutableAddressor()
{
  return "parameters";
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.customIntentTransformer(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(_OWORD **)a1;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  int64_t v6 = v2;
  if (v2)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = v5;
  v222 = a2;
  v223 = *(void (**)(void))(*(void *)v4 + 128);
  v224 = v4;
  v223();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v9 = (unint64_t)(id)INIntentCreate();

  v233 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v225 = v7 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v7 + 64);
  int64_t v226 = (unint64_t)(v10 + 63) >> 6;
  unint64_t v13 = v237;
  uint64_t v227 = v7;
  unint64_t v228 = v9;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v6 << 6);
    }
    else
    {
      BOOL v16 = __OFADD__(v6++, 1);
      if (v16) {
        goto LABEL_237;
      }
      if (v6 >= v226) {
        goto LABEL_219;
      }
      unint64_t v17 = *(void *)(v225 + 8 * v6);
      if (!v17)
      {
        int64_t v18 = v6 + 1;
        if (v6 + 1 >= v226) {
          goto LABEL_219;
        }
        unint64_t v17 = *(void *)(v225 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v6 + 2;
          if (v6 + 2 >= v226) {
            goto LABEL_219;
          }
          unint64_t v17 = *(void *)(v225 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v6 + 3;
            if (v6 + 3 >= v226) {
              goto LABEL_219;
            }
            unint64_t v17 = *(void *)(v225 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                int64_t v6 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_238;
                }
                if (v6 >= v226) {
                  break;
                }
                unint64_t v17 = *(void *)(v225 + 8 * v6);
                ++v18;
                if (v17) {
                  goto LABEL_18;
                }
              }
LABEL_219:
              swift_release();
              swift_isUniquelyReferenced_nonNull_native();
              *(void *)&long long v238 = &_swiftEmptyDictionarySingleton;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
              swift_bridgeObjectRelease();
              unint64_t v13 = v224;
              if (one-time initialization token for voiceCommands != -1) {
                goto LABEL_239;
              }
              goto LABEL_220;
            }
          }
        }
        int64_t v6 = v18;
      }
LABEL_18:
      unint64_t v12 = (v17 - 1) & v17;
      unint64_t v15 = __clz(__rbit64(v17)) + (v6 << 6);
    }
    unint64_t v19 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = *(void *)(*(void *)(v7 + 56) + 8 * v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v231 = v6;
    unint64_t v232 = v12;
    if (!v9) {
      break;
    }
    id v23 = [(id)v9 _codableDescription];
    id v24 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byKeyPath:)(v20, v21, v23);

    long long v25 = v24;
    if (!v24) {
      goto LABEL_38;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      uint64_t v26 = v233;
      swift_bridgeObjectRetain();
      v229 = v24;
      uint64_t v27 = static Transformer<>.convertCustomObject(attribute:parameter:values:)(v24, v20, v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized LazyMapSequence.makeIterator()(v27, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, &v238);
      swift_bridgeObjectRetain();
      specialized LazyMapSequence.Iterator.next()(&v236);
      uint64_t v29 = *((void *)&v236 + 1);
      if (*((void *)&v236 + 1))
      {
        uint64_t v30 = (uint64_t)v233;
        while (1)
        {
          uint64_t v31 = v236;
          outlined init with take of Any(v237, v235);
          unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v29);
          uint64_t v33 = *(void *)(v30 + 16);
          BOOL v34 = (v32 & 1) == 0;
          uint64_t v35 = v33 + v34;
          if (__OFADD__(v33, v34)) {
            goto LABEL_233;
          }
          char v36 = v32;
          if (*(void *)(v30 + 24) >= v35)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              if ((v32 & 1) == 0) {
                goto LABEL_33;
              }
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
              _NativeDictionary.copy()();
              if ((v36 & 1) == 0) {
                goto LABEL_33;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, isUniquelyReferenced_nonNull_native & 1);
            unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v29);
            if ((v36 & 1) != (v38 & 1)) {
              goto LABEL_250;
            }
            unint64_t v9 = v37;
            if ((v36 & 1) == 0)
            {
LABEL_33:
              uint64_t v30 = (uint64_t)v233;
              v233[(v9 >> 6) + 8] |= 1 << v9;
              uint64_t v40 = (uint64_t *)(v233[6] + 16 * v9);
              *uint64_t v40 = v31;
              v40[1] = v29;
              outlined init with take of Any(v235, (_OWORD *)(v233[7] + 32 * v9));
              uint64_t v41 = v233[2];
              BOOL v16 = __OFADD__(v41, 1);
              uint64_t v42 = v41 + 1;
              if (v16) {
                goto LABEL_234;
              }
              v233[2] = v42;
              goto LABEL_35;
            }
          }
          uint64_t v30 = (uint64_t)v233;
          outlined init with take of Any(v235, v234);
          swift_bridgeObjectRelease();
          uint64_t v39 = (_OWORD *)(v233[7] + 32 * v9);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
          outlined init with take of Any(v234, v39);
LABEL_35:
          specialized LazyMapSequence.Iterator.next()(&v236);
          uint64_t v29 = *((void *)&v236 + 1);
          char isUniquelyReferenced_nonNull_native = 1;
          if (!*((void *)&v236 + 1)) {
            goto LABEL_70;
          }
        }
      }
      goto LABEL_69;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      uint64_t v26 = v233;
      swift_bridgeObjectRetain();
      v229 = v24;
      uint64_t v58 = static Transformer<>.convertEnum(attribute:parameter:values:)(v24, v20, v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v59 = swift_isUniquelyReferenced_nonNull_native();
      specialized LazyMapSequence.makeIterator()(v58, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, &v238);
      swift_bridgeObjectRetain();
      specialized LazyMapSequence.Iterator.next()(&v236);
      uint64_t v60 = *((void *)&v236 + 1);
      if (*((void *)&v236 + 1))
      {
        uint64_t v30 = (uint64_t)v233;
        while (1)
        {
          uint64_t v61 = v236;
          outlined init with take of Any(v237, v235);
          unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v60);
          uint64_t v63 = *(void *)(v30 + 16);
          BOOL v64 = (v62 & 1) == 0;
          uint64_t v65 = v63 + v64;
          if (__OFADD__(v63, v64)) {
            goto LABEL_235;
          }
          char v66 = v62;
          if (*(void *)(v30 + 24) >= v65)
          {
            if (v59)
            {
              if ((v62 & 1) == 0) {
                goto LABEL_65;
              }
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
              _NativeDictionary.copy()();
              if ((v66 & 1) == 0) {
                goto LABEL_65;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v65, v59 & 1);
            unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v60);
            if ((v66 & 1) != (v68 & 1)) {
              goto LABEL_250;
            }
            unint64_t v9 = v67;
            if ((v66 & 1) == 0)
            {
LABEL_65:
              uint64_t v30 = (uint64_t)v233;
              v233[(v9 >> 6) + 8] |= 1 << v9;
              uint64_t v70 = (uint64_t *)(v233[6] + 16 * v9);
              *uint64_t v70 = v61;
              v70[1] = v60;
              outlined init with take of Any(v235, (_OWORD *)(v233[7] + 32 * v9));
              uint64_t v71 = v233[2];
              BOOL v16 = __OFADD__(v71, 1);
              uint64_t v72 = v71 + 1;
              if (v16) {
                goto LABEL_236;
              }
              v233[2] = v72;
              goto LABEL_67;
            }
          }
          uint64_t v30 = (uint64_t)v233;
          outlined init with take of Any(v235, v234);
          swift_bridgeObjectRelease();
          unint64_t v69 = (_OWORD *)(v233[7] + 32 * v9);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v69);
          outlined init with take of Any(v234, v69);
LABEL_67:
          specialized LazyMapSequence.Iterator.next()(&v236);
          uint64_t v60 = *((void *)&v236 + 1);
          char v59 = 1;
          if (!*((void *)&v236 + 1)) {
            goto LABEL_70;
          }
        }
      }
LABEL_69:
      uint64_t v30 = (uint64_t)v26;
LABEL_70:
      swift_bridgeObjectRelease();
      outlined consume of [String : DMFPolicy].Iterator._Variant();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v233 = (void *)v30;
      goto LABEL_71;
    }
    self;
    if (!swift_dynamicCastObjCClass()) {
      goto LABEL_38;
    }
    if (!*(void *)(v22 + 16))
    {
      swift_bridgeObjectRelease();

      goto LABEL_108;
    }
    outlined init with copy of Any(v22 + 32, (uint64_t)&v238);
    unint64_t v9 = v228;
    if (swift_dynamicCast())
    {
      long long v73 = v236;
      v230 = v25;
      if ([v25 valueType] == (char *)&dword_18 + 3)
      {
        swift_bridgeObjectRelease();
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v74 = type metadata accessor for Logger();
        __swift_project_value_buffer(v74, (uint64_t)static Logger.voiceCommands);
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v77 = 0;
          _os_log_impl(&dword_0, v75, v76, "Location resolution not currently supported with Custom NL", v77, 2u);
          swift_slowDealloc();
        }

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
        uint64_t v78 = swift_allocObject();
        *(_OWORD *)(v78 + 16) = xmmword_212160;
        *(void *)(v78 + 32) = 1701667182;
        *(void *)(v78 + 40) = 0xE400000000000000;
        *(_OWORD *)(v78 + 48) = v73;
        uint64_t v79 = Dictionary.init(dictionaryLiteral:)();
        v239 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
        *(void *)&long long v238 = v79;
        outlined init with take of Any(&v238, &v236);
        char v80 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v235[0] = v233;
        unint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
        uint64_t v83 = v233[2];
        BOOL v84 = (v82 & 1) == 0;
        Swift::Int v85 = v83 + v84;
        if (__OFADD__(v83, v84))
        {
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
        }
        unint64_t v86 = v81;
        char v87 = v82;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        Swift::Bool v88 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v80, v85);
        uint64_t v7 = v227;
        unint64_t v12 = v232;
        if (v88)
        {
          unint64_t v89 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          if ((v87 & 1) != (v90 & 1)) {
            goto LABEL_250;
          }
          unint64_t v86 = v89;
        }
        uint64_t v91 = *(void **)&v235[0];
        v233 = *(void **)&v235[0];
        if ((v87 & 1) == 0)
        {
          *(void *)(*(void *)&v235[0] + 8 * (v86 >> 6) + 64) |= 1 << v86;
          uint64_t v92 = (uint64_t *)(v91[6] + 16 * v86);
          *uint64_t v92 = v20;
          v92[1] = v21;
          outlined init with take of Any(&v236, (_OWORD *)(v91[7] + 32 * v86));
          uint64_t v93 = v91[2];
          BOOL v16 = __OFADD__(v93, 1);
          uint64_t v94 = v93 + 1;
          uint64_t v95 = v230;
          if (v16) {
            goto LABEL_242;
          }
LABEL_106:
          v91[2] = v94;
          swift_bridgeObjectRetain();
          int64_t v6 = v231;
          goto LABEL_107;
        }
        goto LABEL_104;
      }
      Swift::String v96 = String.lowercased()();
      swift_bridgeObjectRelease();
      BOOL v97 = v96._countAndFlagsBits == 97 && v96._object == (void *)0xE100000000000000;
      if (v97 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v239 = &type metadata for Int;
        *(void *)&long long v238 = 1;
        outlined init with take of Any(&v238, &v236);
        char v98 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v235[0] = v233;
        unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
        uint64_t v101 = v233[2];
        BOOL v102 = (v100 & 1) == 0;
        Swift::Int v103 = v101 + v102;
        if (__OFADD__(v101, v102)) {
          goto LABEL_241;
        }
        unint64_t v86 = v99;
        char v104 = v100;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        Swift::Bool v105 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v98, v103);
        uint64_t v7 = v227;
        unint64_t v12 = v232;
        if (v105)
        {
          unint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          if ((v104 & 1) != (v107 & 1)) {
            goto LABEL_250;
          }
          unint64_t v86 = v106;
        }
        uint64_t v91 = *(void **)&v235[0];
        v233 = *(void **)&v235[0];
        if ((v104 & 1) == 0)
        {
          *(void *)(*(void *)&v235[0] + 8 * (v86 >> 6) + 64) |= 1 << v86;
          uint64_t v109 = (uint64_t *)(v91[6] + 16 * v86);
          *uint64_t v109 = v20;
          v109[1] = v21;
          outlined init with take of Any(&v236, (_OWORD *)(v91[7] + 32 * v86));
          uint64_t v110 = v91[2];
          BOOL v16 = __OFADD__(v110, 1);
          uint64_t v94 = v110 + 1;
          uint64_t v95 = v230;
          if (v16) {
            goto LABEL_243;
          }
          goto LABEL_106;
        }
LABEL_104:
        uint64_t v108 = (_OWORD *)(v91[7] + 32 * v86);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v108);
        outlined init with take of Any(&v236, v108);
        uint64_t v95 = v230;
        int64_t v6 = v231;
LABEL_107:

        swift_bridgeObjectRelease();
LABEL_108:
        swift_bridgeObjectRelease();
        unint64_t v9 = v228;
      }
      else
      {
        BOOL v111 = v96._countAndFlagsBits == 6647407 && v96._object == (void *)0xE300000000000000;
        if (v111 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v239 = &type metadata for Int;
          *(void *)&long long v238 = 1;
          outlined init with take of Any(&v238, &v236);
          char v112 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v235[0] = v233;
          unint64_t v113 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          uint64_t v115 = v233[2];
          BOOL v116 = (v114 & 1) == 0;
          Swift::Int v117 = v115 + v116;
          if (__OFADD__(v115, v116)) {
            goto LABEL_244;
          }
          unint64_t v86 = v113;
          char v118 = v114;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
          Swift::Bool v119 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v112, v117);
          uint64_t v7 = v227;
          unint64_t v12 = v232;
          if (v119)
          {
            unint64_t v120 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            if ((v118 & 1) != (v121 & 1)) {
              goto LABEL_250;
            }
            unint64_t v86 = v120;
          }
          uint64_t v91 = *(void **)&v235[0];
          v233 = *(void **)&v235[0];
          if ((v118 & 1) == 0)
          {
            *(void *)(*(void *)&v235[0] + 8 * (v86 >> 6) + 64) |= 1 << v86;
            v122 = (uint64_t *)(v91[6] + 16 * v86);
            uint64_t *v122 = v20;
            v122[1] = v21;
            outlined init with take of Any(&v236, (_OWORD *)(v91[7] + 32 * v86));
            uint64_t v123 = v91[2];
            BOOL v16 = __OFADD__(v123, 1);
            uint64_t v94 = v123 + 1;
            uint64_t v95 = v230;
            if (v16) {
              goto LABEL_245;
            }
            goto LABEL_106;
          }
          goto LABEL_104;
        }
        BOOL v124 = v96._countAndFlagsBits == 7305076 && v96._object == (void *)0xE300000000000000;
        if (v124 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v239 = &type metadata for Int;
          *(void *)&long long v238 = 2;
          outlined init with take of Any(&v238, &v236);
          char v125 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v235[0] = v233;
          unint64_t v126 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          uint64_t v128 = v233[2];
          BOOL v129 = (v127 & 1) == 0;
          Swift::Int v130 = v128 + v129;
          if (__OFADD__(v128, v129)) {
            goto LABEL_246;
          }
          unint64_t v86 = v126;
          char v131 = v127;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
          Swift::Bool v132 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v125, v130);
          uint64_t v7 = v227;
          unint64_t v12 = v232;
          if (v132)
          {
            unint64_t v133 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            if ((v131 & 1) != (v134 & 1)) {
              goto LABEL_250;
            }
            unint64_t v86 = v133;
          }
          uint64_t v91 = *(void **)&v235[0];
          v233 = *(void **)&v235[0];
          if ((v131 & 1) == 0)
          {
            *(void *)(*(void *)&v235[0] + 8 * (v86 >> 6) + 64) |= 1 << v86;
            v135 = (uint64_t *)(v91[6] + 16 * v86);
            uint64_t *v135 = v20;
            v135[1] = v21;
            outlined init with take of Any(&v236, (_OWORD *)(v91[7] + 32 * v86));
            uint64_t v136 = v91[2];
            BOOL v16 = __OFADD__(v136, 1);
            uint64_t v94 = v136 + 1;
            uint64_t v95 = v230;
            if (v16)
            {
              __break(1u);
LABEL_247:
              __break(1u);
LABEL_248:
              __break(1u);
LABEL_249:
              __break(1u);
LABEL_250:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
LABEL_251:
              __break(1u);
LABEL_252:
              __break(1u);
LABEL_253:
              __break(1u);
LABEL_254:
              __break(1u);
LABEL_255:
              __break(1u);
LABEL_256:
              __break(1u);
              return;
            }
            goto LABEL_106;
          }
          goto LABEL_104;
        }
        BOOL v137 = v96._countAndFlagsBits == 0x6565726874 && v96._object == (void *)0xE500000000000000;
        if (v137 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v239 = &type metadata for Int;
          *(void *)&long long v238 = 3;
          outlined init with take of Any(&v238, &v236);
          char v138 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v235[0] = v233;
          unint64_t v139 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          uint64_t v141 = v233[2];
          BOOL v142 = (v140 & 1) == 0;
          Swift::Int v143 = v141 + v142;
          if (__OFADD__(v141, v142)) {
            goto LABEL_247;
          }
          unint64_t v86 = v139;
          char v144 = v140;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
          Swift::Bool v145 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v138, v143);
          uint64_t v7 = v227;
          unint64_t v12 = v232;
          if (v145)
          {
            unint64_t v146 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            if ((v144 & 1) != (v147 & 1)) {
              goto LABEL_250;
            }
            unint64_t v86 = v146;
          }
          uint64_t v91 = *(void **)&v235[0];
          v233 = *(void **)&v235[0];
          if ((v144 & 1) == 0)
          {
            *(void *)(*(void *)&v235[0] + 8 * (v86 >> 6) + 64) |= 1 << v86;
            v148 = (uint64_t *)(v91[6] + 16 * v86);
            uint64_t *v148 = v20;
            v148[1] = v21;
            outlined init with take of Any(&v236, (_OWORD *)(v91[7] + 32 * v86));
            uint64_t v149 = v91[2];
            BOOL v16 = __OFADD__(v149, 1);
            uint64_t v94 = v149 + 1;
            uint64_t v95 = v230;
            if (v16) {
              goto LABEL_248;
            }
            goto LABEL_106;
          }
          goto LABEL_104;
        }
        BOOL v150 = v96._countAndFlagsBits == 1920298854 && v96._object == (void *)0xE400000000000000;
        if (v150 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v239 = &type metadata for Int;
          *(void *)&long long v238 = 4;
          outlined init with take of Any(&v238, &v236);
          char v151 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v235[0] = v233;
          unint64_t v152 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          uint64_t v154 = v233[2];
          BOOL v155 = (v153 & 1) == 0;
          Swift::Int v156 = v154 + v155;
          if (__OFADD__(v154, v155)) {
            goto LABEL_249;
          }
          unint64_t v157 = v152;
          char v158 = v153;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v151, v156))
          {
            unint64_t v159 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            if ((v158 & 1) != (v160 & 1)) {
              goto LABEL_250;
            }
            unint64_t v157 = v159;
          }
          v161 = *(void **)&v235[0];
          v233 = *(void **)&v235[0];
          if (v158)
          {
            v162 = (_OWORD *)(*(void *)(*(void *)&v235[0] + 56) + 32 * v157);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v162);
            outlined init with take of Any(&v236, v162);
          }
          else
          {
            *(void *)(*(void *)&v235[0] + 8 * (v157 >> 6) + 64) |= 1 << v157;
            v163 = (uint64_t *)(v161[6] + 16 * v157);
            uint64_t *v163 = v20;
            v163[1] = v21;
            outlined init with take of Any(&v236, (_OWORD *)(v161[7] + 32 * v157));
            uint64_t v164 = v161[2];
            BOOL v16 = __OFADD__(v164, 1);
            uint64_t v165 = v164 + 1;
            if (v16) {
              goto LABEL_251;
            }
            v161[2] = v165;
            swift_bridgeObjectRetain();
          }
          uint64_t v7 = v227;
          unint64_t v12 = v232;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int64_t v6 = v231;
          unint64_t v9 = v228;
        }
        else
        {
          BOOL v166 = v96._countAndFlagsBits == 1702259046 && v96._object == (void *)0xE400000000000000;
          if (v166 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v239 = &type metadata for Int;
            *(void *)&long long v238 = 5;
            outlined init with take of Any(&v238, &v236);
            char v167 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v235[0] = v233;
            unint64_t v168 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            uint64_t v170 = v233[2];
            BOOL v171 = (v169 & 1) == 0;
            Swift::Int v172 = v170 + v171;
            if (__OFADD__(v170, v171)) {
              goto LABEL_252;
            }
            goto LABEL_168;
          }
          BOOL v178 = v96._countAndFlagsBits == 7891315 && v96._object == (void *)0xE300000000000000;
          if (v178 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v239 = &type metadata for Int;
            *(void *)&long long v238 = 6;
            outlined init with take of Any(&v238, &v236);
            char v167 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v235[0] = v233;
            unint64_t v168 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            uint64_t v179 = v233[2];
            BOOL v180 = (v169 & 1) == 0;
            Swift::Int v172 = v179 + v180;
            if (__OFADD__(v179, v180)) {
              goto LABEL_253;
            }
            goto LABEL_168;
          }
          BOOL v181 = v96._countAndFlagsBits == 0x6E65766573 && v96._object == (void *)0xE500000000000000;
          if (v181 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v239 = &type metadata for Int;
            *(void *)&long long v238 = 7;
            outlined init with take of Any(&v238, &v236);
            char v167 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v235[0] = v233;
            unint64_t v168 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            uint64_t v182 = v233[2];
            BOOL v183 = (v169 & 1) == 0;
            Swift::Int v172 = v182 + v183;
            if (__OFADD__(v182, v183)) {
              goto LABEL_254;
            }
            goto LABEL_168;
          }
          BOOL v184 = v96._countAndFlagsBits == 0x7468676965 && v96._object == (void *)0xE500000000000000;
          if (v184 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v239 = &type metadata for Int;
            *(void *)&long long v238 = 8;
            outlined init with take of Any(&v238, &v236);
            char v167 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v235[0] = v233;
            unint64_t v168 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            uint64_t v185 = v233[2];
            BOOL v186 = (v169 & 1) == 0;
            Swift::Int v172 = v185 + v186;
            if (__OFADD__(v185, v186)) {
              goto LABEL_255;
            }
            goto LABEL_168;
          }
          BOOL v187 = v96._countAndFlagsBits == 1701734766 && v96._object == (void *)0xE400000000000000;
          if (v187 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v239 = &type metadata for Int;
            *(void *)&long long v238 = 9;
            outlined init with take of Any(&v238, &v236);
            char v167 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v235[0] = v233;
            unint64_t v168 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
            uint64_t v188 = v233[2];
            BOOL v189 = (v169 & 1) == 0;
            Swift::Int v172 = v188 + v189;
            if (__OFADD__(v188, v189)) {
              goto LABEL_256;
            }
LABEL_168:
            unint64_t v173 = v168;
            char v174 = v169;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
            if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v167, v172))
            {
              unint64_t v175 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
              if ((v174 & 1) != (v176 & 1)) {
                goto LABEL_250;
              }
              unint64_t v173 = v175;
            }
            v233 = *(void **)&v235[0];
            if (v174)
            {
              v177 = (_OWORD *)(*(void *)(*(void *)&v235[0] + 56) + 32 * v173);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v177);
              outlined init with take of Any(&v236, v177);
            }
            else
            {
              specialized _NativeDictionary._insert(at:key:value:)(v173, v20, v21, &v236, *(void **)&v235[0]);
              swift_bridgeObjectRetain();
            }
LABEL_174:

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_71;
          }
          if (v96._countAndFlagsBits == 7234932 && v96._object == (void *)0xE300000000000000)
          {
            swift_bridgeObjectRelease();
LABEL_218:
            swift_bridgeObjectRelease();
            v239 = &type metadata for Int;
            *(void *)&long long v238 = 10;
            outlined init with take of Any(&v238, &v236);
            swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v235[0] = v233;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
            v233 = *(void **)&v235[0];
            goto LABEL_174;
          }
          char v191 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v191) {
            goto LABEL_218;
          }
          if (one-time initialization token for voiceCommands != -1) {
            swift_once();
          }
          uint64_t v192 = type metadata accessor for Logger();
          __swift_project_value_buffer(v192, (uint64_t)static Logger.voiceCommands);
          v193 = Logger.logObject.getter();
          os_log_type_t v194 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v193, v194))
          {
            v195 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v195 = 0;
            _os_log_impl(&dword_0, v193, v194, "Rudimentary conversion of #s 1-10 are supported, Custom NL models will do the conversion in the future", v195, 2u);
            swift_slowDealloc();
          }

          swift_bridgeObjectRetain();
          uint64_t v196 = static Transformer<>.convertAllOtherParams(attribute:parameter:values:)(v230, v20, v21, v22);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v197 = specialized Dictionary.merging(_:uniquingKeysWith:)(v196, (uint64_t)v233);
          swift_bridgeObjectRelease();

          v233 = (void *)v197;
LABEL_71:
          uint64_t v7 = v227;
          unint64_t v9 = v228;
          int64_t v6 = v231;
          unint64_t v12 = v232;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
  }
  long long v25 = 0;
LABEL_38:
  uint64_t v26 = v233;
  swift_bridgeObjectRetain();
  v229 = v25;
  uint64_t v43 = static Transformer<>.convertAllOtherParams(attribute:parameter:values:)(v25, v20, v21, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  specialized LazyMapSequence.makeIterator()(v43, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, &v238);
  swift_bridgeObjectRetain();
  specialized LazyMapSequence.Iterator.next()(&v236);
  uint64_t v45 = *((void *)&v236 + 1);
  if (!*((void *)&v236 + 1)) {
    goto LABEL_69;
  }
  uint64_t v30 = (uint64_t)v233;
  while (2)
  {
    uint64_t v46 = v236;
    outlined init with take of Any(v237, v235);
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v45);
    uint64_t v48 = *(void *)(v30 + 16);
    BOOL v49 = (v47 & 1) == 0;
    uint64_t v50 = v48 + v49;
    if (__OFADD__(v48, v49))
    {
      __break(1u);
      goto LABEL_229;
    }
    char v51 = v47;
    if (*(void *)(v30 + 24) >= v50)
    {
      if (v44)
      {
        if ((v47 & 1) == 0) {
          goto LABEL_49;
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        _NativeDictionary.copy()();
        if ((v51 & 1) == 0) {
          goto LABEL_49;
        }
      }
      goto LABEL_47;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, v44 & 1);
    unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v45);
    if ((v51 & 1) != (v53 & 1)) {
      goto LABEL_250;
    }
    unint64_t v9 = v52;
    if (v51)
    {
LABEL_47:
      uint64_t v30 = (uint64_t)v233;
      outlined init with take of Any(v235, v234);
      swift_bridgeObjectRelease();
      Swift::Int v54 = (_OWORD *)(v233[7] + 32 * v9);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v54);
      outlined init with take of Any(v234, v54);
      goto LABEL_51;
    }
LABEL_49:
    uint64_t v30 = (uint64_t)v233;
    v233[(v9 >> 6) + 8] |= 1 << v9;
    unint64_t v55 = (uint64_t *)(v233[6] + 16 * v9);
    *unint64_t v55 = v46;
    v55[1] = v45;
    outlined init with take of Any(v235, (_OWORD *)(v233[7] + 32 * v9));
    uint64_t v56 = v233[2];
    BOOL v16 = __OFADD__(v56, 1);
    uint64_t v57 = v56 + 1;
    if (!v16)
    {
      v233[2] = v57;
LABEL_51:
      specialized LazyMapSequence.Iterator.next()(&v236);
      uint64_t v45 = *((void *)&v236 + 1);
      char v44 = 1;
      if (!*((void *)&v236 + 1)) {
        goto LABEL_70;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_233:
  __break(1u);
LABEL_234:
  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  swift_once();
LABEL_220:
  uint64_t v198 = type metadata accessor for Logger();
  __swift_project_value_buffer(v198, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  v199 = Logger.logObject.getter();
  os_log_type_t v200 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v199, v200))
  {
    v201 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v238 = swift_slowAlloc();
    *(_DWORD *)v201 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    uint64_t v202 = Dictionary.description.getter();
    *(void *)&long long v236 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v202, v203, (uint64_t *)&v238);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    unint64_t v9 = v228;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v199, v200, "Creating custom intent with parameters converted from custom USOGraph: %s", v201, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v204 = self;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&long long v236 = 0;
  id v206 = [v204 dataWithJSONObject:isa options:1 error:&v236];

  id v207 = (id)v236;
  if (v206)
  {
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v208;

    v223();
    NSString v209 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v210 = Data._bridgeToObjectiveC()().super.isa;
    id v211 = (id)INIntentCreate();

    if (v211)
    {
      v212 = *(uint64_t (**)(void))(*(void *)v13 + 112);
      uint64_t v213 = v212();
      outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v213, v214, v211, (SEL *)&selRef__setLaunchId_);
      id v215 = [v211 _metadata];
      if (v215)
      {
        v216 = v215;
        uint64_t v217 = v212();
        outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v217, v218, v216, (SEL *)&selRef_setLaunchId_);

        outlined consume of Data._Representation(v30, v43);
      }
      else
      {

        outlined consume of Data._Representation(v30, v43);
      }
      void *v222 = v211;
    }
    else
    {
LABEL_229:
      uint64_t v220 = type metadata accessor for TransformationError();
      lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
      swift_allocError();
      void *v221 = 0xD000000000000030;
      v221[1] = 0x8000000000229F70;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v220 - 8) + 104))(v221, enum case for TransformationError.cannotTransform(_:), v220);
      swift_willThrow();

      outlined consume of Data._Representation(v30, v43);
    }
  }
  else
  {
    v219 = v207;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t static Transformer<>.convertCustomObject(attribute:parameter:values:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v25 = v6;
  if (a1)
  {
    if ([a1 valueType] == (char *)&stru_B8.size + 1)
    {
      self;
      if (swift_dynamicCastObjCClass())
      {
        specialized Collection.first.getter(a4, &v22);
        if (v23)
        {
          outlined init with take of Any(&v22, v24);
          id v7 = a1;
          if (INCodableAttribute.supportsMultipleValues.getter())
          {
            uint64_t v8 = *(void *)(a4 + 16);
            if (v8)
            {
              uint64_t v9 = a4 + 32;
              swift_bridgeObjectRetain();
              uint64_t v10 = _swiftEmptyArrayStorage;
              do
              {
                outlined init with copy of Any(v9, (uint64_t)&v22);
                if (swift_dynamicCast())
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String?)>);
                  uint64_t inited = swift_initStackObject();
                  *(_OWORD *)(inited + 16) = xmmword_212160;
                  strcpy((char *)(inited + 32), "displayString");
                  *(_WORD *)(inited + 46) = -4864;
                  *(void *)(inited + 48) = v20;
                  *(void *)(inited + 56) = v21;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
                  uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, (uint64_t)v10);
                    uint64_t v10 = v15;
                  }
                  unint64_t v14 = v10[2];
                  unint64_t v13 = v10[3];
                  if (v14 >= v13 >> 1)
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, (uint64_t)v10);
                    uint64_t v10 = v16;
                  }
                  v10[2] = v14 + 1;
                  v10[v14 + 4] = v12;
                }
                v9 += 32;
                --v8;
              }
              while (v8);
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v10 = _swiftEmptyArrayStorage;
            }
            uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String?]]);
            *(void *)&long long v22 = v10;
            swift_bridgeObjectRetain();
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
            uint64_t v17 = swift_initStackObject();
            *(_OWORD *)(v17 + 16) = xmmword_212160;
            strcpy((char *)(v17 + 32), "displayString");
            *(_WORD *)(v17 + 46) = -4864;
            outlined init with copy of Any((uint64_t)v24, v17 + 48);
            swift_bridgeObjectRetain();
            uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
            uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
            *(void *)&long long v22 = v18;
          }
          specialized Dictionary.subscript.setter((uint64_t)&v22);

          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
          return v25;
        }
        else
        {
          outlined destroy of URL?((uint64_t)&v22, &demangling cache variable for type metadata for Any?);
        }
      }
    }
  }
  return v6;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t static Transformer<>.convertEnum(attribute:parameter:values:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = Dictionary.init(dictionaryLiteral:)();
  if (!a1) {
    return v32;
  }
  if ([a1 valueType] != (char *)&stru_20.vmsize + 1) {
    return v32;
  }
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  if (!v6) {
    return v32;
  }
  id v7 = (void *)v6;
  id v8 = a1;
  if ((INCodableAttribute.supportsMultipleValues.getter() & 1) == 0)
  {
    specialized Collection.first.getter(a4, &v30);
    if (!*((void *)&v31 + 1))
    {

      outlined destroy of URL?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
      return v32;
    }
    if (swift_dynamicCast())
    {
      long long v30 = v29;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      Swift::String v23 = String.lowercased()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v24 = outlined bridged method (mbnn) of @objc INCodableEnumAttribute.value(withName:)(v23._countAndFlagsBits, (uint64_t)v23._object, v7);
      if (v24)
      {
        uint64_t v25 = v24;
        uint64_t v26 = outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(v24);
        if (v27)
        {
          *((void *)&v31 + 1) = &type metadata for String;
          *(void *)&long long v30 = v26;
          *((void *)&v30 + 1) = v27;
        }
        else
        {
          long long v30 = 0u;
          long long v31 = 0u;
        }
        swift_bridgeObjectRetain();
        specialized Dictionary.subscript.setter((uint64_t)&v30);
      }
    }
LABEL_24:

    return v32;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (!v9)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
LABEL_23:
    *((void *)&v31 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *(void *)&long long v30 = v11;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v30);
    goto LABEL_24;
  }
  uint64_t v28 = v7;
  uint64_t v10 = a4 + 32;
  swift_bridgeObjectRetain();
  uint64_t v11 = _swiftEmptyArrayStorage;
  while (1)
  {
    outlined init with copy of Any(v10, (uint64_t)&v30);
    if (swift_dynamicCast())
    {
      long long v30 = v29;
      *(void *)&long long v29 = 32;
      *((void *)&v29 + 1) = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      Swift::String v12 = String.lowercased()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v13 = outlined bridged method (mbnn) of @objc INCodableEnumAttribute.value(withName:)(v12._countAndFlagsBits, (uint64_t)v12._object, v28);
      if (v13) {
        break;
      }
    }
LABEL_15:
    v10 += 32;
    if (!--v9)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  unint64_t v14 = v13;
  uint64_t result = outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(v13);
  if (v16)
  {
    uint64_t v17 = result;
    uint64_t v18 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v11 = v21;
    }
    unint64_t v19 = v11[2];
    if (v19 >= v11[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v11 = v22;
    }
    v11[2] = v19 + 1;
    uint64_t v20 = &v11[2 * v19];
    v20[4] = v17;
    v20[5] = v18;

    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t static Transformer<>.convertAllOtherParams(attribute:parameter:values:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = Dictionary.init(dictionaryLiteral:)();
  if (a1)
  {
    id v6 = a1;
    if (INCodableAttribute.supportsMultipleValues.getter())
    {
      uint64_t v7 = *(void *)(a4 + 16);
      if (v7)
      {
        id v18 = v6;
        uint64_t v8 = a4 + 32;
        swift_bridgeObjectRetain();
        uint64_t v9 = _swiftEmptyArrayStorage;
        do
        {
          outlined init with copy of Any(v8, (uint64_t)&v20);
          if (swift_dynamicCast())
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v9 = v11;
            }
            unint64_t v10 = v9[2];
            if (v10 >= v9[3] >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v9 = v12;
            }
            v9[2] = v10 + 1;
            *(_OWORD *)&v9[2 * v10 + 4] = v19;
          }
          v8 += 32;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        id v6 = v18;
      }
      else
      {
        uint64_t v9 = _swiftEmptyArrayStorage;
      }
      uint64_t v21 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      *(void *)&long long v20 = v9;
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.setter((uint64_t)&v20);

      return v22;
    }
  }
  specialized Collection.first.getter(a4, &v20);
  if (v21)
  {
    if (swift_dynamicCast())
    {
      uint64_t v21 = &type metadata for String;
      long long v20 = v19;
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.setter((uint64_t)&v20);
      return v22;
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "Not all parameter types are supported in custom NL -> INIntent conversion.", v16, 2u);
    swift_slowDealloc();
  }

  return v22;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    BOOL v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      long long v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      uint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * i);
      if (a2)
      {
        outlined init with take of Any(v22, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v22, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) == 0)
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v23) >> 6;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          BOOL v29 = v25 == v28;
          if (v25 == v28) {
            unint64_t v25 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v25);
          if (v30 != -1)
          {
            unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_31:
      *(void *)(v11 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      long long v31 = (void *)(*(void *)(v7 + 48) + 16 * v26);
      *long long v31 = v21;
      v31[1] = v20;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v26));
      ++*(void *)(v7 + 16);
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v16 >= v33) {
        goto LABEL_33;
      }
      unint64_t v17 = v34[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v33) {
          goto LABEL_33;
        }
        unint64_t v17 = v34[v13];
        if (!v17)
        {
          int64_t v18 = v16 + 2;
          if (v18 >= v33)
          {
LABEL_33:
            swift_release();
            uint64_t v3 = v2;
            if (a2)
            {
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v32 + 63) >> 6, v34);
              }
              else {
                *BOOL v34 = -1 << v32;
              }
              *(void *)(v5 + 16) = 0;
            }
            break;
          }
          unint64_t v17 = v34[v18];
          if (!v17)
          {
            while (1)
            {
              int64_t v13 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_41;
              }
              if (v13 >= v33) {
                goto LABEL_33;
              }
              unint64_t v17 = v34[v13];
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          int64_t v13 = v18;
        }
      }
LABEL_18:
      unint64_t v10 = (v17 - 1) & v17;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t type metadata accessor for UsoVoiceCommandsCustomTask()
{
  return self;
}

unint64_t type metadata accessor for INIntent()
{
  unint64_t result = lazy cache variable for type metadata for INIntent;
  if (!lazy cache variable for type metadata for INIntent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntent);
  }
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)((uint64_t)(a2 + 2), *a1, a1[1], (uint64_t)(a1 + 2));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  specialized LazyMapSequence.makeIterator()(a1, a2, a3, &v29);
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v27);
  uint64_t v7 = *((void *)&v27 + 1);
  if (!*((void *)&v27 + 1))
  {
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : DMFPolicy].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    uint64_t v8 = v27;
    outlined init with take of Any(&v28, v26);
    uint64_t v9 = *a5;
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    uint64_t v12 = *(void *)(v9 + 16);
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13)) {
      break;
    }
    char v15 = v10;
    if (*(void *)(v9 + 24) >= v14)
    {
      if (a4)
      {
        if (v10) {
          goto LABEL_9;
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        _NativeDictionary.copy()();
        if (v15) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a4 & 1);
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_17;
      }
      unint64_t v11 = v16;
      if (v15)
      {
LABEL_9:
        outlined init with copy of Any((uint64_t)v26, (uint64_t)v25);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
        swift_bridgeObjectRelease();
        int64_t v18 = (_OWORD *)(*(void *)(*a5 + 56) + 32 * v11);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
        outlined init with take of Any(v25, v18);
        goto LABEL_13;
      }
    }
    long long v19 = (void *)*a5;
    *(void *)(*a5 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v20 = (uint64_t *)(v19[6] + 16 * v11);
    *uint64_t v20 = v8;
    v20[1] = v7;
    outlined init with take of Any(v26, (_OWORD *)(v19[7] + 32 * v11));
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_16;
    }
    v19[2] = v23;
LABEL_13:
    specialized LazyMapSequence.Iterator.next()(&v27);
    uint64_t v7 = *((void *)&v27 + 1);
    a4 = 1;
    if (!*((void *)&v27 + 1)) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    unint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v18 < v15)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *Swift::String v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  long long v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: String, value: Any)?((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return outlined destroy of URL?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_0_31()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So014SASTColumnDatajL0Cs5NeverOTg504_s18def51Plugin28WorkflowWatchSnippetProviderC38cardSectionsi98DetailedSelectionItems33_61898FA910B453E41DDA86F87FAE1D1CLL014disambiguationN011appBundleIdSaySo22mnjl9CGSayAA08h3K22jkL15VG_SStFAiLXEfU_SSTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (void **)(a1 + 80);
    while (1)
    {
      int64_t v5 = *(v4 - 5);
      uint64_t v6 = (uint64_t)*(v4 - 4);
      uint64_t v7 = (uint64_t)*(v4 - 3);
      unint64_t v8 = *(v4 - 2);
      uint64_t v9 = (uint64_t)*(v4 - 1);
      unint64_t v10 = *v4;
      *(void *)&long long v14 = *(v4 - 6);
      *((void *)&v14 + 1) = v5;
      uint64_t v15 = v6;
      uint64_t v16 = v7;
      int64_t v17 = v8;
      uint64_t v18 = v9;
      long long v19 = v10;
      id v11 = v8;
      swift_bridgeObjectRetain();
      id v12 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in WorkflowWatchSnippetProvider.cardSectionsFromDetailedSelectionItems(disambiguationItems:appBundleId:)(&v14, &v20);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v1) {
        break;
      }
      v4 += 7;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!--v2)
      {
        int64_t v5 = v21;
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v5;
}

uint64_t WorkflowWatchSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowWatchSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:));
}

uint64_t WorkflowWatchSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)()
{
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = (void *)v0[2];
  uint64_t v5 = v0[3];
  id v6 = [objc_allocWithZone((Class)SAAppsLaunchApp) init];
  v0[8] = v6;
  outlined bridged method (mbgnn) of @objc SAAppsLaunchApp.launchId.setter(v2, v1, v6);
  id v7 = v6;
  v0[9] = specialized WorkflowWatchSnippetProvider.makeItemGroup(command:title:appBundleId:)((uint64_t)v7, v5, v3, v2, v1);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v8 = swift_allocObject();
  v0[10] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_212170;
  id v9 = [v4 okButton];
  id v10 = [v9 title];

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = v13;
  id v14 = [v4 cancelButton];
  uint64_t v15 = v14;
  if (v14)
  {
    id v16 = [v14 title];

    uint64_t v15 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;
  }
  else
  {
    unint64_t v18 = 0xE000000000000000;
  }
  uint64_t v19 = v0[7];
  *(void *)(v8 + 48) = v15;
  *(void *)(v8 + 56) = v18;
  unint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v19 + 168)
                                                          + **(int **)(*(void *)v19 + 168));
  uint64_t v20 = (void *)swift_task_alloc();
  v0[11] = v20;
  *uint64_t v20 = v0;
  v20[1] = WorkflowWatchSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:);
  uint64_t v21 = v0[6];
  uint64_t v22 = v0[5];
  return v24(v8, v22, v21);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *(void *)(v6 + 96) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t result;
  uint64_t v3;
  id v4;
  uint64_t v5;
  SEL *v6;
  id v7;
  id v8;
  char v9;
  uint64_t *v10;
  void *v11;
  id v12;
  uint64_t *v13;
  void *v14;
  __n128 *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = v0;
  uint64_t v1 = *(void **)(v0 + 96);
  if (v1)
  {
    uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyText.getter(*(void **)(v0 + 96));
    if (v3)
    {
      uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyCommands.getter(v1);
      if (result)
      {
        uint64_t v4 = OUTLINED_FUNCTION_4_37();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmText.getter(v1);
        if (v5)
        {
          uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmCommands.getter(v1);
          if (result)
          {
            id v6 = *(SEL **)(v0 + 72);
            id v7 = OUTLINED_FUNCTION_4_37();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v8 = v7;
            uint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v6);
            unint64_t v18 = result;
            if (result)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              OUTLINED_FUNCTION_3_33();
              if (v9) {
                OUTLINED_FUNCTION_1_32();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              id v10 = &v18;
              specialized Array._endMutation()();
              if (v18)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
                OUTLINED_FUNCTION_10_32();
                OUTLINED_FUNCTION_12_34();
              }
              else
              {
                id v10 = 0;
              }
              uint64_t v11 = *(void **)(v0 + 72);
              OUTLINED_FUNCTION_9_36();

              uint64_t v12 = v4;
              uint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v11);
              unint64_t v18 = result;
              if (result)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                OUTLINED_FUNCTION_3_33();
                if (v9) {
                  OUTLINED_FUNCTION_1_32();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                uint64_t v13 = &v18;
                specialized Array._endMutation()();
                if (v18)
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
                  OUTLINED_FUNCTION_10_32();
                  OUTLINED_FUNCTION_12_34();
                }
                else
                {
                  uint64_t v13 = 0;
                }
                objc_msgSend(*(id *)(v0 + 72), v6[413], v13);

                goto LABEL_19;
              }
LABEL_27:
              __break(1u);
              return result;
            }
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_19:
  id v14 = *(void **)(v0 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_13_30(v15, (__n128)xmmword_211C70);

  id v16 = OUTLINED_FUNCTION_11_4();
  return v17(v16);
}

uint64_t WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[9] = v2;
  v1[10] = v0;
  v1[7] = v3;
  v1[8] = v4;
  v1[5] = v5;
  v1[6] = v6;
  type metadata accessor for CATOption();
  v1[11] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = [v1 interaction];
  uint64_t v3 = [v2 intent];
  v0[12] = v3;

  uint64_t v4 = [v1 interaction];
  uint64_t v5 = [v4 intentResponse];
  v0[13] = v5;

  uint64_t v6 = (void *)swift_task_alloc();
  v0[14] = v6;
  *uint64_t v6 = v0;
  v6[1] = WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
  return WorkflowWatchSnippetProvider.makeIntentSnippet(intent:intentResponse:shortcutName:)((uint64_t)v3, (uint64_t)v5);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 120) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v12;
  uint64_t (*v13)(void *);
  uint64_t v14;

  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = *(void **)(v0 + 96);
    uint64_t v2 = *(void *)(v0 + 80);
    type metadata accessor for RunVoiceCommandCATs();
    static CATOption.defaultMode.getter();
    uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for CATButtonLabelTemplating();
    uint64_t inited = swift_initStackObject();
    *(void *)(v0 + 128) = inited;
    *(void *)(inited + 16) = v3;
    uint64_t v5 = v2 + 16;
    uint64_t v6 = [v1 verb];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    *(void *)(v0 + 136) = v9;
    id v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v10;
    *id v10 = v0;
    v10[1] = WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
    return CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:)(v5, v7, v9);
  }
  else
  {
    uint64_t v12 = *(void **)(v0 + 96);

    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void *))(v0 + 8);
    return v13(_swiftEmptyArrayStorage);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *(void *)(v6 + 168) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t result;
  uint64_t v3;
  id v4;
  uint64_t v5;
  SEL *v6;
  id v7;
  id v8;
  char v9;
  uint64_t *v10;
  void *v11;
  id v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = v0;
  uint64_t v1 = *(void **)(v0 + 168);
  if (v1)
  {
    uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyText.getter(*(void **)(v0 + 168));
    if (v3)
    {
      uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyCommands.getter(v1);
      if (result)
      {
        uint64_t v4 = OUTLINED_FUNCTION_4_37();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmText.getter(v1);
        if (v5)
        {
          uint64_t result = outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmCommands.getter(v1);
          if (result)
          {
            uint64_t v6 = *(SEL **)(v0 + 120);
            uint64_t v7 = OUTLINED_FUNCTION_4_37();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v8 = v7;
            uint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v6);
            uint64_t v19 = result;
            if (result)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              OUTLINED_FUNCTION_3_33();
              if (v9) {
                OUTLINED_FUNCTION_1_32();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              id v10 = &v19;
              specialized Array._endMutation()();
              if (v19)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
                OUTLINED_FUNCTION_10_32();
                OUTLINED_FUNCTION_12_34();
              }
              else
              {
                id v10 = 0;
              }
              uint64_t v11 = *(void **)(v0 + 120);
              OUTLINED_FUNCTION_9_36();

              uint64_t v12 = v4;
              uint64_t result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v11);
              uint64_t v19 = result;
              if (result)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                OUTLINED_FUNCTION_3_33();
                if (v9) {
                  OUTLINED_FUNCTION_1_32();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                uint64_t v13 = &v19;
                specialized Array._endMutation()();
                if (v19)
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
                  OUTLINED_FUNCTION_10_32();
                  OUTLINED_FUNCTION_12_34();
                }
                else
                {
                  uint64_t v13 = 0;
                }
                objc_msgSend(*(id *)(v0 + 120), v6[413], v13);

                goto LABEL_19;
              }
LABEL_27:
              __break(1u);
              return result;
            }
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_19:
  uint64_t v15 = *(void **)(v0 + 96);
  id v14 = *(void **)(v0 + 104);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  id v16 = (__n128 *)OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_13_30(v16, (__n128)xmmword_211C70);
  swift_setDeallocating();
  swift_release();

  swift_task_dealloc();
  unint64_t v17 = OUTLINED_FUNCTION_11_4();
  return v18(v17);
}

uint64_t WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = (void *)*v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  uint64_t v6 = v3[10];
  uint64_t v7 = (void *)*v1;
  *uint64_t v5 = *v1;
  v4[19] = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v6 + 168)
                                                          + **(int **)(*(void *)v6 + 168));
  uint64_t v8 = (void *)swift_task_alloc();
  v4[20] = v8;
  *uint64_t v8 = v7;
  v8[1] = WorkflowWatchSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
  uint64_t v9 = v3[9];
  uint64_t v10 = v3[8];
  return v12(a1, v10, v9);
}

uint64_t WorkflowWatchSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[3] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowWatchSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:));
}

uint64_t WorkflowWatchSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  unint64_t v2 = (unint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So014SASTColumnDatajL0Cs5NeverOTg504_s18def51Plugin28WorkflowWatchSnippetProviderC38cardSectionsi98DetailedSelectionItems33_61898FA910B453E41DDA86F87FAE1D1CLL014disambiguationN011appBundleIdSaySo22mnjl9CGSayAA08h3K22jkL15VG_SStFAiLXEfU_SSTf1cn_n(v1);
  id v3 = [objc_allocWithZone((Class)SASTItemGroup) init];
  swift_bridgeObjectRetain();
  if (v2 >> 62)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
    uint64_t v4 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    uint64_t v4 = v2;
  }
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v4, v3);
  [v3 setCanUseServerTTS:1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v5 + 16) = xmmword_211C70;
  *(void *)(v5 + 32) = v3;
  uint64_t v8 = v5;
  specialized Array._endMutation()();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v8);
}

Swift::Bool __swiftcall WorkflowWatchSnippetProvider.shouldShowSnippet(intent:)(INIntent intent)
{
  uint64_t v1 = (char *)[(objc_class *)intent.super.isa _intentCategory];
  return v1 != (unsigned char *)&dword_C + 2 && v1 != (unsigned char *)&dword_10 + 1;
}

void closure #1 in WorkflowWatchSnippetProvider.cardSectionsFromDetailedSelectionItems(disambiguationItems:appBundleId:)(long long *a1@<X0>, void *a2@<X8>)
{
  long long v2 = a1[1];
  long long v25 = *a1;
  long long v26 = v2;
  long long v27 = a1[2];
  uint64_t v28 = *((void *)a1 + 6);
  id v3 = [objc_allocWithZone((Class)SAUIDecoratedText) init];
  uint64_t v4 = specialized DisambiguationItemProtocol.toDisplayString()();
  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter(v4, v5, v3);
  id v6 = [objc_allocWithZone((Class)SASTCommandTemplateAction) init];
  uint64_t v21 = (void *)v27;
  id v7 = static SLFDisambiguationItemConverter.toDirectInvocationPayload(title:)(v25, *((uint64_t *)&v25 + 1));
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v24, v24[3]);
  uint64_t v8 = (void *)DeviceState.asInvocationContext.getter();
  [v8 setInputOrigin:SAInputOriginDialogButtonTapValue];
  uint64_t v9 = self;
  uint64_t v22 = v7;
  id v10 = [v9 runSiriKitExecutorCommandWithContext:v8 payload:v7];
  id v11 = [objc_allocWithZone((Class)SAIntentGroupSiriKitAppSelectionState) init];
  id v12 = [objc_allocWithZone((Class)SASyncAppIdentifyingInfo) init];
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 setBundleId:v13];

  [v11 setRequestedApp:v12];
  [v10 setAppSelectionState:v11];

  id v14 = [v9 wrapCommandInStartLocalRequest:v10];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_211C70;
  *(void *)(v15 + 32) = v14;
  v24[0] = v15;
  specialized Array._endMutation()();
  uint64_t v16 = v24[0];
  id v17 = v14;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v16, v6);
  id v18 = [objc_allocWithZone((Class)SASTColumnDataListItem) init];
  [v18 setTitle:v3];
  [v18 setAction:v6];
  if (v21)
  {
    id v19 = v21;
    id v20 = static OutputUtils.buildNanoImage(from:)(v19);
    [v18 setImageResource:v20];
  }
  *a2 = v18;
}

uint64_t WorkflowWatchSnippetProvider.makeIntentSnippet(intent:intentResponse:shortcutName:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowWatchSnippetProvider.makeIntentSnippet(intent:intentResponse:shortcutName:));
}

uint64_t WorkflowWatchSnippetProvider.makeIntentSnippet(intent:intentResponse:shortcutName:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#WorkflowWatchSnippetProvider building intents snippet", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 24);

  if (v5)
  {
    id v6 = *(void **)(v0 + 16);
    id v7 = *(id *)(v0 + 24);
    uint64_t v8 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v6);
    if (v9)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      id v12 = *(void **)(v0 + 16);
      type metadata accessor for App();
      swift_bridgeObjectRetain();
      App.__allocating_init(appIdentifier:)();
      type metadata accessor for SAIntentGroupLaunchAppWithIntent();
      id v13 = v7;
      id v14 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();

      static LocaleUtils.siriLanguageCode()();
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v16 = [v12 _titleForLanguage:v15];

      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      id v20 = v14;
      specialized WorkflowWatchSnippetProvider.makeItemGroup(command:title:appBundleId:)((uint64_t)v20, v17, v19, v10, v11);

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  uint64_t v21 = OUTLINED_FUNCTION_11_4();
  return v22(v21);
}

id WorkflowWatchSnippetProvider.makeBodyText(intentTitle:)(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)SAUIDecoratedText) init];
  outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(a1, a2, v4);
  id v5 = [objc_allocWithZone((Class)SASTLineDetailItem) init];
  [v5 setTitle:v4];

  return v5;
}

id WorkflowWatchSnippetProvider.getButtonItemForLabel(label:commands:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)SAUIDecoratedText) init];
  outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(a1, a2, v6);
  id v7 = [objc_allocWithZone((Class)SASTCommandTemplateAction) init];
  outlined bridged method (mbgnn) of @objc SASTCommandTemplateAction.commands.setter(a3, v7);
  id v8 = [objc_allocWithZone((Class)SASTButtonItem) init];
  [v8 setDecoratedLabel:v6];
  [v8 setCentered:1];
  [v8 setAction:v7];

  return v8;
}

void outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setText:v4];
}

void outlined bridged method (mbgnn) of @objc SASTApplicationBannerItem.bundleId.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setBundleId:v4];
}

void outlined bridged method (mbgnn) of @objc SASTCommandTemplateAction.commands.setter(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a2 setCommands:isa];
}

uint64_t type metadata accessor for WorkflowWatchSnippetProvider()
{
  return self;
}

id specialized WorkflowWatchSnippetProvider.makeItemGroup(command:title:appBundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized WorkflowWatchSnippetProvider.makeApplicationBanner(appBundleId:command:)(a4, a5, a1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
    OUTLINED_FUNCTION_1_32();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  WorkflowWatchSnippetProvider.makeBodyText(intentTitle:)(a2, a3);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
    OUTLINED_FUNCTION_1_32();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v7 = [objc_allocWithZone((Class)SASTItemGroup) init];
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter((uint64_t)_swiftEmptyArrayStorage, v7);
  return v7;
}

id specialized WorkflowWatchSnippetProvider.makeApplicationBanner(appBundleId:command:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)SASTApplicationBannerItem) init];
  outlined bridged method (mbgnn) of @objc SASTApplicationBannerItem.bundleId.setter(a1, a2, v6);
  id v7 = [objc_allocWithZone((Class)SASTCommandTemplateAction) init];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v8 + 16) = xmmword_211C70;
  *(void *)(v8 + 32) = a3;
  uint64_t v10 = v8;
  specialized Array._endMutation()();
  swift_unknownObjectRetain();
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v10, v7);
  [v6 setAction:v7];

  return v6;
}

uint64_t OUTLINED_FUNCTION_1_32()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

id OUTLINED_FUNCTION_4_37()
{
  return WorkflowWatchSnippetProvider.getButtonItemForLabel(label:commands:)(v1, v0, v2);
}

id OUTLINED_FUNCTION_9_36()
{
  return [v1 setTemplateItems:v0];
}

NSArray OUTLINED_FUNCTION_10_32()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_12_34()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_13_30(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

ValueMetadata *type metadata accessor for InputCompletionState()
{
  return &type metadata for InputCompletionState;
}

ValueMetadata *type metadata accessor for InputCompletionStateType()
{
  return &type metadata for InputCompletionStateType;
}

uint64_t DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))specialized DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:));
}

void DescribeCustomIntentItemCatTemplater.makeTemplate(item:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v7 = [self bundleForClass:ObjCClassFromMetadata];
  static DialogHelper.globals.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_212160;
  *(void *)(inited + 32) = 1835365481;
  *(void *)(inited + 40) = 0xE400000000000000;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v10 = self;
  NSString v11 = String._bridgeToObjectiveC()();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v9);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v13 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = (void *)swift_allocObject();
  v14[2] = a3;
  __n128 v14[3] = a4;
  v14[4] = 0xD000000000000028;
  v14[5] = 0x80000000002245A0;
  aBlock[4] = partial apply for closure #1 in DescribeCustomIntentItemCatTemplater.makeTemplate(item:_:);
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_6;
  NSString v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v10 execute:v7 catId:v11 parameters:isa globals:v13 completion:v15];
  _Block_release(v15);
}

uint64_t closure #1 in DescribeCustomIntentItemCatTemplater.makeTemplate(item:_:)(void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5)
{
  v21[1] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for TemplatingResult();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    *uint64_t v10 = a2;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v10);
    return outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }
  else
  {
    swift_bridgeObjectRetain();
    id v16 = [a1 print];
    uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v21[0] = a3;
    uint64_t v18 = v17;

    id v19 = [a1 speak];
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    TemplatingResult.init(dialogId:print:speak:)(v18, v20, v14);
    (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v10, v14, v11);
    swift_storeEnumTagMultiPayload();
    ((void (*)(void *))v21[0])(v10);
    outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t protocol witness for DescribeCustomIntentItemTemplating.makeTemplate(item:_:) in conformance DescribeCustomIntentItemCatTemplater()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t DescribeCustomIntentItemViewBuilder.makeViews(withTemplate:)()
{
  uint64_t v0 = dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_211C70;
  *(void *)(v1 + 32) = v0;
  uint64_t v3 = v1;
  specialized Array._endMutation()();
  return v3;
}

uint64_t protocol witness for DescribeCustomIntentItemViewBuilding.makeViews(withTemplate:) in conformance DescribeCustomIntentItemViewBuilder()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t DescribeCustomIntentItemOutputProvider.init(item:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))specialized DescribeCustomIntentItemOutputProvider.init(item:templating:viewBuilder:));
}

uint64_t DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a4 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a4, v11);
  __chkstk_darwin(v13);
  NSString v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = a5(a1, a2, a3, v15, v5, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v17;
}

uint64_t DescribeCustomIntentItemOutputProvider.makeOutput(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[12];
  uint64_t v6 = v2[13];
  __swift_project_boxed_opaque_existential_1(v2 + 9, v5);
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = v2;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v6 + 8);
  swift_retain();
  swift_retain();
  v10(v7, v8, partial apply for closure #1 in DescribeCustomIntentItemOutputProvider.makeOutput(_:), v9, v5, v6);

  return swift_release();
}

uint64_t closure #1 in DescribeCustomIntentItemOutputProvider.makeOutput(_:)(uint64_t a1, void (*a2)(long long *), uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for AceOutput();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TemplatingResult();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)&long long v28 = *v17;
    char v31 = 1;
    swift_errorRetain();
    a2(&v28);
    swift_errorRelease();
  }
  else
  {
    uint64_t v24 = v12;
    uint64_t v25 = v11;
    (*(void (**)(char *, void *, uint64_t))(v12 + 32))(v14, v17, v11);
    uint64_t v18 = a4[7];
    uint64_t v19 = a4[8];
    __swift_project_boxed_opaque_existential_1(a4 + 4, v18);
    if ((unint64_t)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 8))(v14, v18, v19) >> 62)
    {
      type metadata accessor for SABaseCommand();
      _bridgeCocoaArray<A>(_:)();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for SABaseCommand();
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    AceOutput.init(commands:flowActivity:)();
    uint64_t v20 = v26;
    *((void *)&v29 + 1) = v26;
    uint64_t v30 = &protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v28);
    uint64_t v22 = v27;
    (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 16))(boxed_opaque_existential_1, v10, v20);
    char v31 = 0;
    a2(&v28);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v20);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  }
  return outlined destroy of URL?((uint64_t)&v28, &demangling cache variable for type metadata for Result<Output, Error>);
}

void *specialized DescribeCustomIntentItemOutputProvider.__allocating_init(item:templating:viewBuilder:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DescribeCustomIntentItemOutputProvider();
  uint64_t v16 = (void *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, a6);
  uint64_t v17 = specialized DescribeCustomIntentItemOutputProvider.init(item:templating:viewBuilder:)(a1, a2, a3, (uint64_t)v15, v16, a6, a7);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a4, a6);
  return v17;
}

uint64_t sub_173D70()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in DescribeCustomIntentItemCatTemplater.makeTemplate(item:_:)(void *a1, uint64_t a2)
{
  return closure #1 in DescribeCustomIntentItemCatTemplater.makeTemplate(item:_:)(a1, a2, *(void (**)(void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void *specialized DescribeCustomIntentItemOutputProvider.init(item:templating:viewBuilder:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  a5[7] = a6;
  a5[8] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5 + 4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  a5[2] = a1;
  a5[3] = a2;
  outlined init with take of AceServiceInvokerAsync(a3, (uint64_t)(a5 + 9));
  return a5;
}

uint64_t sub_173E68()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in DescribeCustomIntentItemOutputProvider.makeOutput(_:)(uint64_t a1)
{
  return closure #1 in DescribeCustomIntentItemOutputProvider.makeOutput(_:)(a1, *(void (**)(long long *))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t type metadata accessor for DescribeCustomIntentItemCatTemplater()
{
  return self;
}

uint64_t type metadata accessor for DescribeCustomIntentItemViewBuilder()
{
  return self;
}

uint64_t type metadata accessor for DescribeCustomIntentItemOutputProvider()
{
  return self;
}

uint64_t ActionPerformedVisual.init(appBundleId:prompt:viewData:deviceState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  type metadata accessor for App();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a5, a6);
  App.__allocating_init(appIdentifier:)();
  uint64_t v15 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(a7, 2);
  uint64_t v17 = v16;
  swift_release();
  outlined consume of Data._Representation(a5, a6);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a7);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = v15;
  a8[3] = v17;
  a8[4] = a3;
  a8[5] = a4;
  a8[6] = a5;
  a8[7] = a6;
  return result;
}

uint64_t ActionPerformedVisual.data.getter()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for Response();
  v0[2] = v1;
  OUTLINED_FUNCTION_1_0(v1);
  v0[3] = v2;
  v0[4] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = AutoShortcutAppEnabledVisual.data.getter;
  return ActionPerformedVisual.response.getter();
}

uint64_t ActionPerformedVisual.response.getter()
{
  OUTLINED_FUNCTION_9_0();
  v1[39] = v2;
  v1[40] = v0;
  uint64_t v3 = type metadata accessor for SeparatorStyle();
  v1[41] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[42] = v4;
  v1[43] = OUTLINED_FUNCTION_13_0();
  v1[44] = swift_task_alloc();
  type metadata accessor for Separators();
  v1[45] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ComponentWrapper();
  v1[46] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[47] = v6;
  v1[48] = OUTLINED_FUNCTION_13_0();
  v1[49] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CustomCanvas();
  v1[50] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[51] = v8;
  v1[52] = OUTLINED_FUNCTION_13_0();
  v1[53] = swift_task_alloc();
  v1[54] = swift_task_alloc();
  return _swift_task_switch(ActionPerformedVisual.response.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  void (*v14)(uint64_t, void, uint64_t);
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t (*v41)(void);
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;

  uint64_t v1 = *(uint64_t **)(v0 + 320);
  uint64_t v2 = v1[5];
  uint64_t v3 = &unk_2A4000;
  if (v2)
  {
    uint64_t v4 = v1[4];
    uint64_t v5 = one-time initialization token for encoder;
    swift_bridgeObjectRetain();
    if (v5 != -1) {
      swift_once();
    }
    *(void *)(v0 + 104) = v4;
    *(void *)(v0 + 112) = v2;
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
    *(unsigned char *)(v0 + 184) = 5;
    lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
    dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    uint64_t v6 = *(void *)(v0 + 432);
    uint64_t v56 = (uint64_t *)(v0 + 272);
    uint64_t v8 = *(void *)(v0 + 400);
    uint64_t v7 = *(void *)(v0 + 408);
    uint64_t v9 = *(void *)(v0 + 376);
    unint64_t v55 = *(uint64_t **)(v0 + 384);
    uint64_t v50 = *(void *)(v0 + 392);
    char v53 = *(void *)(v0 + 368);
    uint64_t v10 = *(void *)(v0 + 344);
    char v47 = *(void *)(v0 + 352);
    uint64_t v12 = *(void *)(v0 + 328);
    uint64_t v11 = *(void *)(v0 + 336);
    OUTLINED_FUNCTION_1_33();
    *(void *)(v0 + 256) = v8;
    *(void *)(v0 + 264) = &protocol witness table for CustomCanvas;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 232));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v6, v8);
    uint64_t v14 = *(void (**)(uint64_t, void, uint64_t))(v11 + 104);
    v14(v47, enum case for SeparatorStyle.edgeToEdge(_:), v12);
    v14(v10, enum case for SeparatorStyle.standard(_:), v12);
    Separators.init(top:bottom:)();
    ComponentWrapper.init(_:separators:)();
    BOOL v49 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
    v49(v55, v50, v53);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v16 = v15;
    uint64_t v17 = v15[2];
    if (v17 >= v15[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v16 = v43;
    }
    uint64_t v18 = *(void *)(v0 + 408);
    char v51 = *(void *)(v0 + 400);
    Swift::Int v54 = *(void *)(v0 + 432);
    uint64_t v19 = *(void *)(v0 + 384);
    uint64_t v48 = *(void *)(v0 + 392);
    uint64_t v20 = *(void *)(v0 + 368);
    uint64_t v21 = *(void *)(v0 + 376);
    *(void *)(v0 + 296) = v20;
    *(void *)(v0 + 304) = &protocol witness table for ComponentWrapper;
    uint64_t v22 = __swift_allocate_boxed_opaque_existential_1(v56);
    v49(v22, v19, v20);
    void v16[2] = v17 + 1;
    outlined init with take of AceServiceInvokerAsync((long long *)v56, (uint64_t)&v16[5 * v17 + 4]);
    long long v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v23(v19, v20);
    swift_bridgeObjectRelease();
    v23(v48, v20);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v54, v51);
    uint64_t v1 = *(uint64_t **)(v0 + 320);
    uint64_t v3 = (void *)&unk_2A4000;
  }
  else
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }
  uint64_t v24 = v1[6];
  uint64_t v25 = v1[7];
  uint64_t v27 = *v1;
  uint64_t v26 = v1[1];
  long long v29 = v1[2];
  long long v28 = v1[3];
  outlined copy of Data._Representation(v24, v25);
  uint64_t v30 = v3[74];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = v24;
  *(void *)(v0 + 24) = v25;
  *(void *)(v0 + 32) = v27;
  *(void *)(v0 + 40) = v26;
  *(void *)(v0 + 48) = v29;
  *(void *)(v0 + 56) = v28;
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(unsigned char *)(v0 + 96) = 0;
  dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v32 = *(uint64_t **)(v0 + 416);
  char v31 = *(void *)(v0 + 424);
  BOOL v34 = *(void *)(v0 + 400);
  int64_t v33 = *(void *)(v0 + 408);
  OUTLINED_FUNCTION_1_33();
  unint64_t v52 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v33 + 16);
  v52(v32, v31, v34);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v16 = v44;
  }
  uint64_t v35 = v16[2];
  if (v35 >= v16[3] >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v16 = v45;
  }
  char v36 = *(void *)(v0 + 416);
  uint64_t v46 = *(void *)(v0 + 424);
  unint64_t v37 = *(void *)(v0 + 400);
  char v38 = *(void *)(v0 + 408);
  *(void *)(v0 + 216) = v37;
  *(void *)(v0 + 224) = &protocol witness table for CustomCanvas;
  uint64_t v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 192));
  v52(v39, v36, v37);
  void v16[2] = v35 + 1;
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 192), (uint64_t)&v16[5 * v35 + 4]);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v40(v36, v37);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)();
  outlined consume of Data._Representation(v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40(v46, v37);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

uint64_t destroy for ActionPerformedVisual(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);

  return outlined consume of Data._Representation(v2, v3);
}

void *initializeWithCopy for ActionPerformedVisual(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[6];
  unint64_t v7 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v6, v7);
  a1[6] = v6;
  a1[7] = v7;
  return a1;
}

void *assignWithCopy for ActionPerformedVisual(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[6];
  unint64_t v4 = a2[7];
  outlined copy of Data._Representation(v5, v4);
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  a1[6] = v5;
  a1[7] = v4;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for ActionPerformedVisual(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[6];
  unint64_t v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  outlined consume of Data._Representation(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionPerformedVisual(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionPerformedVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionPerformedVisual()
{
  return &type metadata for ActionPerformedVisual;
}

uint64_t OUTLINED_FUNCTION_1_33()
{
  return CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)();
}

unsigned char *storeEnumTagSinglePayload for CustomIntentFlowErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x174C54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentFlowErrors()
{
  return &type metadata for CustomIntentFlowErrors;
}

void *USOConstants.IdentifierNamespaceAutoShortcutBaseTemplate.unsafeMutableAddressor()
{
  return &static USOConstants.IdentifierNamespaceAutoShortcutBaseTemplate;
}

void *USOConstants.IdentifierNamespaceAutoShortcutProperty.unsafeMutableAddressor()
{
  return &static USOConstants.IdentifierNamespaceAutoShortcutProperty;
}

const char *USOValue.accept.unsafeMutableAddressor()
{
  return "accept";
}

const char *USOValue.reject.unsafeMutableAddressor()
{
  return "reject";
}

void *USOConstants.NLBundleId.unsafeMutableAddressor()
{
  return &static USOConstants.NLBundleId;
}

void *USONodes.confirmation.unsafeMutableAddressor()
{
  return &static USONodes.confirmation;
}

void *USOConstants.synonymBundleId.unsafeMutableAddressor()
{
  return &static USOConstants.synonymBundleId;
}

uint64_t static USOValue.accept.getter()
{
  return 0x747065636361;
}

uint64_t static USOValue.reject.getter()
{
  return 0x7463656A6572;
}

unint64_t static USOConstants.NLBundleId.getter()
{
  return OUTLINED_FUNCTION_0_16(21);
}

unint64_t static USOConstants.synonymBundleId.getter()
{
  return OUTLINED_FUNCTION_0_16(27);
}

unint64_t static USOConstants.IdentifierNamespaceAutoShortcutBaseTemplate.getter()
{
  return OUTLINED_FUNCTION_0_16(24);
}

unint64_t static USOConstants.IdentifierNamespaceAutoShortcutProperty.getter()
{
  return OUTLINED_FUNCTION_0_16(20);
}

void type metadata accessor for USOValue()
{
}

void type metadata accessor for USOConstants()
{
}

void type metadata accessor for USONodes()
{
}

uint64_t INCodableAttribute.supportsMultipleValues.getter()
{
  uint64_t result = outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(v0);
  if (result)
  {
    specialized Dictionary.subscript.getter(0xD000000000000027, 0x800000000022A0C0, result, &v3);
    swift_bridgeObjectRelease();
    if (v4)
    {
      if (swift_dynamicCast()) {
        return v2 == 1;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v3);
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t LNValueType.getLNValue(usoParse:parameterMetadata:locale:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[61] = a3;
  v4[62] = v3;
  v4[59] = a1;
  v4[60] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>?);
  OUTLINED_FUNCTION_16(v5);
  v4[63] = OUTLINED_FUNCTION_25();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_16(v6);
  v4[64] = OUTLINED_FUNCTION_25();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_16(v7);
  v4[65] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for TimeZone();
  v4[66] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v4[67] = v9;
  v4[68] = OUTLINED_FUNCTION_13_0();
  v4[69] = swift_task_alloc();
  v4[70] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Calendar();
  v4[71] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v4[72] = v11;
  v4[73] = OUTLINED_FUNCTION_13_0();
  v4[74] = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_16(v12);
  v4[75] = OUTLINED_FUNCTION_25();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_16(v13);
  v4[76] = OUTLINED_FUNCTION_25();
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4[77] = v14;
  OUTLINED_FUNCTION_1_0(v14);
  v4[78] = v15;
  v4[79] = OUTLINED_FUNCTION_13_0();
  v4[80] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v4[81] = v16;
  OUTLINED_FUNCTION_1_0(v16);
  v4[82] = v17;
  v4[83] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v18, v19, v20);
}

#error "175ABC: call analysis failed (funcsize=866)"

uint64_t LNValueType.getLNValue(usoParse:parameterMetadata:locale:)()
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 680) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_2_6();
  v7();
  if (v0)
  {
    uint64_t v8 = OUTLINED_FUNCTION_24_21();
    v9(v8);
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_23_24();
    v11(v10);
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 256);
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 336);
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void (*v7)(void);
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 696) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_2_6();
  v7();
  if (v0)
  {
    uint64_t v8 = OUTLINED_FUNCTION_24_21();
    v9(v8);
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_23_24();
    v11(v10);
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 16);
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 296);
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 712) = v5;
  *(void *)(v3 + 720) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_2_6();
  v6();
  if (!v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 176);
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 136);
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v8 + 752) = v7;
  *(void *)(v8 + 760) = v0;
  swift_task_dealloc();

  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

#error "1760FC: call analysis failed (funcsize=72)"

#error "17637C: call analysis failed (funcsize=72)"

void LNValueType.getLNValue(usoParse:parameterMetadata:locale:)()
{
  uint64_t v1 = *(void *)(v0 + 712);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 496);
    _OWORD v7[3] = type metadata accessor for NSError(0, &lazy cache variable for type metadata for CLPlacemark);
    v7[0] = v1;
    id v3 = objc_allocWithZone((Class)LNValue);
    @nonobjc LNValue.init(_:valueType:)(v7, v2);
  }
  OUTLINED_FUNCTION_2_6();
  v4();
  OUTLINED_FUNCTION_8_30();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_12();
  __asm { BRAA            X2, X16 }
}

#error "176918: call analysis failed (funcsize=123)"

uint64_t LNValueType.getLNValue(usoParse:parameterMetadata:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  OUTLINED_FUNCTION_2_6();
  v17();
  __swift_destroy_boxed_opaque_existential_1Tm(v16 + 256);
  __swift_destroy_boxed_opaque_existential_1Tm(v16 + 336);
  OUTLINED_FUNCTION_0_32();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_33();
  OUTLINED_FUNCTION_18_2();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  OUTLINED_FUNCTION_2_6();
  v17();
  __swift_destroy_boxed_opaque_existential_1Tm(v16 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v16 + 296);
  OUTLINED_FUNCTION_0_32();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_33();
  OUTLINED_FUNCTION_18_2();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  OUTLINED_FUNCTION_2_6();
  v17();
  __swift_destroy_boxed_opaque_existential_1Tm(v16 + 176);
  __swift_destroy_boxed_opaque_existential_1Tm(v16 + 136);
  OUTLINED_FUNCTION_0_32();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_33();
  OUTLINED_FUNCTION_18_2();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  OUTLINED_FUNCTION_25_16();
  uint64_t v16 = OUTLINED_FUNCTION_21_6();
  v17(v16);
  OUTLINED_FUNCTION_0_32();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_33();
  OUTLINED_FUNCTION_18_2();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14, a15, a16);
}

id _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFs5Int64V_s5NeverOSo7LNValueCTg506_sSo11e149TypeC18SiriLinkFlowPluginE03getA08usoParse17parameterMetadata6localeSo0A0CSg0c3KitE08USOParseV_So017LNActionParameterK0C10Foundation6LocaleVtYaKFAIs5C6VXEfU_So0eH0CTf1cn_nTm(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {

    return 0;
  }
  else
  {
    v9[3] = a5;
    v9[0] = a1;
    objc_allocWithZone((Class)LNValue);
    id v6 = a3;
    id v7 = @nonobjc LNValue.init(_:valueType:)(v9, v6);
  }
  return v7;
}

id _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSo7LNValueCTg506_sSo11f149TypeC18SiriLinkFlowPluginE03getA08usoParse17parameterMetadata6localeSo0A0CSg0c3KitE08USOParseV_So017LNActionParameterK0C10Foundation6LocaleVtYaKFAiP4D7VXEfU3_So0fI0CTf1cn_nTm(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v8 = a4(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = OUTLINED_FUNCTION_16(v12);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SpeakableString?(a1, (uint64_t)v15, a5);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v8) == 1)
  {

    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
    void v20[3] = v8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, v8);
    objc_allocWithZone((Class)LNValue);
    id v18 = a2;
    id v16 = @nonobjc LNValue.init(_:valueType:)(v20, v18);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v16;
}

id _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSb_s5NeverOSo7LNValueCTg506_sSo11D155TypeC18SiriLinkFlowPluginE03getA08usoParse17parameterMetadata6localeSo0A0CSg0c3KitE08USOParseV_So017LNActionParameterK0C10Foundation6LocaleVtYaKFAISbXEfU8_So0dG0CTf1cn_n(char a1, void *a2)
{
  if (a1 == 2)
  {

    return 0;
  }
  else
  {
    v6[3] = &type metadata for Bool;
    LOBYTE(v6[0]) = a1 & 1;
    objc_allocWithZone((Class)LNValue);
    id v4 = a2;
    id v3 = @nonobjc LNValue.init(_:valueType:)(v6, v4);
  }
  return v3;
}

id _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation11MeasurementVySo6NSUnitCG_s5NeverOSo7LNValueCTg506_sSo11g150TypeC18SiriLinkFlowPluginE03getA08usoParse17parameterMetadata6localeSo0A0CSg0c3KitE08USOParseV_So017LNActionParameterK0C10Foundation6LocaleVtYaKFAiP11d5VySo6E9CGXEfU11_So0gJ0CTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SpeakableString?(a1, (uint64_t)v10, &demangling cache variable for type metadata for Measurement<NSUnit>?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {

    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v15[3] = v4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
    (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(boxed_opaque_existential_1, v7, v4);
    objc_allocWithZone((Class)LNValue);
    id v13 = a2;
    id v11 = @nonobjc LNValue.init(_:valueType:)(v15, v13);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v11;
}

NSAttributedString __swiftcall NSAttributedString.__allocating_init(string:)(Swift::String string)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithString:v2];

  return (NSAttributedString)v3;
}

id @nonobjc LNValue.init(_:valueType:)(void *a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  id v5 = [v2 initWithValue:_bridgeAnythingToObjectiveC<A>(_:)() valueType:a2];
  swift_unknownObjectRelease();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v5;
}

id @nonobjc LNValue.init(_:memberValueType:)(uint64_t a1, void *a2)
{
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNValue);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithValues:isa memberValueType:a2];

  return v5;
}

uint64_t OUTLINED_FUNCTION_0_32()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_7_34()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_8_30()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_11_33()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_15_26(uint64_t a1)
{
  *(void *)(a1 + 16) = 0x3FA999999999999ALL;
  return outlined init with take of AceServiceInvokerAsync(v1, a1 + 24);
}

uint64_t OUTLINED_FUNCTION_19_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_21()
{
  return v0;
}

void OUTLINED_FUNCTION_25_16()
{
  uint64_t v2 = *(void **)(v0 + 496);
}

uint64_t OUTLINED_FUNCTION_26_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a9;
}

uint64_t OUTLINED_FUNCTION_27_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

void InstallVoiceShortcutFlow.__allocating_init(invocationData:deviceState:aceService:vcClient:outputPublisher:installShortcutViewFactory:locationProvider:dateTimeResolver:)()
{
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *InstallVoiceShortcutFlow.exitValue.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

void InstallVoiceShortcutFlow.init(invocationData:deviceState:aceService:vcClient:outputPublisher:installShortcutViewFactory:locationProvider:dateTimeResolver:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  id v3 = v2;
  id v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = type metadata accessor for CATOption();
  __chkstk_darwin(v18 - 8);
  OUTLINED_FUNCTION_20_0();
  *(void *)(v1 + 136) = v17;
  outlined init with copy of DeviceState(v15, v1 + 16);
  outlined init with copy of DeviceState(v13, v1 + 96);
  outlined init with copy of DeviceState(v11, v1 + 152);
  outlined init with copy of DeviceState(v9, v1 + 56);
  outlined init with copy of DeviceState(v15, (uint64_t)v21);
  if (v7)
  {
    OUTLINED_FUNCTION_8_31();
  }
  else
  {
    outlined init with copy of DeviceState((uint64_t)v21, (uint64_t)v20);
    type metadata accessor for InstallShortcutCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v19 = CATWrapper.__allocating_init(options:globals:)();
    swift_release();
    OUTLINED_FUNCTION_8_31();
    type metadata accessor for InstallShortcutViewFactory();
    uint64_t v7 = swift_allocObject();
    outlined init with take of AceServiceInvokerAsync(v20, v7 + 16);
    *(void *)(v7 + 56) = v19;
  }
  *(void *)(v1 + 144) = v7;
  outlined init with take of AceServiceInvokerAsync(v5, v1 + 192);
  outlined init with take of AceServiceInvokerAsync(v3, v1 + 232);
  OUTLINED_FUNCTION_27_1();
}

void InstallVoiceShortcutFlow.on(input:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Input();
  OUTLINED_FUNCTION_12_1();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_20_0();
  uint64_t v8 = v7 - v6;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v1, v2);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = OUTLINED_FUNCTION_39_5();
    v16(v15);
    _os_log_impl(&dword_0, v10, v11, "InstallVoiceShortcutFlow.on %s", v12, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v17 = OUTLINED_FUNCTION_39_5();
    v18(v17);
  }

  OUTLINED_FUNCTION_27_1();
}

uint64_t InstallVoiceShortcutFlow.execute(completion:)()
{
  type metadata accessor for InstallVoiceShortcutFlow();
  _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type InstallVoiceShortcutFlow and conformance InstallVoiceShortcutFlow, v0, (void (*)(uint64_t))type metadata accessor for InstallVoiceShortcutFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t InstallVoiceShortcutFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return _swift_task_switch(InstallVoiceShortcutFlow.execute(), 0, 0);
}

uint64_t InstallVoiceShortcutFlow.execute()()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[6] = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "InstallVoiceShortcutFlow.execute", v4, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_3(v6))
  {
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v7);
    OUTLINED_FUNCTION_7_35(&dword_0, v5, v8, "InstallVoiceShortcutFlow attempting to install shortcut");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v9 = (void *)v0[5];

  uint64_t v10 = v9[17];
  v0[7] = v10;
  uint64_t v13 = (uint64_t (*)(uint64_t))(*(void *)(*v9 + 208) + **(int **)(*v9 + 208));
  os_log_type_t v11 = (void *)swift_task_alloc();
  v0[8] = v11;
  *os_log_type_t v11 = v0;
  v11[1] = InstallVoiceShortcutFlow.execute();
  return v13(v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_4_0();
  *os_log_type_t v3 = v2;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = InstallVoiceShortcutFlow.execute();
  }
  else {
    uint64_t v5 = InstallVoiceShortcutFlow.execute();
  }
  return _swift_task_switch(v5, 0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v3);
    OUTLINED_FUNCTION_7_35(&dword_0, v1, v4, "InstallVoiceShortcutFlow shortcut installed, running shortcut");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v5 = *(void *)(v0 + 56);

  OUTLINED_FUNCTION_16_5();
  (*(void (**)(uint64_t))(v6 + 216))(v5);
  static ExecuteResponse.complete(next:)();
  swift_release();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

{
  void *v0;
  _DWORD *v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  void *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v1 = (_DWORD *)v0[9];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    uint64_t v4 = v0[9];
    OUTLINED_FUNCTION_25_2();
    uint64_t v5 = OUTLINED_FUNCTION_6_35();
    *uint64_t v1 = 136315138;
    uint64_t v13 = v5;
    v0[2] = v4;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    os_log_type_t v6 = String.init<A>(describing:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v13);
    OUTLINED_FUNCTION_21_20();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_10_33(&dword_0, v8, v9, "InstallVoiceShortcutFlow install failed %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v10 + 224))();
  static ExecuteResponse.complete(next:)();
  swift_release();
  swift_errorRelease();
  OUTLINED_FUNCTION_18_0();
  return v11();
}

uint64_t InstallVoiceShortcutFlow.installShortcut(invocationData:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[7] = v2;
  v1[8] = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v1[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[10] = v3;
  v1[11] = *(void *)(v3 - 8);
  v1[12] = swift_task_alloc();
  return _swift_task_switch(InstallVoiceShortcutFlow.installShortcut(invocationData:), 0, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t (*v27)(void);
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t (*v33)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v34[2];
  void *v35;
  uint64_t v36;

  uint64_t v35 = v0;
  uint64_t v1 = v0 + 7;
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  (*(void (**)(void))(*(void *)v0[7] + 136))();
  if (__swift_getEnumTagSinglePayload(v3, 1, v2) == 1)
  {
    outlined destroy of URL?(v0[9]);
LABEL_9:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    uint64_t v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = *v1;
    if (v17)
    {
      OUTLINED_FUNCTION_25_2();
      uint64_t v19 = OUTLINED_FUNCTION_6_35();
      *(_DWORD *)uint64_t v1 = 136315138;
      v34[0] = v19;
      uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 104);
      uint64_t v21 = swift_retain();
      uint64_t v22 = v20(v21);
      uint64_t v24 = v23;
      swift_release();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v15, v16, "InstallVoiceShortcutInvocationData incomplete, unable to install shortcut : %s", (uint8_t *)v0 + 56, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_release_n();
    }

    type metadata accessor for CommandFailure();
    swift_allocObject();
    uint64_t v25 = CommandFailure.init(errorCode:reason:)();
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type CommandFailure and conformance CommandFailure, 255, (void (*)(uint64_t))&type metadata accessor for CommandFailure);
    swift_allocError();
    *uint64_t v26 = v25;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v27();
  }
  uint64_t v4 = v0[7];
  uint64_t v5 = (*(uint64_t (**)(void, void, void))(v0[11] + 32))(v0[12], v0[9], v0[10]);
  os_log_type_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 128))(v5);
  v0[13] = v6;
  v0[14] = v7;
  if (!v7)
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    goto LABEL_9;
  }
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  v0[15] = __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  os_log_type_t v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    v34[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v11, v12, "InstallVoiceShortcutFlow checking if shortcut already installed \"%s\"", v13, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  long long v29 = (void *)v0[8];
  uint64_t v30 = v29[22];
  char v31 = v29[23];
  __swift_project_boxed_opaque_existential_1(v29 + 19, v30);
  int64_t v33 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v31 + 8) + **(int **)(v31 + 8));
  uint64_t v32 = (void *)swift_task_alloc();
  v0[16] = v32;
  *uint64_t v32 = v0;
  v32[1] = InstallVoiceShortcutFlow.installShortcut(invocationData:);
  return v33(v8, v9, v30, v31);
}

{
  char v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  *(unsigned char *)(v1 + 152) = v0;
  swift_task_dealloc();
  return _swift_task_switch(InstallVoiceShortcutFlow.installShortcut(invocationData:), 0, 0);
}

{
  _DWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t (*v8)(void);
  void *v10;
  os_log_type_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v26 = v1;
  if (*(unsigned char *)(v1 + 152) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v3))
    {
      uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v4);
      OUTLINED_FUNCTION_7_35(&dword_0, v2, v5, "InstallVoiceShortcutFlow shortcut already installed");
      OUTLINED_FUNCTION_7_0();
    }

    os_log_type_t v6 = OUTLINED_FUNCTION_30();
    v7(v6);
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v8();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v10 = (void *)Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    uint64_t v12 = OUTLINED_FUNCTION_32(v11);
    uint64_t v13 = *(void *)(v1 + 112);
    if (v12)
    {
      uint64_t v14 = *(void *)(v1 + 104);
      OUTLINED_FUNCTION_25_2();
      uint64_t v25 = OUTLINED_FUNCTION_6_35();
      void *v0 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v1 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_10_33(&dword_0, v15, v16, "InstallVoiceShortcutFlow shortcut not perviously installed, attempting to install : \"%s\"");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v17 = *(void *)(v1 + 112);
    uint64_t v18 = *(void **)(v1 + 64);
    uint64_t v19 = v18[22];
    uint64_t v20 = v18[23];
    __swift_project_boxed_opaque_existential_1(v18 + 19, v19);
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 + 16)
                                                                              + **(int **)(v20 + 16));
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v1 + 136) = v21;
    void *v21 = v1;
    v21[1] = InstallVoiceShortcutFlow.installShortcut(invocationData:);
    uint64_t v23 = *(void *)(v1 + 96);
    uint64_t v22 = *(void *)(v1 + 104);
    return v24(v23, v22, v17, v19, v20);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = InstallVoiceShortcutFlow.installShortcut(invocationData:);
  }
  else {
    uint64_t v2 = InstallVoiceShortcutFlow.installShortcut(invocationData:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  NSObject *v0;
  os_log_type_t v1;
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v0 = Logger.logObject.getter();
  uint64_t v1 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_3(v1))
  {
    uint64_t v2 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v2);
    OUTLINED_FUNCTION_7_35(&dword_0, v0, v3, "InstallVoiceShortcutFlow installed shortcut");
    OUTLINED_FUNCTION_7_0();
  }

  uint64_t v4 = OUTLINED_FUNCTION_30();
  v5(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v6();
}

{
  void *v0;
  _DWORD *v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = (_DWORD *)v0[18];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = (void *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    uint64_t v4 = v0[18];
    OUTLINED_FUNCTION_25_2();
    uint64_t v5 = OUTLINED_FUNCTION_6_35();
    *uint64_t v1 = 136315138;
    uint64_t v15 = v5;
    v0[3] = v4;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    os_log_type_t v6 = String.init<A>(describing:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v15);
    OUTLINED_FUNCTION_21_20();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_10_33(&dword_0, v8, v9, "InstallVoiceShortcutFlow install error %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  os_log_type_t v11 = v0[11];
  uint64_t v10 = v0[12];
  uint64_t v12 = v0[10];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v13();
}

void InstallVoiceShortcutFlow.makeRunShortcutFlow(invocationData:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for CATOption();
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v3 + 128))();
  if (v6)
  {
    v54[0] = v5;
    v54[1] = v6;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    char v58 = 0;
    memset(v53, 0, sizeof(v53));
    outlined init with copy of DeviceState(v0 + 96, (uint64_t)v52);
    outlined init with copy of DeviceState(v0 + 16, (uint64_t)v51);
    outlined init with copy of DeviceState(v0 + 56, (uint64_t)v50);
    outlined init with copy of DeviceState(v0 + 192, (uint64_t)v47);
    outlined init with copy of DeviceState(v0 + 232, (uint64_t)v44);
    uint64_t v7 = one-time initialization token for shared;
    swift_bridgeObjectRetain();
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v43 = (char *)static WFDialogState.shared;
    type metadata accessor for RunCustomIntentCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v42 = (uint8_t *)CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATs();
    static CATOption.defaultMode.getter();
    uint64_t v41 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v39 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
    static CATOption.defaultMode.getter();
    uint64_t v38 = CATWrapper.__allocating_init(options:globals:)();
    Class v40 = (Class)type metadata accessor for WorkflowRunnerFlow(0);
    id v8 = objc_allocWithZone(v40);
    uint64_t v10 = v48;
    uint64_t v9 = v49;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
    uint64_t v37 = (uint64_t)&v37;
    OUTLINED_FUNCTION_12_1();
    __chkstk_darwin(v11);
    OUTLINED_FUNCTION_20_0();
    uint64_t v14 = v13 - v12;
    (*(void (**)(uint64_t))(v15 + 16))(v13 - v12);
    uint64_t v17 = v45;
    uint64_t v16 = v46;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v44, v45);
    OUTLINED_FUNCTION_12_1();
    __chkstk_darwin(v18);
    OUTLINED_FUNCTION_20_0();
    uint64_t v21 = v20 - v19;
    (*(void (**)(uint64_t))(v22 + 16))(v20 - v19);
    specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)((uint64_t)v54, (uint64_t)v53, (uint64_t)v43, (uint64_t)v52, (uint64_t)v51, (uint64_t)v50, (uint64_t)v42, v41, v39, v38, (uint64_t)closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow, 0, v14, v21, (uint64_t)closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow, 0, (uint64_t)v8, v17, v10,
      v16,
      v9,
      v36,
      v37,
      v38,
      v39,
      (uint64_t)v40,
      v41,
      (uint64_t)v42,
      v43,
      v44[0],
      v44[1],
      v44[2],
      v45);
    uint64_t v24 = v23;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v44);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
    v53[0] = v24;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow, 255, (void (*)(uint64_t))type metadata accessor for WorkflowRunnerFlow);
    Flow.eraseToAnyFlow()();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
    swift_retain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      long long v28 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      long long v29 = (char *)swift_slowAlloc();
      uint64_t v43 = v29;
      *(_DWORD *)long long v28 = 136315138;
      v54[0] = (uint64_t)v29;
      uint64_t v42 = v28 + 4;
      uint64_t v30 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 104);
      uint64_t v31 = swift_retain();
      uint64_t v32 = v30(v31);
      unint64_t v34 = v33;
      swift_release();
      v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v26, v27, "InstallVoiceShortcutInvocationData incomplete, unable to runShortcut : %s", v28, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      uint64_t v35 = swift_release_n();
    }
    (*(void (**)(uint64_t))(*(void *)v1 + 224))(v35);
  }
  OUTLINED_FUNCTION_27_1();
}

uint64_t InstallVoiceShortcutFlow.makeErrorFlow()()
{
  outlined init with copy of DeviceState(v0 + 56, (uint64_t)v3);
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  swift_retain();
  v3[0] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  uint64_t v1 = Flow.eraseToAnyFlow()();
  swift_release();
  return v1;
}

uint64_t closure #1 in InstallVoiceShortcutFlow.makeErrorFlow()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(closure #1 in InstallVoiceShortcutFlow.makeErrorFlow(), 0, 0);
}

uint64_t closure #1 in InstallVoiceShortcutFlow.makeErrorFlow()()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  OUTLINED_FUNCTION_16_5();
  uint64_t v3 = *(int **)(v2 + 104);
  v1[3] = type metadata accessor for AceOutput();
  v1[4] = (uint64_t)&protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1);
  uint64_t v7 = (uint64_t (*)(uint64_t *))((char *)v3 + *v3);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in InstallVoiceShortcutFlow.makeErrorFlow();
  return v7(boxed_opaque_existential_1);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v3();
}

uint64_t InstallVoiceShortcutFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 232);
  return v0;
}

uint64_t InstallVoiceShortcutFlow.__deallocating_deinit()
{
  InstallVoiceShortcutFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance InstallVoiceShortcutFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance InstallVoiceShortcutFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t protocol witness for Flow.execute() in conformance InstallVoiceShortcutFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 200) + **(int **)(**(void **)v1 + 200));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance InstallVoiceShortcutFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t type metadata accessor for InstallVoiceShortcutFlow()
{
  return self;
}

uint64_t _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_2(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in InstallVoiceShortcutFlow.makeErrorFlow()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return closure #1 in InstallVoiceShortcutFlow.makeErrorFlow()(v3, v0);
}

uint64_t sub_179914()
{
  OUTLINED_FUNCTION_16_5();
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t sub_179954()
{
  OUTLINED_FUNCTION_16_5();
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t OUTLINED_FUNCTION_6_35()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_7_35(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t OUTLINED_FUNCTION_8_31()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return __swift_destroy_boxed_opaque_existential_1Tm(v4 - 120);
}

void OUTLINED_FUNCTION_10_33(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_21_20()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void *VoiceCommandConstants.ShortcutsAppIdentifierWatch.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ShortcutsAppIdentifierWatch;
}

void *VoiceCommandConstants.ShortcutsAppIdentifier.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ShortcutsAppIdentifier;
}

void *VoiceCommandConstants.ConfirmationDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ConfirmationDirectInvocation;
}

void *VoiceCommandConstants.DisambiguationItemDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.DisambiguationItemDirectInvocation;
}

void *VoiceCommandConstants.WaitForDoneButtonDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.WaitForDoneButtonDirectInvocation;
}

void *VoiceCommandConstants.TopLevelShortcutDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.TopLevelShortcutDirectInvocation;
}

void *VoiceCommandConstants.ServerAppShortcutInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ServerAppShortcutInvocation;
}

void *VoiceCommandConstants.PausedShortcutInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.PausedShortcutInvocation;
}

void *VoiceCommandConstants.VoiceShortcutsAppId.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.VoiceShortcutsAppId;
}

void *VoiceCommandConstants.ShortcutsIntents.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ShortcutsIntents;
}

void *VoiceCommandConstants.ContactsAppIdentifierMobile.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ContactsAppIdentifierMobile;
}

void *VoiceCommandConstants.CustomIntentTypePrefix.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.CustomIntentTypePrefix;
}

const char *VoiceCommandConstants.RunOnCompanionToken.unsafeMutableAddressor()
{
  return "@COMPANION";
}

uint64_t static VoiceCommandConstants.RunOnCompanionToken.getter()
{
  return 0x494E41504D4F4340;
}

unint64_t static VoiceCommandConstants.WaitForDoneButtonDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_16(59);
}

unint64_t static VoiceCommandConstants.TopLevelShortcutDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_16(65);
}

void *VoiceCommandConstants.ProvisionalLinkDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ProvisionalLinkDirectInvocation;
}

unint64_t static VoiceCommandConstants.ProvisionalLinkDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_16(70);
}

unint64_t static VoiceCommandConstants.DisambiguationItemDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_16(67);
}

unint64_t static VoiceCommandConstants.ConfirmationDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_16(61);
}

void *VoiceCommandConstants.InputDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.InputDirectInvocation;
}

unint64_t static VoiceCommandConstants.InputDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_16(60);
}

unint64_t static VoiceCommandConstants.ServerAppShortcutInvocation.getter()
{
  return OUTLINED_FUNCTION_0_16(75);
}

unint64_t static VoiceCommandConstants.PausedShortcutInvocation.getter()
{
  return OUTLINED_FUNCTION_0_16(63);
}

unint64_t static VoiceCommandConstants.VoiceShortcutsAppId.getter()
{
  return OUTLINED_FUNCTION_0_16(28);
}

unint64_t static VoiceCommandConstants.ShortcutsAppIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_16(19);
}

unint64_t static VoiceCommandConstants.ShortcutsAppIdentifierWatch.getter()
{
  return OUTLINED_FUNCTION_0_16(25);
}

unint64_t static VoiceCommandConstants.ContactsAppIdentifierMobile.getter()
{
  return OUTLINED_FUNCTION_0_16(27);
}

void *VoiceCommandConstants.ContactsAppIdentifierMac.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ContactsAppIdentifierMac;
}

unint64_t static VoiceCommandConstants.ContactsAppIdentifierMac.getter()
{
  return OUTLINED_FUNCTION_0_16(21);
}

unint64_t static VoiceCommandConstants.ShortcutsIntents.getter()
{
  return OUTLINED_FUNCTION_0_16(38);
}

unint64_t static VoiceCommandConstants.CustomIntentTypePrefix.getter()
{
  return OUTLINED_FUNCTION_0_16(23);
}

void *VoiceCommandConstants.MaxConfirmationActionNames.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.MaxConfirmationActionNames;
}

uint64_t static VoiceCommandConstants.MaxConfirmationActionNames.getter()
{
  return 10;
}

ValueMetadata *type metadata accessor for VoiceCommandConstants()
{
  return &type metadata for VoiceCommandConstants;
}

uint64_t SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_13_31(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  uint64_t v9 = OUTLINED_FUNCTION_13_0();
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  uint64_t v12 = OUTLINED_FUNCTION_34_1(v11);
  *(void *)(v0 + 104) = OUTLINED_FUNCTION_95_0(v12);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_21_21();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_23_1();
    return v12(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_31_17(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_36(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_22_27();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_36();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_3_34();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_6_36();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_2_38();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  long long v28 = (void *)OUTLINED_FUNCTION_24_22(v27);
  *long long v28 = v29;
  v28[1] = SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_11();
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_48_0();
  return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t SuggestionsCATs.close(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_13_31(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  uint64_t v9 = OUTLINED_FUNCTION_13_0();
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  uint64_t v12 = OUTLINED_FUNCTION_34_1(v11);
  *(void *)(v0 + 104) = OUTLINED_FUNCTION_95_0(v12);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t SuggestionsCATs.close(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_31_17(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_36(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_22_27();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_36();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_3_34();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_6_36();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_2_38();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  long long v28 = (void *)OUTLINED_FUNCTION_24_22(v27);
  *long long v28 = v29;
  v28[1] = SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_48_0();
  return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t SuggestionsCATs.create(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_13_31(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  uint64_t v9 = OUTLINED_FUNCTION_13_0();
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  uint64_t v12 = OUTLINED_FUNCTION_34_1(v11);
  *(void *)(v0 + 104) = OUTLINED_FUNCTION_95_0(v12);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t SuggestionsCATs.create(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_31_17(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_36(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_22_27();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_36();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_3_34();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_6_36();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_2_38();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  long long v28 = (void *)OUTLINED_FUNCTION_24_22(v27);
  *long long v28 = v29;
  v28[1] = SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_11();
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_48_0();
  return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t SuggestionsCATs.disable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_13_31(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  uint64_t v9 = OUTLINED_FUNCTION_13_0();
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  uint64_t v12 = OUTLINED_FUNCTION_34_1(v11);
  *(void *)(v0 + 104) = OUTLINED_FUNCTION_95_0(v12);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(void);
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  char v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(unsigned char *)(v0 + 136);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_33_1();
  uint64_t v5 = OUTLINED_FUNCTION_31_17(v4);
  *(_OWORD *)(v5 + 16) = xmmword_2126D0;
  *(void *)(v5 + 32) = 0xD000000000000013;
  *(void *)(v5 + 40) = 0x8000000000225EF0;
  *(unsigned char *)(v5 + 48) = v3;
  *(void *)(v5 + 72) = &type metadata for Bool;
  *(void *)(v5 + 80) = 0x656D614E707061;
  *(void *)(v5 + 88) = 0xE700000000000000;
  OUTLINED_FUNCTION_42_1(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_36(v7);
  if (v8)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v9();
  }
  uint64_t v10 = OUTLINED_FUNCTION_22_27();
  *(void *)(v1 + 128) = 0xD000000000000013;
  *(void *)(v1 + 136) = 0x8000000000225F10;
  outlined init with copy of SpeakableString?(v10, v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_36();
  if (v8)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v11();
  }
  uint64_t v12 = OUTLINED_FUNCTION_3_34();
  outlined init with copy of SpeakableString?(v12, v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v8)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v13();
  }
  uint64_t v14 = OUTLINED_FUNCTION_6_36();
  outlined init with copy of SpeakableString?(v14, v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v8)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v15();
  }
  uint64_t v16 = OUTLINED_FUNCTION_2_38();
  outlined init with copy of SpeakableString?(v16, v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v8)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v17();
  }
  uint64_t v18 = swift_task_alloc();
  uint64_t v19 = (void *)OUTLINED_FUNCTION_24_22(v18);
  *uint64_t v19 = v20;
  v19[1] = SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_23_1();
  return v25(v21, v22, v23, v24, v25, v26, v27, v28);
}

uint64_t SuggestionsCATs.enable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_13_31(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  uint64_t v9 = OUTLINED_FUNCTION_13_0();
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  uint64_t v12 = OUTLINED_FUNCTION_34_1(v11);
  *(void *)(v0 + 104) = OUTLINED_FUNCTION_95_0(v12);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t SuggestionsCATs.enable(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_31_17(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_36(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_22_27();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_36();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_3_34();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_6_36();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_2_38();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  long long v28 = (void *)OUTLINED_FUNCTION_24_22(v27);
  *long long v28 = v29;
  v28[1] = SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_11();
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_48_0();
  return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t SuggestionsCATs.next(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_13_31(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  uint64_t v9 = OUTLINED_FUNCTION_13_0();
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  uint64_t v12 = OUTLINED_FUNCTION_34_1(v11);
  *(void *)(v0 + 104) = OUTLINED_FUNCTION_95_0(v12);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_21_21();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_23_1();
    return v12(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_23_1();
  return v1(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t SuggestionsCATs.next(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_31_17(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_36(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_22_27();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_36();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_3_34();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_6_36();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_2_38();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  long long v28 = (void *)OUTLINED_FUNCTION_24_22(v27);
  *long long v28 = v29;
  v28[1] = SuggestionsCATs.next(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_48_0();
  return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t SuggestionsCATs.open(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_13_31(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  uint64_t v9 = OUTLINED_FUNCTION_13_0();
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  uint64_t v12 = OUTLINED_FUNCTION_34_1(v11);
  *(void *)(v0 + 104) = OUTLINED_FUNCTION_95_0(v12);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t SuggestionsCATs.open(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_31_17(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_36(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_22_27();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_36();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_3_34();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_6_36();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_2_38();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  long long v28 = (void *)OUTLINED_FUNCTION_24_22(v27);
  *long long v28 = v29;
  v28[1] = SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_48_0();
  return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t SuggestionsCATs.previous(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_13_31(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  uint64_t v9 = OUTLINED_FUNCTION_13_0();
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  uint64_t v12 = OUTLINED_FUNCTION_34_1(v11);
  *(void *)(v0 + 104) = OUTLINED_FUNCTION_95_0(v12);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t SuggestionsCATs.previous(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_31_17(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_36(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_22_27();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_36();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_3_34();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_6_36();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_2_38();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  long long v28 = (void *)OUTLINED_FUNCTION_24_22(v27);
  *long long v28 = v29;
  v28[1] = SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_48_0();
  return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t SuggestionsCATs.search(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_13_31(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  uint64_t v9 = OUTLINED_FUNCTION_13_0();
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  uint64_t v12 = OUTLINED_FUNCTION_34_1(v11);
  *(void *)(v0 + 104) = OUTLINED_FUNCTION_95_0(v12);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t SuggestionsCATs.search(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_31_17(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_36(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_22_27();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_36();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_3_34();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_6_36();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_2_38();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  long long v28 = (void *)OUTLINED_FUNCTION_24_22(v27);
  *long long v28 = v29;
  v28[1] = SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_11();
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_48_0();
  return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t SuggestionsCATs.toggle(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_13_31(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  uint64_t v9 = OUTLINED_FUNCTION_13_0();
  uint64_t v10 = OUTLINED_FUNCTION_36_0(v9);
  uint64_t v11 = OUTLINED_FUNCTION_35_1(v10);
  uint64_t v12 = OUTLINED_FUNCTION_34_1(v11);
  *(void *)(v0 + 104) = OUTLINED_FUNCTION_95_0(v12);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t SuggestionsCATs.toggle(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  uint64_t v12 = OUTLINED_FUNCTION_31_17(v11);
  *(_OWORD *)(v12 + 16) = xmmword_2126D0;
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v12, (uint64_t)"coldStartSuggestion");
  uint64_t v14 = OUTLINED_FUNCTION_5_4(v13, (uint64_t)&type metadata for Bool);
  OUTLINED_FUNCTION_42_1(v14, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_7_36(v16);
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_31_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v18();
  }
  OUTLINED_FUNCTION_22_27();
  OUTLINED_FUNCTION_25_3((uint64_t)"appBundleIdentifier");
  outlined init with copy of SpeakableString?(v19, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_36();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_43_0();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v20();
  }
  uint64_t v21 = OUTLINED_FUNCTION_3_34();
  outlined init with copy of SpeakableString?(v21, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_6_36();
  outlined init with copy of SpeakableString?(v23, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_3();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_2_38();
  outlined init with copy of SpeakableString?(v25, v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v17)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v26();
  }
  uint64_t v27 = OUTLINED_FUNCTION_17_2();
  long long v28 = (void *)OUTLINED_FUNCTION_24_22(v27);
  *long long v28 = v29;
  v28[1] = SuggestionsCATs.cancel(coldStartSuggestion:appName:appBundleIdentifier:entityType:entityName:description:);
  OUTLINED_FUNCTION_45_11();
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_48_0();
  return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t SuggestionsCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return SuggestionsCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t SuggestionsCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  outlined init with copy of SpeakableString?(a1, (uint64_t)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v11;
}

uint64_t type metadata accessor for SuggestionsCATs()
{
  uint64_t result = type metadata singleton initialization cache for SuggestionsCATs;
  if (!type metadata singleton initialization cache for SuggestionsCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SuggestionsCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for SuggestionsCATs()
{
  return type metadata accessor for SuggestionsCATs();
}

uint64_t OUTLINED_FUNCTION_2_38()
{
  uint64_t result = *(void *)(v0 + 56);
  *(void *)(v1 + 272) = 0x7470697263736564;
  *(void *)(v1 + 280) = 0xEB000000006E6F69;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_34()
{
  uint64_t result = *(void *)(v0 + 40);
  *(void *)(v1 + 176) = 0x7954797469746E65;
  *(void *)(v1 + 184) = 0xEA00000000006570;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_36()
{
  uint64_t result = *(void *)(v1 + 48);
  *(void *)(v2 + 224) = 0x614E797469746E65;
  *(void *)(v2 + 232) = v0;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_36(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_12_36()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_13_31(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 24) = a3;
  *(void *)(v8 + 32) = a4;
  *(unsigned char *)(v8 + 136) = a2;
  *(void *)(v8 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_21_21()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_22_27()
{
  return *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_24_22(uint64_t result)
{
  *(void *)(v1 + 120) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_31_17(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_45_11()
{
  return *(void *)(v0 + 16);
}

uint64_t static VoiceCommandsParity.isParityIntent(intentName:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for parityIntentsList != -1) {
    swift_once();
  }
  uint64_t v4 = static VoiceCommandsParity.parityIntentsList;
  uint64_t v5 = *(void *)(static VoiceCommandsParity.parityIntentsList + 16);
  if (!v5) {
    return 0;
  }
  BOOL v6 = *(void *)(static VoiceCommandsParity.parityIntentsList + 32) == a1
    && *(void *)(static VoiceCommandsParity.parityIntentsList + 40) == a2;
  if (v6 || (OUTLINED_FUNCTION_10_34() & 1) != 0) {
    return 1;
  }
  if (v5 == 1) {
    return 0;
  }
  if (*(void *)(v4 + 48) == a1 && *(void *)(v4 + 56) == a2) {
    return 1;
  }
  uint64_t result = OUTLINED_FUNCTION_10_34();
  if (result) {
    return 1;
  }
  if (v5 == 2) {
    return 0;
  }
  uint64_t v9 = (void *)(v4 + 72);
  for (uint64_t i = 2; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (OUTLINED_FUNCTION_10_34() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v5) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static VoiceCommandsParity.shouldRequestUnlock(intent:)(void *a1)
{
  id v2 = [a1 typeName];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  if (v3 == 0xD000000000000029 && v5 == 0x80000000002239F0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v6 & 1) == 0) {
      return result;
    }
  }
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v8 = (void *)result;
    id v9 = a1;
    unint64_t v10 = outlined bridged method (pb) of @objc INSendMessageIntent.attachments.getter(v8);
    if (v10)
    {
      if (v10 >> 62) {
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v11 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8));
      }
      swift_bridgeObjectRelease();

      return v11 != 0;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

id static VoiceCommandsParity.processIntent(intent:)(void *a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v1 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v4 = v3 - v2;
  self;
  uint64_t v5 = (void *)swift_dynamicCastObjCClass();
  char v6 = a1;
  if (!v5) {
    goto LABEL_18;
  }
  id v7 = a1;
  unint64_t v8 = outlined bridged method (pb) of @objc INSendMessageIntent.recipients.getter(v5);
  if (v8)
  {
    unint64_t v9 = v8;
    if (v8 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_5;
      }
    }
    else if (*(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8)))
    {
LABEL_5:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v9 & 0xC000000000000001) == 0);
      if ((v9 & 0xC000000000000001) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(v9 + 32);
      }
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      id v12 = [v11 personHandle];
      if (v12)
      {
        uint64_t v13 = v12;
        outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v11, (SEL *)&selRef_contactIdentifier);
        uint64_t v15 = v14;
        swift_bridgeObjectRelease();
        if (v15
          || (outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v13, (SEL *)&selRef_value), uint64_t v17 = v16, swift_bridgeObjectRelease(), !v17))
        {
        }
        else
        {
          type metadata accessor for PersonNameComponents();
          OUTLINED_FUNCTION_19_15();
          __swift_storeEnumTagSinglePayload(v18, v19, v20, v21);
          id v22 = [v11 image];
          uint64_t v23 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v11, (SEL *)&selRef_customIdentifier);
          uint64_t v25 = v24;
          id v26 = objc_allocWithZone((Class)INPerson);
          id v49 = v13;
          id v27 = @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(v49, v4, 0, 0, v22, 0, 0, v23, v25);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_211C70;
          *(void *)(v28 + 32) = v27;
          uint64_t v50 = v28;
          specialized Array._endMutation()();
          id v47 = v27;
          id v46 = [v5 outgoingMessageType];
          uint64_t v29 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v5, (SEL *)&selRef_content);
          uint64_t v44 = v30;
          uint64_t v45 = v29;
          id v43 = [v5 speakableGroupName];
          uint64_t v31 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v5, (SEL *)&selRef_conversationIdentifier);
          uint64_t v33 = v32;
          uint64_t v34 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v5, (SEL *)&selRef_serviceName);
          uint64_t v36 = v35;
          id v37 = [v5 sender];
          uint64_t v38 = outlined bridged method (pb) of @objc INSendMessageIntent.attachments.getter(v5);
          id v39 = objc_allocWithZone((Class)INSendMessageIntent);
          id v40 = @nonobjc INSendMessageIntent.init(recipients:outgoingMessageType:content:speakableGroupName:conversationIdentifier:serviceName:sender:attachments:)(v50, (uint64_t)v46, v45, v44, v43, v31, v33, v34, v36, v37, v38);
          id v41 = [v5 _metadata];
          [v40 _setMetadata:v41];

          return v40;
        }
        return v7;
      }

      goto LABEL_17;
    }

    swift_bridgeObjectRelease();
  }
  else
  {
  }
LABEL_17:
  char v6 = a1;
LABEL_18:

  return v6;
}

uint64_t static VoiceCommandsParity.buildDirectInvocationParse(intent:app:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for parityIntentsList != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)static VoiceCommandsParity.parityIntentsList;
  swift_bridgeObjectRetain();
  id v5 = OUTLINED_FUNCTION_12_37();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  LOBYTE(v5) = specialized Sequence<>.contains(_:)(v6, v8, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (one-time initialization token for directInvocationIdMapping != -1) {
      swift_once();
    }
    uint64_t v9 = static VoiceCommandsParity.directInvocationIdMapping;
    id v10 = OUTLINED_FUNCTION_12_37();
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    specialized Dictionary.subscript.getter(v11, v13, v9);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    if (v15)
    {
      uint64_t v16 = App.appIdentifier.getter();
      if (v17)
      {
        uint64_t v18 = v16;
        uint64_t v19 = v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_212170;
        *(void *)(inited + 32) = 0x6449707061;
        *(void *)(inited + 40) = 0xE500000000000000;
        *(void *)(inited + 48) = v18;
        *(void *)(inited + 56) = v19;
        *(void *)(inited + 72) = &type metadata for String;
        *(void *)(inited + 80) = 0x746E65746E69;
        *(void *)(inited + 88) = 0xE600000000000000;
        *(void *)(inited + 120) = type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
        *(void *)(inited + 96) = a1;
        id v21 = a1;
        Dictionary.init(dictionaryLiteral:)();
        Parse.DirectInvocation.init(identifier:userData:)();
        uint64_t v22 = type metadata accessor for Parse.DirectInvocation();
        return __swift_storeEnumTagSinglePayload(a2, 0, 1, v22);
      }
      swift_bridgeObjectRelease();
    }
  }
  type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_19_15();

  return __swift_storeEnumTagSinglePayload(v24, v25, v26, v27);
}

uint64_t static VoiceCommandsParity.buildNLContextUpdate(intent:app:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for parityIntentsList != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static VoiceCommandsParity.parityIntentsList;
  swift_bridgeObjectRetain();
  id v3 = OUTLINED_FUNCTION_12_37();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  LOBYTE(v3) = specialized Sequence<>.contains(_:)(v4, v6, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {
    if (one-time initialization token for domainMapping != -1) {
      swift_once();
    }
    uint64_t v7 = static VoiceCommandsParity.domainMapping;
    id v8 = OUTLINED_FUNCTION_12_37();
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    specialized Dictionary.subscript.getter(v9, v11, v7);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    if (v13)
    {
      App.appIdentifier.getter();
      if (v14)
      {
        NLContextUpdate.init()();
        NLContextUpdate.weightedPromptTargetDomain.setter();
        NLContextUpdate.weightedPromptStrict.setter();
        type metadata accessor for MachineUtteranceBuilder();
        swift_allocObject();
        MachineUtteranceBuilder.init()();
        dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
        swift_release();
        swift_bridgeObjectRelease();
        dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
        swift_release();
        dispatch thunk of MachineUtteranceBuilder.build()();
        swift_release();
        NLContextUpdate.nlInput.setter();
        uint64_t v15 = 0;
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v15 = 1;
LABEL_11:
  uint64_t v16 = type metadata accessor for NLContextUpdate();

  return __swift_storeEnumTagSinglePayload(a1, v15, 1, v16);
}

uint64_t static VoiceCommandsParity.processExecutionResult(intent:executionResult:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INStartCallIntent, INStartCallIntentResponse>?);
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = v6 - v5;
  os_log_t v147 = (os_log_t)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v145 = v8;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v144 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  unint64_t v146 = (char *)&v144 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSendMessageIntent, INSendMessageIntentResponse>?);
  __chkstk_darwin(v14 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INSendMessageIntent, INSendMessageIntentResponse>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v149 = v19;
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v144 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  os_log_t v150 = (os_log_t)((char *)&v144 - v24);
  id v148 = a1;
  id v25 = [a1 typeName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  if (v26 == 0xD000000000000029 && v28 == 0x80000000002239F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    outlined init with copy of Any(a2, (uint64_t)v151);
    if (swift_dynamicCast())
    {
      __swift_storeEnumTagSinglePayload(v17, 0, 1, v18);
      uint64_t v30 = v149;
      os_log_t v29 = v150;
      (*(void (**)(os_log_t, uint64_t, uint64_t))(v149 + 32))(v150, v17, v18);
      (*(void (**)(uint64_t *, os_log_t, uint64_t))(v30 + 16))(v23, v29, v18);
      int v31 = (*(uint64_t (**)(uint64_t *, uint64_t))(v30 + 88))(v23, v18);
      if (v31 == enum case for RCHFlowResult.complete<A, B>(_:))
      {
        uint64_t v32 = OUTLINED_FUNCTION_7_37();
        v33(v32);
        uint64_t v34 = v23[1];
        uint64_t v35 = (void *)v23[2];
        swift_release();
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for Logger();
        int v37 = __swift_project_value_buffer(v36, (uint64_t)static Logger.voiceCommands);
        id v38 = v148;
        id v39 = v35;
        id v40 = v38;
        id v41 = v39;
        int v42 = v37;
        id v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_16_11(v44))
        {
          uint64_t v45 = swift_slowAlloc();
          LODWORD(v148) = v42;
          uint64_t v46 = v45;
          id v47 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v46 = 138412546;
          v151[0] = (uint64_t)v40;
          id v48 = v40;
          os_log_t v147 = v43;
          id v49 = v48;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v47 = v40;

          *(_WORD *)(v46 + 12) = 2112;
          v151[0] = (uint64_t)v41;
          id v50 = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v47[1] = v41;

          id v43 = v147;
          _os_log_impl(&dword_0, v147, (os_log_type_t)v148, "VoiceCommandsParity.processExecutionResult success with intent: %@, intentResponse: %@", (uint8_t *)v46, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
        else
        {
        }
        (*(void (**)(os_log_t, uint64_t))(v149 + 8))(v150, v18);
        return v34;
      }
      if (v31 == enum case for RCHFlowResult.error<A, B>(_:))
      {
        uint64_t v56 = OUTLINED_FUNCTION_7_37();
        v57(v56);
        uint64_t v34 = *v23;
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v58 = type metadata accessor for Logger();
        char v59 = (void *)OUTLINED_FUNCTION_26_1(v58, (uint64_t)static Logger.voiceCommands);
        os_log_type_t v60 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_16_11(v60))
        {
          uint64_t v61 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_15_2(v61);
          OUTLINED_FUNCTION_20(&dword_0, v62, v63, "VoiceCommandsParity.processExecutionResult has error");
          OUTLINED_FUNCTION_7_0();
        }

        OUTLINED_FUNCTION_5_31();
        v64();
        return v34;
      }
      if (v31 == enum case for RCHFlowResult.cancelled<A, B>(_:))
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v85 = type metadata accessor for Logger();
        unint64_t v86 = (void *)OUTLINED_FUNCTION_26_1(v85, (uint64_t)static Logger.voiceCommands);
        os_log_type_t v87 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_16_11(v87))
        {
          Swift::Bool v88 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_15_2(v88);
          OUTLINED_FUNCTION_20(&dword_0, v89, v90, "VoiceCommandsParity.processExecutionResult is cancelled");
          OUTLINED_FUNCTION_7_0();
        }

        OUTLINED_FUNCTION_5_31();
        v91();
        return 0;
      }
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v120 = type metadata accessor for Logger();
      char v121 = (void *)OUTLINED_FUNCTION_26_1(v120, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v122 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_16_11(v122))
      {
        uint64_t v123 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v123);
        OUTLINED_FUNCTION_20(&dword_0, v124, v125, "VoiceCommandsParity.processExecutionResult has unknown cases");
        OUTLINED_FUNCTION_7_0();
      }

      lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
      uint64_t v34 = swift_allocError();
      *unint64_t v126 = 3;
      char v127 = *(void (**)(void))(v30 + 8);
      OUTLINED_FUNCTION_5_31();
      v127();
      OUTLINED_FUNCTION_5_31();
      v127();
      return v34;
    }
    OUTLINED_FUNCTION_19_15();
    __swift_storeEnumTagSinglePayload(v51, v52, v53, v18);
    Swift::Int v54 = &demangling cache variable for type metadata for RCHFlowResult<INSendMessageIntent, INSendMessageIntentResponse>?;
    uint64_t v55 = v17;
    goto LABEL_36;
  }
  if (v26 == 0xD000000000000023 && v28 == 0x8000000000223A20)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v65 & 1) == 0)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v102 = type metadata accessor for Logger();
      __swift_project_value_buffer(v102, (uint64_t)static Logger.voiceCommands);
      id v103 = v148;
      Swift::String v96 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v96, v104))
      {

        goto LABEL_42;
      }
      Swift::Bool v105 = (uint8_t *)swift_slowAlloc();
      v151[0] = swift_slowAlloc();
      *(_DWORD *)Swift::Bool v105 = 136315138;
      id v106 = [v103 typeName];
      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v109 = v108;

      v151[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v109, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v96, v104, "VoiceCommandsParity.processExecutionResult cannot find intent name: %s", v105, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      goto LABEL_40;
    }
  }
  outlined init with copy of Any(a2, (uint64_t)v151);
  os_log_t v66 = v147;
  if (!swift_dynamicCast())
  {
    OUTLINED_FUNCTION_19_15();
    __swift_storeEnumTagSinglePayload(v92, v93, v94, (uint64_t)v66);
    Swift::Int v54 = &demangling cache variable for type metadata for RCHFlowResult<INStartCallIntent, INStartCallIntentResponse>?;
    uint64_t v55 = v7;
LABEL_36:
    outlined destroy of URL?(v55, v54);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v95 = type metadata accessor for Logger();
    Swift::String v96 = OUTLINED_FUNCTION_26_1(v95, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v97 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_16_11(v97)) {
      goto LABEL_41;
    }
    char v98 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v98);
    OUTLINED_FUNCTION_20(&dword_0, v99, v100, "VoiceCommandsParity.processExecutionResult cannot create executionResult for INSendMessageIntent.");
LABEL_40:
    OUTLINED_FUNCTION_7_0();
LABEL_41:

LABEL_42:
    lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
    uint64_t v34 = swift_allocError();
    *uint64_t v101 = 3;
    return v34;
  }
  __swift_storeEnumTagSinglePayload(v7, 0, 1, (uint64_t)v66);
  uint64_t v68 = v145;
  unint64_t v67 = v146;
  (*(void (**)(char *, uint64_t, os_log_t))(v145 + 32))(v146, v7, v66);
  (*(void (**)(uint64_t *, char *, os_log_t))(v68 + 16))(v12, v67, v66);
  int v69 = (*(uint64_t (**)(uint64_t *, os_log_t))(v68 + 88))(v12, v66);
  if (v69 == enum case for RCHFlowResult.complete<A, B>(_:))
  {
    uint64_t v70 = OUTLINED_FUNCTION_8_32();
    v71(v70);
    uint64_t v34 = v12[1];
    uint64_t v72 = (void *)v12[2];
    swift_release();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.voiceCommands);
    id v74 = v148;
    id v75 = v72;
    id v76 = v74;
    id v77 = v75;
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      unint64_t v81 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 138412546;
      os_log_t v150 = v78;
      v151[0] = (uint64_t)v76;
      uint64_t v82 = v34;
      id v83 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v81 = v76;

      uint64_t v34 = v82;
      *(_WORD *)(v80 + 12) = 2112;
      v151[0] = (uint64_t)v77;
      id v84 = v77;
      os_log_t v66 = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v81[1] = v77;

      uint64_t v78 = v150;
      _os_log_impl(&dword_0, v150, v79, "VoiceCommandsParity.processExecutionResult success with intent: %@, intentResponse: %@", (uint8_t *)v80, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
    (*(void (**)(char *, os_log_t))(v145 + 8))(v146, v66);
  }
  else if (v69 == enum case for RCHFlowResult.error<A, B>(_:))
  {
    uint64_t v110 = OUTLINED_FUNCTION_8_32();
    v111(v110);
    uint64_t v34 = *v12;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v112 = type metadata accessor for Logger();
    unint64_t v113 = (void *)OUTLINED_FUNCTION_26_1(v112, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v114 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_16_11(v114))
    {
      uint64_t v115 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v115);
      OUTLINED_FUNCTION_20(&dword_0, v116, v117, "VoiceCommandsParity.processExecutionResult has error");
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v118 = OUTLINED_FUNCTION_13_32();
    v119(v118);
  }
  else
  {
    if (v69 == enum case for RCHFlowResult.cancelled<A, B>(_:))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v128 = type metadata accessor for Logger();
      BOOL v129 = (void *)OUTLINED_FUNCTION_26_1(v128, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v130 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_16_11(v130))
      {
        char v131 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v131);
        OUTLINED_FUNCTION_20(&dword_0, v132, v133, "VoiceCommandsParity.processExecutionResult is cancelled");
        OUTLINED_FUNCTION_7_0();
      }

      (*(void (**)(char *, os_log_t))(v68 + 8))(v146, v66);
      return 0;
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v134 = type metadata accessor for Logger();
    v135 = (void *)OUTLINED_FUNCTION_26_1(v134, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v136 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_16_11(v136))
    {
      BOOL v137 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v137);
      OUTLINED_FUNCTION_20(&dword_0, v138, v139, "VoiceCommandsParity.processExecutionResult has unknown cases");
      OUTLINED_FUNCTION_7_0();
    }

    lazy protocol witness table accessor for type VoiceCommandsParityError and conformance VoiceCommandsParityError();
    uint64_t v34 = swift_allocError();
    *char v140 = 3;
    uint64_t v141 = *(void (**)(uint64_t))(v68 + 8);
    uint64_t v142 = OUTLINED_FUNCTION_13_32();
    v141(v142);
    ((void (*)(uint64_t *, os_log_t))v141)(v12, v66);
  }
  return v34;
}

void *VoiceCommandsParity.sendMessageIntentName.unsafeMutableAddressor()
{
  return &static VoiceCommandsParity.sendMessageIntentName;
}

unint64_t static VoiceCommandsParity.sendMessageIntentName.getter()
{
  return 0xD000000000000029;
}

void *VoiceCommandsParity.startCallIntentName.unsafeMutableAddressor()
{
  return &static VoiceCommandsParity.startCallIntentName;
}

unint64_t static VoiceCommandsParity.startCallIntentName.getter()
{
  return 0xD000000000000023;
}

void one-time initialization function for parityIntentsList()
{
  static VoiceCommandsParity.parityIntentsList = (uint64_t)&outlined read-only object #0 of one-time initialization function for parityIntentsList;
}

uint64_t *VoiceCommandsParity.parityIntentsList.unsafeMutableAddressor()
{
  if (one-time initialization token for parityIntentsList != -1) {
    swift_once();
  }
  return &static VoiceCommandsParity.parityIntentsList;
}

uint64_t static VoiceCommandsParity.parityIntentsList.getter()
{
  return static VoiceCommandsParity.parityIntentsList.getter(&one-time initialization token for parityIntentsList);
}

uint64_t one-time initialization function for domainMapping()
{
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static VoiceCommandsParity.domainMapping = result;
  return result;
}

uint64_t *VoiceCommandsParity.domainMapping.unsafeMutableAddressor()
{
  if (one-time initialization token for domainMapping != -1) {
    swift_once();
  }
  return &static VoiceCommandsParity.domainMapping;
}

uint64_t static VoiceCommandsParity.domainMapping.getter()
{
  return static VoiceCommandsParity.parityIntentsList.getter(&one-time initialization token for domainMapping);
}

uint64_t one-time initialization function for directInvocationIdMapping()
{
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static VoiceCommandsParity.directInvocationIdMapping = result;
  return result;
}

uint64_t *VoiceCommandsParity.directInvocationIdMapping.unsafeMutableAddressor()
{
  if (one-time initialization token for directInvocationIdMapping != -1) {
    swift_once();
  }
  return &static VoiceCommandsParity.directInvocationIdMapping;
}

uint64_t static VoiceCommandsParity.directInvocationIdMapping.getter()
{
  return static VoiceCommandsParity.parityIntentsList.getter(&one-time initialization token for directInvocationIdMapping);
}

uint64_t static VoiceCommandsParity.parityIntentsList.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

id @nonobjc INSendMessageIntent.init(recipients:outgoingMessageType:content:speakableGroupName:conversationIdentifier:serviceName:sender:attachments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11)
{
  if (a1)
  {
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for INPerson);
    v16.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (a4)
    {
LABEL_3:
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    v16.super.Class isa = 0;
    if (a4) {
      goto LABEL_3;
    }
  }
  NSString v17 = 0;
LABEL_6:
  if (a7)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v18 = 0;
  }
  if (a9)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  if (a11)
  {
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INSendMessageAttachment);
    v20.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v20.super.Class isa = 0;
  }
  id v21 = [v11 initWithRecipients:v16.super.isa outgoingMessageType:a2 content:v17 speakableGroupName:a5 conversationIdentifier:v18 serviceName:v19 sender:a10 attachments:v20.super.isa];

  return v21;
}

uint64_t outlined bridged method (pb) of @objc INSendMessageIntent.recipients.getter(void *a1)
{
  id v1 = [a1 recipients];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for INPerson);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unsigned char *storeEnumTagSinglePayload for VoiceCommandsParityError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x17E2C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for VoiceCommandsParityError()
{
}

void destroy for ParityFlowExecutionResult(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ParityFlowExecutionResult(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ParityFlowExecutionResult(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ParityFlowExecutionResult(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ParityFlowExecutionResult(*(id *)a2, v4, v5);
  unsigned int v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ParityFlowExecutionResult(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ParityFlowExecutionResult(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  unsigned int v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ParityFlowExecutionResult(v4, v5, v6);
  return a1;
}

void type metadata accessor for ParityFlowExecutionResult()
{
}

void type metadata accessor for VoiceCommandsParity()
{
}

uint64_t OUTLINED_FUNCTION_7_37()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_32()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_34()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id OUTLINED_FUNCTION_12_37()
{
  char v3 = *(const char **)(v1 + 376);
  return [v0 v3];
}

uint64_t OUTLINED_FUNCTION_13_32()
{
  return *(void *)(v0 - 160);
}

uint64_t UsoEntity_common_Number.intValue.getter()
{
  CodeGenBase.entity.getter();
  type metadata accessor for UsoEntity_common_MultipliedNumber();
  OUTLINED_FUNCTION_0_33();
  swift_release();
  if (v4)
  {
    uint64_t v0 = UsoEntity_common_MultipliedNumber.intValue.getter();
    swift_release();
  }
  else
  {
    CodeGenBase.entity.getter();
    type metadata accessor for UsoEntity_common_MixedFraction();
    OUTLINED_FUNCTION_0_33();
    swift_release();
    uint64_t v2 = UsoEntity_common_Number.definedIntValue.getter();
    if (v3)
    {
      CodeGenBase.entity.getter();
      type metadata accessor for UsoEntity_common_Integer();
      OUTLINED_FUNCTION_0_33();
      swift_release();
      return 0;
    }
    else
    {
      return v2;
    }
  }
  return v0;
}

uint64_t UsoEntity_common_MultipliedNumber.intValue.getter()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_MultipliedNumber.value.getter();
  swift_release();
  if (!v0)
  {
    uint64_t v1 = dispatch thunk of UsoEntity_common_MultipliedNumber.multiplier.getter();
    swift_release();
    if (!v1) {
      return 0;
    }
  }
  if (!dispatch thunk of UsoEntity_common_MultipliedNumber.value.getter()
    || (v2 = UsoEntity_common_Number.intValue.getter(), char v4 = v3, swift_release(), (v4 & 1) != 0))
  {
    uint64_t v2 = 1;
  }
  if (!dispatch thunk of UsoEntity_common_MultipliedNumber.multiplier.getter()
    || (uint64_t v5 = UsoEntity_common_Number.definedIntValue.getter(), v7 = v6, swift_release(), (v7 & 1) != 0))
  {
    uint64_t v5 = 1;
  }
  uint64_t result = v2 * v5;
  if ((unsigned __int128)(v2 * (__int128)v5) >> 64 != (v2 * v5) >> 63) {
    __break(1u);
  }
  return result;
}

uint64_t UsoEntity_common_MixedFraction.intValue.getter()
{
  dispatch thunk of UsoEntity_common_MixedFraction.numeratorValue.getter();
  if (v0 & 1) != 0 && (dispatch thunk of UsoEntity_common_MixedFraction.denominatorValue.getter(), (v1)) {
    return dispatch thunk of UsoEntity_common_MixedFraction.wholeValue.getter();
  }
  else {
    return 0;
  }
}

uint64_t UsoEntity_common_Number.definedIntValue.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Number.DefinedValues?);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  char v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v11 - v4;
  dispatch thunk of UsoEntity_common_Number.definedValue.getter();
  uint64_t v6 = type metadata accessor for UsoEntity_common_Number.DefinedValues();
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    outlined init with copy of UsoEntity_common_Number.DefinedValues?((uint64_t)v5, (uint64_t)v3);
    uint64_t v8 = *(void *)(v6 - 8);
    int v9 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v3, v6);
    if (v9 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Billion(_:))
    {
      uint64_t v7 = 1000000000;
    }
    else if (v9 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Twelve(_:))
    {
      uint64_t v7 = 12;
    }
    else if (v9 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Thousand(_:))
    {
      uint64_t v7 = 1000;
    }
    else if (v9 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Trillion(_:))
    {
      uint64_t v7 = 1000000000000;
    }
    else if (v9 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Million(_:))
    {
      uint64_t v7 = 1000000;
    }
    else if (v9 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_HundredThousand(_:))
    {
      uint64_t v7 = 100000;
    }
    else if (v9 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_TenThousand(_:))
    {
      uint64_t v7 = 10000;
    }
    else if (v9 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_Hundred(_:))
    {
      uint64_t v7 = 100;
    }
    else if (v9 == enum case for UsoEntity_common_Number.DefinedValues.common_Number_TenMillion(_:))
    {
      uint64_t v7 = 10000000;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v3, v6);
      uint64_t v7 = 0;
    }
  }
  outlined destroy of UsoEntity_common_Number.DefinedValues?((uint64_t)v5);
  return v7;
}

uint64_t outlined destroy of UsoEntity_common_Number.DefinedValues?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Number.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of UsoEntity_common_Number.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Number.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t UsoEntity_common_Number.doubleValue.getter()
{
  CodeGenBase.entity.getter();
  type metadata accessor for UsoEntity_common_MultipliedNumber();
  OUTLINED_FUNCTION_0_33();
  swift_release();
  if (!v6)
  {
    CodeGenBase.entity.getter();
    type metadata accessor for UsoEntity_common_MixedFraction();
    OUTLINED_FUNCTION_0_33();
    swift_release();
    uint64_t v3 = UsoEntity_common_Number.definedIntValue.getter();
    if ((v4 & 1) == 0)
    {
      double v2 = (double)v3;
      return *(void *)&v2;
    }
    CodeGenBase.entity.getter();
    type metadata accessor for UsoEntity_common_Decimal();
    OUTLINED_FUNCTION_0_33();
    swift_release();
    CodeGenBase.entity.getter();
    type metadata accessor for UsoEntity_common_Integer();
    OUTLINED_FUNCTION_0_33();
    swift_release();
LABEL_8:
    double v2 = 0.0;
    return *(void *)&v2;
  }
  uint64_t v0 = UsoEntity_common_MultipliedNumber.intValue.getter();
  if (v1)
  {
    swift_release();
    goto LABEL_8;
  }
  double v2 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v0));
  swift_release();
  return *(void *)&v2;
}

uint64_t specialized Double.init<A>(exactly:)(uint64_t result)
{
  double v1 = (double)result;
  if ((double)result >= 9.22337204e18)
  {
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if ((uint64_t)v1 == result) {
    *(double *)&uint64_t result = (double)result;
  }
  else {
    *(double *)&uint64_t result = 0.0;
  }
  return result;
}

uint64_t UsoEntity_common_MixedFraction.doubleValue.getter()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_MixedFraction.numeratorValue.getter();
  char v2 = v1;
  uint64_t v3 = dispatch thunk of UsoEntity_common_MixedFraction.denominatorValue.getter();
  if (v4) {
    goto LABEL_5;
  }
  if (!v3)
  {
    double v6 = 0.0;
    return *(void *)&v6;
  }
  if (v2)
  {
LABEL_5:
    double v6 = 0.0;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    double v6 = (double)v0 / (double)v3;
  }
  uint64_t v7 = dispatch thunk of UsoEntity_common_MixedFraction.wholeValue.getter();
  if ((v8 & 1) == 0)
  {
    if (v5) {
      double v9 = (double)v7;
    }
    else {
      double v9 = v6 + (double)v7;
    }
    double v6 = v9;
  }
  return *(void *)&v6;
}

uint64_t specialized Double.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    __chkstk_darwin(a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  if (v6) {
    return 0;
  }
  else {
    return 0;
  }
}

unsigned char *closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unsigned char *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_33()
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
}

id VoiceCommandsNLIntent.VoiceCommandUnit.unitType.getter(char a1)
{
  id v1 = objc_msgSend(self, *off_28F870[a1]);

  return v1;
}

uint64_t Logger.voiceCommands.unsafeMutableAddressor()
{
  return Logger.voiceCommands.unsafeMutableAddressor(&one-time initialization token for voiceCommands, (uint64_t)static Logger.voiceCommands);
}

uint64_t Logger.logAndCrash(_:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v35 = a6;
  int v36 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  NSString v17 = &v29[-v16];
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16))(v17, v7, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v18);
  outlined init with copy of Logger?((uint64_t)v17, (uint64_t)v15);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v18) == 1)
  {
    outlined destroy of Logger?((uint64_t)v15);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    NSArray v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    int v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v33 = a3;
      uint64_t v24 = v23;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v38 = v32;
      *(_DWORD *)uint64_t v24 = 136315650;
      uint64_t v34 = a4;
      uint64_t v25 = StaticString.description.getter();
      os_log_t v31 = v20;
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v38);
      int v30 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2048;
      uint64_t v37 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v27 = v31;
      _os_log_impl(&dword_0, v31, (os_log_type_t)v30, "FatalError at %s:%lu - %s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v15, v18);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for voiceCommands()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.voiceCommands);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_0_34();
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static Signposter.voiceCommands);
  __swift_project_value_buffer(v0, (uint64_t)static Signposter.voiceCommands);
  return OSSignposter.init(subsystem:category:)();
}

const char *LogConst.subsystem.unsafeMutableAddressor()
{
  return "com.apple.siri";
}

const char *LogConst.Category.voiceCommands.unsafeMutableAddressor()
{
  return "VoiceCommands";
}

uint64_t static Logger.voiceCommands.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.voiceCommands.getter(&one-time initialization token for voiceCommands, (uint64_t)static Logger.voiceCommands, a1);
}

uint64_t one-time initialization function for linkUI()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.linkUI);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.linkUI);
  return Logger.init(subsystem:category:)();
}

void *LogConst.subsystemSLF.unsafeMutableAddressor()
{
  return &static LogConst.subsystemSLF;
}

void *LogConst.Category.siriLinkUIPlugin.unsafeMutableAddressor()
{
  return &static LogConst.Category.siriLinkUIPlugin;
}

uint64_t Logger.linkUI.unsafeMutableAddressor()
{
  return Logger.voiceCommands.unsafeMutableAddressor(&one-time initialization token for linkUI, (uint64_t)static Logger.linkUI);
}

uint64_t static Logger.linkUI.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.voiceCommands.getter(&one-time initialization token for linkUI, (uint64_t)static Logger.linkUI, a1);
}

uint64_t one-time initialization function for siriKitUI()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.siriKitUI);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriKitUI);
  return Logger.init(subsystem:category:)();
}

void *LogConst.subsystemSKE.unsafeMutableAddressor()
{
  return &static LogConst.subsystemSKE;
}

void *LogConst.Category.siriKitUIPlugin.unsafeMutableAddressor()
{
  return &static LogConst.Category.siriKitUIPlugin;
}

uint64_t Logger.siriKitUI.unsafeMutableAddressor()
{
  return Logger.voiceCommands.unsafeMutableAddressor(&one-time initialization token for siriKitUI, (uint64_t)static Logger.siriKitUI);
}

uint64_t Logger.voiceCommands.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();

  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Logger.siriKitUI.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.voiceCommands.getter(&one-time initialization token for siriKitUI, (uint64_t)static Logger.siriKitUI, a1);
}

uint64_t static Logger.voiceCommands.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t static LogConst.subsystem.getter()
{
  return OUTLINED_FUNCTION_0_34();
}

unint64_t static LogConst.subsystemSLF.getter()
{
  return OUTLINED_FUNCTION_0_16(27);
}

unint64_t static LogConst.subsystemSKE.getter()
{
  return OUTLINED_FUNCTION_0_16(22);
}

uint64_t static LogConst.Category.voiceCommands.getter()
{
  return 0x6D6F436563696F56;
}

unint64_t static LogConst.Category.siriLinkUIPlugin.getter()
{
  return OUTLINED_FUNCTION_0_16(16);
}

uint64_t static LogConst.Category.siriKitUIPlugin.getter()
{
  return 0x5574694B69726953;
}

void type metadata accessor for Logger()
{
}

void type metadata accessor for LogConst()
{
}

void type metadata accessor for LogConst.Category()
{
}

uint64_t OUTLINED_FUNCTION_0_34()
{
  return 0x6C7070612E6D6F63;
}

void __swiftcall AutoShortcutFirstRunWatchVisual.init(shortcutPhrases:enableButtonLabel:cancelButtonLabel:moreShortcutsLabel:promptLabel:bundleId:)(SiriLinkFlowPlugin::AutoShortcutFirstRunWatchVisual *__return_ptr retstr, Swift::OpaquePointer shortcutPhrases, Swift::String enableButtonLabel, Swift::String cancelButtonLabel, Swift::String_optional moreShortcutsLabel, Swift::String promptLabel, Swift::String bundleId)
{
  retstr->shortcutPhrases = shortcutPhrases;
  retstr->enableButtonLabel = enableButtonLabel;
  retstr->cancelButtonLabel = cancelButtonLabel;
  retstr->moreShortcutsLabel = moreShortcutsLabel;
  retstr->promptLabel._uint64_t countAndFlagsBits = promptLabel._countAndFlagsBits;
  *(Swift::String *)&retstr->promptLabel._object = *(Swift::String *)&promptLabel._object;
  retstr->bundleId._object = bundleId._object;
}

uint64_t AutoShortcutFirstRunVisual.data.getter()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for Response();
  v0[2] = v1;
  OUTLINED_FUNCTION_1_0(v1);
  v0[3] = v2;
  v0[4] = OUTLINED_FUNCTION_25();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = AutoShortcutAppEnabledVisual.data.getter;
  return AutoShortcutFirstRunVisual.response.getter();
}

uint64_t AutoShortcutFirstRunWatchVisual.bundleId.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t AutoShortcutFirstRunVisual.response.getter()
{
  OUTLINED_FUNCTION_9_0();
  v1[58] = v2;
  v1[59] = v0;
  type metadata accessor for Separators();
  v1[60] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for ComponentWrapper();
  v1[61] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[62] = v4;
  v1[63] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for BinaryButton();
  v1[64] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[65] = v6;
  v1[66] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for Button.LabelStyle();
  v1[67] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[68] = v8;
  v1[69] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for _ProtoButton.FormAction();
  v1[70] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[71] = v10;
  v1[72] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for ButtonRole();
  v1[73] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[74] = v12;
  v1[75] = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for Button();
  v1[76] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v1[77] = v14;
  v1[78] = swift_task_alloc();
  v1[79] = swift_task_alloc();
  v1[80] = swift_task_alloc();
  v1[81] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Command();
  v1[82] = v15;
  OUTLINED_FUNCTION_1_0(v15);
  v1[83] = v16;
  v1[84] = swift_task_alloc();
  v1[85] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for CustomCanvas();
  v1[86] = v17;
  OUTLINED_FUNCTION_1_0(v17);
  v1[87] = v18;
  v1[88] = OUTLINED_FUNCTION_25();
  return _swift_task_switch(AutoShortcutFirstRunVisual.response.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *inited;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t);
  void (*v21)(uint64_t);
  __n128 *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t, uint64_t);
  uint64_t (*v38)(void);
  unsigned int v40;
  void (*v41)(uint64_t *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  uint64_t v1 = *(uint64_t **)(v0 + 472);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = one-time initialization token for encoder;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 != -1) {
    swift_once();
  }
  *(void *)(v0 + 224) = v2;
  *(void *)(v0 + 232) = 3;
  *(void *)(v0 + 240) = v3;
  *(void *)(v0 + 248) = v4;
  *(void *)(v0 + 256) = v5;
  *(void *)(v0 + 264) = v6;
  *(void *)(v0 + 272) = v7;
  *(void *)(v0 + 280) = v8;
  *(void *)(v0 + 288) = 0;
  *(void *)(v0 + 296) = 0;
  *(unsigned char *)(v0 + 304) = 1;
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v55 = *(void *)(v0 + 704);
  long long v57 = *(void *)(v0 + 696);
  uint64_t v56 = *(void *)(v0 + 688);
  uint64_t v10 = *(void *)(v0 + 680);
  id v48 = *(void *)(v0 + 672);
  uint64_t v11 = *(void *)(v0 + 664);
  uint64_t v12 = *(void *)(v0 + 656);
  id v47 = *(void *)(v0 + 648);
  id v50 = *(void *)(v0 + 640);
  uint64_t v52 = *(void *)(v0 + 632);
  uint64_t v53 = *(void *)(v0 + 624);
  uint64_t v58 = *(void *)(v0 + 616);
  uint64_t v51 = *(void *)(v0 + 608);
  os_log_type_t v60 = *(void *)(v0 + 552);
  char v59 = *(void *)(v0 + 544);
  int v42 = *(void *)(v0 + 536);
  id v49 = *(void *)(v0 + 528);
  id v43 = *(void *)(v0 + 512);
  os_log_type_t v44 = *(void *)(v0 + 520);
  uint64_t v45 = *(void *)(v0 + 488);
  uint64_t v46 = *(void *)(v0 + 496);
  uint64_t v13 = *(void *)(v0 + 472);
  Swift::Int v54 = *(void *)(v0 + 504);
  CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_2_12(inited, (__n128)xmmword_212160);
  *(void *)(v0 + 432) = v15;
  *(void *)(v0 + 440) = 0xEC0000006E6F6974;
  AnyHashable.init<A>(_:)();
  inited[6].n128_u64[0] = (unint64_t)&type metadata for String;
  inited[4].n128_u64[1] = 7562617;
  inited[5].n128_u64[0] = 0xE300000000000000;
  Dictionary.init(dictionaryLiteral:)();
  static Command.directInvocation(identifier:payload:isNavigation:)();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 336) = v12;
  *(void *)(v0 + 344) = &protocol witness table for Command;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 312));
  id v41 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
  v41(boxed_opaque_existential_1, v10, v12);
  OUTLINED_FUNCTION_5_32(*(void *)(v13 + 8));
  OUTLINED_FUNCTION_3_12();
  v18(v17);
  OUTLINED_FUNCTION_3_12();
  v20(v19);
  id v40 = enum case for Button.LabelStyle.automatic(_:);
  os_log_type_t v21 = *(void (**)(uint64_t))(v59 + 104);
  v21(v60);
  swift_bridgeObjectRetain();
  Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)();
  int v22 = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_2_12(v22, (__n128)xmmword_212160);
  *(void *)(v0 + 448) = v23;
  *(void *)(v0 + 456) = 0xEC0000006E6F6974;
  AnyHashable.init<A>(_:)();
  v22[6].n128_u64[0] = (unint64_t)&type metadata for String;
  v22[4].n128_u64[1] = 28526;
  v22[5].n128_u64[0] = 0xE200000000000000;
  Dictionary.init(dictionaryLiteral:)();
  static Command.directInvocation(identifier:payload:isNavigation:)();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 376) = v12;
  *(void *)(v0 + 384) = &protocol witness table for Command;
  uint64_t v24 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 352));
  v41(v24, v48, v12);
  OUTLINED_FUNCTION_5_32(*(void *)(v13 + 24));
  OUTLINED_FUNCTION_3_12();
  v27(v25, v26);
  ((void (*)(uint64_t, void, uint64_t))v21)(v60, v40, v42);
  OUTLINED_FUNCTION_3_12();
  v30(v28, v29);
  swift_bridgeObjectRetain();
  Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)();
  os_log_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
  v31(v52, v47, v51);
  v31(v53, v50, v51);
  BinaryButton.init(primaryButton:secondaryButton:componentName:linkIdentifier:)();
  *(void *)(v0 + 416) = v43;
  *(void *)(v0 + 424) = &protocol witness table for BinaryButton;
  uint64_t v32 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 392));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v44 + 16))(v32, v49, v43);
  static Separators.none.getter();
  ComponentWrapper.init(_:separators:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SectionConvertible>);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_212170;
  *(void *)(v33 + 56) = v56;
  *(void *)(v33 + 64) = &protocol witness table for CustomCanvas;
  uint64_t v34 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v33 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v57 + 16))(v34, v55, v56);
  *(void *)(v33 + 96) = v45;
  *(void *)(v33 + 104) = &protocol witness table for ComponentWrapper;
  uint64_t v35 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v33 + 72));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 16))(v35, v54, v45);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v54, v45);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v49, v43);
  int v36 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v36(v50, v51);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v37(v48, v12);
  v36(v47, v51);
  v37(v10, v12);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t destroy for AutoShortcutFirstRunVisual()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AutoShortcutFirstRunVisual(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AutoShortcutFirstRunVisual(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

void *assignWithTake for AutoShortcutFirstRunVisual(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[10];
  a1[9] = a2[9];
  a1[10] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutFirstRunVisual(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutFirstRunVisual(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutFirstRunVisual()
{
  return &type metadata for AutoShortcutFirstRunVisual;
}

double OUTLINED_FUNCTION_5_32@<D0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 168) = a1;
  *(void *)(v2 - 160) = v1;
  *(void *)(v2 - 96) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 - 128) = 0u;
  *(_OWORD *)(v2 - 112) = 0u;
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So08SAUIListL0Cs5NeverOTg504_s18def45Plugin30WorkflowCarplaySnippetProviderC23makek91Views19disambiguationItems12shortcutName11appBundleId09utteranceK0SaySo9SAAceViewCGSayAA016hij2J4l48VG_S2SSaySo022SAUIAssistantUtteranceU0CGtYaFSo08M10Y0CAMXEfU_SSTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    os_log_type_t v21 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (void **)(a1 + 80);
    while (1)
    {
      uint64_t v5 = *(v4 - 5);
      uint64_t v6 = (uint64_t)*(v4 - 4);
      uint64_t v7 = (uint64_t)*(v4 - 3);
      uint64_t v8 = *(v4 - 2);
      uint64_t v9 = (uint64_t)*(v4 - 1);
      uint64_t v10 = *v4;
      *(void *)&long long v14 = *(v4 - 6);
      *((void *)&v14 + 1) = v5;
      uint64_t v15 = v6;
      uint64_t v16 = v7;
      uint64_t v17 = v8;
      uint64_t v18 = v9;
      uint64_t v19 = v10;
      id v11 = v8;
      swift_bridgeObjectRetain();
      id v12 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in WorkflowCarplaySnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)(&v14, &v20);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v1) {
        break;
      }
      v4 += 7;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!--v2)
      {
        uint64_t v5 = v21;
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v5;
}

uint64_t WorkflowCarplaySnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowCarplaySnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:));
}

uint64_t WorkflowCarplaySnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  id v3 = [objc_allocWithZone((Class)SAIntentGroupSnippet) init];
  outlined bridged method (mbgnn) of @objc SAIntentGroupSnippet.appId.setter(v1, v2, v3);
  uint64_t v4 = (uint64_t (*)(id))v0[1];
  return v4(v3);
}

uint64_t WorkflowCarplaySnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowCarplaySnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:));
}

uint64_t WorkflowCarplaySnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#WorkflowCarplaySnippetProvider Creating empty snippet", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void **)(v0 + 16);

  uint64_t v6 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v5);
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    id v10 = [objc_allocWithZone((Class)SAIntentGroupSnippet) init];
    outlined bridged method (mbgnn) of @objc SAIntentGroupSnippet.appId.setter(v8, v9, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_0, v11, v12, "#WorkflowCarplaySnippetProvider cannot get appBundleId from intent", v13, 2u);
      swift_slowDealloc();
    }

    id v10 = 0;
  }
  long long v14 = *(uint64_t (**)(id))(v0 + 8);
  return v14(v10);
}

uint64_t WorkflowCarplaySnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[3] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowCarplaySnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:));
}

uint64_t WorkflowCarplaySnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So08SAUIListL0Cs5NeverOTg504_s18def45Plugin30WorkflowCarplaySnippetProviderC23makek91Views19disambiguationItems12shortcutName11appBundleId09utteranceK0SaySo9SAAceViewCGSayAA016hij2J4l48VG_S2SSaySo022SAUIAssistantUtteranceU0CGtYaFSo08M10Y0CAMXEfU_SSTf1cn_n(v1);
  id v3 = [objc_allocWithZone((Class)SAUIDisambiguationList) init];
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.allConfirmationOptions.setter((uint64_t)v2, v3, (unint64_t *)&lazy cache variable for type metadata for SAUIListItem, (uint64_t)SAUIListItem_ptr, (SEL *)&selRef_setItems_);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_211C70;
  *(void *)(v4 + 32) = v3;
  uint64_t v7 = v4;
  specialized Array._endMutation()();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v7);
}

void closure #1 in WorkflowCarplaySnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)(long long *a1@<X0>, void *a2@<X8>)
{
  long long v2 = a1[1];
  long long v17 = *a1;
  long long v18 = v2;
  long long v19 = a1[2];
  uint64_t v20 = *((void *)a1 + 6);
  id v3 = [objc_allocWithZone((Class)SAUIListItem) init];
  uint64_t v4 = specialized DisambiguationItemProtocol.toDisplayString()();
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v4, v5, v3, (SEL *)&selRef_setTitle_);
  id v6 = static SLFDisambiguationItemConverter.toDirectInvocationPayload(title:)(v17, *((uint64_t *)&v17 + 1));
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  uint64_t v7 = (void *)DeviceState.asInvocationContext.getter();
  [v7 setInputOrigin:SAInputOriginDialogButtonTapValue];
  uint64_t v8 = self;
  id v9 = [v8 runSiriKitExecutorCommandWithContext:v7 payload:v6];
  id v10 = [objc_allocWithZone((Class)SAIntentGroupSiriKitAppSelectionState) init];
  id v11 = [objc_allocWithZone((Class)SASyncAppIdentifyingInfo) init];
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 setBundleId:v12];

  [v10 setRequestedApp:v11];
  [v9 setAppSelectionState:v10];

  id v13 = [v8 wrapCommandInStartLocalRequest:v9];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_211C70;
  *(void *)(v14 + 32) = v13;
  v16[0] = v14;
  specialized Array._endMutation()();
  outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(v16[0], v3);

  *a2 = v3;
}

id WorkflowCarplaySnippetProvider.makeConfirmationOptions(confirmationButtonText:cancelButtonText:appBundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  static Device.current.getter();
  id v12 = static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)(0, a5, a6, v34);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
  static Device.current.getter();
  id v13 = static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)(2, a5, a6, v34);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
  id v14 = [objc_allocWithZone((Class)SAUIConfirmationOption) init];
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOption.label.setter(a1, a2, v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_211C70;
  *(void *)(v15 + 32) = v12;
  v34[0] = v15;
  specialized Array._endMutation()();
  uint64_t v16 = v34[0];
  id v17 = v12;
  outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(v16, v14);
  id v18 = [objc_allocWithZone((Class)SAUIConfirmationOption) init];
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOption.label.setter(a3, a4, v18);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_211C70;
  *(void *)(v19 + 32) = v13;
  v34[0] = v19;
  specialized Array._endMutation()();
  uint64_t v20 = (void *)v34[0];
  id v21 = v13;
  outlined bridged method (mbnn) of @objc SAUIButton.commands.setter((uint64_t)v20, v18);
  id v22 = [objc_allocWithZone((Class)SAUIConfirmationOptions) init];
  uint64_t v23 = outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(v14);
  if (v24)
  {
    String._bridgeToObjectiveC()();
    uint64_t v23 = OUTLINED_FUNCTION_2_39();
  }
  else
  {
    uint64_t v20 = 0;
  }
  OUTLINED_FUNCTION_1_34(v23, "setConfirmText:");

  uint64_t v25 = outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(v14);
  if (v25)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    Array._bridgeToObjectiveC()();
    uint64_t v25 = OUTLINED_FUNCTION_2_39();
  }
  else
  {
    uint64_t v20 = 0;
  }
  OUTLINED_FUNCTION_1_34(v25, "setConfirmCommands:");

  uint64_t v26 = outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(v18);
  if (v27)
  {
    String._bridgeToObjectiveC()();
    uint64_t v26 = OUTLINED_FUNCTION_2_39();
  }
  else
  {
    uint64_t v20 = 0;
  }
  OUTLINED_FUNCTION_1_34(v26, "setDenyText:");

  uint64_t v28 = outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(v18);
  if (v28)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    Array._bridgeToObjectiveC()();
    uint64_t v28 = OUTLINED_FUNCTION_2_39();
  }
  else
  {
    uint64_t v20 = 0;
  }
  OUTLINED_FUNCTION_1_34(v28, "setDenyCommands:");

  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_212180;
  *(void *)(v29 + 32) = v14;
  *(void *)(v29 + 40) = v18;
  v34[0] = v29;
  specialized Array._endMutation()();
  uint64_t v30 = v34[0];
  id v31 = v14;
  id v32 = v18;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.allConfirmationOptions.setter(v30, v22, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption, (uint64_t)SAUIConfirmationOption_ptr, (SEL *)&selRef_setAllConfirmationOptions_);
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(2037278020, 0xE400000000000000, v22, (SEL *)&selRef_setCancelTrigger_);

  return v22;
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationOption.label.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setLabel:v4];
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(void *a1)
{
  id v1 = [a1 label];
  if (!v1) {
    return 0;
  }
  long long v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(void *a1)
{
  id v1 = [a1 commands];
  if (!v1) {
    return 0;
  }
  long long v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.allConfirmationOptions.setter(uint64_t a1, void *a2)
{
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.cancelTrigger.setter(uint64_t a1, uint64_t a2, void *a3)
{
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.allConfirmationOptions.setter(uint64_t a1, void *a2, unint64_t *a3, uint64_t a4, SEL *a5)
{
  type metadata accessor for NSError(0, a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, *a5, isa);
}

void outlined bridged method (mbgnn) of @objc SAIntentGroupSnippet.appId.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setAppId:v4];
}

uint64_t type metadata accessor for WorkflowCarplaySnippetProvider()
{
  return self;
}

id OUTLINED_FUNCTION_1_34(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_39()
{
  return swift_bridgeObjectRelease();
}

_OWORD *CustomIntentDisambiguationItem.getRawValue()@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of CustomIntentDisambiguationRawValue(v1 + 48, (uint64_t)v6);
  if (v7) {
    return outlined init with take of Any(v6, (_OWORD *)a1);
  }
  uint64_t v4 = *(void *)&v6[0];
  swift_bridgeObjectRelease();
  id v5 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v4];
  double result = (_OWORD *)type metadata accessor for NSNumber();
  *(void *)(a1 + 24) = result;
  *(void *)a1 = v5;
  return result;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t Array<A>.toDisambiguationItemModels(intent:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[16] = v1;
  v0[17] = v2;
  v0[14] = v3;
  v0[15] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  v0[18] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;

  *(void *)(v0 + 104) = _swiftEmptyArrayStorage;
  uint64_t v1 = v0 + 104;
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 152) = v3;
  if (!v3) {
    goto LABEL_18;
  }
  long long v57 = v0 + 16;
  *(void *)(v0 + 160) = type metadata accessor for CATSpeakableString();
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v55 = (unint64_t)"tRunFlowFetchAutoShortcuts";
  while (1)
  {
    *(void *)(v0 + 168) = v4;
    uint64_t v6 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v7 = *(void **)(v0 + 112);
    outlined init with copy of CustomIntentDisambiguationItem(v2 + 88 * v4 + 32, v57);
    uint64_t v8 = *(void *)(v0 + 16);
    uint64_t v9 = *(void *)(v0 + 24);
    swift_bridgeObjectRetain();
    static CATSpeakableString.stripTTSHint(print:)(v8, v9, v10, v11, v12, v13, v14, v15, v52, v54, (void *)v55);
    id v17 = v16;
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 176) = v17;
    *(void *)(v0 + 184) = v19;
    static SLFDisambiguationItemConverter.toDirectInvocationPayloadData(intent:chosenItem:parameterName:)(v7, v57, v6, v5);
    *(void *)(v0 + 192) = v20;
    if (v20)
    {
      id v21 = 0;
      uint64_t v19 = v55 | 0x8000000000000000;
      id v17 = 0xD000000000000043;
    }
    else
    {
      swift_bridgeObjectRetain();
      id v21 = 2;
    }
    *(unsigned char *)(v0 + 97) = v21;
    *(void *)(v0 + 200) = v17;
    *(void *)(v0 + 208) = v19;
    uint64_t v23 = *(void *)(v0 + 32);
    id v22 = *(void *)(v0 + 40);
    if (v22)
    {
      swift_bridgeObjectRetain();
      static CATSpeakableString.stripTTSHint(print:)(v23, v22, v24, v25, v26, v27, v28, v29, v53, v54, (void *)v55);
      uint64_t v23 = v30;
      id v32 = v31;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v32 = 0;
    }
    *(void *)(v0 + 216) = v23;
    *(void *)(v0 + 224) = v32;
    if (*(void *)(v0 + 48)) {
      break;
    }
    uint64_t v33 = type metadata accessor for VisualProperty();
    OUTLINED_FUNCTION_12_16(v33);
    uint64_t v34 = *(void *)(v0 + 216);
    uint64_t v56 = *(void *)(v0 + 224);
    uint64_t v35 = *(unsigned char *)(v0 + 97);
    uint64_t v37 = *(void *)(v0 + 200);
    int v36 = *(void *)(v0 + 208);
    id v39 = *(void *)(v0 + 184);
    uint64_t v38 = *(void *)(v0 + 192);
    id v40 = v1;
    id v41 = *(void *)(v0 + 176);
    int v42 = *(void *)(v0 + 144);
    type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
    OUTLINED_FUNCTION_35_2();
    id v43 = v41;
    uint64_t v1 = v40;
    WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(v43, v39, v34, v56, v42, v37, v36, v38, v35);
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + (*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8)) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    os_log_type_t v44 = *(void *)(v0 + 152);
    uint64_t v45 = *(void *)(v0 + 168) + 1;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    outlined destroy of CustomIntentDisambiguationItem(v57);
    if (v45 == v44)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      swift_task_dealloc();
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_18_2();
      __asm { BRAA            X2, X16 }
    }
    uint64_t v4 = *(void *)(v0 + 168) + 1;
    uint64_t v2 = *(void *)(v0 + 136);
  }
  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v46;
  *uint64_t v46 = v0;
  v46[1] = Array<A>.toDisambiguationItemModels(intent:parameterName:);
  OUTLINED_FUNCTION_18_2();
  return INImage.convertToVisualProperty()(v47);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v0, v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;

  uint64_t v52 = v0 + 16;
  id v50 = (uint64_t)"tRunFlowFetchAutoShortcuts";
  uint64_t v51 = (void *)type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
  while (1)
  {
    uint64_t v2 = *(void *)(v0 + 216);
    uint64_t v1 = *(void *)(v0 + 224);
    uint64_t v3 = *(unsigned char *)(v0 + 97);
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 192);
    uint64_t v8 = *(void *)(v0 + 176);
    uint64_t v9 = *(void *)(v0 + 144);
    OUTLINED_FUNCTION_35_2();
    WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(v8, v7, v2, v1, v9, v5, v4, v6, v3);
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + (*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8)) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    id v10 = *(void *)(v0 + 152);
    id v11 = *(void *)(v0 + 168) + 1;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    outlined destroy of CustomIntentDisambiguationItem(v52);
    if (v11 == v10)
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_18_2();
      __asm { BRAA            X2, X16 }
    }
    id v12 = *(void *)(v0 + 168) + 1;
    *(void *)(v0 + 168) = v12;
    id v13 = *(void *)(v0 + 128);
    uint64_t v15 = *(void **)(v0 + 112);
    id v14 = *(void *)(v0 + 120);
    outlined init with copy of CustomIntentDisambiguationItem(*(void *)(v0 + 136) + 88 * v12 + 32, v52);
    uint64_t v16 = *(void *)(v0 + 16);
    id v17 = *(void *)(v0 + 24);
    swift_bridgeObjectRetain();
    static CATSpeakableString.stripTTSHint(print:)(v16, v17, v18, v19, v20, v21, v22, v23, v48, v50, v51);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 176) = v25;
    *(void *)(v0 + 184) = v27;
    static SLFDisambiguationItemConverter.toDirectInvocationPayloadData(intent:chosenItem:parameterName:)(v15, v52, v14, v13);
    *(void *)(v0 + 192) = v28;
    if (v28)
    {
      uint64_t v29 = 0;
      uint64_t v27 = v50 | 0x8000000000000000;
      uint64_t v25 = 0xD000000000000043;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = 2;
    }
    *(unsigned char *)(v0 + 97) = v29;
    *(void *)(v0 + 200) = v25;
    *(void *)(v0 + 208) = v27;
    id v31 = *(void *)(v0 + 32);
    uint64_t v30 = *(void *)(v0 + 40);
    if (v30)
    {
      swift_bridgeObjectRetain();
      static CATSpeakableString.stripTTSHint(print:)(v31, v30, v32, v33, v34, v35, v36, v37, v49, v50, v51);
      id v31 = v38;
      id v40 = v39;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v40 = 0;
    }
    *(void *)(v0 + 216) = v31;
    *(void *)(v0 + 224) = v40;
    if (*(void *)(v0 + 48)) {
      break;
    }
    id v41 = type metadata accessor for VisualProperty();
    OUTLINED_FUNCTION_12_16(v41);
  }
  os_log_type_t v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v44;
  *os_log_type_t v44 = v0;
  v44[1] = Array<A>.toDisambiguationItemModels(intent:parameterName:);
  OUTLINED_FUNCTION_18_2();
  return INImage.convertToVisualProperty()(v45);
}

uint64_t CustomIntentDisambiguationItem.init(component:rawValue:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v4 = a1[1];
  *a3 = *a1;
  a3[1] = v4;
  a3[2] = a1[2];
  uint64_t v5 = (uint64_t)(a3 + 3);
  outlined init with copy of CustomIntentDisambiguationRawValue(a2, (uint64_t)(a3 + 3));
  outlined init with copy of CustomIntentDisambiguationRawValue(v5, (uint64_t)v8);
  if (v8[32] == 1)
  {
    outlined destroy of CustomIntentDisambiguationRawValue(a2);
    uint64_t v6 = v8;
  }
  else
  {
    specialized Array.append<A>(contentsOf:)();
    uint64_t v6 = (unsigned char *)a2;
  }
  return outlined destroy of CustomIntentDisambiguationRawValue((uint64_t)v6);
}

uint64_t CustomIntentDisambiguationItem.getVoiceCommandPayloadsForItem()()
{
  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_VoiceCommandPayload.init()();
  type metadata accessor for CATSpeakableString();
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  swift_bridgeObjectRetain();
  static CATSpeakableString.stripTTSHint(print:)(v1, v2, v3, v4, v5, v6, v7, v8, v14, (uint64_t)_swiftEmptyArrayStorage, v16);
  swift_bridgeObjectRelease();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)();
  swift_bridgeObjectRelease();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                 + (v15 & 0xFFFFFFFFFFFFFF8)) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v9 = v0[5];
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v11 = v9 + 40;
    do
    {
      swift_allocObject();
      swift_bridgeObjectRetain();
      UsoEntityBuilder_common_VoiceCommandPayload.init()();
      dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v11 += 16;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  unint64_t v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  swift_bridgeObjectRelease();
  swift_release();
  return v15;
}

uint64_t CustomIntentDisambiguationItem.toDisambiguationItemModel(intent:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  v1[6] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;

  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(uint64_t **)(v0 + 40);
  uint64_t v4 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  type metadata accessor for CATSpeakableString();
  uint64_t v5 = *v1;
  uint64_t v6 = v1[1];
  swift_bridgeObjectRetain();
  static CATSpeakableString.stripTTSHint(print:)(v5, v6, v7, v8, v9, v10, v11, v12, v38, v40, v42);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 56) = v14;
  *(void *)(v0 + 64) = v16;
  static SLFDisambiguationItemConverter.toDirectInvocationPayloadData(intent:chosenItem:parameterName:)(v4, (uint64_t)v1, v3, v2);
  *(void *)(v0 + 72) = v17;
  if (v17)
  {
    id v18 = 0;
    uint64_t v16 = 0x8000000000226000;
    uint64_t v14 = 0xD000000000000043;
  }
  else
  {
    swift_bridgeObjectRetain();
    id v18 = 2;
  }
  *(unsigned char *)(v0 + 120) = v18;
  *(void *)(v0 + 80) = v14;
  *(void *)(v0 + 88) = v16;
  uint64_t v19 = *(void **)(v0 + 40);
  uint64_t v20 = v19[2];
  id v21 = v19[3];
  if (v21)
  {
    swift_bridgeObjectRetain();
    static CATSpeakableString.stripTTSHint(print:)(v20, v21, v22, v23, v24, v25, v26, v27, v39, v41, v43);
    uint64_t v20 = v28;
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void **)(v0 + 40);
  }
  else
  {
    uint64_t v30 = 0;
  }
  *(void *)(v0 + 96) = v20;
  *(void *)(v0 + 104) = v30;
  if (!v19[4])
  {
    uint64_t v35 = type metadata accessor for VisualProperty();
    OUTLINED_FUNCTION_12_16(v35);
    OUTLINED_FUNCTION_5_33();
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_0_35();
    swift_task_dealloc();
    OUTLINED_FUNCTION_28_0();
    __asm { BRAA            X2, X16 }
  }
  id v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v31;
  *id v31 = v0;
  v31[1] = CustomIntentDisambiguationItem.toDisambiguationItemModel(intent:parameterName:);
  OUTLINED_FUNCTION_28_0();
  return INImage.convertToVisualProperty()(v32);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v0, v1, v2);
}

void CustomIntentDisambiguationItem.toDisambiguationItemModel(intent:parameterName:)()
{
  OUTLINED_FUNCTION_5_33();
  OUTLINED_FUNCTION_35_2();
  OUTLINED_FUNCTION_0_35();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_0();
  __asm { BRAA            X2, X16 }
}

void type metadata accessor for CustomIntentDisambiguationItemContainer()
{
}

uint64_t destroy for CustomIntentDisambiguationRawValue(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for CustomIntentDisambiguationRawValue(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    char v5 = 1;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    swift_bridgeObjectRetain();
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithCopy for CustomIntentDisambiguationRawValue(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 32) = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 32) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CustomIntentDisambiguationRawValue(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
    else
    {
      LOBYTE(v5) = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 32) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentDisambiguationRawValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CustomIntentDisambiguationRawValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 32) = 0;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CustomIntentDisambiguationRawValue(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 32);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for CustomIntentDisambiguationRawValue(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

void type metadata accessor for CustomIntentDisambiguationRawValue()
{
}

uint64_t destroy for CustomIntentDisambiguationItem(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 80))
  {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 48);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for CustomIntentDisambiguationItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = *(void **)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v6;
  char v8 = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v7;
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 72) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 48, a2 + 48);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v11;
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(a1 + 80) = v8;
  return a1;
}

uint64_t assignWithCopy for CustomIntentDisambiguationItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  id v6 = v5;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of CustomIntentDisambiguationRawValue(a1 + 48);
    if (*(unsigned char *)(a2 + 80))
    {
      uint64_t v7 = *(void *)(a2 + 72);
      *(void *)(a1 + 72) = v7;
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 48, a2 + 48);
      *(unsigned char *)(a1 + 80) = 1;
    }
    else
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 80) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for CustomIntentDisambiguationItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  id v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of CustomIntentDisambiguationRawValue(a1 + 48);
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentDisambiguationItem(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 81))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomIntentDisambiguationItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for CustomIntentDisambiguationItem()
{
}

void *OUTLINED_FUNCTION_0_35()
{
  return WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(v6, v5, v0, v1, v7, v3, v2, v4, v8);
}

uint64_t OUTLINED_FUNCTION_5_33()
{
  return type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
}

uint64_t IntelligenceFlowFeatureFlags.isEnabled.getter(char a1)
{
  char v1 = a1 & 1;
  uint64_t v5 = &type metadata for IntelligenceFlowFeatureFlags;
  unint64_t v6 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlags and conformance IntelligenceFlowFeatureFlags();
  v4[0] = v1;
  char v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v2 & 1;
}

const char *IntelligenceFlowFeatureFlags.domain.getter()
{
  return "IntelligenceFlow";
}

const char *IntelligenceFlowFeatureFlags.feature.getter(char a1)
{
  if (a1) {
    return "FullPlanner";
  }
  else {
    return "IntelligenceFlow";
  }
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance IntelligenceFlowFeatureFlags()
{
  return IntelligenceFlowFeatureFlags.feature.getter(*v0);
}

unsigned char *storeEnumTagSinglePayload for IntelligenceFlowFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x182BFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IntelligenceFlowFeatureFlags()
{
  return &type metadata for IntelligenceFlowFeatureFlags;
}

uint64_t static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)()
{
  uint64_t v160 = type metadata accessor for Google_Protobuf_StringValue();
  OUTLINED_FUNCTION_0_2();
  uint64_t v147 = v0;
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_50_1();
  uint64_t v159 = v2;
  OUTLINED_FUNCTION_23_14();
  uint64_t v166 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  OUTLINED_FUNCTION_0_2();
  uint64_t v161 = v3;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_50_1();
  uint64_t v164 = v5;
  OUTLINED_FUNCTION_23_14();
  uint64_t v153 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  OUTLINED_FUNCTION_0_2();
  uint64_t v152 = v6;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_50_1();
  uint64_t v151 = v8;
  OUTLINED_FUNCTION_23_14();
  uint64_t v150 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  OUTLINED_FUNCTION_0_2();
  uint64_t v149 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_50_1();
  uint64_t v148 = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v12 - 8);
  OUTLINED_FUNCTION_50_1();
  uint64_t v155 = v13;
  OUTLINED_FUNCTION_23_14();
  uint64_t v162 = type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v158 = v14;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_25_6();
  uint64_t v154 = v16;
  __chkstk_darwin(v17);
  unint64_t v157 = (char *)&v147 - v18;
  OUTLINED_FUNCTION_23_14();
  uint64_t v165 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v168 = v19;
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_25_6();
  Swift::Int v156 = v21;
  uint64_t v23 = __chkstk_darwin(v22);
  v163 = (char *)&v147 - v24;
  __chkstk_darwin(v23);
  char v167 = (char *)&v147 - v25;
  OUTLINED_FUNCTION_23_14();
  type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_2();
  uint64_t v170 = v27;
  uint64_t v171 = v26;
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_50_1();
  unint64_t v169 = v28;
  uint64_t v29 = OUTLINED_FUNCTION_23_14();
  type metadata accessor for VoiceCommandsNLIntent(v29);
  OUTLINED_FUNCTION_40();
  __chkstk_darwin(v30);
  id v32 = (char *)&v147 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_2();
  uint64_t v35 = v34;
  uint64_t v37 = __chkstk_darwin(v36);
  id v39 = (char *)&v147 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  id v41 = (char *)&v147 - v40;
  uint64_t v42 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v44 = v43;
  __chkstk_darwin(v45);
  id v47 = (void (*)(uint64_t))((char *)&v147 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_59_0();
  v48();
  int v49 = (*(uint64_t (**)(void (*)(uint64_t), uint64_t))(v44 + 88))(v47, v42);
  if (v49 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v50 = OUTLINED_FUNCTION_2_40();
    v51(v50);
    OUTLINED_FUNCTION_15_28();
    v52();
    OUTLINED_FUNCTION_14_20();
    if (!v134) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.voiceCommands);
    Swift::Int v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl(&dword_0, v54, v55, "VoiceCommandsConfirmationUtils getVoiceCommandConfirmation received NLv3 intent", v56, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_59_0();
    v57();
    if (one-time initialization token for voiceCommandConfirmationNode != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent();
    IntentNodeTraversable.value<A>(forNode:)();
    uint64_t v58 = v173;
    outlined destroy of VoiceCommandsNLIntent((uint64_t)v32);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v41, v33);
    return v58;
  }
  if (v49 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v59 = OUTLINED_FUNCTION_2_40();
    v60(v59);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    OUTLINED_FUNCTION_15_28();
    v61();
    OUTLINED_FUNCTION_59_0();
    v62();
    if (one-time initialization token for voiceCommandConfirmationNode != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent();
    IntentNodeTraversable.value<A>(forNode:)();
    uint64_t v58 = v173;
    outlined destroy of VoiceCommandsNLIntent((uint64_t)v32);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v39, v33);
    return v58;
  }
  if (v49 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v63 = OUTLINED_FUNCTION_2_40();
    v64(v63);
    (*(void (**)(unint64_t, void (*)(uint64_t), uint64_t))(v170 + 32))(v169, v47, v171);
    OUTLINED_FUNCTION_14_20();
    if (!v134) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.voiceCommands);
    os_log_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl(&dword_0, v66, v67, "VoiceCommandsConfirmationUtils getVoiceCommandConfirmation received direct Invocation", v68, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000003DLL && v69 == 0x8000000000225B90)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v85 & 1) == 0)
      {
LABEL_29:
        os_log_type_t v87 = (void *)Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_16_11(v88))
        {
          *(_WORD *)OUTLINED_FUNCTION_33() = 0;
          OUTLINED_FUNCTION_20(&dword_0, v89, v90, "#VoiceCommandConfirmationUtils received unsupported direct invocation");
          OUTLINED_FUNCTION_7_0();
        }

        uint64_t v91 = OUTLINED_FUNCTION_9_37();
        v92(v91);
        return 3;
      }
    }
    uint64_t v86 = Parse.DirectInvocation.userData.getter();
    if (v86)
    {
      uint64_t v58 = static SLFConfirmationItemConverter.toVoiceCommandConfirmation(userData:)(v86);
      swift_bridgeObjectRelease();
      if (v58 != 3)
      {
        uint64_t v104 = OUTLINED_FUNCTION_9_37();
        v105(v104);
        return v58;
      }
    }
    goto LABEL_29;
  }
  if (v49 != enum case for Parse.uso(_:))
  {
    OUTLINED_FUNCTION_14_20();
    if (!v134) {
      swift_once();
    }
    uint64_t v93 = type metadata accessor for Logger();
    __swift_project_value_buffer(v93, (uint64_t)static Logger.voiceCommands);
    uint64_t v94 = (void *)Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_16_11(v95))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_20(&dword_0, v96, v97, "VoiceCommandsConfirmationUtils getVoiceCommandConfirmation unsupported input type");
      OUTLINED_FUNCTION_7_0();
    }

    (*(void (**)(void (*)(uint64_t), uint64_t))(v44 + 8))(v47, v42);
    return 3;
  }
  uint64_t v70 = OUTLINED_FUNCTION_2_40();
  v71(v70);
  uint64_t v72 = v167;
  uint64_t v73 = v168;
  uint64_t v74 = v165;
  (*(void (**)(char *, void (*)(uint64_t), uint64_t))(v168 + 32))(v167, v47, v165);
  OUTLINED_FUNCTION_14_20();
  if (!v134) {
    swift_once();
  }
  uint64_t v75 = type metadata accessor for Logger();
  uint64_t v76 = __swift_project_value_buffer(v75, (uint64_t)static Logger.voiceCommands);
  id v77 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
  uint64_t v78 = v163;
  v77(v163, v72, v74);
  uint64_t v171 = v76;
  os_log_type_t v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v79, v80))
  {
    uint64_t v81 = swift_slowAlloc();
    uint64_t v173 = swift_slowAlloc();
    *(_DWORD *)uint64_t v81 = 136315138;
    id v47 = (void (*)(uint64_t))(v81 + 12);
    uint64_t v170 = v81 + 4;
    v77(v156, v78, v74);
    uint64_t v82 = String.init<A>(describing:)();
    uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, &v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v84 = OUTLINED_FUNCTION_10_35();
    ((void (*)(uint64_t))(v81 + 12))(v84);
    _os_log_impl(&dword_0, v79, v80, "#VoiceCommandConfirmationUtils gets uso parse: %s", (uint8_t *)v81, 0xCu);
    swift_arrayDestroy();
    uint64_t v72 = v167;
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v98 = OUTLINED_FUNCTION_10_35();
    v47(v98);
  }

  if ((SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) == 0)
  {
LABEL_73:
    uint64_t v143 = OUTLINED_FUNCTION_13_33();
    v47(v143);
    return 3;
  }
  uint64_t v99 = v157;
  USOParse.userParse.getter();
  uint64_t v100 = static ConversionUtils.toLegacyPreferredUserDialogAct(from:)();
  uint64_t v101 = *(void (**)(char *, uint64_t))(v158 + 8);
  v101(v99, v162);
  if (v100)
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      swift_unknownObjectRelease();
      uint64_t v102 = v72;
      uint64_t v103 = v74;
LABEL_42:
      ((void (*)(char *, uint64_t))v47)(v102, v103);
      return 0;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      swift_unknownObjectRelease();
      id v106 = v72;
      uint64_t v107 = v74;
      goto LABEL_80;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      swift_unknownObjectRelease();
      uint64_t v108 = OUTLINED_FUNCTION_13_33();
      v47(v108);
      return 2;
    }
  }
  v163 = (char *)v100;
  unint64_t v109 = v154;
  USOParse.userParse.getter();
  uint64_t v110 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  v101(v109, v162);
  uint64_t v111 = v155;
  specialized Collection.first.getter(v110, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, v155);
  swift_bridgeObjectRelease();
  uint64_t v112 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (__swift_getEnumTagSinglePayload(v111, 1, v112) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v111);
    unint64_t v113 = (void *)Logger.logObject.getter();
    os_log_type_t v114 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_16_11(v114))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_20(&dword_0, v115, v116, "#VoiceCommandConfirmationUtils uso parse does not have identifiers, returning nil");
      OUTLINED_FUNCTION_7_0();
    }

    goto LABEL_72;
  }
  uint64_t v117 = v148;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  OUTLINED_FUNCTION_40();
  (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v111, v112);
  uint64_t v119 = v151;
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v117, v150);
  uint64_t v120 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v119, v153);
  uint64_t v121 = *(void *)(v120 + 16);
  if (!v121)
  {
LABEL_71:
    swift_bridgeObjectRelease();
LABEL_72:
    swift_unknownObjectRelease();
    goto LABEL_73;
  }
  uint64_t v171 = *(void *)(v161 + 16);
  unint64_t v122 = (*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
  uint64_t v162 = v120;
  unint64_t v123 = v120 + v122;
  uint64_t v124 = (void (**)(uint64_t, uint64_t))(v147 + 8);
  uint64_t v125 = (void (**)(uint64_t, uint64_t))(v161 + 8);
  v161 += 16;
  uint64_t v126 = *(void *)(v161 + 56);
  unint64_t v169 = 0x8000000000227F10;
  uint64_t v170 = v126;
  uint64_t v127 = v159;
  while (1)
  {
    OUTLINED_FUNCTION_59_0();
    v128();
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v129 = Google_Protobuf_StringValue.value.getter();
    uint64_t v131 = v130;
    (*v124)(v127, v160);
    if (v129 == 0xD000000000000018 && v131 == v169)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v132 & 1) == 0)
      {
        uint64_t v141 = OUTLINED_FUNCTION_7_38();
        v142(v141);
        goto LABEL_70;
      }
    }
    BOOL v134 = Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x747065636361 && v133 == 0xE600000000000000;
    if (v134)
    {
      swift_bridgeObjectRelease();
LABEL_77:
      swift_unknownObjectRelease();
      (*v125)(v164, v166);
      swift_bridgeObjectRelease();
      uint64_t v102 = v167;
      uint64_t v103 = v165;
      goto LABEL_42;
    }
    char v135 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v135) {
      goto LABEL_77;
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x7463656A6572 && v136 == 0xE600000000000000) {
      break;
    }
    char v138 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v139 = OUTLINED_FUNCTION_7_38();
    v140(v139);
    if (v138) {
      goto LABEL_79;
    }
LABEL_70:
    v123 += v170;
    if (!--v121) {
      goto LABEL_71;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v145 = OUTLINED_FUNCTION_7_38();
  v146(v145);
LABEL_79:
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  id v106 = v167;
  uint64_t v107 = v165;
LABEL_80:
  ((void (*)(char *, uint64_t))v47)(v106, v107);
  return 1;
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))&type metadata accessor for Location, a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))&type metadata accessor for ContactHandle, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  if (v3)
  {
    OUTLINED_FUNCTION_40();
    uint64_t v5 = OUTLINED_FUNCTION_6_37();
    v6(v5);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return __swift_storeEnumTagSinglePayload(a2, v7, 1, v4);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))&type metadata accessor for Contact, a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))&type metadata accessor for TemplatingSection, a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))&type metadata accessor for UsoIdentifier, a2);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = a2(0);
  if (v4)
  {
    OUTLINED_FUNCTION_40();
    uint64_t v6 = OUTLINED_FUNCTION_6_37();
    v7(v6);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }

  return __swift_storeEnumTagSinglePayload(a3, v8, 1, v5);
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    outlined init with copy of CustomIntentDisambiguationItem(a1 + 32, a2);
  }
  else
  {
    *(unsigned char *)(a2 + 80) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    outlined init with copy of Any(a1 + 32, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t static VoiceCommandConfirmationUtils.getSiriKitConfirmationState(parse:)@<X0>(uint64_t a1@<X8>)
{
  switch(static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)())
  {
    case 1u:
      uint64_t v2 = (unsigned int *)&enum case for SiriKitConfirmationState.rejected(_:);
      break;
    case 2u:
      uint64_t v2 = (unsigned int *)&enum case for SiriKitConfirmationState.cancelled(_:);
      break;
    case 3u:
      uint64_t v2 = (unsigned int *)&enum case for SiriKitConfirmationState.unset(_:);
      break;
    default:
      uint64_t v2 = (unsigned int *)&enum case for SiriKitConfirmationState.confirmed(_:);
      break;
  }
  uint64_t v3 = *v2;
  type metadata accessor for SiriKitConfirmationState();
  OUTLINED_FUNCTION_40();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 104);

  return v6(a1, v3, v4);
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for VoiceCommandConfirmationUtils()
{
  return &type metadata for VoiceCommandConfirmationUtils;
}

uint64_t OUTLINED_FUNCTION_2_40()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_37()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_38()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_37()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_35()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_33()
{
  return v0;
}

uint64_t Measurement.asLocalizedString(locale:)()
{
  id v0 = [objc_allocWithZone((Class)NSMeasurementFormatter) init];
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  [v0 setLocale:isa];

  [v0 setUnitOptions:1];
  uint64_t v2 = NSMeasurementFormatter.string<A>(from:)();

  return v2;
}

uint64_t static CustomIntentDisambiguationItemFactory.convertEnumStringToDictionary(enumString:)()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t result = 0;
  if (v6 >> 60 != 15)
  {
    uint64_t v8 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v14[0] = 0;
    id v10 = [v8 JSONObjectWithData:isa options:0 error:v14];

    if (v10)
    {
      id v11 = v14[0];
      _bridgeAnyObjectToAny(_:)();
      outlined consume of Data?(v4, v6);
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast()) {
        return v13[1];
      }
      else {
        return 0;
      }
    }
    else
    {
      id v12 = v14[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      outlined consume of Data?(v4, v6);
      swift_errorRelease();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentDisambiguationItemFactory()
{
  return &type metadata for CustomIntentDisambiguationItemFactory;
}

SiriLinkFlowPlugin::InstallShortcutCATsSimple::Properties_optional __swiftcall InstallShortcutCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InstallShortcutCATsSimple.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.int value = SiriLinkFlowPlugin_InstallShortcutCATsSimple_Properties_launchApp;
  }
  else {
    v4.int value = SiriLinkFlowPlugin_InstallShortcutCATsSimple_Properties_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t InstallShortcutCATsSimple.Properties.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000019;
  }
  else {
    return 0xD000000000000024;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InstallShortcutCATsSimple.Properties(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InstallShortcutCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InstallShortcutCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InstallShortcutCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::InstallShortcutCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InstallShortcutCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::InstallShortcutCATsSimple::Properties_optional *a2@<X8>)
{
  result.int value = InstallShortcutCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InstallShortcutCATsSimple.Properties@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = InstallShortcutCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t InstallShortcutCATsSimple.errorInstallShortcut(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)InstallShortcutCATsSimple.errorInstallShortcut(device:));
}

uint64_t InstallShortcutCATsSimple.errorInstallShortcut(device:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_50_0();
  unint64_t v4 = (__n128 *)OUTLINED_FUNCTION_69_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_1_2(v4, (__n128)xmmword_212160);
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v5);
  OUTLINED_FUNCTION_3_1();
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v6;
  *unint64_t v6 = v0;
  v6[1] = InstallShortcutCATsSimple.errorInstallShortcut(device:);
  return v8(0xD000000000000024, 0x8000000000224D80, v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *unint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *unint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_7_39();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

BOOL InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds.init(rawValue:);
  return ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(a1, v1);
}

uint64_t InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds.rawValue.getter()
{
  return 0x726F727265;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds(void *a1@<X8>)
{
  *a1 = 0x726F727265;
  a1[1] = 0xE500000000000000;
}

uint64_t InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:));
}

uint64_t InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_50_0();
  unint64_t v4 = (__n128 *)OUTLINED_FUNCTION_69_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_1_2(v4, (__n128)xmmword_212160);
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v5);
  OUTLINED_FUNCTION_3_1();
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v6;
  unint64_t v7 = lazy protocol witness table accessor for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds();
  *unint64_t v6 = v0;
  v6[1] = InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:);
  return v9(0xD000000000000024, 0x8000000000224D80, v1, &type metadata for InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *unint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *unint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_7_39();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds;
  if (!lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds;
  if (!lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds and conformance InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds);
  }
  return result;
}

uint64_t InstallShortcutCATsSimple.launchApp(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)InstallShortcutCATsSimple.launchApp(device:));
}

uint64_t InstallShortcutCATsSimple.launchApp(device:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_50_0();
  unint64_t v4 = (__n128 *)OUTLINED_FUNCTION_69_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_1_2(v4, (__n128)xmmword_212160);
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v5);
  OUTLINED_FUNCTION_3_1();
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v6;
  *unint64_t v6 = v0;
  v6[1] = InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:);
  return v8(0xD000000000000019, 0x8000000000224DB0, v1);
}

BOOL InstallShortcutCATsSimple.LaunchAppDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of InstallShortcutCATsSimple.LaunchAppDialogIds.init(rawValue:);
  return ListShortcutsCATsSimple.LaunchAppDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance InstallShortcutCATsSimple.LaunchAppDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = InstallShortcutCATsSimple.LaunchAppDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InstallShortcutCATsSimple.LaunchAppDialogIds(void *a1@<X8>)
{
  *a1 = 1852141679;
  a1[1] = 0xE400000000000000;
}

uint64_t InstallShortcutCATsSimple.launchAppAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)InstallShortcutCATsSimple.launchAppAsLabels(device:));
}

uint64_t InstallShortcutCATsSimple.launchAppAsLabels(device:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_50_0();
  unint64_t v4 = (__n128 *)OUTLINED_FUNCTION_69_3(v3);
  uint64_t v5 = OUTLINED_FUNCTION_1_2(v4, (__n128)xmmword_212160);
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v5);
  OUTLINED_FUNCTION_3_1();
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v6;
  unint64_t v7 = lazy protocol witness table accessor for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds();
  *unint64_t v6 = v0;
  v6[1] = InstallShortcutCATsSimple.errorInstallShortcutAsLabels(device:);
  return v9(0xD000000000000019, 0x8000000000224DB0, v1, &type metadata for InstallShortcutCATsSimple.LaunchAppDialogIds, v7);
}

unint64_t lazy protocol witness table accessor for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds;
  if (!lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds;
  if (!lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InstallShortcutCATsSimple.LaunchAppDialogIds and conformance InstallShortcutCATsSimple.LaunchAppDialogIds);
  }
  return result;
}

uint64_t InstallShortcutCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return InstallShortcutCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t InstallShortcutCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v12 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of URL?(a1);
  return v12;
}

uint64_t InstallShortcutCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_56();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v1;
}

uint64_t InstallShortcutCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_56();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type InstallShortcutCATsSimple.Properties and conformance InstallShortcutCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type InstallShortcutCATsSimple.Properties and conformance InstallShortcutCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type InstallShortcutCATsSimple.Properties and conformance InstallShortcutCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InstallShortcutCATsSimple.Properties and conformance InstallShortcutCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for InstallShortcutCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for InstallShortcutCATsSimple;
  if (!type metadata singleton initialization cache for InstallShortcutCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for InstallShortcutCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for InstallShortcutCATsSimple()
{
  return type metadata accessor for InstallShortcutCATsSimple();
}

unsigned char *storeEnumTagSinglePayload for InstallShortcutCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1850D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for InstallShortcutCATsSimple.Properties()
{
}

void type metadata accessor for InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for InstallShortcutCATsSimple.ErrorInstallShortcutDialogIds(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1851B0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for InstallShortcutCATsSimple.LaunchAppDialogIds()
{
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.__allocating_init(action:request:actionMetadata:appBundleId:deviceState:serviceInvoker:outputPublisher:)(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, long long *a8)
{
  uint64_t v16 = swift_allocObject();
  ShortcutsLinkPromptForActionConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:deviceState:serviceInvoker:outputPublisher:)(a1, a2, a3, a4, a5, a6, a7, a8);
  return v16;
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.serviceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 96, a1);
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 136, a1);
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:deviceState:serviceInvoker:outputPublisher:)(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, long long *a8)
{
  uint64_t v9 = v8;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_2();
  uint64_t v31 = v18;
  uint64_t v32 = v17;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_20_0();
  uint64_t v21 = v20 - v19;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = a3;
  *(void *)(v9 + 40) = a4;
  *(void *)(v9 + 48) = a5;
  outlined init with copy of DeviceState((uint64_t)a6, v9 + 56);
  outlined init with copy of DeviceState(a7, v9 + 96);
  id v22 = a1;
  id v23 = a2;
  id v24 = a3;
  id v25 = [v23 result];
  id v26 = [v25 output];

  id v27 = [v26 confirmationActionName];
  __swift_project_boxed_opaque_existential_1(a6, a6[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  static ShortcutsLinkPromptForActionConfirmationFlowStrategy.makeConfirmationNames(confirmationActionName:siriLocale:)(v27, (uint64_t *)v34);

  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v21, v32);
  long long v28 = v34[1];
  *(_OWORD *)(v9 + 176) = v34[0];
  *(_OWORD *)(v9 + 192) = v28;
  *(_OWORD *)(v9 + 208) = v34[2];
  outlined init with take of AceServiceInvokerAsync(a8, v9 + 136);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a6);
  return v9;
}

void static ShortcutsLinkPromptForActionConfirmationFlowStrategy.makeConfirmationNames(confirmationActionName:siriLocale:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    Locale.identifier.getter();
    id v4 = [v3 acceptLabel];
    if (v4)
    {
      uint64_t v5 = v4;
      NSString v6 = String._bridgeToObjectiveC()();
      id v7 = [v5 localizedStringForLocaleIdentifier:v6];

      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v9;

      id v10 = [v3 acceptAlternatives];
      type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNStaticDeferredLocalizedString);
      unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v12 = specialized Collection.prefix(_:)(10, v11);
      uint64_t v16 = specialized Array.init<A>(_:)(v12, v13, v14, v15);
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo31LNStaticDeferredLocalizedStringCG_SSs5NeverOTg50145_sSo23LNDisplayRepresentationC18SiriLinkFlowPluginE29toDisambiguationItemComponent33_1653C942D9461C94FC73A283A98B2FB06localeAC0hiJ0VSS_tFSSSo31defG6CXEfU_SSTf1cn_n((unint64_t)v16);
      uint64_t v18 = v17;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v39 = 0;
      uint64_t v18 = _swiftEmptyArrayStorage;
    }
    id v23 = [v3 denyLabel];
    if (v23)
    {
      id v24 = v23;
      NSString v25 = String._bridgeToObjectiveC()();
      id v26 = [v24 localizedStringForLocaleIdentifier:v25];

      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v27;

      id v28 = [v3 denyAlternatives];
      type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNStaticDeferredLocalizedString);
      uint64_t v29 = v18;
      uint64_t v30 = v8;
      uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v32 = v31;
      uint64_t v8 = v30;
      uint64_t v18 = v29;
      uint64_t v33 = specialized Collection.prefix(_:)(10, v32);
      uint64_t v37 = specialized Array.init<A>(_:)(v33, v34, v35, v36);
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo31LNStaticDeferredLocalizedStringCG_SSs5NeverOTg50145_sSo23LNDisplayRepresentationC18SiriLinkFlowPluginE29toDisambiguationItemComponent33_1653C942D9461C94FC73A283A98B2FB06localeAC0hiJ0VSS_tFSSSo31defG6CXEfU_SSTf1cn_n((unint64_t)v37);
      id v22 = v38;
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();

      uint64_t v20 = 0;
      uint64_t v21 = 0;
      id v22 = _swiftEmptyArrayStorage;
    }
    uint64_t v19 = v39;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v18 = _swiftEmptyArrayStorage;
    id v22 = _swiftEmptyArrayStorage;
  }
  *a2 = v8;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v21;
  a2[4] = (uint64_t)v18;
  a2[5] = (uint64_t)v22;
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_2();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v12 = OUTLINED_FUNCTION_16(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_20_0();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v15, 1, 1, v16);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  __n128 v17[3] = 0;
  _OWORD v17[4] = v2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a1, v4);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v22 = Input.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
    _os_log_impl(&dword_0, v19, v20, "#ShortcutsLinkPromptForActionConfirmationFlowStrategy on input: %s", v21, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  }

  char v24 = ShortcutsLinkPromptForActionConfirmationFlowStrategy.getConfirmationValue(input:)();
  switch(v24)
  {
    case 2:
      goto LABEL_9;
    case 3:
      return static ActionForInput.ignore()();
    default:
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v25) {
        return static ActionForInput.cancel()();
      }
      if (v24)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        return static ActionForInput.cancel()();
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v27) {
        return static ActionForInput.cancel()();
      }
      return static ActionForInput.handle()();
  }
}

uint64_t closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  return _swift_task_switch(closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:), 0, 0);
}

uint64_t closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:)()
{
  OUTLINED_FUNCTION_21_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[13] = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#ShortcutsLinkPromptForActionConfirmationFlowStrategy submitting empty output to clear screen and prevent double-taps", v4, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v5 = v0[12];

  outlined init with copy of DeviceState(v5 + 136, (uint64_t)(v0 + 2));
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v6);
  static OutputUtils.makeTemporaryOutput()(v0 + 7);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[14] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 7, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *os_log_type_t v3 = v2;
  uint64_t v4 = v2 + 56;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 120) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "#ShortcutsLinkPromptForActionConfirmationFlowStrategy failed to submit empty output to clear screen", v3, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_18_0();
  return v4();
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.getConfirmationValue(input:)()
{
  uint64_t v1 = type metadata accessor for Parse();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  uint64_t v5 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v5 == 3)
  {
    ShortcutsLinkPromptForActionConfirmationFlowStrategy.getVoiceCommandText(input:)();
    if (v6)
    {
      Swift::String v7 = String.lowercased()();
      if (v0[23])
      {
        Swift::String v8 = String.lowercased()();
        if (v7._countAndFlagsBits == v8._countAndFlagsBits && v7._object == v8._object)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return 0;
        }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v10)
        {
LABEL_40:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v11 = v0[26];
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v13 = v11 + 40;
        while (1)
        {
          Swift::String v14 = String.lowercased()();
          Swift::String v15 = String.lowercased()();
          if (v14._countAndFlagsBits == v15._countAndFlagsBits && v14._object == v15._object) {
            break;
          }
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v17) {
            goto LABEL_39;
          }
          v13 += 16;
          if (!--v12)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_20;
          }
        }
        swift_bridgeObjectRelease_n();
LABEL_39:
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }
LABEL_20:
      Swift::String v18 = String.lowercased()();
      if (v0[25])
      {
        Swift::String v19 = String.lowercased()();
        if (v18._countAndFlagsBits == v19._countAndFlagsBits && v18._object == v19._object)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return 1;
        }
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v21)
        {
LABEL_48:
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v22 = v0[27];
      uint64_t v23 = *(void *)(v22 + 16);
      if (v23)
      {
        swift_bridgeObjectRetain_n();
        for (uint64_t i = v22 + 40; ; i += 16)
        {
          Swift::String v25 = String.lowercased()();
          Swift::String v26 = String.lowercased()();
          if (v25._countAndFlagsBits == v26._countAndFlagsBits && v25._object == v26._object)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_47;
          }
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v28) {
            break;
          }
          if (!--v23)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            return 3;
          }
        }
        swift_bridgeObjectRelease();
LABEL_47:
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      swift_bridgeObjectRelease();
    }
    return 3;
  }
  return v5;
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.parseConfirmationResponse(input:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_16(v4);
  v1[5] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  os_log_type_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t (*v18)(void);
  uint64_t v19;

  OUTLINED_FUNCTION_13_1();
  switch(ShortcutsLinkPromptForActionConfirmationFlowStrategy.getConfirmationValue(input:)())
  {
    case 1u:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
      char v10 = Logger.logObject.getter();
      uint64_t v11 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_17_20(v11)) {
        goto LABEL_18;
      }
      uint64_t v12 = "#ShortcutsLinkPromptForActionConfirmationFlowStrategy shouldn't receive no in parse";
      break;
    case 2u:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
      char v10 = Logger.logObject.getter();
      Swift::String v14 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_17_20(v14)) {
        goto LABEL_18;
      }
      uint64_t v12 = "#ShortcutsLinkPromptForActionConfirmationFlowStrategy shouldn't receive cancel in parse";
      break;
    case 3u:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      Swift::String v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
      char v10 = Logger.logObject.getter();
      uint64_t v16 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_17_20(v16)) {
        goto LABEL_18;
      }
      uint64_t v12 = "#ShortcutsLinkPromptForActionConfirmationFlowStrategy has no confirmation";
      break;
    default:
      uint64_t v2 = v1[4];
      uint64_t v3 = v2 + 56;
      uint64_t v4 = v2 + 96;
      uint64_t v5 = [*(id *)(v2 + 32) systemProtocols];
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
      uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      v1[6] = v6;

      uint64_t v7 = (void *)swift_task_alloc();
      v1[7] = v7;
      *uint64_t v7 = v1;
      v7[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.parseConfirmationResponse(input:);
      return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v3, v4, v6);
  }
  char v17 = (uint8_t *)OUTLINED_FUNCTION_33();
  *(_WORD *)char v17 = 0;
  _os_log_impl(&dword_0, v10, v0, v12, v17, 2u);
  OUTLINED_FUNCTION_7_0();
LABEL_18:

  lazy protocol witness table accessor for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v18();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = enum case for ConfirmationResponse.confirmed(_:);
  uint64_t v3 = type metadata accessor for ConfirmationResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(v1, v2, v3);
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v3);
  SimpleConfirmationResponseProvider.init(_:)();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[32] = v2;
  v1[33] = v0;
  v1[31] = v3;
  uint64_t v4 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[34] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[35] = v5;
  v1[36] = OUTLINED_FUNCTION_25();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v6);
  v1[37] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_16(v7);
  v1[38] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[39] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[40] = v9;
  v1[41] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  v1[42] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[43] = v11;
  v1[44] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v12);
  v1[45] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *inited;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;

  uint64_t v1 = *(void **)(v0 + 264);
  type metadata accessor for ShortcutsLinkNLContextProvider();
  *(void *)(v0 + 368) = swift_initStackObject();
  static Device.current.getter();
  type metadata accessor for RunLinkActionCATs();
  OUTLINED_FUNCTION_49_5();
  uint64_t v2 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATsSimple();
  OUTLINED_FUNCTION_49_5();
  uint64_t v3 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_49_5();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_49_5();
  uint64_t v5 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  OUTLINED_FUNCTION_49_5();
  uint64_t v6 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t inited = (void *)swift_initStackObject();
  *(void *)(v0 + 376) = inited;
  *(void *)(v0 + 384) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)((long long *)(v0 + 144), v2, v3, v4, v5, v6, inited);
  uint64_t v8 = (void *)v1[3];
  *(void *)(v0 + 392) = v8;
  uint64_t v9 = [v8 result];
  uint64_t v10 = [v9 output];

  *(void *)(v0 + 400) = [v10 dialog];
  uint64_t v11 = [v8 result];
  uint64_t v12 = [v11 output];

  *(void *)(v0 + 408) = [v12 confirmationActionName];
  ShortcutsLinkNLContextProvider.makeContextForActionConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)(v1[22], v1[23], v1[24], v1[25], v1[26], v1[27]);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v13;
  *uint64_t v13 = v0;
  v13[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  OUTLINED_FUNCTION_3();
  return LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:)();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  v2[53] = v4;
  v2[54] = v5;
  v2[55] = v6;
  v2[56] = v7;
  v2[57] = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;

  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = [*(id *)(v0 + 392) result];
  uint64_t v3 = [v2 output];

  *(unsigned char *)(v0 + 584) = [v3 shouldShowPrompt];
  if (v1) {
    uint64_t v4 = [*(id *)(v0 + 408) destructive];
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v42 = v4;
  *(unsigned char *)(v0 + 585) = v4;
  uint64_t v5 = *(void *)(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 352);
  uint64_t v7 = *(void *)(v0 + 336);
  uint64_t v8 = *(void *)(v0 + 296);
  uint64_t v9 = *(void *)(v0 + 280);
  uint64_t v10 = *(void *)(v0 + 288);
  uint64_t v11 = *(void *)(v0 + 272);
  static DialogPhase.confirmation.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v6, v7);
  __swift_storeEnumTagSinglePayload(v8, 0, 1, v7);
  OutputGenerationManifest.nlContextUpdate.setter();
  static TemplatingResult.getListenAfterSpeakingDisabled()();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v10, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v11);
  uint64_t v12 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  if (v12)
  {
    uint64_t v13 = *(void *)(v0 + 264);
    type metadata accessor for App();
    uint64_t v14 = *(void *)(v13 + 40);
    *(void *)(v0 + 464) = v14;
    uint64_t v15 = *(void *)(v13 + 48);
    *(void *)(v0 + 472) = v15;
    swift_bridgeObjectRetain();
    App.__allocating_init(appIdentifier:)();
    uint64_t v16 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(v13 + 56, 2);
    Swift::String v18 = v17;
    swift_release();
    *(void *)(v0 + 480) = v18;
    *(void *)(v0 + 488) = v16;
    Swift::String v19 = v16 & 0xFFFFFFFFFFFFLL;
    os_log_type_t v20 = 0xE000000000000000;
    if (v18) {
      os_log_type_t v20 = v18;
    }
    else {
      Swift::String v19 = 0;
    }
    if ((v20 & 0x2000000000000000) != 0) {
      Swift::String v19 = HIBYTE(v20) & 0xF;
    }
    if (!v19)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      char v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.voiceCommands);
      swift_retain();
      uint64_t v22 = Logger.logObject.getter();
      uint64_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        char v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        *(_DWORD *)char v24 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_0, v22, v23, "#ShortcutsLinkPromptForActionConfirmationFlowStrategy: failed to get app's displayName; bundleId='%s'",
          v24,
          0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        swift_release();
      }
    }
    uint64_t v37 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v37;
    *uint64_t v37 = v0;
    v37[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    return LinkActionDialogTemplating.actionConfirmationHeader(customDialog:)();
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 568) = v25;
    *Swift::String v25 = v26;
    v25[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    uint64_t v43 = *(void *)(v0 + 328);
    id v41 = v42;
    OUTLINED_FUNCTION_3();
    return ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:)(v27, v28, v29, v30, v31, v32, v33, v34);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 504) = v5;
  *(void *)(v3 + 512) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 184;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 576) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 408);
  swift_release();
  swift_release();

  OUTLINED_FUNCTION_23_25();
  uint64_t v3 = OUTLINED_FUNCTION_70_0();
  v4(v3);
  uint64_t v5 = OUTLINED_FUNCTION_21_22();
  v6(v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v7();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void **)(v0 + 408);

  swift_release();
  swift_release();

  uint64_t v2 = OUTLINED_FUNCTION_3_35();
  v3(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_18_23();
  swift_release();
  swift_release();

  uint64_t v1 = OUTLINED_FUNCTION_34_13();
  v2(v1);
  uint64_t v3 = OUTLINED_FUNCTION_3_35();
  v4(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v5();
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_18_23();
  swift_release();
  swift_release();

  uint64_t v1 = OUTLINED_FUNCTION_34_13();
  v2(v1);
  uint64_t v3 = OUTLINED_FUNCTION_3_35();
  v4(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v5();
}

void ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 584);
  id v2 = [*(id *)(v0 + 504) catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  swift_bridgeObjectRetain();
  if (v1 == 1)
  {
    Swift::String_optional v3 = DialogExecutionResult.firstDialogFullPrint()();
    uint64_t countAndFlagsBits = v3.value._countAndFlagsBits;
    object = v3.value._object;
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = 0;
  }
  *(void *)(v0 + 520) = object;
  id v5 = objc_msgSend(*(id *)(v0 + 392), "result", countAndFlagsBits);
  id v6 = [v5 output];

  id v7 = [v6 viewSnippet];
  if (v7)
  {
    id v8 = [v7 viewData];

    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v11 = 0xF000000000000000;
  }
  *(void *)(v0 + 536) = v11;
  *(void *)(v0 + 528) = v9;
  unint64_t v32 = *(void **)(v0 + 504);
  uint64_t v13 = *(void *)(v0 + 480);
  uint64_t v12 = *(void *)(v0 + 488);
  uint64_t v14 = *(void *)(v0 + 472);
  char v31 = *(unsigned char *)(v0 + 585);
  uint64_t v15 = *(void *)(v0 + 448);
  uint64_t v30 = *(void *)(v0 + 440);
  uint64_t v16 = *(void *)(v0 + 432);
  uint64_t v28 = *(void *)(v0 + 464);
  uint64_t v29 = *(void *)(v0 + 424);
  if (v13) {
    unint64_t v17 = *(void *)(v0 + 480);
  }
  else {
    unint64_t v17 = 0xE000000000000000;
  }
  if (!v13) {
    uint64_t v12 = 0;
  }
  uint64_t v27 = v12;
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v9, v11);
  *(void *)(v0 + 544) = ResponseFactory.init()();
  *(void *)(v0 + 208) = type metadata accessor for WorkflowDataModels(0);
  *(void *)(v0 + 216) = _s18SiriLinkFlowPlugin18WorkflowDataModelsOAC10SnippetKit0hD5ModelAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 184));
  uint64_t *boxed_opaque_existential_1 = v28;
  boxed_opaque_existential_1[1] = v14;
  boxed_opaque_existential_1[2] = v27;
  boxed_opaque_existential_1[3] = v17;
  boxed_opaque_existential_1[4] = v26;
  boxed_opaque_existential_1[5] = (uint64_t)object;
  boxed_opaque_existential_1[6] = v9;
  boxed_opaque_existential_1[7] = v11;
  boxed_opaque_existential_1[8] = v29;
  boxed_opaque_existential_1[9] = v16;
  boxed_opaque_existential_1[10] = v30;
  boxed_opaque_existential_1[11] = v15;
  *((unsigned char *)boxed_opaque_existential_1 + 96) = v31;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_211C70;
  *(void *)(v19 + 32) = v32;
  uint64_t v33 = v19;
  specialized Array._endMutation()();
  *(void *)(v0 + 552) = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v9, v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v20 = v32;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 560) = v21;
  void *v21 = v22;
  v21[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  OUTLINED_FUNCTION_107();
  __asm { BR              X4 }
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v10;
  void *v11;

  int v1 = v0[67];
  id v2 = v0[66];
  Swift::String_optional v3 = (void *)v0[50];
  unint64_t v11 = (void *)v0[63];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v2, v1);
  OUTLINED_FUNCTION_23_25();

  id v5 = OUTLINED_FUNCTION_70_0();
  v6(v5);
  id v7 = OUTLINED_FUNCTION_21_22();
  v8(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_3();
  __asm { BRAA            X1, X16 }
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 336) = v14;
  *(void *)(v9 + 344) = v8;
  *(unsigned char *)(v9 + 513) = v13;
  *(unsigned char *)(v9 + 512) = a8;
  *(void *)(v9 + 320) = a6;
  *(void *)(v9 + 328) = a7;
  *(void *)(v9 + 304) = a4;
  *(void *)(v9 + 312) = a5;
  *(void *)(v9 + 288) = a1;
  *(void *)(v9 + 296) = a3;
  uint64_t v10 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v9 + 352) = v10;
  *(void *)(v9 + 360) = *(void *)(v10 - 8);
  *(void *)(v9 + 368) = swift_task_alloc();
  type metadata accessor for CATOption();
  *(void *)(v9 + 376) = swift_task_alloc();
  return _swift_task_switch(ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:), 0, 0);
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:)()
{
  OUTLINED_FUNCTION_21_0();
  static Device.current.getter();
  type metadata accessor for RunLinkActionCATs();
  OUTLINED_FUNCTION_18_15();
  uint64_t v1 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATsSimple();
  OUTLINED_FUNCTION_18_15();
  uint64_t v2 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_18_15();
  uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_18_15();
  uint64_t v4 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  OUTLINED_FUNCTION_18_15();
  uint64_t v5 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t inited = (void *)swift_initStackObject();
  *(void *)(v0 + 384) = inited;
  *(void *)(v0 + 392) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)((long long *)(v0 + 248), v1, v2, v3, v4, v5, inited);
  id v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v7;
  *id v7 = v0;
  v7[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:);
  return LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 408) = v4;
  *(void *)(v2 + 416) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned char v22[40];
  uint64_t v23;

  uint64_t v23 = v0;
  if (*(unsigned char *)(v0 + 512) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 424) = v1;
    *uint64_t v1 = v0;
    v1[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:);
    OUTLINED_FUNCTION_107();
    return LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:)();
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + 344);
    id v20 = v4[6];
    char v21 = v4[5];
    uint64_t v5 = (void *)v4[3];
    swift_bridgeObjectRetain();
    id v6 = [v5 result];
    id v7 = [v6 output];

    uint64_t v8 = [v7 viewSnippet];
    if (v8)
    {
      uint64_t v9 = [v8 viewData];

      uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v12 = 0xF000000000000000;
    }
    char v13 = *(unsigned char *)(v0 + 513);
    uint64_t v15 = *(void *)(v0 + 320);
    uint64_t v14 = *(void *)(v0 + 328);
    uint64_t v16 = *(void *)(v0 + 304);
    unint64_t v17 = *(void *)(v0 + 312);
    static Device.current.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)(v21, v20, v16, v17, v15, v14, v13, 0, v0 + 144, 0, v10, v12, (uint64_t)v22);
    Swift::String v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v18;
    *Swift::String v18 = v0;
    v18[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:);
    OUTLINED_FUNCTION_107();
    return ActionConfirmationVisual.data.getter();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  id v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[54] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[55] = v3;
    v7[56] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned char v20[40];
  uint64_t v21;
  uint64_t v22;

  char v21 = v0;
  uint64_t v1 = *(void **)(v0 + 344);
  Swift::String v18 = v1[5];
  uint64_t v19 = *(void *)(v0 + 448);
  uint64_t v2 = (void *)v1[3];
  uint64_t v16 = v1[6];
  unint64_t v17 = *(void *)(v0 + 440);
  swift_bridgeObjectRetain();
  uint64_t v3 = [v2 result];
  uint64_t v4 = [v3 output];

  uint64_t v5 = [v4 viewSnippet];
  if (v5)
  {
    id v6 = [v5 viewData];

    uint64_t v5 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = 0xF000000000000000;
  }
  uint64_t v9 = *(unsigned char *)(v0 + 513);
  unint64_t v11 = *(void *)(v0 + 320);
  uint64_t v10 = *(void *)(v0 + 328);
  uint64_t v12 = *(void *)(v0 + 304);
  char v13 = *(void *)(v0 + 312);
  static Device.current.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)(v18, v16, v12, v13, v11, v10, v9, v19, v0 + 144, v17, (uint64_t)v5, v8, (uint64_t)v20);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v14;
  *uint64_t v14 = v0;
  v14[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:);
  return ActionConfirmationVisual.data.getter();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  id v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[58] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[59] = v3;
    v7[60] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = (void *)v0[51];
  uint64_t v3 = v0[45];
  uint64_t v2 = v0[46];
  uint64_t v4 = v0[44];
  uint64_t v5 = v0[42];
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(v0[60], v0[59], v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  id v6 = [v1 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[61] = ResponseFactory.init()();
  char v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)
                                                          + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[62] = v7;
  *id v7 = v8;
  v7[1] = ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:dialog:confirmLabel:noLabel:shouldShowPrompt:isDestructive:manifest:);
  uint64_t v9 = v0[51];
  uint64_t v10 = v0[46];
  unint64_t v11 = v0[36];
  return v13(v11, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 504) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void **)(v0 + 408);
  outlined release of ActionConfirmationVisual(v0 + 144);

  swift_release();
  uint64_t v2 = OUTLINED_FUNCTION_34_13();
  v3(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_release();
  outlined release of ActionConfirmationVisual(v0 + 144);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = (void *)v0[51];
  uint64_t v3 = v0[45];
  uint64_t v2 = v0[46];
  uint64_t v4 = v0[44];
  outlined release of ActionConfirmationVisual((uint64_t)(v0 + 18));

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v5();
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.getVoiceCommandText(input:)()
{
  uint64_t v0 = type metadata accessor for VoiceCommandsNLIntent(0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NLIntent();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v6, v3);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v2, v10, v7);
    if (one-time initialization token for voiceCommandTextNode != -1) {
      swift_once();
    }
    _s18SiriLinkFlowPlugin18WorkflowDataModelsOAC10SnippetKit0hD5ModelAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
    IntentNodeTraversable.value<A>(forNode:)();
    uint64_t v11 = v13;
    outlined destroy of VoiceCommandsNLIntent((uint64_t)v2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return 0;
  }
  return v11;
}

id *ShortcutsLinkPromptForActionConfirmationFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 17));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.__deallocating_deinit()
{
  ShortcutsLinkPromptForActionConfirmationFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance ShortcutsLinkPromptForActionConfirmationFlowStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ShortcutsLinkPromptForActionConfirmationFlowStrategy.parseConfirmationResponse(input:)();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance ShortcutsLinkPromptForActionConfirmationFlowStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ShortcutsLinkPromptForActionConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:)();
}

uint64_t sub_189088()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v8;
  v7[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return closure #1 in ShortcutsLinkPromptForActionConfirmationFlowStrategy.actionForInput(_:)(v3, v4, v5, v6);
}

unsigned char *storeEnumTagSinglePayload for ShortcutsLinkConfirmationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x189260);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShortcutsLinkConfirmationError()
{
  return &type metadata for ShortcutsLinkConfirmationError;
}

uint64_t type metadata accessor for ShortcutsLinkPromptForActionConfirmationFlowStrategy()
{
  return self;
}

uint64_t destroy for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ShortcutsLinkPromptForActionConfirmationFlowStrategy.ConfirmationNames()
{
  return &unk_290180;
}

uint64_t _s18SiriLinkFlowPlugin18WorkflowDataModelsOAC10SnippetKit0hD5ModelAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_35()
{
  return *(void *)(v0 + 352);
}

BOOL OUTLINED_FUNCTION_17_20(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_18_23()
{
  uint64_t v2 = *(void **)(v0 + 400);
}

uint64_t OUTLINED_FUNCTION_21_22()
{
  return v0;
}

uint64_t WorkflowMacSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v6[4] = a5;
  v6[5] = v5;
  _OWORD v6[2] = a1;
  v6[3] = a4;
  uint64_t v7 = type metadata accessor for ImageSize();
  v6[6] = v7;
  v6[7] = *(void *)(v7 - 8);
  v6[8] = swift_task_alloc();
  return _swift_task_switch(WorkflowMacSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:), 0, 0);
}

uint64_t WorkflowMacSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v6 = (void *)v0[2];
  outlined bridged method (pb) of @objc WFShowAlertDialogRequest.message.getter(v6);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ImageSize.original(_:), v3);
  OUTLINED_FUNCTION_1_35();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_0_36();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v8 = [v6 okButton];
  id v9 = [v8 title];

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  uint64_t v13 = WorkflowMacSnippetProvider.buildCardSectionForButton(title:confirmation:appBundleId:)(v10, v12, 0, v5, v4);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  id v16 = [v6 cancelButton];
  if (v16)
  {
    unint64_t v17 = v16;
    id v18 = [v16 title];

    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0xE000000000000000;
  }
  uint64_t v22 = WorkflowMacSnippetProvider.buildCardSectionForButton(title:confirmation:appBundleId:)(v19, v21, 2, v0[3], v0[4]);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_21CDE0;
  *(void *)(v25 + 32) = v7;
  *(void *)(v25 + 40) = v13;
  *(void *)(v25 + 48) = v22;
  specialized Array._endMutation()();
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for SACardSnippet);
  id v26 = v7;
  id v27 = v13;
  id v28 = v22;
  uint64_t v29 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_212180;
  *(void *)(v30 + 32) = v15;
  *(void *)(v30 + 40) = v24;
  uint64_t v36 = v30;
  specialized Array._endMutation()();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(v36, v29);
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  id v31 = v29;
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  [v31 setListenAfterSpeaking:isa];

  [v31 setCanUseServerTTS:0];
  type metadata accessor for SiriKitAceViewBuilder();
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
  swift_release();
  uint64_t v33 = dispatch thunk of SiriKitAceViewBuilder.build()();
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_task_dealloc();
  uint64_t v34 = (uint64_t (*)(uint64_t))v0[1];
  return v34(v33);
}

void *WorkflowMacSnippetProvider.buildCardSectionForButton(title:confirmation:appBundleId:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for ImageSize();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for ImageSize.original(_:), v8);
  OUTLINED_FUNCTION_1_35();
  uint64_t v12 = (void *)OUTLINED_FUNCTION_0_36();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  static Device.current.getter();
  id v13 = static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)(a3, a4, a5, v19);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  id v14 = v13;
  uint64_t v15 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_211C70;
  *(void *)(v16 + 32) = v15;
  v19[0] = v16;
  specialized Array._endMutation()();
  outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v19[0], v12);
  return v12;
}

uint64_t type metadata accessor for WorkflowMacSnippetProvider()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_0_36()
{
  return static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)();
}

uint64_t OUTLINED_FUNCTION_1_35()
{
  return v0;
}

void AutoShortcutsSetEnablementFlow.__allocating_init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_36();
  uint64_t v25 = v24;
  uint64_t v53 = v26;
  Swift::Int v54 = v27;
  uint64_t v51 = v28;
  uint64_t v52 = v29;
  uint64_t v49 = v30;
  uint64_t v50 = v31;
  uint64_t v48 = v32;
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = *(void *)(v25 + 24);
  uint64_t v35 = *(void *)(v25 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v25, v34);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v36);
  uint64_t v38 = OUTLINED_FUNCTION_49_0(v37, v46);
  v39(v38);
  uint64_t v40 = *(void *)(a22 + 24);
  uint64_t v41 = *(void *)(a22 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a22, v40);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v42);
  uint64_t v44 = OUTLINED_FUNCTION_32_5(v43, v47);
  v45(v44);
  specialized AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)(v48, v49, v50, v51, v52, v53, v54, v22, a21, v23, v33, v40, v34, v41, v35);
  __swift_destroy_boxed_opaque_existential_1Tm(a22);
  __swift_destroy_boxed_opaque_existential_1Tm(v25);
  OUTLINED_FUNCTION_27_1();
}

void *key path getter for AutoShortcutsSetEnablementFlow.state : AutoShortcutsSetEnablementFlow@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 168))(__src);
  return outlined init with take of AutoShortcutsSetEnablementFlow.State(__src, a2);
}

uint64_t key path setter for AutoShortcutsSetEnablementFlow.state : AutoShortcutsSetEnablementFlow(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  unsigned __int8 v10 = *(unsigned char *)(a1 + 64);
  uint64_t v11 = *a2;
  swift_beginAccess();
  uint64_t v20 = *(void *)(v11 + 296);
  uint64_t v21 = *(void *)(v11 + 288);
  uint64_t v18 = *(void *)(v11 + 312);
  uint64_t v19 = *(void *)(v11 + 304);
  uint64_t v16 = *(void *)(v11 + 328);
  uint64_t v17 = *(void *)(v11 + 320);
  uint64_t v14 = *(void *)(v11 + 344);
  uint64_t v15 = *(void *)(v11 + 336);
  *(void *)(v11 + 288) = v2;
  *(void *)(v11 + 296) = v3;
  *(void *)(v11 + 304) = v4;
  *(void *)(v11 + 312) = v5;
  *(void *)(v11 + 320) = v6;
  *(void *)(v11 + 328) = v7;
  *(void *)(v11 + 336) = v8;
  *(void *)(v11 + 344) = v9;
  *(unsigned char *)(v11 + 352) = v10;
  outlined copy of AutoShortcutsSetEnablementFlow.State(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return outlined consume of AutoShortcutsSetEnablementFlow.State(v21, v20, v19, v18, v17, v16, v15, v14, v13);
}

uint64_t AutoShortcutsSetEnablementFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 288);
  uint64_t v4 = *(void *)(v1 + 296);
  uint64_t v5 = *(void *)(v1 + 304);
  uint64_t v6 = *(void *)(v1 + 312);
  uint64_t v7 = *(void *)(v1 + 320);
  uint64_t v8 = *(void *)(v1 + 328);
  uint64_t v9 = *(void *)(v1 + 336);
  uint64_t v10 = *(void *)(v1 + 344);
  unsigned __int8 v11 = *(unsigned char *)(v1 + 352);
  uint64_t result = outlined copy of AutoShortcutsSetEnablementFlow.State(v3, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return result;
}

uint64_t static AutoShortcutsSetEnablementFlow.State.__derived_enum_equals(_:_:)(void *a1, void *a2)
{
  int v9 = outlined init with take of AutoShortcutsSetEnablementFlow.State(a1, &__dst);
  int v17 = __dst;
  unsigned __int8 v18 = v58;
  unint64_t v19 = __dst;
  switch(v58 >> 5)
  {
    case 1:
      OUTLINED_FUNCTION_69_7(v9, v10, v11, v12, v13, v14, v15, v16, v44, v45, v46, v47.i8[0], v47.i64[1], v48.i64[0], v48.i64[1], v49.i64[0], v49.i64[1], v50.i64[0], v50.i64[1],
        v51,
        __dst,
        v53,
        v54.i64[0],
        v54.i64[1],
        v55.i64[0],
        v55.i64[1],
        v56,
        v57,
        v58);
      if ((v51 & 0xE0) != 0x20) {
        goto LABEL_72;
      }
      LOBYTE(v51) = v51 & 0x1F;
      if ((v17 ^ v47.u8[0])) {
        goto LABEL_72;
      }
      BOOL v24 = v6 == v47.i64[1] && v7 == v48.i64[0];
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(), char v23 = OUTLINED_FUNCTION_96_2(), (v25 & 1) != 0))
      {
        BOOL v26 = v4 == v48.i64[1] && v5 == v49.i64[0];
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(), char v23 = OUTLINED_FUNCTION_96_2(), (v27 & 1) != 0))
        {
          if ((specialized static Array<A>.== infix(_:_:)((void *)v19, (void *)v49.i64[1]) & 1) == 0) {
            goto LABEL_72;
          }
          if (!v3)
          {
            if (v50.i64[1]) {
              goto LABEL_72;
            }
            goto LABEL_68;
          }
          if (v50.i64[1])
          {
            BOOL v28 = v2 == v50.i64[0] && v3 == v50.i64[1];
            if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_68;
            }
          }
          goto LABEL_72;
        }
      }
      return v23 & 1;
    case 2:
      OUTLINED_FUNCTION_69_7(v9, v10, v11, v12, v13, v14, v15, v16, v44, v45, v46, v47.i8[0], v47.i64[1], v48.i64[0], v48.i64[1], v49.i64[0], v49.i64[1], v50.i64[0], v50.i64[1],
        v51,
        __dst,
        v53,
        v54.i64[0],
        v54.i64[1],
        v55.i64[0],
        v55.i64[1],
        v56,
        v57,
        v58);
      char v29 = v51;
      if ((v51 & 0xE0) != 0x40) {
        goto LABEL_72;
      }
      LOBYTE(v51) = v51 & 0x1F;
      if ((v17 ^ v47.u8[0])) {
        goto LABEL_72;
      }
      uint64_t v30 = v49.i64[0];
      if (v6 != v47.i64[1] || v7 != v48.i64[0])
      {
        _stringCompareWithSmolCheck(_:_:expecting:)();
        char v23 = OUTLINED_FUNCTION_96_2();
        if ((v32 & 1) == 0) {
          return v23 & 1;
        }
      }
      if (v4 != v48.i64[1] || v5 != v30)
      {
        _stringCompareWithSmolCheck(_:_:expecting:)();
        char v23 = OUTLINED_FUNCTION_96_2();
        if ((v34 & 1) == 0) {
          return v23 & 1;
        }
      }
      if ((specialized static Array<A>.== infix(_:_:)((void *)v19, (void *)v49.i64[1]) & 1) == 0) {
        goto LABEL_72;
      }
      if (!v3)
      {
        if (v50.i64[1]) {
          goto LABEL_72;
        }
        goto LABEL_74;
      }
      if (!v50.i64[1]) {
        goto LABEL_72;
      }
      BOOL v35 = v2 == v50.i64[0] && v3 == v50.i64[1];
      if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(), char v23 = OUTLINED_FUNCTION_96_2(), (v36 & 1) != 0)) {
LABEL_74:
      }
        char v23 = ((v18 & 1) == 0) ^ v29;
      return v23 & 1;
    case 3:
      v58 &= 0x1Fu;
      outlined init with take of AutoShortcutsSetEnablementFlow.State(a2, &v47);
      if ((v51 & 0xE0) != 0x60) {
        goto LABEL_72;
      }
      char v23 = v47.u8[0] == v19;
      return v23 & 1;
    case 4:
      int8x16_t v37 = vorrq_s8(v54, v55);
      uint64_t v38 = __dst | *(void *)&vorr_s8(*(int8x8_t *)v37.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)) | v56 | v57 | v53;
      if (v58 == 128 && v38 == 0)
      {
        outlined init with take of AutoShortcutsSetEnablementFlow.State(a2, &v47);
        if ((v51 & 0xE0) != 0x80) {
          goto LABEL_72;
        }
        if (v51 != 128) {
          goto LABEL_72;
        }
        int8x16_t v42 = vorrq_s8(vorrq_s8(v47, v49), vorrq_s8(v48, v50));
        if (vorr_s8(*(int8x8_t *)v42.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL))) {
          goto LABEL_72;
        }
        goto LABEL_68;
      }
      outlined init with take of AutoShortcutsSetEnablementFlow.State(a2, &v47);
      if ((v51 & 0xE0) == 0x80 && v51 == 128 && v47.i64[0] == 1)
      {
        int8x16_t v41 = vorrq_s8(v49, v50);
        if (!(*(void *)&vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)) | v48.i64[1] | v48.i64[0] | v47.i64[1])) {
          goto LABEL_68;
        }
      }
      goto LABEL_72;
    default:
      v58 &= 0x1Fu;
      uint64_t v20 = v53;
      uint64_t v21 = v54.i64[0];
      outlined init with take of AutoShortcutsSetEnablementFlow.State(a2, &v47);
      if (v51 <= 0x1Fu && v47.u8[0] == v19)
      {
        if (v20 == v47.i64[1] && v21 == v48.i64[0]) {
LABEL_68:
        }
          char v23 = 1;
        else {
          char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
      else
      {
LABEL_72:
        char v23 = 0;
      }
      return v23 & 1;
  }
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a1 + 7;
  int v9 = a2 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v8 - 1);
    if (result != *(v9 - 1) || *v8 != *v9)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutsSetEnablementFlow.State(void *a1, void *a2)
{
  outlined init with take of AutoShortcutsSetEnablementFlow.State(a1, v4);
  outlined init with take of AutoShortcutsSetEnablementFlow.State(a2, __dst);
  return static AutoShortcutsSetEnablementFlow.State.__derived_enum_equals(_:_:)(v4, __dst) & 1;
}

void AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_36();
  uint64_t v51 = v22;
  uint64_t v52 = v25;
  uint64_t v27 = v26;
  int8x16_t v54 = v28;
  int8x16_t v55 = v29;
  uint64_t v53 = v30;
  uint64_t v49 = v31;
  uint64_t v50 = v32;
  uint64_t v34 = v33;
  uint64_t v36 = *(void *)(v26 + 24);
  uint64_t v35 = *(void *)(v26 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v26, v36);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v37);
  uint64_t v39 = OUTLINED_FUNCTION_49_0(v38, v47);
  v40(v39);
  uint64_t v41 = *(void *)(a22 + 24);
  uint64_t v42 = *(void *)(a22 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a22, v41);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v43);
  uint64_t v45 = OUTLINED_FUNCTION_32_5(v44, v48);
  v46(v45);
  specialized AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)(v34, v49, v50, v52, v53, v54, v55, v23, a21, v24, v51, v41, v36, v42, v35);
  __swift_destroy_boxed_opaque_existential_1Tm(a22);
  __swift_destroy_boxed_opaque_existential_1Tm(v27);
  OUTLINED_FUNCTION_27_1();
}

void AutoShortcutsSetEnablementFlow.on(input:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VoiceCommandTask?);
  uint64_t v5 = OUTLINED_FUNCTION_16(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_20_0();
  uint64_t v8 = (unsigned __int8 *)(v7 - v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v10 = OUTLINED_FUNCTION_16(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_0();
  uint64_t v13 = v12 - v11;
  uint64_t v118 = type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v117 = v14;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_53_4(v16);
  uint64_t v119 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_12_1();
  uint64_t v116 = v17;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_53_4(v19);
  uint64_t v123 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v122 = v20;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_25_6();
  uint64_t v120 = v22;
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_53_4((uint64_t)&v113 - v24);
  uint64_t v128 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v127 = v25;
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_53_4(v27);
  uint64_t v28 = type metadata accessor for Input();
  OUTLINED_FUNCTION_12_1();
  uint64_t v30 = v29;
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_20_0();
  uint64_t v34 = v33 - v32;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v36 = __swift_project_value_buffer(v35, (uint64_t)static Logger.voiceCommands);
  uint64_t v124 = v3;
  OUTLINED_FUNCTION_59_0();
  v37();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v121 = v36;
    uint64_t v41 = (uint8_t *)v40;
    uint64_t v42 = swift_slowAlloc();
    os_log_type_t v114 = v8;
    uint64_t v130 = v42;
    uint64_t v113 = v13;
    *(_DWORD *)uint64_t v41 = 136315138;
    uint64_t v115 = v1;
    uint64_t v43 = Input.description.getter();
    v129[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v130);
    uint64_t v1 = v115;
    uint64_t v13 = v113;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51_5();
    v45();
    _os_log_impl(&dword_0, v38, v39, "#AutoShortcutsSetEnablementFlow on input: %s", v41, 0xCu);
    swift_arrayDestroy();
    uint64_t v8 = v114;
    OUTLINED_FUNCTION_7_0();
    uint64_t v36 = v121;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v28);
  }

  (*(void (**)(void *__return_ptr))(*(void *)v1 + 168))(v129);
  outlined init with take of AutoShortcutsSetEnablementFlow.State(v129, &v130);
  uint64_t v46 = v130 & 1;
  uint64_t v47 = v128;
  uint64_t v48 = v127;
  uint64_t v49 = v126;
  uint64_t v50 = v125;
  switch(v136 >> 5)
  {
    case 1:
      uint64_t v121 = v36;
      uint64_t v63 = v1;
      v136 &= 0x1Fu;
      uint64_t v64 = v131.i64[1];
      uint64_t v128 = v131.i64[0];
      uint64_t v65 = v132.i64[1];
      uint64_t v127 = v132.i64[0];
      uint64_t v66 = v133;
      uint64_t v67 = v134;
      uint64_t v50 = v135;
      Input.parse.getter();
      char v68 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
      OUTLINED_FUNCTION_66();
      v69();
      char v70 = 1;
      switch(v68)
      {
        case 1:
        case 2:
          char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
          break;
        case 3:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v91 = Logger.logObject.getter();
          os_log_type_t v92 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v91, v92)) {
            goto LABEL_27;
          }
          uint64_t v93 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_15_2(v93);
          uint64_t v94 = "#AutoShortcutsSetEnablementFlow: ignoring parse input without confirmation response";
          goto LABEL_26;
        default:
          break;
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_21_23();
      uint64_t v71 = *(void *)(v63 + 288);
      uint64_t v72 = *(void *)(v63 + 296);
      uint64_t v73 = *(void *)(v63 + 304);
      uint64_t v74 = *(void *)(v63 + 312);
      uint64_t v75 = *(void *)(v63 + 320);
      uint64_t v76 = *(void *)(v63 + 328);
      uint64_t v77 = *(void *)(v63 + 336);
      uint64_t v78 = *(void *)(v63 + 344);
      unsigned __int8 v79 = *(unsigned char *)(v63 + 352);
      uint64_t v80 = v128;
      *(void *)(v63 + 288) = v46;
      *(void *)(v63 + 296) = v80;
      uint64_t v81 = v127;
      *(void *)(v63 + 304) = v64;
      *(void *)(v63 + 312) = v81;
      *(void *)(v63 + 320) = v65;
      *(void *)(v63 + 328) = v66;
      *(void *)(v63 + 336) = v67;
      *(void *)(v63 + 344) = v50;
      *(unsigned char *)(v63 + 352) = v70 & 1 | 0x40;
      outlined consume of AutoShortcutsSetEnablementFlow.State(v71, v72, v73, v74, v75, v76, v77, v78, v79);
      goto LABEL_28;
    case 3:
      goto LABEL_28;
    case 4:
      if (v136 != 128) {
        goto LABEL_28;
      }
      OUTLINED_FUNCTION_86_4(v132, v131);
      if (v83 | v82) {
        goto LABEL_28;
      }
      Input.parse.getter();
      uint64_t v84 = v122;
      uint64_t v85 = v123;
      if ((*(unsigned int (**)(uint8_t *, uint64_t))(v122 + 88))(v50, v123) != enum case for Parse.uso(_:))
      {
        (*(void (**)(uint8_t *, uint64_t))(v84 + 8))(v50, v85);
        goto LABEL_24;
      }
      (*(void (**)(uint8_t *, uint64_t))(v84 + 96))(v50, v85);
      (*(void (**)(uint64_t, uint8_t *, uint64_t))(v48 + 32))(v49, v50, v47);
      USOParse.userParse.getter();
      uint64_t v86 = Siri_Nlu_External_UserParse.userDialogActs.getter();
      OUTLINED_FUNCTION_66();
      v87();
      specialized Collection.first.getter(v86, v13);
      swift_bridgeObjectRelease();
      if (__swift_getEnumTagSinglePayload(v13, 1, v119) == 1)
      {
        OUTLINED_FUNCTION_20_3();
        v88();
        uint64_t v89 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
        uint64_t v90 = v13;
LABEL_23:
        _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v90, v89);
        goto LABEL_24;
      }
      uint64_t v95 = v116;
      OUTLINED_FUNCTION_80_5();
      v96();
      Siri_Nlu_External_UserDialogAct.convertToVoiceCommandTask()();
      uint64_t v50 = (uint8_t *)(v95 + 8);
      OUTLINED_FUNCTION_85_5();
      v97();
      OUTLINED_FUNCTION_20_3();
      v98();
      uint64_t v99 = type metadata accessor for VoiceCommandTask(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v99) == 1)
      {
        uint64_t v89 = &demangling cache variable for type metadata for VoiceCommandTask?;
        uint64_t v90 = (uint64_t)v8;
        goto LABEL_23;
      }
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v101 = *v8;
        uint64_t v102 = *((void *)v8 + 1);
        uint64_t v103 = *((void *)v8 + 2);
        OUTLINED_FUNCTION_21_23();
        OUTLINED_FUNCTION_88_3();
        *(void *)(v1 + 288) = v101;
        *(void *)(v1 + 296) = v102;
        *(void *)(v1 + 304) = v103;
        *(_OWORD *)(v1 + 312) = 0u;
        *(_OWORD *)(v1 + 328) = 0u;
        *(_OWORD *)(v1 + 337) = 0u;
        outlined consume of AutoShortcutsSetEnablementFlow.State(v104, v105, v106, v107, v108, v109, v110, v111, v112);
        goto LABEL_28;
      }
      outlined destroy of VoiceCommandTask((uint64_t)v8);
LABEL_24:
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v100 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v100);
        uint64_t v94 = "#AutoShortcutsSetEnablementFlow: ignoring parse input without mode and appId";
LABEL_26:
        _os_log_impl(&dword_0, v91, v92, v94, v50, 2u);
        OUTLINED_FUNCTION_7_0();
      }
LABEL_27:

LABEL_28:
      OUTLINED_FUNCTION_27_1();
      return;
    default:
      v136 &= 0x1Fu;
      outlined release of AutoShortcutsSetEnablementFlow.State((uint64_t)v129);
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_32(v52))
      {
        uint64_t v53 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)uint64_t v53 = 0;
        OUTLINED_FUNCTION_7_0();
      }

      OUTLINED_FUNCTION_21_23();
      uint64_t v54 = *(void *)(v1 + 288);
      uint64_t v55 = *(void *)(v1 + 296);
      uint64_t v56 = *(void *)(v1 + 304);
      uint64_t v57 = *(void *)(v1 + 312);
      uint64_t v58 = *(void *)(v1 + 320);
      uint64_t v59 = *(void *)(v1 + 328);
      uint64_t v60 = *(void *)(v1 + 336);
      uint64_t v61 = *(void *)(v1 + 344);
      unsigned __int8 v62 = *(unsigned char *)(v1 + 352);
      *(_OWORD *)(v1 + 288) = 0u;
      *(_OWORD *)(v1 + 304) = 0u;
      *(_OWORD *)(v1 + 320) = 0u;
      *(_OWORD *)(v1 + 336) = 0u;
      *(unsigned char *)(v1 + 352) = 96;
      outlined consume of AutoShortcutsSetEnablementFlow.State(v54, v55, v56, v57, v58, v59, v60, v61, v62);
      goto LABEL_28;
  }
}

uint64_t AutoShortcutsSetEnablementFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 184) = a1;
  *(void *)(v2 + 192) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutsSetEnablementFlow.execute());
}

uint64_t AutoShortcutsSetEnablementFlow.execute()()
{
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v1 + 168))();
  outlined init with take of AutoShortcutsSetEnablementFlow.State((void *)(v0 + 88), (void *)(v0 + 16));
  uint64_t v2 = *(void *)(v0 + 16);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 80);
  switch(v3 >> 5)
  {
    case 1u:
      *(unsigned char *)(v0 + 80) = v3 & 0x1F;
      outlined release of AutoShortcutsSetEnablementFlow.State(v0 + 88);
      goto LABEL_16;
    case 2u:
      *(unsigned char *)(v0 + 80) = v3 & 0x1F;
      uint64_t v8 = *(void *)(v0 + 48);
      uint64_t v9 = *(void *)(v0 + 56);
      *(void *)(v0 + 208) = *(void *)(v0 + 32);
      *(void *)(v0 + 216) = v8;
      uint64_t v10 = *(void *)(v0 + 72);
      *(void *)(v0 + 224) = v9;
      *(void *)(v0 + 232) = v10;
      if (v3)
      {
        swift_task_alloc();
        OUTLINED_FUNCTION_22_0();
        *(void *)(v0 + 240) = v36;
        *uint64_t v36 = v37;
        v36[1] = AutoShortcutsSetEnablementFlow.execute();
        return AutoShortcutsSetEnablementFlow.executeIntentConfirmed(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_task_alloc();
        OUTLINED_FUNCTION_22_0();
        *(void *)(v0 + 248) = v11;
        *uint64_t v11 = v12;
        v11[1] = AutoShortcutsSetEnablementFlow.execute();
        OUTLINED_FUNCTION_70_6();
        return AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:)();
      }
    case 3u:
      *(unsigned char *)(v0 + 80) = v3 & 0x1F;
      goto LABEL_21;
    case 4u:
      OUTLINED_FUNCTION_86_4(*(int8x16_t *)(v0 + 40), *(int8x16_t *)(v0 + 24));
      uint64_t v15 = v14 | v2;
      if (v16 != 128 || v15 != 0) {
        goto LABEL_21;
      }
LABEL_16:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      uint64_t v19 = (void *)OUTLINED_FUNCTION_26_1(v18, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_101_0(v20))
      {
        uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_28_2(v21);
        OUTLINED_FUNCTION_7_0();
      }
      uint64_t v24 = *(void *)(v0 + 192);

      OUTLINED_FUNCTION_21_23();
      uint64_t v25 = *(void *)(v24 + 288);
      uint64_t v26 = *(void *)(v24 + 296);
      uint64_t v27 = *(void *)(v24 + 304);
      uint64_t v28 = *(void *)(v24 + 312);
      uint64_t v29 = *(void *)(v24 + 320);
      uint64_t v30 = *(void *)(v24 + 328);
      uint64_t v31 = *(void *)(v24 + 336);
      uint64_t v32 = *(void *)(v24 + 344);
      unsigned __int8 v33 = *(unsigned char *)(v24 + 352);
      *(_OWORD *)(v24 + 288) = 0u;
      *(_OWORD *)(v24 + 304) = 0u;
      *(_OWORD *)(v24 + 320) = 0u;
      *(_OWORD *)(v24 + 336) = 0u;
      *(unsigned char *)(v24 + 352) = 96;
      outlined consume of AutoShortcutsSetEnablementFlow.State(v25, v26, v27, v28, v29, v30, v31, v32, v33);
LABEL_21:
      static ExecuteResponse.complete()();
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_70_6();
      __asm { BRAA            X1, X16 }
      return result;
    default:
      *(unsigned char *)(v0 + 80) = v3 & 0x1F;
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      *(void *)(v0 + 200) = v4;
      *uint64_t v4 = v5;
      v4[1] = AutoShortcutsSetEnablementFlow.execute();
      OUTLINED_FUNCTION_70_6();
      return AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:)();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  unsigned int v3 = v1 + 88;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  outlined release of AutoShortcutsSetEnablementFlow.State(v3);
  OUTLINED_FUNCTION_18_0();
  return v6();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  *(void *)(v1 + 104) = v2;
  *(void *)(v1 + 112) = v0;
  *(unsigned char *)(v1 + 240) = v6;
  *(void *)(v1 + 88) = v7;
  *(void *)(v1 + 96) = v4;
  *(void *)(v1 + 120) = *v0;
  *(void *)(v1 + 128) = type metadata accessor for AutoShortcutFirstRunFlow();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 136) = v8;
  *uint64_t v8 = v1;
  v8[1] = AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:);
  return static AutoShortcutFirstRunFlow.isAutoShortcutsEnabledFor(bundleId:voiceShortcutsClient:)(v5, v3, (uint64_t)(v0 + 14));
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(unsigned char *)(v1 + 241) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 176) = v3;
  *(unsigned char *)(v1 + 242) = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_21_0();
  int v10 = *(unsigned __int8 *)(v9 + 241);
  if (v10 == 2)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = (void *)OUTLINED_FUNCTION_26_1(v11, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_101_0(v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v14);
      OUTLINED_FUNCTION_76_8(&dword_0, v15, v16, "#AutoShortcutsSetEnablementFlow: failed to determine if app already has appShortcuts enabled");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v17 = *(void *)(v9 + 112);

    uint64_t v18 = v17 + 288;
    OUTLINED_FUNCTION_21_23();
    uint64_t v19 = OUTLINED_FUNCTION_67_8();
    uint64_t v28 = 3;
LABEL_19:
    *(void *)(v17 + 288) = v28;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    OUTLINED_FUNCTION_30_17(v19, v20, v21, v22, v23, v24, v25, v26, v27);
    static ExecuteResponse.complete()();
    OUTLINED_FUNCTION_18_0();
    return v51();
  }
  uint64_t v29 = *(void *)(v9 + 128);
  uint64_t v31 = *(void *)(v9 + 104);
  uint64_t v30 = *(void **)(v9 + 112);
  uint64_t v32 = *(void *)(v9 + 96);
  uint64_t v33 = v30[27];
  uint64_t v34 = v30[28];
  uint64_t v35 = __swift_project_boxed_opaque_existential_1(v30 + 24, v33);
  *(void *)(v9 + 144) = specialized static AutoShortcutFirstRunFlow.getAppName(bundleId:appNameResolver:)(v32, v31, (uint64_t)v35, v29, v33, v34);
  *(void *)(v9 + 152) = v36;
  if (!v36)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    uint64_t v46 = (void *)OUTLINED_FUNCTION_26_1(v45, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_101_0(v47))
    {
      uint64_t v48 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v48);
      OUTLINED_FUNCTION_76_8(&dword_0, v49, v50, "#AutoShortcutsSetEnablementFlow: failed to determine app name");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v17 = *(void *)(v9 + 112);

    uint64_t v18 = v17 + 288;
    OUTLINED_FUNCTION_21_23();
    uint64_t v19 = OUTLINED_FUNCTION_67_8();
    uint64_t v28 = 4;
    goto LABEL_19;
  }
  if (*(unsigned char *)(v9 + 240))
  {
    uint64_t v37 = v36;
    if (*(unsigned char *)(v9 + 240) == 1)
    {
      if ((*(unsigned char *)(v9 + 241) & 1) == 0)
      {
        *(void *)(v9 + 216) = _swiftEmptyArrayStorage;
        *(void *)(v9 + 224) = 0;
        swift_task_alloc();
        OUTLINED_FUNCTION_22_0();
        *(void *)(v9 + 232) = v38;
        *uint64_t v38 = v39;
        v38[1] = AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:);
        uint64_t v40 = OUTLINED_FUNCTION_108_0();
        return AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)(v40, 0, v41, v42, v43, v37, (uint64_t)_swiftEmptyArrayStorage, 0, a9);
      }
      BOOL v60 = 0;
      goto LABEL_28;
    }
    if (v10)
    {
      BOOL v60 = (*(unsigned char *)(v9 + 241) & 1) == 0;
LABEL_28:
      *(void *)(v9 + 192) = _swiftEmptyArrayStorage;
      *(void *)(v9 + 200) = 0;
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      *(void *)(v9 + 208) = v61;
      void *v61 = v62;
      v61[1] = AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:);
      uint64_t v63 = OUTLINED_FUNCTION_108_0();
      return AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)(v63, v60, v64, v65, v66, v37, (uint64_t)_swiftEmptyArrayStorage, 0, a9);
    }
  }
  uint64_t v52 = *(void *)(v9 + 112);
  uint64_t v53 = v52 + 16;
  uint64_t v54 = v52 + 152;
  uint64_t v55 = *(void *)(v52 + 232);
  uint64_t v56 = *(void *)(v52 + 96);
  *(void *)(v9 + 160) = v56;
  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v9 + 168) = v57;
  *uint64_t v57 = v9;
  v57[1] = AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:);
  uint64_t v58 = OUTLINED_FUNCTION_82_1(*(void *)(v9 + 96));
  return static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)(v58, v59, v53, v54, v55, v56);
}

{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  OUTLINED_FUNCTION_0_0();
  uint64_t v16 = v15;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v17 = v16;
  uint64_t v18 = *v10;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v19 = v18;
  swift_task_dealloc();
  if (v9)
  {
    swift_errorRelease();
    uint64_t v14 = 0;
    uint64_t v12 = 0;
  }
  if (!*(unsigned char *)(v16 + 240))
  {
    uint64_t v22 = *(void *)(v16 + 176);
    uint64_t v20 = 1;
    uint64_t v21 = 1;
    if (*(unsigned char *)(v16 + 241)) {
      goto LABEL_8;
    }
LABEL_12:
    *(void *)(v16 + 192) = v22;
    *(void *)(v16 + 200) = v12;
    uint64_t v30 = *(void *)(v16 + 152);
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v16 + 208) = v31;
    *uint64_t v31 = v18;
    v31[1] = AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:);
    uint64_t v32 = OUTLINED_FUNCTION_120_0();
    return AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)(v32, v20, v33, v34, v35, v30, v22, v14, a9);
  }
  if (*(unsigned char *)(v16 + 240) != 1)
  {
    uint64_t v22 = *(void *)(v16 + 176);
    uint64_t v20 = (*(unsigned char *)(v16 + 241) & 1) == 0;
    goto LABEL_12;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = *(void *)(v16 + 176);
  if (*(unsigned char *)(v16 + 241)) {
    goto LABEL_12;
  }
LABEL_8:
  *(void *)(v16 + 216) = v22;
  *(void *)(v16 + 224) = v12;
  uint64_t v23 = *(void *)(v16 + 152);
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v16 + 232) = v24;
  *uint64_t v24 = v18;
  v24[1] = AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:);
  uint64_t v25 = OUTLINED_FUNCTION_120_0();
  return AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)(v25, v21, v26, v27, v28, v23, v22, v14, a9);
}

void AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:)()
{
  OUTLINED_FUNCTION_21_0();
  if ((*(unsigned char *)(v0 + 242) & 1) == 0)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v1;
    *uint64_t v1 = v0;
    v1[1] = AutoShortcutsSetEnablementFlow.executeIntentReceived(mode:appId:);
    OUTLINED_FUNCTION_48_0();
    __asm { BRAA            X2, X16 }
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_26_1(v4, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_5_3(v6))
  {
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v7);
    OUTLINED_FUNCTION_23_0(&dword_0, v8, v9, "#AutoShortcutsSetEnablementFlow: failed to determine app's appShortcut phrases");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v10 = *(unsigned __int8 *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 112);

  OUTLINED_FUNCTION_21_23();
  uint64_t v12 = *(void *)(v11 + 288);
  uint64_t v13 = *(void *)(v11 + 296);
  uint64_t v14 = *(void *)(v11 + 304);
  uint64_t v15 = *(void *)(v11 + 312);
  uint64_t v16 = *(void *)(v11 + 320);
  uint64_t v17 = *(void *)(v11 + 328);
  uint64_t v18 = *(void *)(v11 + 336);
  uint64_t v19 = *(void *)(v11 + 344);
  unsigned __int8 v20 = *(unsigned char *)(v11 + 352);
  *(void *)(v11 + 288) = v10;
  *(_OWORD *)(v11 + 296) = 0u;
  *(_OWORD *)(v11 + 312) = 0u;
  *(_OWORD *)(v11 + 328) = 0u;
  *(void *)(v11 + 344) = 0;
  *(unsigned char *)(v11 + 352) = 96;
  outlined consume of AutoShortcutsSetEnablementFlow.State(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  static ExecuteResponse.complete()();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_48_0();
  __asm { BRAA            X1, X16 }
}

uint64_t static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  void v6[4] = a1;
  v6[5] = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:));
}

uint64_t static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)()
{
  OUTLINED_FUNCTION_9_0();
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 48), *(void *)(*(void *)(v0 + 48) + 24));
  if (DeviceState.canOutputAppShortcutPhrases()())
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v1;
    *uint64_t v1 = v0;
    v1[1] = static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:);
    OUTLINED_FUNCTION_82_1(*(void *)(v0 + 32));
    return static AutoShortcutInvocation.getAutoShortcuts(bundleId:provider:preferences:baseTemplatePhrase:)();
  }
  else
  {
    OUTLINED_FUNCTION_78_1();
    return v3(_swiftEmptyArrayStorage, 0);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 88) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *os_log_type_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  else {
    *(void *)(v5 + 120) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, void);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_78_1();
  return v2(v1, 0);
}

void static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)()
{
  unint64_t v2 = v1[11];
  if (v2 >> 62)
  {
LABEL_24:
    OUTLINED_FUNCTION_61_6();
    uint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
    if (v0) {
      goto LABEL_3;
    }
  }
  else
  {
    OUTLINED_FUNCTION_117_1();
    swift_bridgeObjectRetain();
    if (v0)
    {
LABEL_3:
      if (v0 >= 1)
      {
        uint64_t v3 = 0;
        v2 &= 0xC000000000000001;
        uint64_t v33 = v1[11] + 32;
        uint64_t v4 = _swiftEmptyArrayStorage;
        while (1)
        {
          if (v2) {
            id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v5 = *(id *)(v33 + 8 * v3);
          }
          os_log_type_t v6 = v5;
          id v7 = [v5 orderedPhrases];
          type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase);
          unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v8 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v17)
            {
LABEL_19:
              swift_bridgeObjectRelease();

              goto LABEL_20;
            }
          }
          else if (!*(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8)))
          {
            goto LABEL_19;
          }
          if ((v8 & 0xC000000000000001) != 0)
          {
            id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8)))
            {
              __break(1u);
              goto LABEL_24;
            }
            id v9 = *(id *)(v8 + 32);
          }
          uint64_t v10 = v9;
          swift_bridgeObjectRelease();
          id v11 = [v10 localizedPhrase];

          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v14 = v13;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v4 = v18;
          }
          unint64_t v15 = v4[2];
          if (v15 >= v4[3] >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v4 = v19;
          }
          v4[2] = v15 + 1;
          uint64_t v16 = &v4[2 * v15];
          uint64_t v16[4] = v12;
          v16[5] = v14;
LABEL_20:
          if (v0 == ++v3) {
            goto LABEL_26;
          }
        }
      }
      __break(1u);
      goto LABEL_38;
    }
  }
  uint64_t v4 = _swiftEmptyArrayStorage;
LABEL_26:
  v1[12] = v4;
  swift_bridgeObjectRelease_n();
  if (v4[2])
  {
    OUTLINED_FUNCTION_29_17();
    unsigned __int8 v20 = (void *)swift_task_alloc();
    v1[13] = v20;
    *unsigned __int8 v20 = v1;
    v20[1] = static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:);
    OUTLINED_FUNCTION_3();
    __asm { BRAA            X2, X16 }
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for voiceCommands == -1)
  {
LABEL_31:
    uint64_t v23 = type metadata accessor for Logger();
    os_log_type_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    BOOL v27 = OUTLINED_FUNCTION_5_3(v26);
    unint64_t v28 = v1[5];
    if (v27)
    {
      uint64_t v29 = v1[4];
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_bridgeObjectRetain();
      v1[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v25, v24, "#AutoShortcutsSetEnablementFlow failed to get appShortcutPhrases for appId=%s", v30, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    OUTLINED_FUNCTION_78_1();
    OUTLINED_FUNCTION_3();
    __asm { BRAA            X3, X16 }
  }
LABEL_38:
  swift_once();
  goto LABEL_31;
}

uint64_t static AutoShortcutsSetEnablementFlow.prepareAppShortcutPhrases(appId:deviceState:provider:preferences:dialogTemplating:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 16) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow error handling appShortcutPhrases; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_78_1();
  OUTLINED_FUNCTION_28_0();
  return v21(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t AutoShortcutsSetEnablementFlow.executeIntentConfirmed(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  *(void *)(v1 + 144) = v16;
  *(void *)(v1 + 152) = v0;
  *(void *)(v1 + 128) = v8;
  *(void *)(v1 + 136) = v9;
  *(void *)(v1 + 112) = v10;
  *(void *)(v1 + 120) = v11;
  *(void *)(v1 + 96) = v4;
  *(void *)(v1 + 104) = v2;
  *(unsigned char *)(v1 + 180) = v6;
  *(void *)(v1 + 88) = v12;
  type metadata accessor for AutoShortcutFirstRunFlow();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v1 + 160) = v13;
  *uint64_t v13 = v1;
  v13[1] = AutoShortcutsSetEnablementFlow.executeIntentConfirmed(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  return static AutoShortcutFirstRunFlow.setSiriAutoShortcutsEnablement(isEnable:bundleId:voiceShortcutsClient:userDefaults:)(v7, v5, v3, v0 + 112, v0 + 240);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(unsigned char *)(v1 + 181) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(unsigned char *)(v1 + 182) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t AutoShortcutsSetEnablementFlow.executeIntentConfirmed(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_21_0();
  if (*(unsigned char *)(v10 + 181) != 1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    uint64_t v23 = OUTLINED_FUNCTION_26_1(v22, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v24))
    {
      int v25 = *(unsigned __int8 *)(v10 + 180);
      os_log_type_t v26 = (uint8_t *)OUTLINED_FUNCTION_88();
      *(_DWORD *)os_log_type_t v26 = 67109120;
      *(_DWORD *)(v10 + 176) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v23, v9, "#AutoShortcutsSetEnablementFlow: failed to set appShortcuts enablement; to: %{BOOL}d",
        v26,
        8u);
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v27 = *(void *)(v10 + 152);
    OUTLINED_FUNCTION_21_23();
    *(void *)(v27 + 288) = 6;
    OUTLINED_FUNCTION_114_0();
    *(void *)(v27 + 344) = 0;
    *(unsigned char *)(v27 + 352) = 96;
    outlined consume of AutoShortcutsSetEnablementFlow.State(v28, v29, v30, v31, v32, v33, v34, v35, v36);
    static ExecuteResponse.complete()();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_6_1();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v10 + 168) = v11;
  *uint64_t v11 = v10;
  v11[1] = AutoShortcutsSetEnablementFlow.executeIntentConfirmed(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  OUTLINED_FUNCTION_6_1();
  return AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)(v12, v13, v14, v15, v16, v17, v18, v19, a9);
}

#error "18D2B8: call analysis failed (funcsize=53)"

uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v10 + 256) = a9;
  *(void *)(v10 + 264) = v9;
  *(void *)(v10 + 240) = v11;
  *(void *)(v10 + 248) = v12;
  *(void *)(v10 + 224) = v13;
  *(void *)(v10 + 232) = v14;
  *(void *)(v10 + 208) = v15;
  *(void *)(v10 + 216) = v16;
  *(unsigned char *)(v10 + 508) = v17;
  *(void *)(v10 + 200) = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v19);
  *(void *)(v10 + 272) = OUTLINED_FUNCTION_25();
  uint64_t v20 = type metadata accessor for DialogPhase();
  *(void *)(v10 + 280) = v20;
  OUTLINED_FUNCTION_1_0(v20);
  *(void *)(v10 + 288) = v21;
  *(void *)(v10 + 296) = OUTLINED_FUNCTION_13_0();
  *(void *)(v10 + 304) = swift_task_alloc();
  uint64_t v22 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v10 + 312) = v22;
  OUTLINED_FUNCTION_1_0(v22);
  *(void *)(v10 + 320) = v23;
  *(void *)(v10 + 328) = OUTLINED_FUNCTION_25();
  uint64_t v24 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  *(void *)(v10 + 336) = v24;
  OUTLINED_FUNCTION_1_0(v24);
  *(void *)(v10 + 344) = v25;
  *(void *)(v10 + 352) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return OUTLINED_FUNCTION_39_14(v26, v27, v28);
}

{
  uint64_t v9;
  char v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  char v13;
  void (*v14)(void);
  uint64_t v15;
  void *v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;

  OUTLINED_FUNCTION_13_1();
  uint64_t v10 = *(unsigned char *)(v9 + 508);
  uint64_t v11 = OUTLINED_FUNCTION_65_7();
  v12(v11);
  uint64_t v13 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_20_3();
  v14();
  if (v13 & 1) == 0 || (v10)
  {
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v9 + 496) = v18;
    *uint64_t v18 = v9;
    v18[1] = AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    uint64_t v19 = *(void *)(v9 + 240);
    uint64_t v20 = *(void *)(v9 + 248);
    uint64_t v21 = *(void *)(v9 + 224);
    uint64_t v22 = *(void *)(v9 + 232);
    uint64_t v23 = *(void *)(v9 + 208);
    uint64_t v24 = *(void *)(v9 + 216);
    uint64_t v25 = *(unsigned __int8 *)(v9 + 508);
    uint64_t v26 = *(void *)(v9 + 200);
    return AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)(v26, v25, v23, v24, v21, v22, v19, v20, a9);
  }
  else
  {
    *(void *)(v9 + 360) = *(void *)(*(void *)(v9 + 264) + 96);
    OUTLINED_FUNCTION_16_5();
    uint64_t v27 = (uint64_t (*)(void))(*(void *)(v15 + 240) + **(int **)(v15 + 240));
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v9 + 368) = v16;
    *uint64_t v16 = v9;
    v16[1] = AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    return v27();
  }
}

uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  v2[47] = v4;
  v2[48] = v5;
  v2[49] = v6;
  v2[50] = v7;
  v2[51] = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_29_17();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 136) + **(int **)(v1 + 136));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  uint64_t v3 = OUTLINED_FUNCTION_82_1(*(void *)(v0 + 224));
  return v5(v3);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 424) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t *v0;
  void *v1;
  Swift::String_optional v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void (*v8)(void);
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  os_log_type_t v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t *, uint64_t *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;

  uint64_t v1 = (void *)v0[53];
  if (v1)
  {
    uint64_t v28 = v0[49];
    uint64_t v29 = v0[50];
    uint64_t v26 = v0[47];
    uint64_t v27 = v0[48];
    uint64_t v25 = v0[34];
    uint64_t v2 = DialogExecutionResult.firstDialogFullPrint()();
    v0[54] = (uint64_t)v2.value._object;
    uint64_t v3 = AutoShortcutsSetEnablementFlow.getShortcutsBundleIdAndDisplayName()();
    uint64_t v32 = v4;
    uint64_t v33 = v3;
    uint64_t v30 = v5;
    uint64_t v31 = v6;
    v0[55] = v5;
    v0[56] = v6;
    static DialogPhase.confirmation.getter();
    uint64_t v7 = [v1 catId];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_59_0();
    v8();
    OutputGenerationManifest.init(dialogPhase:_:)();
    OutputGenerationManifest.responseViewId.setter();
    OUTLINED_FUNCTION_51_5();
    v9();
    OutputGenerationManifest.listenAfterSpeaking.setter();
    OUTLINED_FUNCTION_16_5();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(v10 + 80))(v26, v27, v28, v29, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = type metadata accessor for NLContextUpdate();
    __swift_storeEnumTagSinglePayload(v25, 0, 1, v11);
    OutputGenerationManifest.nlContextUpdate.setter();
    type metadata accessor for ResponseFactory();
    OUTLINED_FUNCTION_35_2();
    v0[57] = ResponseFactory.init()();
    v0[5] = type metadata accessor for WorkflowDataModels(0);
    v0[6] = lazy protocol witness table accessor for type AutoShortcutsSetEnablementFlow and conformance AutoShortcutsSetEnablementFlow((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, 255, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
    uint64_t *boxed_opaque_existential_1 = v33;
    boxed_opaque_existential_1[1] = v30;
    boxed_opaque_existential_1[2] = v32;
    boxed_opaque_existential_1[3] = v31;
    boxed_opaque_existential_1[4] = v26;
    boxed_opaque_existential_1[5] = v27;
    boxed_opaque_existential_1[6] = v28;
    boxed_opaque_existential_1[7] = v29;
    *((_OWORD *)boxed_opaque_existential_1 + 4) = xmmword_216970;
    *((unsigned char *)boxed_opaque_existential_1 + 80) = 0;
    *(Swift::String_optional *)(boxed_opaque_existential_1 + 11) = v2;
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = OUTLINED_FUNCTION_16_2();
    *(_OWORD *)(v13 + 16) = xmmword_211C70;
    *(void *)(v13 + 32) = v1;
    uint64_t v35 = v13;
    specialized Array._endMutation()();
    v0[58] = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(0, 0xF000000000000000);
    uint64_t v34 = (uint64_t (*)(uint64_t *, uint64_t *, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)
                                                                         + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:));
    swift_bridgeObjectRetain();
    uint64_t v14 = v1;
    uint64_t v15 = (void *)swift_task_alloc();
    v0[59] = (uint64_t)v15;
    *uint64_t v15 = v0;
    v15[1] = AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    uint64_t v16 = v0[41];
    return v34(v0 + 7, v0 + 2, v35, v16);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = (void *)OUTLINED_FUNCTION_26_1(v18, (uint64_t)static Logger.voiceCommands);
    uint64_t v20 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v20))
    {
      uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v21);
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_21_23();
    OUTLINED_FUNCTION_5_34();
    static ExecuteResponse.complete()();
    OUTLINED_FUNCTION_62_7();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v24();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_60_6(*(void *)(v0 + 264));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  uint64_t v2 = OUTLINED_FUNCTION_71();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 488) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  void (*v10)(void);
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  uint64_t v21 = (void *)v0[53];
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[31];
  uint64_t v6 = v0[28];
  uint64_t v5 = v0[29];
  uint64_t v8 = v0[26];
  uint64_t v7 = v0[27];
  OUTLINED_FUNCTION_21_23();
  uint64_t v19 = *(void *)(v2 + 296);
  uint64_t v20 = *(void *)(v2 + 288);
  char v17 = *(void *)(v2 + 312);
  uint64_t v18 = *(void *)(v2 + 304);
  uint64_t v15 = *(void *)(v2 + 328);
  uint64_t v16 = *(void *)(v2 + 320);
  uint64_t v13 = *(void *)(v2 + 344);
  uint64_t v14 = *(void *)(v2 + 336);
  uint64_t v9 = *(unsigned char *)(v2 + 352);
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 296) = v8;
  *(void *)(v2 + 304) = v7;
  *(void *)(v2 + 312) = v6;
  *(void *)(v2 + 320) = v5;
  *(void *)(v2 + 328) = v3;
  *(void *)(v2 + 336) = v4;
  *(void *)(v2 + 344) = v1;
  *(unsigned char *)(v2 + 352) = 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of AutoShortcutsSetEnablementFlow.State(v20, v19, v18, v17, v16, v15, v14, v13, v9);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(0, 0xF000000000000000);
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
  OUTLINED_FUNCTION_66();
  v10();
  OUTLINED_FUNCTION_62_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v11();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_23_1();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_26_1(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_5_3(v3))
  {
    *(_DWORD *)OUTLINED_FUNCTION_88() = 67109120;
    *(_DWORD *)(v0 + 504) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_83_2(&dword_0, v4, v5, "#AutoShortcutsSetEnablementFlow: failed to get button labels; isEnabling=%{BOOL}d");
    OUTLINED_FUNCTION_7_0();
  }

  uint64_t v6 = *(void *)(v0 + 264);
  OUTLINED_FUNCTION_21_23();
  uint64_t v7 = *(void *)(v6 + 288);
  uint64_t v8 = *(void *)(v6 + 296);
  uint64_t v9 = *(void *)(v6 + 304);
  uint64_t v10 = *(void *)(v6 + 312);
  uint64_t v11 = *(void *)(v6 + 320);
  uint64_t v12 = *(void *)(v6 + 328);
  uint64_t v13 = *(void *)(v6 + 336);
  uint64_t v14 = *(void *)(v6 + 344);
  uint64_t v15 = *(unsigned char *)(v6 + 352);
  *(void *)(v6 + 288) = 1;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  OUTLINED_FUNCTION_30_17(v7, v8, v9, v10, v11, v12, v13, v14, v15);
  static ExecuteResponse.complete()();
  swift_errorRelease();
  OUTLINED_FUNCTION_62_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_98_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v21, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v22 = (void *)Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v23))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_88();
    OUTLINED_FUNCTION_53_6(5.7779e-34);
    v20[24] = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_138_1();
    swift_errorRelease();
    OUTLINED_FUNCTION_10_33(&dword_0, v24, v25, "#AutoShortcutsSetEnablementFlow error publishing confirmation; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v37 = v20[54];
  uint64_t v38 = v20[61];
  uint64_t v36 = v20[50];
  uint64_t v41 = v20[41];
  uint64_t v39 = (void *)v20[53];
  uint64_t v40 = v20[39];

  OUTLINED_FUNCTION_21_23();
  OUTLINED_FUNCTION_31_18();
  static ExecuteResponse.complete()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  swift_errorRelease();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v20 + 7));
  OUTLINED_FUNCTION_20_3();
  v26();
  OUTLINED_FUNCTION_62_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_22_12();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, v36, v37, v38, v39, v40, v41, v20 + 7, a18, a19, a20);
}

uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v10 + 296) = a9;
  *(void *)(v10 + 304) = v9;
  *(void *)(v10 + 280) = v11;
  *(void *)(v10 + 288) = v12;
  *(void *)(v10 + 264) = v13;
  *(void *)(v10 + 272) = v14;
  *(void *)(v10 + 248) = v15;
  *(void *)(v10 + 256) = v16;
  *(unsigned char *)(v10 + 89) = v17;
  *(void *)(v10 + 240) = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v19);
  *(void *)(v10 + 312) = OUTLINED_FUNCTION_25();
  uint64_t v20 = type metadata accessor for DialogPhase();
  *(void *)(v10 + 320) = v20;
  OUTLINED_FUNCTION_1_0(v20);
  *(void *)(v10 + 328) = v21;
  *(void *)(v10 + 336) = OUTLINED_FUNCTION_13_0();
  *(void *)(v10 + 344) = swift_task_alloc();
  uint64_t v22 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v10 + 352) = v22;
  OUTLINED_FUNCTION_1_0(v22);
  *(void *)(v10 + 360) = v23;
  *(void *)(v10 + 368) = OUTLINED_FUNCTION_25();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  OUTLINED_FUNCTION_16(v24);
  *(void *)(v10 + 376) = OUTLINED_FUNCTION_25();
  uint64_t v25 = type metadata accessor for TemplatingResult();
  *(void *)(v10 + 384) = v25;
  OUTLINED_FUNCTION_1_0(v25);
  *(void *)(v10 + 392) = v26;
  *(void *)(v10 + 400) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return OUTLINED_FUNCTION_39_14(v27, v28, v29);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(void);
  uint64_t v21;
  void *v22;
  os_log_type_t v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  void *v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_13_1();
  uint64_t v10 = *(void *)(v9 + 448);
  if (v10)
  {
    uint64_t v11 = *(void *)(v9 + 432);
    if (*(unsigned char *)(v9 + 89))
    {
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      *(void *)(v9 + 456) = v12;
      *uint64_t v12 = v13;
      v12[1] = AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
      uint64_t v14 = *(void *)(v9 + 424);
      uint64_t v15 = *(void *)(v9 + 280);
      uint64_t v16 = *(void *)(v9 + 288);
      char v17 = *(void *)(v9 + 248);
      uint64_t v18 = *(void *)(v9 + 256);
      return AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:)(v9 + 96, v10, v17, v18, v14, v11, v15, v16, a9);
    }
    else
    {
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v9 + 496) = v28;
      *uint64_t v28 = v9;
      v28[1] = AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
      uint64_t v29 = *(void *)(v9 + 424);
      return AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:)(v9 + 56, v10, v29, v11);
    }
  }
  else
  {
    OUTLINED_FUNCTION_2_6();
    v20();
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = (void *)OUTLINED_FUNCTION_26_1(v21, (uint64_t)static Logger.voiceCommands);
    uint64_t v23 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v23))
    {
      uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v24);
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_21_23();
    OUTLINED_FUNCTION_5_34();
    static ExecuteResponse.complete()();
    OUTLINED_FUNCTION_29_20();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v27();
  }
}

uint64_t AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  OUTLINED_FUNCTION_14_0();
  v0[51] = *(void *)(v0[38] + 96);
  OUTLINED_FUNCTION_16_5();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[52] = v1;
  *uint64_t v1 = v2;
  v1[1] = AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  OUTLINED_FUNCTION_119_1();
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 448) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  uint64_t v6 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v2 + 464) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v2 + 480) = v6;
  *(unsigned char *)(v2 + 90) = *(unsigned char *)(v2 + 128);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  *(_OWORD *)(v2 + 504) = *(_OWORD *)(v2 + 56);
  *(_OWORD *)(v2 + 520) = *(_OWORD *)(v2 + 72);
  *(unsigned char *)(v2 + 91) = *(unsigned char *)(v2 + 88);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 552) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_60_6(*(void *)(v0 + 304));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v1;
  *uint64_t v1 = v0;
  v1[1] = AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  uint64_t v2 = OUTLINED_FUNCTION_71();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 568) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  void (*v9)(void);
  void (*v10)(void);
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  uint64_t v23 = *(void **)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v22 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v13 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 89);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_21_23();
  uint64_t v20 = *(void *)(v1 + 296);
  uint64_t v21 = *(void *)(v1 + 288);
  uint64_t v18 = *(void *)(v1 + 312);
  uint64_t v19 = *(void *)(v1 + 304);
  uint64_t v16 = *(void *)(v1 + 328);
  char v17 = *(void *)(v1 + 320);
  uint64_t v14 = *(void *)(v1 + 344);
  uint64_t v15 = *(void *)(v1 + 336);
  uint64_t v8 = *(unsigned char *)(v1 + 352);
  *(void *)(v1 + 288) = v7;
  *(void *)(v1 + 296) = v6;
  *(void *)(v1 + 304) = v5;
  *(void *)(v1 + 312) = v13;
  *(void *)(v1 + 320) = v4;
  *(void *)(v1 + 328) = v3;
  *(void *)(v1 + 336) = v22;
  *(void *)(v1 + 344) = v2;
  *(unsigned char *)(v1 + 352) = 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of AutoShortcutsSetEnablementFlow.State(v21, v20, v19, v18, v17, v16, v15, v14, v8);
  static ExecuteResponse.ongoing(requireInput:)();

  OUTLINED_FUNCTION_51_5();
  v9();
  OUTLINED_FUNCTION_66();
  v10();
  OUTLINED_FUNCTION_29_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v11();
}

void AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void *)(v0 + 376);
  if (__swift_getEnumTagSinglePayload(v1, 1, *(void *)(v0 + 384)) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1, &demangling cache variable for type metadata for TemplatingResult?);
  }
  else
  {
    OUTLINED_FUNCTION_80_5();
    v2();
    Swift::String_optional v3 = TemplatingResult.firstSectionContentText()();
    *(Swift::String_optional *)(v0 + 424) = v3;
    if (v3.value._object)
    {
      OUTLINED_FUNCTION_29_17();
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 440) = v4;
      *uint64_t v4 = v0;
      v4[1] = AutoShortcutsSetEnablementFlow.publishConfirmation_preRFv2(isEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
      OUTLINED_FUNCTION_78_4(*(void *)(v0 + 264));
      OUTLINED_FUNCTION_48_0();
      __asm { BRAA            X4, X16 }
    }
    (*(void (**)(void, void))(*(void *)(v0 + 392) + 8))(*(void *)(v0 + 400), *(void *)(v0 + 384));
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_26_1(v7, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_5_3(v9))
  {
    uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v10);
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_21_23();
  OUTLINED_FUNCTION_5_34();
  static ExecuteResponse.complete()();
  OUTLINED_FUNCTION_29_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_48_0();
  __asm { BRAA            X1, X16 }
}

#error "18F39C: call analysis failed (funcsize=171)"

#error "18F764: call analysis failed (funcsize=171)"

#error "18FD00: call analysis failed (funcsize=104)"

#error "18FEB8: call analysis failed (funcsize=104)"

uint64_t AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned char v10[40] = a9;
  v10[41] = v9;
  v10[38] = a7;
  v10[39] = a8;
  v10[36] = a5;
  v10[37] = a6;
  v10[34] = a3;
  v10[35] = a4;
  v10[32] = a1;
  v10[33] = a2;
  OUTLINED_FUNCTION_10_0();
  return OUTLINED_FUNCTION_39_14(v11, v12, v13);
}

uint64_t AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:)()
{
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_16_5();
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(v1 + 232) + **(int **)(v1 + 232));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:);
  return v4();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *Swift::String_optional v3 = v2;
  *Swift::String_optional v3 = *v1;
  v2[43] = v4;
  v2[44] = v5;
  v2[45] = v6;
  v2[46] = v7;
  v2[47] = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  Swift::String_optional v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  v7[49] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[50] = v3;
    v7[51] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  Class isa;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(*(void *)(v0 + 408), *(void *)(v0 + 400), *(void **)(v0 + 264));
  outlined release of ActionConfirmationVisual(v0 + 16);
  uint64_t v1 = [*(id *)(v0 + 264) dialog];
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for PatternExecutionDialog);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    OUTLINED_FUNCTION_61_6();
    _CocoaArrayWrapper.endIndex.getter();
    Swift::String_optional v3 = OUTLINED_FUNCTION_90_1();
    if (v1) {
      goto LABEL_3;
    }
  }
  else
  {
    OUTLINED_FUNCTION_117_1();
    if (v1)
    {
LABEL_3:
      uint64_t v4 = (void *)(v2 & 0xC000000000000001);
      OUTLINED_FUNCTION_136_1(v3, (v2 & 0xC000000000000001) == 0);
      if ((v2 & 0xC000000000000001) != 0) {
        OUTLINED_FUNCTION_137_0();
      }
      else {
        uint64_t v5 = *(id *)(v2 + 32);
      }
      OUTLINED_FUNCTION_90_1();
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      Class isa = OUTLINED_FUNCTION_124_1().super.super.isa;
      [v4 setSpokenOnly:isa];

      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v8 = *(void *)(v0 + 360);
  uint64_t v7 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 256);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)(v0 + 344);
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  *(unsigned char *)(v9 + 32) = 0;
  OUTLINED_FUNCTION_18_0();
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_21_0();
  Swift::String_optional v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  v7[53] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7[54] = v3;
    v7[55] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  Class isa;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(*(void *)(v0 + 440), *(void *)(v0 + 432), *(void **)(v0 + 264));
  uint64_t v1 = [*(id *)(v0 + 264) dialog];
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for PatternExecutionDialog);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    OUTLINED_FUNCTION_61_6();
    _CocoaArrayWrapper.endIndex.getter();
    Swift::String_optional v3 = OUTLINED_FUNCTION_90_1();
    if (v1) {
      goto LABEL_3;
    }
  }
  else
  {
    OUTLINED_FUNCTION_117_1();
    if (v1)
    {
LABEL_3:
      uint64_t v4 = (void *)(v2 & 0xC000000000000001);
      OUTLINED_FUNCTION_136_1(v3, (v2 & 0xC000000000000001) == 0);
      if ((v2 & 0xC000000000000001) != 0) {
        OUTLINED_FUNCTION_137_0();
      }
      else {
        uint64_t v5 = *(id *)(v2 + 32);
      }
      OUTLINED_FUNCTION_90_1();
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      Class isa = OUTLINED_FUNCTION_124_1().super.super.isa;
      [v4 setSpokenOnly:isa];

      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v8 = *(void *)(v0 + 360);
  uint64_t v7 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 256);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)(v0 + 344);
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  *(unsigned char *)(v9 + 32) = 0;
  OUTLINED_FUNCTION_18_0();
  return v10();
}

#error "190278: call analysis failed (funcsize=145)"

uint64_t AutoShortcutsSetEnablementFlow.updateEnablingPattern(_:appId:promptLabel:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 248) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow error updating enabling pattern; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = *(void *)(v12 + 256);
  *(void *)uint64_t v18 = 1;
  *(void *)(v18 + 8) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  *(unsigned char *)(v18 + 32) = 1;
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  outlined release of ActionConfirmationVisual(v12 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 248) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow error updating enabling pattern; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = *(void *)(v12 + 256);
  *(void *)uint64_t v18 = 1;
  *(void *)(v18 + 8) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  *(unsigned char *)(v18 + 32) = 1;
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 248) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow error updating enabling pattern; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = *(void *)(v12 + 256);
  *(void *)uint64_t v18 = 1;
  *(void *)(v18 + 8) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  *(unsigned char *)(v18 + 32) = 1;
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[24] = a4;
  v5[25] = v4;
  v5[22] = a2;
  v5[23] = a3;
  v5[21] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:));
}

uint64_t AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:)()
{
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_16_5();
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(v1 + 240) + **(int **)(v1 + 240));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:);
  return v4();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *Swift::String_optional v3 = v2;
  *Swift::String_optional v3 = *v1;
  v2[27] = v4;
  v2[28] = v5;
  v2[29] = v6;
  v2[30] = v7;
  v2[31] = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = (void *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), *(void *)(v1 + 40));
  OUTLINED_FUNCTION_75();
  if (dispatch thunk of DeviceState.isCarPlay.getter())
  {
    [*(id *)(v0 + 176) setVisual:0];
    uint64_t v4 = *(void *)(v0 + 232);
    Swift::String_optional v3 = *(void *)(v0 + 240);
    uint64_t v5 = *(void *)(v0 + 168);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(v0 + 216);
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v3;
    *(unsigned char *)(v5 + 32) = 0;
    OUTLINED_FUNCTION_18_0();
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 224);
    os_log_type_t v15 = *(void *)(v0 + 216);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 232);
    __swift_project_boxed_opaque_existential_1(v2, *(void *)(v1 + 40));
    uint64_t v11 = dispatch thunk of DeviceState.isWatch.getter();
    if (v11) {
      uint64_t v12 = 0xD000000000000019;
    }
    else {
      uint64_t v12 = 0xD000000000000013;
    }
    if (v11) {
      uint64_t v13 = 0x80000000002257C0;
    }
    else {
      uint64_t v13 = 0x8000000000225330;
    }
    outlined init with copy of AppShortcutInvoking((uint64_t)v2, v0 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)(v12, v13, v15, v9, v17, v8, 0, v16, v0 + 16, v10, 0, 0xF000000000000000, v0 + 120);
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v14;
    *uint64_t v14 = v0;
    v14[1] = AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:);
    return ActionConfirmationVisual.data.getter();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  Swift::String_optional v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  v7[33] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[34] = v3;
    v7[35] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 176);
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(*(void *)(v0 + 280), *(void *)(v0 + 272), v1);
  uint64_t v2 = [v1 dialog];
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for PatternExecutionDialog);
  Swift::String_optional v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_3:
    OUTLINED_FUNCTION_136_1(v4, (v3 & 0xC000000000000001) == 0);
    if ((v3 & 0xC000000000000001) != 0) {
      uint64_t v5 = (id)OUTLINED_FUNCTION_137_0();
    }
    else {
      uint64_t v5 = *(id *)(v3 + 32);
    }
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    Class isa = OUTLINED_FUNCTION_124_1().super.super.isa;
    [v6 setSpokenOnly:isa];
    outlined release of ActionConfirmationVisual(v0 + 16);

    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  outlined release of ActionConfirmationVisual(v0 + 16);
LABEL_8:
  uint64_t v10 = *(void *)(v0 + 232);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 168);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)(v0 + 216);
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v9;
  *(unsigned char *)(v11 + 32) = 0;
  OUTLINED_FUNCTION_18_0();
  return v12();
}

uint64_t AutoShortcutsSetEnablementFlow.updateDisablingPattern_preRFv2(_:promptLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 160) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow error updatng disabling pattern; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = *(void *)(v12 + 168);
  *(void *)uint64_t v18 = 1;
  *(void *)(v18 + 8) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  *(unsigned char *)(v18 + 32) = 1;
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  outlined release of ActionConfirmationVisual(v12 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 160) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow error updatng disabling pattern; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = *(void *)(v12 + 168);
  *(void *)uint64_t v18 = 1;
  *(void *)(v18 + 8) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  *(unsigned char *)(v18 + 32) = 1;
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t AutoShortcutsSetEnablementFlow.getShortcutsBundleIdAndDisplayName()()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  OUTLINED_FUNCTION_75();
  dispatch thunk of DeviceState.isWatch.getter();
  type metadata accessor for App();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_75();
  App.__allocating_init(appIdentifier:)();
  uint64_t v1 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(v0 + 16, 2);
  unint64_t v3 = v2;
  swift_release();
  if (!v3)
  {
    uint64_t v1 = 0;
    unint64_t v3 = 0xE000000000000000;
  }
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v9 = OUTLINED_FUNCTION_75();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v6, v7, "#AutoShortcutsSetEnablementFlow: failed to get Shortcuts app's displayName; bundleId='%s'",
        v8,
        0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  return OUTLINED_FUNCTION_75();
}

uint64_t AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  v10[27] = v11;
  v10[28] = v9;
  if (v12)
  {
    uint64_t v13 = (void *)swift_task_alloc();
    v10[29] = v13;
    *uint64_t v13 = v10;
    v13[1] = AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    OUTLINED_FUNCTION_103_0();
    OUTLINED_FUNCTION_28_0();
    return AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)(v14, v15, v16, v17, v18, v19, v20, v21, a9);
  }
  else
  {
    uint64_t v24 = (void *)swift_task_alloc();
    v10[30] = v24;
    *uint64_t v24 = v10;
    v24[1] = AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    OUTLINED_FUNCTION_127_1();
    OUTLINED_FUNCTION_28_0();
    return AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:)();
  }
}

uint64_t AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *unint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_113_1();
  if (!*(void *)(v2 + 120))
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1, &demangling cache variable for type metadata for Output?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_26_1(v8, (uint64_t)static Logger.voiceCommands);
    unint64_t v10 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v10))
    {
      uint64_t v11 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v11);
      OUTLINED_FUNCTION_42_0(&dword_0, v12, v13, "#AutoShortcutsSetEnablementFlow: failed to make dialog output");
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_21_23();
    OUTLINED_FUNCTION_18_24();
    static ExecuteResponse.complete()();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for Output?);
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_42_7();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_104_0();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 248) = v3;
  *uint64_t v3 = v2;
  v3[1] = AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_42_7();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v4, v5, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *unint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 256) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

void AutoShortcutsSetEnablementFlow.publishChangeNotNeeded(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void *)(v0 + 224);
  OUTLINED_FUNCTION_21_23();
  uint64_t v2 = *(void *)(v1 + 288);
  uint64_t v3 = *(void *)(v1 + 296);
  uint64_t v4 = *(void *)(v1 + 304);
  uint64_t v5 = *(void *)(v1 + 312);
  uint64_t v6 = *(void *)(v1 + 320);
  uint64_t v7 = *(void *)(v1 + 328);
  uint64_t v8 = *(void *)(v1 + 336);
  uint64_t v9 = *(void *)(v1 + 344);
  unsigned __int8 v10 = *(unsigned char *)(v1 + 352);
  *(void *)(v1 + 288) = 1;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(void *)(v1 + 344) = 0;
  *(unsigned char *)(v1 + 352) = 0x80;
  outlined consume of AutoShortcutsSetEnablementFlow.State(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  static ExecuteResponse.complete()();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 16, &demangling cache variable for type metadata for Output?);
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_42_7();
  __asm { BRAA            X1, X16 }
}

#error "1920E0: call analysis failed (funcsize=111)"

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v10 + 120) = a9;
  *(void *)(v10 + 128) = v9;
  *(void *)(v10 + 104) = v11;
  *(void *)(v10 + 112) = v12;
  *(void *)(v10 + 88) = v13;
  *(void *)(v10 + 96) = v14;
  *(void *)(v10 + 72) = v15;
  *(void *)(v10 + 80) = v16;
  *(unsigned char *)(v10 + 280) = v17;
  *(void *)(v10 + 64) = v18;
  uint64_t v19 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  *(void *)(v10 + 136) = v19;
  OUTLINED_FUNCTION_1_0(v19);
  *(void *)(v10 + 144) = v20;
  *(void *)(v10 + 152) = OUTLINED_FUNCTION_25();
  uint64_t v21 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_16(v21);
  *(void *)(v10 + 160) = OUTLINED_FUNCTION_25();
  uint64_t v22 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v10 + 168) = v22;
  OUTLINED_FUNCTION_1_0(v22);
  *(void *)(v10 + 176) = v23;
  *(void *)(v10 + 184) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return OUTLINED_FUNCTION_39_14(v24, v25, v26);
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = v10[19];
  uint64_t v12 = v10[17];
  uint64_t v13 = v10[18];
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v11, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v12);
  char v14 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_20_3();
  v15();
  if (v14)
  {
    v10[24] = *(void *)(v10[16] + 96);
    OUTLINED_FUNCTION_16_5();
    uint64_t v16 = (void *)swift_task_alloc();
    v10[25] = (uint64_t)v16;
    *uint64_t v16 = v10;
    v16[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    uint64_t v17 = OUTLINED_FUNCTION_78_4(v10[11]);
    return v18(v17);
  }
  else
  {
    uint64_t v20 = (void *)swift_task_alloc();
    v10[34] = (uint64_t)v20;
    *uint64_t v20 = v10;
    v20[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    OUTLINED_FUNCTION_48_0();
    return AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:)(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
  }
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 208) = v4;
  *(void *)(v2 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 232) = v0;
  swift_task_dealloc();
  if (v0) {

  }
  else {
    *(void *)(v5 + 240) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 208);

  uint64_t v2 = OUTLINED_FUNCTION_12_2();
  v3(v2);
  OUTLINED_FUNCTION_111_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_2_6();
  v0();
  OUTLINED_FUNCTION_111_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

void AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  OUTLINED_FUNCTION_21_0();
  id v1 = [*(id *)(v0 + 208) catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v2;
  *uint64_t v2 = v0;
  v2[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  OUTLINED_FUNCTION_48_0();
  __asm { BRAA            X1, X16 }
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  uint64_t v17 = *(void **)(v16 + 120);
  uint64_t v18 = *(void *)(v16 + 104);
  uint64_t v19 = *(void **)(v16 + 80);
  uint64_t v39 = *(void *)(v16 + 72);
  uint64_t v40 = *(void *)(v16 + 112);
  id v20 = *(id *)(v16 + 240);
  Swift::String_optional v21 = DialogExecutionResult.firstDialogFullPrint()();
  if (v21.value._object) {
    uint64_t countAndFlagsBits = v21.value._countAndFlagsBits;
  }
  else {
    uint64_t countAndFlagsBits = 0;
  }
  object = (void *)0xE000000000000000;
  if (v21.value._object) {
    object = v21.value._object;
  }
  uint64_t v37 = object;
  uint64_t v38 = countAndFlagsBits;
  swift_bridgeObjectRetain();
  Swift::String_optional v24 = DialogExecutionResult.firstDialogFullPrint()();

  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v16 + 248) = ResponseFactory.init()();
  *(void *)(v16 + 40) = type metadata accessor for WorkflowDataModels(0);
  *(void *)(v16 + 48) = lazy protocol witness table accessor for type AutoShortcutsSetEnablementFlow and conformance AutoShortcutsSetEnablementFlow((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, 255, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  boxed_opaque_existential_1 = (Swift::String_optional *)__swift_allocate_boxed_opaque_existential_1((uint64_t *)(v16 + 16));
  boxed_opaque_existential_1->value._uint64_t countAndFlagsBits = v18;
  boxed_opaque_existential_1->value._object = &dword_0 + 3;
  boxed_opaque_existential_1[1].value._uint64_t countAndFlagsBits = v39;
  boxed_opaque_existential_1[1].value._object = v19;
  boxed_opaque_existential_1[2].value._uint64_t countAndFlagsBits = v38;
  boxed_opaque_existential_1[2].value._object = v37;
  boxed_opaque_existential_1[3].value._uint64_t countAndFlagsBits = v40;
  boxed_opaque_existential_1[3].value._object = v17;
  boxed_opaque_existential_1[4] = v24;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v26 = (__n128 *)OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_110_1(v26, (__n128)xmmword_211C70);
  *(void *)(v16 + 256) = a13;
  uint64_t v41 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:);
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v16 + 264) = v27;
  void *v27 = v16;
  v27[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:);
  OUTLINED_FUNCTION_18_2();
  return v32(v28, v29, v30, v31, v32, v33, v34, v35, v37, v38, v39, v41, a13, a14, a15, a16);
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  char v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 56) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  uint64_t v18 = *(void *)(v12 + 216);
  uint64_t v19 = *(void *)(v12 + 64);
  OUTLINED_FUNCTION_2_6();
  v20();
  *(void *)(v19 + 32) = 0;
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  if (!v18) {

  }
  OUTLINED_FUNCTION_111_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  char v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 56) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  uint64_t v18 = *(void *)(v12 + 216);
  uint64_t v19 = *(void *)(v12 + 64);
  OUTLINED_FUNCTION_2_6();
  v20();
  *(void *)(v19 + 32) = 0;
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  if (!v18) {

  }
  OUTLINED_FUNCTION_111_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v11 + 168) = a10;
  *(void *)(v11 + 176) = v10;
  *(void *)(v11 + 152) = v12;
  *(void *)(v11 + 160) = a9;
  *(void *)(v11 + 136) = v13;
  *(void *)(v11 + 144) = v14;
  *(void *)(v11 + 120) = v15;
  *(void *)(v11 + 128) = v16;
  *(unsigned char *)(v11 + 89) = v17;
  *(void *)(v11 + 104) = v18;
  *(void *)(v11 + 112) = v19;
  uint64_t v20 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v11 + 184) = v20;
  OUTLINED_FUNCTION_1_0(v20);
  *(void *)(v11 + 192) = v21;
  *(void *)(v11 + 200) = OUTLINED_FUNCTION_25();
  uint64_t v22 = type metadata accessor for TemplatingText();
  *(void *)(v11 + 208) = v22;
  OUTLINED_FUNCTION_1_0(v22);
  *(void *)(v11 + 216) = v23;
  *(void *)(v11 + 224) = OUTLINED_FUNCTION_25();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_16(v24);
  *(void *)(v11 + 232) = OUTLINED_FUNCTION_13_0();
  *(void *)(v11 + 240) = swift_task_alloc();
  uint64_t v25 = type metadata accessor for TemplatingResult();
  *(void *)(v11 + 248) = v25;
  OUTLINED_FUNCTION_1_0(v25);
  *(void *)(v11 + 256) = v26;
  *(void *)(v11 + 264) = OUTLINED_FUNCTION_13_0();
  *(void *)(v11 + 272) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return OUTLINED_FUNCTION_39_14(v27, v28, v29);
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:)()
{
  OUTLINED_FUNCTION_14_0();
  v0[35] = *(void *)(v0[22] + 96);
  OUTLINED_FUNCTION_16_5();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[36] = v1;
  *id v1 = v2;
  v1[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:);
  OUTLINED_FUNCTION_119_1();
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  v3[37] = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_29_17();
    uint64_t v15 = (uint64_t (*)(uint64_t))(*(void *)(v10 + 216) + **(int **)(v10 + 216));
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v3[38] = v11;
    *uint64_t v11 = v12;
    v11[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:);
    uint64_t v13 = v3[33];
    return v15(v13);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  v3[39] = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_29_17();
    uint64_t v14 = (uint64_t (*)(uint64_t))(*(void *)(v10 + 224) + **(int **)(v10 + 224));
    uint64_t v11 = (void *)swift_task_alloc();
    v3[40] = (uint64_t)v11;
    *uint64_t v11 = v5;
    v11[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:);
    uint64_t v12 = OUTLINED_FUNCTION_82_1(v3[16]);
    return v14(v12);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 328) = v4;
  *(void *)(v2 + 336) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v15 = v2;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v7 = v6;
  uint64_t v8 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v9 = v8;
  v6[46] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    v6[47] = v15;
    v6[48] = v4;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_28_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  Class isa;
  void *v8;
  void (*v9)(void);
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  id v1 = (void *)v0[41];
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(v0[48], v0[47], v1);
  uint64_t v2 = [v1 dialog];
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for PatternExecutionDialog);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    OUTLINED_FUNCTION_61_6();
    _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = OUTLINED_FUNCTION_90_1();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    OUTLINED_FUNCTION_117_1();
    if (v2)
    {
LABEL_3:
      uint64_t v5 = (void *)(v3 & 0xC000000000000001);
      OUTLINED_FUNCTION_136_1(v4, (v3 & 0xC000000000000001) == 0);
      if ((v3 & 0xC000000000000001) != 0) {
        OUTLINED_FUNCTION_137_0();
      }
      else {
        uint64_t v6 = *(id *)(v3 + 32);
      }
      OUTLINED_FUNCTION_90_1();
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      Class isa = OUTLINED_FUNCTION_124_1().super.super.isa;
      [v5 setSpokenOnly:isa];

      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v8 = (void *)v0[41];
  OUTLINED_FUNCTION_59_0();
  v9();
  uint64_t v10 = [v8 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v0[49] = ResponseFactory.init()();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_17_2();
  v0[50] = v11;
  *uint64_t v11 = v0;
  v11[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:);
  uint64_t v12 = OUTLINED_FUNCTION_131_0();
  return v14(v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 408) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  uint64_t v17 = *(void *)(v16 + 176);
  __swift_project_boxed_opaque_existential_1((void *)(v17 + 16), *(void *)(v17 + 40));
  if (dispatch thunk of DeviceState.isCarPlay.getter())
  {
    [*(id *)(v16 + 328) setVisual:0];
    uint64_t v18 = *(void **)(v16 + 328);
    OUTLINED_FUNCTION_59_0();
    v19();
    id v20 = [v18 patternId];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    OutputGenerationManifest.responseViewId.setter();
    type metadata accessor for ResponseFactory();
    OUTLINED_FUNCTION_35_2();
    *(void *)(v16 + 392) = ResponseFactory.init()();
    uint64_t v59 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)
        + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:);
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v16 + 400) = v21;
    void *v21 = v16;
    v21[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:);
    OUTLINED_FUNCTION_131_0();
    OUTLINED_FUNCTION_18_2();
    return v25(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, v59, a14, a15, a16);
  }
  else
  {
    uint64_t v31 = *(void *)(v16 + 240);
    uint64_t v32 = TemplatingResult.sections.getter();
    specialized Collection.first.getter(v32, v31);
    swift_bridgeObjectRelease();
    uint64_t v33 = type metadata accessor for TemplatingSection();
    if (__swift_getEnumTagSinglePayload(v31, 1, v33) == 1)
    {
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v16 + 240), &demangling cache variable for type metadata for TemplatingSection?);
      uint64_t v58 = 0;
      unint64_t v34 = 0xE000000000000000;
    }
    else
    {
      uint64_t v35 = *(void *)(v16 + 216);
      uint64_t v36 = *(void *)(v16 + 224);
      uint64_t v37 = *(void *)(v16 + 208);
      TemplatingSection.content.getter();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_66();
      v38();
      uint64_t v58 = TemplatingText.text.getter();
      unint64_t v34 = v39;
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
    }
    unint64_t v57 = v34;
    *(void *)(v16 + 344) = v34;
    uint64_t v40 = *(void *)(v16 + 232);
    uint64_t v41 = TemplatingResult.sections.getter();
    specialized Collection.first.getter(v41, v40);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v40, 1, v33) == 1)
    {
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v16 + 232), &demangling cache variable for type metadata for TemplatingSection?);
      uint64_t v56 = 0;
      unint64_t v42 = 0xE000000000000000;
    }
    else
    {
      uint64_t v43 = *(void *)(v16 + 216);
      uint64_t v44 = *(void *)(v16 + 224);
      uint64_t v45 = *(void *)(v16 + 208);
      TemplatingSection.content.getter();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_66();
      v46();
      uint64_t v56 = TemplatingText.text.getter();
      unint64_t v42 = v47;
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
    }
    *(void *)(v16 + 352) = v42;
    uint64_t v48 = *(void *)(v16 + 152);
    uint64_t v49 = *(void *)(v16 + 160);
    uint64_t v50 = *(void *)(v16 + 144);
    uint64_t v51 = *(void *)(v16 + 112);
    uint64_t v52 = *(void *)(v16 + 120);
    __swift_project_boxed_opaque_existential_1((void *)(v17 + 16), *(void *)(v17 + 40));
    char v53 = dispatch thunk of DeviceState.isWatch.getter();
    *(void *)(v16 + 16) = v50;
    *(void *)(v16 + 24) = v48;
    *(void *)(v16 + 32) = v49;
    *(void *)(v16 + 40) = v58;
    *(void *)(v16 + 48) = v57;
    *(void *)(v16 + 56) = v51;
    *(void *)(v16 + 64) = v52;
    *(void *)(v16 + 72) = v56;
    *(void *)(v16 + 80) = v42;
    *(unsigned char *)(v16 + 88) = v53 & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v54 = (void *)swift_task_alloc();
    *(void *)(v16 + 360) = v54;
    *uint64_t v54 = v16;
    v54[1] = AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:);
    OUTLINED_FUNCTION_18_2();
    return AutoShortcutAppEnabledVisual.data.getter();
  }
}

void AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:)()
{
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_95_1();
  uint64_t v1 = OUTLINED_FUNCTION_25_12();
  v2(v1);
  uint64_t v3 = *(void (**)(void))(v0 + 8);
  OUTLINED_FUNCTION_77_6();
  v3();
  OUTLINED_FUNCTION_77_6();
  v3();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  __asm { BRAA            X1, X16 }
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppEnabledOutput_preRFv2(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:manifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 96) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_20_29();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  void *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_2_6();
  v13();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v14, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  os_log_type_t v15 = (void *)Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v16))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 96) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v17, v18, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_20_29();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  void *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = *(void (**)(void))(*(void *)(v12 + 256) + 8);
  OUTLINED_FUNCTION_85_5();
  v13();
  OUTLINED_FUNCTION_85_5();
  v13();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v14, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  os_log_type_t v15 = (void *)Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v16))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 96) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v17, v18, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_20_29();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = *(void *)(v12 + 272);
  uint64_t v14 = *(void *)(v12 + 248);
  os_log_type_t v15 = *(void *)(v12 + 256);

  uint64_t v16 = *(void (**)(uint64_t))(v15 + 8);
  uint64_t v17 = OUTLINED_FUNCTION_75();
  v16(v17);
  ((void (*)(uint64_t, uint64_t))v16)(v13, v14);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v18, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v19 = (void *)Logger.logObject.getter();
  uint64_t v20 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v20))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 96) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v21, v22, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_20_29();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void (*v16)(void);
  uint64_t v17;
  void *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_95_1();
  uint64_t v14 = OUTLINED_FUNCTION_25_12();
  v15(v14);
  uint64_t v16 = *(void (**)(void))(v13 + 8);
  OUTLINED_FUNCTION_77_6();
  v16();
  OUTLINED_FUNCTION_77_6();
  v16();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_23_26(v17, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v18 = (void *)Logger.logObject.getter();
  uint64_t v19 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v19))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 96) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v20, v21, "#AutoShortcutsSetEnablementFlow making appEnabledOutput; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  OUTLINED_FUNCTION_20_29();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 288) = v2;
  *(void *)(v1 + 88) = v3;
  *(void *)(v1 + 96) = v0;
  *(void *)(v1 + 72) = v4;
  *(void *)(v1 + 80) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 104) = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  *(void *)(v1 + 112) = v7;
  OUTLINED_FUNCTION_1_0(v7);
  *(void *)(v1 + 120) = v8;
  *(void *)(v1 + 128) = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 136) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DialogPhase();
  *(void *)(v1 + 144) = v9;
  OUTLINED_FUNCTION_1_0(v9);
  *(void *)(v1 + 152) = v10;
  *(void *)(v1 + 160) = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 168) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v1 + 176) = v11;
  OUTLINED_FUNCTION_1_0(v11);
  *(void *)(v1 + 184) = v12;
  *(void *)(v1 + 192) = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  *(void *)(v1 + 200) = v13;
  OUTLINED_FUNCTION_1_0(v13);
  *(void *)(v1 + 208) = v14;
  *(void *)(v1 + 216) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 232) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 240) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *char v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_13_1();

  OUTLINED_FUNCTION_85_5();
  v1();
  OUTLINED_FUNCTION_41_16();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 280) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

void AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = OUTLINED_FUNCTION_65_7();
  v2(v1);
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v4 = OUTLINED_FUNCTION_12_2();
  v5(v4);
  OUTLINED_FUNCTION_55_8();
  if (v3)
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v0[28] = (uint64_t)v6;
    *uint64_t v6 = v0;
    v6[1] = AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:);
    OUTLINED_FUNCTION_78_4(v0[10]);
    OUTLINED_FUNCTION_48_0();
    __asm { BRAA            X4, X16 }
  }
  uint64_t v9 = (void *)swift_task_alloc();
  v0[34] = (uint64_t)v9;
  *uint64_t v9 = v0;
  v9[1] = AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:);
  OUTLINED_FUNCTION_119_1();
  OUTLINED_FUNCTION_48_0();
  __asm { BRAA            X5, X16 }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void (*v6)(void);
  uint64_t v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 168);
  char v2 = *(void *)(v0 + 144);
  char v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(id *)(v0 + 240);
  static DialogPhase.confirmation.getter();
  uint64_t v5 = [v4 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_59_0();
  v6();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  *(void *)(v0 + 248) = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v7 + 16) = xmmword_211C70;
  *(void *)(v7 + 32) = v4;
  uint64_t v11 = v7;
  specialized Array._endMutation()();
  *(void *)(v0 + 256) = v11;
  uint64_t v8 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 264) = v8;
  *uint64_t v8 = v0;
  v8[1] = AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:);
  OUTLINED_FUNCTION_3();
  __asm { BR              X3 }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void *)(v0 + 136);
  char v2 = *(void *)(v0 + 112);
  char v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(uint64_t **)(v0 + 72);
  OUTLINED_FUNCTION_80_5();
  v6();
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v7);
  uint64_t v8 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v5[3] = v8;
  v5[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  OUTLINED_FUNCTION_41_16();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  __asm { BRAA            X1, X16 }
}

uint64_t AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 64) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow making appDisabledOutput; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = *(void *)(v12 + 72);
  *(void *)(v18 + 32) = 0;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  OUTLINED_FUNCTION_41_16();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_28_7(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_38_14();
    OUTLINED_FUNCTION_19_18(5.7779e-34);
    *(void *)(v12 + 56) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_62_6();
    swift_errorRelease();
    OUTLINED_FUNCTION_21_19(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow making appDisabledOutput; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = *(void *)(v12 + 72);
  *(void *)(v18 + 32) = 0;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  OUTLINED_FUNCTION_41_16();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_30_4();
  v10[18] = v9;
  if (v11)
  {
    uint64_t v12 = (void *)swift_task_alloc();
    v10[19] = v12;
    *uint64_t v12 = v10;
    v12[1] = AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    OUTLINED_FUNCTION_103_0();
    return AutoShortcutsSetEnablementFlow.makeAppEnabledOutput(wasAppAlreadyEnabled:appId:appName:shortcutPhrases:moreShortcutsLabel:)(v13, v14, v15, v16, v17, v18, v19, v20, a9);
  }
  else
  {
    uint64_t v22 = (void *)swift_task_alloc();
    v10[20] = v22;
    *uint64_t v22 = v10;
    v22[1] = AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    OUTLINED_FUNCTION_127_1();
    OUTLINED_FUNCTION_70_6();
    return AutoShortcutsSetEnablementFlow.makeAppDisabledOutput(appName:wasAppAlreadyEnabled:)();
  }
}

uint64_t AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *char v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_113_1();
  if (v2[15])
  {
    OUTLINED_FUNCTION_104_0();
    uint64_t v3 = (void *)swift_task_alloc();
    v2[21] = v3;
    *uint64_t v3 = v2;
    v3[1] = AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:);
    uint64_t v4 = OUTLINED_FUNCTION_90();
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v4, v5, v6);
  }
  else
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1, &demangling cache variable for type metadata for Output?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = (void *)OUTLINED_FUNCTION_26_1(v7, (uint64_t)static Logger.voiceCommands);
    uint64_t v9 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v9))
    {
      uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v10);
      OUTLINED_FUNCTION_42_0(&dword_0, v11, v12, "#AutoShortcutsSetEnablementFlow: failed making app dialog output");
      OUTLINED_FUNCTION_7_0();
    }

    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for Output?);
    uint64_t v13 = (uint64_t (*)(uint64_t))v2[1];
    return v13(1);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *char v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 16, &demangling cache variable for type metadata for Output?);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v1(7);
}

uint64_t AutoShortcutsSetEnablementFlow.publishEnablementUpdated(wasEnabling:appId:appName:shortcutPhrases:moreShortcutsLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_88();
    OUTLINED_FUNCTION_53_6(5.7779e-34);
    *(void *)(v12 + 136) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_138_1();
    swift_errorRelease();
    OUTLINED_FUNCTION_10_33(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow error publishing enablementUpdated; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v12 + 56);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v12 + 16, &demangling cache variable for type metadata for Output?);
  OUTLINED_FUNCTION_28_0();
  return v20(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 496) = v2;
  *(void *)(v1 + 296) = v3;
  *(void *)(v1 + 304) = v0;
  *(void *)(v1 + 280) = v4;
  *(void *)(v1 + 288) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 312) = OUTLINED_FUNCTION_25();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  OUTLINED_FUNCTION_16(v7);
  *(void *)(v1 + 320) = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for TemplatingResult();
  *(void *)(v1 + 328) = v8;
  OUTLINED_FUNCTION_1_0(v8);
  *(void *)(v1 + 336) = v9;
  *(void *)(v1 + 344) = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for DialogPhase();
  *(void *)(v1 + 352) = v10;
  OUTLINED_FUNCTION_1_0(v10);
  *(void *)(v1 + 360) = v11;
  *(void *)(v1 + 368) = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 376) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v1 + 384) = v12;
  OUTLINED_FUNCTION_1_0(v12);
  *(void *)(v1 + 392) = v13;
  *(void *)(v1 + 400) = OUTLINED_FUNCTION_25();
  uint64_t v14 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  *(void *)(v1 + 408) = v14;
  OUTLINED_FUNCTION_1_0(v14);
  *(void *)(v1 + 416) = v15;
  *(void *)(v1 + 424) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v16, v17, v18);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v2 = v1;
  *char v2 = *v0;
  *(void *)(v1 + 440) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *char v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void (*v1)(void);
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();

  OUTLINED_FUNCTION_20_3();
  v1();
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 56), v0 + 16);
  OUTLINED_FUNCTION_60_6(*(void *)(v0 + 304));
  char v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v2;
  *char v2 = v0;
  v2[1] = AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:);
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_23_1();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *char v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_30_4();
  uint64_t v1 = *(void *)(v0 + 320);
  if (__swift_getEnumTagSinglePayload(v1, 1, *(void *)(v0 + 328)) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1, &demangling cache variable for type metadata for TemplatingResult?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    char v2 = type metadata accessor for Logger();
    uint64_t v3 = (void *)OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
    uint64_t v4 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v4))
    {
      uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v5);
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_21_23();
    OUTLINED_FUNCTION_5_34();
    static ExecuteResponse.complete()();
    OUTLINED_FUNCTION_38_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v8();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 312);
    OUTLINED_FUNCTION_80_5();
    v11();
    uint64_t v12 = type metadata accessor for NLContextUpdate();
    __swift_storeEnumTagSinglePayload(v10, 1, 1, v12);
    uint64_t v13 = type metadata accessor for AceOutput();
    *(_OWORD *)(v0 + 152) = 0u;
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(void *)(v0 + 120) = v13;
    *(void *)(v0 + 128) = &protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 96));
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 136, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v10, &demangling cache variable for type metadata for NLContextUpdate?);
    OUTLINED_FUNCTION_46_12();
    v16(v14, v15);
    outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 96), v0 + 16);
    OUTLINED_FUNCTION_60_6(*(void *)(v0 + 304));
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v17;
    *uint64_t v17 = v0;
    v17[1] = AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:);
    uint64_t v18 = OUTLINED_FUNCTION_71();
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v18, v19, v20);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 488) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

void AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = OUTLINED_FUNCTION_65_7();
  v2(v1);
  char v3 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v4 = OUTLINED_FUNCTION_12_2();
  v5(v4);
  OUTLINED_FUNCTION_55_8();
  if (v3)
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v0[54] = (uint64_t)v6;
    *uint64_t v6 = v0;
    v6[1] = AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:);
    OUTLINED_FUNCTION_78_4(v0[36]);
    OUTLINED_FUNCTION_48_0();
    __asm { BRAA            X4, X16 }
  }
  uint64_t v9 = (void *)swift_task_alloc();
  v0[59] = (uint64_t)v9;
  *uint64_t v9 = v0;
  v9[1] = AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:);
  OUTLINED_FUNCTION_119_1();
  OUTLINED_FUNCTION_48_0();
  __asm { BRAA            X5, X16 }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v12;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void *)(v0 + 304);
  OUTLINED_FUNCTION_21_23();
  char v2 = *(void *)(v1 + 288);
  char v3 = *(void *)(v1 + 296);
  uint64_t v4 = *(void *)(v1 + 304);
  uint64_t v5 = *(void *)(v1 + 312);
  uint64_t v6 = *(void *)(v1 + 320);
  uint64_t v7 = *(void *)(v1 + 328);
  uint64_t v8 = *(void *)(v1 + 336);
  uint64_t v9 = *(void *)(v1 + 344);
  uint64_t v10 = *(unsigned char *)(v1 + 352);
  *(void *)(v1 + 288) = 1;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(void *)(v1 + 344) = 0;
  *(unsigned char *)(v1 + 352) = 0x80;
  outlined consume of AutoShortcutsSetEnablementFlow.State(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  static ExecuteResponse.complete()();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_38_16();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_42_7();
  __asm { BRAA            X1, X16 }
}

uint64_t AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  uint64_t v17 = (void *)v16[55];
  if (v17)
  {
    static DialogPhase.completion.getter();
    id v18 = [v17 catId];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_59_0();
    v19();
    OutputGenerationManifest.init(dialogPhase:_:)();
    OutputGenerationManifest.responseViewId.setter();
    OUTLINED_FUNCTION_51_5();
    v20();
    type metadata accessor for ResponseFactory();
    OUTLINED_FUNCTION_35_2();
    v16[56] = ResponseFactory.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v21 = (__n128 *)OUTLINED_FUNCTION_16_2();
    OUTLINED_FUNCTION_110_1(v21, (__n128)xmmword_211C70);
    v16[57] = a13;
    uint64_t v48 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
        + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
    id v22 = v17;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v16[58] = v23;
    *uint64_t v23 = v24;
    v23[1] = AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:);
    OUTLINED_FUNCTION_18_2();
    return v28(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, v48, v16 + 7, a13, a14, a15, a16);
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_26_1(v34, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v36))
    {
      uint64_t v37 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v37);
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_21_23();
    OUTLINED_FUNCTION_5_34();
    static ExecuteResponse.complete()();
    OUTLINED_FUNCTION_38_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_18_2();
    return v41(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t AutoShortcutsSetEnablementFlow.publishChangeDeclinedAck(appName:isStillEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_42_16(v13, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v14 = (void *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v15))
  {
    OUTLINED_FUNCTION_15_29();
    OUTLINED_FUNCTION_88();
    OUTLINED_FUNCTION_53_6(5.7779e-34);
    *(void *)(v12 + 272) = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_14_21();
    OUTLINED_FUNCTION_138_1();
    swift_errorRelease();
    OUTLINED_FUNCTION_10_33(&dword_0, v16, v17, "#AutoShortcutsSetEnablementFlow error publishing changeDeclinedAck; %@");
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_39_13();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  OUTLINED_FUNCTION_21_23();
  OUTLINED_FUNCTION_31_18();
  static ExecuteResponse.complete()();
  swift_errorRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v12 + 16);
  OUTLINED_FUNCTION_38_16();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t AutoShortcutsSetEnablementFlow.execute(completion:)()
{
  type metadata accessor for AutoShortcutsSetEnablementFlow();
  lazy protocol witness table accessor for type AutoShortcutsSetEnablementFlow and conformance AutoShortcutsSetEnablementFlow(&lazy protocol witness table cache variable for type AutoShortcutsSetEnablementFlow and conformance AutoShortcutsSetEnablementFlow, v0, (void (*)(uint64_t))type metadata accessor for AutoShortcutsSetEnablementFlow);
  return Flow.deferToExecuteAsync(_:)();
}

Swift::Bool __swiftcall DeviceState.canOutputAppShortcutPhrases()()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_12_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_25_6();
  uint64_t v18 = v7;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  char v11 = dispatch thunk of DeviceState.isPhone.getter();
  uint64_t v12 = *(void (**)(void))(v5 + 16);
  OUTLINED_FUNCTION_44_12();
  v12();
  if (v11) {
    char v13 = 1;
  }
  else {
    char v13 = dispatch thunk of DeviceState.isPad.getter();
  }
  uint64_t v14 = *(void (**)(void))(v5 + 8);
  OUTLINED_FUNCTION_46_12();
  v14();
  OUTLINED_FUNCTION_44_12();
  v12();
  if (v13)
  {
    OUTLINED_FUNCTION_46_12();
    v14();
    OUTLINED_FUNCTION_44_12();
    v12();
  }
  else
  {
    char v15 = dispatch thunk of DeviceState.isWatch.getter();
    OUTLINED_FUNCTION_46_12();
    v14();
    OUTLINED_FUNCTION_44_12();
    v12();
    if ((v15 & 1) == 0)
    {
      char v17 = dispatch thunk of DeviceState.isMac.getter();
      OUTLINED_FUNCTION_46_12();
      v14();
      OUTLINED_FUNCTION_44_12();
      v12();
      if ((v17 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  OUTLINED_FUNCTION_46_12();
  v14();
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v18, v1, v3);
LABEL_8:
  dispatch thunk of DeviceState.isCarPlay.getter();
LABEL_9:
  OUTLINED_FUNCTION_46_12();
  v14();
  OUTLINED_FUNCTION_27_1();
  return result;
}

uint64_t AutoShortcutsSetEnablementFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 192);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 240);
  swift_release();
  outlined consume of AutoShortcutsSetEnablementFlow.State(*(void *)(v0 + 288), *(void *)(v0 + 296), *(void *)(v0 + 304), *(void *)(v0 + 312), *(void *)(v0 + 320), *(void *)(v0 + 328), *(void *)(v0 + 336), *(void *)(v0 + 344), *(unsigned char *)(v0 + 352));
  return v0;
}

uint64_t AutoShortcutsSetEnablementFlow.__deallocating_deinit()
{
  AutoShortcutsSetEnablementFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance AutoShortcutsSetEnablementFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance AutoShortcutsSetEnablementFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 320))();
}

uint64_t protocol witness for Flow.execute() in conformance AutoShortcutsSetEnablementFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 208) + **(int **)(**(void **)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance AutoShortcutsSetEnablementFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AutoShortcutsSetEnablementFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t specialized AutoShortcutsSetEnablementFlow.init(deviceState:outputPublisher:linkActionPatterns:autoShortcutCATs:autoShortcutCATsSimple:voiceShortcutsClient:provider:appNameResolver:preferences:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v46 = a7;
  uint64_t v45 = a6;
  uint64_t v44 = a4;
  uint64_t v42 = a3;
  uint64_t v48 = a2;
  uint64_t v47 = a9;
  uint64_t v18 = type metadata accessor for CATOption();
  __chkstk_darwin(v18 - 8);
  uint64_t v57 = a13;
  uint64_t v58 = a15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v56);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(boxed_opaque_existential_1, a8, a13);
  uint64_t v54 = a12;
  uint64_t v55 = a14;
  uint64_t v20 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v53);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(v20, a10, a12);
  type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a11 + 280) = swift_allocObject();
  outlined init with copy of AppShortcutInvoking(a1, a11 + 16);
  outlined init with copy of AppShortcutInvoking(v48, a11 + 56);
  outlined init with copy of AppShortcutInvoking(a1, (uint64_t)v52);
  uint64_t v21 = v42;
  outlined init with copy of AppShortcutInvoking(v42, (uint64_t)v49);
  type metadata accessor for AutoShortcutDialogTemplating();
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v24 = v50;
  uint64_t v23 = v51;
  uint64_t v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v28 + 16))(v27);
  uint64_t v29 = specialized AutoShortcutDialogTemplating.init(deviceState:autoShortcutCATs:autoShortcutCATsSimple:linkActionPatterns:)(v52, v44, a5, (uint64_t)v27, v22, v24, v23);
  swift_retain();
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
  *(void *)(a11 + 96) = v29;
  outlined init with copy of AppShortcutInvoking(a1, (uint64_t)v52);
  outlined init with copy of AppShortcutInvoking(v21, (uint64_t)v49);
  type metadata accessor for RunLinkActionCATs();
  static CATOption.defaultMode.getter();
  uint64_t v43 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v30 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v31 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v32 = CATWrapperSimple.__allocating_init(options:globals:)();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v21);
  __swift_destroy_boxed_opaque_existential_1Tm(v48);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t v33 = (void *)swift_allocObject();
  uint64_t v34 = v50;
  uint64_t v35 = v51;
  uint64_t v36 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v42 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v39 + 16))(v38);
  uint64_t v40 = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)(v52, v43, v30, v31, v32, (uint64_t)v38, v33, v34, v35);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
  *(void *)(a11 + 104) = v40;
  outlined init with take of AceServiceInvokerAsync(v45, a11 + 112);
  outlined init with take of AceServiceInvokerAsync(v46, a11 + 152);
  outlined init with take of AceServiceInvokerAsync(&v56, a11 + 192);
  *(void *)(a11 + 232) = v47;
  outlined init with take of AceServiceInvokerAsync(&v53, a11 + 240);
  *(_OWORD *)(a11 + 288) = 0u;
  *(_OWORD *)(a11 + 304) = 0u;
  *(_OWORD *)(a11 + 320) = 0u;
  *(_OWORD *)(a11 + 336) = 0u;
  *(unsigned char *)(a11 + 352) = 0x80;
  return a11;
}

uint64_t outlined copy of AutoShortcutsSetEnablementFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v9 = a9 >> 5;
  if ((v9 - 1) >= 2)
  {
    if (v9) {
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

void *outlined init with take of AutoShortcutsSetEnablementFlow.State(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x41uLL);
}

uint64_t outlined release of AutoShortcutsSetEnablementFlow.State(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of AutoShortcutsSetEnablementFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t result = a3;
  int v10 = a9 >> 5;
  if ((v10 - 1) >= 2)
  {
    if (v10) {
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of VoiceCommandTask(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VoiceCommandTask(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AutoShortcutsSetEnablementFlow()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSetEnablementFlow.EnablementFlowError and conformance AutoShortcutsSetEnablementFlow.EnablementFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSetEnablementFlow.EnablementFlowError and conformance AutoShortcutsSetEnablementFlow.EnablementFlowError;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSetEnablementFlow.EnablementFlowError and conformance AutoShortcutsSetEnablementFlow.EnablementFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSetEnablementFlow.EnablementFlowError and conformance AutoShortcutsSetEnablementFlow.EnablementFlowError);
  }
  return result;
}

uint64_t destroy for AutoShortcutsSetEnablementFlow.State(uint64_t a1)
{
  return outlined consume of AutoShortcutsSetEnablementFlow.State(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
}

uint64_t initializeWithCopy for AutoShortcutsSetEnablementFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  outlined copy of AutoShortcutsSetEnablementFlow.State(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for AutoShortcutsSetEnablementFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  outlined copy of AutoShortcutsSetEnablementFlow.State(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  unsigned __int8 v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  outlined consume of AutoShortcutsSetEnablementFlow.State(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for AutoShortcutsSetEnablementFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unsigned __int8 v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  outlined consume of AutoShortcutsSetEnablementFlow.State(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutsSetEnablementFlow.State(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 65))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *(void *)a1 >> 3;
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for AutoShortcutsSetEnablementFlow.State(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 64) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 8 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 49) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for AutoShortcutsSetEnablementFlow.State(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 64);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 5;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 & 7 | (8 * *(_DWORD *)(a1 + 8))) + 4;
  }
}

uint64_t destructiveProjectEnumData for AutoShortcutsSetEnablementFlow.State(uint64_t result)
{
  *(unsigned char *)(result + 64) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for AutoShortcutsSetEnablementFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    char v2 = *(unsigned char *)(result + 64) & 1 | (32 * a2);
    *(void *)result &= 7uLL;
    *(unsigned char *)(result + 64) = v2;
  }
  else
  {
    *(void *)double result = ((_BYTE)a2 - 4) & 7;
    *(void *)(result + 8) = (unint64_t)(a2 - 4) >> 3;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(unsigned char *)(result + 64) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutsSetEnablementFlow.State()
{
  return &type metadata for AutoShortcutsSetEnablementFlow.State;
}

uint64_t getEnumTagSinglePayload for AutoShortcutsSetEnablementFlow.EnablementFlowError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutsSetEnablementFlow.EnablementFlowError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *double result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x197CA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutsSetEnablementFlow.EnablementFlowError()
{
  return &type metadata for AutoShortcutsSetEnablementFlow.EnablementFlowError;
}

uint64_t outlined init with copy of Output?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type AutoShortcutsSetEnablementFlow and conformance AutoShortcutsSetEnablementFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_5_34()
{
  uint64_t v4 = *(void *)(v1 + 288);
  uint64_t v5 = v0[1];
  uint64_t v6 = *(void *)(v1 + 304);
  uint64_t v7 = v0[3];
  uint64_t v8 = *(void *)(v1 + 320);
  uint64_t v9 = v0[5];
  uint64_t v10 = *(void *)(v1 + 336);
  uint64_t v11 = *(void *)(v1 + 344);
  unsigned __int8 v12 = *(unsigned char *)(v1 + 352);
  *(void *)(v1 + 288) = v2;
  *(_OWORD *)(v0 + 1) = 0u;
  *(_OWORD *)(v0 + 3) = 0u;
  *(_OWORD *)(v0 + 5) = 0u;
  *(void *)(v1 + 344) = 0;
  *(unsigned char *)(v1 + 352) = 96;
  return outlined consume of AutoShortcutsSetEnablementFlow.State(v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t OUTLINED_FUNCTION_14_21()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_15_29()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_18_24()
{
  uint64_t v4 = *(void *)(v1 + 288);
  uint64_t v5 = v0[1];
  uint64_t v6 = *(void *)(v1 + 304);
  uint64_t v7 = v0[3];
  uint64_t v8 = *(void *)(v1 + 320);
  uint64_t v9 = v0[5];
  uint64_t v10 = *(void *)(v1 + 336);
  uint64_t v11 = *(void *)(v1 + 344);
  unsigned __int8 v12 = *(unsigned char *)(v1 + 352);
  *(void *)(v1 + 288) = v2;
  *(_OWORD *)(v0 + 1) = 0u;
  *(_OWORD *)(v0 + 3) = 0u;
  *(_OWORD *)(v0 + 5) = 0u;
  *(void *)(v1 + 344) = 0;
  *(unsigned char *)(v1 + 352) = 96;
  return outlined consume of AutoShortcutsSetEnablementFlow.State(v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t OUTLINED_FUNCTION_20_29()
{
  uint64_t v2 = *(void *)(v0 + 104);
  *(void *)(v2 + 32) = 0;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_21_23()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_23_26(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_errorRetain();
}

uint64_t OUTLINED_FUNCTION_29_20()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_30_17@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned __int8 a9@<W8>)
{
  *(void *)(v9 + 344) = 0;
  *(unsigned char *)(v9 + 352) = 96;
  return outlined consume of AutoShortcutsSetEnablementFlow.State(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t OUTLINED_FUNCTION_31_18()
{
  uint64_t v4 = *(void *)(v1 + 288);
  uint64_t v5 = v0[1];
  uint64_t v6 = *(void *)(v1 + 304);
  uint64_t v7 = v0[3];
  uint64_t v8 = *(void *)(v1 + 320);
  uint64_t v9 = v0[5];
  uint64_t v10 = *(void *)(v1 + 336);
  uint64_t v11 = *(void *)(v1 + 344);
  unsigned __int8 v12 = *(unsigned char *)(v1 + 352);
  *(void *)(v1 + 288) = v2;
  *(_OWORD *)(v0 + 1) = 0u;
  *(_OWORD *)(v0 + 3) = 0u;
  *(_OWORD *)(v0 + 5) = 0u;
  *(void *)(v1 + 344) = 0;
  *(unsigned char *)(v1 + 352) = 96;
  return outlined consume of AutoShortcutsSetEnablementFlow.State(v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t OUTLINED_FUNCTION_32_21()
{
  uint64_t v4 = *(void *)(v2 + 288);
  uint64_t v5 = v0[1];
  uint64_t v6 = *(void *)(v2 + 304);
  uint64_t v7 = v0[3];
  uint64_t v8 = *(void *)(v2 + 320);
  uint64_t v9 = v0[5];
  uint64_t v10 = *(void *)(v2 + 336);
  uint64_t v11 = *(void *)(v2 + 344);
  unsigned __int8 v12 = *(unsigned char *)(v2 + 352);
  *(void *)(v2 + 288) = v1;
  *(_OWORD *)(v0 + 1) = 0u;
  *(_OWORD *)(v0 + 3) = 0u;
  *(_OWORD *)(v0 + 5) = 0u;
  *(void *)(v2 + 344) = 0;
  *(unsigned char *)(v2 + 352) = 96;
  return outlined consume of AutoShortcutsSetEnablementFlow.State(v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t OUTLINED_FUNCTION_38_16()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_39_14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_task_switch(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_41_16()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_47_12()
{
  return v0;
}

void OUTLINED_FUNCTION_52_10()
{
}

uint64_t OUTLINED_FUNCTION_53_6(float a1)
{
  *uint64_t v1 = a1;
  return swift_errorRetain();
}

void *OUTLINED_FUNCTION_60_6@<X0>(uint64_t a1@<X8>)
{
  return __swift_project_boxed_opaque_existential_1((void *)(a1 + 56), *(void *)(a1 + 80));
}

uint64_t OUTLINED_FUNCTION_62_7()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_65_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_66_6()
{
  return static DialogPhase.confirmation.getter();
}

uint64_t OUTLINED_FUNCTION_67_8()
{
  return *(void *)(v0 + 288);
}

void *OUTLINED_FUNCTION_69_7(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char __dst, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  a29 = v30 & 0x1F;
  return outlined init with take of AutoShortcutsSetEnablementFlow.State(v29, &__dst);
}

void OUTLINED_FUNCTION_76_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_78_4@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void OUTLINED_FUNCTION_83_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 8u);
}

int8x8_t OUTLINED_FUNCTION_86_4(int8x16_t a1, int8x16_t a2)
{
  int8x16_t v2 = vorrq_s8(a2, a1);
  return vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
}

uint64_t OUTLINED_FUNCTION_89_3(float *a1, float a2)
{
  *a1 = a2;
  *(_DWORD *)(v2 + 92) = v3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_90_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_92_2()
{
}

void OUTLINED_FUNCTION_95_1()
{
  uint64_t v2 = *(void **)(v0 + 328);
}

uint64_t OUTLINED_FUNCTION_96_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_100_1(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return OutputGenerationManifest.nlContextUpdate.setter();
}

BOOL OUTLINED_FUNCTION_101_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void *OUTLINED_FUNCTION_104_0()
{
  outlined init with take of AceServiceInvokerAsync(v1, v0);
  return __swift_project_boxed_opaque_existential_1((void *)(v2 + 56), *(void *)(v2 + 80));
}

uint64_t OUTLINED_FUNCTION_108_0()
{
  uint64_t result = *(void *)(v0 + 88);
  *(void *)(v1 + 16) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_110_1(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_111_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_113_1()
{
  return outlined init with copy of Output?(v0 + 16, v0 + 96);
}

double OUTLINED_FUNCTION_114_0()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_116_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return a13;
}

uint64_t OUTLINED_FUNCTION_120_0()
{
  uint64_t result = *(void *)(v1 + 88);
  *(void *)(v2 + 16) = v0;
  return result;
}

NSNumber OUTLINED_FUNCTION_124_1()
{
  return NSNumber.init(BOOLeanLiteral:)(1);
}

uint64_t OUTLINED_FUNCTION_125_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a11;
}

uint64_t OUTLINED_FUNCTION_127_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_128_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return a17;
}

uint64_t OUTLINED_FUNCTION_131_0()
{
  return *(void *)(v0 + 104);
}

uint64_t OUTLINED_FUNCTION_136_1(uint64_t a1, uint64_t a2)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, a2);
}

uint64_t OUTLINED_FUNCTION_137_0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t OUTLINED_FUNCTION_138_1()
{
  void *v0 = v1;
  return swift_errorRelease();
}

uint64_t InputToDisambiguationItemsConverter.__allocating_init(disambiguationItems:page:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(a1, a2);
  return v4;
}

void *InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(uint64_t a1, uint64_t a2)
{
  v2[4] = &outlined read-only object #0 of InputToDisambiguationItemsConverter.init(disambiguationItems:page:);
  v2[2] = a1;
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  v2[3] = v3;
  return v2;
}

uint64_t InputToDisambiguationItemsConverter.inputToChosenItems(input:)()
{
  OUTLINED_FUNCTION_3_36();
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v37 = v4;
  uint64_t v38 = v3;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_20_0();
  uint64_t v36 = v6 - v5;
  uint64_t v7 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_2();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_56();
  uint64_t v11 = type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_2();
  uint64_t v39 = v12;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_20_0();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_20_18();
  Input.parse.getter();
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v2, v17);
  if (v21 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v22 = OUTLINED_FUNCTION_2_41();
    v23(v22);
LABEL_5:
    OUTLINED_FUNCTION_20_30();
    OUTLINED_FUNCTION_73();
    v26();
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 152))(v1);
    goto LABEL_6;
  }
  if (v21 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v24 = OUTLINED_FUNCTION_2_41();
    v25(v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    goto LABEL_5;
  }
  if (v21 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v30 = OUTLINED_FUNCTION_2_41();
    v31(v30);
    OUTLINED_FUNCTION_73();
    v32();
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 144))(v16);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v16, v11);
    return v28;
  }
  if (v21 != enum case for Parse.uso(_:))
  {
    uint64_t v28 = static Array._allocateUninitialized(_:)();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v2, v17);
    return v28;
  }
  uint64_t v33 = OUTLINED_FUNCTION_2_41();
  v34(v33);
  uint64_t v1 = v36;
  uint64_t v9 = v37;
  OUTLINED_FUNCTION_20_30();
  uint64_t v7 = v38;
  OUTLINED_FUNCTION_73();
  v35();
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 136))(v36);
LABEL_6:
  uint64_t v28 = v27;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v7);
  return v28;
}

uint64_t InputToDisambiguationItemsConverter.usoToChosenItems(usoParse:)()
{
  OUTLINED_FUNCTION_3_36();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v2 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_20_18();
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_2();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_56();
  USOParse.userParse.getter();
  uint64_t v14 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
  specialized Collection.first.getter(v14, v5);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v5, 1, v10) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v5);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
    uint64_t v16 = (void *)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_16_11(v17))
    {
      uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v18);
      OUTLINED_FUNCTION_11_22(&dword_0, v19, v20, "could not get userDialogAct from parse");
      OUTLINED_FUNCTION_7_0();
    }

    return static Array._allocateUninitialized(_:)();
  }
  else
  {
    OUTLINED_FUNCTION_73();
    v22();
    int64_t v23 = Array.count.getter();
    Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:)(v23);
    uint64_t v21 = InputToDisambiguationItemsConverter.getItemsFromReferences(references:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = v21;
    type metadata accessor for Array();
    swift_getWitnessTable();
    if (Collection.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
      uint64_t v24 = InputToDisambiguationItemsConverter.getStringFromUSOParse(uda:)();
      if (v25)
      {
        uint64_t v26 = v24;
        unint64_t v27 = v25;
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
        swift_bridgeObjectRetain_n();
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = (uint8_t *)OUTLINED_FUNCTION_25_2();
          uint64_t v34 = OUTLINED_FUNCTION_22_3();
          *(_DWORD *)uint64_t v31 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v34);
          OUTLINED_FUNCTION_49_3(v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_0, v29, v30, "usoToChosenItems retrieving disambiguation item with title: %s", v31, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v21 = InputToDisambiguationItemsConverter.getItemsFromTitle(title:requiresExactMatch:)(v26, v27, 0);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v21 = static Array._allocateUninitialized(_:)();
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0, v10);
  }
  return v21;
}

uint64_t InputToDisambiguationItemsConverter.directInvocationToChosenItems(directInvocation:)()
{
  OUTLINED_FUNCTION_17_15();
  uint64_t v0 = Parse.DirectInvocation.userData.getter();
  if (v0
    && (v1 = static SLFDisambiguationItemConverter.toTitle(userData:)(v0), uint64_t v3 = v2, swift_bridgeObjectRelease(), v3))
  {
    uint64_t v4 = InputToDisambiguationItemsConverter.getItemsFromTitle(title:requiresExactMatch:)(v1, v3, 1);
    swift_bridgeObjectRelease();
    return v4;
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    uint64_t v7 = (void *)Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v8))
    {
      uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v9);
      OUTLINED_FUNCTION_2_15(&dword_0, v10, v11, "#InputToDisambiguationItems received unknown directInvocation");
      OUTLINED_FUNCTION_7_0();
    }

    return static Array._allocateUninitialized(_:)();
  }
}

uint64_t InputToDisambiguationItemsConverter.nlv3IntentToChosenItems(nlIntent:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VoiceCommandsNLIntent(0);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_20_0();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a1, v6);
  if (one-time initialization token for voiceCommandReferenceNode != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent();
  IntentNodeTraversable.value<A>(forNode:)();
  uint64_t v7 = Array.count.getter();
  static InputUtils.convertVoiceCommandReferenceToIndex(reference:lastInd:)(v17, v7);
  uint64_t v8 = InputToDisambiguationItemsConverter.getItemsFromReferences(references:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = v8;
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommandTextNode != -1) {
      swift_once();
    }
    IntentNodeTraversable.value<A>(forNode:)();
    unint64_t v9 = v18;
    if (v18)
    {
      uint64_t v10 = v17;
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_25_2();
        uint64_t v17 = OUTLINED_FUNCTION_22_3();
        *(_DWORD *)uint64_t v14 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v17);
        OUTLINED_FUNCTION_49_3(v15);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v12, v13, "nlv3IntentToChosenItems retrieving disambiguation item with title: %s", v14, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v8 = InputToDisambiguationItemsConverter.getItemsFromTitle(title:requiresExactMatch:)(v10, v9, 0);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = static Array._allocateUninitialized(_:)();
    }
  }
  outlined destroy of VoiceCommandsNLIntent(v5);
  return v8;
}

uint64_t InputToDisambiguationItemsConverter.getItemsFromTitle(title:requiresExactMatch:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_17_15();
  uint64_t v8 = v7;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
  swift_retain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    LODWORD(v77) = a3;
    os_log_type_t v13 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    *(_DWORD *)os_log_type_t v13 = 134217984;
    uint64_t v14 = *(void *)(v8 + 80);
    uint64_t v83 = Array.count.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_0, v11, v12, "[DisambiguationItemConverter] Searching %ld disambiguation items for query.", v13, 0xCu);
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_release();
    uint64_t v14 = *(void *)(v8 + 80);
  }
  OUTLINED_FUNCTION_11_34();
  type metadata accessor for ExactMatcher();
  uint64_t v15 = DescribeCustomIntentItemCatTemplater.__allocating_init()();
  uint64_t v23 = OUTLINED_FUNCTION_5_35(v15, v16, v17, v18, v19, v20, v21, v22, v65, v68, v71, v74, v77, a1);
  uint64_t v25 = v24(v23);
  swift_release();
  if (v25)
  {
    getContiguousArrayStorageType<A>(for:)(v14, v14);
    swift_allocObject();
    uint64_t v26 = static Array._adoptStorage(_:count:)();
    Array.subscript.getter();
    swift_bridgeObjectRelease();
    return _finalizeUninitializedArray<A>(_:)(v26);
  }
  if (a3)
  {
    uint64_t v28 = (void *)Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v29))
    {
      os_log_type_t v30 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v30);
      uint64_t v33 = "[DisambiguationItemConverter] only exact matches requested, none found.";
LABEL_19:
      OUTLINED_FUNCTION_2_15(&dword_0, v31, v32, v33);
      OUTLINED_FUNCTION_7_0();
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_11_34();
  type metadata accessor for PartialMatcher();
  uint64_t v34 = DescribeCustomIntentItemCatTemplater.__allocating_init()();
  uint64_t v42 = OUTLINED_FUNCTION_5_35(v34, v35, v36, v37, v38, v39, v40, v41, v66, v69, v72, v75, v78, v81);
  uint64_t v44 = v43(v42);
  swift_release();
  if (!v44)
  {
    uint64_t v45 = static LocaleUtils.siriLanguageCode()();
    unint64_t v47 = v46;
    swift_bridgeObjectRetain_n();
    uint64_t v79 = v10;
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v76 = v45;
      uint64_t v83 = OUTLINED_FUNCTION_22_3();
      uint64_t v73 = a2;
      *(_DWORD *)uint64_t v50 = 136315138;
      uint64_t v70 = (uint64_t)(v50 + 4);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v48, v49, "[DisambiguationItemConverter] Current siri language: %s", v50, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    char v51 = specialized Sequence<>.contains(_:)(v45, v47, *(void **)(v4 + 32));
    swift_bridgeObjectRelease();
    if ((v51 & 1) == 0
      || (OUTLINED_FUNCTION_11_34(),
          type metadata accessor for TfIdfFuzzyMatcher(),
          TfIdfFuzzyMatcher.__allocating_init()(),
          uint64_t v60 = OUTLINED_FUNCTION_5_35(v52, v53, v54, v55, v56, v57, v58, v59, v67, v70, v73, v76, v79, v82),
          uint64_t v44 = v61(v60),
          swift_release(),
          !v44))
    {
      uint64_t v28 = (void *)Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_32(v62))
      {
        uint64_t v63 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_22_10(v63);
        uint64_t v33 = "[DisambiguationItemConverter] No items matched the input query.";
        goto LABEL_19;
      }
LABEL_20:

      return static Array._allocateUninitialized(_:)();
    }
  }
  return v44;
}

uint64_t InputToDisambiguationItemsConverter.getItemsFromReferences(references:)()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t closure #1 in InputToDisambiguationItemsConverter.getItemsFromReferences(references:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  if (*a1 < 0)
  {
    uint64_t v6 = *(void *)(v4 + 80);
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v5 = *a1;
  if (v5 >= Array.count.getter())
  {
LABEL_5:
    uint64_t v7 = a3;
    uint64_t v8 = 1;
    return __swift_storeEnumTagSinglePayload(v7, v8, 1, v6);
  }
  Array.subscript.getter();
  uint64_t v7 = a3;
  uint64_t v8 = 0;
  return __swift_storeEnumTagSinglePayload(v7, v8, 1, v6);
}

uint64_t InputToDisambiguationItemsConverter.getStringFromUSOParse(uda:)()
{
  uint64_t v0 = Siri_Nlu_External_UserDialogAct.stringValue.getter();
  unint64_t v4 = v1;
  if (v1)
  {
    uint64_t v2 = v0;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v14 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v6, v7, "InputToDisambiguationItemsConverter: got stringValue: %s from USO parse", v8, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    os_log_type_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_16_11(v12))
    {
      os_log_type_t v13 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl(&dword_0, v11, v10, "InputToDisambiguationItemsConverter: could not get string value from payload", v13, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    return 0;
  }
  return v2;
}

uint64_t InputToDisambiguationItemsConverter.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t InputToDisambiguationItemsConverter.__deallocating_deinit()
{
  InputToDisambiguationItemsConverter.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for InputToDisambiguationItemsConverter()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for InputToDisambiguationItemsConverter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in InputToDisambiguationItemsConverter.getItemsFromReferences(references:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in InputToDisambiguationItemsConverter.getItemsFromReferences(references:)(a1, v2, a2);
}

unint64_t lazy protocol witness table accessor for type [Int] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Int] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance [A]);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_41()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_35(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return a14;
}

uint64_t OUTLINED_FUNCTION_11_34()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_20_30()
{
  return v0;
}

uint64_t specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v4 = swift_allocError();
  *uint64_t v5 = a2;

  return _swift_continuation_throwingResumeWithError(a1, v4);
}

uint64_t specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

{
  uint64_t v3;

  uint64_t v3 = a2;
  outlined init with take of INImage?((uint64_t)&v3, *(void *)(*(void *)(a1 + 64) + 40));
  return swift_continuation_throwingResume();
}

uint64_t LNDialog.asSpeakableString.getter(uint64_t a1)
{
  v2[19] = a1;
  v2[20] = v1;
  uint64_t v3 = type metadata accessor for ResponseMode();
  v2[21] = v3;
  v2[22] = *(void *)(v3 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  return _swift_task_switch(LNDialog.asSpeakableString.getter, 0, 0);
}

uint64_t LNDialog.asSpeakableString.getter()
{
  uint64_t v1 = (void *)v0[20];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = LNDialog.asSpeakableString.getter;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned LNDialogResult?, @unowned NSError?) -> () with result type LNDialogResult;
  v0[13] = &block_descriptor_7;
  v0[14] = v2;
  [v1 getResultWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 200) = v1;
  if (v1) {
    uint64_t v2 = LNDialog.asSpeakableString.getter;
  }
  else {
    uint64_t v2 = LNDialog.asSpeakableString.getter;
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void (*v5)(void);
  char v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  uint64_t v1 = v0[22];
  uint64_t v2 = (void *)v0[15];
  uint64_t v3 = [v2 captionPrint];
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v0[16] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentRequest.getter();
  swift_release();
  CurrentRequest.responseMode.getter();
  swift_release();
  static ResponseMode.voiceForward.getter();
  lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode();
  LOBYTE(v3) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v5 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_33_16();
  v5();
  if (v3)
  {
    OUTLINED_FUNCTION_33_16();
    v5();
LABEL_4:
    os_log_type_t v7 = [v2 speak];
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v0[18] = v8;
    goto LABEL_6;
  }
  static ResponseMode.voiceOnly.getter();
  uint64_t v6 = dispatch thunk of static Equatable.== infix(_:_:)();
  OUTLINED_FUNCTION_33_16();
  v5();
  OUTLINED_FUNCTION_33_16();
  v5();
  if (v6) {
    goto LABEL_4;
  }
  uint64_t v9 = [v2 captionSpeak];
  os_log_type_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v0[17] = v10;
LABEL_6:
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  SpeakableString.init(print:speak:)();
  swift_unknownObjectRelease();
  uint64_t v11 = v0[19];
  os_log_type_t v12 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v11, 0, 1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned LNDialogResult?, @unowned NSError?) -> () with result type LNDialogResult(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, (uint64_t)a3);
  }
  if (a2)
  {
    swift_unknownObjectRetain();
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

SiriLinkFlowPlugin::WorkflowRunnerCATPatternsIdentifiers_optional __swiftcall WorkflowRunnerCATPatternsIdentifiers.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of WorkflowRunnerCATPatternsIdentifiers.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (SiriLinkFlowPlugin::WorkflowRunnerCATPatternsIdentifiers_optional)3;
  }
  else {
    return (SiriLinkFlowPlugin::WorkflowRunnerCATPatternsIdentifiers_optional)v3;
  }
}

unint64_t WorkflowRunnerCATPatternsIdentifiers.rawValue.getter()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WorkflowRunnerCATPatternsIdentifiers(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WorkflowRunnerCATPatternsIdentifiers()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WorkflowRunnerCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowRunnerCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::WorkflowRunnerCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WorkflowRunnerCATPatternsIdentifiers@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::WorkflowRunnerCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.int value = WorkflowRunnerCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WorkflowRunnerCATPatternsIdentifiers@<X0>(void *a1@<X8>)
{
  unint64_t result = WorkflowRunnerCATPatternsIdentifiers.rawValue.getter();
  *a1 = 0xD000000000000018;
  a1[1] = v3;
  return result;
}

uint64_t WorkflowRunnerFinalDoneParameters.device.getter()
{
  return swift_retain();
}

uint64_t WorkflowRunnerFinalDoneParameters.device.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t WorkflowRunnerFinalDoneParameters.executeSashGroupOnWatch.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t WorkflowRunnerFinalDoneParameters.intentVerb.getter@<X0>(uint64_t a1@<X8>)
{
  return WorkflowRunnerFinalDoneParameters.intentVerb.getter(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  uint64_t v3 = OUTLINED_FUNCTION_25_17();
  uint64_t v5 = v4(v3);
  return outlined init with copy of AppDisplayInfo?(v1 + *(int *)(v5 + 24), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t type metadata accessor for WorkflowRunnerFinalDoneParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerFinalDoneParameters);
}

uint64_t WorkflowRunnerFinalDoneParameters.intentVerb.setter()
{
  return WorkflowRunnerFinalDoneParameters.intentVerb.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_25_17();
  v1(v0);
  Swift::String v2 = OUTLINED_FUNCTION_32_22();

  return outlined assign with take of SpeakableString?(v2, v3);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WorkflowRunnerFinalDoneParameters.intentVerb.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t WorkflowRunnerFinalDoneParameters.localizedAppName.getter@<X0>(uint64_t a1@<X8>)
{
  return WorkflowRunnerFinalDoneParameters.localizedAppName.getter(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  uint64_t v3 = OUTLINED_FUNCTION_25_17();
  uint64_t v5 = v4(v3);
  return outlined init with copy of AppDisplayInfo?(v1 + *(int *)(v5 + 28), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t WorkflowRunnerFinalDoneParameters.localizedAppName.setter()
{
  return WorkflowRunnerFinalDoneParameters.localizedAppName.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_25_17();
  v1(v0);
  Swift::String v2 = OUTLINED_FUNCTION_32_22();

  return outlined assign with take of SpeakableString?(v2, v3);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WorkflowRunnerFinalDoneParameters.localizedAppName.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t WorkflowRunnerFinalDoneParameters.asKeyValuePairs()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_23_27();
  __chkstk_darwin(v5);
  os_log_type_t v7 = (char *)&v18 - v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v8 = swift_allocObject();
  OUTLINED_FUNCTION_18_25((__n128 *)v8, (__n128)xmmword_214D20);
  if (v2)
  {
    uint64_t v9 = type metadata accessor for SirikitDeviceState();
    uint64_t v10 = v2;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    *(void *)(v8 + 56) = 0;
    *(void *)(v8 + 64) = 0;
  }
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 72) = v9;
  *(void *)(v8 + 80) = 0xD000000000000017;
  OUTLINED_FUNCTION_35_16((uint64_t)"executeSashGroupOnWatch");
  *(unsigned char *)(v8 + 96) = v11;
  *(void *)(v8 + 120) = &type metadata for Bool;
  *(void *)(v8 + 128) = 0x6556746E65746E69;
  *(void *)(v8 + 136) = 0xEA00000000006272;
  uint64_t done = type metadata accessor for WorkflowRunnerFinalDoneParameters(0);
  outlined init with copy of AppDisplayInfo?(v1 + *(int *)(done + 24), (uint64_t)v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_19_21((uint64_t)v7);
  if (v14)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?((uint64_t)v7, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
  }
  else
  {
    *(void *)(v8 + 168) = v13;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 144));
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_38_17();
    v15();
    swift_retain();
  }
  *(void *)(v8 + 176) = 0xD000000000000010;
  *(void *)(v8 + 184) = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v1 + *(int *)(done + 28), v0, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_19_21(v0);
  if (v14)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
  }
  else
  {
    *(void *)(v8 + 216) = v13;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 192));
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v16 + 32))();
  }
  return v8;
}

uint64_t WorkflowRunnerFinalDoneParameters.init(device:executeSashGroupOnWatch:intentVerb:localizedAppName:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return WorkflowRunnerFinalDoneParameters.init(device:executeSashGroupOnWatch:intentVerb:localizedAppName:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t vars8;

  *(void *)a5 = a1;
  *(unsigned char *)(a5 + 8) = a2;
  uint64_t v8 = OUTLINED_FUNCTION_25_17();
  uint64_t v10 = v9(v8);
  outlined init with take of SpeakableString?(a3, a5 + *(int *)(v10 + 24));
  char v11 = a5 + *(int *)(v10 + 28);

  return outlined init with take of SpeakableString?(a4, v11);
}

uint64_t WorkflowRunnerInputTextParameters.inputType.getter@<X0>(uint64_t a1@<X8>)
{
  return WorkflowRunnerFinalDoneParameters.intentVerb.getter(a1);
}

uint64_t type metadata accessor for WorkflowRunnerInputTextParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerInputTextParameters);
}

uint64_t WorkflowRunnerInputTextParameters.inputType.setter()
{
  return WorkflowRunnerFinalDoneParameters.intentVerb.setter();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WorkflowRunnerInputTextParameters.inputType.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t WorkflowRunnerInputTextParameters.message.getter@<X0>(uint64_t a1@<X8>)
{
  return WorkflowRunnerFinalDoneParameters.localizedAppName.getter(a1);
}

uint64_t WorkflowRunnerInputTextParameters.message.setter()
{
  return WorkflowRunnerFinalDoneParameters.localizedAppName.setter();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WorkflowRunnerInputTextParameters.message.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t WorkflowRunnerInputTextParameters.asKeyValuePairs()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_23_27();
  __chkstk_darwin(v5);
  os_log_type_t v7 = (char *)&v19 - v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v8 = swift_allocObject();
  OUTLINED_FUNCTION_18_25((__n128 *)v8, (__n128)xmmword_214D20);
  if (v2)
  {
    uint64_t v9 = type metadata accessor for SirikitDeviceState();
    uint64_t v10 = v2;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    *(void *)(v8 + 56) = 0;
    *(void *)(v8 + 64) = 0;
  }
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 72) = v9;
  *(void *)(v8 + 80) = 0xD000000000000017;
  OUTLINED_FUNCTION_35_16((uint64_t)"executeSashGroupOnWatch");
  *(unsigned char *)(v8 + 96) = v11;
  *(void *)(v8 + 120) = &type metadata for Bool;
  *(void *)(v8 + 128) = 0x7079547475706E69;
  *(void *)(v8 + 136) = 0xE900000000000065;
  uint64_t v12 = type metadata accessor for WorkflowRunnerInputTextParameters(0);
  outlined init with copy of AppDisplayInfo?(v1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_19_21((uint64_t)v7);
  if (v14)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?((uint64_t)v7, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
  }
  else
  {
    *(void *)(v8 + 168) = v13;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 144));
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_38_17();
    v15();
    swift_retain();
  }
  OUTLINED_FUNCTION_30_18();
  *(void *)(v8 + 176) = v16;
  *(void *)(v8 + 184) = 0xE700000000000000;
  outlined init with copy of AppDisplayInfo?(v1 + *(int *)(v12 + 28), v0, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_19_21(v0);
  if (v14)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
  }
  else
  {
    *(void *)(v8 + 216) = v13;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 192));
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v17 + 32))();
  }
  return v8;
}

uint64_t WorkflowRunnerInputTextParameters.init(device:executeSashGroupOnWatch:inputType:message:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return WorkflowRunnerFinalDoneParameters.init(device:executeSashGroupOnWatch:intentVerb:localizedAppName:)(a1, a2, a3, a4, a5);
}

uint64_t WorkflowRunnerShowAlertParameters.executeSashGroupOnWatch.getter()
{
  return *v0;
}

uint64_t WorkflowRunnerShowAlertParameters.message.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for WorkflowRunnerShowAlertParameters(0);
  return outlined init with copy of AppDisplayInfo?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t type metadata accessor for WorkflowRunnerShowAlertParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerShowAlertParameters);
}

uint64_t WorkflowRunnerShowAlertParameters.message.setter()
{
  type metadata accessor for WorkflowRunnerShowAlertParameters(0);
  uint64_t v0 = OUTLINED_FUNCTION_32_22();

  return outlined assign with take of SpeakableString?(v0, v1);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *WorkflowRunnerShowAlertParameters.message.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t WorkflowRunnerShowAlertParameters.asKeyValuePairs()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_16(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_20_0();
  uint64_t v5 = v4 - v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_212170;
  *(void *)(v6 + 32) = 0xD000000000000017;
  *(void *)(v6 + 40) = 0x800000000022A4F0;
  *(unsigned char *)(v6 + 48) = *v0;
  os_log_type_t v7 = (uint64_t *)(v6 + 96);
  OUTLINED_FUNCTION_30_18();
  v8[9] = v10;
  v8[10] = v9;
  v8[11] = 0xE700000000000000;
  uint64_t v11 = type metadata accessor for WorkflowRunnerShowAlertParameters(0);
  outlined init with copy of AppDisplayInfo?((uint64_t)&v0[*(int *)(v11 + 20)], v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_11_35(v5) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v5, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)os_log_type_t v7 = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
  }
  else
  {
    *(void *)(v6 + 120) = v12;
    __swift_allocate_boxed_opaque_existential_1(v7);
    OUTLINED_FUNCTION_2_42();
    (*(void (**)(void))(v13 + 32))();
  }
  return v6;
}

uint64_t WorkflowRunnerShowAlertParameters.init(executeSashGroupOnWatch:message:)@<X0>(char a1@<W0>, unsigned char *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for WorkflowRunnerShowAlertParameters(0);
  uint64_t v2 = OUTLINED_FUNCTION_32_22();

  return outlined init with take of SpeakableString?(v2, v3);
}

uint64_t WorkflowRunnerCATPatternsExecutor.finalDone(executeSashGroupOnWatch:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_15_30(v1, v2, v3);
  uint64_t done = type metadata accessor for WorkflowRunnerFinalDoneParameters(v4);
  *(void *)(v0 + 40) = done;
  OUTLINED_FUNCTION_16(done);
  *(void *)(v0 + 48) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t (*v6)(unint64_t);
  uint64_t v8;

  uint64_t v2 = OUTLINED_FUNCTION_22_28();
  uint64_t v3 = OUTLINED_FUNCTION_7_40(v2);
  v1(v3);
  *(void *)(v0 + 56) = WorkflowRunnerFinalDoneParameters.asKeyValuePairs()();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = WorkflowRunnerCATPatternsExecutor.finalDone(executeSashGroupOnWatch:_:);
  uint64_t v5 = OUTLINED_FUNCTION_6_38();
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of WorkflowRunnerFinalDoneParameters(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WorkflowRunnerFinalDoneParameters);
  swift_task_dealloc();
  char v1 = OUTLINED_FUNCTION_20_31();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of WorkflowRunnerFinalDoneParameters(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WorkflowRunnerFinalDoneParameters);
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v1();
}

uint64_t WorkflowRunnerCATPatternsExecutor.inputText(executeSashGroupOnWatch:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_15_30(v1, v2, v3);
  uint64_t v5 = type metadata accessor for WorkflowRunnerInputTextParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v0 + 48) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t (*v6)(unint64_t);
  uint64_t v8;

  uint64_t v2 = OUTLINED_FUNCTION_22_28();
  uint64_t v3 = OUTLINED_FUNCTION_7_40(v2);
  v1(v3);
  *(void *)(v0 + 56) = WorkflowRunnerInputTextParameters.asKeyValuePairs()();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = WorkflowRunnerCATPatternsExecutor.inputText(executeSashGroupOnWatch:_:);
  uint64_t v5 = OUTLINED_FUNCTION_6_38();
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of WorkflowRunnerFinalDoneParameters(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WorkflowRunnerInputTextParameters);
  swift_task_dealloc();
  char v1 = OUTLINED_FUNCTION_20_31();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of WorkflowRunnerFinalDoneParameters(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WorkflowRunnerInputTextParameters);
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v1();
}

uint64_t outlined destroy of WorkflowRunnerFinalDoneParameters(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_40();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t WorkflowRunnerCATPatternsExecutor.showAlert(executeSashGroupOnWatch:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_15_30(v1, v2, v3);
  uint64_t v5 = type metadata accessor for WorkflowRunnerShowAlertParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v0 + 48) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  unsigned char *v1;
  void (*v2)(unsigned char *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t (*v8)(unint64_t);
  uint64_t v10;

  OUTLINED_FUNCTION_13_1();
  char v1 = *(unsigned char **)(v0 + 48);
  uint64_t v2 = *(void (**)(unsigned char *))(v0 + 16);
  uint64_t v3 = *(unsigned char *)(v0 + 88);
  uint64_t v4 = (uint64_t)&v1[*(int *)(*(void *)(v0 + 40) + 20)];
  uint64_t v5 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  *char v1 = v3;
  v2(v1);
  *(void *)(v0 + 56) = WorkflowRunnerShowAlertParameters.asKeyValuePairs()();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 64) = v6;
  *uint64_t v6 = v0;
  v6[1] = WorkflowRunnerCATPatternsExecutor.showAlert(executeSashGroupOnWatch:_:);
  uint64_t v7 = OUTLINED_FUNCTION_6_38();
  return v8(v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of WorkflowRunnerFinalDoneParameters(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WorkflowRunnerShowAlertParameters);
  swift_task_dealloc();
  char v1 = OUTLINED_FUNCTION_20_31();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of WorkflowRunnerFinalDoneParameters(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WorkflowRunnerShowAlertParameters);
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v1();
}

uint64_t WorkflowRunnerCATPatternsExecutor.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return WorkflowRunnerCATPatternsExecutor.init(templateDir:options:globals:)(a1, a2);
}

uint64_t WorkflowRunnerCATPatternsExecutor.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_20_0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_16(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_0();
  outlined init with copy of AppDisplayInfo?(a1, v12 - v11, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerCATPatternsIdentifiers and conformance WorkflowRunnerCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATPatternsIdentifiers and conformance WorkflowRunnerCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATPatternsIdentifiers and conformance WorkflowRunnerCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATPatternsIdentifiers and conformance WorkflowRunnerCATPatternsIdentifiers);
  }
  return result;
}

uint64_t protocol witness for WorkflowRunnerCATPatternsExecuting.finalDone(executeSashGroupOnWatch:_:) in conformance WorkflowRunnerCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**v3
                                                                      + class metadata base offset for WorkflowRunnerCATPatternsExecutor)
                                                          + **(int **)(**v3
                                                                     + class metadata base offset for WorkflowRunnerCATPatternsExecutor));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for WorkflowRunnerCATPatternsExecuting.finalDone(executeSashGroupOnWatch:_:) in conformance WorkflowRunnerCATPatternsExecutor;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for WorkflowRunnerCATPatternsExecuting.finalDone(executeSashGroupOnWatch:_:) in conformance WorkflowRunnerCATPatternsExecutor()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t protocol witness for WorkflowRunnerCATPatternsExecuting.inputText(executeSashGroupOnWatch:_:) in conformance WorkflowRunnerCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for WorkflowRunnerCATPatternsExecutor + **v3 + 8);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for WorkflowRunnerCATPatternsExecuting.inputText(executeSashGroupOnWatch:_:) in conformance WorkflowRunnerCATPatternsExecutor;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for WorkflowRunnerCATPatternsExecuting.showAlert(executeSashGroupOnWatch:_:) in conformance WorkflowRunnerCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for WorkflowRunnerCATPatternsExecutor + **v3 + 16);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for WorkflowRunnerCATPatternsExecuting.inputText(executeSashGroupOnWatch:_:) in conformance WorkflowRunnerCATPatternsExecutor;
  return v11(a1, a2, a3);
}

unsigned char *storeEnumTagSinglePayload for WorkflowRunnerCATPatternsIdentifiers(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19C3C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkflowRunnerCATPatternsIdentifiers()
{
  return &type metadata for WorkflowRunnerCATPatternsIdentifiers;
}

uint64_t getEnumTagSinglePayload for WorkflowRunnerFinalDoneParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerFinalDoneParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

void type metadata accessor for SpeakableString?()
{
  if (!lazy cache variable for type metadata for SpeakableString?)
  {
    type metadata accessor for SpeakableString();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SpeakableString?);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for WorkflowRunnerFinalDoneParameters()
{
  OUTLINED_FUNCTION_0_37();
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v7 = *v6;
  *uint64_t v8 = *v6;
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v0 = v7 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    OUTLINED_FUNCTION_13_34();
    OUTLINED_FUNCTION_10_36(v9, v10);
    swift_retain();
    if (OUTLINED_FUNCTION_11_35(v3))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      uint64_t v12 = OUTLINED_FUNCTION_16(v11);
      OUTLINED_FUNCTION_27_24(v12, v14, *(void *)(v13 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_2_42();
      OUTLINED_FUNCTION_8_33();
      v15();
      OUTLINED_FUNCTION_4_38(v2);
    }
    if (OUTLINED_FUNCTION_9_38())
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      uint64_t v17 = OUTLINED_FUNCTION_16(v16);
      OUTLINED_FUNCTION_29_21(v17, v19, *(void *)(v18 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_2_42();
      OUTLINED_FUNCTION_8_33();
      v20();
      OUTLINED_FUNCTION_4_38(v1);
    }
  }
  return v0;
}

uint64_t destroy for WorkflowRunnerFinalDoneParameters(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
  {
    OUTLINED_FUNCTION_40();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t result = __swift_getEnumTagSinglePayload(v7, 1, v5);
  if (!result)
  {
    OUTLINED_FUNCTION_40();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v10(v7, v5);
  }
  return result;
}

uint64_t initializeWithCopy for WorkflowRunnerFinalDoneParameters()
{
  OUTLINED_FUNCTION_13_34();
  *uint64_t v5 = *v4;
  OUTLINED_FUNCTION_10_36((uint64_t)v5, (uint64_t)v4);
  swift_retain();
  if (OUTLINED_FUNCTION_11_35(v3))
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v7 = OUTLINED_FUNCTION_16(v6);
    OUTLINED_FUNCTION_27_24(v7, v9, *(void *)(v8 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_2_42();
    OUTLINED_FUNCTION_8_33();
    v10();
    OUTLINED_FUNCTION_4_38(v2);
  }
  if (OUTLINED_FUNCTION_9_38())
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v12 = OUTLINED_FUNCTION_16(v11);
    OUTLINED_FUNCTION_29_21(v12, v14, *(void *)(v13 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_2_42();
    OUTLINED_FUNCTION_8_33();
    v15();
    OUTLINED_FUNCTION_4_38(v1);
  }
  return v0;
}

void *assignWithCopy for WorkflowRunnerFinalDoneParameters()
{
  OUTLINED_FUNCTION_13_34();
  void *v0 = *v5;
  swift_retain();
  swift_release();
  uint64_t v6 = OUTLINED_FUNCTION_21_24();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v3, 1, v6);
  int v8 = OUTLINED_FUNCTION_11_35(v4);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      OUTLINED_FUNCTION_2_42();
      OUTLINED_FUNCTION_8_33();
      v9();
      OUTLINED_FUNCTION_4_38(v3);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_0_37();
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_33_19();
    v12(v11);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v14 = OUTLINED_FUNCTION_16(v13);
    OUTLINED_FUNCTION_27_24(v14, v16, *(void *)(v15 + 64));
    goto LABEL_7;
  }
  uint64_t v31 = OUTLINED_FUNCTION_36_16();
  v32(v31);
LABEL_7:
  uint64_t v17 = *(int *)(v2 + 28);
  uint64_t v18 = (uint64_t)v0 + v17;
  uint64_t v19 = v1 + v17;
  int v20 = __swift_getEnumTagSinglePayload((uint64_t)v0 + v17, 1, v6);
  int v21 = OUTLINED_FUNCTION_11_35(v19);
  if (!v20)
  {
    OUTLINED_FUNCTION_0_37();
    if (!v23)
    {
      uint64_t v33 = OUTLINED_FUNCTION_37_18();
      v34(v33);
      return v0;
    }
    uint64_t v24 = OUTLINED_FUNCTION_34_15();
    v25(v24);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v27 = OUTLINED_FUNCTION_16(v26);
    OUTLINED_FUNCTION_29_21(v27, v29, *(void *)(v28 + 64));
    return v0;
  }
  OUTLINED_FUNCTION_2_42();
  OUTLINED_FUNCTION_8_33();
  v22();
  OUTLINED_FUNCTION_4_38(v18);
  return v0;
}

uint64_t initializeWithTake for WorkflowRunnerFinalDoneParameters()
{
  OUTLINED_FUNCTION_13_34();
  *uint64_t v5 = *v4;
  OUTLINED_FUNCTION_10_36((uint64_t)v5, (uint64_t)v4);
  if (OUTLINED_FUNCTION_11_35(v3))
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v7 = OUTLINED_FUNCTION_16(v6);
    OUTLINED_FUNCTION_27_24(v7, v9, *(void *)(v8 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_2_42();
    OUTLINED_FUNCTION_16_24();
    v10();
    OUTLINED_FUNCTION_4_38(v2);
  }
  if (OUTLINED_FUNCTION_9_38())
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v12 = OUTLINED_FUNCTION_16(v11);
    OUTLINED_FUNCTION_29_21(v12, v14, *(void *)(v13 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_2_42();
    OUTLINED_FUNCTION_16_24();
    v15();
    OUTLINED_FUNCTION_4_38(v1);
  }
  return v0;
}

void *assignWithTake for WorkflowRunnerFinalDoneParameters()
{
  OUTLINED_FUNCTION_13_34();
  void *v0 = *v5;
  swift_release();
  uint64_t v6 = OUTLINED_FUNCTION_21_24();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v3, 1, v6);
  int v8 = OUTLINED_FUNCTION_11_35(v4);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      OUTLINED_FUNCTION_2_42();
      OUTLINED_FUNCTION_16_24();
      v9();
      OUTLINED_FUNCTION_4_38(v3);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_0_37();
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_33_19();
    v12(v11);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v14 = OUTLINED_FUNCTION_16(v13);
    OUTLINED_FUNCTION_27_24(v14, v16, *(void *)(v15 + 64));
    goto LABEL_7;
  }
  uint64_t v31 = OUTLINED_FUNCTION_36_16();
  v32(v31);
LABEL_7:
  uint64_t v17 = *(int *)(v2 + 28);
  uint64_t v18 = (uint64_t)v0 + v17;
  uint64_t v19 = v1 + v17;
  int v20 = __swift_getEnumTagSinglePayload((uint64_t)v0 + v17, 1, v6);
  int v21 = OUTLINED_FUNCTION_11_35(v19);
  if (!v20)
  {
    OUTLINED_FUNCTION_0_37();
    if (!v23)
    {
      uint64_t v33 = OUTLINED_FUNCTION_37_18();
      v34(v33);
      return v0;
    }
    uint64_t v24 = OUTLINED_FUNCTION_34_15();
    v25(v24);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v27 = OUTLINED_FUNCTION_16(v26);
    OUTLINED_FUNCTION_29_21(v27, v29, *(void *)(v28 + 64));
    return v0;
  }
  OUTLINED_FUNCTION_2_42();
  OUTLINED_FUNCTION_16_24();
  v22();
  OUTLINED_FUNCTION_4_38(v18);
  return v0;
}

uint64_t getEnumTagSinglePayload for WorkflowRunnerInputTextParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19CC2C);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v10 = (uint64_t)a1 + *(int *)(a3 + 24);
    return __swift_getEnumTagSinglePayload(v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerInputTextParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19CCDC);
}

void *__swift_store_extra_inhabitant_indexTm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 24);
    return (void *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for WorkflowRunnerFinalDoneParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for WorkflowRunnerShowAlertParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for WorkflowRunnerShowAlertParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for SpeakableString();
  uint64_t result = __swift_getEnumTagSinglePayload(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v5(v2, v3);
  }
  return result;
}

unsigned char *initializeWithCopy for WorkflowRunnerShowAlertParameters(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *assignWithCopy for WorkflowRunnerShowAlertParameters(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v7);
  int v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if (!EnumTagSinglePayload)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  return a1;
}

unsigned char *initializeWithTake for WorkflowRunnerShowAlertParameters(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *assignWithTake for WorkflowRunnerShowAlertParameters(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v7);
  int v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if (!EnumTagSinglePayload)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowRunnerShowAlertParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19D43C);
}

uint64_t sub_19D43C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v11 = (uint64_t)&a1[*(int *)(a3 + 20)];
    return __swift_getEnumTagSinglePayload(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for WorkflowRunnerShowAlertParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19D4DC);
}

unsigned char *sub_19D4DC(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v8 = (uint64_t)&v5[*(int *)(a4 + 20)];
    return (unsigned char *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for WorkflowRunnerShowAlertParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for WorkflowRunnerCATPatternsExecutor(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowRunnerCATPatternsExecutor);
}

uint64_t type metadata completion function for WorkflowRunnerCATPatternsExecutor()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for WorkflowRunnerCATPatternsExecutor()
{
  return type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
}

uint64_t OUTLINED_FUNCTION_4_38(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

unint64_t OUTLINED_FUNCTION_6_38()
{
  return 0xD000000000000018;
}

uint64_t OUTLINED_FUNCTION_7_40(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v2, 1, 1, a1);
  __swift_storeEnumTagSinglePayload(v1 + *(int *)(v3 + 28), 1, 1, a1);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = v4;
  return v1;
}

uint64_t OUTLINED_FUNCTION_9_38()
{
  uint64_t v4 = *(int *)(v2 + 28);
  return __swift_getEnumTagSinglePayload(v1 + v4, 1, v0);
}

uint64_t OUTLINED_FUNCTION_10_36(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_11_35(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_15_30(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 88) = a1;
  return 0;
}

__n128 *OUTLINED_FUNCTION_18_25(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x656369766564;
  result[2].n128_u64[1] = 0xE600000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_19_21(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_20_31()
{
  return *(void *)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_21_24()
{
  *(unsigned char *)(v0 + 8) = *(unsigned char *)(v1 + 8);
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_22_28()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_25_17()
{
  return 0;
}

void *OUTLINED_FUNCTION_27_24(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v3, v4, a3);
}

void *OUTLINED_FUNCTION_29_21(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_32_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_33_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_15()
{
  return v0;
}

void OUTLINED_FUNCTION_35_16(uint64_t a1@<X8>)
{
  *(void *)(v1 + 88) = (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_36_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_37_18()
{
  return v0;
}

uint64_t IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:));
}

uint64_t IntroduceCustomIntentCatTemplater.makeTemplate(items:_:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_20_0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_12_1();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_0();
  uint64_t v13 = v12 - v11;
  TemplatingResult.init(dialogId:print:speak:)((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (void *)(v12 - v11));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v13, v7);
  swift_storeEnumTagMultiPayload();
  a2(v6);
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
}

uint64_t IntroduceCustomIntentCatTemplater.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for IntroduceCustomIntentTemplating.makeTemplate(items:_:) in conformance IntroduceCustomIntentCatTemplater()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for IntroduceCustomIntentViewBuilding.makeViews(withTemplate:items:) in conformance IntroduceCustomIntentViewBuilder()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t IntroduceCustomIntentOutputProvider.init(items:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized IntroduceCustomIntentOutputProvider.init(items:templating:viewBuilder:));
}

uint64_t IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(a3 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a3, v9);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_20_0();
  uint64_t v14 = v13 - v12;
  (*(void (**)(uint64_t))(v15 + 16))(v13 - v12);
  uint64_t v16 = a4(a1, a2, v14, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  return v16;
}

uint64_t IntroduceCustomIntentOutputProvider.makeOutput(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[11];
  uint64_t v6 = v2[12];
  __swift_project_boxed_opaque_existential_1(v2 + 8, v5);
  uint64_t v7 = v2[2];
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v2;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v6 + 8);
  swift_retain();
  swift_retain();
  v9(v7, partial apply for closure #1 in IntroduceCustomIntentOutputProvider.makeOutput(_:), v8, v5, v6);

  return swift_release();
}

uint64_t closure #1 in IntroduceCustomIntentOutputProvider.makeOutput(_:)(uint64_t a1, void (*a2)(long long *), uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for AceOutput();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TemplatingResult();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)&long long v28 = *v17;
    char v31 = 1;
    swift_errorRetain();
    a2(&v28);
    swift_errorRelease();
  }
  else
  {
    uint64_t v24 = v12;
    uint64_t v25 = v11;
    (*(void (**)(char *, void *, uint64_t))(v12 + 32))(v14, v17, v11);
    uint64_t v18 = a4[6];
    uint64_t v19 = a4[7];
    __swift_project_boxed_opaque_existential_1(a4 + 3, v18);
    if ((unint64_t)(*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v19 + 8))(v14, a4[2], v18, v19) >> 62)
    {
      type metadata accessor for SABaseCommand();
      _bridgeCocoaArray<A>(_:)();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for SABaseCommand();
    }
    swift_bridgeObjectRelease();
    os_log_type_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    AceOutput.init(commands:flowActivity:)();
    uint64_t v20 = v26;
    *((void *)&v29 + 1) = v26;
    os_log_type_t v30 = &protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v28);
    uint64_t v22 = v27;
    (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 16))(boxed_opaque_existential_1, v10, v20);
    char v31 = 0;
    a2(&v28);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v20);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  }
  return outlined destroy of URL?((uint64_t)&v28, &demangling cache variable for type metadata for Result<Output, Error>);
}

uint64_t IntroduceCustomIntentOutputProvider.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  return v0;
}

uint64_t IntroduceCustomIntentOutputProvider.__deallocating_deinit()
{
  IntroduceCustomIntentOutputProvider.deinit();

  return swift_deallocClassInstance();
}

void *specialized IntroduceCustomIntentOutputProvider.__allocating_init(items:templating:viewBuilder:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntroduceCustomIntentOutputProvider();
  uint64_t v14 = (void *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  uint64_t v15 = specialized IntroduceCustomIntentOutputProvider.init(items:templating:viewBuilder:)(a1, a2, (uint64_t)v13, v14, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, a5);
  return v15;
}

void *specialized IntroduceCustomIntentOutputProvider.init(items:templating:viewBuilder:)(uint64_t a1, long long *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  a4[6] = a5;
  a4[7] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4 + 3);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  a4[2] = a1;
  outlined init with take of AceServiceInvokerAsync(a2, (uint64_t)(a4 + 8));
  return a4;
}

uint64_t sub_19E2A0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in IntroduceCustomIntentOutputProvider.makeOutput(_:)(uint64_t a1)
{
  return closure #1 in IntroduceCustomIntentOutputProvider.makeOutput(_:)(a1, *(void (**)(long long *))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t type metadata accessor for IntroduceCustomIntentCatTemplater()
{
  return self;
}

uint64_t type metadata accessor for IntroduceCustomIntentViewBuilder()
{
  return self;
}

uint64_t type metadata accessor for IntroduceCustomIntentOutputProvider()
{
  return self;
}

uint64_t INImage.convertToVisualProperty()(uint64_t a1)
{
  v2[21] = a1;
  v2[22] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageElement.AspectRatio?);
  v2[23] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for ImageElement.AspectRatio();
  v2[24] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v2[25] = v4;
  v2[26] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for ImageElement.ImageStyle();
  v2[27] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v2[28] = v6;
  v2[29] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageElement.Background?);
  v2[30] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for ImageElement.RenderingMode();
  v2[31] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v2[32] = v8;
  v2[33] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color?);
  v2[34] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for ImageElement();
  v2[35] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v2[36] = v10;
  v2[37] = OUTLINED_FUNCTION_25();
  return _swift_task_switch(INImage.convertToVisualProperty(), 0, 0);
}

uint64_t INImage.convertToVisualProperty()()
{
  if ([*(id *)(v0 + 176) _isSystem])
  {
    outlined bridged method (pb) of @objc INImage._name.getter(*(void **)(v0 + 176));
    if (v1)
    {
      uint64_t v2 = *(void *)(v0 + 272);
      uint64_t v3 = *(void *)(v0 + 256);
      uint64_t v4 = *(void *)(v0 + 264);
      uint64_t v54 = v4;
      uint64_t v55 = v2;
      uint64_t v6 = *(void *)(v0 + 240);
      uint64_t v5 = *(void *)(v0 + 248);
      uint64_t v56 = v5;
      uint64_t v7 = *(void *)(v0 + 224);
      uint64_t v8 = *(void *)(v0 + 232);
      uint64_t v9 = *(void *)(v0 + 216);
      uint64_t v52 = v9;
      uint64_t v57 = *(void *)(v0 + 168);
      uint64_t v10 = type metadata accessor for Color();
      __swift_storeEnumTagSinglePayload(v2, 1, 1, v10);
      (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v4, enum case for ImageElement.RenderingMode.template(_:), v5);
      uint64_t v11 = type metadata accessor for ImageElement.Background();
      __swift_storeEnumTagSinglePayload(v6, 1, 1, v11);
      (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v8, enum case for ImageElement.ImageStyle.default(_:), v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
      uint64_t v12 = type metadata accessor for _ProtoIdiom();
      OUTLINED_FUNCTION_0_2();
      uint64_t v14 = v13;
      unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_212160;
      (*(void (**)(unint64_t, void, uint64_t))(v14 + 104))(v16 + v15, enum case for _ProtoIdiom.default(_:), v12);
      specialized Set.init(_nonEmptyArrayLiteral:)(v16);
      static ImageElement.symbol(_:darkModeName:tintColor:renderingMode:imageStyle:background:idioms:punchesThroughBackground:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v52);
      outlined destroy of FlowActivity?(v6, &demangling cache variable for type metadata for ImageElement.Background?);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v54, v56);
      outlined destroy of FlowActivity?(v55, &demangling cache variable for type metadata for Color?);
      VisualPropertyConvertible<>.asVisualProperty()();
      OUTLINED_FUNCTION_66();
      v19(v17, v18);
      uint64_t v21 = type metadata accessor for VisualProperty();
      uint64_t v22 = v57;
      goto LABEL_15;
    }
  }
  if (![*(id *)(v0 + 176) _requiresRetrieval])
  {
    id v25 = *(id *)(v0 + 176);
    uint64_t v26 = outlined bridged method (pb) of @objc INImage._imageData.getter(v25);
    if (v27 >> 60 == 15)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
      long long v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        OUTLINED_FUNCTION_42_0(&dword_0, v31, v32, "image data is empty");
        OUTLINED_FUNCTION_7_0();
      }
      uint64_t v33 = *(void *)(v0 + 168);

      uint64_t v21 = type metadata accessor for VisualProperty();
      uint64_t v22 = v33;
      uint64_t v34 = 1;
      goto LABEL_16;
    }
    unint64_t v35 = v27;
    uint64_t v36 = *(void *)(v0 + 184);
    uint64_t v58 = *(void *)(v0 + 168);
    uint64_t v53 = v26;
    outlined copy of Data._Representation(v26, v27);
    OUTLINED_FUNCTION_12_38();
    OUTLINED_FUNCTION_12_38();
    ImageElement.AspectRatio.init(width:height:)();
    uint64_t v37 = OUTLINED_FUNCTION_11_36();
    v38(v37);
    OUTLINED_FUNCTION_13_35();
    uint64_t v39 = OUTLINED_FUNCTION_7_41();
    v40(v39);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
    type metadata accessor for _ProtoIdiom();
    OUTLINED_FUNCTION_0_2();
    uint64_t v41 = OUTLINED_FUNCTION_5_36();
    *(_OWORD *)(v41 + 16) = xmmword_212160;
    OUTLINED_FUNCTION_16_25();
    v42();
    specialized Set.init(_nonEmptyArrayLiteral:)(v41);
    OUTLINED_FUNCTION_3_37();
    swift_bridgeObjectRelease();
    uint64_t v43 = OUTLINED_FUNCTION_9_39();
    v44(v43);
    outlined destroy of FlowActivity?(v36, &demangling cache variable for type metadata for ImageElement.AspectRatio?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VisualElementConvertible>);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_212160;
    *(void *)(v45 + 56) = type metadata accessor for VisualElement();
    *(void *)(v45 + 64) = &protocol witness table for VisualElement;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v45 + 32));
    ImageElement.asVisualElement()();
    VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)();
    outlined consume of Data?(v53, v35);

    outlined consume of Data?(v53, v35);
    OUTLINED_FUNCTION_66();
    v47(v46);
    OUTLINED_FUNCTION_66();
    v49(v48);
    uint64_t v21 = type metadata accessor for VisualProperty();
    uint64_t v22 = v58;
LABEL_15:
    uint64_t v34 = 0;
LABEL_16:
    OUTLINED_FUNCTION_2_43(v22, v34, v20, v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
    return v50();
  }
  int v23 = *(void **)(v0 + 176);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 144;
  *(void *)(v0 + 24) = INImage.convertToVisualProperty();
  uint64_t v24 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned INImage?, @unowned NSError?) -> () with result type INImage?;
  *(void *)(v0 + 104) = &block_descriptor_8;
  *(void *)(v0 + 112) = v24;
  [v23 _retrieveImageDataWithReply:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 304) = v1;
  if (v1) {
    uint64_t v2 = INImage.convertToVisualProperty();
  }
  else {
    uint64_t v2 = INImage.convertToVisualProperty();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t (*v35)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v1 = (void *)v0[18];
  if (!v1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
    unint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "Can't retrieve image;", v17, 2u);
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v18 = v0[21];

    uint64_t v12 = type metadata accessor for VisualProperty();
    uint64_t v13 = v18;
    goto LABEL_13;
  }
  uint64_t v2 = v1;
  uint64_t v3 = outlined bridged method (pb) of @objc INImage._imageData.getter(v2);
  if (v4 >> 60 == 15)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_42_0(&dword_0, v8, v9, "image data is empty");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v10 = v0[21];

    uint64_t v12 = type metadata accessor for VisualProperty();
    uint64_t v13 = v10;
LABEL_13:
    uint64_t v19 = 1;
    goto LABEL_15;
  }
  uint64_t v20 = v4;
  uint64_t v21 = v0[23];
  uint64_t v38 = v0[21];
  uint64_t v37 = v3;
  outlined copy of Data._Representation(v3, v4);
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_12_38();
  ImageElement.AspectRatio.init(width:height:)();
  uint64_t v22 = OUTLINED_FUNCTION_11_36();
  v23(v22);
  OUTLINED_FUNCTION_13_35();
  uint64_t v24 = OUTLINED_FUNCTION_7_41();
  v25(v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  type metadata accessor for _ProtoIdiom();
  OUTLINED_FUNCTION_0_2();
  uint64_t v26 = OUTLINED_FUNCTION_5_36();
  *(_OWORD *)(v26 + 16) = xmmword_212160;
  OUTLINED_FUNCTION_16_25();
  v27();
  specialized Set.init(_nonEmptyArrayLiteral:)(v26);
  OUTLINED_FUNCTION_3_37();
  swift_bridgeObjectRelease();
  uint64_t v28 = OUTLINED_FUNCTION_9_39();
  v29(v28);
  outlined destroy of FlowActivity?(v21, &demangling cache variable for type metadata for ImageElement.AspectRatio?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VisualElementConvertible>);
  os_log_type_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_212160;
  *(void *)(v30 + 56) = type metadata accessor for VisualElement();
  *(void *)(v30 + 64) = &protocol witness table for VisualElement;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v30 + 32));
  ImageElement.asVisualElement()();
  VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)();
  outlined consume of Data?(v37, v20);

  outlined consume of Data?(v37, v20);
  OUTLINED_FUNCTION_66();
  v32(v31);
  OUTLINED_FUNCTION_66();
  v34(v33);
  uint64_t v12 = type metadata accessor for VisualProperty();
  uint64_t v13 = v38;
  uint64_t v19 = 0;
LABEL_15:
  OUTLINED_FUNCTION_2_43(v13, v19, v11, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v35 = (uint64_t (*)(void))v0[1];
  return v35();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  swift_willThrow();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "Error retrieving image data %s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[21];
  uint64_t v8 = type metadata accessor for VisualProperty();
  OUTLINED_FUNCTION_2_43(v7, 1, v9, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned INImage?, @unowned NSError?) -> () with result type INImage?(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, v4);
  }
  else
  {
    id v7 = a2;
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, (uint64_t)a2);
  }
}

uint64_t ImageElement.convertToVisualProperty()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VisualElementConvertible>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_212160;
  *(void *)(v0 + 56) = type metadata accessor for VisualElement();
  *(void *)(v0 + 64) = &protocol witness table for VisualElement;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 32));
  ImageElement.asVisualElement()();
  return VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)();
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _ProtoIdiom();
  OUTLINED_FUNCTION_0_2();
  uint64_t v32 = v3;
  uint64_t v5 = __chkstk_darwin(v4);
  id v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v36 = (char *)&v27 - v8;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_ProtoIdiom>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = (unsigned char *)result;
  uint64_t v31 = *(void *)(a1 + 16);
  if (!v31)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  unint64_t v11 = 0;
  uint64_t v30 = a1 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
  uint64_t v34 = v32 + 16;
  uint64_t v35 = result + 56;
  uint64_t v12 = (void (**)(char *, uint64_t))(v32 + 8);
  uint64_t v28 = a1;
  long long v29 = (uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32);
  while (v11 < *(void *)(a1 + 16))
  {
    uint64_t v13 = *(void *)(v32 + 72);
    uint64_t v14 = *(void (**)(void))(v32 + 16);
    OUTLINED_FUNCTION_14_22();
    v14();
    lazy protocol witness table accessor for type _ProtoIdiom and conformance _ProtoIdiom(&lazy protocol witness table cache variable for type _ProtoIdiom and conformance _ProtoIdiom);
    uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)() & ~(-1 << v10[32]);
    OUTLINED_FUNCTION_8_34();
    if ((v18 & v17) != 0)
    {
      unint64_t v33 = v11;
      uint64_t v20 = ~v19;
      while (1)
      {
        OUTLINED_FUNCTION_14_22();
        v14();
        lazy protocol witness table accessor for type _ProtoIdiom and conformance _ProtoIdiom(&lazy protocol witness table cache variable for type _ProtoIdiom and conformance _ProtoIdiom);
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v22 = *v12;
        (*v12)(v7, v2);
        if (v21) {
          break;
        }
        uint64_t v15 = (v15 + 1) & v20;
        OUTLINED_FUNCTION_8_34();
        if ((v17 & v18) == 0)
        {
          a1 = v28;
          unint64_t v11 = v33;
          goto LABEL_10;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v36, v2);
      a1 = v28;
      unint64_t v11 = v33;
    }
    else
    {
LABEL_10:
      int v23 = v36;
      *(void *)(v35 + 8 * v16) = v18 | v17;
      uint64_t result = (*v29)(*((void *)v10 + 6) + v15 * v13, v23, v2);
      uint64_t v24 = *((void *)v10 + 2);
      BOOL v25 = __OFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (v25) {
        goto LABEL_18;
      }
      *((void *)v10 + 2) = v26;
    }
    if (++v11 == v31) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t outlined bridged method (pb) of @objc INImage._imageData.getter(void *a1)
{
  id v1 = [a1 _imageData];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc INImage._name.getter(void *a1)
{
  id v1 = [a1 _name];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t lazy protocol witness table accessor for type _ProtoIdiom and conformance _ProtoIdiom(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ProtoIdiom();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_43(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_storeEnumTagSinglePayload(a1, a2, 1, a4);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_3_37()
{
  return static ImageElement.pngData(_:darkModeData:imageStyle:aspectRatio:fixedWidth:fixedHeight:idioms:)();
}

uint64_t OUTLINED_FUNCTION_5_36()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_7_41()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_39()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_36()
{
  return v0;
}

id OUTLINED_FUNCTION_12_38()
{
  uint64_t v3 = *(const char **)(v1 + 4088);
  return [v0 v3];
}

uint64_t OUTLINED_FUNCTION_13_35()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::Properties_optional __swiftcall WorkflowRunnerCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of WorkflowRunnerCATsSimple.Properties.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v2 >= 3) {
    return (SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::Properties_optional)3;
  }
  else {
    return (SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::Properties_optional)v2;
  }
}

unint64_t WorkflowRunnerCATsSimple.Properties.rawValue.getter()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WorkflowRunnerCATsSimple.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WorkflowRunnerCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WorkflowRunnerCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowRunnerCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WorkflowRunnerCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::Properties_optional *a2@<X8>)
{
  result.int value = WorkflowRunnerCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WorkflowRunnerCATsSimple.Properties()
{
  OUTLINED_FUNCTION_49_1();
  unint64_t result = WorkflowRunnerCATsSimple.Properties.rawValue.getter();
  void *v0 = 0xD000000000000018;
  v0[1] = v2;
  return result;
}

uint64_t WorkflowRunnerCATsSimple.inputDate(device:inputType:message:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(void);
  uint64_t v12;
  void (*v13)(void);
  void *v14;
  unint64_t v15;
  uint64_t (*v16)(unint64_t);
  uint64_t v18;

  OUTLINED_FUNCTION_27_3();
  uint64_t v18 = v3;
  OUTLINED_FUNCTION_21_0();
  uint64_t v4 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_76_3();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_65_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_1_2(v6, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  OUTLINED_FUNCTION_1_36(v7);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v9);
  if (v10)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v11();
    swift_retain();
  }
  uint64_t v12 = OUTLINED_FUNCTION_2_44();
  outlined init with copy of AppDisplayInfo?(v12, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v10)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v13();
  }
  uint64_t v14 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 72) = v14;
  *uint64_t v14 = v0;
  v14[1] = WorkflowRunnerCATsSimple.inputDate(device:inputType:message:);
  uint64_t v15 = OUTLINED_FUNCTION_21_25();
  return v16(v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_70_3();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputDateDialogIds_optional __swiftcall WorkflowRunnerCATsSimple.InputDateDialogIds.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of WorkflowRunnerCATsSimple.InputDateDialogIds.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v2 >= 5) {
    return (SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputDateDialogIds_optional)5;
  }
  else {
    return (SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputDateDialogIds_optional)v2;
  }
}

uint64_t WorkflowRunnerCATsSimple.InputDateDialogIds.rawValue.getter(char a1)
{
  uint64_t result = 0x6D6F74737563;
  switch(a1)
  {
    case 1:
      uint64_t result = 1702125924;
      break;
    case 2:
      uint64_t result = 0x54646E4165746164;
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_28_18();
      break;
    case 4:
      uint64_t result = 1701669236;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WorkflowRunnerCATsSimple.InputDateDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WorkflowRunnerCATsSimple.InputDateDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WorkflowRunnerCATsSimple.InputDateDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowRunnerCATsSimple.InputDateDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputDateDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WorkflowRunnerCATsSimple.InputDateDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputDateDialogIds_optional *a2@<X8>)
{
  result.int value = WorkflowRunnerCATsSimple.InputDateDialogIds.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WorkflowRunnerCATsSimple.InputDateDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = WorkflowRunnerCATsSimple.InputDateDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t WorkflowRunnerCATsSimple.inputDateAsLabels(device:inputType:message:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(void);
  uint64_t v12;
  void (*v13)(void);
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(unint64_t);
  uint64_t v19;

  OUTLINED_FUNCTION_27_3();
  uint64_t v19 = v3;
  OUTLINED_FUNCTION_21_0();
  uint64_t v4 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_76_3();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_65_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_1_2(v6, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  OUTLINED_FUNCTION_1_36(v7);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v9);
  if (v10)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v11();
    swift_retain();
  }
  uint64_t v12 = OUTLINED_FUNCTION_2_44();
  outlined init with copy of AppDisplayInfo?(v12, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v10)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v13();
  }
  uint64_t v14 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 72) = v14;
  lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v14 = v15;
  v14[1] = WorkflowRunnerCATsSimple.inputDateAsLabels(device:inputType:message:);
  uint64_t v16 = OUTLINED_FUNCTION_26_22();
  return v17(v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_70_3();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputDateDialogIds and conformance WorkflowRunnerCATsSimple.InputDateDialogIds);
  }
  return result;
}

uint64_t WorkflowRunnerCATsSimple.inputText(device:inputType:message:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(void);
  uint64_t v12;
  void (*v13)(void);
  void *v14;
  unint64_t v15;
  uint64_t (*v16)(unint64_t);
  uint64_t v18;

  OUTLINED_FUNCTION_27_3();
  uint64_t v18 = v3;
  OUTLINED_FUNCTION_21_0();
  uint64_t v4 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_76_3();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_65_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_1_2(v6, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  OUTLINED_FUNCTION_1_36(v7);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v9);
  if (v10)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v11();
    swift_retain();
  }
  uint64_t v12 = OUTLINED_FUNCTION_2_44();
  outlined init with copy of AppDisplayInfo?(v12, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v10)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v13();
  }
  uint64_t v14 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 72) = v14;
  *uint64_t v14 = v0;
  v14[1] = WorkflowRunnerCATsSimple.inputDate(device:inputType:message:);
  uint64_t v15 = OUTLINED_FUNCTION_21_25();
  return v16(v15);
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputTextDialogIds_optional __swiftcall WorkflowRunnerCATsSimple.InputTextDialogIds.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of WorkflowRunnerCATsSimple.InputTextDialogIds.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v2 >= 4) {
    return (SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputTextDialogIds_optional)4;
  }
  else {
    return (SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputTextDialogIds_optional)v2;
  }
}

uint64_t WorkflowRunnerCATsSimple.InputTextDialogIds.rawValue.getter(char a1)
{
  uint64_t result = 0x6D6F74737563;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7265626D756ELL;
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_28_18();
      break;
    case 3:
      uint64_t result = 7107189;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputTextDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WorkflowRunnerCATsSimple.InputTextDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::InputTextDialogIds_optional *a2@<X8>)
{
  result.int value = WorkflowRunnerCATsSimple.InputTextDialogIds.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = WorkflowRunnerCATsSimple.InputTextDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t WorkflowRunnerCATsSimple.inputTextAsLabels(device:inputType:message:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(void);
  uint64_t v12;
  void (*v13)(void);
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(unint64_t);
  uint64_t v19;

  OUTLINED_FUNCTION_27_3();
  uint64_t v19 = v3;
  OUTLINED_FUNCTION_21_0();
  uint64_t v4 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_76_3();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_65_3(v5);
  uint64_t v7 = OUTLINED_FUNCTION_1_2(v6, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  OUTLINED_FUNCTION_1_36(v7);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v9);
  if (v10)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v11();
    swift_retain();
  }
  uint64_t v12 = OUTLINED_FUNCTION_2_44();
  outlined init with copy of AppDisplayInfo?(v12, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v10)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v13();
  }
  uint64_t v14 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 72) = v14;
  lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v14 = v15;
  v14[1] = WorkflowRunnerCATsSimple.inputDate(device:inputType:message:);
  uint64_t v16 = OUTLINED_FUNCTION_26_22();
  return v17(v16);
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.InputTextDialogIds and conformance WorkflowRunnerCATsSimple.InputTextDialogIds);
  }
  return result;
}

uint64_t WorkflowRunnerCATsSimple.showAlert(message:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v10)(unint64_t, unint64_t, __n128 *);
  uint64_t v11;

  uint64_t v2 = v1[4];
  uint64_t v3 = v1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)swift_allocObject();
  v1[5] = v4;
  OUTLINED_FUNCTION_16_26(v4, (__n128)xmmword_212160);
  outlined init with copy of AppDisplayInfo?(v3, v2, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v2, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v0 = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
  }
  else
  {
    v4[4].n128_u64[1] = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)v0);
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v7 + 32))();
  }
  uint64_t v8 = (void *)OUTLINED_FUNCTION_59();
  v1[6] = v8;
  *uint64_t v8 = v1;
  v8[1] = RunLinkActionCATsSimple.actionConfirmationHeader(customDialog:);
  return v10(0xD000000000000018, 0x8000000000224E10, v4);
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::ShowAlertDialogIds_optional __swiftcall WorkflowRunnerCATsSimple.ShowAlertDialogIds.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of WorkflowRunnerCATsSimple.ShowAlertDialogIds.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v2 == 1) {
    v4.int value = SiriLinkFlowPlugin_WorkflowRunnerCATsSimple_ShowAlertDialogIds_custom;
  }
  else {
    v4.int value = SiriLinkFlowPlugin_WorkflowRunnerCATsSimple_ShowAlertDialogIds_unknownDefault;
  }
  if (v2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t WorkflowRunnerCATsSimple.ShowAlertDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6D6F74737563;
  }
  else {
    return 0x61756E69746E6F63;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::ShowAlertDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::WorkflowRunnerCATsSimple::ShowAlertDialogIds_optional *a2@<X8>)
{
  result.int value = WorkflowRunnerCATsSimple.ShowAlertDialogIds.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = WorkflowRunnerCATsSimple.ShowAlertDialogIds.rawValue.getter(v1);
  uint64_t *v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t WorkflowRunnerCATsSimple.showAlertAsLabels(message:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v11)(unint64_t, unint64_t, __n128 *, ValueMetadata *);
  uint64_t v12;

  uint64_t v2 = v1[4];
  uint64_t v3 = v1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)swift_allocObject();
  v1[5] = v4;
  OUTLINED_FUNCTION_16_26(v4, (__n128)xmmword_212160);
  outlined init with copy of AppDisplayInfo?(v3, v2, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v2, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v0 = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
  }
  else
  {
    v4[4].n128_u64[1] = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)v0);
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v7 + 32))();
  }
  uint64_t v8 = (void *)OUTLINED_FUNCTION_59();
  v1[6] = v8;
  lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v8 = v9;
  v8[1] = RunLinkActionCATsSimple.continueInApp(customDialog:);
  return v11(0xD000000000000018, 0x8000000000224E10, v4, &type metadata for WorkflowRunnerCATsSimple.ShowAlertDialogIds);
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.ShowAlertDialogIds and conformance WorkflowRunnerCATsSimple.ShowAlertDialogIds);
  }
  return result;
}

uint64_t WorkflowRunnerCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return WorkflowRunnerCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t WorkflowRunnerCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_16(v10);
  __chkstk_darwin(v11);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t WorkflowRunnerCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_56();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v1;
}

uint64_t WorkflowRunnerCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_56();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type WorkflowRunnerCATsSimple.Properties and conformance WorkflowRunnerCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.Properties and conformance WorkflowRunnerCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.Properties and conformance WorkflowRunnerCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowRunnerCATsSimple.Properties and conformance WorkflowRunnerCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for WorkflowRunnerCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for WorkflowRunnerCATsSimple;
  if (!type metadata singleton initialization cache for WorkflowRunnerCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for WorkflowRunnerCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for WorkflowRunnerCATsSimple()
{
  return type metadata accessor for WorkflowRunnerCATsSimple();
}

unsigned char *storeEnumTagSinglePayload for WorkflowRunnerCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A1428);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for WorkflowRunnerCATsSimple.Properties()
{
}

unsigned char *storeEnumTagSinglePayload for WorkflowRunnerCATsSimple.InputDateDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A1528);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for WorkflowRunnerCATsSimple.InputDateDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for WorkflowRunnerCATsSimple.InputTextDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A1628);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for WorkflowRunnerCATsSimple.InputTextDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for WorkflowRunnerCATsSimple.ShowAlertDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A1728);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for WorkflowRunnerCATsSimple.ShowAlertDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_1_36(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x7079547475706E69;
  v2[11] = 0xE900000000000065;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_44()
{
  uint64_t result = *(void *)(v0 + 32);
  *(void *)(v1 + 128) = 0x6567617373656DLL;
  *(void *)(v1 + 136) = 0xE700000000000000;
  return result;
}

__n128 *OUTLINED_FUNCTION_16_26(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6567617373656DLL;
  result[2].n128_u64[1] = 0xE700000000000000;
  return result;
}

unint64_t OUTLINED_FUNCTION_21_25()
{
  return 0xD000000000000018;
}

unint64_t OUTLINED_FUNCTION_26_22()
{
  return 0xD000000000000018;
}

uint64_t OUTLINED_FUNCTION_28_18()
{
  return 1954047348;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50103_s18SiriLinkFlowPlugin13TfIdfComputerC8tokenize33_8A7812BA4865DA2BE6D65DB66CD3F769LLySaySSGSSFZSSSnySS5D7VGXEfU_SSTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = a1 + 40;
    do
    {
      String.subscript.getter();
      uint64_t v4 = static String._fromSubstring(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      if (v7 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v3 += 16;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v4;
      v8[5] = v6;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS3key_Sd5valuetG_Sds5NeverOTg50130_s18SiriLinkFlowPlugin13TfIdfComputerC9vectorize5inputSaySdGSS_tFSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAG_q3AHtQ10Tf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v5 = *v4;
      unint64_t v7 = result;
      unint64_t v6 = result[2];
      if (v6 >= result[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t result = v7;
      }
      result[2] = v6 + 1;
      result[v6 + 4] = v5;
      v4 += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

SiriLinkFlowPlugin::Document __swiftcall Document.init(body:)(Swift::String body)
{
  Swift::String v1 = String.lowercased()();
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v1._countAndFlagsBits;
  object = v1._object;
  result.body._object = object;
  result.body._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t TfIdfComputer.__allocating_init(documents:)()
{
  uint64_t v0 = swift_allocObject();
  TfIdfComputer.init(documents:)();
  return v0;
}

uint64_t Array<A>.isNullVector.getter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 1;
  }
  if (*(double *)(result + 32) != 0.0) {
    return 0;
  }
  if (v1 == 1) {
    return 1;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    double v5 = *(double *)(result + 8 * i);
    BOOL v2 = v5 == 0.0;
    if (v5 != 0.0 || v4 == v1) {
      return v2;
    }
  }
  __break(1u);
  return result;
}

double Array<A>.magnitude.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    BOOL v2 = (double *)(a1 + 32);
    double v3 = 0.0;
    do
    {
      double v4 = *v2++;
      double v3 = v3 + v4 * v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    double v3 = 0.0;
  }
  return sqrt(v3);
}

uint64_t Array<A>.dot(other:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    if (v2 > *(void *)(result + 16))
    {
      __break(1u);
    }
    else
    {
      double v3 = (double *)(a2 + 32);
      double v4 = (double *)(result + 32);
      double v5 = 0.0;
      do
      {
        double v6 = *v3++;
        double v7 = v6;
        double v8 = *v4++;
        double v5 = v5 + v7 * v8;
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t TfIdfComputer.documents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TfIdfComputer.idf.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TfIdfComputer.init(documents:)()
{
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_17_15();
  *(void *)(v0 + 16) = v2;
  uint64_t v3 = swift_bridgeObjectRetain();
  *(void *)(v0 + 24) = static TfIdfComputer.idf(items:)(v3);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain();
  double v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    double v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)double v7 = 134217984;
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v5, v6, "[TfIdf] computing idf for %ld documents", v7, 0xCu);
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v1;
}

uint64_t static TfIdfComputer.idf(items:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v84 = v2;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    os_log_type_t v6 = _swiftEmptyArrayStorage;
    do
    {
      double v7 = (uint64_t *)(v4 + 16 * v5);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      swift_bridgeObjectRetain();
      uint64_t v10 = static TfIdfComputer.tokenize(_:)(v8, v9);
      swift_bridgeObjectRelease();
      uint64_t v11 = Set.init(minimumCapacity:)();
      uint64_t v87 = v11;
      uint64_t v12 = v10[2];
      if (v12)
      {
        uint64_t v13 = v10 + 5;
        do
        {
          Swift::Int v14 = *(v13 - 1);
          Swift::Int v15 = *v13;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)((Swift::Int *)&v86, v14, v15);
          swift_bridgeObjectRelease();
          v13 += 2;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
        uint64_t v16 = v87;
      }
      else
      {
        uint64_t v16 = v11;
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, (uint64_t)v6);
        os_log_type_t v6 = v19;
      }
      unint64_t v18 = v6[2];
      unint64_t v17 = v6[3];
      if (v18 >= v17 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, (uint64_t)v6);
        os_log_type_t v6 = v20;
      }
      ++v5;
      _OWORD v6[2] = v18 + 1;
      v6[v18 + 4] = v16;
    }
    while (v5 != v84);
    swift_bridgeObjectRelease();
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    os_log_type_t v6 = _swiftEmptyArrayStorage;
  }
  uint64_t v86 = _swiftEmptyArrayStorage;
  uint64_t v21 = v6[2];
  if (v21)
  {
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v21; ++i)
    {
      uint64_t v23 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v23);
    }
    swift_bridgeObjectRelease_n();
    uint64_t v3 = v86;
  }
  uint64_t v24 = specialized Set.init<A>(_:)((uint64_t)v3);
  int64_t v25 = 0;
  double v26 = (double)v84;
  uint64_t v77 = v24 + 56;
  uint64_t v27 = 1 << *(unsigned char *)(v24 + 32);
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  else {
    uint64_t v28 = -1;
  }
  unint64_t v29 = v28 & *(void *)(v24 + 56);
  int64_t v78 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v79 = v24;
  uint64_t v30 = v6 + 4;
  uint64_t v31 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    Swift::Int v82 = (Swift::Int)v31;
    if (v29)
    {
      uint64_t v80 = (v29 - 1) & v29;
      int64_t v81 = v25;
      unint64_t v32 = __clz(__rbit64(v29)) | (v25 << 6);
    }
    else
    {
      int64_t v33 = v25 + 1;
      if (__OFADD__(v25, 1)) {
        goto LABEL_78;
      }
      if (v33 >= v78)
      {
LABEL_74:
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v31;
      }
      unint64_t v34 = *(void *)(v77 + 8 * v33);
      int64_t v35 = v25 + 1;
      if (!v34)
      {
        int64_t v35 = v25 + 2;
        if (v25 + 2 >= v78) {
          goto LABEL_74;
        }
        unint64_t v34 = *(void *)(v77 + 8 * v35);
        if (!v34)
        {
          int64_t v35 = v25 + 3;
          if (v25 + 3 >= v78) {
            goto LABEL_74;
          }
          unint64_t v34 = *(void *)(v77 + 8 * v35);
          if (!v34)
          {
            uint64_t v36 = v25 + 4;
            if (v25 + 4 >= v78) {
              goto LABEL_74;
            }
            unint64_t v34 = *(void *)(v77 + 8 * v36);
            if (!v34)
            {
              while (1)
              {
                int64_t v35 = v36 + 1;
                if (__OFADD__(v36, 1)) {
                  goto LABEL_79;
                }
                if (v35 >= v78) {
                  goto LABEL_74;
                }
                unint64_t v34 = *(void *)(v77 + 8 * v35);
                ++v36;
                if (v34) {
                  goto LABEL_38;
                }
              }
            }
            int64_t v35 = v25 + 4;
          }
        }
      }
LABEL_38:
      uint64_t v80 = (v34 - 1) & v34;
      int64_t v81 = v35;
      unint64_t v32 = __clz(__rbit64(v34)) + (v35 << 6);
    }
    uint64_t v37 = (uint64_t *)(*(void *)(v79 + 48) + 16 * v32);
    uint64_t v38 = v37[1];
    uint64_t v85 = *v37;
    uint64_t v39 = v6[2];
    if (v39)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v40 = 0;
      double v41 = 0.5;
      uint64_t v83 = v39;
      while (1)
      {
        if (v40 >= v6[2])
        {
          __break(1u);
          goto LABEL_76;
        }
        uint64_t v42 = v30[v40];
        if (*(void *)(v42 + 16)) {
          break;
        }
LABEL_52:
        if (++v40 == v39)
        {
          swift_bridgeObjectRelease();
          goto LABEL_65;
        }
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v43 = Hasher._finalize()();
      uint64_t v44 = -1 << *(unsigned char *)(v42 + 32);
      unint64_t v45 = v43 & ~v44;
      uint64_t v46 = v42 + 56;
      if (((*(void *)(v42 + 56 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_52;
      }
      unint64_t v47 = v30;
      uint64_t v48 = v6;
      uint64_t v49 = *(void *)(v42 + 48);
      uint64_t v50 = (void *)(v49 + 16 * v45);
      BOOL v51 = *v50 == v85 && v50[1] == v38;
      if (!v51 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v52 = ~v44;
        unint64_t v53 = (v45 + 1) & v52;
        if (((*(void *)(v46 + ((v53 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
        {
LABEL_63:
          swift_bridgeObjectRelease();
          os_log_type_t v6 = v48;
          goto LABEL_50;
        }
        uint64_t v54 = (void *)(v49 + 16 * v53);
        uint64_t v55 = v54[1];
        for (BOOL j = *v54 == v85; ; BOOL j = *v58 == v85)
        {
          BOOL v57 = j && v55 == v38;
          if (v57 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          unint64_t v53 = (v53 + 1) & v52;
          if (((*(void *)(v46 + ((v53 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v53) & 1) == 0) {
            goto LABEL_63;
          }
          uint64_t v58 = (void *)(v49 + 16 * v53);
          uint64_t v55 = v58[1];
        }
      }
      swift_bridgeObjectRelease();
      os_log_type_t v6 = v48;
      double v41 = v41 + 1.0;
LABEL_50:
      uint64_t v30 = v47;
      uint64_t v39 = v83;
      goto LABEL_52;
    }
    swift_bridgeObjectRetain();
    double v41 = 0.5;
LABEL_65:
    long double v59 = log10(v26 / v41);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v86 = (void *)v82;
    unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v38);
    uint64_t v63 = *(void *)(v82 + 16);
    BOOL v64 = (v62 & 1) == 0;
    Swift::Int v65 = v63 + v64;
    if (__OFADD__(v63, v64)) {
      break;
    }
    unint64_t v66 = v61;
    char v67 = v62;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
    Swift::Bool v68 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v65);
    uint64_t v69 = v85;
    if (v68)
    {
      unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v38);
      if ((v67 & 1) != (v71 & 1)) {
        goto LABEL_80;
      }
      unint64_t v66 = v70;
      uint64_t v69 = v85;
    }
    uint64_t v31 = v86;
    if (v67)
    {
      *(long double *)(v86[7] + 8 * v66) = v59;
    }
    else
    {
      v86[(v66 >> 6) + 8] |= 1 << v66;
      uint64_t v72 = (uint64_t *)(v31[6] + 16 * v66);
      *uint64_t v72 = v69;
      v72[1] = v38;
      *(long double *)(v31[7] + 8 * v66) = v59;
      uint64_t v73 = v31[2];
      BOOL v74 = __OFADD__(v73, 1);
      uint64_t v75 = v73 + 1;
      if (v74) {
        goto LABEL_77;
      }
      v31[2] = v75;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v29 = v80;
    int64_t v25 = v81;
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t TfIdfComputer.vectorize(input:)(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v78 = v6 + 64;
  OUTLINED_FUNCTION_2_45();
  unint64_t v9 = v8 & v7;
  int64_t v81 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  uint64_t v12 = _swiftEmptyDictionarySingleton;
  uint64_t v80 = v6;
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v11 << 6))
  {
    unint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * i);
    uint64_t v19 = *v18;
    unint64_t v2 = v18[1];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v83 = v12;
    specialized __RawDictionaryStorage.find<A>(_:)(v19, v2);
    OUTLINED_FUNCTION_6_39();
    if (v23)
    {
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    unint64_t v24 = v21;
    unint64_t v5 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v4))
    {
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v2);
      if ((v5 & 1) != (v26 & 1)) {
        goto LABEL_82;
      }
      unint64_t v24 = v25;
    }
    uint64_t v12 = v83;
    if (v5)
    {
      *(void *)(v83[7] + 8 * v24) = 0;
      uint64_t v6 = v80;
    }
    else
    {
      OUTLINED_FUNCTION_1_37();
      uint64_t *v27 = v19;
      v27[1] = v2;
      *(void *)(v12[7] + 8 * v24) = 0;
      uint64_t v28 = v12[2];
      BOOL v23 = __OFADD__(v28, 1);
      uint64_t v29 = v28 + 1;
      uint64_t v6 = v80;
      if (v23) {
        goto LABEL_74;
      }
      void v12[2] = v29;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_75;
    }
    if (v15 >= v81) {
      break;
    }
    unint64_t v16 = *(void *)(v78 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v81) {
        break;
      }
      unint64_t v16 = *(void *)(v78 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v81) {
          break;
        }
        unint64_t v16 = *(void *)(v78 + 8 * v11);
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v17 >= v81) {
            break;
          }
          unint64_t v16 = *(void *)(v78 + 8 * v17);
          if (v16)
          {
            int64_t v11 = v17;
            goto LABEL_16;
          }
          while (1)
          {
            int64_t v11 = v17 + 1;
            if (__OFADD__(v17, 1)) {
              break;
            }
            if (v11 >= v81) {
              goto LABEL_27;
            }
            unint64_t v16 = *(void *)(v78 + 8 * v11);
            ++v17;
            if (v16) {
              goto LABEL_16;
            }
          }
LABEL_77:
          __break(1u);
          goto LABEL_78;
        }
      }
    }
LABEL_16:
    unint64_t v9 = (v16 - 1) & v16;
  }
LABEL_27:
  swift_release();
  uint64_t v30 = TfIdfComputer.tf(item:)();
  int64_t v31 = 0;
  uint64_t v77 = v30 + 8;
  Swift::Int v82 = v30;
  OUTLINED_FUNCTION_2_45();
  unint64_t v2 = v33 & v32;
  int64_t v79 = (unint64_t)(v34 + 63) >> 6;
  unint64_t v5 = (unint64_t)&unk_2A4000;
  while (2)
  {
    uint64_t v76 = v12;
LABEL_29:
    if (v2)
    {
      unint64_t v35 = __clz(__rbit64(v2));
      v2 &= v2 - 1;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_45;
    }
    int64_t v37 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_76;
    }
    if (v37 >= v79)
    {
LABEL_68:
      swift_release();
      swift_bridgeObjectRetain_n();
      BOOL v64 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v12);
      swift_bridgeObjectRelease();
      uint64_t v83 = v64;
      specialized MutableCollection<>.sort(by:)((uint64_t *)&v83);
      swift_bridgeObjectRelease();
      unint64_t v2 = (unint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS3key_Sd5valuetG_Sds5NeverOTg50130_s18SiriLinkFlowPlugin13TfIdfComputerC9vectorize5inputSaySdGSS_tFSdSS3key_Sd5valuet_tcfu1_33_02b57a39088027ce0a04a12694145150SSAG_q3AHtQ10Tf3nnnpk_nTf1cn_n((uint64_t)v83);
      swift_release();
      uint64_t v65 = *(void *)(v5 + 728);
      unint64_t v5 = a2;
      if (v65 != -1) {
        goto LABEL_79;
      }
      goto LABEL_69;
    }
    unint64_t v38 = v77[v37];
    ++v31;
    if (v38) {
      goto LABEL_44;
    }
    if (v37 + 1 >= v79) {
      goto LABEL_68;
    }
    int64_t v31 = v37 + 1;
    unint64_t v38 = v77[v37 + 1];
    if (v38) {
      goto LABEL_44;
    }
    if (v37 + 2 >= v79) {
      goto LABEL_68;
    }
    int64_t v31 = v37 + 2;
    unint64_t v38 = v77[v37 + 2];
    if (v38)
    {
LABEL_44:
      unint64_t v2 = (v38 - 1) & v38;
      unint64_t v36 = __clz(__rbit64(v38)) + (v31 << 6);
LABEL_45:
      unint64_t v40 = (uint64_t *)(v82[6] + 16 * v36);
      uint64_t v42 = *v40;
      unint64_t v41 = v40[1];
      if (v12[2])
      {
        double v43 = *(double *)(v82[7] + 8 * v36);
        swift_bridgeObjectRetain_n();
        specialized __RawDictionaryStorage.find<A>(_:)(v42, v41);
        char v45 = v44;
        swift_bridgeObjectRelease();
        if (v45)
        {
          if (*(void *)(v80 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v41);
            double v51 = 0.0;
            if (v52) {
              double v51 = *(double *)(*(void *)(v80 + 56) + 8 * v50);
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            double v51 = 0.0;
          }
          char v53 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v83 = v12;
          specialized __RawDictionaryStorage.find<A>(_:)(v42, v41);
          OUTLINED_FUNCTION_6_39();
          if (v23)
          {
            __break(1u);
          }
          else
          {
            unint64_t v56 = v54;
            char v57 = v55;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
            if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v53, v42))
            {
              unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v41);
              if ((v57 & 1) != (v59 & 1)) {
                goto LABEL_82;
              }
              unint64_t v56 = v58;
            }
            uint64_t v12 = v83;
            if (v57)
            {
              *(double *)(v83[7] + 8 * v56) = v43 * v51;
LABEL_67:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v5 = 2768896;
              continue;
            }
            OUTLINED_FUNCTION_1_37();
            *uint64_t v60 = v42;
            v60[1] = v41;
            *(void *)(v12[7] + 8 * v56) = v61;
            uint64_t v62 = v12[2];
            BOOL v23 = __OFADD__(v62, 1);
            uint64_t v63 = v62 + 1;
            if (!v23)
            {
              void v12[2] = v63;
              swift_bridgeObjectRetain();
              goto LABEL_67;
            }
          }
          __break(1u);
LABEL_82:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          uint64_t result = swift_release();
          __break(1u);
          return result;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      if (*(void *)(v5 + 728) != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain();
      unint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        uint64_t v83 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v49 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v41, (uint64_t *)&v83);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v47, v48, "[TfIdf] skipping token not in training data %s", (uint8_t *)v49, 0xCu);
        swift_arrayDestroy();
        uint64_t v12 = v76;
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      goto LABEL_29;
    }
    break;
  }
  int64_t v39 = v37 + 3;
  if (v39 >= v79) {
    goto LABEL_68;
  }
  unint64_t v38 = v77[v39];
  if (v38)
  {
    int64_t v31 = v39;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v31 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v31 >= v79) {
      goto LABEL_68;
    }
    unint64_t v38 = v77[v31];
    ++v39;
    if (v38) {
      goto LABEL_44;
    }
  }
LABEL_78:
  __break(1u);
LABEL_79:
  swift_once();
LABEL_69:
  uint64_t v66 = type metadata accessor for Logger();
  __swift_project_value_buffer(v66, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v69 = swift_slowAlloc();
    uint64_t v83 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v5, (uint64_t *)&v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v69 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v70 = Array.description.getter();
    unint64_t v72 = v71;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, (uint64_t *)&v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v67, v68, "[TfIdf] vectorizing input: %s vector: %s", (uint8_t *)v69, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  return v2;
}

void *static TfIdfComputer.tokenize(_:)(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)NLTokenizer) initWithUnit:0];
  [v4 setLanguage:NLLanguageEnglish];
  outlined bridged method (mbgnn) of @objc NLTokenizer.string.setter(a1, a2, v4);
  uint64_t v5 = NLTokenizer.tokens(for:)();
  swift_bridgeObjectRetain();
  uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50103_s18SiriLinkFlowPlugin13TfIdfComputerC8tokenize33_8A7812BA4865DA2BE6D65DB66CD3F769LLySaySSGSSFZSSSnySS5D7VGXEfU_SSTf1cn_n(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = v6[2];
  if (v7)
  {
    uint64_t v8 = v6 + 5;
    do
    {
      uint64_t v10 = *(v8 - 1);
      uint64_t v9 = *v8;
      swift_bridgeObjectRetain();
      if (String.count.getter() < 2)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        unint64_t v11 = _swiftEmptyArrayStorage[2];
        if (v11 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        _swiftEmptyArrayStorage[2] = v11 + 1;
        uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
        v12[4] = v10;
        v12[5] = v9;
      }
      v8 += 2;
      --v7;
    }
    while (v7);
  }

  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    id v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

void *TfIdfComputer.tf(item:)()
{
  OUTLINED_FUNCTION_17_15();
  uint64_t v2 = static TfIdfComputer.tokenize(_:)(v0, v1);
  uint64_t v3 = v2[2];
  if (v3)
  {
    swift_bridgeObjectRetain();
    id v4 = v2 + 5;
    while (1)
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
      uint64_t v10 = _swiftEmptyDictionarySingleton[2];
      BOOL v11 = (v9 & 1) == 0;
      Swift::Int v12 = v10 + v11;
      if (__OFADD__(v10, v11)) {
        break;
      }
      unint64_t v13 = v8;
      char v14 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Double>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12))
      {
        unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
        if ((v14 & 1) != (v16 & 1)) {
          goto LABEL_15;
        }
        unint64_t v13 = v15;
      }
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
      {
        _swiftEmptyDictionarySingleton[(v13 >> 6) + 8] |= 1 << v13;
        int64_t v17 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v13);
        *int64_t v17 = v6;
        v17[1] = v5;
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v13) = 0;
        uint64_t v18 = _swiftEmptyDictionarySingleton[2];
        BOOL v19 = __OFADD__(v18, 1);
        uint64_t v20 = v18 + 1;
        if (v19) {
          goto LABEL_14;
        }
        _swiftEmptyDictionarySingleton[2] = v20;
        swift_bridgeObjectRetain();
      }
      v4 += 2;
      *(double *)(_swiftEmptyDictionarySingleton[7] + 8 * v13) = *(double *)(_swiftEmptyDictionarySingleton[7] + 8 * v13)
                                                               + 1.0;
      swift_bridgeObjectRelease_n();
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t TfIdfComputer.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TfIdfComputer.__deallocating_deinit()
{
  TfIdfComputer.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_4_39();
    uint64_t result = OUTLINED_FUNCTION_3_38();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for INIntentSlotDescription();
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8)) = a1;
  }
  else
  {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  return result;
}

void *specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (key: Int, value: String));
}

void *specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_4_39();
    uint64_t result = (void *)OUTLINED_FUNCTION_3_38();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  Swift::Int v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t type metadata accessor for TfIdfComputer()
{
  return self;
}

ValueMetadata *type metadata accessor for Document()
{
  return &type metadata for Document;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    Swift::Int v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *uint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void outlined bridged method (mbgnn) of @objc NLTokenizer.string.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setString:v4];
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

unint64_t type metadata accessor for INIntentSlotDescription()
{
  unint64_t result = lazy cache variable for type metadata for INIntentSlotDescription;
  if (!lazy cache variable for type metadata for INIntentSlotDescription)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntentSlotDescription);
  }
  return result;
}

void OUTLINED_FUNCTION_1_37()
{
  *(void *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

uint64_t OUTLINED_FUNCTION_3_38()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t SiriLinkFlowFeatureFlags.isEnabled.getter(unsigned __int8 a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static SiriLinkFlowFeatureFlags.forceEnabled;
  if (*(void *)(static SiriLinkFlowFeatureFlags.forceEnabled + 16)
    && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    char v5 = *(unsigned char *)(*(void *)(v2 + 56) + v3);
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    unint64_t v8 = &type metadata for SiriLinkFlowFeatureFlags;
    unint64_t v9 = lazy protocol witness table accessor for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags();
    v7[0] = a1;
    char v5 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  }
  return v5 & 1;
}

uint64_t *SiriLinkFlowFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static SiriLinkFlowFeatureFlags.forceEnabled;
}

uint64_t static SiriLinkFlowFeatureFlags.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static SiriLinkFlowFeatureFlags.forceEnabled.setter(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  static SiriLinkFlowFeatureFlags.forceEnabled = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static SiriLinkFlowFeatureFlags.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static LocaleUtils.intentBundleCache.modify;
}

const char *SiriLinkFlowFeatureFlags.domain.getter()
{
  return "SiriLinkFlow";
}

const char *SiriLinkFlowFeatureFlags.feature.getter(char a1)
{
  unint64_t result = "nlv4Followup";
  switch(a1)
  {
    case 1:
      unint64_t result = "autoshortcuts";
      break;
    case 2:
      unint64_t result = "rfMigration";
      break;
    case 3:
      unint64_t result = "sendMailEncore";
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, unsigned __int8 a4)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v6 = specialized Dictionary.subscript.getter(a4, static SiriLinkFlowFeatureFlags.forceEnabled);
  swift_endAccess();
  swift_beginAccess();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  uint64_t v7 = swift_endAccess();
  a2(v7);
  return SiriLinkFlowFeatureFlags.updateForceEnabledFlags(oldFF:)(v6, a4);
}

uint64_t SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 105) = a5;
  *(void *)(v5 + 72) = a3;
  *(void *)(v5 + 80) = a4;
  *(unsigned char *)(v5 + 104) = a2;
  *(void *)(v5 + 64) = a1;
  return _swift_task_switch(SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:), 0, 0);
}

uint64_t SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:)()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  unint64_t v1 = *(int **)(v0 + 72);
  unsigned __int8 v2 = *(unsigned char *)(v0 + 105);
  swift_beginAccess();
  *(unsigned char *)(v0 + 106) = specialized Dictionary.subscript.getter(v2, static SiriLinkFlowFeatureFlags.forceEnabled);
  swift_endAccess();
  swift_beginAccess();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  swift_endAccess();
  char v6 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v3;
  *unint64_t v3 = v0;
  v3[1] = SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:);
  uint64_t v4 = *(void *)(v0 + 64);
  return v6(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    unsigned __int8 v2 = SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:);
  }
  else {
    unsigned __int8 v2 = SiriLinkFlowFeatureFlags.withForcedEnabled<A>(_:block:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  SiriLinkFlowFeatureFlags.updateForceEnabledFlags(oldFF:)(*(unsigned char *)(v0 + 106), *(unsigned char *)(v0 + 105));
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  SiriLinkFlowFeatureFlags.updateForceEnabledFlags(oldFF:)(*(unsigned char *)(v0 + 106), *(unsigned char *)(v0 + 105));
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SiriLinkFlowFeatureFlags.updateForceEnabledFlags(oldFF:)(char a1, unsigned __int8 a2)
{
  if (a1 == 2)
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once();
    }
    swift_beginAccess();
    specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v3)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = static SiriLinkFlowFeatureFlags.forceEnabled;
      uint64_t v5 = static SiriLinkFlowFeatureFlags.forceEnabled;
      static SiriLinkFlowFeatureFlags.forceEnabled = 0x8000000000000000;
      Swift::Int v6 = *(void *)(v5 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SiriLinkFlowFeatureFlags, Bool>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v6);
      lazy protocol witness table accessor for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags();
      _NativeDictionary._delete(at:)();
      static SiriLinkFlowFeatureFlags.forceEnabled = v8;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once();
    }
    swift_beginAccess();
    specialized Dictionary._Variant.setValue(_:forKey:)();
  }
  return swift_endAccess();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriLinkFlowFeatureFlags()
{
  return SiriLinkFlowFeatureFlags.feature.getter(*v0);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for RFFeatureFlags.ResponseFramework();
  lazy protocol witness table accessor for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework(&lazy protocol witness table cache variable for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t lazy protocol witness table accessor for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkFlowFeatureFlags and conformance SiriLinkFlowFeatureFlags);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      outlined destroy of AnyHashable((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = a1;
  unint64_t v4 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    unint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    BOOL v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      lazy protocol witness table accessor for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework(&lazy protocol witness table cache variable for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework);
      unint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  uint64_t v3 = v2 + 64;
  unint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    char v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    BOOL v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          unint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  unint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SiriLinkFlowFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A5C6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriLinkFlowFeatureFlags()
{
  return &type metadata for SiriLinkFlowFeatureFlags;
}

void LNAction.asSELFAction()()
{
  id v1 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKAction) init];
  if (!v1) {
    return;
  }
  id v2 = [v0 identifier];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v3, v5, v1, (SEL *)&selRef_setActionIdentifierName_);
  id v6 = [v0 presentationStyle];
  if ((unint64_t)v6 < 3) {
    uint64_t v7 = (v6 + 1);
  }
  else {
    uint64_t v7 = 0;
  }
  [v1 setPresentationStyle:v7];
  id v8 = [v0 parameters];
  type metadata accessor for LNProperty();
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_7;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v10 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8));
  if (!v10) {
    goto LABEL_22;
  }
LABEL_7:
  if (v10 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = &selRef_setCentered_;
    while (1)
    {
      if ((v9 & 0xC000000000000001) != 0) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v9 + 8 * v11 + 32);
      }
      BOOL v14 = v13;
      id v15 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKActionParameter) init];
      if (!v15) {
        goto LABEL_21;
      }
      int64_t v16 = v15;
      id v17 = [v14 identifier];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v12;
      uint64_t v21 = v20;

      uint64_t v22 = v21;
      uint64_t v12 = v19;
      outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v18, v22, v16, (SEL *)&selRef_setName_);
      id v23 = [v14 v19[59]];
      if (v23)
      {
        char v24 = v23;
        id v25 = [v23 valueType];

        if (!v25) {
          goto LABEL_17;
        }
        self;
        id v23 = (id)swift_dynamicCastObjCClass();
        if (!v23) {
          break;
        }
      }
LABEL_18:
      BOOL v26 = v23 != 0;

      [v16 setIsArray:v26];
      id v27 = [v14 v19[59]];
      if (v27)
      {
        uint64_t v28 = v27;
        id v29 = [v27 valueType];

        uint64_t v30 = LNValueType.asSELFType()();
        [v16 setType:v30];
      }
      [v1 addParameters:v16];

LABEL_21:
      ++v11;

      if (v10 == v11) {
        goto LABEL_22;
      }
    }

LABEL_17:
    id v23 = 0;
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t LNPrimitiveValueTypeIdentifier.asSELFType()(unint64_t a1)
{
  if (a1 > 0xC) {
    return 0;
  }
  else {
    return dword_21D8AC[a1];
  }
}

void *LNValueType.asSELFType()()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    id v2 = (void *)v1;
    id v3 = v0;
    id v4 = [v2 memberValueType];
    uint64_t v5 = LNValueType.asSELFType()();

    return (void *)v5;
  }
  else
  {
    self;
    unint64_t result = (void *)swift_dynamicCastObjCClass();
    if (result)
    {
      unint64_t v7 = (unint64_t)[result typeIdentifier];
      if (v7 >= 0xD) {
        return 0;
      }
      else {
        return (void *)dword_21D8AC[v7];
      }
    }
  }
  return result;
}

unint64_t type metadata accessor for LNProperty()
{
  unint64_t result = lazy cache variable for type metadata for LNProperty;
  if (!lazy cache variable for type metadata for LNProperty)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNProperty);
  }
  return result;
}

void outlined bridged method (mbnn) of @objc FLOWLINKSchemaFLOWLINKActionParameter.name.setter(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t static WFDialogState.isAppFirstRun(appId:)(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  id v4 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  id v5 = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000021, 0x800000000022A760);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  id v6 = v5;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 stringArrayForKey:v7];

  if (v8)
  {
    unint64_t v9 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v9 = _swiftEmptyArrayStorage;
  }
  if (specialized Sequence<>.contains(_:)(a1, a2, v9))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      BOOL v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)BOOL v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v25);
      OUTLINED_FUNCTION_2_46();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v12, v13, "#WFDialogState this is not the first time that %s shows a dialog", v14, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  int64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v25);
    OUTLINED_FUNCTION_2_46();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v16, v17, "#WFDialogState app %s hasn't shown any dialogs before, showing app attribution", v18, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v9 = v23;
  }
  unint64_t v19 = v9[2];
  if (v19 >= v9[3] >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v9 = v24;
  }
  v9[2] = v19 + 1;
  uint64_t v20 = &v9[2 * v19];
  uint64_t v20[4] = a1;
  v20[5] = a2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v22 = String._bridgeToObjectiveC()();
  [v6 setObject:isa forKey:v22];

  return 1;
}

uint64_t *WFDialogState.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static WFDialogState.shared;
}

uint64_t one-time initialization function for shared()
{
  type metadata accessor for WFDialogState();
  uint64_t v0 = swift_allocObject();
  uint64_t result = OUTLINED_FUNCTION_1_38(v0);
  static WFDialogState.shared = result;
  return result;
}

uint64_t WFDialogState.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  return OUTLINED_FUNCTION_1_38(v0);
}

uint64_t static WFDialogState.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t WFDialogState.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  *(_WORD *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 34) = 0;
  return result;
}

Swift::Void __swiftcall WFDialogState.prepareForShortcut(name:)(Swift::String name)
{
  if (*(void *)(v1 + 16) != name._countAndFlagsBits || *(void **)(v1 + 24) != name._object)
  {
    object = name._object;
    uint64_t countAndFlagsBits = name._countAndFlagsBits;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      *(void *)(v1 + 16) = countAndFlagsBits;
      *(void *)(v1 + 24) = object;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_WORD *)(v1 + 32) = 0;
      *(unsigned char *)(v1 + 34) = 0;
    }
  }
}

Swift::Void __swiftcall WFDialogState.stepIsShown(isAudioStartAction:)(Swift::Bool isAudioStartAction)
{
  *(_WORD *)(v1 + 32) = 1;
  *(unsigned char *)(v1 + 34) = isAudioStartAction;
}

Swift::Void __swiftcall WFDialogState.stepIsNotShown()()
{
  *(unsigned char *)(v0 + 32) = 0;
}

Swift::Bool __swiftcall WFDialogState.isLastStepShown()()
{
  return *(unsigned char *)(v0 + 32);
}

Swift::Void __swiftcall WFDialogState.clearScreen()()
{
  *(unsigned char *)(v0 + 33) = 1;
}

Swift::Bool __swiftcall WFDialogState.screenIsClear()()
{
  return *(unsigned char *)(v0 + 33);
}

Swift::Void __swiftcall WFDialogState.stepIsAudioStartAction()()
{
  *(unsigned char *)(v0 + 34) = 1;
}

Swift::Bool __swiftcall WFDialogState.lastStepIsAudioStartAction()()
{
  return *(unsigned char *)(v0 + 34);
}

uint64_t WFDialogState.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t WFDialogState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

id @nonobjc NSUserDefaults.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithSuiteName:v3];

  return v4;
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t *v0 = v3;
  }
}

void specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  if (a1 + 1 > *(void *)(*(void *)v1 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *(void *)uint64_t v1 = v2;
  }
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (result + 1 > *(void *)((char *)&dword_18 + (*v1 & 0xFFFFFFFFFFFFFF8)) >> 1) {
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  return result;
}

uint64_t type metadata accessor for WFDialogState()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_1_38(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0xE000000000000000;
  *(_WORD *)(result + 32) = 0;
  *(unsigned char *)(result + 34) = 0;
  return result;
}

uint64_t UsoEntity_common_MeasurementComponent.measurementValue(locale:)()
{
  CodeGenBase.entity.getter();
  type metadata accessor for UsoEntity_common_DurationComponent();
  OUTLINED_FUNCTION_2_47();
  swift_release();
  if (v6)
  {
    uint64_t v0 = UsoEntity_common_DurationComponent.measurementValue.getter();
    swift_release();
  }
  else
  {
    CodeGenBase.entity.getter();
    type metadata accessor for UsoEntity_common_TemperatureComponent();
    OUTLINED_FUNCTION_2_47();
    swift_release();
    if (dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter())
    {
      uint64_t v0 = UsoEntity_common_Number.doubleValue.getter();
      char v3 = v2;
      swift_release();
      char v4 = v3 & 1;
    }
    else
    {
      uint64_t v0 = 0;
      char v4 = 1;
    }
    if (dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter())
    {
      id v5 = UsoEntity_common_MeasurementUnit.unitType.getter();
      swift_release();
      if ((v4 & 1) == 0) {
        return v0;
      }
    }
    else
    {
      id v5 = 0;
      if ((v4 & 1) == 0) {
        return v0;
      }
    }

    return 0;
  }
  return v0;
}

uint64_t UsoEntity_common_DurationComponent.measurementValue.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_TimeUnit.DefinedValues?);
  __chkstk_darwin(v1 - 8);
  OUTLINED_FUNCTION_25_8();
  if (dispatch thunk of UsoEntity_common_DurationComponent.value.getter())
  {
    uint64_t v2 = UsoEntity_common_Number.doubleValue.getter();
    char v4 = v3;
    swift_release();
    char v5 = v4 & 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v5 = 1;
  }
  uint64_t v6 = (void *)dispatch thunk of UsoEntity_common_DurationComponent.unit.getter();
  if (v6)
  {
    dispatch thunk of UsoEntity_common_TimeUnit.definedValue.getter();
    swift_release();
    uint64_t v7 = type metadata accessor for UsoEntity_common_TimeUnit.DefinedValues();
    if (__swift_getEnumTagSinglePayload(v0, 1, v7) != 1)
    {
      uint64_t v6 = UsoEntity_common_TimeUnit.DefinedValues.unitType.getter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0, v7);
      if ((v5 & 1) == 0) {
        return v2;
      }
      goto LABEL_8;
    }
    outlined destroy of URL?(v0, &demangling cache variable for type metadata for UsoEntity_common_TimeUnit.DefinedValues?);
    uint64_t v6 = 0;
  }
  if (v5)
  {
LABEL_8:

    return 0;
  }
  return v2;
}

uint64_t UsoEntity_common_TemperatureComponent.measurementValue(locale:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_TemperatureUnit.DefinedValues?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (dispatch thunk of UsoEntity_common_TemperatureComponent.value.getter())
  {
    uint64_t v3 = UsoEntity_common_Number.doubleValue.getter();
    char v5 = v4;
    swift_release();
    char v6 = v5 & 1;
  }
  else
  {
    uint64_t v3 = 0;
    char v6 = 1;
  }
  uint64_t v7 = (void *)dispatch thunk of UsoEntity_common_TemperatureComponent.unit.getter();
  if (v7)
  {
    dispatch thunk of UsoEntity_common_TemperatureUnit.definedValue.getter();
    swift_release();
    uint64_t v8 = type metadata accessor for UsoEntity_common_TemperatureUnit.DefinedValues();
    if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v8) != 1)
    {
      uint64_t v7 = UsoEntity_common_TemperatureUnit.DefinedValues.unitType(locale:)();
      (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v2, v8);
      if ((v6 & 1) == 0) {
        return v3;
      }
      goto LABEL_8;
    }
    outlined destroy of URL?((uint64_t)v2, &demangling cache variable for type metadata for UsoEntity_common_TemperatureUnit.DefinedValues?);
    uint64_t v7 = 0;
  }
  if (v6)
  {
LABEL_8:

    return 0;
  }
  return v3;
}

id UsoEntity_common_TimeUnit.DefinedValues.unitType.getter()
{
  uint64_t v2 = v1;
  type metadata accessor for UsoEntity_common_TimeUnit.DefinedValues();
  OUTLINED_FUNCTION_0_38();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v2, v0);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v0);
  if (v8 == enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Second(_:))
  {
    id v9 = [self seconds];
  }
  else if (v8 == enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Minute(_:))
  {
    id v9 = [self minutes];
  }
  else if (v8 == enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Hour(_:))
  {
    id v9 = [self hours];
  }
  else
  {
    if (v8 != enum case for UsoEntity_common_TimeUnit.DefinedValues.common_TimeUnit_Millisecond(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v0);
      return 0;
    }
    id v9 = [self milliseconds];
  }
  return v9;
}

id UsoEntity_common_TemperatureUnit.DefinedValues.unitType(locale:)()
{
  type metadata accessor for UsoEntity_common_TemperatureUnit.DefinedValues();
  OUTLINED_FUNCTION_0_38();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_25_8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v0);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v2, v0);
  if (v6 == enum case for UsoEntity_common_TemperatureUnit.DefinedValues.common_TemperatureUnit_Degrees(_:))
  {
    char v7 = Locale.usesMetricSystem.getter();
    int v8 = self;
    id v9 = &selRef_celsius;
    if ((v7 & 1) == 0) {
      id v9 = &selRef_fahrenheit;
    }
    id v10 = [v8 *v9];
    return v10;
  }
  if (v6 == enum case for UsoEntity_common_TemperatureUnit.DefinedValues.common_TemperatureUnit_DegreesCelsius(_:))
  {
    id v10 = [self celsius];
    return v10;
  }
  if (v6 == enum case for UsoEntity_common_TemperatureUnit.DefinedValues.common_TemperatureUnit_DegreesFahrenheit(_:))
  {
    id v10 = [self fahrenheit];
    return v10;
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_2_47()
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
}

uint64_t ResponseMode.toLinkInteractionMode()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ResponseMode();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v12 - v5, v1, v2);
  static ResponseMode.displayForward.getter();
  lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode();
  char v6 = OUTLINED_FUNCTION_1_39();
  char v7 = *(void (**)(void))(v3 + 8);
  OUTLINED_FUNCTION_0_39();
  v7();
  if (v6)
  {
    OUTLINED_FUNCTION_0_39();
    v7();
    return 1;
  }
  else
  {
    static ResponseMode.displayOnly.getter();
    char v9 = OUTLINED_FUNCTION_1_39();
    OUTLINED_FUNCTION_0_39();
    v7();
    if (v9)
    {
      OUTLINED_FUNCTION_0_39();
      v7();
      return 2;
    }
    else
    {
      static ResponseMode.voiceForward.getter();
      char v10 = OUTLINED_FUNCTION_1_39();
      OUTLINED_FUNCTION_0_39();
      v7();
      if (v10)
      {
        OUTLINED_FUNCTION_0_39();
        v7();
        return 3;
      }
      else
      {
        static ResponseMode.voiceOnly.getter();
        char v11 = OUTLINED_FUNCTION_1_39();
        OUTLINED_FUNCTION_0_39();
        v7();
        OUTLINED_FUNCTION_0_39();
        v7();
        if (v11) {
          return 4;
        }
        else {
          return 3;
        }
      }
    }
  }
}

uint64_t OUTLINED_FUNCTION_1_39()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t InstallShortcutViewFactory.__allocating_init(deviceState:catWrapper:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of AceServiceInvokerAsync(a1, v4 + 16);
  *(void *)(v4 + 56) = a2;
  return v4;
}

uint64_t InstallShortcutViewFactory.init(deviceState:catWrapper:)(long long *a1, uint64_t a2)
{
  outlined init with take of AceServiceInvokerAsync(a1, v2 + 16);
  *(void *)(v2 + 56) = a2;
  return v2;
}

uint64_t one-time initialization function for shortcutsApp()
{
  type metadata accessor for App();
  uint64_t result = App.__allocating_init(appIdentifier:)();
  static InstallShortcutViewFactory.shortcutsApp = result;
  return result;
}

uint64_t *InstallShortcutViewFactory.shortcutsApp.unsafeMutableAddressor()
{
  if (one-time initialization token for shortcutsApp != -1) {
    swift_once();
  }
  return &static InstallShortcutViewFactory.shortcutsApp;
}

uint64_t static InstallShortcutViewFactory.shortcutsApp.getter()
{
  if (one-time initialization token for shortcutsApp != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t InstallShortcutViewFactory.makeAceOutputErrorInstallShortcut()()
{
  OUTLINED_FUNCTION_14_0();
  v1[7] = v2;
  v1[8] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[9] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v1[10] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[11] = v4;
  v1[12] = OUTLINED_FUNCTION_25();
  char v7 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 112) + **(int **)(*(void *)v0 + 112));
  uint64_t v5 = (void *)swift_task_alloc();
  v1[13] = v5;
  *uint64_t v5 = v1;
  v5[1] = InstallShortcutViewFactory.makeAceOutputErrorInstallShortcut();
  return v7();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_5_0();
  *char v6 = v5;
  *(void *)(v2 + 112) = v7;
  swift_task_dealloc();
  char v11 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v4 + 128) + **(int **)(*(void *)v4 + 128));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 120) = v8;
  *uint64_t v8 = v5;
  v8[1] = InstallShortcutViewFactory.makeAceOutputErrorInstallShortcut();
  char v9 = *(void *)(v1 + 96);
  return v11(v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 112);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 64) + 16), *(void *)(*(void *)(v0 + 64) + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  if (v1 >> 62)
  {
    type metadata accessor for SAAceView();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SAAceView();
  }
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  swift_bridgeObjectRelease();
  char v6 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v6);
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  char v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

unint64_t type metadata accessor for SAAceView()
{
  unint64_t result = lazy cache variable for type metadata for SAAceView;
  if (!lazy cache variable for type metadata for SAAceView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  }
  return result;
}

uint64_t InstallShortcutViewFactory.makeAppLaunchButton()()
{
  *(void *)(v1 + 16) = v0;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v2, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = v0[2];
  uint64_t v2 = [objc_allocWithZone((Class)SAUIButton) init];
  v0[3] = v2;
  uint64_t v3 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
  v0[4] = v3;
  outlined bridged method (mbgnn) of @objc SASTApplicationBannerItem.bundleId.setter(0xD000000000000013, 0x8000000000225330, v3);
  v0[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_211C70;
  *(void *)(v4 + 32) = v3;
  char v9 = v4;
  specialized Array._endMutation()();
  uint64_t v5 = v3;
  outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(v9, v2);
  uint64_t v8 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 120) + **(int **)(*(void *)v1 + 120));
  char v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  *char v6 = v0;
  v6[1] = InstallShortcutViewFactory.makeAppLaunchButton();
  return v8();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = (void *)v0[3];
  outlined bridged method (mbnn) of @objc SAUIButton.text.setter(v0[7], v0[8], v2);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_211C70;
  *(void *)(v3 + 32) = v2;
  char v6 = v3;
  specialized Array._endMutation()();

  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v6);
}

uint64_t InstallShortcutViewFactory.makeAppLaunchButtonText()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for TemplatingText();
  v1[3] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for TemplatingSection();
  v1[6] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[7] = v5;
  v1[8] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[9] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[10] = v7;
  v1[11] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  *(void *)(v0 + 96) = OUTLINED_FUNCTION_3_39(*(void **)(v0 + 16));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  *uint64_t v1 = v0;
  v1[1] = InstallShortcutViewFactory.makeAppLaunchButtonText();
  OUTLINED_FUNCTION_10_37();
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, unint64_t);
  uint64_t v24;
  uint64_t v25;

  uint64_t v1 = *(void *)(TemplatingResult.sections.getter() + 16);
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v2 = TemplatingResult.sections.getter();
    if (*(void *)(v2 + 16))
    {
      uint64_t v3 = v0[10];
      char v24 = v0[11];
      uint64_t v4 = v0[8];
      uint64_t v5 = v0[9];
      uint64_t v6 = v0[6];
      uint64_t v7 = v0[7];
      uint64_t v8 = v0[4];
      uint64_t v9 = v0[5];
      uint64_t v10 = v0[3];
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v4, v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
      swift_bridgeObjectRelease();
      TemplatingSection.content.getter();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
      char v11 = TemplatingText.text.getter();
      os_log_type_t v13 = v12;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v24, v5);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_12;
  }
  if (one-time initialization token for voiceCommands != -1) {
LABEL_12:
  }
    swift_once();
  BOOL v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = Logger.logObject.getter();
  int64_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_23_0(&dword_0, v17, v18, "InstallShortcutViewFactory app launch button text is empty");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v20 = v0[10];
  unint64_t v19 = v0[11];
  uint64_t v21 = v0[9];

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  char v11 = 0;
  os_log_type_t v13 = 0xE000000000000000;
LABEL_8:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v22 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v22(v11, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void, unint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_23_0(&dword_0, v4, v5, "InstallShortcutViewFactory error generating app launch button text");
    OUTLINED_FUNCTION_7_0();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
  return v6(0, 0xE000000000000000);
}

uint64_t InstallShortcutViewFactory.makeErrorInstallShortcutTemplate()()
{
  OUTLINED_FUNCTION_9_0();
  v1[10] = v2;
  v1[11] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[14] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[15] = v4;
  v1[16] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  *(void *)(v0 + 136) = OUTLINED_FUNCTION_3_39(*(void **)(v0 + 88));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = InstallShortcutViewFactory.makeErrorInstallShortcutTemplate();
  OUTLINED_FUNCTION_10_37();
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
    return v10();
  }
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;

  unint64_t v19 = v0;
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = __swift_project_value_buffer(v0[14], (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "Unable to generate dialog due to error: %s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = v0[16];
  uint64_t v9 = v0[13];
  uint64_t v8 = v0[14];
  uint64_t v10 = v0[12];
  char v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[15] + 16);
  v11(v7, v1, v8);
  v11(v9, v7, v8);
  __swift_storeEnumTagSinglePayload(v9, 0, 1, v8);
  outlined init with copy of Logger?(v9, v10);
  if (__swift_getEnumTagSinglePayload(v10, 1, v8) == 1)
  {
    outlined destroy of URL?(v0[12], &demangling cache variable for type metadata for Logger?);
  }
  else
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      BOOL v14 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)BOOL v14 = 136315650;
      uint64_t v15 = StaticString.description.getter();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2048;
      v0[6] = 78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2080;
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x800000000022A840, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v12, v13, "FatalError at %s:%lu - %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }

    (*(void (**)(void, void))(v0[15] + 8))(v0[12], v0[14]);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t type metadata accessor for InstallShortcutViewFactory()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_3_39@<X0>(void *a1@<X8>)
{
  uint64_t v1 = a1[6];
  uint64_t v2 = a1[5];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v2);
  return DeviceState.asSiriKitDeviceState()(v2, v1);
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation14DateComponentsV_s5NeverOAD0E0VTg5@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v15 = a1;
  uint64_t v5 = type metadata accessor for DateComponents();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  __chkstk_darwin(v9 - 8);
  char v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SpeakableString?(v3, (uint64_t)v11, &demangling cache variable for type metadata for DateComponents?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v5) == 1)
  {
    uint64_t v12 = type metadata accessor for Date();
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v15(v8);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t Siri_Nlu_External_UserDialogAct.stringValue.getter()
{
  uint64_t v2 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v1)
  {
    uint64_t v0 = (uint64_t)v2;
    if (v2)
    {
      swift_retain();
      static UsoTask_CodegenConverter.convert(task:)();
      OUTLINED_FUNCTION_40_16();
      if (v6)
      {
        type metadata accessor for UsoTask_execute_common_VoiceCommand();
        if (OUTLINED_FUNCTION_14_23())
        {
          uint64_t v3 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
          swift_release();
          if (v3)
          {
            uint64_t v0 = v3;
            dispatch thunk of UsoEntity_common_VoiceCommandPayload.stringValue.getter();
            OUTLINED_FUNCTION_51_11();
            swift_release();
            return v0;
          }
        }
      }
      else
      {
        outlined destroy of FlowActivity?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
      }
      return 0;
    }
  }
  return v0;
}

uint64_t Siri_Nlu_External_UserDialogAct.intValue.getter()
{
  return Siri_Nlu_External_UserDialogAct.intValue.getter((uint64_t (*)(uint64_t))UsoEntity_common_Number.intValue.getter);
}

uint8_t *Siri_Nlu_External_UserDialogAct.urlValue.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v1)
  {
    if (result)
    {
      swift_retain();
      static UsoTask_CodegenConverter.convert(task:)();
      OUTLINED_FUNCTION_40_16();
      if (v8[3])
      {
        type metadata accessor for UsoTask_execute_common_VoiceCommand();
        if (swift_dynamicCast())
        {
          uint64_t v4 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
          swift_release();
          if (v4)
          {
            if (dispatch thunk of UsoEntity_common_VoiceCommandPayload.contactAddress.getter()) {
              CodeGenBase.entity.getter();
            }
            type metadata accessor for UsoEntity_common_Uri();
            static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
            swift_release();
            if (v8[0])
            {
              swift_retain();
              dispatch thunk of UsoEntity_common_Uri.value.getter();
              uint64_t v6 = v5;
              swift_release();
              if (v6)
              {
                String.convertedToURL()(a1);
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                return (uint8_t *)swift_release();
              }
              swift_release();
            }
            swift_release();
            swift_release();
          }
        }
      }
      else
      {
        outlined destroy of FlowActivity?((uint64_t)v8, &demangling cache variable for type metadata for Any?);
      }
    }
    uint64_t v7 = type metadata accessor for URL();
    return (uint8_t *)__swift_storeEnumTagSinglePayload(a1, 1, 1, v7);
  }
  return result;
}

uint64_t Siri_Nlu_External_UserDialogAct.dateComponentsValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[10] = v2;
  v1[11] = v0;
  v1[8] = v3;
  v1[9] = v4;
  v1[7] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>?);
  OUTLINED_FUNCTION_16(v6);
  v1[12] = OUTLINED_FUNCTION_13_0();
  v1[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy();
  v1[14] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[15] = v8;
  v1[16] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for DateTimeResolutionSpec.ExpandToType();
  v1[17] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[18] = v10;
  v1[19] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for DateTimeResolutionSpec();
  v1[20] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[21] = v12;
  v1[22] = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for Date();
  OUTLINED_FUNCTION_16(v13);
  v1[23] = OUTLINED_FUNCTION_25();
  uint64_t v14 = type metadata accessor for Calendar.Identifier();
  v1[24] = v14;
  OUTLINED_FUNCTION_1_0(v14);
  v1[25] = v15;
  v1[26] = OUTLINED_FUNCTION_25();
  uint64_t v16 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_16(v16);
  v1[27] = OUTLINED_FUNCTION_25();
  uint64_t v17 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_16(v17);
  v1[28] = OUTLINED_FUNCTION_25();
  uint64_t v18 = type metadata accessor for Locale();
  v1[29] = v18;
  OUTLINED_FUNCTION_1_0(v18);
  v1[30] = v19;
  v1[31] = OUTLINED_FUNCTION_13_0();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  uint64_t v20 = type metadata accessor for DateTimeResolutionContext.Hemisphere();
  v1[34] = v20;
  OUTLINED_FUNCTION_1_0(v20);
  v1[35] = v21;
  v1[36] = OUTLINED_FUNCTION_13_0();
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v22, v23, v24);
}

{
  void *v0;
  uint8_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t (*v11)(uint64_t);
  void *v12;
  uint64_t v13;

  uint64_t v1 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  v0[39] = 0;
  if (v1)
  {
    swift_retain();
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release_n();
    if (v0[5])
    {
      type metadata accessor for UsoTask_execute_common_VoiceCommand();
      if (swift_dynamicCast())
      {
        uint64_t v2 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
        swift_release();
        if (v2)
        {
          uint64_t v3 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.dateTime.getter();
          swift_release();
          if (v3)
          {
            uint64_t v4 = (void *)v0[9];
            v0[40] = UsoEntity_common_DateTime.toDateTime(recurrencePattern:)();
            swift_release();
            __swift_project_boxed_opaque_existential_1(v4, v4[3]);
            uint64_t v12 = (void *)(OUTLINED_FUNCTION_50_11() + 8);
            uint64_t v11 = (uint64_t (*)(uint64_t))(*v12 + *(int *)*v12);
            uint64_t v5 = (void *)swift_task_alloc();
            v0[41] = v5;
            *uint64_t v5 = v0;
            v5[1] = Siri_Nlu_External_UserDialogAct.dateComponentsValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:);
            uint64_t v6 = OUTLINED_FUNCTION_28_1();
            return v11(v6);
          }
        }
      }
    }
    else
    {
      outlined destroy of FlowActivity?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for Any?);
    }
  }
  uint64_t v8 = v0[7];
  uint64_t v9 = type metadata accessor for DateComponents();
  __swift_storeEnumTagSinglePayload(v8, 1, 1, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v10();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_16();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 336) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  unsigned int *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(void);
  void (*v45)(void);
  uint64_t v46;
  void (*v47)(void);
  void (*v48)(void);
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(void);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  uint64_t v1 = *(void **)(v0 + 336);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 296);
    uint64_t v2 = *(void *)(v0 + 304);
    uint64_t v4 = *(void *)(v0 + 272);
    uint64_t v5 = *(void *)(v0 + 280);
    [*(id *)(v0 + 336) lat];
    uint64_t v7 = v6;

    uint64_t v8 = (unsigned int *)&enum case for DateTimeResolutionContext.Hemisphere.north(_:);
    if (v7 <= 0.0) {
      uint64_t v8 = (unsigned int *)&enum case for DateTimeResolutionContext.Hemisphere.south(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v3, *v8, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v3, v4);
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = OUTLINED_FUNCTION_26_1(v9, (uint64_t)static Logger.voiceCommands);
    uint64_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_0, v10, v11, "Could not get location, setting hemisphere to north", v12, 2u);
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v13 = *(void *)(v0 + 304);
    uint64_t v14 = *(void *)(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 280);

    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v13, enum case for DateTimeResolutionContext.Hemisphere.north(_:), v14);
  }
  uint64_t v65 = *(void *)(v0 + 320);
  uint64_t v66 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 280);
  char v55 = *(void *)(v0 + 272);
  unint64_t v56 = *(void *)(v0 + 304);
  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v18 = *(void *)(v0 + 200);
  char v53 = *(void *)(v0 + 192);
  unint64_t v54 = *(void *)(v0 + 288);
  BOOL v64 = *(void *)(v0 + 176);
  char v57 = *(void *)(v0 + 144);
  unint64_t v58 = *(void *)(v0 + 152);
  char v59 = *(void *)(v0 + 136);
  uint64_t v60 = *(void *)(v0 + 120);
  uint64_t v61 = *(void *)(v0 + 128);
  uint64_t v62 = *(void *)(v0 + 112);
  uint64_t v63 = *(void **)(v0 + 64);
  uint64_t v19 = *(void (**)(void))(*(void *)(v0 + 240) + 16);
  OUTLINED_FUNCTION_21_26();
  v19();
  OUTLINED_FUNCTION_21_26();
  v19();
  OUTLINED_FUNCTION_21_26();
  v19();
  static TimeZone.current.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v54, v56, v55);
  (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, enum case for Calendar.Identifier.gregorian(_:), v53);
  Calendar.init(identifier:)();
  OUTLINED_FUNCTION_37_11();
  v20();
  static Date.now.getter();
  type metadata accessor for DateTimeResolutionContext();
  swift_allocObject();
  uint64_t v21 = DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)();
  (*(void (**)(uint64_t, void, uint64_t))(v57 + 104))(v58, enum case for DateTimeResolutionSpec.ExpandToType.pointInTime(_:), v59);
  (*(void (**)(uint64_t, void, uint64_t))(v60 + 104))(v61, enum case for DateTimeResolutionSpec.DateTimeConvergenceStrategy.future(_:), v62);
  type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange();
  type metadata accessor for DateTime();
  lazy protocol witness table accessor for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange(&lazy protocol witness table cache variable for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange, (void (*)(uint64_t))&type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange);
  Dictionary.init(dictionaryLiteral:)();
  DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)();
  uint64_t v22 = v63[3];
  uint64_t v23 = v63[4];
  __swift_project_boxed_opaque_existential_1(v63, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8))(v65, v21, v64, v22, v23);
  if (v66)
  {
    swift_errorRelease();
    uint64_t v24 = 1;
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  __swift_storeEnumTagSinglePayload(v25, v24, 1, v26);
  id v27 = OUTLINED_FUNCTION_28_1();
  outlined init with copy of SpeakableString?(v27, v28, v29);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  uint64_t v30 = OUTLINED_FUNCTION_50_11();
  if (__swift_getEnumTagSinglePayload(v30, 1, v24) == 1)
  {
    int64_t v31 = *(void *)(v0 + 168);
    uint64_t v32 = *(void *)(v0 + 176);
    uint64_t v33 = *(void *)(v0 + 160);
    unint64_t v35 = *(void *)(v0 + 96);
    uint64_t v34 = *(void *)(v0 + 104);
    swift_release();
    swift_release();
    outlined destroy of FlowActivity?(v34, &demangling cache variable for type metadata for Recommendation<DateTime>?);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
    unint64_t v36 = OUTLINED_FUNCTION_28_1();
    v37(v36);
    outlined destroy of FlowActivity?(v35, &demangling cache variable for type metadata for Recommendation<DateTime>?);
  }
  else
  {
    OUTLINED_FUNCTION_12_1();
    int64_t v39 = v38;
    unint64_t v41 = (*(uint64_t (**)(void))(v40 + 88))();
    double v43 = *(void *)(v0 + 96);
    uint64_t v42 = *(void *)(v0 + 104);
    if (v41 == enum case for Recommendation.confident<A>(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v39 + 96))(v43, v24);
      dispatch thunk of DateTime.dateComponents.getter();
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of FlowActivity?(v42, &demangling cache variable for type metadata for Recommendation<DateTime>?);
      OUTLINED_FUNCTION_20_14();
      v44();
      OUTLINED_FUNCTION_53_1();
      v45();
      uint64_t v46 = 0;
      goto LABEL_19;
    }
    swift_release();
    swift_release();
    outlined destroy of FlowActivity?(v42, &demangling cache variable for type metadata for Recommendation<DateTime>?);
    OUTLINED_FUNCTION_20_14();
    v47();
    OUTLINED_FUNCTION_53_1();
    v48();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v24);
  }
  uint64_t v46 = 1;
LABEL_19:
  uint64_t v49 = *(void *)(v0 + 56);
  unint64_t v50 = type metadata accessor for DateComponents();
  __swift_storeEnumTagSinglePayload(v49, v46, 1, v50);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v51();
}

uint64_t Siri_Nlu_External_UserDialogAct.placementValue(locationResolving:locationProviding:locale:timeZone:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Location?);
  OUTLINED_FUNCTION_16(v6);
  v1[7] = OUTLINED_FUNCTION_25();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Location>);
  v1[8] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[9] = v8;
  v1[10] = OUTLINED_FUNCTION_13_0();
  v1[11] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for TimeZone();
  v1[12] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[13] = v10;
  v1[14] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for Locale();
  v1[15] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[16] = v12;
  v1[17] = OUTLINED_FUNCTION_13_0();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for LocationResolutionContext();
  v1[20] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v1[21] = v14;
  v1[22] = OUTLINED_FUNCTION_25();
  uint64_t v15 = type metadata accessor for Location();
  v1[23] = v15;
  OUTLINED_FUNCTION_1_0(v15);
  v1[24] = v16;
  v1[25] = OUTLINED_FUNCTION_13_0();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v17, v18, v19);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v4;
  *uint64_t v4 = v0;
  v4[1] = Siri_Nlu_External_UserDialogAct.placementValue(locationResolving:locationProviding:locale:timeZone:);
  return v6(v2, v3);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_16();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 240) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(unint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  int v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  void *v22;
  os_log_type_t v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  os_log_type_t v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  void (*v36)(void);
  void (*v37)(void);
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void (*v49)(void);
  void (*v50)(void);
  void (*v51)(void);
  uint64_t v52;
  void *v53;
  os_log_type_t v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(void);
  void (*v60)(void);
  void (*v61)(void);
  void (*v62)(void);
  void (*v63)(void);
  void (*v64)(void);
  uint64_t v65;
  void (*v66)(void);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;

  uint64_t v1 = (void *)v0[30];
  if (!v1) {
    goto LABEL_6;
  }
  if (!Siri_Nlu_External_UserDialogAct.executeCommonVoiceCommand.getter()
    || (uint64_t v2 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter(), swift_release(), !v2))
  {

LABEL_6:
    unint64_t v72 = 0;
    goto LABEL_7;
  }
  dispatch thunk of UsoEntity_common_VoiceCommandPayload.geographicArea.getter();
  OUTLINED_FUNCTION_50_11();
  swift_release();
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v5 = v0[24];
  unint64_t v71 = v0[22];
  uint64_t v65 = v0[23];
  uint64_t v6 = v0[16];
  uint64_t v7 = v0[13];
  os_log_type_t v68 = v0[14];
  uint64_t v69 = v0[12];
  char v67 = v0[5];
  uint64_t v70 = (void *)v0[2];
  UsoEntity_common_GeographicArea.toLocation()();
  swift_release();
  uint64_t v8 = v65;
  uint64_t v66 = *(void (**)(void))(v5 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v4, v3, v8);
  uint64_t v9 = *(void (**)(void))(v6 + 16);
  OUTLINED_FUNCTION_19_22();
  v9();
  OUTLINED_FUNCTION_19_22();
  v9();
  OUTLINED_FUNCTION_19_22();
  v9();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v68, v67, v69);
  [v1 lat];
  [v1 lng];
  LocationResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:latitude:longitude:)();
  uint64_t v10 = v70[3];
  uint64_t v11 = v70[4];
  __swift_project_boxed_opaque_existential_1(v70, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(v4, v71, v10, v11);
  uint64_t v14 = v0[10];
  uint64_t v15 = v0[8];
  uint64_t v16 = v0[9];
  OUTLINED_FUNCTION_59_0();
  v17();
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v14, v15);
  if (v18 == enum case for Recommendation.confident<A>(_:))
  {
    uint64_t v19 = OUTLINED_FUNCTION_26_23();
    v20(v19);
    OUTLINED_FUNCTION_73();
    v66();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = (void *)OUTLINED_FUNCTION_26_1(v21, (uint64_t)static Logger.voiceCommands);
    uint64_t v23 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v23))
    {
      uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v24);
      OUTLINED_FUNCTION_42_0(&dword_0, v25, v26, "#InputUtils LocationResolver confidently recommended a location");
      OUTLINED_FUNCTION_7_0();
    }
LABEL_21:
    OUTLINED_FUNCTION_43_9();
    uint64_t v34 = v0[24];

    unint64_t v72 = (unint64_t)Location.toCLPlacemark()();
    unint64_t v35 = *(void (**)(void))(v34 + 8);
    OUTLINED_FUNCTION_33_16();
    v35();
    OUTLINED_FUNCTION_10_27();
    v36();
    OUTLINED_FUNCTION_20_14();
    v37();
    OUTLINED_FUNCTION_33_16();
    v35();
    goto LABEL_7;
  }
  if (v18 == enum case for Recommendation.needsConfirmation<A>(_:))
  {
    id v27 = OUTLINED_FUNCTION_26_23();
    v28(v27);
    OUTLINED_FUNCTION_73();
    v66();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    id v29 = type metadata accessor for Logger();
    uint64_t v22 = (void *)OUTLINED_FUNCTION_26_1(v29, (uint64_t)static Logger.voiceCommands);
    uint64_t v30 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_32(v30))
    {
      int64_t v31 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v31);
      OUTLINED_FUNCTION_42_0(&dword_0, v32, v33, "#InputUtils LocationResolver call returned needsConfirmation which is unsupported, returning location");
      OUTLINED_FUNCTION_7_0();
    }
    goto LABEL_21;
  }
  if (v18 != enum case for Recommendation.needsDisambiguation<A>(_:))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    char v52 = type metadata accessor for Logger();
    char v53 = (void *)OUTLINED_FUNCTION_26_1(v52, (uint64_t)static Logger.voiceCommands);
    unint64_t v54 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_32(v54))
    {
      char v55 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v55);
      OUTLINED_FUNCTION_42_0(&dword_0, v56, v57, "#InputUtils LocationResolver could not recommend a location");
      OUTLINED_FUNCTION_7_0();
    }
    OUTLINED_FUNCTION_43_9();
    unint64_t v58 = v0[9];

    char v59 = *(void (**)(void))(v58 + 8);
    OUTLINED_FUNCTION_37_11();
    v59();
    OUTLINED_FUNCTION_53_1();
    v60();
    OUTLINED_FUNCTION_33_16();
    v61();
    OUTLINED_FUNCTION_37_11();
    v59();
    goto LABEL_6;
  }
  unint64_t v38 = (uint64_t *)v0[10];
  (*(void (**)(uint64_t *, void))(v0[9] + 96))(v38, v0[8]);
  int64_t v39 = *v38;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  unint64_t v40 = type metadata accessor for Logger();
  unint64_t v41 = OUTLINED_FUNCTION_26_1(v40, (uint64_t)static Logger.voiceCommands);
  uint64_t v42 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v41, v42))
  {
    double v43 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)double v43 = 0;
    _os_log_impl(&dword_0, v41, v42, "#InputUtils LocationResolver call returned needsDisambiguation which is unsupported, picking first location", v43, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  char v44 = v0[23];
  char v45 = v0[7];

  specialized Collection.first.getter(v39, v45);
  swift_bridgeObjectRelease();
  __swift_getEnumTagSinglePayload(v45, 1, v44);
  OUTLINED_FUNCTION_43_9();
  uint64_t v46 = v0[24];
  unint64_t v47 = v0[7];
  if (v48 == 1)
  {

    OUTLINED_FUNCTION_20_14();
    v49();
    OUTLINED_FUNCTION_33_16();
    v50();
    OUTLINED_FUNCTION_53_1();
    v51();
    outlined destroy of FlowActivity?(v47, &demangling cache variable for type metadata for Location?);
    goto LABEL_6;
  }
  unint64_t v72 = (unint64_t)Location.toCLPlacemark()();

  OUTLINED_FUNCTION_20_14();
  v62();
  OUTLINED_FUNCTION_33_16();
  v63();
  BOOL v64 = *(void (**)(void))(v46 + 8);
  OUTLINED_FUNCTION_53_1();
  v64();
  OUTLINED_FUNCTION_53_1();
  v64();
LABEL_7:
  OUTLINED_FUNCTION_48_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(unint64_t))v0[1];
  return v12(v72);
}

Class Siri_Nlu_External_UserDialogAct.personValue(contactResolver:locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v131 = a1;
  uint64_t v130 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact?);
  uint64_t v5 = OUTLINED_FUNCTION_16(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_20_0();
  uint64_t v124 = v7 - v6;
  type metadata accessor for Contact();
  OUTLINED_FUNCTION_12_1();
  uint64_t v127 = v9;
  uint64_t v128 = v8;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_51_0();
  uint64_t v125 = v10 - v11;
  __chkstk_darwin(v12);
  uint64_t v126 = (char *)&v116 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>?);
  uint64_t v15 = OUTLINED_FUNCTION_16(v14);
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_51_0();
  uint64_t v18 = v16 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v116 - v20;
  uint64_t v22 = type metadata accessor for ContactResolverConfig();
  OUTLINED_FUNCTION_12_1();
  uint64_t v129 = v23;
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_11_37();
  uint64_t v25 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_12_1();
  uint64_t v27 = v26;
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_51_0();
  uint64_t v31 = v29 - v30;
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v116 - v33;
  uint64_t v35 = v132;
  unint64_t v36 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (v35) {
    return isa;
  }
  Class isa = (Class)v36;
  uint64_t v122 = v31;
  uint64_t v123 = v34;
  uint64_t v118 = (uint64_t *)v18;
  uint64_t v119 = v21;
  uint64_t v132 = v3;
  uint64_t v120 = v22;
  uint64_t v121 = v27;
  if (!v36) {
    return isa;
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  OUTLINED_FUNCTION_40_16();
  if (!v133[3])
  {
    outlined destroy of FlowActivity?((uint64_t)v133, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for UsoTask_execute_common_VoiceCommand();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v37 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
  swift_release();
  if (!v37) {
    return 0;
  }
  if (dispatch thunk of UsoEntity_common_VoiceCommandPayload.agent.getter())
  {
    CodeGenBase.entity.getter();
    swift_release();
  }
  uint64_t v39 = v25;
  unint64_t v41 = (void *)v131;
  uint64_t v40 = v132;
  type metadata accessor for UsoEntity_common_Person();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  uint64_t v42 = (void *)v133[0];
  if (!v133[0])
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    char v53 = (void *)OUTLINED_FUNCTION_26_1(v52, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_12_39(v54))
    {
      char v55 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v55);
      OUTLINED_FUNCTION_16_8(&dword_0, v56, v57, "Could not create ContactQuery from parse");
      OUTLINED_FUNCTION_7_0();
    }

    swift_release();
    return 0;
  }
  uint64_t v131 = v37;
  swift_retain();
  UsoEntity_common_Person.toContactQuery()();
  swift_release();
  OUTLINED_FUNCTION_73();
  v43();
  char v44 = v41;
  uint64_t v45 = v41[3];
  uint64_t v46 = v44[4];
  __swift_project_boxed_opaque_existential_1(v44, v45);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 8))(v130, v45, v46);
  uint64_t v47 = v44[4];
  uint64_t v122 = v44[3];
  uint64_t v117 = __swift_project_boxed_opaque_existential_1(v44, v122);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
  os_log_type_t v48 = v42;
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_212160;
  uint64_t v130 = v39;
  OUTLINED_FUNCTION_59_0();
  v50();
  uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 16))(v49, v40, v122, v47);
  uint64_t v122 = v35;
  uint64_t v58 = v51;
  uint64_t v117 = v48;
  swift_bridgeObjectRelease();
  uint64_t v59 = (uint64_t)v119;
  specialized Collection.first.getter(v58, (uint64_t)v119);
  swift_bridgeObjectRelease();
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  if (__swift_getEnumTagSinglePayload(v59, 1, v60) == 1) {
    goto LABEL_19;
  }
  uint64_t v69 = (uint64_t)v118;
  outlined init with copy of SpeakableString?(v59, (uint64_t)v118, &demangling cache variable for type metadata for Recommendation<Contact>?);
  int v70 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 88))(v69, v60);
  if (v70 == enum case for Recommendation.confident<A>(_:))
  {
    OUTLINED_FUNCTION_35_17();
    v71();
    OUTLINED_FUNCTION_73();
    v72();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    BOOL v74 = (void *)OUTLINED_FUNCTION_26_1(v73, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v75 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_12_39(v75))
    {
      uint64_t v76 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v76);
      OUTLINED_FUNCTION_16_8(&dword_0, v77, v78, "#InputUtils ContactResolver confidently recommended a contact");
      OUTLINED_FUNCTION_7_0();
    }

    Class isa = Contact.toINPerson()().super.isa;
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_66();
    v79();
    OUTLINED_FUNCTION_66();
    v80();
    uint64_t v81 = OUTLINED_FUNCTION_6_40();
    v82(v81);
    uint64_t v83 = (uint64_t)v119;
    goto LABEL_46;
  }
  if (v70 == enum case for Recommendation.needsConfirmation<A>(_:))
  {
    OUTLINED_FUNCTION_35_17();
    v84();
    OUTLINED_FUNCTION_73();
    v85();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v86 = type metadata accessor for Logger();
    uint64_t v87 = OUTLINED_FUNCTION_26_1(v86, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v88 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v87, v88))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_44_13(&dword_0, v89, v90, "#InputUtils ContactResolver call returned needsConfirmation which is unsupported, returning contact");
      OUTLINED_FUNCTION_7_0();
    }

    Class isa = Contact.toINPerson()().super.isa;
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_37_11();
    v91();
    uint64_t v92 = OUTLINED_FUNCTION_13_36();
    v93(v92);
    uint64_t v94 = OUTLINED_FUNCTION_6_40();
    v95(v94);
LABEL_45:
    uint64_t v83 = v59;
LABEL_46:
    outlined destroy of FlowActivity?(v83, &demangling cache variable for type metadata for Recommendation<Contact>?);
    return isa;
  }
  uint64_t v96 = v127;
  if (v70 == enum case for Recommendation.needsDisambiguation<A>(_:))
  {
    uint64_t v97 = v118;
    OUTLINED_FUNCTION_35_17();
    v98();
    uint64_t v99 = *v97;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v100 = type metadata accessor for Logger();
    uint64_t v101 = OUTLINED_FUNCTION_26_1(v100, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v102 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v101, v102))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_44_13(&dword_0, v103, v104, "#InputUtils ContactResolver call returned needsDisambiguation which is unsupported, picking first one");
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v105 = v124;
    specialized Collection.first.getter(v99, v124);
    swift_bridgeObjectRelease();
    uint64_t v106 = v128;
    if (__swift_getEnumTagSinglePayload(v105, 1, v128) == 1)
    {
      swift_release();
      swift_release();
      uint64_t v107 = OUTLINED_FUNCTION_13_36();
      v108(v107);
      uint64_t v109 = OUTLINED_FUNCTION_6_40();
      v110(v109);
      outlined destroy of FlowActivity?(v105, &demangling cache variable for type metadata for Contact?);
      Class isa = 0;
    }
    else
    {
      Class isa = Contact.toINPerson()().super.isa;
      swift_release();
      swift_release();
      uint64_t v112 = OUTLINED_FUNCTION_13_36();
      v113(v112);
      uint64_t v114 = OUTLINED_FUNCTION_6_40();
      v115(v114);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v105, v106);
    }
    goto LABEL_45;
  }
  OUTLINED_FUNCTION_20_14();
  v111();
LABEL_19:
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v62 = (void *)OUTLINED_FUNCTION_26_1(v61, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v63 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_12_39(v63))
  {
    BOOL v64 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v64);
    OUTLINED_FUNCTION_16_8(&dword_0, v65, v66, "#InputUtils ContactResolver could not recommend a contact");
    OUTLINED_FUNCTION_7_0();
  }
  swift_release();

  swift_release();
  OUTLINED_FUNCTION_20_14();
  v67();
  OUTLINED_FUNCTION_20_3();
  v68();
  outlined destroy of FlowActivity?(v59, &demangling cache variable for type metadata for Recommendation<Contact>?);
  return 0;
}

uint64_t Siri_Nlu_External_UserDialogAct.BOOLValue.getter()
{
  type metadata accessor for Google_Protobuf_StringValue();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_20_0();
  os_log_type_t v1 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_12_18();
  type metadata accessor for Siri_Nlu_External_UsoGraph();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_11_37();
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  OUTLINED_FUNCTION_12_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = v9 - v8;
  if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter()) {
    return 1;
  }
  if ((Siri_Nlu_External_UserDialogAct.hasRejected.getter() & 1) != 0
    || (Siri_Nlu_External_UserDialogAct.hasCancelled.getter() & 1) != 0)
  {
    return 0;
  }
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  uint64_t v13 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  OUTLINED_FUNCTION_10_27();
  v14();
  uint64_t v15 = *(void *)(v13 + 16);
  if (!v15)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    unint64_t v36 = OUTLINED_FUNCTION_26_1(v35, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v37))
    {
      uint64_t v11 = 2;
      unint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)unint64_t v38 = 0;
      _os_log_impl(&dword_0, v36, v1, "Extracting BOOL value from nlv4 failed", v38, 2u);
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      return 2;
    }
    return v11;
  }
  OUTLINED_FUNCTION_49_11();
  uint64_t v17 = v13 + v16;
  uint64_t v43 = *(void *)(v18 + 56);
  while (1)
  {
    OUTLINED_FUNCTION_59_0();
    v19();
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v20 = Google_Protobuf_StringValue.value.getter();
    uint64_t v22 = v21;
    OUTLINED_FUNCTION_20_3();
    v23();
    if (v20 == 0xD000000000000018 && v22 == 0x8000000000227F10)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        uint64_t v33 = OUTLINED_FUNCTION_46_13();
        v34(v33);
        goto LABEL_25;
      }
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x747065636361 && v25 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      uint64_t v39 = OUTLINED_FUNCTION_36_17();
      v40(v39);
      swift_bridgeObjectRelease();
      return 1;
    }
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_32;
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x7463656A6572 && v28 == 0xE600000000000000) {
      break;
    }
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = OUTLINED_FUNCTION_36_17();
    v32(v31);
    if (v30) {
      goto LABEL_34;
    }
LABEL_25:
    v17 += v43;
    if (!--v15) {
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v41 = OUTLINED_FUNCTION_46_13();
  v42(v41);
LABEL_34:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Siri_Nlu_External_UserDialogAct.measurementValue(locale:)()
{
  uint64_t v2 = Siri_Nlu_External_UserDialogAct.executeCommonVoiceCommand.getter();
  if (v1) {
    return v0;
  }
  if (v2)
  {
    swift_retain();
    uint64_t v3 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
    swift_release();
    if (!v3) {
      goto LABEL_14;
    }
    uint64_t v4 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.measurement.getter();
    swift_release();
    if (!v4) {
      goto LABEL_14;
    }
    unint64_t v5 = dispatch thunk of UsoEntity_common_Measurement.components.getter();
    if (!v5)
    {
LABEL_13:
      swift_release();
LABEL_14:
      swift_release();
      goto LABEL_15;
    }
    unint64_t v6 = v5;
    if (v5 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_8:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000001) == 0);
        if ((v6 & 0xC000000000000001) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        swift_bridgeObjectRelease();
        dispatch thunk of CodeGenListEntry.entry.getter();
        swift_release();
        if (v14)
        {
          uint64_t v0 = UsoEntity_common_MeasurementComponent.measurementValue(locale:)();
          swift_release();
          swift_release();
          swift_release();
          return v0;
        }
        goto LABEL_13;
      }
    }
    else if (*(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)))
    {
      goto LABEL_8;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_15:
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_26_1(v7, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_12_39(v9))
  {
    uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v10);
    OUTLINED_FUNCTION_16_8(&dword_0, v11, v12, "Unable to extract measurement component from parse");
    OUTLINED_FUNCTION_7_0();
  }

  return 0;
}

id Siri_Nlu_External_UserDialogAct.currencyValue(locale:)(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.Currency?);
  uint64_t v6 = OUTLINED_FUNCTION_16(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_12_18();
  uint64_t v7 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_12_1();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_0();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v12 = OUTLINED_FUNCTION_16(v11);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = Siri_Nlu_External_UserDialogAct.executeCommonVoiceCommand.getter();
  if (v2) {
    return v1;
  }
  if (!v15)
  {
LABEL_24:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    unint64_t v38 = (void *)OUTLINED_FUNCTION_26_1(v37, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_12_39(v39))
    {
      uint64_t v40 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v40);
      OUTLINED_FUNCTION_16_8(&dword_0, v41, v42, "Unable to extract currency information from parse");
      OUTLINED_FUNCTION_7_0();
    }

    return 0;
  }
  swift_retain();
  uint64_t v16 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
  swift_release();
  if (!v16
    || (v76 = v9, uint64_t v17 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.currency.getter(), swift_release(), !v17))
  {
LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  uint64_t v75 = a1;
  uint64_t v18 = dispatch thunk of UsoEntity_common_CurrencyAmount.currency.getter();
  if (!v18)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  uint64_t v19 = v18;
  uint64_t v70 = v3;
  if (!dispatch thunk of UsoEntity_common_CurrencyAmount.amount.getter()
    || (v69 = UsoEntity_common_Number.doubleValue.getter(), char v21 = v20, swift_release(), (v21 & 1) != 0))
  {
    swift_release();
    goto LABEL_22;
  }
  uint64_t v22 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  v68[3] = v19;
  if (!v22) {
    goto LABEL_35;
  }
  uint64_t v23 = v22;
  v68[2] = v17;
  uint64_t v24 = *(void *)(v22 + 16);
  if (!v24)
  {
LABEL_19:
    uint64_t v36 = 1;
    goto LABEL_33;
  }
  OUTLINED_FUNCTION_49_11();
  uint64_t v25 = v23;
  uint64_t v27 = v23 + v26;
  uint64_t v72 = v28 - 8;
  uint64_t v73 = v29;
  uint64_t v74 = v28;
  uint64_t v71 = *(void *)(v28 + 56);
  v68[1] = v25;
  swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_59_0();
    v30();
    uint64_t v31 = UsoIdentifier.namespace.getter();
    if (!v32) {
      goto LABEL_17;
    }
    if (v31 == 0x79636E6572727563 && v32 == 0xEC00000074696E55) {
      break;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v34) {
      goto LABEL_32;
    }
LABEL_17:
    OUTLINED_FUNCTION_66();
    v35();
    v27 += v71;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
LABEL_32:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_73();
  v44();
  uint64_t v36 = 0;
LABEL_33:
  __swift_storeEnumTagSinglePayload((uint64_t)v14, v36, 1, v7);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v7) == 1)
  {
    outlined destroy of FlowActivity?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
LABEL_35:
    uint64_t v45 = 0;
    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v47 = UsoIdentifier.value.getter();
    uint64_t v46 = v48;
    uint64_t v45 = v47;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v14, v7);
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v76 = v45;
  uint64_t v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  unint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    uint64_t v78 = v74;
    *(_DWORD *)uint64_t v52 = 136315138;
    uint64_t v73 = v52 + 4;
    swift_bridgeObjectRetain();
    uint64_t v53 = OUTLINED_FUNCTION_28_1();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v50, v51, "Currency parser received unit with identifier: %s", v52, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v56 = v70;
  if (v46)
  {
    swift_bridgeObjectRetain();
    v57._uint64_t countAndFlagsBits = 0x756F756769626D61;
    v57._unint64_t object = (void *)0xE900000000000073;
    Swift::Bool v58 = String.hasPrefix(_:)(v57);
    swift_bridgeObjectRelease();
    if (v58)
    {
      swift_bridgeObjectRelease();
      Locale.currency.getter();
      uint64_t v59 = v56;
      uint64_t v60 = type metadata accessor for Locale.Currency();
      if (__swift_getEnumTagSinglePayload(v59, 1, v60) == 1)
      {
        outlined destroy of FlowActivity?(v59, &demangling cache variable for type metadata for Locale.Currency?);
        goto LABEL_46;
      }
      uint64_t countAndFlagsBits = Locale.Currency.identifier.getter();
      unint64_t object = v64;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
    }
    else
    {
      Swift::String v63 = String.uppercased()();
      uint64_t countAndFlagsBits = v63._countAndFlagsBits;
      unint64_t object = (unint64_t)v63._object;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
LABEL_46:
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0xE000000000000000;
  }
  uint64_t v65 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0) {
    uint64_t v65 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v65)
  {
    id v66 = [objc_allocWithZone((Class)NSDecimalNumber) initWithDouble:*(double *)&v69];
    id v67 = objc_allocWithZone((Class)INCurrencyAmount);
    id v1 = @nonobjc INCurrencyAmount.init(amount:currencyCode:)(v66);
    swift_release();
    swift_release();
    swift_release();
    return v1;
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Siri_Nlu_External_UserDialogAct.doubleValue.getter()
{
  return Siri_Nlu_External_UserDialogAct.intValue.getter((uint64_t (*)(uint64_t))UsoEntity_common_Number.doubleValue.getter);
}

uint64_t Siri_Nlu_External_UserDialogAct.intValue.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v4 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v2)
  {
    uint64_t v1 = (uint64_t)v4;
    if (v4)
    {
      swift_retain();
      static UsoTask_CodegenConverter.convert(task:)();
      OUTLINED_FUNCTION_40_16();
      if (!v10)
      {
        outlined destroy of FlowActivity?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
        return 0;
      }
      type metadata accessor for UsoTask_execute_common_VoiceCommand();
      if ((OUTLINED_FUNCTION_14_23() & 1) == 0) {
        return 0;
      }
      uint64_t v1 = v8;
      dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
      OUTLINED_FUNCTION_50_11();
      swift_release();
      if (v8)
      {
        uint64_t v5 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.number.getter();
        uint64_t v6 = swift_release();
        if (v5)
        {
          uint64_t v1 = a1(v6);
          swift_release();
          return v1;
        }
        return 0;
      }
    }
  }
  return v1;
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Siri_Nlu_External_UserDialogAct.paginationValue()()
{
  result.int value = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v0)
  {
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release();
    outlined init with copy of SpeakableString?((uint64_t)v4, (uint64_t)v2, &demangling cache variable for type metadata for Any?);
    if (v3)
    {
      type metadata accessor for UsoTask_skipForward_uso_NoEntity();
      if (OUTLINED_FUNCTION_14_23())
      {
        swift_release();
        outlined destroy of FlowActivity?((uint64_t)v4, &demangling cache variable for type metadata for Any?);
        return 0;
      }
    }
    else
    {
      outlined destroy of FlowActivity?((uint64_t)v2, &demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of SpeakableString?((uint64_t)v4, (uint64_t)v2, &demangling cache variable for type metadata for Any?);
    if (v3)
    {
      type metadata accessor for UsoTask_skipBackward_uso_NoEntity();
      if (OUTLINED_FUNCTION_14_23())
      {
        swift_release();
        outlined destroy of FlowActivity?((uint64_t)v4, &demangling cache variable for type metadata for Any?);
        return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination_optional)1;
      }
    }
    else
    {
      outlined destroy of FlowActivity?((uint64_t)v2, &demangling cache variable for type metadata for Any?);
    }
    outlined init with take of Any?((uint64_t)v4, (uint64_t)v2);
    if (v3)
    {
      type metadata accessor for UsoTask_repeat_uso_NoEntity();
      if (OUTLINED_FUNCTION_14_23())
      {
        swift_release();
        return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination_optional)2;
      }
    }
    else
    {
      outlined destroy of FlowActivity?((uint64_t)v2, &demangling cache variable for type metadata for Any?);
    }
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination_optional)3;
  }
  return result;
}

uint64_t Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a1;
  v5[4] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_16(v6);
  v5[5] = OUTLINED_FUNCTION_25();
  uint64_t v7 = (void *)swift_task_alloc();
  v5[6] = v7;
  *uint64_t v7 = v5;
  v7[1] = Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:);
  return Siri_Nlu_External_UserDialogAct.dateComponentsValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)();
}

uint64_t Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_16();
  *uint64_t v2 = v1;
  *(void *)(v1 + 56) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  *(void *)(swift_task_alloc() + 16) = v2;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation14DateComponentsV_s5NeverOAD0E0VTg5((void (*)(char *))partial apply for closure #1 in Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:), v3);
  outlined destroy of FlowActivity?(v1, &demangling cache variable for type metadata for DateComponents?);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Siri_Nlu_External_UserDialogAct.entityValue.getter()
{
  uint64_t v3 = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v1)
  {
    uint64_t v0 = (uint64_t)v3;
    if (v3)
    {
      swift_retain();
      static UsoTask_CodegenConverter.convert(task:)();
      OUTLINED_FUNCTION_40_16();
      if (v10)
      {
        type metadata accessor for UsoTask_execute_common_VoiceCommand();
        if (OUTLINED_FUNCTION_14_23())
        {
          uint64_t v4 = dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
          swift_release();
          if (v4)
          {
            uint64_t v5 = dispatch thunk of UsoEntity_common_VoiceCommandPayload.appEntity.getter();
            if (v5)
            {
              uint64_t v6 = v5;
              uint64_t v7 = dispatch thunk of UsoEntity_common_AppEntity.type.getter();
              if (v7)
              {
                uint64_t v0 = v7;
                dispatch thunk of UsoEntity_common_AppEntityType.name.getter();
                OUTLINED_FUNCTION_51_11();
                swift_release();
                if (v2)
                {
                  swift_release();
LABEL_15:
                  swift_release();
                  return v0;
                }
              }
              uint64_t v0 = v6;
              dispatch thunk of UsoEntity_common_AppEntity.name.getter();
              OUTLINED_FUNCTION_51_11();
              swift_release();
              if (v2) {
                goto LABEL_15;
              }
            }
            uint64_t v0 = v4;
            dispatch thunk of UsoEntity_common_VoiceCommandPayload.stringValue.getter();
            OUTLINED_FUNCTION_51_11();
            goto LABEL_15;
          }
        }
      }
      else
      {
        outlined destroy of FlowActivity?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
      }
      return 0;
    }
  }
  return v0;
}

_UNKNOWN **Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:)(int64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
  uint64_t v6 = OUTLINED_FUNCTION_16(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_11_37();
  uint64_t v7 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues();
  OUTLINED_FUNCTION_12_1();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_51_0();
  uint64_t v13 = v11 - v12;
  __chkstk_darwin(v14);
  Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (v2) {
    return (_UNKNOWN **)v1;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!v83[3])
  {
    outlined destroy of FlowActivity?((uint64_t)v83, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  type metadata accessor for UsoTask_noVerb_uso_NoEntity();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = (void *)OUTLINED_FUNCTION_26_1(v21, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_12_39(v23))
    {
      uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v24);
      OUTLINED_FUNCTION_16_8(&dword_0, v25, v26, "#NLUUserDialogActInputUtils task is not UsoTask_noVerb_uso_NoEntity");
      OUTLINED_FUNCTION_7_0();
    }

    return (_UNKNOWN **)_swiftEmptyArrayStorage;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  swift_release();
  if (!v83[0] || (uint64_t v15 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter(), swift_release(), !v15))
  {
    __swift_storeEnumTagSinglePayload(v3, 1, 1, v7);
    goto LABEL_16;
  }
  dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter();
  swift_release();
  if (__swift_getEnumTagSinglePayload(v3, 1, v7) == 1)
  {
LABEL_16:
    outlined destroy of FlowActivity?(v3, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
    swift_release();
    return (_UNKNOWN **)_swiftEmptyArrayStorage;
  }
  OUTLINED_FUNCTION_73();
  v16();
  OUTLINED_FUNCTION_59_0();
  v17();
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v13, v7);
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fourth(_:))
  {
    swift_release();
    uint64_t v19 = OUTLINED_FUNCTION_0_40();
    v20(v19);
    return &outlined read-only object #3 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  int v28 = v18;
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Second(_:))
  {
    swift_release();
    uint64_t v29 = OUTLINED_FUNCTION_0_40();
    v30(v29);
    return &outlined read-only object #1 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Beginning(_:))
  {
LABEL_22:
    swift_release();
    uint64_t v31 = OUTLINED_FUNCTION_0_40();
    v32(v31);
    return &outlined read-only object #0 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyFourth(_:))
  {
    swift_release();
    uint64_t v33 = OUTLINED_FUNCTION_0_40();
    v34(v33);
    return &outlined read-only object #23 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Seventeenth(_:))
  {
    swift_release();
    uint64_t v35 = OUTLINED_FUNCTION_0_40();
    v36(v35);
    return &outlined read-only object #16 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Eighth(_:))
  {
    swift_release();
    uint64_t v37 = OUTLINED_FUNCTION_0_40();
    v38(v37);
    return &outlined read-only object #7 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_ThirdToLast(_:))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v39 = OUTLINED_FUNCTION_16_2();
    *(_OWORD *)(v39 + 16) = xmmword_212160;
    unint64_t v40 = a1 - 3;
    if (__OFSUB__(a1, 3))
    {
      __break(1u);
LABEL_62:
      uint64_t v1 = swift_allocObject();
      *(_OWORD *)(v1 + 16) = xmmword_212170;
      *(void *)(v1 + 32) = a1 / 2 - 1;
      *(void *)(v1 + 40) = a1 / 2;
      goto LABEL_33;
    }
LABEL_31:
    uint64_t v1 = v39;
LABEL_32:
    *(void *)(v39 + 32) = v40;
LABEL_33:
    swift_release();
    uint64_t v41 = OUTLINED_FUNCTION_0_40();
    v42(v41);
    return (_UNKNOWN **)v1;
  }
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Sixth(_:))
  {
    swift_release();
    uint64_t v43 = OUTLINED_FUNCTION_0_40();
    v44(v43);
    return &outlined read-only object #5 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Nineteenth(_:))
  {
    swift_release();
    uint64_t v45 = OUTLINED_FUNCTION_0_40();
    v46(v45);
    return &outlined read-only object #18 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyFifth(_:))
  {
    swift_release();
    uint64_t v47 = OUTLINED_FUNCTION_0_40();
    v48(v47);
    return &outlined read-only object #24 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Ninth(_:))
  {
    swift_release();
    uint64_t v49 = OUTLINED_FUNCTION_0_40();
    v50(v49);
    return &outlined read-only object #8 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v18 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Eleventh(_:))
  {
    swift_release();
    uint64_t v51 = OUTLINED_FUNCTION_0_40();
    v52(v51);
    return &outlined read-only object #10 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v18 != enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_End(_:)) {
    goto LABEL_48;
  }
  do
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v39 = OUTLINED_FUNCTION_16_2();
    *(_OWORD *)(v39 + 16) = xmmword_212160;
    unint64_t v40 = a1 - 1;
    if (!__OFSUB__(a1, 1)) {
      goto LABEL_31;
    }
    __break(1u);
LABEL_48:
    if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fourteenth(_:))
    {
      swift_release();
      uint64_t v53 = OUTLINED_FUNCTION_0_40();
      v54(v53);
      return &outlined read-only object #13 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
    }
    if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_SecondToLast(_:))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v39 = OUTLINED_FUNCTION_16_2();
      *(_OWORD *)(v39 + 16) = xmmword_212160;
      unint64_t v40 = a1 - 2;
      if (!__OFSUB__(a1, 2)) {
        goto LABEL_31;
      }
      __break(1u);
    }
    if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyFirst(_:))
    {
      swift_release();
      uint64_t v55 = OUTLINED_FUNCTION_0_40();
      v56(v55);
      return &outlined read-only object #20 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
    }
    if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Middle(_:))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      if ((a1 & 0x8000000000000001) != 1) {
        goto LABEL_62;
      }
      uint64_t v39 = OUTLINED_FUNCTION_16_2();
      uint64_t v1 = v39;
      *(_OWORD *)(v39 + 16) = xmmword_212160;
      unint64_t v40 = (unint64_t)a1 >> 1;
      goto LABEL_32;
    }
    if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Thirteenth(_:))
    {
      swift_release();
      uint64_t v57 = OUTLINED_FUNCTION_0_40();
      v58(v57);
      return &outlined read-only object #12 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
    }
  }
  while (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Last(_:));
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentySecond(_:))
  {
    swift_release();
    uint64_t v59 = OUTLINED_FUNCTION_0_40();
    v60(v59);
    return &outlined read-only object #21 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Previous(_:)) {
    goto LABEL_67;
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fifteenth(_:))
  {
    swift_release();
    uint64_t v63 = OUTLINED_FUNCTION_0_40();
    v64(v63);
    return &outlined read-only object #14 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Current(_:)) {
    goto LABEL_67;
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Twentieth(_:))
  {
    swift_release();
    uint64_t v65 = OUTLINED_FUNCTION_0_40();
    v66(v65);
    return &outlined read-only object #19 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Fifth(_:))
  {
    swift_release();
    uint64_t v67 = OUTLINED_FUNCTION_0_40();
    v68(v67);
    return &outlined read-only object #4 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Sixteenth(_:))
  {
    swift_release();
    uint64_t v69 = OUTLINED_FUNCTION_0_40();
    v70(v69);
    return &outlined read-only object #15 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_First(_:)) {
    goto LABEL_22;
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Seventh(_:))
  {
    swift_release();
    uint64_t v71 = OUTLINED_FUNCTION_0_40();
    v72(v71);
    return &outlined read-only object #6 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Eighteenth(_:))
  {
    swift_release();
    uint64_t v73 = OUTLINED_FUNCTION_0_40();
    v74(v73);
    return &outlined read-only object #17 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_TwentyThird(_:))
  {
    swift_release();
    uint64_t v75 = OUTLINED_FUNCTION_0_40();
    v76(v75);
    return &outlined read-only object #22 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Twelfth(_:))
  {
    swift_release();
    uint64_t v77 = OUTLINED_FUNCTION_0_40();
    v78(v77);
    return &outlined read-only object #11 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Third(_:))
  {
    swift_release();
    uint64_t v79 = OUTLINED_FUNCTION_0_40();
    v80(v79);
    return &outlined read-only object #2 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  if (v28 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Next(_:))
  {
LABEL_67:
    swift_release();
    uint64_t v61 = OUTLINED_FUNCTION_0_40();
    v62(v61);
    return (_UNKNOWN **)_swiftEmptyArrayStorage;
  }
  int v81 = enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Tenth(_:);
  swift_release();
  Swift::Int v82 = *(void (**)(void))(v9 + 8);
  OUTLINED_FUNCTION_20_3();
  v82();
  if (v28 == v81) {
    return &outlined read-only object #9 of Siri_Nlu_External_UserDialogAct.listPositionValue(totalLength:);
  }
  OUTLINED_FUNCTION_20_3();
  v82();
  return (_UNKNOWN **)_swiftEmptyArrayStorage;
}

uint8_t *Siri_Nlu_External_UserDialogAct.executeCommonVoiceCommand.getter()
{
  SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandPagination_optional result = Siri_Nlu_External_UserDialogAct.userDialogTask.getter();
  if (!v0)
  {
    if (result)
    {
      swift_retain();
      static UsoTask_CodegenConverter.convert(task:)();
      swift_release_n();
      if (v4)
      {
        type metadata accessor for UsoTask_execute_common_VoiceCommand();
        if (swift_dynamicCast()) {
          return (uint8_t *)v2;
        }
        else {
          return 0;
        }
      }
      outlined destroy of FlowActivity?((uint64_t)v3, &demangling cache variable for type metadata for Any?);
    }
    return 0;
  }
  return result;
}

uint8_t *Siri_Nlu_External_UserDialogAct.userDialogTask.getter()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
    int v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_11;
    }
    char v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v20 = 0;
    uint64_t v21 = "NLUUserDialogAct does not have a user stated task";
    goto LABEL_10;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, v4);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v37 = v33;
    uint64_t v35 = v1;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v31 = v12 + 4;
    uint64_t v32 = v12;
    type metadata accessor for SiriNLUTypesPrintUtils();
    uint64_t v34 = v9;
    v36[3] = type metadata accessor for Siri_Nlu_External_UserStatedTask();
    v36[4] = lazy protocol witness table accessor for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserStatedTask and conformance Siri_Nlu_External_UserStatedTask, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserStatedTask);
    __swift_allocate_boxed_opaque_existential_1(v36);
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    uint64_t v13 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
    unint64_t v15 = v14;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
    v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v37);
    uint64_t v2 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v16 = v32;
    _os_log_impl(&dword_0, v10, v11, "UserStatedTask: %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v16 = (uint8_t *)(v5 + 8);
    v22(v7, v4);
  }

  unint64_t v23 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  if (!v2)
  {
    unint64_t v24 = v23;
    if (v23 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v30)
      {
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFFF8));
      if (v25)
      {
LABEL_16:
        if (v25 >= 2)
        {
          uint64_t v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v26, v27))
          {
            int v28 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)int v28 = 0;
            _os_log_impl(&dword_0, v26, v27, "More than one task found in UDA", v28, 2u);
            swift_slowDealloc();
          }
        }
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v24 & 0xC000000000000001) == 0);
        if ((v24 & 0xC000000000000001) != 0)
        {
          uint64_t v16 = (uint8_t *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v16 = *(uint8_t **)(v24 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        return v16;
      }
    }
    swift_bridgeObjectRelease();
    int v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19))
    {
LABEL_11:

      return 0;
    }
    char v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v20 = 0;
    uint64_t v21 = "No tasks found in UDA";
LABEL_10:
    _os_log_impl(&dword_0, v18, v19, v21, v20, 2u);
    swift_slowDealloc();
    goto LABEL_11;
  }
  return v16;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)()
{
  return Calendar.date(from:)();
}

uint64_t lazy protocol witness table accessor for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_40()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_40()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_37()
{
  return 0;
}

BOOL OUTLINED_FUNCTION_12_39(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_13_36()
{
  return *(void *)(v0 - 128);
}

uint64_t OUTLINED_FUNCTION_14_23()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_26_23()
{
  return *(void *)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_36_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_40_16()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_43_9()
{
  *(void *)(v1 - 88) = *(void *)(v0 + 224);
}

void OUTLINED_FUNCTION_44_13(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_46_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_50_11()
{
  return v0;
}

uint64_t WFInputDateFlow.exitValue.getter()
{
  type metadata accessor for WFInputDateFlow.State(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_20_0();
  uint64_t v3 = v2 - v1;
  swift_beginAccess();
  uint64_t v4 = OUTLINED_FUNCTION_30_0();
  outlined init with copy of WFInputDateFlow.State(v4, v5);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2) {
    return *(void *)v3;
  }
  if (EnumCaseMultiPayload == 1) {
    return *(void *)v3;
  }
  lazy protocol witness table accessor for type WFInputTextFlowError and conformance WFInputTextFlowError();
  uint64_t v7 = swift_allocError();
  outlined destroy of WFInputDateFlow.State(v3, (void (*)(void))type metadata accessor for WFInputDateFlow.State);
  return v7;
}

uint64_t type metadata accessor for WFInputDateFlow.State(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WFInputDateFlow.State);
}

uint64_t outlined init with copy of WFInputDateFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFInputDateFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t WFInputDateFlow.__allocating_init(request:deviceState:outputPublisher:locationProvider:dateTimeResolver:)(void *a1, void *a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t v10 = swift_allocObject();
  WFInputDateFlow.init(request:deviceState:outputPublisher:locationProvider:dateTimeResolver:)(a1, a2, a3, a4, a5);
  return v10;
}

void *WFInputDateFlow.init(request:deviceState:outputPublisher:locationProvider:dateTimeResolver:)(void *a1, void *a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = type metadata accessor for CATOption();
  uint64_t v11 = OUTLINED_FUNCTION_16(v10);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_20_0();
  _OWORD v6[2] = a1;
  outlined init with copy of DeviceState((uint64_t)a2, (uint64_t)(v6 + 3));
  uint64_t v24 = a3;
  outlined init with copy of DeviceState(a3, (uint64_t)(v6 + 8));
  outlined init with copy of DeviceState((uint64_t)a2, (uint64_t)v27);
  uint64_t v12 = one-time initialization token for shared;
  id v23 = a1;
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v22 = OUTLINED_FUNCTION_44_14();
  type metadata accessor for WorkflowRunnerCATsSimple();
  OUTLINED_FUNCTION_36_5();
  uint64_t v14 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATs();
  OUTLINED_FUNCTION_36_5();
  uint64_t v15 = OUTLINED_FUNCTION_44_14();
  type metadata accessor for RunCustomIntentCATsSimple();
  OUTLINED_FUNCTION_36_5();
  uint64_t v16 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_36_5();
  uint64_t v17 = OUTLINED_FUNCTION_44_14();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_36_5();
  uint64_t v18 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
  OUTLINED_FUNCTION_36_5();
  uint64_t v19 = OUTLINED_FUNCTION_44_14();
  type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject();
  v6[13] = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v27, v13, v22, v14, v15, v16, v17, v18, v19);
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t v20 = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(a2);

  __swift_destroy_boxed_opaque_existential_1Tm(v24);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a2);
  v6[14] = v20;
  type metadata accessor for WorkflowNLContextProvider();
  v6[15] = swift_allocObject();
  outlined init with take of AceServiceInvokerAsync(a4, (uint64_t)(v6 + 16));
  outlined init with take of AceServiceInvokerAsync(a5, (uint64_t)(v6 + 21));
  type metadata accessor for WFInputDateFlow.State(0);
  swift_storeEnumTagMultiPayload();
  return v6;
}

uint64_t WFInputDateFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v58 = v3;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v47 - v9;
  __chkstk_darwin(v8);
  uint64_t v53 = (char *)&v47 - v11;
  uint64_t v57 = type metadata accessor for WFInputDateFlow.State(0);
  OUTLINED_FUNCTION_6();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v51 = (char *)&v47 - v17;
  __chkstk_darwin(v16);
  uint64_t v55 = (uint64_t)&v47 - v18;
  type metadata accessor for Input();
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_20_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.voiceCommands);
  uint64_t v54 = a1;
  OUTLINED_FUNCTION_59_0();
  v21();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v52 = v10;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v50 = v2;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v49 = v7;
    v60[0] = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v48 = v15;
    uint64_t v28 = Input.description.getter();
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v60);
    uint64_t v15 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = OUTLINED_FUNCTION_42_17();
    v31(v30);
    _os_log_impl(&dword_0, v22, v23, "#WFInputDateFlow on input: %s", v26, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v49;
    OUTLINED_FUNCTION_7_0();
    uint64_t v2 = v50;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v32 = OUTLINED_FUNCTION_42_17();
    v33(v32);
  }

  uint64_t v34 = v56 + OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state;
  swift_beginAccess();
  uint64_t v35 = v55;
  outlined init with copy of WFInputDateFlow.State(v34, v55);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined destroy of WFInputDateFlow.State(v35, (void (*)(void))type metadata accessor for WFInputDateFlow.State);
  uint64_t v37 = v58;
  if (EnumCaseMultiPayload == 4)
  {
    Input.parse.getter();
    char v38 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
    uint64_t v39 = *(void (**)(void))(v37 + 8);
    OUTLINED_FUNCTION_32_23();
    v39();
    switch(v38)
    {
      case 2:
        swift_bridgeObjectRelease();
        return 0;
      case 3:
        goto LABEL_9;
      default:
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = 0;
        if (v40) {
          return result;
        }
LABEL_9:
        Input.parse.getter();
        OUTLINED_FUNCTION_59_0();
        v42();
        int v43 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v7, v2);
        if (v43 == enum case for Parse.NLv3IntentOnly(_:)
          || v43 == enum case for Parse.uso(_:) && (SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) != 0)
        {
          uint64_t v44 = (uint64_t)v51;
          uint64_t v45 = OUTLINED_FUNCTION_30_0();
          v46(v45);
          swift_storeEnumTagMultiPayload();
          outlined init with take of WFInputDateFlow.State(v44, (uint64_t)v15);
          OUTLINED_FUNCTION_23_6();
          outlined assign with take of WFInputDateFlow.State((uint64_t)v15, v34);
          swift_endAccess();
          OUTLINED_FUNCTION_32_23();
          v39();
          return 1;
        }
        OUTLINED_FUNCTION_32_23();
        v39();
        ((void (*)(char *, uint64_t))v39)(v7, v2);
        break;
    }
  }
  return 0;
}

uint64_t WFInputDateFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[24] = v2;
  v1[25] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_16(v3);
  v1[26] = OUTLINED_FUNCTION_13_0();
  v1[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v1[28] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[29] = v5;
  v1[30] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for Parse();
  v1[31] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[32] = v7;
  v1[33] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for WFInputDateFlow.State(0);
  v1[34] = v8;
  OUTLINED_FUNCTION_16(v8);
  v1[35] = OUTLINED_FUNCTION_13_0();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 328) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = v1[11];
  uint64_t v3 = v1[12];
  __swift_project_boxed_opaque_existential_1(v1 + 8, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v4;
  *uint64_t v4 = v0;
  v4[1] = WFInputDateFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v2, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 344) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[25] + v0[39];
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of WFInputDateFlow.State(v1, v2);
  swift_endAccess();
  static ExecuteResponse.ongoing(requireInput:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  OUTLINED_FUNCTION_7_42();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t WFInputDateFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_29_0();
  a23 = v25;
  a24 = v26;
  OUTLINED_FUNCTION_12_35();
  a22 = v24;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  v24[38] = __swift_project_value_buffer(v27, (uint64_t)static Logger.voiceCommands);
  swift_retain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v31 = v24[25];
  if (v30)
  {
    a10 = v24 + 22;
    a12 = v24 + 23;
    uint64_t v32 = swift_slowAlloc();
    a9 = swift_slowAlloc();
    a13 = a9;
    *(_DWORD *)uint64_t v32 = 136315394;
    uint64_t v33 = *(void **)(v31 + 16);
    id v34 = [v33 message];
    a11 = v24 + 13;
    if (v34)
    {
      uint64_t v35 = v34;
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;
    }
    else
    {
      unint64_t v38 = 0xE500000000000000;
      uint64_t v36 = 0x7974706D65;
    }
    v24[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v32 + 12) = 2080;
    id v39 = [v33 prompt];
    if (v39)
    {
      char v40 = v39;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v43 = v42;
    }
    else
    {
      unint64_t v43 = 0xE500000000000000;
      uint64_t v41 = 0x7974706D65;
    }
    v24[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v28, v29, "#WFInputDateFlow begins execution, message: %s, prompt: %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_release_n();
  }
  uint64_t v44 = v24[37];
  uint64_t v45 = v24[25];
  uint64_t v46 = OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state;
  v24[39] = OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state;
  uint64_t v47 = v45 + v46;
  swift_beginAccess();
  outlined init with copy of WFInputDateFlow.State(v47, v44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:

      uint64_t v58 = (void *)Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_5_3(v59)) {
        goto LABEL_23;
      }
      uint64_t v60 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v60);
      uint64_t v63 = "#WFInputDateFlow completed";
      goto LABEL_22;
    case 2u:
      swift_errorRelease();
      uint64_t v58 = (void *)Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_5_3(v64))
      {
        uint64_t v65 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v65);
        uint64_t v63 = "#WFInputDateFlow error state";
LABEL_22:
        OUTLINED_FUNCTION_23_0(&dword_0, v61, v62, v63);
        OUTLINED_FUNCTION_7_0();
      }
LABEL_23:

      static ExecuteResponse.complete()();
      goto LABEL_32;
    case 3u:
      id v66 = (void *)Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_5_3(v67))
      {
        os_log_type_t v68 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v68);
        OUTLINED_FUNCTION_23_0(&dword_0, v69, v70, "#WFInputDateFlow submitting output");
        OUTLINED_FUNCTION_7_0();
      }

      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      v24[40] = v71;
      *uint64_t v71 = v72;
      v71[1] = WFInputDateFlow.execute();
      OUTLINED_FUNCTION_18_2();
      return WFInputDateFlow.buildOutput()();
    case 4u:
      uint64_t v74 = (void *)Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_5_3(v75))
      {
        uint64_t v76 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v76);
        OUTLINED_FUNCTION_23_0(&dword_0, v77, v78, "#WFInputDateFlow waiting for response");
        OUTLINED_FUNCTION_7_0();
      }

      static ExecuteResponse.ongoing(requireInput:)();
LABEL_32:
      OUTLINED_FUNCTION_7_42();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_18_2();
      uint64_t result = v80(v79, v80, v81, v82, v83, v84, v85, v86, a9, a10, a11, a12, a13, a14, a15, a16);
      break;
    default:
      OUTLINED_FUNCTION_73();
      v48();
      uint64_t v49 = (void *)Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_5_3(v50))
      {
        uint64_t v51 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v51);
        OUTLINED_FUNCTION_23_0(&dword_0, v52, v53, "#WFInputDateFlow responseReceived");
        OUTLINED_FUNCTION_7_0();
      }

      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      v24[44] = v54;
      *uint64_t v54 = v55;
      v54[1] = WFInputDateFlow.execute();
      OUTLINED_FUNCTION_18_2();
      uint64_t result = WFInputDateFlow.buildDateFromParse(parse:)();
      break;
  }
  return result;
}

uint64_t WFInputDateFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  uint64_t v18 = v16[27];
  uint64_t v17 = v16[28];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v18, 1, v17);
  uint64_t v20 = v16[39];
  uint64_t v21 = (void *)v16[36];
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v22 = v16[25] + v20;
    outlined destroy of Any?(v18, &demangling cache variable for type metadata for Date?);
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_23_6();
    outlined assign with take of WFInputDateFlow.State((uint64_t)v21, v22);
    swift_endAccess();
    static ExecuteResponse.ongoing(requireInput:)();
    OUTLINED_FUNCTION_81();
    v23();
  }
  else
  {
    uint64_t v24 = v16[35];
    a9 = v16[34];
    a10 = v16 + 10;
    uint64_t v25 = v16[32];
    uint64_t v26 = v16[30];
    a12 = v16[31];
    a13 = v16[33];
    uint64_t v27 = v16[29];
    uint64_t v28 = v16[26];
    a11 = v16[24];
    uint64_t v29 = v16[25] + v20;
    OUTLINED_FUNCTION_73();
    v30();
    OUTLINED_FUNCTION_59_0();
    v31();
    __swift_storeEnumTagSinglePayload(v28, 0, 1, v17);
    id v32 = objc_allocWithZone((Class)WFInputDateDialogResponse);
    id v33 = @nonobjc WFInputDateDialogResponse.init(inputtedDate:cancelled:)(v28, 0);
    void *v21 = v33;
    swift_storeEnumTagMultiPayload();
    outlined init with take of WFInputDateFlow.State((uint64_t)v21, v24);
    OUTLINED_FUNCTION_23_6();
    id v34 = v33;
    outlined assign with take of WFInputDateFlow.State(v24, v29);
    swift_endAccess();
    static ExecuteResponse.ongoing(requireInput:)();

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v17);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a13, a12);
  }
  OUTLINED_FUNCTION_7_42();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_18_2();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t WFInputDateFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v12 = (_WORD *)OUTLINED_FUNCTION_33();
    *uint64_t v12 = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v16, v17, "#WFInputDateFlow error submitting output");
    OUTLINED_FUNCTION_7_0();
  }
  OUTLINED_FUNCTION_30_19();
  OUTLINED_FUNCTION_28_19();
  outlined init with take of WFInputDateFlow.State((uint64_t)v12, v13);
  OUTLINED_FUNCTION_23_6();
  swift_errorRetain();
  outlined assign with take of WFInputDateFlow.State(v13, (uint64_t)v14);
  swift_endAccess();
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  OUTLINED_FUNCTION_7_42();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

{
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_25_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v12 + 16);
  os_log_type_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v13 = (_WORD *)OUTLINED_FUNCTION_33();
    *uint64_t v13 = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v17, v18, "#WFInputDateFlow error submitting output");
    OUTLINED_FUNCTION_7_0();
  }
  OUTLINED_FUNCTION_30_19();
  OUTLINED_FUNCTION_28_19();
  outlined init with take of WFInputDateFlow.State((uint64_t)v13, v14);
  OUTLINED_FUNCTION_23_6();
  swift_errorRetain();
  outlined assign with take of WFInputDateFlow.State(v14, (uint64_t)v15);
  swift_endAccess();
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  OUTLINED_FUNCTION_7_42();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t WFInputDateFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t WFInputDateFlow.buildDateFromParse(parse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[19] = v2;
  v1[20] = v0;
  v1[18] = v3;
  uint64_t v4 = type metadata accessor for TimeZone();
  v1[21] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[22] = v5;
  v1[23] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for Calendar();
  v1[24] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[25] = v7;
  v1[26] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for Locale();
  v1[27] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[28] = v9;
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v1[30] = v10;
  OUTLINED_FUNCTION_16(v10);
  v1[31] = OUTLINED_FUNCTION_13_0();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_16(v11);
  v1[34] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserParse();
  v1[35] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[36] = v13;
  v1[37] = OUTLINED_FUNCTION_13_0();
  v1[38] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v1[39] = v14;
  OUTLINED_FUNCTION_1_0(v14);
  v1[40] = v15;
  v1[41] = OUTLINED_FUNCTION_25();
  uint64_t v16 = type metadata accessor for USOParse();
  v1[42] = v16;
  OUTLINED_FUNCTION_1_0(v16);
  v1[43] = v17;
  v1[44] = OUTLINED_FUNCTION_25();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_16(v18);
  v1[45] = OUTLINED_FUNCTION_25();
  uint64_t v19 = type metadata accessor for VoiceCommandsNLIntent(0);
  v1[46] = v19;
  OUTLINED_FUNCTION_16(v19);
  v1[47] = OUTLINED_FUNCTION_25();
  uint64_t v20 = type metadata accessor for NLIntent();
  v1[48] = v20;
  OUTLINED_FUNCTION_1_0(v20);
  v1[49] = v21;
  v1[50] = OUTLINED_FUNCTION_25();
  uint64_t v22 = type metadata accessor for Parse();
  v1[51] = v22;
  OUTLINED_FUNCTION_1_0(v22);
  v1[52] = v23;
  v1[53] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v24, v25, v26);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1 + 56;
  uint64_t v5 = v1 + 96;
  uint64_t v6 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v5);
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  outlined destroy of Any?(v3, &demangling cache variable for type metadata for LocationProviding?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v19 = v4[29];
  uint64_t v5 = v4[28];
  uint64_t v6 = v4[27];
  uint64_t v7 = v4[23];
  uint64_t v8 = v4[22];
  uint64_t v9 = v4[21];
  uint64_t v10 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v11 = v10;
  *(void *)(v12 + 448) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  OUTLINED_FUNCTION_81();
  v13();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v19, v6);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_28_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  uint64_t v23 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = OUTLINED_FUNCTION_30_0();
  outlined init with copy of Date?(v2, v3);
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = v0[43];
  uint64_t v7 = v0[44];
  uint64_t v10 = v0[41];
  uint64_t v9 = v0[42];
  uint64_t v12 = v0[39];
  uint64_t v11 = v0[40];
  uint64_t v13 = v0[32];
  if (v6)
  {
    uint64_t v21 = v0[44];
    uint64_t v14 = v0[31];
    uint64_t v20 = v0[42];
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    outlined init with copy of Date?(v13, v14);
    uint64_t v16 = String.init<A>(describing:)();
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Any?(v13, &demangling cache variable for type metadata for Date?);
    _os_log_impl(&dword_0, v4, v5, "#WFInputDateFlow: usoParse has date: %s", v15, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v21, v20);
  }
  else
  {

    outlined destroy of Any?(v13, &demangling cache variable for type metadata for Date?);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  outlined init with take of Date?(v0[33], v0[18]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v18();
}

uint64_t WFInputDateFlow.buildDateFromParse(parse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  uint64_t v18 = *(void *)(v16 + 416);
  uint64_t v17 = *(void *)(v16 + 424);
  uint64_t v19 = *(void *)(v16 + 408);
  OUTLINED_FUNCTION_59_0();
  v20();
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v17, v19);
  if (v21 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v22 = *(void *)(v16 + 400);
    uint64_t v23 = *(void *)(v16 + 384);
    uint64_t v24 = *(void *)(v16 + 392);
    uint64_t v25 = *(void *)(v16 + 376);
    (*(void (**)(void, void))(*(void *)(v16 + 416) + 96))(*(void *)(v16 + 424), *(void *)(v16 + 408));
    OUTLINED_FUNCTION_73();
    v26();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v25, v22, v23);
    if (one-time initialization token for voiceCommandDateTimeNode != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type WFInputDateFlow and conformance WFInputDateFlow((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
    IntentNodeTraversable.value<A>(forNode:)();
    *(void *)(v16 + 48) = 0;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    static Device.current.getter();
    static AceService.currentAsync.getter();
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v16 + 432) = v27;
    void *v27 = v28;
    v27[1] = WFInputDateFlow.buildDateFromParse(parse:);
    OUTLINED_FUNCTION_18_2();
    return static InputUtils.getDate(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)();
  }
  uint64_t v32 = *(void *)(v16 + 416);
  uint64_t v31 = *(void *)(v16 + 424);
  uint64_t v33 = *(void *)(v16 + 408);
  if (v21 != enum case for Parse.uso(_:))
  {
    uint64_t v50 = *(void *)(v16 + 144);
    uint64_t v51 = type metadata accessor for Date();
    __swift_storeEnumTagSinglePayload(v50, 1, 1, v51);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
LABEL_15:
    OUTLINED_FUNCTION_2_48();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_18_2();
    return v53(v52, v53, v54, v55, v56, v57, v58, v59, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  uint64_t v35 = *(void *)(v16 + 344);
  uint64_t v34 = *(void *)(v16 + 352);
  uint64_t v36 = *(void *)(v16 + 336);
  uint64_t v37 = *(void *)(v16 + 288);
  a12 = *(void *)(v16 + 280);
  a13 = *(void *)(v16 + 312);
  uint64_t v38 = *(void *)(v16 + 272);
  (*(void (**)(uint64_t, uint64_t))(v32 + 96))(v31, v33);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v34, v31, v36);
  USOParse.userParse.getter();
  uint64_t v39 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  uint64_t v40 = *(void (**)(void))(v37 + 8);
  OUTLINED_FUNCTION_81();
  v40();
  specialized Collection.first.getter(v39, v38);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v38, 1, a13) == 1)
  {
    outlined destroy of Any?(*(void *)(v16 + 272), &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
    uint64_t v42 = (void *)Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v43))
    {
      uint64_t v44 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v44);
      OUTLINED_FUNCTION_23_0(&dword_0, v45, v46, "#WFInputDateFlow: missing UDA");
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v47 = OUTLINED_FUNCTION_30();
    v48(v47);
    uint64_t v49 = type metadata accessor for Date();
    OUTLINED_FUNCTION_46_14(v49);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_73();
  v60();
  USOParse.userParse.getter();
  uint64_t v61 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  OUTLINED_FUNCTION_81();
  v40();
  unint64_t v62 = *(void *)(v61 + 16);
  swift_bridgeObjectRelease();
  if (v62 >= 2)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v64 = (void *)Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v65))
    {
      id v66 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v66);
      OUTLINED_FUNCTION_23_0(&dword_0, v67, v68, "#WFInputDateFlow: more than one task found in UDA");
      OUTLINED_FUNCTION_7_0();
    }
  }
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v16 + 160) + 24), *(void *)(*(void *)(v16 + 160) + 48));
  dispatch thunk of DeviceState.siriLocale.getter();
  static Calendar.current.getter();
  static TimeZone.current.getter();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v16 + 440) = v69;
  *uint64_t v69 = v70;
  v69[1] = WFInputDateFlow.buildDateFromParse(parse:);
  OUTLINED_FUNCTION_18_2();
  return Siri_Nlu_External_UserDialogAct.dateValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)(v71, v72, v73, v74, v75);
}

{
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  uint64_t v17 = *(void *)(v16 + 376);
  outlined destroy of Any?(*(void *)(v16 + 360), &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  outlined destroy of WFInputDateFlow.State(v17, (void (*)(void))type metadata accessor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_53_1();
  v18();
  OUTLINED_FUNCTION_2_48();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_18_2();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  void *v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  (*(void (**)(void, void))(v16[40] + 8))(v16[41], v16[39]);
  uint64_t v17 = OUTLINED_FUNCTION_30();
  v18(v17);
  swift_errorRelease();
  uint64_t v19 = type metadata accessor for Date();
  OUTLINED_FUNCTION_46_14(v19);
  OUTLINED_FUNCTION_2_48();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_18_2();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t WFInputDateFlow.buildOutput()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for DialogPhase();
  v1[5] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[6] = v5;
  v1[7] = OUTLINED_FUNCTION_13_0();
  v1[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest();
  v1[9] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[10] = v7;
  v1[11] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[12] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[13] = v9;
  v1[14] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  v1[15] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[16] = v11;
  v1[17] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(void);
  uint64_t v6;
  void *v7;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  (*(void (**)(void))(**(void **)(v0[3] + 120) + 208))();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_53_1();
  v5();
  if (v4)
  {
    OUTLINED_FUNCTION_45_12();
    uint64_t v11 = (uint64_t (*)(uint64_t))(*(void *)(v6 + 208) + **(int **)(v6 + 208));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[18] = v7;
    *uint64_t v7 = v0;
    v7[1] = WFInputDateFlow.buildOutput();
    return v11(v1);
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[24] = v9;
    *uint64_t v9 = v10;
    v9[1] = WFInputDateFlow.buildOutput();
    return WFInputDateFlow.buildOutput_prerfv2(_:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 152) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 160) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = OUTLINED_FUNCTION_19_23();
  v5(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v6();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 200) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_13_1();
  uint64_t v0 = OUTLINED_FUNCTION_19_23();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v2();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v0 = OUTLINED_FUNCTION_18_26();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v0 = OUTLINED_FUNCTION_18_26();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

uint64_t WFInputDateFlow.buildOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_35();
  uint64_t v17 = (void *)v16[20];
  uint64_t v18 = v16[16];
  uint64_t v37 = v16[17];
  uint64_t v35 = v16[4];
  uint64_t v36 = v16[15];
  static DialogPhase.confirmed.getter();
  id v19 = [v17 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_59_0();
  v20();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  OUTLINED_FUNCTION_53_1();
  v21();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v35, v37, v36);
  __swift_storeEnumTagSinglePayload(v35, 0, 1, v36);
  OutputGenerationManifest.nlContextUpdate.setter();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v16[21] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_211C70;
  *(void *)(v22 + 32) = v17;
  uint64_t v39 = v22;
  specialized Array._endMutation()();
  v16[22] = v39;
  uint64_t v38 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
  id v23 = v17;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v16[23] = v24;
  *uint64_t v24 = v25;
  v24[1] = WFInputDateFlow.buildOutput();
  OUTLINED_FUNCTION_18_2();
  return v29(v26, v27, v28, v29, v30, v31, v32, v33, v35, v36, v38, v17, v39, a14, a15, a16);
}

uint64_t WFInputDateFlow.buildOutput_prerfv2(_:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[8] = v2;
  v1[9] = v0;
  v1[7] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v4);
  v1[10] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v1[11] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[12] = v6;
  v1[13] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_45_12();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 216) + **(int **)(v2 + 216));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v1 + 112) = v3;
  *uint64_t v3 = v4;
  v3[1] = WFInputDateFlow.buildOutput_prerfv2(_:);
  uint64_t v5 = *(void *)(v1 + 104);
  return v7(v5, v0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(uint64_t **)(v0 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 72) + 24), *(void *)(*(void *)(v0 + 72) + 48));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v2, v4);
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v4);
  uint64_t v6 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v3[3] = v6;
  void v3[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v3);
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of Any?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_53_1();
  v8(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v9();
}

uint64_t WFInputDateFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 168);
  outlined destroy of WFInputDateFlow.State(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin15WFInputDateFlow_state, (void (*)(void))type metadata accessor for WFInputDateFlow.State);
  return v0;
}

uint64_t WFInputDateFlow.__deallocating_deinit()
{
  WFInputDateFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance WFInputDateFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFInputDateFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t protocol witness for Flow.execute() in conformance WFInputDateFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 200) + **(int **)(**(void **)v1 + 200));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFInputDateFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 176))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t outlined init with take of WFInputDateFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFInputDateFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of WFInputDateFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFInputDateFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id @nonobjc WFInputDateDialogResponse.init(inputtedDate:cancelled:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Date();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  id v8 = [v3 initWithInputtedDate:isa cancelled:a2 & 1];

  return v8;
}

uint64_t type metadata accessor for WFInputDateFlow(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WFInputDateFlow);
}

unint64_t lazy protocol witness table accessor for type WFInputDateFlowError and conformance WFInputDateFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFInputDateFlowError and conformance WFInputDateFlowError;
  if (!lazy protocol witness table cache variable for type WFInputDateFlowError and conformance WFInputDateFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFInputDateFlowError and conformance WFInputDateFlowError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for WFInputDateFlowError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B1B24);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for WFInputDateFlowError()
{
  return &type metadata for WFInputDateFlowError;
}

uint64_t ObjC metadata update function for WFInputDateFlow()
{
  return type metadata accessor for WFInputDateFlow(0);
}

uint64_t type metadata completion function for WFInputDateFlow()
{
  uint64_t result = type metadata accessor for WFInputDateFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for WFInputDateFlow.State(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = *a2;
      swift_errorRetain();
      *(void *)a1 = v10;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = *a2;
      *(void *)a1 = *a2;
      uint64_t v12 = v11;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
      uint64_t v8 = type metadata accessor for Parse();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for WFInputDateFlow.State(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease();
      break;
    case 1:
      int v5 = *a1;

      break;
    case 0:
      uint64_t v3 = type metadata accessor for Parse();
      unsigned int v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
  }
}

void **initializeWithCopy for WFInputDateFlow.State(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = *a2;
    swift_errorRetain();
    *a1 = v8;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    id v10 = v9;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = type metadata accessor for Parse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for WFInputDateFlow.State(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of WFInputDateFlow.State((uint64_t)a1, (void (*)(void))type metadata accessor for WFInputDateFlow.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = *a2;
      swift_errorRetain();
      *a1 = v8;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = *a2;
      *a1 = *a2;
      id v10 = v9;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = type metadata accessor for Parse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for WFInputDateFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Parse();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for WFInputDateFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of WFInputDateFlow.State((uint64_t)a1, (void (*)(void))type metadata accessor for WFInputDateFlow.State);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Parse();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for WFInputDateFlow.State()
{
  uint64_t result = type metadata accessor for Parse();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type WFInputDateFlow and conformance WFInputDateFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of WFInputDateFlow.State(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_2_48()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_7_42()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_18_26()
{
  return *(void *)(v0 + 136);
}

uint64_t OUTLINED_FUNCTION_19_23()
{
  return *(void *)(v0 + 136);
}

uint64_t OUTLINED_FUNCTION_28_19()
{
  *unint64_t v1 = v0;
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_30_19()
{
}

uint64_t OUTLINED_FUNCTION_42_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_44_14()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_46_14(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11SiriKitFlow11DisplayHintVs5NeverOTg5(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = type metadata accessor for DisplayHint();
  OUTLINED_FUNCTION_0_2();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = _swiftEmptyArrayStorage;
  if (v12)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v14 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v15 = *v14;
      v21[0] = *(v14 - 1);
      v21[1] = v15;
      swift_bridgeObjectRetain();
      a1(v21);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      uint64_t v22 = v13;
      unint64_t v17 = v13[2];
      unint64_t v16 = v13[3];
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v13 = v22;
      }
      v14 += 2;
      v13[2] = v17 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v17, v11, v19);
      if (!--v12) {
        return v13;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v13;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVsAE_pTg5(void (*a1)(void *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = a3 + 32; ; i += 32)
    {
      a1(__src, i, &v13);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v15 = v6;
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
        uint64_t v6 = v15;
      }
      _OWORD v6[2] = v11 + 1;
      memcpy(&v6[11 * v11 + 4], __src, 0x51uLL);
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

void *INIntentResolutionResult.getDisplayHints(intent:parameter:locale:shouldIncludeOrdinalReference:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = INIntentResolutionResult.safeJSONDictionaryRepresentation(for:parameterName:)((uint64_t)a1);
  id v11 = [a1 _codableDescription];
  id v12 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byKeyPath:)(a2, a3, v11);

  if (v12)
  {
    self;
    uint64_t v13 = (void *)swift_dynamicCastObjCClass();
    if (v13)
    {
      uint64_t v14 = v13;
      if ([v13 valueType] == (char *)&stru_20.vmsize + 1)
      {
        type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult);
        uint64_t v15 = static INIntentResolutionResult.getDisplayHintsForEnum(attribute:dictionary:locale:shouldIncludeOrdinalReference:)(v14, v10, a4, a5 & 1);
        swift_bridgeObjectRelease();

        return v15;
      }
    }
  }
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult);
  unint64_t v17 = static INIntentResolutionResult.getInferredDisplayHints(dictionary:shouldIncludeOrdinalReference:)(v10, a5 & 1);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t static INIntentResolutionResult.makeAsIdString(input:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (OUTLINED_FUNCTION_30_20())
  {
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult);
    uint64_t v1 = static INIntentResolutionResult.encodeDictionary(input:)();
  }
  else
  {
    if (!OUTLINED_FUNCTION_30_20())
    {
      uint64_t v2 = 0;
      goto LABEL_7;
    }
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult);
    uint64_t v1 = static INIntentResolutionResult.base64FromString(string:)();
  }
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v2;
}

void *static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)(a2, a3);
  v7[2] = a1;
  int64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11SiriKitFlow11DisplayHintVs5NeverOTg5((void (*)(void *))partial apply for closure #1 in static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:), (uint64_t)v7, (uint64_t)v4);
  swift_bridgeObjectRelease();
  return v5;
}

void *static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)(unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
  if (one-time initialization token for NUMBERICREFERENCENODEVALUES != -1) {
    goto LABEL_30;
  }
LABEL_3:
  if (*(void *)(static InputUtils.NUMBERICREFERENCENODEVALUES + 16) > a1)
  {
    uint64_t v8 = static InputUtils.NUMBERICREFERENCENODEVALUES + 16 * a1;
    uint64_t v4 = *(void *)(v8 + 32);
    uint64_t v2 = *(void *)(v8 + 40);
    swift_bridgeObjectRetain();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v10 = v9;
    unint64_t v5 = v9[2];
    unint64_t v11 = v9[3];
    unint64_t v3 = v5 + 1;
    if (v5 >= v11 >> 1) {
      goto LABEL_32;
    }
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v10 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (__OFSUB__(a2, 1))
    {
      __break(1u);
LABEL_30:
      swift_once();
      goto LABEL_3;
    }
    if (a2 - 1 == a1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_4_40();
        uint64_t v10 = v20;
      }
      OUTLINED_FUNCTION_2_49();
      if (v13)
      {
        OUTLINED_FUNCTION_3_40();
        uint64_t v10 = v21;
      }
      v10[2] = a1;
      uint64_t v14 = &v10[2 * a2];
      id v14[4] = 1953718636;
      uint64_t v15 = v14 + 4;
      unint64_t v16 = 0xE400000000000000;
      goto LABEL_27;
    }
    unint64_t v11 = a2 - 2;
    if (!__OFSUB__(a2, 2)) {
      break;
    }
    __break(1u);
LABEL_32:
    OUTLINED_FUNCTION_25_18(v11);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v10 = v22;
LABEL_5:
    v10[2] = v3;
    id v12 = &v10[2 * v5];
    v12[4] = v4;
    v12[5] = v2;
  }
  if (v11 == a1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_4_40();
      uint64_t v10 = v23;
    }
    OUTLINED_FUNCTION_2_49();
    if (v13)
    {
      OUTLINED_FUNCTION_3_40();
      uint64_t v10 = v24;
    }
    v10[2] = a1;
    unint64_t v17 = &v10[2 * a2];
    _OWORD v17[4] = 0x6F54646E6F636573;
    uint64_t v15 = v17 + 4;
    unint64_t v16 = 0xEC0000007473614CLL;
    goto LABEL_27;
  }
  if (__OFSUB__(a2, 3))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (a2 - 3 != a1) {
    return v10;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_34:
    OUTLINED_FUNCTION_4_40();
    uint64_t v10 = v25;
  }
  OUTLINED_FUNCTION_2_49();
  if (v13)
  {
    OUTLINED_FUNCTION_3_40();
    uint64_t v10 = v26;
  }
  v10[2] = a1;
  uint64_t v18 = &v10[2 * a2];
  v18[4] = 0x4C6F546472696874;
  uint64_t v15 = v18 + 4;
  unint64_t v16 = 0xEB00000000747361;
LABEL_27:
  v15[1] = v16;
  return v10;
}

id static INIntentResolutionResult.getCodableEnumValueFromAny(item:attribute:)(uint64_t a1, void *a2)
{
  id v4 = (id)type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_0_2();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = v9 - v8;
  outlined init with copy of Any(a1, (uint64_t)&v37);
  if (!OUTLINED_FUNCTION_6_41())
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    uint64_t v19 = (uint8_t *)__swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_34_9(v25)) {
      goto LABEL_22;
    }
    uint64_t v26 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_22_29(v26);
    id v23 = "Unable to convert enum item to a string";
    goto LABEL_21;
  }
  static String.Encoding.utf8.getter();
  uint64_t v11 = String.data(using:allowLossyConversion:)();
  unint64_t v13 = v12;
  (*(void (**)(uint64_t, id))(v6 + 8))(v10, v4);
  if (v13 >> 60 == 15) {
    goto LABEL_17;
  }
  uint64_t v14 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v37 = 0;
  id v4 = [v14 JSONObjectWithData:isa options:0 error:&v37];

  if (!v4)
  {
    id v27 = (id)v37;
    char v28 = _convertNSErrorToError(_:)();

    LOBYTE(v4) = v28;
    swift_willThrow();
    outlined consume of Data?(v11, v13);
    swift_errorRelease();
    goto LABEL_17;
  }
  id v16 = (id)v37;
  _bridgeAnyObjectToAny(_:)();
  outlined consume of Data?(v11, v13);
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_6_41() & 1) == 0)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    uint64_t v19 = (uint8_t *)__swift_project_value_buffer(v29, (uint64_t)static Logger.voiceCommands);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_34_9(v30)) {
      goto LABEL_22;
    }
    uint64_t v31 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_22_29(v31);
    id v23 = "Unable to convert enum string to a dictionary";
    goto LABEL_21;
  }
  LOBYTE(v4) = v35;
  swift_bridgeObjectRelease();
  specialized Dictionary.subscript.getter(0x65756C6176, 0xE500000000000000, v35, &v37);
  swift_bridgeObjectRelease();
  if (!v38)
  {
    outlined destroy of FlowActivity?((uint64_t)&v37, &demangling cache variable for type metadata for Any?);
    goto LABEL_25;
  }
  if ((OUTLINED_FUNCTION_6_41() & 1) == 0)
  {
LABEL_25:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v19 = (uint8_t *)__swift_project_value_buffer(v32, (uint64_t)static Logger.voiceCommands);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_34_9(v33)) {
      goto LABEL_22;
    }
    uint64_t v34 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_22_29(v34);
    id v23 = "Unable to convert value string from enum dictionary";
    goto LABEL_21;
  }
  id result = outlined bridged method (mbnn) of @objc INCodableEnumAttribute.value(withName:)(v35, v36, a2);
  if (result) {
    return result;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = (uint8_t *)__swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_34_9(v21))
  {
    uint64_t v22 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_22_29(v22);
    id v23 = "Unable to convert enum value string to INCodableEnumValue";
LABEL_21:
    _os_log_impl(&dword_0, v20, (os_log_type_t)v4, v23, v19, 2u);
    swift_slowDealloc();
  }
LABEL_22:

  return 0;
}

unint64_t static INIntentResolutionResult.getSynonymsForEnum(enumValue:language:)(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = outlined bridged method (pb) of @objc INCodableEnumValue.synonyms.getter(a1);
  if (!v4) {
    return (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v35) {
      goto LABEL_34;
    }
  }
  else if (!*(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8)))
  {
    goto LABEL_34;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for INCodableEnumValueSynonym);
    swift_bridgeObjectRetain();
    uint64_t v9 = Array.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v6, v7, "Getting synonyms for disambiguation item: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t result = outlined bridged method (pb) of @objc INCodableEnumValue.synonyms.getter(a1);
  if (!result) {
    goto LABEL_38;
  }
  unint64_t v13 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
  uint64_t v14 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8));
  if (!v14)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    return (unint64_t)_swiftEmptyArrayStorage;
  }
LABEL_12:
  if (v14 >= 1)
  {
    uint64_t v15 = 0;
    id v16 = _swiftEmptyArrayStorage;
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(v13 + 8 * v15 + 32);
      }
      uint64_t v18 = v17;
      uint64_t v19 = outlined bridged method (mbgnb) of @objc INCodableEnumValueSynonym.localizedSynonym(forLanguage:)(a2, a3, v17, (SEL *)&selRef_localizedSynonymForLanguage_);
      if (v20)
      {
        uint64_t v21 = v19;
        uint64_t v22 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_12_40();
          id v16 = v31;
        }
        unint64_t v23 = v16[2];
        if (v23 >= v16[3] >> 1)
        {
          OUTLINED_FUNCTION_18_27();
          id v16 = v32;
        }
        void v16[2] = v23 + 1;
        uint64_t v24 = &v16[2 * v23];
        void v24[4] = v21;
        v24[5] = v22;
      }
      uint64_t v25 = outlined bridged method (mbgnb) of @objc INCodableEnumValueSynonym.localizedSynonym(forLanguage:)(a2, a3, v18, (SEL *)&selRef_localizedPronunciationHintForLanguage_);
      if (v26)
      {
        uint64_t v27 = v25;
        uint64_t v28 = v26;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_12_40();
          id v16 = v33;
        }
        unint64_t v29 = v16[2];
        if (v29 >= v16[3] >> 1)
        {
          OUTLINED_FUNCTION_18_27();
          id v16 = v34;
        }
        void v16[2] = v29 + 1;
        os_log_type_t v30 = &v16[2 * v29];
        v30[4] = v27;
        v30[5] = v28;
      }
      ++v15;
    }
    while (v14 != v15);
    swift_bridgeObjectRelease();
    return (unint64_t)v16;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

const char *INIntentResolutionResult.LAST.unsafeMutableAddressor()
{
  return "last";
}

uint64_t static INIntentResolutionResult.LAST.getter()
{
  return 1953718636;
}

const char *INIntentResolutionResult.SECONDTOLAST.unsafeMutableAddressor()
{
  return "secondToLast";
}

uint64_t static INIntentResolutionResult.SECONDTOLAST.getter()
{
  return 0x6F54646E6F636573;
}

const char *INIntentResolutionResult.THIRDTOLAST.unsafeMutableAddressor()
{
  return "thirdToLast";
}

uint64_t static INIntentResolutionResult.THIRDTOLAST.getter()
{
  return 0x4C6F546472696874;
}

void one-time initialization function for interestingFields()
{
  static INIntentResolutionResult.interestingFields = (uint64_t)&outlined read-only object #0 of one-time initialization function for interestingFields;
}

uint64_t *INIntentResolutionResult.interestingFields.unsafeMutableAddressor()
{
  if (one-time initialization token for interestingFields != -1) {
    swift_once();
  }
  return &static INIntentResolutionResult.interestingFields;
}

uint64_t static INIntentResolutionResult.interestingFields.getter()
{
  if (one-time initialization token for interestingFields != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void *static INIntentResolutionResult.getDisplayHintsForEnum(attribute:dictionary:locale:shouldIncludeOrdinalReference:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v158 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v8 = OUTLINED_FUNCTION_16(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_50_1();
  uint64_t v181 = v9;
  uint64_t v171 = type metadata accessor for DisplayHint();
  OUTLINED_FUNCTION_0_2();
  uint64_t v159 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_51_0();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin(v15);
  v163 = (char *)&v134 - v16;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v134 - v18;
  uint64_t v182 = type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_0_2();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_25_6();
  uint64_t v170 = v23;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v24);
  BOOL v180 = (char *)&v134 - v25;
  OUTLINED_FUNCTION_25_7();
  uint64_t v27 = __chkstk_darwin(v26);
  unint64_t v29 = (char *)&v134 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v134 - v30;
  uint64_t v143 = type metadata accessor for Locale.Language();
  OUTLINED_FUNCTION_0_2();
  BOOL v183 = v32;
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_50_1();
  uint64_t v142 = v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  uint64_t v36 = OUTLINED_FUNCTION_16(v35);
  __chkstk_darwin(v36);
  OUTLINED_FUNCTION_50_1();
  uint64_t v141 = v37;
  uint64_t v147 = type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_0_2();
  uint64_t v39 = v38;
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_50_1();
  uint64_t v162 = v41;
  if (*(void *)(a2 + 16))
  {
    unint64_t v42 = OUTLINED_FUNCTION_5_37();
    if ((v43 & 1) != 0
      && (OUTLINED_FUNCTION_17_21(v42),
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]),
          OUTLINED_FUNCTION_24_23()))
    {
      uint64_t v44 = v184;
    }
    else
    {
      uint64_t v44 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    uint64_t v44 = _swiftEmptyArrayStorage;
  }
  uint64_t v164 = (void *)v44[2];
  if (v164)
  {
    uint64_t v144 = v14;
    char v140 = a1;
    uint64_t v138 = a3;
    uint64_t v145 = 0;
    uint64_t v168 = v44 + 4;
    uint64_t v160 = v39 + 8;
    BOOL v137 = v183 + 1;
    v177 = (void (**)(uint64_t, char *, uint64_t))(v21 + 16);
    uint64_t v156 = v159 + 16;
    uint64_t v176 = v159 + 32;
    unint64_t v175 = (void (**)(uint64_t))(v21 + 8);
    unint64_t v45 = 0;
    uint64_t v153 = v159 + 8;
    uint64_t v166 = (char *)&type metadata for Any + 8;
    long long v136 = xmmword_212160;
    unint64_t v155 = 0x8000000000228010;
    unint64_t v154 = 0x8000000000227F50;
    unint64_t v169 = 0x8000000000227F30;
    uint64_t v165 = _swiftEmptyArrayStorage;
    unint64_t v157 = v19;
    uint64_t v46 = v182;
    OUTLINED_FUNCTION_28_20();
    uint64_t v48 = v47;
    OUTLINED_FUNCTION_31_19();
    uint64_t v152 = v49;
    while (1)
    {
      if (v45 >= *(void *)(v48 + 16))
      {
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
      }
      if (!*(void *)(v168[v45] + 16)) {
        break;
      }
      swift_bridgeObjectRetain();
      unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(0x616C756261636F76, 0xEF65756C61567972);
      if (v51)
      {
        OUTLINED_FUNCTION_17_21(v50);
      }
      else
      {
        long long v186 = 0u;
        long long v187 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v187 + 1)) {
        goto LABEL_19;
      }
      if (swift_dynamicCast())
      {
        unint64_t v167 = v45;
        uint64_t v52 = (uint64_t)v184;
        uint64_t v53 = v185;
        static String.Encoding.utf8.getter();
        BOOL v183 = (void *)v52;
        a1 = (void *)String.data(using:allowLossyConversion:)();
        unint64_t v55 = v54;
        OUTLINED_FUNCTION_66();
        v57(v56);
        if (v55 >> 60 == 15)
        {
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
        uint64_t v58 = self;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        *(void *)&long long v186 = 0;
        id v60 = [v58 JSONObjectWithData:isa options:0 error:&v186];

        if (v60)
        {
          id v61 = (id)v186;
          _bridgeAnyObjectToAny(_:)();
          outlined consume of Data?((uint64_t)a1, v55);
          swift_unknownObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
          if (OUTLINED_FUNCTION_24_23())
          {
            uint64_t v62 = v171;
            a1 = v164;
            unint64_t v45 = v167;
            if (v184[2] && (unint64_t v63 = OUTLINED_FUNCTION_29_22(), (v64 & 1) != 0))
            {
              OUTLINED_FUNCTION_17_21(v63);
            }
            else
            {
              long long v186 = 0u;
              long long v187 = 0u;
            }
            swift_bridgeObjectRelease();
            if (!*((void *)&v187 + 1))
            {
              swift_bridgeObjectRelease();
              outlined destroy of FlowActivity?((uint64_t)&v186, &demangling cache variable for type metadata for Any?);
              goto LABEL_85;
            }
            if ((swift_dynamicCast() & 1) == 0) {
              goto LABEL_84;
            }
            uint64_t v67 = (uint64_t)v184;
            uint64_t v66 = v185;
            id v135 = outlined bridged method (mbgnn) of @objc INCodableEnumAttribute.value(withName:)((uint64_t)v184, v185, v140);
            if (v135)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = v136;
              *(void *)(inited + 32) = v67;
              *(void *)(inited + 40) = v66;
              BOOL v184 = (void *)inited;
              Locale.language.getter();
              uint64_t v69 = v141;
              Locale.Language.languageCode.getter();
              OUTLINED_FUNCTION_14_14();
              OUTLINED_FUNCTION_66();
              v71(v70);
              uint64_t v72 = type metadata accessor for Locale.LanguageCode();
              if (__swift_getEnumTagSinglePayload(v69, 1, v72) == 1)
              {
                outlined destroy of FlowActivity?(v69, &demangling cache variable for type metadata for Locale.LanguageCode?);
                uint64_t v73 = 0xE200000000000000;
                uint64_t v74 = 28261;
              }
              else
              {
                uint64_t v75 = Locale.LanguageCode.identifier.getter();
                uint64_t v73 = v76;
                uint64_t v77 = v69;
                uint64_t v74 = v75;
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 8))(v77, v72);
              }
              uint64_t v78 = v135;
              uint64_t v179 = v73;
              outlined bridged method (mbgnb) of @objc INCodableEnumValueSynonym.localizedSynonym(forLanguage:)(v74, v73, v135, (SEL *)&selRef_localizedDisplayNameForLanguage_);
              OUTLINED_FUNCTION_28_20();
              if (v80)
              {
                uint64_t v81 = v80;
                uint64_t v173 = v79;
                uint64_t v82 = (uint64_t)v184;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v178 = v74;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                  uint64_t v82 = v131;
                }
                unint64_t v85 = *(void *)(v82 + 16);
                unint64_t v84 = *(void *)(v82 + 24);
                if (v85 >= v84 >> 1)
                {
                  OUTLINED_FUNCTION_25_18(v84);
                  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                  uint64_t v82 = v132;
                }
                *(void *)(v82 + 16) = v85 + 1;
                uint64_t v86 = v82 + 16 * v85;
                *(void *)(v86 + 32) = v173;
                *(void *)(v86 + 40) = v81;
                BOOL v184 = (void *)v82;
                OUTLINED_FUNCTION_28_20();
                uint64_t v78 = v135;
                uint64_t v74 = v178;
              }
              static INIntentResolutionResult.getSynonymsForEnum(enumValue:language:)(v78, v74, v179);
              swift_bridgeObjectRelease();
              a1 = v78;
              specialized Array.append<A>(contentsOf:)();
              *((void *)&v187 + 1) = &type metadata for String;
              *(void *)&long long v186 = v183;
              *((void *)&v186 + 1) = v53;
              uint64_t v150 = static INIntentResolutionResult.makeAsIdString(input:)((uint64_t)&v186);
              uint64_t v151 = v87;
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v186);
              uint64_t v149 = v184[2];
              if (v149)
              {
                uint64_t v88 = 0;
                uint64_t v134 = (uint64_t)v184;
                uint64_t v148 = v184 + 4;
                a1 = v164;
                uint64_t v139 = v29;
                char v174 = v31;
                while (1)
                {
                  uint64_t v161 = v88;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  SemanticValue.init(string:label:)();
                  SemanticValue.init(string:label:)();
                  uint64_t v89 = *v177;
                  uint64_t v90 = v181;
                  (*v177)(v181, v31, v46);
                  __swift_storeEnumTagSinglePayload(v90, 0, 1, v46);
                  uint64_t v91 = (uint64_t)v180;
                  uint64_t v173 = v89;
                  v89((uint64_t)v180, v29, v46);
                  DisplayHint.init(idValue:displayValue:)();
                  OUTLINED_FUNCTION_14_14();
                  v92(v163, v19, v62);
                  uint64_t v93 = (uint64_t)v165;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v93 = OUTLINED_FUNCTION_10_38(0, *(void *)(v93 + 16) + 1);
                  }
                  OUTLINED_FUNCTION_2_49();
                  if (v120) {
                    uint64_t v93 = OUTLINED_FUNCTION_10_38(v94 > 1, v91);
                  }
                  *(void *)(v93 + 16) = v91;
                  OUTLINED_FUNCTION_19_24();
                  uint64_t v179 = v95;
                  uint64_t v178 = *(void *)(v96 + 72);
                  uint64_t v172 = *(void *)(v96 + 32);
                  OUTLINED_FUNCTION_73();
                  v98(v97);
                  if (v158) {
                    break;
                  }
                  uint64_t v165 = (void *)v93;
                  uint64_t v19 = v157;
                  uint64_t v46 = v182;
                  uint64_t v31 = v174;
LABEL_81:
                  unint64_t v45 = v167;
                  uint64_t v125 = v161 + 1;
                  OUTLINED_FUNCTION_14_14();
                  OUTLINED_FUNCTION_66();
                  v127(v126);
                  uint64_t v128 = *v175;
                  OUTLINED_FUNCTION_27_25();
                  v128(v129);
                  OUTLINED_FUNCTION_27_25();
                  v128(v130);
                  uint64_t v88 = v125;
                  if (v125 == v149)
                  {

                    swift_bridgeObjectRelease();
                    OUTLINED_FUNCTION_28_20();
                    goto LABEL_84;
                  }
                }
                uint64_t v99 = static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)(v167, (uint64_t)a1);
                uint64_t v100 = v99[2];
                if (v100)
                {
                  uint64_t v165 = (void *)v93;
                  *(void *)&long long v186 = _swiftEmptyArrayStorage;
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v100, 0);
                  BOOL v183 = (void *)v186;
                  unint64_t v146 = v99;
                  uint64_t v101 = v99 + 5;
                  uint64_t v102 = v144;
                  do
                  {
                    swift_bridgeObjectRetain_n();
                    uint64_t v103 = v180;
                    SemanticValue.init(string:label:)();
                    uint64_t v104 = v181;
                    uint64_t v105 = v182;
                    uint64_t v106 = v102;
                    uint64_t v107 = v173;
                    v173(v181, v174, v182);
                    __swift_storeEnumTagSinglePayload(v104, 0, 1, v105);
                    v107(v170, v103, v105);
                    uint64_t v102 = v106;
                    DisplayHint.init(idValue:displayValue:)();
                    OUTLINED_FUNCTION_14_14();
                    OUTLINED_FUNCTION_66();
                    v109(v108);
                    swift_bridgeObjectRelease();
                    *(void *)&long long v186 = v183;
                    unint64_t v111 = v183[2];
                    unint64_t v110 = v183[3];
                    a1 = (void *)(v111 + 1);
                    if (v111 >= v110 >> 1)
                    {
                      char v114 = OUTLINED_FUNCTION_25_18(v110);
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v114, v111 + 1, 1);
                      BOOL v183 = (void *)v186;
                    }
                    v101 += 2;
                    v183[2] = a1;
                    uint64_t v62 = v171;
                    OUTLINED_FUNCTION_73();
                    v113(v112);
                    --v100;
                  }
                  while (v100);
                  swift_bridgeObjectRelease();
                  unint64_t v29 = v139;
                  OUTLINED_FUNCTION_31_19();
                  uint64_t v93 = (uint64_t)v165;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  BOOL v183 = _swiftEmptyArrayStorage;
                }
                uint64_t v115 = v183[2];
                uint64_t v116 = *(void *)(v93 + 16);
                uint64_t v117 = v116 + v115;
                uint64_t v19 = v157;
                uint64_t v31 = v174;
                if (__OFADD__(v116, v115)) {
                  goto LABEL_88;
                }
                if (v117 > *(void *)(v93 + 24) >> 1)
                {
                  if (v116 <= v117) {
                    uint64_t v124 = v116 + v115;
                  }
                  else {
                    uint64_t v124 = *(void *)(v93 + 16);
                  }
                  uint64_t v93 = OUTLINED_FUNCTION_10_38(1, v124);
                  if (!v183[2]) {
                    goto LABEL_79;
                  }
LABEL_66:
                  uint64_t v118 = *(void *)(v93 + 16);
                  if ((*(void *)(v93 + 24) >> 1) - v118 < v115) {
                    goto LABEL_90;
                  }
                  unint64_t v119 = v93 + v179 + v118 * v178;
                  BOOL v120 = (unint64_t)v183 + v179 >= v119 + v115 * v178
                      || v119 >= (unint64_t)v183 + v179 + v115 * v178;
                  if (!v120)
                  {
                    OUTLINED_FUNCTION_9_40();
                    unint64_t result = (void *)OUTLINED_FUNCTION_14_24();
                    __break(1u);
                    return result;
                  }
                  swift_arrayInitWithCopy();
                  uint64_t v46 = v182;
                  if (v115)
                  {
                    uint64_t v121 = *(void *)(v93 + 16);
                    BOOL v122 = __OFADD__(v121, v115);
                    uint64_t v123 = v121 + v115;
                    if (v122) {
                      goto LABEL_91;
                    }
                    *(void *)(v93 + 16) = v123;
                  }
                }
                else
                {
                  if (v115) {
                    goto LABEL_66;
                  }
LABEL_79:
                  uint64_t v46 = v182;
                  if (v115) {
                    goto LABEL_89;
                  }
                }
                uint64_t v165 = (void *)v93;
                swift_bridgeObjectRelease();
                goto LABEL_81;
              }

              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_31_19();
              unint64_t v45 = v167;
LABEL_84:
              swift_bridgeObjectRelease();
LABEL_85:
              uint64_t v48 = v152;
              goto LABEL_30;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v48 = v152;
LABEL_29:
            unint64_t v45 = v167;
            goto LABEL_30;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          id v65 = (id)v186;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          outlined consume of Data?((uint64_t)a1, v55);
          swift_errorRelease();
          swift_bridgeObjectRelease();
          uint64_t v145 = 0;
        }
        uint64_t v48 = v152;
LABEL_28:
        OUTLINED_FUNCTION_31_19();
        goto LABEL_29;
      }
LABEL_30:
      if ((void *)++v45 == a1)
      {
        swift_bridgeObjectRelease();
        return v165;
      }
    }
    long long v186 = 0u;
    long long v187 = 0u;
LABEL_19:
    outlined destroy of FlowActivity?((uint64_t)&v186, &demangling cache variable for type metadata for Any?);
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *static INIntentResolutionResult.getInferredDisplayHints(dictionary:shouldIncludeOrdinalReference:)(uint64_t a1, int a2)
{
  int v91 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_50_1();
  uint64_t v108 = v5;
  uint64_t v6 = type metadata accessor for DisplayHint();
  OUTLINED_FUNCTION_0_2();
  uint64_t v92 = v7;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_51_0();
  uint64_t v11 = v9 - v10;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v76 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v76 - v16;
  uint64_t v18 = type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_0_2();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_25_6();
  uint64_t v99 = v22;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v23);
  uint64_t v107 = (char *)v76 - v24;
  OUTLINED_FUNCTION_25_7();
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)v76 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)v76 - v29;
  if (*(void *)(a1 + 16))
  {
    unint64_t v31 = OUTLINED_FUNCTION_5_37();
    if ((v32 & 1) != 0
      && (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v31, (uint64_t)&v114),
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]),
          swift_dynamicCast()))
    {
      uint64_t v33 = (void *)v112;
    }
    else
    {
      uint64_t v33 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    uint64_t v33 = _swiftEmptyArrayStorage;
  }
  uint64_t v84 = v33[2];
  if (!v84)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v34 = 0;
  uint64_t v78 = v33 + 4;
  uint64_t v105 = (void (**)(uint64_t, char *, uint64_t))(v20 + 16);
  uint64_t v90 = v92 + 16;
  uint64_t v103 = (void (**)(void))(v20 + 8);
  uint64_t v104 = v92 + 32;
  uint64_t v86 = v92 + 8;
  unint64_t v89 = 0x8000000000228010;
  unint64_t v88 = 0x8000000000227F50;
  unint64_t v98 = 0x8000000000227F30;
  uint64_t v35 = _swiftEmptyArrayStorage;
  uint64_t v87 = v17;
  uint64_t v100 = v6;
  uint64_t v81 = v11;
  uint64_t v80 = v15;
  uint64_t v79 = v28;
  uint64_t v106 = v30;
  uint64_t v77 = v33;
  while (1)
  {
    if (v34 >= v33[2]) {
      goto LABEL_57;
    }
    uint64_t v36 = v78[v34];
    if (!*(void *)(v36 + 16)) {
      goto LABEL_50;
    }
    unint64_t v85 = v34;
    swift_bridgeObjectRetain();
    unint64_t v37 = OUTLINED_FUNCTION_29_22();
    if (v38) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_49:
    uint64_t v33 = v77;
    unint64_t v34 = v85;
LABEL_50:
    if (++v34 == v84)
    {
      swift_bridgeObjectRelease();
      return v35;
    }
  }
  outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v37, (uint64_t)&v112);
  outlined init with take of Any(&v112, &v114);
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)&long long v112 = v36;
  uint64_t v39 = static INIntentResolutionResult.inferDescriptionStrings(input:)((uint64_t)&v112);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v112);
  uint64_t v95 = static INIntentResolutionResult.makeAsIdString(input:)((uint64_t)&v114);
  uint64_t v96 = v40;
  uint64_t v94 = *(void *)(v39 + 16);
  if (!v94)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v114);
    goto LABEL_49;
  }
  uint64_t v41 = 0;
  v76[1] = v39;
  uint64_t v93 = v39 + 32;
  while (1)
  {
    uint64_t v97 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    SemanticValue.init(string:label:)();
    SemanticValue.init(string:label:)();
    unint64_t v42 = *v105;
    uint64_t v43 = v108;
    (*v105)(v108, v30, v18);
    __swift_storeEnumTagSinglePayload(v43, 0, 1, v18);
    uint64_t v102 = v42;
    v42((uint64_t)v107, v28, v18);
    DisplayHint.init(idValue:displayValue:)();
    OUTLINED_FUNCTION_14_14();
    v44(v15, v17, v6);
    uint64_t v45 = (uint64_t)v35;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v45 = OUTLINED_FUNCTION_10_38(0, v35[2] + 1);
    }
    OUTLINED_FUNCTION_2_49();
    uint64_t v30 = v106;
    uint64_t v47 = v97;
    if (v68) {
      uint64_t v45 = OUTLINED_FUNCTION_10_38(v46 > 1, v43);
    }
    *(void *)(v45 + 16) = v43;
    OUTLINED_FUNCTION_19_24();
    uint64_t v110 = v48;
    uint64_t v109 = *(void *)(v49 + 72);
    uint64_t v101 = *(void *)(v49 + 32);
    OUTLINED_FUNCTION_73();
    v50();
    if (v91) {
      break;
    }
    uint64_t v35 = (void *)v45;
    uint64_t v17 = v87;
LABEL_45:
    uint64_t v41 = v47 + 1;
    OUTLINED_FUNCTION_66();
    v73();
    uint64_t v74 = *v103;
    OUTLINED_FUNCTION_27_25();
    v74();
    OUTLINED_FUNCTION_27_25();
    v74();
    if (v41 == v94) {
      goto LABEL_48;
    }
  }
  char v51 = static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)(v85, v84);
  uint64_t v52 = v51[2];
  if (v52)
  {
    uint64_t v83 = v45;
    *(void *)&long long v112 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
    uint64_t v53 = (void *)v112;
    uint64_t v82 = v51;
    unint64_t v54 = v51 + 5;
    do
    {
      uint64_t v111 = v52;
      swift_bridgeObjectRetain_n();
      unint64_t v55 = v107;
      SemanticValue.init(string:label:)();
      uint64_t v56 = v108;
      uint64_t v57 = v102;
      v102(v108, v30, v18);
      __swift_storeEnumTagSinglePayload(v56, 0, 1, v18);
      v57(v99, v55, v18);
      DisplayHint.init(idValue:displayValue:)();
      OUTLINED_FUNCTION_66();
      v58();
      swift_bridgeObjectRelease();
      *(void *)&long long v112 = v53;
      unint64_t v60 = v53[2];
      unint64_t v59 = v53[3];
      if (v60 >= v59 >> 1)
      {
        char v62 = OUTLINED_FUNCTION_25_18(v59);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62, v60 + 1, 1);
        uint64_t v53 = (void *)v112;
      }
      v54 += 2;
      v53[2] = v60 + 1;
      OUTLINED_FUNCTION_73();
      v61();
      uint64_t v52 = v111 - 1;
      uint64_t v30 = v106;
    }
    while (v111 != 1);
    swift_bridgeObjectRelease();
    uint64_t v15 = v80;
    uint64_t v28 = v79;
    uint64_t v45 = v83;
    uint64_t v47 = v97;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v53 = _swiftEmptyArrayStorage;
  }
  uint64_t v63 = v53[2];
  uint64_t v64 = *(void *)(v45 + 16);
  uint64_t v65 = v64 + v63;
  if (!__OFADD__(v64, v63))
  {
    if (v65 > *(void *)(v45 + 24) >> 1)
    {
      if (v64 <= v65) {
        uint64_t v72 = v64 + v63;
      }
      else {
        uint64_t v72 = *(void *)(v45 + 16);
      }
      uint64_t v45 = OUTLINED_FUNCTION_10_38(1, v72);
      if (!v53[2]) {
        goto LABEL_43;
      }
LABEL_30:
      uint64_t v66 = *(void *)(v45 + 16);
      if ((*(void *)(v45 + 24) >> 1) - v66 < v63) {
        goto LABEL_55;
      }
      unint64_t v67 = v45 + v110 + v66 * v109;
      BOOL v68 = (unint64_t)v53 + v110 >= v67 + v63 * v109 || v67 >= (unint64_t)v53 + v110 + v63 * v109;
      if (!v68) {
        goto LABEL_58;
      }
      swift_arrayInitWithCopy();
      uint64_t v17 = v87;
      if (v63)
      {
        uint64_t v69 = *(void *)(v45 + 16);
        BOOL v70 = __OFADD__(v69, v63);
        uint64_t v71 = v69 + v63;
        if (v70) {
          goto LABEL_56;
        }
        *(void *)(v45 + 16) = v71;
      }
    }
    else
    {
      if (v63) {
        goto LABEL_30;
      }
LABEL_43:
      uint64_t v17 = v87;
      if (v63) {
        goto LABEL_54;
      }
    }
    uint64_t v35 = (void *)v45;
    swift_bridgeObjectRelease();
    uint64_t v6 = v100;
    goto LABEL_45;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  OUTLINED_FUNCTION_9_40();
  unint64_t result = (void *)OUTLINED_FUNCTION_14_24();
  __break(1u);
  return result;
}

uint64_t static INIntentResolutionResult.inferDescriptionStrings(input:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (!swift_dynamicCast())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if (swift_dynamicCast())
    {
      uint64_t v36 = *(void *)(v67 + 16);
      if (v36)
      {
        uint64_t v37 = v67 + 32;
        uint64_t v6 = _swiftEmptyArrayStorage;
        do
        {
          outlined init with copy of Any(v37, (uint64_t)&v69);
          uint64_t v38 = static INIntentResolutionResult.inferDescriptionStrings(input:)(&v69);
          uint64_t v39 = *(void *)(v38 + 16);
          uint64_t v40 = v6[2];
          if (__OFADD__(v40, v39)) {
            goto LABEL_110;
          }
          uint64_t v41 = v38;
          if (!swift_isUniquelyReferenced_nonNull_native() || v40 + v39 > v6[3] >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v6 = v42;
          }
          if (*(void *)(v41 + 16))
          {
            uint64_t v43 = v6[2];
            if ((v6[3] >> 1) - v43 < v39) {
              goto LABEL_112;
            }
            unint64_t v44 = (unint64_t)&v6[2 * v43 + 4];
            if (v41 + 32 < v44 + 16 * v39 && v44 < v41 + 32 + 16 * v39) {
              goto LABEL_118;
            }
            swift_arrayInitWithCopy();
            if (v39)
            {
              uint64_t v46 = v6[2];
              BOOL v34 = __OFADD__(v46, v39);
              uint64_t v47 = v46 + v39;
              if (v34) {
                goto LABEL_115;
              }
              _OWORD v6[2] = v47;
            }
          }
          else if (v39)
          {
            goto LABEL_111;
          }
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v69);
          v37 += 32;
          --v36;
        }
        while (v36);
        swift_bridgeObjectRelease();
        goto LABEL_103;
      }
      swift_bridgeObjectRelease();
LABEL_99:
      uint64_t v6 = _swiftEmptyArrayStorage;
      goto LABEL_103;
    }
    if (swift_dynamicCast())
    {
      int v48 = v67;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v6 = (void *)swift_allocObject();
      *((_OWORD *)v6 + 1) = xmmword_212160;
      uint64_t v69 = 0;
      unint64_t v70 = 0xE000000000000000;
      if (v48) {
        uint64_t v49 = 1702195828;
      }
      else {
        uint64_t v49 = 0x65736C6166;
      }
      if (v48) {
        unint64_t v50 = 0xE400000000000000;
      }
      else {
        unint64_t v50 = 0xE500000000000000;
      }
      unint64_t v51 = v50;
      String.append(_:)(*(Swift::String *)&v49);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (swift_dynamicCast())
      {
        uint64_t v52 = v69;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v6 = (void *)swift_allocObject();
        *((_OWORD *)v6 + 1) = xmmword_212160;
        *(void *)&long long v67 = v52;
        void v6[4] = dispatch thunk of CustomStringConvertible.description.getter();
        v6[5] = v53;
LABEL_103:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
        return (uint64_t)v6;
      }
      if (!swift_dynamicCast())
      {
        type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          uint64_t v56 = v69;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v6 = (void *)swift_allocObject();
          *((_OWORD *)v6 + 1) = xmmword_212160;
          id v57 = [v56 stringValue];
          uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v60 = v59;

          void v6[4] = v58;
          v6[5] = v60;

          goto LABEL_103;
        }
        if (swift_dynamicCast())
        {
          id v61 = v69;
          unint64_t v62 = v70;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v6 = (void *)swift_allocObject();
          *((_OWORD *)v6 + 1) = xmmword_212160;
          void v6[4] = v61;
          v6[5] = v62;
          goto LABEL_103;
        }
        goto LABEL_99;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v6 = (void *)swift_allocObject();
      *((_OWORD *)v6 + 1) = xmmword_212160;
      uint64_t v69 = 0;
      unint64_t v70 = 0xE000000000000000;
      Double.write<A>(to:)();
    }
    unint64_t v54 = v70;
    void v6[4] = v69;
    v6[5] = v54;
    goto LABEL_103;
  }
  int64_t v1 = 0;
  uint64_t v2 = *(void *)(v72 + 64);
  uint64_t v64 = v72 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v72 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & v2;
  int64_t v65 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v66 = v72;
  uint64_t v63 = v72 + 104;
  uint64_t v6 = _swiftEmptyArrayStorage;
  if ((v4 & v2) == 0) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v8 = v7 | (v1 << 6);
LABEL_6:
  uint64_t v9 = *(void *)(v66 + 56);
  uint64_t v10 = (void *)(*(void *)(v66 + 48) + 16 * v8);
  uint64_t v11 = v10[1];
  *(void *)&long long v67 = *v10;
  *((void *)&v67 + 1) = v11;
  outlined init with copy of Any(v9 + 32 * v8, (uint64_t)v68);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: Any)?((uint64_t)&v67, (uint64_t)&v69);
    unint64_t v15 = v70;
    if (!v70)
    {
      swift_release();
      goto LABEL_103;
    }
    uint64_t v16 = v69;
    outlined init with take of Any(&v71, &v67);
    if (one-time initialization token for interestingFields != -1) {
      swift_once();
    }
    uint64_t v17 = static INIntentResolutionResult.interestingFields;
    uint64_t v18 = *(void *)(static INIntentResolutionResult.interestingFields + 16);
    if (v18) {
      break;
    }
LABEL_56:
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v67);
    if (v5) {
      goto LABEL_5;
    }
LABEL_7:
    int64_t v12 = v1 + 1;
    if (__OFADD__(v1, 1)) {
      goto LABEL_109;
    }
    if (v12 >= v65)
    {
      int64_t v14 = v1;
    }
    else
    {
      unint64_t v13 = *(void *)(v64 + 8 * v12);
      if (v13) {
        goto LABEL_10;
      }
      int64_t v14 = v1 + 1;
      if (v1 + 2 < v65)
      {
        unint64_t v13 = *(void *)(v64 + 8 * (v1 + 2));
        if (v13)
        {
          int64_t v12 = v1 + 2;
LABEL_10:
          unint64_t v5 = (v13 - 1) & v13;
          unint64_t v8 = __clz(__rbit64(v13)) + (v12 << 6);
          int64_t v1 = v12;
          goto LABEL_6;
        }
        int64_t v14 = v1 + 2;
        if (v1 + 3 < v65)
        {
          unint64_t v13 = *(void *)(v64 + 8 * (v1 + 3));
          if (v13)
          {
            int64_t v12 = v1 + 3;
            goto LABEL_10;
          }
          int64_t v12 = v1 + 4;
          int64_t v14 = v1 + 3;
          if (v1 + 4 < v65)
          {
            unint64_t v13 = *(void *)(v64 + 8 * v12);
            if (v13) {
              goto LABEL_10;
            }
            while (v1 + 5 < v65)
            {
              unint64_t v13 = *(void *)(v63 + 8 * v1++);
              if (v13)
              {
                int64_t v12 = v1 + 4;
                goto LABEL_10;
              }
            }
            int64_t v14 = v65 - 1;
          }
        }
      }
    }
    unint64_t v5 = 0;
    memset(v68, 0, sizeof(v68));
    int64_t v1 = v14;
    long long v67 = 0u;
  }
  BOOL v19 = *(void **)(static INIntentResolutionResult.interestingFields + 32) == v16
     && *(void *)(static INIntentResolutionResult.interestingFields + 40) == v15;
  if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_38;
  }
  if (v18 == 1) {
    goto LABEL_56;
  }
  BOOL v20 = *(void **)(v17 + 48) == v16 && *(void *)(v17 + 56) == v15;
  if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    uint64_t v25 = static INIntentResolutionResult.inferDescriptionStrings(input:)(&v67);
    uint64_t v26 = *(void *)(v25 + 16);
    uint64_t v27 = v6[2];
    if (__OFADD__(v27, v26)) {
      goto LABEL_113;
    }
    uint64_t v28 = v25;
    if (!swift_isUniquelyReferenced_nonNull_native() || v27 + v26 > v6[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v6 = v29;
    }
    if (*(void *)(v28 + 16))
    {
      uint64_t v30 = v6[2];
      if ((v6[3] >> 1) - v30 < v26) {
        goto LABEL_116;
      }
      unint64_t v31 = (unint64_t)&v6[2 * v30 + 4];
      if (v28 + 32 < v31 + 16 * v26 && v31 < v28 + 32 + 16 * v26) {
        goto LABEL_118;
      }
      swift_arrayInitWithCopy();
      if (v26)
      {
        uint64_t v33 = v6[2];
        BOOL v34 = __OFADD__(v33, v26);
        uint64_t v35 = v33 + v26;
        if (v34) {
          goto LABEL_117;
        }
        _OWORD v6[2] = v35;
      }
    }
    else if (v26)
    {
      goto LABEL_114;
    }
    goto LABEL_56;
  }
  if (v18 == 2) {
    goto LABEL_56;
  }
  uint64_t v21 = (void *)(v17 + 72);
  uint64_t v22 = 2;
  while (1)
  {
    uint64_t v23 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    BOOL v24 = (void *)*(v21 - 1) == v16 && *v21 == v15;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_38;
    }
    v21 += 2;
    ++v22;
    if (v23 == v18) {
      goto LABEL_56;
    }
  }
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_0_2();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_51_0();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v20 - v16;
  swift_bridgeObjectRetain();
  SemanticValue.init(string:label:)();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v18(v7, a2, v8);
  __swift_storeEnumTagSinglePayload(v7, 0, 1, v8);
  v18(v14, (uint64_t)v17, v8);
  DisplayHint.init(idValue:displayValue:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v8);
}

uint64_t static INIntentResolutionResult.encodeDictionary(input:)()
{
  uint64_t v0 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v10 = 0;
  id v2 = [v0 dataWithJSONObject:isa options:2 error:&v10];

  id v3 = v10;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
    outlined consume of Data._Representation(v4, v6);
  }
  else
  {
    uint64_t v8 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  return countAndFlagsBits;
}

uint64_t static INIntentResolutionResult.base64FromString(string:)()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15) {
    return 0;
  }
  uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
  outlined consume of Data?(v4, v6);
  return countAndFlagsBits;
}

uint64_t outlined bridged method (pb) of @objc INCodableEnumValue.synonyms.getter(void *a1)
{
  id v1 = [a1 synonyms];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for INCodableEnumValueSynonym);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id outlined bridged method (mbgnn) of @objc INCodableEnumAttribute.value(withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 valueWithName:v4];

  return v5;
}

uint64_t outlined bridged method (mbgnb) of @objc INCodableEnumValueSynonym.localizedSynonym(forLanguage:)(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = objc_msgSend(a3, *a4, v6);

  if (!v7) {
    return 0;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

id outlined bridged method (mbnn) of @objc INCodableEnumAttribute.value(withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [a3 valueWithName:v4];

  return v5;
}

void OUTLINED_FUNCTION_3_40()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_4_40()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

unint64_t OUTLINED_FUNCTION_5_37()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(0x6F697463656C6573, 0xEE00736D6574496ELL);
}

uint64_t OUTLINED_FUNCTION_6_41()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_10_38(char a1, uint64_t a2)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_12_40()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_14_24()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_17_21(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 56) + 32 * a1;
  return outlined init with copy of Any(v4, v2 - 128);
}

void OUTLINED_FUNCTION_18_27()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

_WORD *OUTLINED_FUNCTION_22_29(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_24_23()
{
  return swift_dynamicCast();
}

BOOL OUTLINED_FUNCTION_25_18@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

unint64_t OUTLINED_FUNCTION_29_22()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(0x65756C6176, 0xE500000000000000);
}

uint64_t OUTLINED_FUNCTION_30_20()
{
  return swift_dynamicCast();
}

uint64_t WFConfirmInteractionFlow.exitValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 120);
  int v2 = *(unsigned __int8 *)(v0 + 128);
  if (v2 == 2)
  {
    swift_errorRetain();
  }
  else if (v2 == 1)
  {
    id v3 = v1;
  }
  else
  {
    lazy protocol witness table accessor for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError();
    return swift_allocError();
  }
  return (uint64_t)v1;
}

unint64_t lazy protocol witness table accessor for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError;
  if (!lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError;
  if (!lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowConfirmInteractionError and conformance WorkflowConfirmInteractionError);
  }
  return result;
}

uint64_t WFConfirmInteractionFlow.__allocating_init(shortcutName:request:appBundleId:deviceState:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = swift_allocObject();
  WFConfirmInteractionFlow.init(shortcutName:request:appBundleId:deviceState:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t WFConfirmInteractionFlow.init(shortcutName:request:appBundleId:deviceState:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for CATOption();
  uint64_t v15 = OUTLINED_FUNCTION_16(v14);
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_27_6();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = OUTLINED_FUNCTION_26_1(v16, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    BOOL v19 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)BOOL v19 = 0;
    _os_log_impl(&dword_0, v17, v18, "#WFConfirmInteractionFlow initialized.", v19, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + 48) = a5;
  outlined init with copy of DeviceState((uint64_t)a6, v7 + 56);
  type metadata accessor for WorkflowSnippetProvider();
  id v29 = a3;
  *(void *)(v7 + 96) = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(a6);
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v30);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v20 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v28 = OUTLINED_FUNCTION_24_24();
  type metadata accessor for WorkflowRunnerCATsSimple();
  OUTLINED_FUNCTION_16_27();
  uint64_t v21 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATs();
  OUTLINED_FUNCTION_16_27();
  uint64_t v22 = OUTLINED_FUNCTION_24_24();
  type metadata accessor for RunCustomIntentCATsSimple();
  OUTLINED_FUNCTION_16_27();
  uint64_t v23 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_16_27();
  uint64_t v24 = OUTLINED_FUNCTION_24_24();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_16_27();
  uint64_t v25 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
  OUTLINED_FUNCTION_16_27();
  uint64_t v26 = OUTLINED_FUNCTION_24_24();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a6);
  type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject();
  *(void *)(v7 + 104) = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v30, v20, v28, v21, v22, v23, v24, v25, v26);
  type metadata accessor for WorkflowNLContextProvider();
  *(void *)(v7 + 112) = swift_allocObject();
  *(void *)(v7 + 120) = 0;
  *(unsigned char *)(v7 + 128) = 3;
  return v7;
}

uint64_t WFConfirmInteractionFlow.on(input:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_27_6();
  if (*(unsigned char *)(v0 + 128) != 3 || *(void *)(v0 + 120) != 1) {
    return 0;
  }
  Input.parse.getter();
  unsigned __int8 v6 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  if (v6 == 3) {
    return 0;
  }
  uint64_t v8 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = v6;
  char v9 = *(unsigned char *)(v2 + 128);
  *(unsigned char *)(v2 + 128) = 0;
  outlined consume of WFShowAlertFlow.State(v8, v9);
  return 1;
}

uint64_t WFConfirmInteractionFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = v1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t WFConfirmInteractionFlow.execute()()
{
  uint64_t v36 = v0;
  uint64_t v1 = v0[18];
  uint64_t v2 = *(void **)(v1 + 120);
  switch(*(unsigned char *)(v1 + 128))
  {
    case 1:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      id v10 = OUTLINED_FUNCTION_26_1(v9, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        *(_WORD *)OUTLINED_FUNCTION_33() = 0;
        OUTLINED_FUNCTION_23_0(&dword_0, v12, v13, "#WFConfirmInteractionFlow completed");
        OUTLINED_FUNCTION_7_0();
      }

      static ExecuteResponse.complete()();
      goto LABEL_33;
    case 2:
      swift_errorRetain();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        swift_getErrorValue();
        uint64_t v18 = Error.localizedDescription.getter();
        v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of WFShowAlertFlow.State(v2, 2);
        outlined consume of WFShowAlertFlow.State(v2, 2);
        _os_log_impl(&dword_0, v15, v16, "#WFConfirmInteractionFlow error state: %s", v17, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        outlined consume of WFShowAlertFlow.State(v2, 2);
        outlined consume of WFShowAlertFlow.State(v2, 2);
      }

      static ExecuteResponse.complete()();
      outlined consume of WFShowAlertFlow.State(v2, 2);
      goto LABEL_33;
    case 3:
      if (v2)
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        uint64_t v21 = OUTLINED_FUNCTION_26_1(v20, (uint64_t)static Logger.voiceCommands);
        os_log_type_t v22 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v21, v22))
        {
          *(_WORD *)OUTLINED_FUNCTION_33() = 0;
          OUTLINED_FUNCTION_23_0(&dword_0, v23, v24, "#WFConfirmInteractionFlow waiting for response");
          OUTLINED_FUNCTION_7_0();
        }

        goto LABEL_32;
      }
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      v0[19] = v29;
      *id v29 = v30;
      v29[1] = WFConfirmInteractionFlow.execute();
      return WFConfirmInteractionFlow.buildOutput()();
    default:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      uint64_t v4 = (void *)OUTLINED_FUNCTION_26_1(v3, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_32(v5))
      {
        *(_WORD *)OUTLINED_FUNCTION_33() = 0;
        OUTLINED_FUNCTION_42_0(&dword_0, v6, v7, "#WFConfirmInteractionFlow responseReceived");
        OUTLINED_FUNCTION_7_0();
      }

      if (v2 - 1 < 2)
      {
        uint64_t v8 = 0;
LABEL_25:
        id v25 = [objc_allocWithZone((Class)WFConfirmInteractionDialogResponse) initWithInteractionResponseCode:v8];
        uint64_t v26 = *(void **)(v1 + 120);
        *(void *)(v1 + 120) = v25;
        char v27 = *(unsigned char *)(v1 + 128);
        *(unsigned char *)(v1 + 128) = 1;
        id v28 = v25;
        outlined consume of WFShowAlertFlow.State(v26, v27);
        static ExecuteResponse.ongoing(requireInput:)();

        goto LABEL_33;
      }
      if (!(_BYTE)v2)
      {
        uint64_t v8 = 1;
        goto LABEL_25;
      }
      char v32 = *(void **)(v1 + 120);
      *(void *)(v1 + 120) = 0;
      char v33 = *(unsigned char *)(v1 + 128);
      *(unsigned char *)(v1 + 128) = 3;
      outlined consume of WFShowAlertFlow.State(v32, v33);
LABEL_32:
      static ExecuteResponse.ongoing(requireInput:)();
LABEL_33:
      OUTLINED_FUNCTION_18_0();
      return v34();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *os_log_type_t v5 = v4;
  *(void *)(v6 + 160) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[21] = v3;
  *uint64_t v3 = v0;
  v3[1] = WFConfirmInteractionFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 2, v1, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *os_log_type_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 144);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  uint64_t v2 = *(void **)(v1 + 120);
  *(void *)(v1 + 120) = 1;
  uint64_t v3 = *(unsigned char *)(v1 + 128);
  *(unsigned char *)(v1 + 128) = 3;
  outlined consume of WFShowAlertFlow.State(v2, v3);
  static ExecuteResponse.ongoing(requireInput:)();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_18_0();
  return v4();
}

void WFConfirmInteractionFlow.execute()()
{
  OUTLINED_FUNCTION_13_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_26_1(v1, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    char v0 = (char)v4;
    *uint64_t v4 = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v5, v6, "#WFConfirmInteractionFlow error creating or submitting output");
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_25_14();
  outlined consume of WFShowAlertFlow.State(v2, v0);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  __asm { BRAA            X1, X16 }
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  os_log_type_t v3 = (void *)OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v4 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
    uint64_t v1 = (char)v5;
    *uint64_t v5 = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v6, v7, "#WFConfirmInteractionFlow error creating or submitting output");
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_25_14();
  outlined consume of WFShowAlertFlow.State(v3, v1);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_23_1();
  __asm { BRAA            X1, X16 }
}

uint64_t WFConfirmInteractionFlow.execute(completion:)()
{
  type metadata accessor for WFConfirmInteractionFlow();
  lazy protocol witness table accessor for type WFConfirmInteractionFlow and conformance WFConfirmInteractionFlow(&lazy protocol witness table cache variable for type WFConfirmInteractionFlow and conformance WFConfirmInteractionFlow, v0, (void (*)(uint64_t))type metadata accessor for WFConfirmInteractionFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t WFConfirmInteractionFlow.buildOutput()()
{
  OUTLINED_FUNCTION_9_0();
  v1[12] = v2;
  v1[13] = v0;
  uint64_t v3 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v3);
  v1[14] = OUTLINED_FUNCTION_25();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v4);
  v1[15] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for DialogPhase();
  v1[16] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[17] = v6;
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[20] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[21] = v8;
  v1[22] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[23] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[24] = v10;
  v1[25] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(uint64_t, void);
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4)
  {
    OUTLINED_FUNCTION_4_41();
    if (dispatch thunk of DeviceState.isHomePod.getter())
    {
      uint64_t v5 = v0[13];
      type metadata accessor for WFDialogState();
      uint64_t v6 = static WFDialogState.isAppFirstRun(appId:)(*(void *)(v5 + 40), *(void *)(v5 + 48));
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v11 = *(void *)(v0[13] + 32);
    v0[26] = v11;
    OUTLINED_FUNCTION_16_5();
    uint64_t v14 = (uint64_t (*)(uint64_t, void))(*(void *)(v12 + 176) + **(int **)(v12 + 176));
    uint64_t v13 = (void *)swift_task_alloc();
    v0[27] = v13;
    *uint64_t v13 = v0;
    v13[1] = WFConfirmInteractionFlow.buildOutput();
    return v14(v11, v6 & 1);
  }
  else
  {
    uint64_t v7 = (uint64_t *)v0[12];
    _OWORD v7[3] = type metadata accessor for AceOutput();
    void v7[4] = (uint64_t)&protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1(v7);
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[50] = v8;
    *uint64_t v8 = v9;
    v8[1] = WFConfirmInteractionFlow.buildOutput();
    return WFConfirmInteractionFlow.buildOutput_prerfv2()();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 224) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v6();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  long long v42;
  void *v43;
  uint64_t v44;

  uint64_t v43 = v0;
  uint64_t v1 = (void *)v0[28];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v5 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v38 = (id)v0[26];
  uint64_t v39 = v0[15];
  uint64_t v6 = v0[13];
  static DialogPhase.confirmation.getter();
  uint64_t v7 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  uint64_t v8 = [v38 interaction];
  uint64_t v9 = [v8 intent];

  OUTLINED_FUNCTION_16_5();
  (*(void (**)(id))(v10 + 192))(v9);

  uint64_t v11 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v39, 0, 1, v11);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  __swift_project_boxed_opaque_existential_1((void *)(v6 + 56), *(void *)(v6 + 80));
  if ((dispatch thunk of DeviceState.isHomePod.getter() & 1) != 0
    || (OUTLINED_FUNCTION_4_41(), (dispatch thunk of DeviceState.isMac.getter() & 1) != 0)
    || (OUTLINED_FUNCTION_4_41(), (dispatch thunk of DeviceState.isCarPlay.getter() & 1) != 0))
  {
    uint64_t v12 = (void *)v0[28];
    type metadata accessor for ResponseFactory();
    swift_allocObject();
    v0[29] = ResponseFactory.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_211C70;
    *(void *)(v13 + 32) = v12;
    *(void *)&unint64_t v42 = v13;
    specialized Array._endMutation()();
    uint64_t v14 = v42;
    v0[30] = v42;
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
                                                            + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
    uint64_t v15 = v12;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[31] = v16;
    *os_log_type_t v16 = v17;
    v16[1] = WFConfirmInteractionFlow.buildOutput();
    uint64_t v18 = v0[22];
    unint64_t v19 = v0[12];
    return v41(v19, v14, v18);
  }
  else
  {
    uint64_t v21 = (void *)v0[26];
    os_log_type_t v22 = [v21 interaction];
    uint64_t v23 = [v22 intent];
    v0[32] = v23;

    uint64_t v24 = [v21 interaction];
    v0[33] = [v24 intentResponse];

    static Device.current.getter();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v25 = static WFDialogState.shared;
    type metadata accessor for RunCustomIntentCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v26 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunCustomIntentCATsSimple();
    static CATOption.defaultMode.getter();
    char v27 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATs();
    static CATOption.defaultMode.getter();
    id v28 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATsSimple();
    static CATOption.defaultMode.getter();
    id v29 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for AppNameResolver();
    uint64_t v30 = swift_allocObject();
    type metadata accessor for CustomIntentsDialogTemplating();
    unint64_t v31 = swift_allocObject();
    v0[34] = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(&v42, v25, 0, 1, v26, v27, v28, v29, v30, v31);
    char v32 = [v23 verb];
    char v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    v0[35] = v35;
    OUTLINED_FUNCTION_16_5();
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v36 + 152) + **(int **)(v36 + 152));
    uint64_t v37 = (void *)swift_task_alloc();
    v0[36] = v37;
    *uint64_t v37 = v0;
    v37[1] = WFConfirmInteractionFlow.buildOutput();
    return v40(v33, v35);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  v7[37] = v11;
  v7[38] = v12;
  v7[39] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    v7[40] = v3;
    v7[41] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 368) = v0;
  swift_task_dealloc();
  swift_release();

  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = (void *)v0[28];
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[47] = ResponseFactory.init()();
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[10] = type metadata accessor for WorkflowDataModels(0);
  v0[11] = lazy protocol witness table accessor for type WFConfirmInteractionFlow and conformance WFConfirmInteractionFlow((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, 255, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  __swift_allocate_boxed_opaque_existential_1(v0 + 7);
  v4(v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_211C70;
  *(void *)(v5 + 32) = v1;
  uint64_t v13 = v5;
  specialized Array._endMutation()();
  v0[48] = v13;
  uint64_t v12 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:);
  uint64_t v6 = v1;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[49] = v7;
  *uint64_t v7 = v8;
  v7[1] = WFConfirmInteractionFlow.buildOutput();
  uint64_t v9 = v0[22];
  uint64_t v10 = v0[12];
  return ((uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))v12)(v10, v0 + 7, v13, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 56;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = (void *)v0[32];
  uint64_t v3 = (void *)v0[28];
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[20];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  OUTLINED_FUNCTION_27_26();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v7();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 408) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_23_1();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v0 + 96));
  OUTLINED_FUNCTION_11_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = (void *)v0[32];
  uint64_t v3 = (void *)v0[28];
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[20];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  OUTLINED_FUNCTION_11_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = (void *)v0[32];
  uint64_t v3 = (void *)v0[28];
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[20];
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  OUTLINED_FUNCTION_11_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

void WFConfirmInteractionFlow.buildOutput()()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  OUTLINED_FUNCTION_27_26();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_23_1();
  __asm { BRAA            X1, X16 }
}

uint64_t WFConfirmInteractionFlow.buildOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = (void *)v9[32];
  uint64_t v10 = v9[33];
  uint64_t v12 = v9[13];
  type metadata accessor for App();
  swift_bridgeObjectRetain();
  uint64_t v13 = App.__allocating_init(appIdentifier:)();
  v9[42] = v13;
  id v14 = [v11 _title];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  v9[43] = v16;
  v9[44] = [v11 _keyImage];
  uint64_t v17 = (void *)swift_task_alloc();
  v9[45] = v17;
  *uint64_t v17 = v9;
  v17[1] = WFConfirmInteractionFlow.buildOutput();
  uint64_t v20 = v9[40];
  uint64_t v19 = v9[41];
  uint64_t v21 = v9[37];
  uint64_t v22 = v9[32];
  return static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)((uint64_t)(v9 + 2), v13, v22, v10, v12 + 56, v19, v21, v20, v18, a9);
}

uint64_t WFConfirmInteractionFlow.buildOutput_prerfv2()()
{
  OUTLINED_FUNCTION_9_0();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v3);
  v1[9] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  v1[10] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[11] = v5;
  v1[12] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[13] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[14] = v7;
  v1[15] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = v1[4];
  v0[16] = v2;
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[5];
  v0[17] = v5;
  uint64_t v6 = v1[6];
  v0[18] = v6;
  OUTLINED_FUNCTION_16_5();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 104)
                                                                            + **(int **)(v7 + 104));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[19] = v8;
  *uint64_t v8 = v0;
  v8[1] = WFConfirmInteractionFlow.buildOutput_prerfv2();
  return v10(v2, v3, v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 160) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t, uint64_t, void);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[20];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_3:
    uint64_t v2 = 0;
    goto LABEL_6;
  }
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[18];
  type metadata accessor for WFDialogState();
  uint64_t v2 = static WFDialogState.isAppFirstRun(appId:)(v4, v5);
LABEL_6:
  OUTLINED_FUNCTION_16_5();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v6 + 184) + **(int **)(v6 + 184));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[21] = v7;
  *uint64_t v7 = v8;
  v7[1] = WFConfirmInteractionFlow.buildOutput_prerfv2();
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[16];
  return v12(v9, v10, v2 & 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = [*(id *)(v1 + 128) interaction];
  uint64_t v5 = [v4 intent];

  OUTLINED_FUNCTION_16_5();
  (*(void (**)(id))(v6 + 192))(v5);

  __swift_project_boxed_opaque_existential_1((void *)(v3 + 56), *(void *)(v3 + 80));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  if (v2 >> 62)
  {
    type metadata accessor for SAAceView();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SAAceView();
  }
  uint64_t v8 = *(void *)(v1 + 112);
  uint64_t v7 = *(void *)(v1 + 120);
  uint64_t v9 = *(void *)(v1 + 96);
  uint64_t v15 = *(void *)(v1 + 104);
  uint64_t v11 = *(void *)(v1 + 80);
  uint64_t v10 = *(void *)(v1 + 88);
  uint64_t v12 = *(void *)(v1 + 72);
  swift_bridgeObjectRelease();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v9, v11);
  __swift_storeEnumTagSinglePayload(v12, 0, 1, v11);
  *(void *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v1 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v12, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v1 + 8);
  return v13();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}