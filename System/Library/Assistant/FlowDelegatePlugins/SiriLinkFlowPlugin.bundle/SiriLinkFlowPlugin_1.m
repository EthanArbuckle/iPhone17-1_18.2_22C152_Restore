uint64_t specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  void (*v24)(void);
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  v14 = v12[92];
  v15 = v12[91];
  OUTLINED_FUNCTION_21_9();
  if (v16)
  {
    outlined destroy of URL?(v15, &demangling cache variable for type metadata for Date?);
    v17 = (void *)Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v18))
    {
      v19 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v19);
      OUTLINED_FUNCTION_23_0(&dword_0, v20, v21, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_7_0();
    }
  }
  else
  {
    v22 = OUTLINED_FUNCTION_6_14();
    v23(v22);
    v12[53] = v14;
    __swift_allocate_boxed_opaque_existential_1(v12 + 50);
    OUTLINED_FUNCTION_10_22();
    v24();
    objc_allocWithZone((Class)LNValue);
    OUTLINED_FUNCTION_43_3(v13);
    v25 = OUTLINED_FUNCTION_15_14();
    v26(v25);
  }
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_28_0();
  return v29(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12);
}

{
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  void (*v24)(void);
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  v14 = v12[87];
  v15 = v12[86];
  OUTLINED_FUNCTION_21_9();
  if (v16)
  {
    outlined destroy of URL?(v15, &demangling cache variable for type metadata for DateComponents?);
    v17 = (void *)Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v18))
    {
      v19 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v19);
      OUTLINED_FUNCTION_23_0(&dword_0, v20, v21, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_7_0();
    }
  }
  else
  {
    v22 = OUTLINED_FUNCTION_6_14();
    v23(v22);
    v12[49] = v14;
    __swift_allocate_boxed_opaque_existential_1(v12 + 46);
    OUTLINED_FUNCTION_10_22();
    v24();
    objc_allocWithZone((Class)LNValue);
    OUTLINED_FUNCTION_43_3(v13);
    v25 = OUTLINED_FUNCTION_15_14();
    v26(v25);
  }
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_28_0();
  return v29(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12);
}

{
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  os_log_type_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  __n128 *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (*(void *)(v12 + 840))
  {
    v13 = [*(id *)(v12 + 808) memberValueType];
    self;
    if (OUTLINED_FUNCTION_22_13())
    {
      v14 = *(id *)(v12 + 624);
    }
    else
    {
      v20 = *(void **)(v12 + 840);
      v21 = *(void **)(v12 + 624);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v22 = (__n128 *)swift_allocObject();
      OUTLINED_FUNCTION_60(v22, (__n128)xmmword_211C70);
      v14 = v20;
      [v14 valueType];
      v23 = objc_allocWithZone((Class)LNValue);
      OUTLINED_FUNCTION_63_0();
    }
  }
  else
  {

    v15 = (void *)Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v16))
    {
      v17 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v17);
      OUTLINED_FUNCTION_23_0(&dword_0, v18, v19, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_7_0();
    }
  }
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_28_0();
  return v26(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12);
}

{
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  void (*v24)(void);
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  v14 = v12[92];
  v15 = v12[91];
  OUTLINED_FUNCTION_21_9();
  if (v16)
  {
    outlined destroy of URL?(v15, &demangling cache variable for type metadata for Date?);
    v17 = (void *)Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v18))
    {
      v19 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v19);
      OUTLINED_FUNCTION_23_0(&dword_0, v20, v21, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_7_0();
    }
  }
  else
  {
    v22 = OUTLINED_FUNCTION_6_14();
    v23(v22);
    v12[53] = v14;
    __swift_allocate_boxed_opaque_existential_1(v12 + 50);
    OUTLINED_FUNCTION_10_22();
    v24();
    objc_allocWithZone((Class)LNValue);
    OUTLINED_FUNCTION_43_3(v13);
    v25 = OUTLINED_FUNCTION_15_14();
    v26(v25);
  }
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_28_0();
  return v29(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12);
}

{
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  void (*v24)(void);
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  v14 = v12[87];
  v15 = v12[86];
  OUTLINED_FUNCTION_21_9();
  if (v16)
  {
    outlined destroy of URL?(v15, &demangling cache variable for type metadata for DateComponents?);
    v17 = (void *)Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v18))
    {
      v19 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v19);
      OUTLINED_FUNCTION_23_0(&dword_0, v20, v21, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_7_0();
    }
  }
  else
  {
    v22 = OUTLINED_FUNCTION_6_14();
    v23(v22);
    v12[49] = v14;
    __swift_allocate_boxed_opaque_existential_1(v12 + 46);
    OUTLINED_FUNCTION_10_22();
    v24();
    objc_allocWithZone((Class)LNValue);
    OUTLINED_FUNCTION_43_3(v13);
    v25 = OUTLINED_FUNCTION_15_14();
    v26(v25);
  }
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_28_0();
  return v29(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12);
}

{
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  os_log_type_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  __n128 *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  if (*(void *)(v12 + 832))
  {
    v13 = [*(id *)(v12 + 800) memberValueType];
    self;
    if (OUTLINED_FUNCTION_22_13())
    {
      v14 = *(id *)(v12 + 624);
    }
    else
    {
      v20 = *(void **)(v12 + 832);
      v21 = *(void **)(v12 + 624);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v22 = (__n128 *)swift_allocObject();
      OUTLINED_FUNCTION_60(v22, (__n128)xmmword_211C70);
      v14 = v20;
      [v14 valueType];
      v23 = objc_allocWithZone((Class)LNValue);
      OUTLINED_FUNCTION_63_0();
    }
  }
  else
  {

    v15 = (void *)Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v16))
    {
      v17 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v17);
      OUTLINED_FUNCTION_23_0(&dword_0, v18, v19, "#LNValueType: getLNValue returning nil");
      OUTLINED_FUNCTION_7_0();
    }
  }
  OUTLINED_FUNCTION_1_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_28_0();
  return v26(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12);
}

uint64_t specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[78] = a5;
  v7[77] = a4;
  v7[76] = a2;
  v7[75] = a1;
  uint64_t v11 = type metadata accessor for Locale();
  v7[79] = v11;
  v7[80] = *(void *)(v11 - 8);
  v7[81] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v7[82] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for URL();
  v7[83] = v12;
  v7[84] = *(void *)(v12 - 8);
  v7[85] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v7[86] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for DateComponents();
  v7[87] = v13;
  v7[88] = *(void *)(v13 - 8);
  v7[89] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  v7[90] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v7[91] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Date();
  v7[92] = v14;
  v7[93] = *(void *)(v14 - 8);
  v7[94] = swift_task_alloc();
  v7[5] = a6;
  v7[6] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_1, a3, a6);
  return _swift_task_switch(specialized LNValueType.getLNValue(nlIntent:parameterMetadata:contactResolver:locale:), 0, 0);
}

uint64_t outlined copy of VoiceCommandIntentValueType(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for VoiceCommandIntentValueType(uint64_t a1)
{
  return outlined consume of VoiceCommandIntentValueType(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for VoiceCommandIntentValueType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of VoiceCommandIntentValueType(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for VoiceCommandIntentValueType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of VoiceCommandIntentValueType(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of VoiceCommandIntentValueType(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for VoiceCommandIntentValueType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of VoiceCommandIntentValueType(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for VoiceCommandIntentValueType()
{
  return &type metadata for VoiceCommandIntentValueType;
}

ValueMetadata *type metadata accessor for LNValueTypeMap()
{
  return &type metadata for LNValueTypeMap;
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent)
  {
    type metadata accessor for VoiceCommandsNLIntent(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent);
  }
  return result;
}

void outlined consume of ParsedMeasurement?(uint64_t a1, void *a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    outlined consume of ParsedMeasurement(a1, a2, a3 & 1);
  }
}

void outlined consume of ParsedMeasurement(uint64_t a1, void *a2, char a3)
{
  if (a3) {
}
  }

id outlined copy of ParsedMeasurement(uint64_t a1, void *a2, char a3)
{
  if (a3) {
    return a2;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_17()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_6_14()
{
  return v0;
}

void OUTLINED_FUNCTION_12_12()
{
  outlined consume of ParsedMeasurement?(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_15_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_13()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_18_13()
{
  outlined consume of ParsedMeasurement?(v3, v2, v0);
  outlined consume of ParsedMeasurement?(v3, v2, v0);
  *(_WORD *)(v4 + 12) = 2080;
  *uint64_t v5 = v1;
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_19_10()
{
  return *(void *)(v0 + 680);
}

uint64_t OUTLINED_FUNCTION_20_16(float a1)
{
  *uint64_t v5 = a1;
  *(void *)(v3 + 520) = v1;
  *(void *)(v3 + 528) = v2;
  *(unsigned char *)(v3 + 536) = v4;
  return outlined copy of VoiceCommandIntentValueType(v1, v2, v4);
}

uint64_t OUTLINED_FUNCTION_21_9()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_22_13()
{
  return swift_dynamicCastObjCClass();
}

uint64_t OUTLINED_FUNCTION_23_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a14);
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_24_10(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_26_10()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_27_11()
{
  outlined consume of ParsedMeasurement?(v2, v1, v0);
  outlined consume of ParsedMeasurement?(v2, v1, v0);
  outlined consume of ParsedMeasurement(v2, v1, 1);
}

uint64_t OUTLINED_FUNCTION_28_8()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_32_8(float a1)
{
  float *v1 = a1;
  return swift_getErrorValue();
}

uint64_t OUTLINED_FUNCTION_33_8()
{
  return *(void *)(v0 + 600);
}

void OUTLINED_FUNCTION_34_8(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_log_t log)
{
  _os_log_impl(a1, log, v13, a4, v12, 0xCu);
}

uint64_t OUTLINED_FUNCTION_35_7()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_36_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id OUTLINED_FUNCTION_37_6(float a1)
{
  float *v1 = a1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_38_6()
{
  *(void *)(v0 + 208) = 0;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  return static Device.current.getter();
}

void OUTLINED_FUNCTION_39_7()
{
  outlined consume of VoiceCommandIntentValueType(v2, v1, v3);
  outlined consume of VoiceCommandIntentValueType(v2, v1, v3);
}

uint64_t OUTLINED_FUNCTION_40_4()
{
  outlined copy of VoiceCommandIntentValueType(v1, v0, v2);
  outlined copy of VoiceCommandIntentValueType(v1, v0, v2);
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_41_6()
{
  outlined copy of ParsedMeasurement(v1, v0, 1);
  outlined copy of ParsedMeasurement(v1, v0, 1);
  return Logger.logObject.getter();
}

id OUTLINED_FUNCTION_43_3(void *a1)
{
  return @nonobjc LNValue.init(_:valueType:)(v1, a1);
}

uint64_t OUTLINED_FUNCTION_44_2()
{
  return v0;
}

void OUTLINED_FUNCTION_46_4(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log, uint64_t a11, uint64_t a12, os_log_type_t type)
{
  _os_log_impl(a1, log, type, a4, v13, 0x16u);
}

uint64_t OUTLINED_FUNCTION_47_3(uint64_t a1)
{
  void *v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_48_3(uint64_t a1)
{
  *(void *)(v1 + 584) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

NSString OUTLINED_FUNCTION_49_2()
{
  return String._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_51_2()
{
  outlined consume of VoiceCommandIntentValueType(v0, v1, v2);
  return outlined consume of VoiceCommandIntentValueType(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_53_0()
{
  return *(void *)(v0 + 688);
}

uint64_t OUTLINED_FUNCTION_54_1()
{
  return *(void *)(v0 + 728);
}

uint64_t OUTLINED_FUNCTION_55_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_57_0()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_59_2(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_log_t log)
{
  _os_log_impl(a1, log, v13, a4, v12, 0xCu);
}

uint64_t OUTLINED_FUNCTION_60(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_62()
{
  return swift_arrayDestroy();
}

id OUTLINED_FUNCTION_63_0()
{
  return @nonobjc LNValue.init(_:memberValueType:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_65_0()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_66_0()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_67_0()
{
  uint64_t v2 = *(void *)(v0 + 656);
  return static InputUtils.getURL(from:)(v2);
}

uint64_t OUTLINED_FUNCTION_68_0()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_69_0(float a1)
{
  float *v1 = a1;
  return LNMeasurementUnitTypeOfUnit();
}

Class OUTLINED_FUNCTION_70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v16 = *(void *)(v14 + 616);
  uint64_t v17 = *(void *)(v14 + 600);
  return static InputUtils.getPerson(from:contactResolver:locale:)(v17, a14, v16);
}

uint64_t OUTLINED_FUNCTION_71_0()
{
  *(void *)(v0 + 288) = 0;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  return static Device.current.getter();
}

uint64_t OUTLINED_FUNCTION_72_0()
{
  return swift_arrayDestroy();
}

id OUTLINED_FUNCTION_77(void *a1)
{
  return @nonobjc LNValue.init(_:valueType:)(v1, a1);
}

uint64_t OUTLINED_FUNCTION_79_0()
{
  return swift_task_alloc();
}

id OUTLINED_FUNCTION_80_0()
{
  return outlined copy of ParsedMeasurement(v1, v0, 1);
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  return Measurement.init(value:unit:)();
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  return Measurement.init(value:unit:)();
}

uint64_t OUTLINED_FUNCTION_85_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_86(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 + 592) = a1;
  return a13;
}

void static InstrumentationUtils.emitAutoShortcutUsedInstrumentation(autoShortcutTemplate:)()
{
  OUTLINED_FUNCTION_47_4();
  id v2 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsed) init];
  if (v2)
  {
    uint64_t v3 = v2;
    outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsed.autoshortcutTemplate.setter(v1, v0, v2);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
    id v5 = v3;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      char v8 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v11 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)char v8 = 136315138;
      swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsed.Type);
      uint64_t v9 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v6, v7, "#SLF SELF emitting event: %s", v8, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
    OUTLINED_FUNCTION_27_12();
  }
}

void static InstrumentationUtils.emitAppShorcutGeneralizedInvocationInstrumentation(appShortcutIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed) init];
  if (v4)
  {
    id v5 = v4;
    outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed.appShortcutId.setter(a1, a2, v4);
    specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)();
  }
}

#error "9BB84: call analysis failed (funcsize=119)"

void specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)()
{
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  SEL *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  id v24;
  unint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  os_log_type_t v43;
  BOOL v44;
  id v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  id v52;
  NSObject *v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int EnumTagSinglePayload;
  unint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  os_log_type_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSString v71;
  char v72;
  SEL *v73;
  id v74;
  id v75;
  NSObject *v76;
  uint64_t v77;
  void (*v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t);
  uint64_t v82;
  void (*v83)(uint64_t, char *, uint64_t);
  uint64_t v84;
  unint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  NSObject *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  id v94;
  SEL *v95;
  int v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100[2];

  OUTLINED_FUNCTION_36();
  v95 = v4;
  uint64_t v6 = v5;
  v96 = v7;
  v97 = v8;
  uint64_t v9 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_2();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_33_9();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_43_4();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v82 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v18 = OUTLINED_FUNCTION_16(v17);
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_32_9();
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_42_6();
  __chkstk_darwin(v20);
  v22 = (char *)&v82 - v21;
  v23 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKClientEvent) init];
  if (!v23) {
    goto LABEL_35;
  }
  v98 = v23;
  v24 = [objc_allocWithZone((Class)FLOWSchemaFLOWEventMetadata) init];
  if (v24)
  {
    v91 = v11;
    v92 = v22;
    v94 = v24;
    v100[0] = swift_getObjectType();
    __swift_instantiateConcreteTypeFromMangledName(v6);
    v90 = String.init<A>(describing:)();
    v93 = v25;
    v26 = type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.flowTask.getter();
    swift_release();
    v27 = dispatch thunk of FlowTaskProvider.id.getter();
    v29 = v28;
    swift_release();
    if (!v29)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.voiceCommands);
      v41 = v93;
      swift_bridgeObjectRetain();
      v42 = (void *)Logger.logObject.getter();
      v43 = static os_log_type_t.error.getter();
      v44 = OUTLINED_FUNCTION_34_9(v43);
      v45 = v94;
      if (v44)
      {
        v46 = (_DWORD *)OUTLINED_FUNCTION_25_2();
        v100[0] = OUTLINED_FUNCTION_22_3();
        *v46 = 136315138;
        swift_bridgeObjectRetain();
        v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v90, v41, v100);
        OUTLINED_FUNCTION_49_3(v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_38_7(&dword_0, v48, v49, "#SLF SELF Log, current taskId is nil, cannot emit %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      goto LABEL_35;
    }
    v30 = (uint64_t)v92;
    UUID.init(uuidString:)();
    outlined init with copy of UUID?(v30, v3);
    if (__swift_getEnumTagSinglePayload(v3, 1, v9) == 1)
    {
      v31 = v27;
      outlined destroy of UUID?(v3);
      v32 = v94;
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.voiceCommands);
      v34 = v93;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_34_9(v36))
      {
        v37 = OUTLINED_FUNCTION_16_14();
        v100[0] = OUTLINED_FUNCTION_26_6();
        *(_DWORD *)v37 = 136315394;
        swift_bridgeObjectRetain();
        v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v29, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v37 + 12) = 2080;
        swift_bridgeObjectRetain();
        v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v90, v34, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v35, v26, "#SLF SELF Log, current taskId: %s, is not a valid UUID String, cannot emit %s", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      v88 = v27;
      v89 = v29;
      v50 = v91;
      v86 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 32);
      v87 = v91 + 32;
      v86(v16, v3, v9);
      v51 = static InstrumentationUtils.createFlowId()();
      v52 = v94;
      if (!v51)
      {
        v62 = v94;
        swift_bridgeObjectRelease();
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        v63 = type metadata accessor for Logger();
        __swift_project_value_buffer(v63, (uint64_t)static Logger.voiceCommands);
        v64 = v93;
        swift_bridgeObjectRetain();
        v65 = (void *)Logger.logObject.getter();
        v66 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_34_9(v66))
        {
          v67 = (_DWORD *)OUTLINED_FUNCTION_25_2();
          v100[0] = OUTLINED_FUNCTION_22_3();
          *v67 = 136315138;
          swift_bridgeObjectRetain();
          v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v90, v64, v100);
          OUTLINED_FUNCTION_49_3(v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_38_7(&dword_0, v69, v70, "#SLF SELF Log, current flowId is not a valid UUID String, cannot emit %s");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        v80 = OUTLINED_FUNCTION_35_8();
        v81(v80);
        v79 = (uint64_t)v92;
        goto LABEL_34;
      }
      v53 = v51;
      v54 = type metadata accessor for SISchemaUUID();
      v83 = *(void (**)(uint64_t, char *, uint64_t))(v50 + 16);
      v84 = v50 + 16;
      v83(v0, v16, v9);
      v85 = v54;
      v55 = SISchemaUUID.__allocating_init(nsuuid:)(v0);
      [v52 setTaskId:v55];

      v90 = v53;
      [v52 setFlowId:v53];
      static SiriEnvironment.default.getter();
      SiriEnvironment.currentRequest.getter();
      swift_release();
      v56 = CurrentRequest.resultCandidateId.getter();
      v58 = v57;
      swift_release();
      if (v58)
      {
        swift_bridgeObjectRetain();
        v82 = v56;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v9);
        v30 = (uint64_t)v92;
        v60 = v89;
        if (EnumTagSinglePayload == 1)
        {
          outlined destroy of UUID?(v2);
          v61 = v94;
        }
        else
        {
          v86(v1, v2, v9);
          v83(v0, v1, v9);
          v74 = SISchemaUUID.__allocating_init(nsuuid:)(v0);
          v61 = v94;
          [v94 setTrpId:v74];

          (*(void (**)(char *, uint64_t))(v91 + 8))(v1, v9);
        }
        v72 = v96;
        v73 = v95;
        v71 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        v71 = 0;
        v61 = v94;
        v30 = (uint64_t)v92;
        v72 = v96;
        v73 = v95;
        v60 = v89;
      }
      [v61 setResultCandidateId:v71];

      [v98 setEventMetadata:v61];
      swift_bridgeObjectRelease();
      objc_msgSend(v98, *v73, v97);
      v75 = [self sharedStream];
      [v75 emitMessage:v98];
      swift_unknownObjectRelease();
      v76 = v90;
      if (v72) {
        static InstrumentationUtils.emitLinkFlowRequestLink(taskId:flowId:)(v88, v60, v90);
      }

      swift_bridgeObjectRelease();
      v77 = OUTLINED_FUNCTION_35_8();
      v78(v77);
    }
    v79 = v30;
LABEL_34:
    outlined destroy of UUID?(v79);
LABEL_35:
    OUTLINED_FUNCTION_27_1();
    return;
  }
  OUTLINED_FUNCTION_27_1();
}

id static InstrumentationUtils.createFlowId()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v0 - 8);
  id v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  os_log_type_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v27 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  static InstrumentationUtils.createFlowUUID()();
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) == 1)
  {
    outlined destroy of UUID?((uint64_t)v2);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#SLF SELF Log, invalid executionRequestId string, cannot derive flowId form it", v16, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v2, v3);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
    v30 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v30(v10, v12, v3);
    v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_t v28 = v19;
      uint64_t v21 = swift_slowAlloc();
      v29 = v7;
      v22 = (uint8_t *)v21;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v32 = v27;
      *(_DWORD *)v22 = 136315138;
      uint64_t v23 = UUID.uuidString.getter();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v10, v3);
      v19 = v28;
      _os_log_impl(&dword_0, v28, v20, "#SLF SELF Log, created flowId: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      os_log_type_t v7 = v29;
      swift_slowDealloc();
    }
    else
    {
      v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v10, v3);
    }

    type metadata accessor for SISchemaUUID();
    v30(v7, v12, v3);
    id v17 = SISchemaUUID.__allocating_init(nsuuid:)((uint64_t)v7);
    v25(v12, v3);
  }
  return v17;
}

void static InstrumentationUtils.emitLinkFlowRequestLink(taskId:flowId:)(uint64_t a1, unint64_t a2, NSObject *a3)
{
  uint64_t v68 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v59 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v59 - v17;
  __chkstk_darwin(v16);
  os_log_type_t v20 = (char *)&v59 - v19;
  uint64_t v21 = [objc_allocWithZone((Class)SISchemaRequestLink) init];
  if (v21)
  {
    uint64_t v66 = v12;
    v67 = a3;
    v65 = v15;
    v22 = v21;
    uint64_t v23 = [objc_allocWithZone((Class)SISchemaRequestLinkInfo) init];
    if (v23)
    {
      unint64_t v24 = v23;
      id v25 = [objc_allocWithZone((Class)SISchemaRequestLinkInfo) init];
      if (v25)
      {
        id v64 = v25;
        v26 = v24;
        [v24 setComponent:3];
        [v24 setUuid:v67];
        static InstrumentationUtils.getOrchestrationRequestId()((uint64_t)v10);
        if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11) == 1)
        {
          outlined destroy of UUID?((uint64_t)v10);
          uint64_t v27 = v22;
          if (one-time initialization token for voiceCommands != -1) {
            swift_once();
          }
          uint64_t v28 = type metadata accessor for Logger();
          __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
          v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v31 = 0;
            _os_log_impl(&dword_0, v29, v30, "#SLF SELF Log - current executionRequestId is not a valid UUID String, cannot emit request link info", v31, 2u);
            swift_slowDealloc();

            return;
          }

          goto LABEL_15;
        }
        uint64_t v35 = v66;
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v20, v10, v11);
        id v36 = v64;
        [v64 setComponent:1];
        type metadata accessor for SISchemaUUID();
        v61 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
        v61(v18, v20, v11);
        id v37 = SISchemaUUID.__allocating_init(nsuuid:)((uint64_t)v18);
        [v36 setUuid:v37];

        v63 = v26;
        [v22 setSource:v26];
        v62 = v22;
        [v22 setTarget:v36];
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for Logger();
        __swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
        v39 = v65;
        v61(v65, v20, v11);
        swift_bridgeObjectRetain_n();
        v40 = v67;
        v41 = Logger.logObject.getter();
        int v42 = static os_log_type_t.debug.getter();
        v43 = v20;
        if (os_log_type_enabled(v41, (os_log_type_t)v42))
        {
          LODWORD(v61) = v42;
          v67 = v41;
          uint64_t v44 = swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          uint64_t v70 = v60;
          *(_DWORD *)uint64_t v44 = 136315650;
          swift_bridgeObjectRetain();
          uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, a2, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v44 + 12) = 2080;
          v45 = v40;
          SISchemaUUID.asUUID()();
          int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v11);
          v47 = v63;
          uint64_t v48 = v66;
          if (EnumTagSinglePayload == 1)
          {
            outlined destroy of UUID?((uint64_t)v8);
            uint64_t v49 = 0;
            unint64_t v50 = 0xE000000000000000;
          }
          else
          {
            uint64_t v49 = UUID.uuidString.getter();
            unint64_t v50 = v52;
            (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v11);
          }
          uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v44 + 22) = 2080;
          lazy protocol witness table accessor for type UUID and conformance UUID();
          v53 = v65;
          uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v51 = *(void (**)(char *, uint64_t))(v48 + 8);
          v51(v53, v11);
          v56 = v67;
          _os_log_impl(&dword_0, v67, (os_log_type_t)v61, "#SLF SELF Log - emitting RequestLink for taskId: %s, flowId:%s, executionRequestId: %s", (uint8_t *)v44, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          v51 = *(void (**)(char *, uint64_t))(v66 + 8);
          v51(v39, v11);

          v47 = v63;
        }
        id v57 = [self sharedStream];
        v58 = v62;
        [v57 emitMessage:v62];

        swift_unknownObjectRelease();
        v51(v43, v11);
        return;
      }

      v22 = v24;
    }
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)v34 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, a2, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v27, v33, "#SLF SELF Log - unable to create request link info for SELF for taskId: %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_15:

    return;
  }

  swift_bridgeObjectRelease_n();
}

void static InstrumentationUtils.createFlowUUID()()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = OUTLINED_FUNCTION_16(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = &v61[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  unint64_t v10 = &v61[-v9];
  uint64_t v11 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_2();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_32_9();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v69 = &v61[-v17];
  uint64_t v18 = __chkstk_darwin(v16);
  os_log_type_t v20 = &v61[-v19];
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_42_6();
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_43_4();
  __chkstk_darwin(v22);
  unint64_t v24 = &v61[-v23];
  static InstrumentationUtils.getOrchestrationRequestId()((uint64_t)v10);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11) == 1)
  {
    outlined destroy of UUID?((uint64_t)v10);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
    v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_0, v26, v27, "#SLF SELF Log, invalid executionRequestId string, cannot derive flowId form it", v28, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v29 = 1;
    goto LABEL_22;
  }
  uint64_t v65 = v0;
  uint64_t v66 = v3;
  uint64_t v67 = v13;
  os_log_type_t v30 = v24;
  uint64_t v31 = *(void (**)(void))(v13 + 32);
  OUTLINED_FUNCTION_48_4();
  v31();
  uint64_t v32 = self;
  uint64_t v68 = v30;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v34 = [v32 derivedIdentifierForComponentName:3 fromSourceIdentifier:isa];

  if (v34)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_48_4();
    v31();
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v11);
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v11) != 1)
    {
      uint64_t v35 = v65;
      id v64 = v31;
      OUTLINED_FUNCTION_48_4();
      v31();
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.voiceCommands);
      uint64_t v37 = v67;
      uint64_t v38 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v67 + 16);
      v38(v20, v35, v11);
      v39 = v68;
      v38(v69, (uint64_t)v68, v11);
      v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      int v42 = v41;
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v43 = OUTLINED_FUNCTION_16_14();
        uint64_t v63 = OUTLINED_FUNCTION_26_6();
        uint64_t v71 = v63;
        *(_DWORD *)uint64_t v43 = 136315394;
        int v62 = v42;
        uint64_t v44 = UUID.uuidString.getter();
        uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v46 = *(void (**)(void))(v37 + 8);
        OUTLINED_FUNCTION_5_13();
        v46();
        *(_WORD *)(v43 + 12) = 2080;
        uint64_t v47 = UUID.uuidString.getter();
        uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_5_13();
        v46();
        _os_log_impl(&dword_0, v40, (os_log_type_t)v62, "#SLF SELF Log, created flowId: %s orchestrationId: %s", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();

        OUTLINED_FUNCTION_5_13();
        v46();
      }
      else
      {

        uint64_t v59 = *(void (**)(void))(v37 + 8);
        OUTLINED_FUNCTION_5_13();
        v59();
        OUTLINED_FUNCTION_5_13();
        v59();
        ((void (*)(unsigned char *, uint64_t))v59)(v39, v11);
      }
      uint64_t v3 = v66;
      OUTLINED_FUNCTION_48_4();
      v60();
      uint64_t v29 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v11);
  }
  outlined destroy of UUID?((uint64_t)v8);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)static Logger.voiceCommands);
  uint64_t v50 = v67;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v67 + 16))(v1, v68, v11);
  v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v71 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)v53 = 136315138;
    uint64_t v69 = v53 + 4;
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v71);
    OUTLINED_FUNCTION_39_6(v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v57 = *(void (**)(void))(v50 + 8);
    OUTLINED_FUNCTION_5_13();
    v57();
    _os_log_impl(&dword_0, v51, v52, "#SLF SELF Log, failed to created from: %s", v53, 0xCu);
    uint64_t v29 = 1;
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    OUTLINED_FUNCTION_5_13();
    v57();
  }
  else
  {

    v58 = *(void (**)(void))(v50 + 8);
    OUTLINED_FUNCTION_5_13();
    v58();
    OUTLINED_FUNCTION_5_13();
    v58();
    uint64_t v29 = 1;
  }
  uint64_t v3 = v66;
LABEL_22:
  __swift_storeEnumTagSinglePayload(v3, v29, 1, v11);
  OUTLINED_FUNCTION_27_1();
}

uint64_t static InstrumentationUtils.getOrchestrationRequestId()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentRequest.getter();
  swift_release();
  CurrentRequest.executionRequestId.getter();
  uint64_t v6 = v5;
  swift_release();
  if (v6)
  {
    static InstrumentationUtils.createUUID(id:)((uint64_t)v4);
    swift_bridgeObjectRelease();
    uint64_t v7 = type metadata accessor for UUID();
    if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v7) == 1)
    {
      outlined destroy of UUID?((uint64_t)v4);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_0, v9, v10, "#SLF SELF Log, invalid executionRequestId string, cannot derive flowId form it", v11, 2u);
        swift_slowDealloc();
      }

      uint64_t v12 = a1;
      uint64_t v13 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, v4, v7);
      uint64_t v12 = a1;
      uint64_t v13 = 0;
    }
    return __swift_storeEnumTagSinglePayload(v12, v13, 1, v7);
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "#SLF SELF Log, invalid executionRequestId, cannot derive flowId form it", v17, 2u);
      swift_slowDealloc();
    }

    uint64_t v18 = type metadata accessor for UUID();
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v18);
  }
}

void static InstrumentationUtils.emitLinkFlowStartedInstrumentation(targetBundle:action:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = OUTLINED_FUNCTION_16(v5);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = OUTLINED_FUNCTION_17_12(objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKActionContext));
  if (!v9)
  {
LABEL_19:
    OUTLINED_FUNCTION_27_1();
    return;
  }
  id v37 = v9;
  id v10 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLinkActionStarted) *(SEL *)(v0 + 3904)];
  if (v10)
  {
    id v35 = v10;
    id v36 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKActionTier1) *(SEL *)(v0 + 3904)];
    if (v36)
    {
      LNAction.asSELFAction()();
      if (v11)
      {
        uint64_t v12 = v11;
        outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKActionTier1.appBundleId.setter(v4, v2, v36);
        type metadata accessor for SISchemaUUID();
        UUID.init()();
        id v13 = SISchemaUUID.__allocating_init(nsuuid:)((uint64_t)v8);
        [v36 setLinkId:v13];
        [v12 setLinkId:v13];
        [v35 setCurrentAction:v12];
        [v37 setStartedOrChanged:v35];
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        uint64_t v15 = (void *)__swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
        id v16 = v37;
        id v17 = v35;
        id v18 = v16;
        id v19 = v17;
        uint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = OUTLINED_FUNCTION_16_14();
          id v37 = v13;
          uint64_t v23 = v22;
          uint64_t v39 = OUTLINED_FUNCTION_26_6();
          *(_DWORD *)uint64_t v23 = 136315394;
          uint64_t ObjectType = swift_getObjectType();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLINKActionContext.Type);
          uint64_t v24 = String.init<A>(describing:)();
          id v35 = v15;
          uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v39);
          OUTLINED_FUNCTION_39_6(v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v23 + 12) = 2080;
          uint64_t ObjectType = swift_getObjectType();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLinkActionStarted.Type);
          uint64_t v27 = String.init<A>(describing:)();
          uint64_t ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v20, v21, "#SLF SELF emitting contextEvent: %s event: %s", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          id v13 = v37;
          OUTLINED_FUNCTION_7_0();
        }
        else
        {
        }
        specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)();
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_26_11(v32))
        {
          os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v33 = 0;
          _os_log_impl(&dword_0, v31, (os_log_type_t)v20, "#SLF SELF emitting tier 1", v33, 2u);
          OUTLINED_FUNCTION_7_0();
        }

        specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)();
        goto LABEL_19;
      }
    }
    else
    {
    }
  }
  OUTLINED_FUNCTION_27_1();
}

#error "9E214: call analysis failed (funcsize=66)"

#error "9E2B0: call analysis failed (funcsize=119)"

#error "9E4AC: call analysis failed (funcsize=118)"

#error "9E6AC: call analysis failed (funcsize=119)"

void static InstrumentationUtils.emitActionConversionStartedInstrumentation(parseUUID:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_2();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_33_9();
  __chkstk_darwin(v11);
  id v13 = (char *)&v35 - v12;
  id v14 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKActionConversionContext) init];
  if (!v14)
  {
LABEL_15:
    OUTLINED_FUNCTION_27_1();
    return;
  }
  id v36 = v14;
  id v15 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKActionConversionStarted) init];
  if (v15)
  {
    id v16 = v15;
    outlined init with copy of UUID?(v2, (uint64_t)v6);
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
    {
      outlined destroy of UUID?((uint64_t)v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v6, v7);
      type metadata accessor for SISchemaUUID();
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v0, v13, v7);
      id v19 = SISchemaUUID.__allocating_init(nsuuid:)(v0);
      [v16 setParseHypothesisId:v19];

      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v7);
    }
    [v36 setStartedOrChanged:v16];
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.voiceCommands);
    id v21 = v36;
    id v22 = v16;
    id v23 = v21;
    id v24 = v22;
    unint64_t v25 = (void *)Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_28_7(v26))
    {
      OUTLINED_FUNCTION_16_14();
      uint64_t v38 = OUTLINED_FUNCTION_11_18();
      uint64_t v37 = OUTLINED_FUNCTION_9_19(4.8151e-34);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLINKActionConversionContext.Type);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v38);
      OUTLINED_FUNCTION_40_5(v29);

      swift_bridgeObjectRelease();
      uint64_t v37 = OUTLINED_FUNCTION_6_15();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLINKActionConversionStarted.Type);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v38);
      OUTLINED_FUNCTION_40_5(v32);

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_15(&dword_0, v33, v34, "#SLF SELF emitting contextEvent: %s event: %s");
      OUTLINED_FUNCTION_8_12();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
    OUTLINED_FUNCTION_27_12();

    goto LABEL_15;
  }
  OUTLINED_FUNCTION_27_1();
}

#error "9EC88: call analysis failed (funcsize=136)"

#error "9EE88: call analysis failed (funcsize=119)"

void static InstrumentationUtils.emitEntityDisambiguationEndedInstrumentation()()
{
  id v1 = OUTLINED_FUNCTION_17_12(objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKEntityDisambiguationContext));
  if (v1)
  {
    id v13 = v1;
    id v2 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKEntityDisambiguationEnded) *(SEL *)(v0 + 3904)];
    if (v2)
    {
      id v3 = v2;
      int v4 = [v2 setExists:1];
      OUTLINED_FUNCTION_20_17(v4, "setEnded:", v5, v6, v7, v8, v9, v10, v12, v13);
      specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)();

      uint64_t v11 = v3;
    }
    else
    {
      uint64_t v11 = v13;
    }
  }
}

#error "9F148: call analysis failed (funcsize=118)"

#error "9F3D8: call analysis failed (funcsize=141)"

#error "9F59C: call analysis failed (funcsize=118)"

#error "9F82C: call analysis failed (funcsize=141)"

#error "9F9F0: call analysis failed (funcsize=118)"

#error "9FC80: call analysis failed (funcsize=141)"

#error "9FE48: call analysis failed (funcsize=119)"

#error "A0044: call analysis failed (funcsize=118)"

#error "A0244: call analysis failed (funcsize=119)"

#error "A0440: call analysis failed (funcsize=118)"

void static InstrumentationUtils.emitFirstRunConfirmationEndedInstrumentation(enabled:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_4_16();
  char v25 = v24;
  id v26 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKAppShortcutFirstRunConfirmationContext) init];
  if (!v26)
  {
LABEL_12:
    OUTLINED_FUNCTION_0_15();
    return;
  }
  id v50 = v26;
  id v27 = [objc_allocWithZone((Class)FLOWLINKSchemaFLOWLINKAppShortcutFirstRunConfirmationEnded) init];
  if (v27)
  {
    unint64_t v28 = v27;
    [v27 setIsUserResponseAffirmative:v25 & 1];
    [v50 setEnded:v28];
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.voiceCommands);
    id v30 = v50;
    id v31 = v28;
    id v32 = v30;
    id v33 = v31;
    uint64_t v34 = (void *)Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_26_11(v35))
    {
      OUTLINED_FUNCTION_16_14();
      OUTLINED_FUNCTION_26_6();
      OUTLINED_FUNCTION_46_5();
      OUTLINED_FUNCTION_31_5(4.8151e-34);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLINKAppShortcutFirstRunConfirmationContext.Type);
      uint64_t v36 = OUTLINED_FUNCTION_19_11();
      OUTLINED_FUNCTION_28_9(v36, v37, v38, v39, v40);
      OUTLINED_FUNCTION_13_15();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_25_9();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FLOWLINKSchemaFLOWLINKAppShortcutFirstRunConfirmationEnded.Type);
      uint64_t v41 = OUTLINED_FUNCTION_19_11();
      OUTLINED_FUNCTION_28_9(v41, v42, v43, v44, v45);
      OUTLINED_FUNCTION_13_15();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_24_11(&dword_0, v46, v47, "#SLF SELF emitting contextEvent: %s event: %s");
      OUTLINED_FUNCTION_29_7();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
    specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)();

    goto LABEL_12;
  }
  OUTLINED_FUNCTION_0_15();
}

uint64_t static InstrumentationUtils.createUUID(id:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v2 - 8);
  int v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  uint64_t v5 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    int v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      int v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "#SLF SELF Log - invalid string, cannot derive uuid", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, v4, v5);
    uint64_t v10 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a1, v10, 1, v5);
}

void outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsed.autoshortcutTemplate.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setAutoshortcutTemplate:v4];
}

void outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed.appShortcutId.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setAppShortcutId:v4];
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

void outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKActionTier1.appBundleId.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setAppBundleId:v4];
}

unint64_t type metadata accessor for SISchemaUUID()
{
  unint64_t result = lazy cache variable for type metadata for SISchemaUUID;
  if (!lazy cache variable for type metadata for SISchemaUUID)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  }
  return result;
}

void outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKActionParameter.name.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setName:v4];
}

ValueMetadata *type metadata accessor for InstrumentationUtils()
{
  return &type metadata for InstrumentationUtils;
}

uint64_t OUTLINED_FUNCTION_1_18()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_3_19()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_5_15(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_6_15()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_getObjectType();
}

id OUTLINED_FUNCTION_7_19(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __swift_project_value_buffer(a1, a2);
  return a10;
}

uint64_t OUTLINED_FUNCTION_8_12()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_9_19(float a1)
{
  float *v1 = a1;
  return swift_getObjectType();
}

uint64_t OUTLINED_FUNCTION_11_18()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_12_13(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_13_15()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_16_14()
{
  return swift_slowAlloc();
}

id OUTLINED_FUNCTION_17_12(void *a1)
{
  return [a1 init];
}

uint64_t OUTLINED_FUNCTION_19_11()
{
  return String.init<A>(describing:)();
}

id OUTLINED_FUNCTION_20_17(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  return objc_msgSend(a10, a2, v10);
}

void OUTLINED_FUNCTION_22_14()
{
  outlined bridged method (mbnn) of @objc FLOWLINKSchemaFLOWLINKActionParameter.name.setter(0x6E776F6E6B6E75, 0xE700000000000000, v0);
}

void OUTLINED_FUNCTION_24_11(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_25_9()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_getObjectType();
}

BOOL OUTLINED_FUNCTION_26_11(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_27_12()
{
  specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)();
}

uint64_t OUTLINED_FUNCTION_28_9(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_29_7()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_30_8()
{
  specialized static InstrumentationUtils.emitLinkFlowInstrumentation<A>(event:emitRequestLink:)();
}

uint64_t OUTLINED_FUNCTION_31_5(float a1)
{
  float *v1 = a1;
  return swift_getObjectType();
}

BOOL OUTLINED_FUNCTION_34_9(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_35_8()
{
  return v0;
}

void OUTLINED_FUNCTION_37_7()
{
  outlined bridged method (mbgnn) of @objc FLOWLINKSchemaFLOWLINKActionParameter.name.setter(v2, v1, v0);
}

void OUTLINED_FUNCTION_38_7(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_40_5(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_49_3(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

void *LNActionMetadata.firstParameterMetadata(from:)(void *a1)
{
  id v3 = [v1 parameters];
  type metadata accessor for LNActionParameterMetadata();
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = specialized Sequence.first(where:)(v4, a1);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t type metadata accessor for LNActionParameterMetadata()
{
  unint64_t result = lazy cache variable for type metadata for LNActionParameterMetadata;
  if (!lazy cache variable for type metadata for LNActionParameterMetadata)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNActionParameterMetadata);
  }
  return result;
}

void *specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v18 = v2;
    unint64_t v19 = v2 & 0xC000000000000001;
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = v19 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v2 + 8 * v4);
      os_log_type_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      uint64_t v8 = outlined bridged method (pb) of @objc INIntentSlotDescription.name.getter(v5);
      uint64_t v10 = v9;
      id v11 = [a2 parameterName];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      if (v10)
      {
        if (v8 == v12 && v10 == v14)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_20:
          swift_bridgeObjectRelease();
          return v6;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16)
        {

          goto LABEL_20;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      unint64_t v2 = v18;
      ++v4;
      if (v7 == v3) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
  }
LABEL_23:

  swift_bridgeObjectRelease();
  return 0;
}

uint64_t ListShortcutsFlow.__allocating_init(deviceState:aceServiceInvoker:catWrapper:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  ListShortcutsFlow.init(deviceState:aceServiceInvoker:catWrapper:)(a1, a2, a3);
  return v6;
}

uint64_t ListShortcutsFlow.aceServiceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 16, a1);
}

uint64_t ShortcutsLinkPromptForActionConfirmationFlowStrategy.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 56, a1);
}

uint64_t CustomIntentResponseGenerator.continueInAppCATWrapperSimple.getter()
{
  return swift_retain();
}

uint64_t ListShortcutsFlow.init(deviceState:aceServiceInvoker:catWrapper:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  outlined init with copy of DeviceState(a2, v3 + 16);
  outlined init with copy of DeviceState((uint64_t)a1, v3 + 56);
  *(void *)(v3 + 104) = a3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  swift_retain();
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  type metadata accessor for ViewFactory();
  swift_allocObject();
  uint64_t v8 = ViewFactory.init(ttsEnabled:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  *(void *)(v4 + 96) = v8;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v4;
}

uint64_t ListShortcutsFlow.on(input:)(uint64_t a1)
{
  uint64_t v42 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_2();
  uint64_t v40 = v2;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_20_0();
  uint64_t v41 = v5 - v4;
  uint64_t v6 = type metadata accessor for VoiceCommandsNLIntent(0);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_20_0();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_2();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_20_0();
  uint64_t v23 = v22 - v21;
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 88))(v16, v10) == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 96))(v16, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v23, v16, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v9, v23, v17);
    if (one-time initialization token for voiceCommandVerbNode != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, 255, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
    IntentNodeTraversable.value<A>(forNode:)();
    if (v43 == 3)
    {
      outlined destroy of VoiceCommandsNLIntent(v9);
      uint64_t v24 = OUTLINED_FUNCTION_8_13();
      v25(v24);
      return 1;
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.voiceCommands);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v41, a1, v42);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v39 = v29;
      id v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)id v30 = 136315138;
      lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (void (*)(uint64_t))&type metadata accessor for Input);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v33 = OUTLINED_FUNCTION_9_20();
      v34(v33);
      _os_log_impl(&dword_0, v28, v39, "Received NLV3 intent that is not list shortcuts intent: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v35 = OUTLINED_FUNCTION_9_20();
      v36(v35);
    }
    outlined destroy of VoiceCommandsNLIntent(v9);
    uint64_t v37 = OUTLINED_FUNCTION_8_13();
    v38(v37);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
  }
  return 0;
}

uint64_t ListShortcutsFlow.execute(completion:)()
{
  type metadata accessor for ListShortcutsFlow();
  lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent(&lazy protocol witness table cache variable for type ListShortcutsFlow and conformance ListShortcutsFlow, v0, (void (*)(uint64_t))type metadata accessor for ListShortcutsFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t ListShortcutsFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v1[4] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[5] = v4;
  v1[6] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  int *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  uint64_t v1 = v0[3];
  type metadata accessor for ViewFactory();
  swift_allocObject();
  v0[7] = ViewFactory.init(ttsEnabled:)();
  uint64_t v2 = *(int **)(class metadata base offset for ListShortcutsCATs + **(void **)(v1 + 104) + 8);
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  *uint64_t v3 = v0;
  v3[1] = ListShortcutsFlow.execute();
  uint64_t v4 = v0[6];
  return v6(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v3 = v2;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  void *v1;
  uint64_t v3;

  dispatch thunk of ViewFactory.makeUtteranceViews(template:listenAfterSpeaking:canUseServerTTS:)();
  type metadata accessor for SiriKitAceViewBuilder();
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  v0[10] = dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
  swift_bridgeObjectRelease();
  swift_release();
  v0[11] = [objc_allocWithZone((Class)SAUIAddViews) init];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  void *v1 = v0;
  v1[1] = ListShortcutsFlow.execute();
  return ListShortcutsFlow.buildAceViews(aceViewBuilder:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  *(void *)(v1 + 104) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v2, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 24);
  outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(*(void *)(v0 + 104), *(void **)(v0 + 88));
  uint64_t v2 = v1 + 2;
  uint64_t v4 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v5;
  uint64_t v6 = type metadata accessor for SABaseCommand();
  *uint64_t v5 = v0;
  v5[1] = ListShortcutsFlow.execute();
  uint64_t v7 = *(void *)(v0 + 88);
  return AceServiceInvokerAsync.submit<A>(_:)(v7, v4, v6, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  else {

  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  static ExecuteResponse.complete()();
  swift_release();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;

  return _swift_unexpectedError(*(void *)(v0 + 72), "SiriLinkFlowPlugin/ListShortcutsFlow.swift", 42, 1, 51);
}

uint64_t ListShortcutsFlow.buildAceViews(aceViewBuilder:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for TemplatingText();
  v1[4] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[5] = v4;
  v1[6] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for TemplatingSection();
  v1[7] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[8] = v6;
  v1[9] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  v1[10] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[11] = v8;
  v1[12] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  uint64_t v1 = (void *)v0[3];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v1[10]);
  if (dispatch thunk of DeviceState.isPhone.getter())
  {
    uint64_t v2 = *(void **)(v0[3] + 104);
    uint64_t v3 = v1[10];
    uint64_t v4 = v1[11];
    __swift_project_boxed_opaque_existential_1(v1 + 7, v3);
    uint64_t v5 = DeviceState.asSiriKitDeviceState()(v3, v4);
    v0[13] = v5;
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*v2 + class metadata base offset for ListShortcutsCATs)
                                                   + **(int **)(*v2 + class metadata base offset for ListShortcutsCATs));
    uint64_t v6 = (void *)swift_task_alloc();
    v0[14] = v6;
    *uint64_t v6 = v0;
    v6[1] = ListShortcutsFlow.buildAceViews(aceViewBuilder:);
    uint64_t v7 = v0[12];
    return v11(v7, v5);
  }
  else
  {
    uint64_t v9 = dispatch thunk of SiriKitAceViewBuilder.build()();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
    return v10(v9);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  id v1;
  id v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v1 = [objc_allocWithZone((Class)SAAppsLaunchApp) init];
  outlined bridged method (mbgnn) of @objc SAAppsLaunchApp.launchId.setter(0xD000000000000013, 0x8000000000225330, v1);
  uint64_t v2 = [objc_allocWithZone((Class)SAUIButton) init];
  unint64_t result = TemplatingResult.sections.getter();
  if (*(void *)(result + 16))
  {
    uint64_t v4 = v0[9];
    uint64_t v18 = v0[10];
    uint64_t v19 = v0[12];
    uint64_t v6 = v0[7];
    uint64_t v5 = v0[8];
    uint64_t v7 = v0[5];
    uint64_t v8 = v0[6];
    uint64_t v9 = v0[4];
    uint64_t v17 = v0[11];
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16))(v4, result + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), v6);
    swift_bridgeObjectRelease();
    TemplatingSection.content.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v10 = TemplatingText.text.getter();
    uint64_t v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
    outlined bridged method (mbnn) of @objc SAUIButton.text.setter(v10, v12, v2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_211C70;
    *(void *)(v13 + 32) = v1;
    uint64_t v20 = v13;
    specialized Array._endMutation()();
    uint64_t v14 = v1;
    outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(v20, v2);
    dispatch thunk of SiriKitAceViewBuilder.addButton(button:)();
    uint64_t v15 = dispatch thunk of SiriKitAceViewBuilder.build()();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
    return v16(v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release();
  return _swift_unexpectedError(v1, "SiriLinkFlowPlugin/ListShortcutsFlow.swift", 42, 1, 71);
}

uint64_t ListShortcutsFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  swift_release();
  return v0;
}

uint64_t ListShortcutsFlow.__deallocating_deinit()
{
  ListShortcutsFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance ListShortcutsFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ListShortcutsFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for Flow.execute() in conformance ListShortcutsFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 136) + **(int **)(**(void **)v1 + 136));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance ListShortcutsFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.execute() in conformance ListShortcutsFlow()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ListShortcutsFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ListShortcutsFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for ListShortcutsFlow()
{
  return self;
}

uint64_t base witness table accessor for Flow in ListShortcutsFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent(&lazy protocol witness table cache variable for type ListShortcutsFlow and conformance ListShortcutsFlow, a2, (void (*)(uint64_t))type metadata accessor for ListShortcutsFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in ListShortcutsFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent(&lazy protocol witness table cache variable for type ListShortcutsFlow and conformance ListShortcutsFlow, a2, (void (*)(uint64_t))type metadata accessor for ListShortcutsFlow);
}

uint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_8_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_20()
{
  return v0;
}

uint64_t INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t v9 = type metadata accessor for Locale();
  v8[10] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v8[11] = v10;
  v8[12] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for TimeZone();
  v8[13] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v8[14] = v12;
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Calendar();
  v8[17] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v8[18] = v14;
  v8[19] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v8[20] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v8[21] = OUTLINED_FUNCTION_25();
  return _swift_task_switch(INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:), 0, 0);
}

uint64_t INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:)()
{
  uint64_t v5 = v3[9];
  switch(v5)
  {
    case 10:
      uint64_t v10 = Siri_Nlu_External_UserDialogAct.personValue(contactResolver:locale:)(v3[8], v3[4]);
      uint64_t v11 = v3[2];
      if (!v10) {
        goto LABEL_45;
      }
      uint64_t v12 = &lazy cache variable for type metadata for INPerson;
      goto LABEL_15;
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 22:
    case 23:
    case 25:
    case 28:
    case 29:
    case 31:
    case 33:
    case 34:
    case 35:
    case 37:
      goto LABEL_8;
    case 14:
      static Calendar.current.getter();
      static TimeZone.current.getter();
      uint64_t v17 = (void *)swift_task_alloc();
      v3[22] = v17;
      *uint64_t v17 = v3;
      v17[1] = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
      OUTLINED_FUNCTION_4_17();
      return Siri_Nlu_External_UserDialogAct.dateComponentsValue(dateTimeResolving:locationProviding:locale:calendar:timeZone:)();
    case 19:
      OUTLINED_FUNCTION_2_18();
      uint64_t v20 = (unint64_t *)&lazy cache variable for type metadata for NSUnitLength;
      goto LABEL_35;
    case 21:
    case 26:
      uint64_t v6 = Siri_Nlu_External_UserDialogAct.doubleValue.getter();
      uint64_t v7 = v3[2];
      if (v8) {
        goto LABEL_42;
      }
      uint64_t v9 = &type metadata for Double;
      goto LABEL_22;
    case 24:
      uint64_t v6 = Siri_Nlu_External_UserDialogAct.intValue.getter();
      uint64_t v7 = v3[2];
      if (v21) {
        goto LABEL_42;
      }
      uint64_t v9 = &type metadata for Int64;
LABEL_22:
      *(void *)(v7 + 24) = v9;
      *(void *)uint64_t v7 = v6;
      goto LABEL_46;
    case 27:
      static TimeZone.current.getter();
      uint64_t v22 = (void *)swift_task_alloc();
      v3[24] = v22;
      void *v22 = v3;
      v22[1] = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
      OUTLINED_FUNCTION_4_17();
      return Siri_Nlu_External_UserDialogAct.placementValue(locationResolving:locationProviding:locale:timeZone:)();
    case 30:
      goto LABEL_26;
    case 32:
      OUTLINED_FUNCTION_2_18();
      uint64_t v20 = (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature;
      goto LABEL_35;
    case 36:
      Siri_Nlu_External_UserDialogAct.urlValue.getter(v3[21]);
      uint64_t v26 = v3[21];
      uint64_t v27 = type metadata accessor for URL();
      OUTLINED_FUNCTION_8_14(v27);
      if (v28)
      {
        outlined destroy of URL?(v26, (uint64_t *)&demangling cache variable for type metadata for URL?);
        *(_OWORD *)&dword_0 = 0u;
        *(_OWORD *)&dword_10 = 0u;
      }
      else
      {
        *(void *)&dword_18 = v0;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v0 - 8) + 32))(boxed_opaque_existential_1, v26, v0);
      }
      goto LABEL_46;
    case 38:
      OUTLINED_FUNCTION_2_18();
      uint64_t v20 = (unint64_t *)&lazy cache variable for type metadata for NSUnitMass;
      goto LABEL_35;
    case 39:
      OUTLINED_FUNCTION_2_18();
      uint64_t v20 = (unint64_t *)&lazy cache variable for type metadata for NSUnitVolume;
      goto LABEL_35;
    case 40:
      OUTLINED_FUNCTION_2_18();
      uint64_t v20 = (unint64_t *)&lazy cache variable for type metadata for NSUnitSpeed;
LABEL_35:
      type metadata accessor for NSError(0, v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v0);
      id v29 = (id)NSDimension.init(forLocale:)();
      goto LABEL_36;
    case 41:
      id v29 = [self kilowattHours];
LABEL_36:
      uint64_t v30 = Siri_Nlu_External_UserDialogAct.measurementValue(locale:)();
      unsigned __int8 v33 = v32;
      if (v32 == 0xFF)
      {
        uint64_t v37 = (_OWORD *)v3[2];

        *uint64_t v37 = 0u;
        v37[1] = 0u;
      }
      else
      {
        uint64_t v34 = v30;
        uint64_t v35 = (void *)v3[2];
        if (v32)
        {
          os_log_type_t v39 = v31;
          id v40 = [objc_allocWithZone((Class)NSMeasurement) initWithDoubleValue:v31 unit:*(double *)&v30];
          outlined consume of ParsedMeasurement?(v34, v39, v33);
          v35[3] = type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSMeasurement);

          *uint64_t v35 = v40;
        }
        else
        {
          id v36 = [objc_allocWithZone((Class)NSMeasurement) initWithDoubleValue:v29 unit:*(double *)&v30];
          v35[3] = type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSMeasurement);

          *uint64_t v35 = v36;
        }
      }
      goto LABEL_46;
    default:
      if (v5 == 1)
      {
        char v38 = Siri_Nlu_External_UserDialogAct.BOOLValue.getter();
        uint64_t v7 = v3[2];
        if (v38 != 2)
        {
          *(void *)(v7 + 24) = &type metadata for Bool;
          *(unsigned char *)uint64_t v7 = v38 & 1;
          goto LABEL_46;
        }
      }
      else
      {
        if (v5 == 53)
        {
          uint64_t v10 = Siri_Nlu_External_UserDialogAct.currencyValue(locale:)(v3[4]);
          uint64_t v11 = v3[2];
          if (v10)
          {
            uint64_t v12 = (unint64_t *)&lazy cache variable for type metadata for INCurrencyAmount;
LABEL_15:
            *(void *)(v11 + 24) = type metadata accessor for NSError(0, v12);
            *(void *)uint64_t v11 = v10;
          }
          else
          {
LABEL_45:
            *(_OWORD *)uint64_t v11 = 0u;
            *(_OWORD *)(v11 + 16) = 0u;
          }
LABEL_46:
          OUTLINED_FUNCTION_3_20();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          OUTLINED_FUNCTION_12_0();
          OUTLINED_FUNCTION_4_17();
          __asm { BRAA            X1, X16 }
        }
LABEL_8:
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl(&dword_0, v14, v15, "SiriLinkFlow does not yet support converting this parameter type from NLv4 parses.", v16, 2u);
          swift_slowDealloc();
        }

LABEL_26:
        uint64_t v24 = Siri_Nlu_External_UserDialogAct.stringValue.getter();
        uint64_t v7 = v3[2];
        if (v25)
        {
          *(void *)(v7 + 24) = &type metadata for String;
          *(void *)uint64_t v7 = v24;
          *(void *)(v7 + 8) = v25;
          goto LABEL_46;
        }
      }
LABEL_42:
      *(_OWORD *)uint64_t v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      goto LABEL_46;
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t v16;

  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v5 = v4[19];
  uint64_t v6 = v4[18];
  uint64_t v7 = v4[17];
  char v8 = v4[16];
  uint64_t v9 = v4[14];
  uint64_t v10 = v4[13];
  uint64_t v11 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v12 = v11;
  *(void *)(v13 + 184) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v0) {
    uint64_t v14 = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
  }
  else {
    uint64_t v14 = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
  }
  return _swift_task_switch(v14, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_8_14(v4);
  if (v5)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for DateComponents?);
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  else
  {
    *(void *)(v1 + 24) = v0;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v1);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v0 - 8) + 32))(boxed_opaque_existential_1, v3, v0);
  }
  OUTLINED_FUNCTION_3_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v7();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v14;

  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v5 = v4[15];
  uint64_t v6 = v4[14];
  uint64_t v7 = v4[13];
  char v8 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v9 = v8;
  *(void *)(v11 + 200) = v10;
  *(void *)(v11 + 208) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v0) {
    uint64_t v12 = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
  }
  else {
    uint64_t v12 = INIntentSlotValueType.getIntentSlotValue(userDialogAct:locale:locationResolver:locationProvider:dateTimeResolver:contactResolver:);
  }
  return _swift_task_switch(v12, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 16);
  if (v1)
  {
    *(void *)(v2 + 24) = type metadata accessor for NSError(0, &lazy cache variable for type metadata for CLPlacemark);
    *(void *)uint64_t v2 = v1;
  }
  else
  {
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  OUTLINED_FUNCTION_3_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_11_19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_11_19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t INIntentSlotValueType.toUsoTaskBuilder()(uint64_t a1)
{
  switch(a1)
  {
    case 10:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      OUTLINED_FUNCTION_0_5();
      uint64_t result = static UsoTaskBuilder_execute_common_VoiceCommand.personTaskBuilder(value:)();
      break;
    case 14:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      uint64_t result = static UsoTaskBuilder_execute_common_VoiceCommand.dateTaskBuilder()();
      break;
    case 19:
    case 32:
    case 38:
    case 39:
    case 40:
    case 41:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      uint64_t result = static UsoTaskBuilder_execute_common_VoiceCommand.unitTaskBuilder(value:symbol:unitName:)(0, 1, 0, 0, 0, 0);
      break;
    case 21:
    case 24:
    case 26:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      uint64_t result = static UsoTaskBuilder_execute_common_VoiceCommand.numberTaskBuilder()();
      break;
    case 27:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      uint64_t result = static UsoTaskBuilder_execute_common_VoiceCommand.placemarkTaskBuilder()();
      break;
    case 30:
      goto LABEL_10;
    case 36:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      OUTLINED_FUNCTION_0_5();
      uint64_t result = static UsoTaskBuilder_execute_common_VoiceCommand.urlTaskBuilder(value:)();
      break;
    default:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_0, v3, v4, "SiriLinkFlow does not yet support providing NLV4 context for parameter type: %ld.", v5, 0xCu);
        swift_slowDealloc();
      }

LABEL_10:
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      OUTLINED_FUNCTION_0_5();
      uint64_t result = static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)();
      break;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_20()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_8_14(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_11_19()
{
  return swift_task_dealloc();
}

void *Values.no.unsafeMutableAddressor()
{
  return &static Values.no;
}

void *Values.yes.unsafeMutableAddressor()
{
  return &static Values.yes;
}

void *Nodes.domain.unsafeMutableAddressor()
{
  return &static Nodes.domain;
}

const char *Values.domainName.unsafeMutableAddressor()
{
  return "voiceCommands";
}

void *Nodes.confirmation.unsafeMutableAddressor()
{
  return &static Nodes.confirmation;
}

void *Nodes.text.unsafeMutableAddressor()
{
  return &static Nodes.text;
}

void *Nodes.scalar.unsafeMutableAddressor()
{
  return &static Nodes.scalar;
}

void *Nodes.dateTime.unsafeMutableAddressor()
{
  return &static Nodes.dateTime;
}

void *Nodes.unit.unsafeMutableAddressor()
{
  return &static Nodes.unit;
}

void *Nodes.contact.unsafeMutableAddressor()
{
  return &static Nodes.contact;
}

void *Nodes.option.unsafeMutableAddressor()
{
  return &static Nodes.option;
}

void *Nodes.voiceCommandReference.unsafeMutableAddressor()
{
  return &static Nodes.voiceCommandReference;
}

void *Nodes.location.unsafeMutableAddressor()
{
  return &static Nodes.location;
}

void *Labels.voiceCommandName.unsafeMutableAddressor()
{
  return &static Labels.voiceCommandName;
}

unint64_t static Labels.voiceCommandName.getter()
{
  return OUTLINED_FUNCTION_0_16(16);
}

void *Labels.category.unsafeMutableAddressor()
{
  return &static Labels.category;
}

unint64_t static Labels.category.getter()
{
  return OUTLINED_FUNCTION_0_16(20);
}

void *Labels.voiceCommandConfirmation.unsafeMutableAddressor()
{
  return &static Labels.voiceCommandConfirmation;
}

unint64_t static USONodes.confirmation.getter()
{
  return OUTLINED_FUNCTION_0_16(24);
}

void *Labels.reference.unsafeMutableAddressor()
{
  return &static Labels.reference;
}

unint64_t static Labels.reference.getter()
{
  return OUTLINED_FUNCTION_0_16(21);
}

void *Labels.text.unsafeMutableAddressor()
{
  return &static Labels.text;
}

unint64_t static Labels.text.getter()
{
  return OUTLINED_FUNCTION_0_16(16);
}

void *Labels.scalar.unsafeMutableAddressor()
{
  return &static Labels.scalar;
}

unint64_t static Labels.scalar.getter()
{
  return OUTLINED_FUNCTION_0_16(18);
}

void *Labels.unit.unsafeMutableAddressor()
{
  return &static Labels.unit;
}

unint64_t static Labels.unit.getter()
{
  return OUTLINED_FUNCTION_0_16(16);
}

void *Labels.dateTime.unsafeMutableAddressor()
{
  return &static Labels.dateTime;
}

unint64_t static Labels.dateTime.getter()
{
  return OUTLINED_FUNCTION_0_16(20);
}

void *Labels.location.unsafeMutableAddressor()
{
  return &static Labels.location;
}

unint64_t static Labels.location.getter()
{
  return OUTLINED_FUNCTION_0_16(20);
}

void *Labels.contact.unsafeMutableAddressor()
{
  return &static Labels.contact;
}

unint64_t static Labels.contact.getter()
{
  return OUTLINED_FUNCTION_0_16(19);
}

void *Labels.option.unsafeMutableAddressor()
{
  return &static Labels.option;
}

unint64_t static Labels.option.getter()
{
  return OUTLINED_FUNCTION_0_16(18);
}

void *Values.abort.unsafeMutableAddressor()
{
  return &static Values.abort;
}

unint64_t static Values.abort.getter()
{
  return OUTLINED_FUNCTION_0_16(55);
}

unint64_t static Values.yes.getter()
{
  return OUTLINED_FUNCTION_0_16(52);
}

unint64_t static Values.no.getter()
{
  return OUTLINED_FUNCTION_0_16(51);
}

void *Values.previous.unsafeMutableAddressor()
{
  return &static Values.previous;
}

unint64_t static Values.previous.getter()
{
  return OUTLINED_FUNCTION_0_16(55);
}

void *Values.next.unsafeMutableAddressor()
{
  return &static Values.next;
}

unint64_t static Values.next.getter()
{
  return OUTLINED_FUNCTION_0_16(51);
}

void *Values.repeat.unsafeMutableAddressor()
{
  return &static Values.repeat;
}

unint64_t static Values.repeat.getter()
{
  return OUTLINED_FUNCTION_0_16(53);
}

uint64_t static Values.domainName.getter()
{
  return 0x6D6F436563696F76;
}

unint64_t static Nodes.domain.getter()
{
  return OUTLINED_FUNCTION_0_16(31);
}

void *Nodes.voiceCommandName.unsafeMutableAddressor()
{
  return &static Nodes.voiceCommandName;
}

unint64_t static Nodes.voiceCommandName.getter()
{
  return OUTLINED_FUNCTION_0_16(34);
}

unint64_t static Nodes.confirmation.getter()
{
  return OUTLINED_FUNCTION_0_16(42);
}

unint64_t static Nodes.voiceCommandReference.getter()
{
  return OUTLINED_FUNCTION_0_16(39);
}

unint64_t static Nodes.text.getter()
{
  return OUTLINED_FUNCTION_0_16(34);
}

unint64_t static Nodes.scalar.getter()
{
  return OUTLINED_FUNCTION_0_16(36);
}

unint64_t static Nodes.unit.getter()
{
  return OUTLINED_FUNCTION_0_16(34);
}

unint64_t static Nodes.dateTime.getter()
{
  return OUTLINED_FUNCTION_0_16(38);
}

unint64_t static Nodes.location.getter()
{
  return OUTLINED_FUNCTION_0_16(38);
}

unint64_t static Nodes.contact.getter()
{
  return OUTLINED_FUNCTION_0_16(37);
}

unint64_t static Nodes.option.getter()
{
  return OUTLINED_FUNCTION_0_16(36);
}

void *Nodes.pagination.unsafeMutableAddressor()
{
  return &static Nodes.pagination;
}

unint64_t static Nodes.pagination.getter()
{
  return OUTLINED_FUNCTION_0_16(40);
}

void type metadata accessor for Labels()
{
}

void type metadata accessor for Values()
{
}

void type metadata accessor for Nodes()
{
}

unint64_t OUTLINED_FUNCTION_0_16(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  return specialized _arrayForceCast<A, B>(_:)(a1, (uint64_t)&type metadata for WFChooseFromListDisambiguationItem, (uint64_t)&protocol witness table for WFChooseFromListDisambiguationItem);
}

{
  int64_t v1;
  void *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  long long v8;
  ValueMetadata *v9;
  _UNKNOWN **v10;
  unsigned char v11[88];
  void *v12;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    os_log_type_t v4 = a1 + 32;
    do
    {
      outlined init with copy of CustomIntentDisambiguationItem(v4, (uint64_t)v11);
      uint64_t v12 = v2;
      uint64_t v6 = v2[2];
      uint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1);
        uint64_t v2 = v12;
      }
      uint64_t v9 = &type metadata for CustomIntentDisambiguationItem;
      uint64_t v10 = &protocol witness table for CustomIntentDisambiguationItem;
      *(void *)&char v8 = swift_allocObject();
      outlined init with copy of CustomIntentDisambiguationItem((uint64_t)v11, v8 + 16);
      v2[2] = v6 + 1;
      outlined init with take of AceServiceInvokerAsync(&v8, (uint64_t)&v2[5 * v6 + 4]);
      outlined destroy of CustomIntentDisambiguationItem((uint64_t)v11);
      v4 += 88;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = a1 + 32;
    do
    {
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      os_log_type_t v4 = _swiftEmptyArrayStorage[2];
      if (v4 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      _swiftEmptyArrayStorage[2] = v4 + 1;
      _swiftEmptyArrayStorage[v4 + 4] = v6;
      v3 += 8;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

{
  return specialized _arrayForceCast<A, B>(_:)(a1, (uint64_t)&type metadata for ShortcutsLinkDisambiguationItem, (uint64_t)&protocol witness table for ShortcutsLinkDisambiguationItem);
}

{
  int64_t v1;
  void *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  long long v8;
  void *v9;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    os_log_type_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      uint64_t v6 = v2[2];
      uint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      outlined init with take of Any(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  os_log_type_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v26 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    os_log_type_t v4 = _swiftEmptyArrayStorage;
    uint64_t v6 = (void **)(a1 + 80);
    do
    {
      uint64_t v7 = (uint64_t)*(v6 - 5);
      uint64_t v8 = (uint64_t)*(v6 - 3);
      uint64_t v20 = (uint64_t)*(v6 - 4);
      uint64_t v21 = (uint64_t)*(v6 - 6);
      uint64_t v9 = *(v6 - 2);
      uint64_t v10 = (uint64_t)*(v6 - 1);
      uint64_t v11 = *v6;
      uint64_t v26 = v4;
      unint64_t v12 = v4[2];
      unint64_t v13 = v4[3];
      int64_t v22 = v12 + 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v14 = v9;
      swift_bridgeObjectRetain();
      id v15 = v11;
      if (v12 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v22, 1);
        os_log_type_t v4 = v26;
      }
      v6 += 7;
      uint64_t v24 = a2;
      uint64_t v25 = a3;
      uint64_t v16 = (void *)swift_allocObject();
      *(void *)&long long v23 = v16;
      v16[2] = v21;
      v16[3] = v7;
      v16[4] = v20;
      v16[5] = v8;
      v16[6] = v9;
      v16[7] = v10;
      v16[8] = v15;
      v4[2] = v22;
      outlined init with take of AceServiceInvokerAsync(&v23, (uint64_t)&v4[5 * v12 + 4]);
      --v3;
    }
    while (v3);
  }
  return v4;
}

void *specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized Array.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return specialized Array.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

void *specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v11 = (void *)swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v11[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v10 = (void *)a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  uint64_t v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v10;
}

uint64_t CustomIntentNLContextProvider.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 16, a1);
}

uint64_t WorkflowHomePodSnippetProvider.__allocating_init(deviceState:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  outlined init with take of AceServiceInvokerAsync(a1, v2 + 16);
  return v2;
}

uint64_t WorkflowHomePodSnippetProvider.init(deviceState:)(long long *a1)
{
  outlined init with take of AceServiceInvokerAsync(a1, v1 + 16);
  return v1;
}

uint64_t CustomIntentNLContextProvider.makeNeedsValueContextFor(intent:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  v5[19] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v5[20] = v7;
  v5[21] = swift_task_alloc();
  return _swift_task_switch(CustomIntentNLContextProvider.makeNeedsValueContextFor(intent:parameter:), 0, 0);
}

id CustomIntentNLContextProvider.makeNeedsValueContextFor(intent:parameter:)()
{
  if (INIntent.isBooleanParameter(parameterName:)(*(Swift::String *)(v0 + 128)))
  {
    VoiceCommandNLContextProvider.makeContextForBoolNeedsValuePrompt(intent:parameter:)();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 136);
    id v17 = [*(id *)(v0 + 120) _codableDescription];
    id v18 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(v15, v16, v17);

    if (!v18)
    {
      type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
      uint64_t v19 = static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)();
      VoiceCommandNLContextProvider.makeContextForNeedsValue(taskBuilder:)(v19);
      swift_release();
      goto LABEL_8;
    }
    CustomIntentNLContextProvider.intentCodableAttributeToUsoTaskBuilder(attribute:)(v18);
    uint64_t v21 = swift_retain();
    VoiceCommandNLContextProvider.makeContextForNeedsValue(taskBuilder:)(v21);
    swift_release();
    if (INCodableAttribute.requiresDictationPrompt()())
    {
      NLContextUpdate.dictationPromptTargetDomain.setter();
      INCodableAttribute.promptTargets()();
      NLContextUpdate.dictationPromptTargetNodes.setter();
    }
    else
    {
      NLContextUpdate.weightedPromptTargetDomain.setter();
      INCodableAttribute.promptTargets()();
      NLContextUpdate.weightedPromptResponseTargets.setter();
    }
    swift_release();
  }
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  int64_t v3 = *(void **)(v0 + 120);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v4 + 16) = xmmword_211C70;
  id v5 = v3;
  uint64_t v6 = INIntent.bundleId.getter();
  *(void *)(v0 + 16) = v5;
  *(unsigned char *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = v6;
  *(void *)(v0 + 40) = v7;
  *(void *)(v0 + 48) = v2;
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 64) = 0;
  OUTLINED_FUNCTION_12_14();
  swift_bridgeObjectRetain();
  CustomIntentStateAttachment.asDictionary()();
  objc_allocWithZone((Class)SABaseAceObject);
  uint64_t v8 = swift_bridgeObjectRetain();
  id result = @nonobjc SABaseAceObject.init(dictionary:)(v8);
  if (!result)
  {
    __break(1u);
    return result;
  }
  id v10 = result;
  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v11 = *(void *)(v0 + 168);
  uint64_t v22 = *(void *)(v0 + 152);
  uint64_t v14 = *(void *)(v0 + 112);
  unint64_t v13 = *(void **)(v0 + 120);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 32) = v10;
  specialized Array._endMutation()();
  NLContextUpdate.conversationStateAttachments.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v14, v11, v22);
LABEL_8:
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v20();
}

id static CustomIntentNLContextProvider.attributeForParameter(intent:parameter:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [a1 _codableDescription];
  id v6 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(a2, a3, v5);

  return v6;
}

uint64_t CustomIntentNLContextProvider.intentCodableAttributeToUsoTaskBuilder(attribute:)(void *a1)
{
  self;
  if (swift_dynamicCastObjCClass())
  {
LABEL_2:
    type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
    return static UsoTaskBuilder_execute_common_VoiceCommand.stringTaskBuilder(value:)();
  }
  self;
  if (swift_dynamicCastObjCClass())
  {
    lazy protocol witness table accessor for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    self;
    if (!swift_dynamicCastObjCClass())
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
      id v7 = a1;
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)id v10 = 136315138;
        id v11 = v7;
        id v12 = [v11 description];
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v8, v9, "Unsupported INCodableAttribute when building SystemDialogAct %s", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      goto LABEL_2;
    }
    self;
    int64_t v3 = (void *)swift_dynamicCastObjCClassUnconditional();
    id v4 = a1;
    uint64_t v5 = INIntentSlotValueType.toUsoTaskBuilder()((uint64_t)[v3 valueType]);

    return v5;
  }
}

uint64_t CustomIntentNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:disambiguationItems:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[24] = a6;
  v7[25] = v6;
  v7[22] = a4;
  v7[23] = a5;
  v7[20] = a2;
  v7[21] = a3;
  v7[19] = a1;
  uint64_t v8 = type metadata accessor for Locale();
  v7[26] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v7[27] = v9;
  v7[28] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  v7[29] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v7[30] = v11;
  v7[31] = swift_task_alloc();
  return _swift_task_switch(CustomIntentNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:disambiguationItems:), 0, 0);
}

id CustomIntentNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:disambiguationItems:)()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  int64_t v3 = *(void **)(v0 + 160);
  specialized _arrayForceCast<A, B>(_:)(*(void *)(v0 + 192));
  VoiceCommandNLContextProvider.makeContextForDisambiguation(items:)();
  swift_bridgeObjectRelease();
  id v4 = [v3 _codableDescription];
  id v5 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(v2, v1, v4);

  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 176);
    uint64_t v29 = *(void *)(v0 + 208);
    uint64_t v10 = *(void **)(v0 + 160);
    uint64_t v11 = *(void *)(v0 + 168);
    char v28 = v5;
    INCodableAttribute.disambiguationPromptTargets()();
    NLContextUpdate.weightedPromptResponseTargets.setter();
    __swift_project_boxed_opaque_existential_1((void *)(v8 + 16), *(void *)(v8 + 40));
    dispatch thunk of DeviceState.siriLocale.getter();
    INIntentResolutionResult.getDisplayHints(intent:parameter:locale:shouldIncludeOrdinalReference:)(v10, v11, v9, v6, 1);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v29);
    NLContextUpdate.displayHints.setter();
    uint64_t v12 = INIntentResolutionResult.safeJSONDictionaryRepresentation(for:parameterName:)((uint64_t)v10);
    specialized Dictionary.subscript.getter(0x6F697463656C6573, 0xEE00736D6574496ELL, v12, (_OWORD *)(v0 + 112));
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 136))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AnyHashable : Any]]);
      if (swift_dynamicCast()) {
        uint64_t v13 = *(void *)(v0 + 144);
      }
      else {
        uint64_t v13 = 0;
      }
    }
    else
    {
      outlined destroy of Any?(v0 + 112);
      uint64_t v13 = 0;
    }
    uint64_t v15 = *(void *)(v0 + 168);
    uint64_t v14 = *(void *)(v0 + 176);
    uint64_t v16 = *(void **)(v0 + 160);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = OUTLINED_FUNCTION_16_2();
    *(_OWORD *)(v17 + 16) = xmmword_211C70;
    id v18 = v16;
    uint64_t v19 = INIntent.bundleId.getter();
    *(void *)(v0 + 16) = v18;
    *(unsigned char *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = v19;
    *(void *)(v0 + 40) = v20;
    *(void *)(v0 + 48) = v15;
    *(void *)(v0 + 56) = v14;
    *(void *)(v0 + 72) = 0;
    *(void *)(v0 + 80) = 0;
    *(void *)(v0 + 64) = v13;
    OUTLINED_FUNCTION_12_14();
    swift_bridgeObjectRetain();
    CustomIntentStateAttachment.asDictionary()();
    objc_allocWithZone((Class)SABaseAceObject);
    uint64_t v21 = swift_bridgeObjectRetain();
    id result = @nonobjc SABaseAceObject.init(dictionary:)(v21);
    if (!result)
    {
      __break(1u);
      return result;
    }
    id v23 = result;
    uint64_t v24 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v17 + 32) = v23;
    specialized Array._endMutation()();
    NLContextUpdate.conversationStateAttachments.setter();
  }
  uint64_t v25 = *(void *)(v0 + 232);
  uint64_t v26 = *(void *)(v0 + 152);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 240) + 32))(v26, *(void *)(v0 + 248), v25);
  __swift_storeEnumTagSinglePayload(v26, 0, 1, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v27();
}

id CustomIntentNLContextProvider.makeNeedsConfirmationContextFor(intent:parameter:resolutionResult:)(void *a1)
{
  VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v2 + 16) = xmmword_211C70;
  id v3 = a1;
  INIntent.bundleId.getter();
  swift_bridgeObjectRetain();
  CustomIntentStateAttachment.asDictionary()();
  id v4 = objc_allocWithZone((Class)SABaseAceObject);
  uint64_t v5 = swift_bridgeObjectRetain();
  id result = @nonobjc SABaseAceObject.init(dictionary:)(v5);
  if (result)
  {
    id v7 = result;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    *(void *)(v2 + 32) = v7;
    specialized Array._endMutation()();
    return (id)NLContextUpdate.conversationStateAttachments.setter();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CustomIntentNLContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:acceptLabel:denyLabel:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin(v8 - 8);
  OUTLINED_FUNCTION_50_1();
  uint64_t v39 = v9;
  uint64_t v43 = type metadata accessor for DisplayHint();
  OUTLINED_FUNCTION_0_2();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_50_1();
  uint64_t v41 = v13;
  uint64_t v42 = type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_0_2();
  uint64_t v40 = v14;
  uint64_t v16 = __chkstk_darwin(v15);
  v38[0] = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v38 - v18;
  v38[1] = a3;
  v38[2] = a4;
  VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
  type metadata accessor for MachineUtteranceBuilder();
  swift_allocObject();
  MachineUtteranceBuilder.init()();
  INIntent.category()();
  dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
  swift_release();
  swift_bridgeObjectRelease();
  dispatch thunk of MachineUtteranceBuilder.build()();
  swift_release();
  NLContextUpdate.nlInput.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v20 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v20 + 16) = xmmword_211C70;
  id v21 = a1;
  uint64_t v22 = INIntent.bundleId.getter();
  id v45 = v21;
  char v46 = 1;
  uint64_t v47 = v22;
  uint64_t v48 = v23;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  os_log_type_t v52 = a2;
  uint64_t v53 = 0;
  char v54 = 1;
  uint64_t v55 = 0;
  char v56 = 1;
  id v24 = a2;
  CustomIntentStateAttachment.asDictionary()();
  id v25 = objc_allocWithZone((Class)SABaseAceObject);
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t result = (uint64_t)@nonobjc SABaseAceObject.init(dictionary:)(v26);
  if (result)
  {
    uint64_t v28 = result;

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    *(void *)(v20 + 32) = v28;
    uint64_t v44 = v20;
    specialized Array._endMutation()();
    NLContextUpdate.conversationStateAttachments.setter();
    Swift::String v29 = INIntent.verb()();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v30 = ((unint64_t)v29._object >> 56) & 0xF;
    if (((uint64_t)v29._object & 0x2000000000000000) == 0) {
      unint64_t v30 = v29._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v30)
    {
      swift_bridgeObjectRetain();
      SemanticValue.init(string:label:)();
      uint64_t v31 = v42;
      __swift_storeEnumTagSinglePayload(v39, 1, 1, v42);
      uint64_t v32 = v40;
      (*(void (**)(void, char *, uint64_t))(v40 + 16))(v38[0], v19, v31);
      uint64_t v33 = v41;
      DisplayHint.init(idValue:displayValue:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>);
      unint64_t v34 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_212160;
      unint64_t v36 = v35 + v34;
      uint64_t v37 = v43;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16))(v36, v33, v43);
      NLContextUpdate.displayHints.setter();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v33, v37);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v19, v31);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  v76 = a5;
  uint64_t v78 = a7;
  uint64_t v14 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_0_2();
  uint64_t v77 = v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<CustomIntentDisambiguationItem>);
  uint64_t v75 = a6;
  uint64_t v19 = PaginatedItemContainer.items.getter();
  specialized _arrayForceCast<A, B>(_:)(v19);
  swift_bridgeObjectRelease();
  uint64_t v74 = v8;
  VoiceCommandNLContextProvider.makeContextForDisambiguation(items:)();
  swift_bridgeObjectRelease();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.dictationPromptTargetNodes.setter();
  NLContextUpdate.dictationPromptAbortValues.setter();
  id v73 = a1;
  id v20 = [a1 _codableDescription];
  id v21 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(a2, a3, v20);

  if (!v21) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v77 + 32))(v78, v18, v14);
  }
  if (!a4 || !v76)
  {
LABEL_34:

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v77 + 32))(v78, v18, v14);
  }
  v72 = a4;
  uint64_t v68 = a2;
  id v70 = v21;
  uint64_t v69 = a3;
  uint64_t v71 = v14;
  Swift::Int v22 = PaginatedItemContainer.getCurrentPageIndex()();
  uint64_t v23 = PaginatedItemContainer.pageSize.getter();
  uint64_t v24 = v22 * v23;
  if ((unsigned __int128)(v22 * (__int128)v23) >> 64 != (v22 * v23) >> 63)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v25 = *(void *)(PaginatedItemContainer.page.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v72[2] < v26 || v76[2] < v26)
  {

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v77 + 32))(v78, v18, v71);
  }
  if (v26 < v24) {
    goto LABEL_42;
  }
  if ((v24 & 0x8000000000000000) == 0)
  {
    uint64_t v28 = (uint64_t)(v76 + 4);
    unint64_t v29 = (2 * v26) | 1;
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v31 = specialized Array.init<A>(_:)(v30, v28, v24, v29, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
    uint64_t v74 = __chkstk_darwin(v31);
    v76 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySDySSypGGG_Say11SiriKitFlow11DisplayHintVGs5NeverOTg5017_sSiSDySSypGSay11fg6Flow11ij33VGIgygo_Si6offset_AA7elementtAEs5K11OIegnrzr_TRSiAhNIgygo_Tf1cn_n(v74, (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:));
    uint64_t v32 = v76[2];
    if (v32)
    {
      uint64_t v33 = v76 + 4;
      unint64_t v34 = _swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v35 = *v33;
        uint64_t v36 = *(void *)(*v33 + 16);
        uint64_t v37 = v34[2];
        uint64_t v38 = v37 + v36;
        if (__OFADD__(v37, v36)) {
          break;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (!isUniquelyReferenced_nonNull_native || v38 > v34[3] >> 1)
        {
          if (v37 <= v38) {
            uint64_t v40 = v37 + v36;
          }
          else {
            uint64_t v40 = v37;
          }
          unint64_t v34 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v40, 1, (uint64_t)v34);
        }
        if (*(void *)(v35 + 16))
        {
          uint64_t v41 = v34[2];
          uint64_t v42 = (v34[3] >> 1) - v41;
          uint64_t v43 = *(void *)(type metadata accessor for DisplayHint() - 8);
          uint64_t v44 = *(void *)(v43 + 72);
          if (v42 < v36) {
            goto LABEL_38;
          }
          unint64_t v45 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
          char v46 = (char *)v34 + v45 + v44 * v41;
          unint64_t v47 = v35 + v45;
          uint64_t v48 = v44 * v36;
          uint64_t v49 = &v46[v48];
          unint64_t v50 = v47 + v48;
          if (v47 < (unint64_t)v49 && (unint64_t)v46 < v50) {
            goto LABEL_45;
          }
          swift_arrayInitWithCopy();
          if (v36)
          {
            uint64_t v52 = v34[2];
            BOOL v53 = __OFADD__(v52, v36);
            uint64_t v54 = v52 + v36;
            if (v53) {
              goto LABEL_39;
            }
            v34[2] = v54;
          }
        }
        else if (v36)
        {
          goto LABEL_37;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v33;
        if (!--v32) {
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    id v80 = v72;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)();
    NLContextUpdate.displayHints.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v55 = OUTLINED_FUNCTION_16_2();
    *(_OWORD *)(v55 + 16) = xmmword_211C70;
    id v56 = v73;
    uint64_t v57 = INIntent.bundleId.getter();
    uint64_t v59 = v58;
    uint64_t v60 = specialized _arrayForceCast<A, B>(_:)(v74);
    swift_bridgeObjectRelease();
    uint64_t v61 = PaginatedItemContainer.pageSize.getter();
    Swift::Int v62 = PaginatedItemContainer.getCurrentPageIndex()();
    id v80 = v56;
    char v81 = 0;
    uint64_t v82 = v57;
    uint64_t v83 = v59;
    uint64_t v84 = v68;
    uint64_t v85 = v69;
    v86 = v60;
    uint64_t v87 = 0;
    uint64_t v88 = v61;
    char v89 = 0;
    Swift::Int v90 = v62;
    char v91 = 0;
    swift_bridgeObjectRetain();
    CustomIntentStateAttachment.asDictionary()();
    id v63 = objc_allocWithZone((Class)SABaseAceObject);
    uint64_t v64 = swift_bridgeObjectRetain();
    id v65 = @nonobjc SABaseAceObject.init(dictionary:)(v64);
    if (!v65) {
      goto LABEL_44;
    }
    id v66 = v65;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    *(void *)(v55 + 32) = v66;
    uint64_t v79 = v55;
    specialized Array._endMutation()();
    NLContextUpdate.conversationStateAttachments.setter();
    id v21 = v70;
    INCodableAttribute.disambiguationPromptTargets()();
    NLContextUpdate.weightedPromptResponseTargets.setter();
    NLContextUpdate.weightedPromptStrict.setter();
    uint64_t v14 = v71;
    goto LABEL_34;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  OUTLINED_FUNCTION_0_8();
  OUTLINED_FUNCTION_1_19();
  uint64_t result = OUTLINED_FUNCTION_6_16();
  __break(1u);
  return result;
}

void *CustomIntentNLContextProvider.getOrdinalReference(index:count:selectionItem:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SemanticValue();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!*(void *)(a3 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x65756C6176, 0xE500000000000000);
  if ((v11 & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v10, (uint64_t)v16);
  outlined init with take of Any(v16, v17);
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult);
  static INIntentResolutionResult.makeAsIdString(input:)((uint64_t)v17);
  SemanticValue.init(string:label:)();
  uint64_t v12 = static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)(a1, a2);
  __chkstk_darwin(v12);
  *(void *)&v15[-16] = v9;
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11SiriKitFlow11DisplayHintVs5NeverOTg5((void (*)(void *))partial apply for closure #1 in static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:), (uint64_t)&v15[-32], (uint64_t)v12);
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  return v13;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySDySSypGGG_Say11SiriKitFlow11DisplayHintVGs5NeverOTg5017_sSiSDySSypGSay11fg6Flow11ij33VGIgygo_Si6offset_AA7elementtAEs5K11OIegnrzr_TRSiAhNIgygo_Tf1cn_n(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 32;
    do
    {
      uint64_t v7 = *(void *)(v6 + 8 * v5);
      swift_bridgeObjectRetain();
      uint64_t v8 = a2(v5, v7);
      swift_bridgeObjectRelease();
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      if (v9 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v8;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void CustomIntentNLContextProvider.init()()
{
}

uint64_t CustomIntentNLContextProvider.__ivar_destroyer()
{
  return __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
}

uint64_t WorkflowHomePodSnippetProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return v0;
}

uint64_t WorkflowHomePodSnippetProvider.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return swift_deallocClassInstance();
}

id @nonobjc SABaseAceObject.init(dictionary:)(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  id v3 = [v1 initWithDictionary:v2.super.isa];

  return v3;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)()
{
  OUTLINED_FUNCTION_9_21();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_13_16();
  if (!v4 & v3) {
    BOOL v5 = v2 > v1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;
  uint64_t vars8;

  OUTLINED_FUNCTION_9_21();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_13_16();
  if (!v4 & v3) {
    BOOL v5 = v2 > v1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;
  uint64_t vars8;

  OUTLINED_FUNCTION_9_21();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_10_23();
  if (!v4 & v3) {
    BOOL v5 = v2 > v1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;
  uint64_t vars8;

  OUTLINED_FUNCTION_9_21();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_10_23();
  if (!v4 & v3) {
    BOOL v5 = v2 > v1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t vars8;

  OUTLINED_FUNCTION_9_21();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  if (v2 + 88 * v1 > v0 && v0 + 88 * v1 > v2)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t vars8;

  OUTLINED_FUNCTION_9_21();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  if (v2 + 32 * v1 > v0 && v0 + 32 * v1 > v2)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }

  return memcpy(__dst, __src, 8 * a2);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_8_15();
  if (!v5 & v4) {
    BOOL v6 = v3 > v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Double));
  OUTLINED_FUNCTION_4_18();

  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_7_20();
  if (!v6 & v5) {
    uint64_t v7 = v4 > v2;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }
  type metadata accessor for NSError(0, v3);
  OUTLINED_FUNCTION_4_18();

  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_7_20();
  if (!v5 & v4) {
    BOOL v6 = v3 > v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }
  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  OUTLINED_FUNCTION_4_18();

  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_7_20();
  if (!v6 & v5) {
    uint64_t v7 = v4 > v2;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(v3);
  OUTLINED_FUNCTION_4_18();

  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_8_15();
  if (!v5 & v4) {
    BOOL v6 = v3 > v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: String));
  OUTLINED_FUNCTION_4_18();

  return swift_arrayInitWithCopy();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for UsoIdentifier);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for DisplayHint);
}

{
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  if (a3 + 40 * a2 > a1 && a1 + 40 * a2 > a3)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemProtocol);
  OUTLINED_FUNCTION_4_18();

  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for SpeakableString);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_2_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_6_16();
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(*(void *)(a4(0) - 8) + 72) * a2;
  unint64_t v7 = a3 + v6;
  unint64_t v8 = a1 + v6;
  if (v7 > a1 && v8 > a3)
  {
    OUTLINED_FUNCTION_0_8();
    OUTLINED_FUNCTION_1_19();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_4_18();

  return swift_arrayInitWithCopy();
}

id outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 attributeByName:v4];

  return v5;
}

unint64_t lazy protocol witness table accessor for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError;
  if (!lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError;
  if (!lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentNLContextProviderError and conformance CustomIntentNLContextProviderError);
  }
  return result;
}

void *partial apply for closure #1 in CustomIntentNLContextProvider.makeContextForPagination(intent:parameterName:displayHints:selectionItems:paginatedItems:)(unint64_t a1, uint64_t a2)
{
  return CustomIntentNLContextProvider.getOrdinalReference(index:count:selectionItem:)(a1, *(void *)(v2 + 24), a2);
}

uint64_t type metadata accessor for CustomIntentNLContextProvider()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for CustomIntentNLContextProviderError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0xA6E38);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentNLContextProviderError()
{
  return &type metadata for CustomIntentNLContextProviderError;
}

uint64_t objectdestroyTm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t partial apply for closure #1 in static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:)(uint64_t a1)
{
  return closure #1 in static INIntentResolutionResult.makeOrdinalDisplayHints(idValue:index:count:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of CustomIntentDisambiguationItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_A6F4C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 96)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  }
  else {
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t outlined destroy of CustomIntentDisambiguationItem(uint64_t a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_4_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_16()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_12_14()
{
  *(unsigned char *)(v0 + 88) = 1;
  *(void *)(v0 + 96) = 0;
  *(unsigned char *)(v0 + 104) = 1;
}

void *CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_23_4(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = *(void *)(a10 + 24);
  uint64_t v12 = *(void *)(a10 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a10, v11);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (*(uint64_t (**)(char *))(v16 + 16))(v15);
  uint64_t v25 = OUTLINED_FUNCTION_15_15(v17, v18, v19, v20, v21, v22, v23, v24, a9, (uint64_t)v15, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  return v25;
}

uint64_t CustomIntentResponseGenerator.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 104);
  return v0;
}

uint64_t CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[7] = v2;
  v1[8] = v0;
  v1[5] = v3;
  v1[6] = v4;
  v1[4] = v5;
  uint64_t v6 = type metadata accessor for DialogPhase();
  v1[9] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[10] = v7;
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[13] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[14] = v9;
  v1[15] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[16] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[17] = v11;
  v1[18] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  void *v0;
  char v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void *v5;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_13_1();
  (*(void (**)(void, void, void))(v0[17] + 104))(v0[18], enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v0[16]);
  uint64_t v1 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v2 = OUTLINED_FUNCTION_12_2();
  v3(v2);
  if (v1)
  {
    OUTLINED_FUNCTION_15_5();
    uint64_t v8 = (uint64_t (*)(void))(*(void *)(v4 + 168) + **(int **)(v4 + 168));
    uint64_t v5 = (void *)swift_task_alloc();
    v0[19] = v5;
    *uint64_t v5 = v0;
    v5[1] = CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:);
    return v8();
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v0[26] = v7;
    void *v7 = v0;
    v7[1] = CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:);
    OUTLINED_FUNCTION_29_8();
    return CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:)();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 160) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v6();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  uint64_t v1 = (void *)v0[20];
  uint64_t v3 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v6 = v0[8];
  uint64_t v21 = v0[6];
  static DialogPhase.completion.getter();
  uint64_t v7 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  OutputGenerationManifest.listenAfterSpeaking.setter();
  (*(void (**)(uint64_t))(*(void *)v6 + 168))(v21);
  OutputGenerationManifest.canUseServerTTS.setter();
  type metadata accessor for AppNameResolver();
  swift_initStackObject();
  uint64_t v8 = (void *)static SAAppInfoFactory.createAppInfo(app:)();
  uint64_t v9 = AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(v8);
  uint64_t v11 = v10;

  swift_bridgeObjectRelease();
  if ((v11 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(v11) & 0xF;
  }
  else {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  OUTLINED_FUNCTION_32_10();
  if (((dispatch thunk of DeviceState.isPhone.getter() & 1) != 0
     || (OUTLINED_FUNCTION_32_10(), (dispatch thunk of DeviceState.isPad.getter() & 1) != 0))
    && v12)
  {
    uint64_t v22 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v0[8] + 176) + **(int **)(*(void *)v0[8] + 176));
    uint64_t v13 = (void *)swift_task_alloc();
    v0[21] = v13;
    *uint64_t v13 = v0;
    v13[1] = CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:);
    uint64_t v14 = OUTLINED_FUNCTION_29_8();
    return v22(v14);
  }
  else
  {
    uint64_t v16 = (void *)v0[20];
    type metadata accessor for ResponseFactory();
    swift_allocObject();
    v0[23] = ResponseFactory.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_211C70;
    *(void *)(v17 + 32) = v16;
    uint64_t v24 = v17;
    specialized Array._endMutation()();
    v0[24] = v24;
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
                                                   + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
    uint64_t v18 = v16;
    uint64_t v19 = (void *)swift_task_alloc();
    v0[25] = v19;
    char *v19 = v0;
    v19[1] = CustomIntentResponseGenerator.makeErrorResponse(app:intent:intentResponse:);
    uint64_t v20 = OUTLINED_FUNCTION_29_8();
    return v23(v20, v24);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();

  (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 120), *(void *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v1();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 112);

  (*(void (**)(void, void))(v1 + 8))(*(void *)(v0 + 120), *(void *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v2();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();

  uint64_t v1 = OUTLINED_FUNCTION_21_6();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[7] = v2;
  v1[8] = v0;
  v1[5] = v3;
  v1[6] = v4;
  v1[4] = v5;
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[9] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[10] = v7;
  uint64_t v8 = OUTLINED_FUNCTION_25();
  v1[11] = v8;
  type metadata accessor for AppNameResolver();
  v1[12] = swift_initStackObject();
  uint64_t v9 = (void *)swift_task_alloc();
  v1[13] = v9;
  *uint64_t v9 = v1;
  v9[1] = CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:);
  return static ErrorTemplates.genericError()(v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  int *v6;
  uint64_t *boxed_opaque_existential_1;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  uint64_t (*v15)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  OUTLINED_FUNCTION_26_12();
  if ((dispatch thunk of DeviceState.isPhone.getter() & 1) == 0)
  {
    OUTLINED_FUNCTION_26_12();
    if ((dispatch thunk of DeviceState.isPad.getter() & 1) == 0) {
      goto LABEL_9;
    }
  }
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = (void *)static SAAppInfoFactory.createAppInfo(app:)();
  AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(v3);
  OUTLINED_FUNCTION_27_13();
  swift_bridgeObjectRelease();

  uint64_t v4 = HIBYTE(v0) & 0xF;
  if ((v0 & 0x2000000000000000) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 32);
    uint64_t v6 = *(int **)(**(void **)(v1 + 64) + 184);
    v5[3] = type metadata accessor for AceOutput();
    v5[4] = (uint64_t)&protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
    uint64_t v15 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v1 + 120) = v8;
    *uint64_t v8 = v1;
    v8[1] = CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:);
    uint64_t v9 = *(void *)(v1 + 88);
    uint64_t v10 = *(void *)(v1 + 56);
    uint64_t v11 = *(void *)(v1 + 40);
    uint64_t v12 = *(void *)(v1 + 48);
    return v15(boxed_opaque_existential_1, v11, v12, v10, v9);
  }
  else
  {
LABEL_9:
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v1 + 136) = v14;
    *uint64_t v14 = v1;
    v14[1] = CustomIntentResponseGenerator.makeErrorResponse_rfv1(app:intent:intentResponse:);
    OUTLINED_FUNCTION_29_8();
    return CustomIntentResponseGenerator.processGenericErrorResponseWithText(app:intent:templateResult:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_21_6();
  v1(v0);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  uint64_t v2 = OUTLINED_FUNCTION_12_2();
  v3(v2);
  __swift_deallocate_boxed_opaque_existential_1(v1);
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_21_6();
  v1(v0);
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

uint64_t CustomIntentResponseGenerator.makeDomainFlowActivity(activityType:intent:)()
{
  OUTLINED_FUNCTION_21_11();
  type metadata accessor for ActivityType();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_27_6();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v3, v2);
  uint64_t v6 = CustomIntentResponseGenerator.shortcutsActionsFromIntent(intent:)(v0);
  uint64_t v7 = *(void *)(v1 + 72);
  type metadata accessor for ShortcutsFlowActivity();
  swift_allocObject();
  swift_retain();
  return ShortcutsFlowActivity.init(activityType:underlyingActions:siriEnvironment:)(v3, (uint64_t)v6, v7);
}

BOOL static CustomIntentsDialogTemplating.canUseServerTTS(intent:)()
{
  return !INIntent.isRestricted()();
}

uint64_t CustomIntentResponseGenerator.processPunchoutWithDialogAndButton(app:intent:intentResponse:dialogResult:outputManifest:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[12] = v2;
  v1[13] = v0;
  v1[10] = v3;
  v1[11] = v4;
  v1[8] = v5;
  v1[9] = v6;
  v1[7] = v7;
  uint64_t v8 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
  v1[14] = v8;
  OUTLINED_FUNCTION_16(v8);
  v1[15] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_15_5();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 232) + **(int **)(v1 + 232));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentResponseGenerator.processPunchoutWithDialogAndButton(app:intent:intentResponse:dialogResult:outputManifest:);
  uint64_t v3 = *(void *)(v0 + 64);
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 136) = v3;
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = v0[17];
  uint64_t v2 = (uint64_t *)v0[15];
  uint64_t v3 = (void *)v0[11];
  type metadata accessor for SAIntentGroupLaunchAppWithIntent();
  uint64_t v4 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
  v0[18] = (uint64_t)v4;
  dispatch thunk of LabelExecutionResult.subscript.getter();
  OUTLINED_FUNCTION_27_13();
  uint64_t v5 = v4;
  CodableAceObject.init(wrappedValue:)();
  *uint64_t v2 = v1;
  v2[1] = v1;
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[19] = ResponseFactory.init()();
  v0[5] = type metadata accessor for WorkflowDataModels(0);
  v0[6] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  outlined init with copy of WorkflowDataModels.CustomIntentErrorModel((uint64_t)v2, (uint64_t)boxed_opaque_existential_1);
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_211C70;
  *(void *)(v7 + 32) = v3;
  uint64_t v14 = v7;
  specialized Array._endMutation()();
  v0[20] = v14;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)
                                                                     + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:));
  uint64_t v8 = v3;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[21] = (uint64_t)v9;
  *uint64_t v9 = v0;
  v9[1] = CustomIntentResponseGenerator.processPunchoutWithDialogAndButton(app:intent:intentResponse:dialogResult:outputManifest:);
  uint64_t v10 = v0[12];
  uint64_t v11 = v0[7];
  return v13(v11, v0 + 2, v14, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 120);
  swift_release();

  outlined destroy of WorkflowDataModels.CustomIntentErrorModel(v2);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v3();
}

uint64_t CustomIntentResponseGenerator.processPunchOutWithDialogAndButton_prerfv2(app:intent:intentResponse:templateResult:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[11] = v2;
  v1[12] = v0;
  v1[9] = v3;
  v1[10] = v4;
  v1[7] = v5;
  v1[8] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v7);
  v1[13] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for TemplatingResult();
  v1[14] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[15] = v9;
  v1[16] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_15_5();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v1 + 240) + **(int **)(v1 + 240));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[17] = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentResponseGenerator.processPunchOutWithDialogAndButton_prerfv2(app:intent:intentResponse:templateResult:);
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[8];
  return v6(v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v3 + 152) = v10;
    *uint64_t v10 = v5;
    v10[1] = CustomIntentResponseGenerator.processPunchOutWithDialogAndButton_prerfv2(app:intent:intentResponse:templateResult:);
    return CustomIntentResponseGenerator.makeDefaultOpenAppButtonViewBuilder(app:intent:intentResponse:launchAppButtonTemplate:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 160) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 168) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 96) + 16), *(void *)(*(void *)(v0 + 96) + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  dispatch thunk of SiriKitAceViewBuilder.build()();
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_13_17(v3);
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_release();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v2, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v7, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t CustomIntentResponseGenerator.makeYesAndNoButton_preRFv2(intent:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t CustomIntentResponseGenerator.makeYesAndNoButton_preRFv2(intent:app:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v1[3];
  uint64_t v3 = *(void *)(v1[5] + 56);
  INIntent.verb()();
  OUTLINED_FUNCTION_27_13();
  v1[6] = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v3 + 160) + **(int **)(*(void *)v3 + 160));
  uint64_t v5 = (void *)swift_task_alloc();
  v1[7] = v5;
  *uint64_t v5 = v1;
  v5[1] = CustomIntentResponseGenerator.makeYesAndNoButton_preRFv2(intent:app:);
  return v7(v2, v0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    *(void *)(v5 + 72) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[5];
  uint64_t v3 = (uint64_t *)v0[2];
  uint64_t v4 = App.appIdentifier.getter();
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0xD000000000000013;
  }
  if (v5) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x8000000000225330;
  }
  uint64_t v8 = (void *)(v2 + 16);
  uint64_t v9 = static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)(0, v6, v7, v8);
  uint64_t v10 = 7562617;
  uint64_t v11 = 0xE300000000000000;
  uint64_t v12 = specialized Dictionary.subscript.getter(7562617, 0xE300000000000000, v1);
  if (v13)
  {
    uint64_t v10 = v12;
    uint64_t v11 = v13;
  }
  uint64_t v14 = v9;
  uint64_t v15 = static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)(1, v6, v7, v8);
  swift_bridgeObjectRelease();
  uint64_t v16 = specialized Dictionary.subscript.getter(0x6C65636E6163, 0xE600000000000000, v1);
  uint64_t v18 = v17;

  swift_bridgeObjectRelease();
  if (v18) {
    uint64_t v19 = v16;
  }
  else {
    uint64_t v19 = 0x6C65636E6163;
  }
  uint64_t v20 = 0xE600000000000000;
  if (v18) {
    uint64_t v20 = v18;
  }
  *uint64_t v3 = v10;
  v3[1] = v11;
  v3[2] = (uint64_t)v14;
  v3[3] = v19;
  v3[4] = v20;
  v3[5] = (uint64_t)v15;
  OUTLINED_FUNCTION_12_0();
  return v21();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentResponseGenerator.processGenericErrorResponseWithText(app:intent:templateResult:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[9] = v2;
  v1[10] = v0;
  v1[7] = v3;
  v1[8] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v5);
  v1[11] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v2 = *(void **)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(uint64_t **)(v0 + 56);
  __swift_project_boxed_opaque_existential_1(v2 + 2, v2[5]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  (*(void (**)(uint64_t))(*v2 + 168))(v3);
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_13_17(v5);
  uint64_t v6 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v4[3] = v6;
  v4[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v7();
}

uint64_t CustomIntentResponseGenerator.makeDefaultOpenAppButtonViewBuilder(app:intent:intentResponse:launchAppButtonTemplate:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[11] = v2;
  v1[12] = v0;
  v1[9] = v3;
  v1[10] = v4;
  v1[8] = v5;
  uint64_t v6 = type metadata accessor for TemplatingText();
  v1[13] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[14] = v7;
  v1[15] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for TemplatingSection();
  v1[16] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[17] = v9;
  v1[18] = OUTLINED_FUNCTION_25();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v10);
  v1[19] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for AceOutput();
  v1[20] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[21] = v12;
  v1[22] = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for TemplatingResult();
  v1[23] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v1[24] = v14;
  v1[25] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v15, v16, v17);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_15_5();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v1 + 240) + **(int **)(v1 + 240));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[26] = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentResponseGenerator.makeDefaultOpenAppButtonViewBuilder(app:intent:intentResponse:launchAppButtonTemplate:);
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[8];
  return v6(v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t i;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t (*v26)(uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned char *v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 96);
  type metadata accessor for SAIntentGroupLaunchAppWithIntent();
  uint64_t v3 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 16), *(void *)(v2 + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_13_17(v4);
  *(_OWORD *)(v0 + 16) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v5 = objc_msgSend(objc_allocWithZone((Class)SAResultCallback), "init", v0 + 16);
  [v5 setCode:SAResultCallbackAnyErrorCodeValue];
  uint64_t v6 = AceOutput.commands.getter();
  uint64_t v7 = v6;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
    unint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v38 = v3;
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
      goto LABEL_25;
    }
    for (i = 0; i != v8; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0) {
        uint64_t v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v11 = *(id *)(v7 + 8 * i + 32);
      }
      uint64_t v12 = v11;
      *(void *)(v0 + 56) = &OBJC_PROTOCOL___SAClientBoundCommand;
      if (swift_dynamicCastObjCProtocolConditional())
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SAUIButton.commands.setter((uint64_t)_swiftEmptyArrayStorage, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_211C70;
  *(void *)(v13 + 32) = v5;
  uint64_t v39 = v13;
  specialized Array._endMutation()();
  uint64_t v14 = v5;
  outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.callbacks.setter(v39, v3);
  uint64_t v15 = *(void *)(TemplatingResult.sections.getter() + 16);
  swift_bridgeObjectRelease();
  if (v15)
  {
    type metadata accessor for SiriKitAceViewBuilder();
    dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
    unint64_t result = TemplatingResult.sections.getter();
    if (*(void *)(result + 16))
    {
      uint64_t v16 = *(void *)(v0 + 168);
      uint64_t v35 = *(void *)(v0 + 160);
      uint64_t v36 = *(void *)(v0 + 176);
      uint64_t v18 = *(void *)(v0 + 136);
      uint64_t v17 = *(void *)(v0 + 144);
      uint64_t v19 = *(void *)(v0 + 120);
      uint64_t v20 = *(void *)(v0 + 128);
      uint64_t v21 = *(void *)(v0 + 104);
      uint64_t v22 = *(void *)(v0 + 112);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16))(v17, result + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)), v20);
      swift_bridgeObjectRelease();
      TemplatingSection.content.getter();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v20);
      TemplatingText.text.getter();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
      uint64_t v23 = v38;
      uint64_t v24 = dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)();

      swift_release();
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v36, v35);
      OUTLINED_FUNCTION_66();
      v25();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v26(v24);
    }
LABEL_25:
    __break(1u);
    return result;
  }
  uint64_t v37 = *(void *)(v0 + 200);
  uint64_t v27 = v14;
  unint64_t v29 = *(void *)(v0 + 184);
  uint64_t v28 = *(void *)(v0 + 192);
  uint64_t v31 = *(void *)(v0 + 168);
  uint64_t v30 = *(void *)(v0 + 176);
  uint64_t v32 = *(void *)(v0 + 160);
  lazy protocol witness table accessor for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors();
  swift_allocError();
  *uint64_t v33 = 0;
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v37, v29);
  OUTLINED_FUNCTION_31_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v34();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_31_6();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void *CustomIntentResponseGenerator.shortcutsActionsFromIntent(intent:)(void *a1)
{
  id v4 = [a1 _metadata];
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  outlined bridged method (ob) of @objc _INPBIntentMetadata.launchId.getter(v4);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  OUTLINED_FUNCTION_27_13();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShortcutsAction>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_212160;
  [a1 _intentCategory];
  Swift::String v7 = INIntentCategory.asINPBString()();
  id v8 = [a1 typeName];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  *(void *)(v6 + 32) = v1;
  *(void *)(v6 + 40) = v2;
  *(Swift::String *)(v6 + 48) = v7;
  *(void *)(v6 + 64) = v9;
  *(void *)(v6 + 72) = v11;
  return (void *)v6;
}

uint64_t CustomIntentResponseGenerator.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppShortcutInvoking(v1 + 16, a1);
}

uint64_t CustomIntentResponseGenerator.snippetProvider.getter()
{
  return swift_retain();
}

uint64_t CustomIntentResponseGenerator.siriEnvironment.getter()
{
  return swift_retain();
}

uint64_t CustomIntentResponseGenerator.voiceCommandName.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t CustomIntentResponseGenerator.responseFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppShortcutInvoking(v1 + 104, a1);
}

void *CustomIntentResponseGenerator.__allocating_init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_23_4(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = *(void *)(a10 + 24);
  uint64_t v12 = *(void *)(a10 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a10, v11);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (*(uint64_t (**)(char *))(v16 + 16))(v15);
  uint64_t v25 = OUTLINED_FUNCTION_15_15(v17, v18, v19, v20, v21, v22, v23, v24, a9, (uint64_t)v15, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a10);
  return v25;
}

uint64_t ShortcutsFlowActivity.__allocating_init(activityType:underlyingActions:siriEnvironment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_30_9();
  swift_allocObject();
  return ShortcutsFlowActivity.init(activityType:underlyingActions:siriEnvironment:)(v3, a2, a3);
}

BOOL static WorkflowDialogTemplatingError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void WorkflowDialogTemplatingError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int WorkflowDialogTemplatingError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static WorkflowDialogTemplatingError.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors()
{
  return WorkflowDialogTemplatingError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors(uint64_t a1)
{
  WorkflowDialogTemplatingError.hash(into:)(a1, *v1);
}

uint64_t CustomIntentResponseGenerator.__deallocating_deinit()
{
  CustomIntentResponseGenerator.deinit();

  return swift_deallocClassInstance();
}

uint64_t ShortcutsAction.appId.setter()
{
  OUTLINED_FUNCTION_21_11();
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t ShortcutsAction.intentCategory.setter()
{
  OUTLINED_FUNCTION_21_11();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  return result;
}

uint64_t ShortcutsAction.intentName.setter()
{
  OUTLINED_FUNCTION_21_11();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  return result;
}

uint64_t ShortcutsAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6449707061 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6143746E65746E69 && a2 == 0xEE0079726F676574;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x614E746E65746E69 && a2 == 0xEA0000000000656DLL)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t ShortcutsAction.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6449707061;
  }
  if (a1 == 1) {
    return 0x6143746E65746E69;
  }
  return 0x614E746E65746E69;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ShortcutsAction.CodingKeys()
{
  return ShortcutsAction.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ShortcutsAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = ShortcutsAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShortcutsAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ShortcutsAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ShortcutsAction.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ShortcutsAction.CodingKeys>);
  OUTLINED_FUNCTION_12_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_27_6();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_22_15();
  if (!v1)
  {
    OUTLINED_FUNCTION_22_15();
    OUTLINED_FUNCTION_22_15();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t ShortcutsAction.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ShortcutsAction.CodingKeys>);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_20_18();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v8 = v7;
  uint64_t v21 = v6;
  swift_bridgeObjectRetain();
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v19 = v9;
  swift_bridgeObjectRetain();
  uint64_t v20 = v11;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v15 = v12;
  uint64_t v16 = OUTLINED_FUNCTION_12_15();
  v17(v16);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v21;
  a2[1] = v8;
  a2[2] = v19;
  a2[3] = v20;
  a2[4] = v15;
  a2[5] = v14;
  return result;
}

double protocol witness for Decodable.init(from:) in conformance ShortcutsAction@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  ShortcutsAction.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ShortcutsAction(void *a1)
{
  return ShortcutsAction.encode(to:)(a1);
}

uint64_t key path getter for ShortcutsFlowActivity.underlyingActions : ShortcutsFlowActivity@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for ShortcutsFlowActivity + **a1 + 8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ShortcutsFlowActivity.underlyingActions : ShortcutsFlowActivity(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(class metadata base offset for ShortcutsFlowActivity + **a2 + 16);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ShortcutsFlowActivity.underlyingActions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShortcutsFlowActivity.underlyingActions.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for ShortcutsFlowActivity.underlyingActions);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ShortcutsFlowActivity.underlyingActions.modify())()
{
  return static LocaleUtils.intentBundleCache.modify;
}

uint64_t ShortcutsFlowActivity.init(activityType:underlyingActions:siriEnvironment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_21_11();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = OUTLINED_FUNCTION_16(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_20_18();
  *(void *)(v4 + direct field offset for ShortcutsFlowActivity.underlyingActions) = _swiftEmptyArrayStorage;
  ActivityType.rawValue.getter();
  if (a3)
  {
    swift_retain();
    SiriEnvironment.flowTask.getter();
    swift_release();
    dispatch thunk of FlowTaskProvider.creationTime.getter();
    swift_release();
    uint64_t v9 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload(v5, 1, v9) == 1)
    {
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for Date?);
    }
    else
    {
      Date.timeIntervalSince1970.getter();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_66();
      v10();
    }
  }
  uint64_t v11 = DefaultFlowActivity.init(activityName:activityType:activityStartTime:)();
  swift_release();
  type metadata accessor for ActivityType();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_66();
  v12();
  uint64_t v13 = (void *)(v11 + direct field offset for ShortcutsFlowActivity.underlyingActions);
  swift_beginAccess();
  *uint64_t v13 = v3;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t ShortcutsFlowActivity.__allocating_init(from:)()
{
  OUTLINED_FUNCTION_30_9();
  swift_allocObject();
  return ShortcutsFlowActivity.init(from:)(v0);
}

uint64_t ShortcutsFlowActivity.init(from:)(uint64_t a1)
{
  *(void *)(v1 + direct field offset for ShortcutsFlowActivity.underlyingActions) = _swiftEmptyArrayStorage;
  outlined init with copy of AppShortcutInvoking(a1, (uint64_t)v5);
  uint64_t v3 = DefaultFlowActivity.init(from:)();
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v3;
}

void ShortcutsFlowActivity.init(activityName:activityType:activityStartTime:)()
{
}

uint64_t ShortcutsFlowActivity.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t ShortcutsFlowActivity.deinit()
{
  uint64_t v0 = DefaultFlowActivity.deinit();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ShortcutsFlowActivity.__deallocating_deinit()
{
  DefaultFlowActivity.deinit();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void *specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  v30[3] = a12;
  v30[4] = a13;
  __swift_allocate_boxed_opaque_existential_1(v30);
  OUTLINED_FUNCTION_40();
  (*(void (**)(void))(v19 + 32))();
  a11[10] = a1;
  a11[11] = a2;
  outlined init with copy of AppShortcutInvoking((uint64_t)a4, (uint64_t)(a11 + 2));
  a11[9] = a3;
  a11[12] = a9;
  outlined init with copy of AppShortcutInvoking((uint64_t)v30, (uint64_t)(a11 + 13));
  outlined init with copy of AppShortcutInvoking((uint64_t)a4, (uint64_t)v29);
  uint64_t v20 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v21 = static WFDialogState.shared;
  swift_retain();
  swift_release();
  swift_release();
  type metadata accessor for AppNameResolver();
  uint64_t v22 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
  type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(v29, v21, 0, 1, a5, a6, a7, a8, v22, v23);
  a11[7] = v24;
  uint64_t v25 = a11[9];
  type metadata accessor for CustomIntentSnippetProvider();
  swift_allocObject();
  a11[8] = CustomIntentSnippetProvider.init(voiceCommandName:templatingService:deviceState:siriEnvironment:)(a1, a2, v24, a4, v25);
  swift_retain();
  swift_retain();
  return a11;
}

uint64_t type metadata accessor for ShortcutsFlowActivity()
{
  uint64_t result = type metadata singleton initialization cache for ShortcutsFlowActivity;
  if (!type metadata singleton initialization cache for ShortcutsFlowActivity) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t type metadata accessor for SAIntentGroupLaunchAppWithIntent()
{
  unint64_t result = lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent;
  if (!lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
  }
  return result;
}

uint64_t outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WorkflowDataModels.CustomIntentErrorModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsAction.CodingKeys and conformance ShortcutsAction.CodingKeys);
  }
  return result;
}

uint64_t _s11SiriKitFlow0C8Activity_pSgWOhTm_0(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_66();
  v3();
  return a1;
}

unint64_t lazy protocol witness table accessor for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors;
  if (!lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors;
  if (!lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors and conformance CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors);
  }
  return result;
}

uint64_t type metadata accessor for CustomIntentResponseGenerator()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xAB79CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors()
{
  return &type metadata for CustomIntentResponseGenerator.CustomIntentResponseGeneratorErrors;
}

ValueMetadata *type metadata accessor for ShortcutsAction()
{
  return &type metadata for ShortcutsAction;
}

uint64_t type metadata completion function for ShortcutsFlowActivity()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ShortcutsFlowActivity()
{
  return type metadata accessor for ShortcutsFlowActivity();
}

unsigned char *storeEnumTagSinglePayload for ShortcutsAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xAB908);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ShortcutsAction.CodingKeys()
{
  return &unk_28AE38;
}

uint64_t OUTLINED_FUNCTION_12_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_17(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

void *OUTLINED_FUNCTION_15_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19 = *(void *)(v17 - 112);
  uint64_t v20 = *(void *)(v17 - 104);
  uint64_t v21 = *(void *)(v17 - 96);
  uint64_t v22 = *(void *)(v17 - 88);
  return specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(v16, v15, v14, v13, v19, v20, v21, v22, a9, a10, a11, a12, a13);
}

uint64_t OUTLINED_FUNCTION_22_15()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_26_12()
{
  uint64_t v2 = *(void *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_29_8()
{
  return *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_30_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_32_10()
{
  uint64_t v2 = *(void *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

Swift::String __swiftcall INIntentCategory.asINPBString()()
{
  if (v0 >= 10 && __OFADD__(v0++, 1))
  {
LABEL_31:
    __break(1u);
    JUMPOUT(0xABD90);
  }
  if (v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v0 > 0x7FFFFFFF)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  switch((int)v0)
  {
    case 1:
      uint64_t v2 = @"CATEGORY_INFORMATION";
      goto LABEL_27;
    case 2:
      uint64_t v2 = @"CATEGORY_PLAY_AUDIO";
      goto LABEL_27;
    case 3:
      uint64_t v2 = @"CATEGORY_PLAY_VIDEO";
      goto LABEL_27;
    case 4:
      uint64_t v2 = @"CATEGORY_ORDER";
      goto LABEL_27;
    case 5:
      uint64_t v2 = @"CATEGORY_NAVIGATION";
      goto LABEL_27;
    case 6:
      uint64_t v2 = @"CATEGORY_START";
      goto LABEL_27;
    case 7:
      uint64_t v2 = @"CATEGORY_SHARE";
      goto LABEL_27;
    case 8:
      uint64_t v2 = @"CATEGORY_CREATE";
      goto LABEL_27;
    case 9:
      uint64_t v2 = @"CATEGORY_SEARCH";
      goto LABEL_27;
    case 11:
      uint64_t v2 = @"CATEGORY_TOGGLE";
      goto LABEL_27;
    case 12:
      uint64_t v2 = @"CATEGORY_DOWNLOAD";
      goto LABEL_27;
    case 13:
      uint64_t v2 = @"CATEGORY_LOG";
      goto LABEL_27;
    case 14:
      uint64_t v2 = @"CATEGORY_CHECK_IN";
      goto LABEL_27;
    case 15:
      uint64_t v2 = @"CATEGORY_WORKFLOW";
      goto LABEL_27;
    case 16:
      uint64_t v2 = @"CATEGORY_REQUEST";
      goto LABEL_27;
    case 17:
      uint64_t v2 = @"CATEGORY_SET";
      goto LABEL_27;
    case 18:
      uint64_t v2 = @"CATEGORY_CALL_AUDIO";
      goto LABEL_27;
    case 19:
      uint64_t v2 = @"CATEGORY_CALL_VIDEO";
      goto LABEL_27;
    case 20:
      uint64_t v2 = @"CATEGORY_PLAY_SOUND";
      goto LABEL_27;
    case 21:
      uint64_t v2 = @"CATEGORY_USER_ACTIVITY";
LABEL_27:
      int v3 = v2;
      break;
    default:
      uint64_t v2 = +[NSString stringWithFormat:@"(unknown: %i)", v0];
      break;
  }
  unsigned int v4 = v2;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t v8 = v5;
  uint64_t v9 = v7;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

INPerson __swiftcall Contact.toINPerson()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandle?);
  __chkstk_darwin(v0 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v25 = v2 - v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v3 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for PersonNameComponents();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = v9 - v8;
  Contact.namePrefix.getter();
  Contact.givenName.getter();
  Contact.middleName.getter();
  Contact.familyName.getter();
  Contact.nameSuffix.getter();
  Contact.nickname.getter();
  uint64_t v27 = v7;
  __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
  uint64_t v11 = v6;
  PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)();
  uint64_t v12 = Contact.handles.getter();
  specialized Collection.first.getter(v12, v25);
  swift_bridgeObjectRelease();
  uint64_t v13 = type metadata accessor for ContactHandle();
  if (__swift_getEnumTagSinglePayload(v25, 1, v13) == 1)
  {
    outlined destroy of ContactHandle?(v25);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v14 = ContactHandle.value.getter();
    uint64_t v15 = v16;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v25, v13);
  }
  id v17 = objc_allocWithZone((Class)INPersonHandle);
  id v18 = @nonobjc INPersonHandle.init(value:type:)(v14, v15, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v11, v10, v27);
  __swift_storeEnumTagSinglePayload(v11, 0, 1, v27);
  uint64_t v19 = Contact.id.getter();
  uint64_t v21 = v20;
  id v22 = objc_allocWithZone((Class)INPerson);
  id v23 = @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(v18, v11, 0, 0, 0, v19, v21, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v10, v27);
  return (INPerson)v23;
}

uint64_t outlined destroy of ContactHandle?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandle?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id @nonobjc INPersonHandle.init(value:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  id v6 = [v3 initWithValue:v5 type:a3];

  return v6;
}

id @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v16 = type metadata accessor for PersonNameComponents();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload(a2, 1, v16) != 1)
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
  if (a4)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v18 = 0;
  }
  if (!a7)
  {
    NSString v19 = 0;
    if (a9) {
      goto LABEL_8;
    }
LABEL_10:
    NSString v20 = 0;
    goto LABEL_11;
  }
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a9) {
    goto LABEL_10;
  }
LABEL_8:
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_11:
  id v21 = [v10 initWithPersonHandle:a1 nameComponents:isa displayName:v18 image:a5 contactIdentifier:v19 customIdentifier:v20];

  return v21;
}

uint64_t DeviceState.asSiriKitDeviceState()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SirikitDeviceState();
  v7[3] = a1;
  v7[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_1, v2, a1);
  return SirikitDeviceState.__allocating_init(from:)();
}

uint64_t DeviceState.asWFSiriRunSource()()
{
  if (dispatch thunk of DeviceState.isHomePod.getter()) {
    return 2;
  }
  if (dispatch thunk of DeviceState.isCarPlay.getter()) {
    return 3;
  }
  if (dispatch thunk of DeviceState.isWatch.getter()) {
    return 4;
  }
  return 1;
}

uint64_t DeviceState.currentDevice.getter()
{
  if (dispatch thunk of DeviceState.isHomePod.getter()) {
    return 4;
  }
  if (dispatch thunk of DeviceState.isCarPlay.getter()) {
    return 5;
  }
  if (dispatch thunk of DeviceState.isWatch.getter()) {
    return 3;
  }
  if (dispatch thunk of DeviceState.isMac.getter()) {
    return 7;
  }
  if (dispatch thunk of DeviceState.isPad.getter()) {
    return 2;
  }
  if (dispatch thunk of DeviceState.isAppleTV.getter()) {
    return 6;
  }
  return 1;
}

void *LinkActionDialogTemplating.__allocating_init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)()
{
  OUTLINED_FUNCTION_63_1();
  swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1(v0, *(void *)(v0 + 24));
  OUTLINED_FUNCTION_17_13();
  __chkstk_darwin(v1);
  uint64_t v3 = OUTLINED_FUNCTION_24_12(v2, v15);
  uint64_t v5 = v4(v3);
  uint64_t v13 = OUTLINED_FUNCTION_32_11(v5, v6, v7, v8, v9, v10, v11, v12, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return v13;
}

uint64_t LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  v1[7] = OUTLINED_FUNCTION_13_0();
  v1[8] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 96) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v0 + 64);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 56), &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  if (v1)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_23_1();
    return v12(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v17 = v15[4];
  v15[9] = *(void *)(v15[6] + 64);
  if (v17)
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v15[10] = v18;
    *NSString v18 = v19;
    v18[1] = LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:);
    OUTLINED_FUNCTION_3();
    return LNDialog.asSpeakableString.getter(v20);
  }
  else
  {
    uint64_t v23 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_74_0(v23);
    uint64_t v24 = (void *)v15[9];
    uint64_t v25 = (void *)v15[7];
    uint64_t v26 = (void *)v15[5];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_34_10();
    __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v14);
    id v27 = OUTLINED_FUNCTION_37_8();
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_51_3();

    uint64_t v28 = self;
    OUTLINED_FUNCTION_90_0((uint64_t)[v28 searchSystemProtocol]);

    swift_bridgeObjectRelease();
    id v29 = OUTLINED_FUNCTION_37_8();
    OUTLINED_FUNCTION_85_1();

    OUTLINED_FUNCTION_86_0((uint64_t)[v28 deleteEntitySystemProtocol]);
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void *)(class metadata base offset for RunLinkActionCATsSimple + *v24 + 112)
        + **(int **)(class metadata base offset for RunLinkActionCATsSimple + *v24 + 112);
    uint64_t v42 = class metadata base offset for RunLinkActionCATsSimple + *v24 + 112;
    uint64_t v30 = swift_task_alloc();
    uint64_t v31 = (void *)OUTLINED_FUNCTION_76_1(v30);
    *uint64_t v31 = v32;
    v31[1] = LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:);
    OUTLINED_FUNCTION_45_4();
    OUTLINED_FUNCTION_3();
    return v38(v33, v34, v35, v36, v37, v38, v39, v40, a9, v41, v42, a12, a13, a14);
  }
}

{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v16 = (void *)v14[9];
  uint64_t v17 = (void *)v14[7];
  NSString v18 = (void *)v14[5];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_36_7();
  uint64_t v19 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  uint64_t v20 = OUTLINED_FUNCTION_37_8();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_51_3();

  uint64_t v21 = self;
  OUTLINED_FUNCTION_90_0((uint64_t)[v21 searchSystemProtocol]);

  swift_bridgeObjectRelease();
  id v22 = OUTLINED_FUNCTION_37_8();
  OUTLINED_FUNCTION_85_1();

  OUTLINED_FUNCTION_86_0((uint64_t)[v21 deleteEntitySystemProtocol]);
  swift_bridgeObjectRelease();
  uint64_t v35 = *(void *)(class metadata base offset for RunLinkActionCATsSimple + *v16 + 112)
      + **(int **)(class metadata base offset for RunLinkActionCATsSimple + *v16 + 112);
  uint64_t v36 = class metadata base offset for RunLinkActionCATsSimple + *v16 + 112;
  uint64_t v23 = swift_task_alloc();
  uint64_t v24 = (void *)OUTLINED_FUNCTION_76_1(v23);
  *uint64_t v24 = v25;
  v24[1] = LinkActionDialogTemplating.makeParameterPromptDialog(parameterName:customPrompt:actionMetadata:);
  OUTLINED_FUNCTION_45_4();
  OUTLINED_FUNCTION_3();
  return v31(v26, v27, v28, v29, v30, v31, v32, v33, a9, v35, v36, a12, a13, a14);
}

uint64_t LinkActionDialogTemplating.makeParameterPromptDialog_preRFv2(parameterName:customPrompt:actionMetadata:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v3;
  v1[5] = v4;
  v1[2] = v5;
  v1[3] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  v1[8] = OUTLINED_FUNCTION_13_0();
  v1[9] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 72);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  uint64_t v9 = OUTLINED_FUNCTION_87();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v9, v10);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v11, v12, v13);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_23_1();
    return v16(v15, v16, v17, v18, v19, v20, v21, v22);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkActionDialogTemplating.makeParameterPromptDialog_preRFv2(parameterName:customPrompt:actionMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v17 = v15[5];
  v15[10] = *(void *)(v15[7] + 56);
  if (v17)
  {
    uint64_t v18 = swift_task_alloc();
    uint64_t v19 = (void *)OUTLINED_FUNCTION_76_1(v18);
    void *v19 = v20;
    v19[1] = LinkActionDialogTemplating.makeParameterPromptDialog_preRFv2(parameterName:customPrompt:actionMetadata:);
    OUTLINED_FUNCTION_3();
    return LNDialog.asSpeakableString.getter(v21);
  }
  else
  {
    uint64_t v24 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_74_0(v24);
    uint64_t v25 = (void *)v15[10];
    uint64_t v26 = (void *)v15[8];
    id v27 = (void *)v15[6];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_34_10();
    __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v14);
    id v28 = OUTLINED_FUNCTION_37_8();
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_51_3();

    id v29 = self;
    OUTLINED_FUNCTION_90_0((uint64_t)[v29 searchSystemProtocol]);

    swift_bridgeObjectRelease();
    id v30 = OUTLINED_FUNCTION_37_8();
    OUTLINED_FUNCTION_85_1();

    OUTLINED_FUNCTION_86_0((uint64_t)[v29 deleteEntitySystemProtocol]);
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void *)(class metadata base offset for RunLinkActionCATs + *v25 + 56)
        + **(int **)(class metadata base offset for RunLinkActionCATs + *v25 + 56);
    uint64_t v43 = class metadata base offset for RunLinkActionCATs + *v25 + 56;
    uint64_t v31 = swift_task_alloc();
    uint64_t v32 = (void *)OUTLINED_FUNCTION_28_10(v31);
    *uint64_t v32 = v33;
    v32[1] = LinkActionDialogTemplating.makeParameterPromptDialog_preRFv2(parameterName:customPrompt:actionMetadata:);
    OUTLINED_FUNCTION_40_6();
    OUTLINED_FUNCTION_3();
    return v40(v34, v35, v36, v37, v38, v39, v40, v41, a9, v42, v43, a12, a13, a14);
  }
}

{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v16 = (void *)v14[10];
  uint64_t v17 = (void *)v14[8];
  uint64_t v18 = (void *)v14[6];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_36_7();
  uint64_t v19 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  uint64_t v20 = OUTLINED_FUNCTION_37_8();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_51_3();

  uint64_t v21 = self;
  OUTLINED_FUNCTION_90_0((uint64_t)[v21 searchSystemProtocol]);

  swift_bridgeObjectRelease();
  uint64_t v22 = OUTLINED_FUNCTION_37_8();
  OUTLINED_FUNCTION_85_1();

  OUTLINED_FUNCTION_86_0((uint64_t)[v21 deleteEntitySystemProtocol]);
  swift_bridgeObjectRelease();
  uint64_t v35 = *(void *)(class metadata base offset for RunLinkActionCATs + *v16 + 56)
      + **(int **)(class metadata base offset for RunLinkActionCATs + *v16 + 56);
  uint64_t v36 = class metadata base offset for RunLinkActionCATs + *v16 + 56;
  uint64_t v23 = swift_task_alloc();
  uint64_t v24 = (void *)OUTLINED_FUNCTION_28_10(v23);
  *uint64_t v24 = v25;
  v24[1] = LinkActionDialogTemplating.makeParameterPromptDialog_preRFv2(parameterName:customPrompt:actionMetadata:);
  OUTLINED_FUNCTION_40_6();
  OUTLINED_FUNCTION_3();
  return v32(v26, v27, v28, v29, v30, v31, v32, v33, a9, v35, v36, a12, a13, a14);
}

uint64_t LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v0[5] = OUTLINED_FUNCTION_13_0();
  v0[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v0[7] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v0[8] = v5;
  v0[9] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 112) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 120) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[6];
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0[5], &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  uint64_t v3 = v0[15];
  return v2(v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[6];
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0[5], &demangling cache variable for type metadata for SpeakableString?);
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v1, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_30_4();
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v15 = *(void *)(v12 + 56);
  uint64_t v16 = *(void *)(v12 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v12 + 32) + 16), *(void *)(*(void *)(v12 + 32) + 40));
  dispatch thunk of DeviceState.siriLocale.getter();
  *(void *)(v12 + 80) = Locale.identifier.getter();
  *(void *)(v12 + 88) = v17;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  if (v16)
  {
    uint64_t v18 = swift_task_alloc();
    uint64_t v19 = (void *)OUTLINED_FUNCTION_28_10(v18);
    void *v19 = v20;
    v19[1] = LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:);
    OUTLINED_FUNCTION_22_16();
    return LNDialog.asSpeakableString.getter(v21);
  }
  else
  {
    uint64_t v24 = *(void *)(v12 + 48);
    uint64_t v25 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v24, 1, 1, v25);
    id v26 = [*(id *)(v12 + 24) displayRepresentation];
    if (v26)
    {
      id v27 = v26;
      id v28 = [v26 title];

      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v30 = [v28 localizedStringForLocaleIdentifier:v29];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_87();
      OUTLINED_FUNCTION_36_7();
      uint64_t v31 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = 1;
    }
    uint64_t v32 = *(void *)(v12 + 32);
    __swift_storeEnumTagSinglePayload(*(void *)(v12 + 40), v31, 1, v25);
    uint64_t v33 = *(int **)(class metadata base offset for RunLinkActionCATsSimple + **(void **)(v32 + 64) + 128);
    unint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = class metadata base offset for RunLinkActionCATsSimple + **(void **)(v32 + 64) + 128;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_27_14(v34);
    *uint64_t v35 = v36;
    v35[1] = LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:);
    OUTLINED_FUNCTION_83_0();
    OUTLINED_FUNCTION_22_16();
    return v40(v37, v38, v39, v40, v41, v42, v43, v44, a9, v45, v46, a12);
  }
}

uint64_t LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_79_1();
  OUTLINED_FUNCTION_21_0();
  id v10 = [*(id *)(v9 + 24) displayRepresentation];
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = [v10 title];

    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v14 = [v12 localizedStringForLocaleIdentifier:v13];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_36_7();
    uint64_t v15 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = 1;
  }
  uint64_t v17 = *(void *)(v9 + 32);
  uint64_t v16 = *(void *)(v9 + 40);
  uint64_t v18 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v16, v15, 1, v18);
  uint64_t v19 = *(int **)(class metadata base offset for RunLinkActionCATsSimple + **(void **)(v17 + 64) + 128);
  uint64_t v32 = (char *)v19 + *v19;
  uint64_t v20 = swift_task_alloc();
  uint64_t v21 = (void *)OUTLINED_FUNCTION_27_14(v20);
  *uint64_t v21 = v22;
  v21[1] = LinkActionDialogTemplating.makeParameterValueConfirmation(customPrompt:parameterValue:);
  OUTLINED_FUNCTION_83_0();
  OUTLINED_FUNCTION_48_0();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, v32);
}

uint64_t LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for Locale();
  v1[5] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[6] = v5;
  v1[7] = OUTLINED_FUNCTION_25();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  v1[8] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_20_19();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  *(void *)(v4 + 104) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v4 + 112) = v2;
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 64), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  uint64_t v2 = *(void *)(v0 + 112);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 64), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_30_4();
  if (*(void *)(v12 + 16))
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v12 + 72) = v13;
    *NSString v13 = v14;
    v13[1] = LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:);
    OUTLINED_FUNCTION_22_16();
    return LNDialog.asSpeakableString.getter(v15);
  }
  else
  {
    uint64_t v18 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_12_16(v18);
    id v19 = [*(id *)(v12 + 24) displayRepresentation];
    uint64_t v20 = v19;
    if (v19)
    {
      id v21 = [v19 title];

      OUTLINED_FUNCTION_54_2();
      Locale.identifier.getter();
      uint64_t v22 = OUTLINED_FUNCTION_29_9();
      v23(v22);
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v25 = [v21 localizedStringForLocaleIdentifier:v24];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v26 = (void *)OUTLINED_FUNCTION_41_7();
    OUTLINED_FUNCTION_47_5(v26);
    uint64_t v38 = (char *)v28 + *v28;
    uint64_t v39 = v27;
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v12 + 96) = v29;
    void *v29 = v12;
    v29[1] = LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:);
    OUTLINED_FUNCTION_38_8();
    OUTLINED_FUNCTION_22_16();
    return v36(v30, v31, v32, v33, v34, v35, v36, v37, a9, v38, v39, a12);
  }
}

{
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  NSString v18;
  id v19;
  void *v20;
  uint64_t v21;
  int *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char *, uint64_t, uint64_t);
  uint64_t v31;
  char *v33;
  uint64_t v34;

  OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_30_4();
  NSString v13 = [*(id *)(v12 + 24) displayRepresentation];
  uint64_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = [v13 title];

    OUTLINED_FUNCTION_54_2();
    Locale.identifier.getter();
    uint64_t v16 = OUTLINED_FUNCTION_29_9();
    v17(v16);
    uint64_t v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v19 = [v15 localizedStringForLocaleIdentifier:v18];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v20 = (void *)OUTLINED_FUNCTION_41_7();
  OUTLINED_FUNCTION_47_5(v20);
  uint64_t v33 = (char *)v22 + *v22;
  uint64_t v34 = v21;
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v12 + 96) = v23;
  *uint64_t v23 = v12;
  v23[1] = LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:);
  OUTLINED_FUNCTION_38_8();
  OUTLINED_FUNCTION_22_16();
  return v30(v24, v25, v26, v27, v28, v29, v30, v31, a9, v33, v34, a12);
}

uint64_t LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for TemplatingText();
  v1[4] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[5] = v4;
  v1[6] = OUTLINED_FUNCTION_25();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_16(v5);
  v1[7] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[8] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[9] = v7;
  v1[10] = OUTLINED_FUNCTION_25();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  v1[11] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = swift_task_alloc();
    uint64_t v2 = (void *)OUTLINED_FUNCTION_28_10(v1);
    *uint64_t v2 = v3;
    v2[1] = LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:);
    uint64_t v4 = *(void *)(v0 + 88);
    return LNDialog.asSpeakableString.getter(v4);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v7 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
    OUTLINED_FUNCTION_50_4();
    uint64_t v8 = swift_task_alloc();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_27_14(v8);
    *uint64_t v9 = v10;
    v9[1] = LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:);
    uint64_t v11 = OUTLINED_FUNCTION_48_5();
    return v12(v11);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_50_4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_27_14(v0);
  void *v1 = v2;
  v1[1] = LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:);
  uint64_t v3 = OUTLINED_FUNCTION_48_5();
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

void *LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)()
{
  OUTLINED_FUNCTION_63_1();
  __swift_mutable_project_boxed_opaque_existential_1(v1, *(void *)(v1 + 24));
  OUTLINED_FUNCTION_17_13();
  __chkstk_darwin(v2);
  uint64_t v4 = OUTLINED_FUNCTION_24_12(v3, v16);
  uint64_t v6 = v5(v4);
  uint64_t v14 = OUTLINED_FUNCTION_32_11(v6, v7, v8, v9, v10, v11, v12, v13, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return v14;
}

uint64_t LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 136) = v2;
  *(void *)(v1 + 64) = v3;
  *(void *)(v1 + 72) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v1 + 80) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;

  OUTLINED_FUNCTION_21_0();
  if (!*(void *)(v0 + 64))
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_12_16(v7);
    uint64_t v8 = *(unsigned char *)(v0 + 136);
    uint64_t v9 = OUTLINED_FUNCTION_10_24(*(void *)(v0 + 72));
    OUTLINED_FUNCTION_89_0(v9);
    if (v8)
    {
      uint64_t v10 = swift_task_alloc();
      uint64_t v11 = (void *)OUTLINED_FUNCTION_27_14(v10);
      *uint64_t v11 = v12;
      v11[1] = LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:);
      OUTLINED_FUNCTION_13_18();
      OUTLINED_FUNCTION_42_7();
      __asm { BRAA            X6, X16 }
    }
    uint64_t v15 = swift_task_alloc();
    uint64_t v16 = (void *)OUTLINED_FUNCTION_77_0(v15);
    *uint64_t v16 = v17;
    v16[1] = LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:);
    OUTLINED_FUNCTION_13_18();
    OUTLINED_FUNCTION_42_7();
    __asm { BRAA            X6, X16 }
  }
  uint64_t v1 = swift_task_alloc();
  char v2 = (void *)OUTLINED_FUNCTION_76_1(v1);
  *char v2 = v3;
  v2[1] = LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:);
  OUTLINED_FUNCTION_42_7();
  return LNDialog.asSpeakableString.getter(v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *char v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  v2[2] = v1;
  v2[3] = v4;
  v2[4] = v0;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 112) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 80), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_39_0();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  v2[5] = v1;
  v2[6] = v4;
  v2[7] = v0;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 128) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 80), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_39_0();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 80), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 80), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

void LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:)()
{
  OUTLINED_FUNCTION_21_0();
  int v1 = *(unsigned __int8 *)(v0 + 136);
  uint64_t v2 = OUTLINED_FUNCTION_10_24(*(void *)(v0 + 72));
  OUTLINED_FUNCTION_89_0(v2);
  if (v1 == 1)
  {
    uint64_t v3 = swift_task_alloc();
    uint64_t v4 = (void *)OUTLINED_FUNCTION_27_14(v3);
    *uint64_t v4 = v5;
    v4[1] = LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:);
    OUTLINED_FUNCTION_13_18();
    OUTLINED_FUNCTION_42_7();
    __asm { BRAA            X6, X16 }
  }
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_77_0(v8);
  *uint64_t v9 = v10;
  v9[1] = LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:);
  OUTLINED_FUNCTION_13_18();
  OUTLINED_FUNCTION_42_7();
  __asm { BRAA            X6, X16 }
}

uint64_t LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  int v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_6_17();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_44_3();
  if (!v0) {
    *(void *)(v5 + 72) = v3;
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 32), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  int v1 = OUTLINED_FUNCTION_81_1();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 32), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_79_1();
  OUTLINED_FUNCTION_21_0();
  if (*(void *)(v9 + 16))
  {
    uint64_t v10 = swift_task_alloc();
    uint64_t v11 = (void *)OUTLINED_FUNCTION_65_1(v10);
    *uint64_t v11 = v12;
    v11[1] = LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:);
    OUTLINED_FUNCTION_48_0();
    return LNDialog.asSpeakableString.getter(v13);
  }
  else
  {
    uint64_t v16 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_12_16(v16);
    uint64_t v17 = OUTLINED_FUNCTION_10_24(*(void *)(v9 + 24));
    OUTLINED_FUNCTION_62_0(v17);
    uint64_t v30 = (char *)v18 + *v18;
    uint64_t v19 = swift_task_alloc();
    uint64_t v20 = (void *)OUTLINED_FUNCTION_64_0(v19);
    *uint64_t v20 = v21;
    v20[1] = LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:);
    OUTLINED_FUNCTION_38_8();
    OUTLINED_FUNCTION_48_0();
    return v28(v22, v23, v24, v25, v26, v27, v28, v29, a9, v30);
  }
}

{
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char *);
  uint64_t v22;
  char *v24;

  OUTLINED_FUNCTION_79_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v10 = OUTLINED_FUNCTION_10_24(*(void *)(v9 + 24));
  OUTLINED_FUNCTION_62_0(v10);
  uint64_t v24 = (char *)v11 + *v11;
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)OUTLINED_FUNCTION_64_0(v12);
  *uint64_t v13 = v14;
  v13[1] = LinkActionDialogTemplating.makeActionConfirmationPattern_preRFv2(customResponse:);
  OUTLINED_FUNCTION_38_8();
  OUTLINED_FUNCTION_48_0();
  return v21(v15, v16, v17, v18, v19, v20, v21, v22, a9, v24);
}

uint64_t LinkActionDialogTemplating.makeContinueInAppPattern(customResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v1);
  v0[2] = OUTLINED_FUNCTION_25();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v2);
  uint64_t v3 = OUTLINED_FUNCTION_25();
  v0[3] = v3;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[4] = v4;
  *uint64_t v4 = v5;
  v4[1] = LinkActionDialogTemplating.makeContinueInAppPattern(customResponse:);
  return LNDialog.asSpeakableString.getter(v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v8)(void, uint64_t (*)(), uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[3];
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v2 = (void *)CATWrapper.__allocating_init(options:globals:)();
  v0[5] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[6] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v8 = (uint64_t (*)(void, uint64_t (*)(), uint64_t))(*(void *)(class metadata base offset for RunLinkActionCATPatternsExecutor
                                                                                     + *v2
                                                                                     + 48)
                                                                         + **(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor
                                                                                    + *v2
                                                                                    + 48));
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_64_0(v4);
  *uint64_t v5 = v6;
  v5[1] = LinkActionDialogTemplating.makeContinueInAppPattern(customResponse:);
  return v8(0, partial apply for closure #1 in LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:), v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_6_17();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_44_3();
  if (!v0) {
    *(void *)(v5 + 72) = v3;
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 24), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_81_1();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 24), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_6_17();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_44_3();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  uint64_t v2 = *(void *)(v0 + 80);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_79_1();
  OUTLINED_FUNCTION_21_0();
  if (v9[2])
  {
    uint64_t v10 = swift_task_alloc();
    uint64_t v11 = (void *)OUTLINED_FUNCTION_58_1(v10);
    *uint64_t v11 = v12;
    v11[1] = LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:);
    OUTLINED_FUNCTION_48_0();
    return LNDialog.asSpeakableString.getter(v13);
  }
  else
  {
    uint64_t v16 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_12_16(v16);
    uint64_t v17 = OUTLINED_FUNCTION_10_24(v9[4]);
    OUTLINED_FUNCTION_61_1(v17);
    uint64_t v29 = (char *)v18 + *v18;
    uint64_t v19 = (void *)swift_task_alloc();
    v9[8] = v19;
    void *v19 = v9;
    v19[1] = LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:);
    OUTLINED_FUNCTION_58_3();
    OUTLINED_FUNCTION_48_0();
    return v27(v20, v21, v22, v23, v24, v25, v26, v27, a9, v29);
  }
}

{
  uint64_t v9;
  uint64_t v10;
  int *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, char *);
  uint64_t v21;
  char *v23;

  OUTLINED_FUNCTION_79_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v10 = OUTLINED_FUNCTION_10_24(*(void *)(v9 + 32));
  OUTLINED_FUNCTION_61_1(v10);
  uint64_t v23 = (char *)v11 + *v11;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v9 + 64) = v12;
  *uint64_t v12 = v9;
  v12[1] = LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:);
  OUTLINED_FUNCTION_58_3();
  OUTLINED_FUNCTION_48_0();
  return v20(v13, v14, v15, v16, v17, v18, v19, v20, a9, v23);
}

uint64_t closure #1 in LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined assign with copy of SpeakableString?(a2, a1);
  if (a4)
  {
    swift_bridgeObjectRetain();
    SpeakableString.init(print:speak:)();
    uint64_t v10 = type metadata accessor for SpeakableString();
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for SpeakableString();
    uint64_t v11 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v9, v11, 1, v10);
  uint64_t v12 = type metadata accessor for RunLinkActionParameterConfirmationParameters(0);
  return outlined assign with take of SpeakableString?((uint64_t)v9, a1 + *(int *)(v12 + 24));
}

uint64_t LinkActionDialogTemplating.extractDialogAndParamDetails(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getErrorValue();
  uint64_t v8 = dispatch thunk of Error._code.getter();
  if (v8 == 2005)
  {
    uint64_t v9 = 1;
LABEL_15:
    uint64_t v19 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(a1, 1, 1, v19);
    return v9;
  }
  if (v8 == 2014)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    id v11 = objc_msgSend(v10, "ln_staticDeferredLocalizedString");

    if (v11)
    {
      __swift_project_boxed_opaque_existential_1((void *)(v2 + 16), *(void *)(v2 + 40));
      dispatch thunk of DeviceState.siriLocale.getter();
      Locale.identifier.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v13 = [v11 localizedStringForLocaleIdentifier:v12];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      goto LABEL_8;
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "#LinkActionDialogTemplating could not create error dialog from .localizedStringResource error.", v18, 2u);
      swift_slowDealloc();
    }

    goto LABEL_14;
  }
  if (v8 != 2009)
  {
LABEL_14:
    uint64_t v9 = 0;
    goto LABEL_15;
  }
  swift_getErrorValue();
  Error.localizedDescription.getter();
LABEL_8:
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  uint64_t v14 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(a1, 0, 1, v14);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t LinkActionDialogTemplating.makeFailureHandlingIntentDialog(error:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  int *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[3];
  LinkActionDialogTemplating.extractDialogAndParamDetails(from:)(v0[4]);
  uint64_t v2 = *(int **)(class metadata base offset for RunLinkActionCATsSimple + **(void **)(v1 + 64) + 80);
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = LinkActionDialogTemplating.makeFailureHandlingIntentDialog(error:);
  uint64_t v4 = OUTLINED_FUNCTION_82_1(v0[4]);
  return v6(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 56) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 32), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  uint64_t v2 = *(void *)(v0 + 56);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 32), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t LinkActionDialogTemplating.makeGenericError()()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v2);
  *(void *)(v1 + 24) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, void);
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void **)(v0[2] + 64);
  uint64_t v3 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v3);
  uint64_t v7 = (uint64_t (*)(uint64_t, void))(*(void *)(class metadata base offset for RunLinkActionCATsSimple
                                                           + *v2
                                                           + 80)
                                               + **(int **)(class metadata base offset for RunLinkActionCATsSimple
                                                          + *v2
                                                          + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[4] = v4;
  *uint64_t v4 = v0;
  v4[1] = LinkActionDialogTemplating.makeGenericError();
  uint64_t v5 = OUTLINED_FUNCTION_82_1(v0[3]);
  return v7(v5, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 40) = v1;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 24), &demangling cache variable for type metadata for SpeakableString?);
  if (v1)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    swift_task_dealloc();
    id v11 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v11(v4);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t LinkActionDialogTemplating.makeFailureHandlingIntentDialog_preRFv2(error:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  char v2;
  int *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[4];
  uint64_t v2 = LinkActionDialogTemplating.extractDialogAndParamDetails(from:)(v0[5]);
  uint64_t v3 = *(int **)(class metadata base offset for RunLinkActionCATs + **(void **)(v1 + 56) + 40);
  uint64_t v10 = (int *)((char *)v3 + *v3);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_58_1(v4);
  *uint64_t v5 = v6;
  v5[1] = LinkActionDialogTemplating.makeFailureHandlingIntentDialog_preRFv2(error:);
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[2];
  return ((uint64_t (*)(uint64_t, uint64_t, void))v10)(v8, v7, v2 & 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 56) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  int *v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  OUTLINED_FUNCTION_13_1();
  if (v0[3])
  {
    uint64_t v1 = v0[2];
    v0[6] = *(void *)(v0[4] + 64);
    if (v1)
    {
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      v0[7] = v2;
      *uint64_t v2 = v3;
      v2[1] = LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:);
      uint64_t v4 = v0[5];
      return LNDialog.asSpeakableString.getter(v4);
    }
    else
    {
      id v11 = type metadata accessor for SpeakableString();
      OUTLINED_FUNCTION_12_16(v11);
      NSString v12 = v0[3];
      id v13 = *(int **)(class metadata base offset for RunLinkActionCATsSimple + *(void *)v0[6] + 96);
      uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)v13 + *v13);
      uint64_t v14 = (void *)swift_task_alloc();
      v0[8] = v14;
      *uint64_t v14 = v0;
      v14[1] = LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:);
      uint64_t v15 = OUTLINED_FUNCTION_82_1(v0[5]);
      return v16(v15, v12);
    }
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "#LinkActionDialogTemplating makeNeedsDisambiguationTitle NO disambiguation items", v9, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    OUTLINED_FUNCTION_15_3();
    return v10(0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_17();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_44_3();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v5 + 40), &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_23_1();
    return v12(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_79_1();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_6_17();
  uint64_t v11 = v10;
  OUTLINED_FUNCTION_4_0();
  *NSString v12 = v11;
  uint64_t v13 = *v9;
  *NSString v12 = *v9;
  swift_task_dealloc();
  OUTLINED_FUNCTION_44_3();
  uint64_t v15 = *(int **)(class metadata base offset for RunLinkActionCATsSimple + **(void **)(v14 + 48) + 96);
  uint64_t v27 = (char *)v15 + *v15;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v11 + 64) = v16;
  *uint64_t v16 = v13;
  v16[1] = LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:);
  OUTLINED_FUNCTION_44_3();
  OUTLINED_FUNCTION_82_1(*(void *)(v17 + 40));
  OUTLINED_FUNCTION_48_0();
  return v21(v18, v19, v20, v21, v22, v23, v24, v25, a9, v27);
}

uint64_t LinkActionDialogTemplating.makeNeedsDisambiguationTitle_preRFv2(customPrompt:items:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  uint64_t v4 = type metadata accessor for TemplatingText();
  v1[6] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[7] = v5;
  v1[8] = OUTLINED_FUNCTION_25();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_16(v6);
  v1[9] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  v1[10] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[11] = v8;
  v1[12] = OUTLINED_FUNCTION_25();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v9);
  v1[13] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  if (v0[3])
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[14] = v1;
    void *v1 = v2;
    v1[1] = LinkActionDialogTemplating.makeNeedsDisambiguationTitle_preRFv2(customPrompt:items:);
    uint64_t v3 = v0[13];
    return LNDialog.asSpeakableString.getter(v3);
  }
  else
  {
    uint64_t v5 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_12_16(v5);
    uint64_t v6 = swift_task_alloc();
    uint64_t v7 = (void *)OUTLINED_FUNCTION_77_0(v6);
    char *v7 = v8;
    v7[1] = LinkActionDialogTemplating.makeNeedsDisambiguationTitle_preRFv2(customPrompt:items:);
    uint64_t v9 = OUTLINED_FUNCTION_91_0();
    return v10(v9);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_77_0(v0);
  void *v1 = v2;
  v1[1] = LinkActionDialogTemplating.makeNeedsDisambiguationTitle_preRFv2(customPrompt:items:);
  uint64_t v3 = OUTLINED_FUNCTION_91_0();
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(void);
  unint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, unint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;

  uint64_t v28 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = TemplatingResult.sections.getter();
  specialized Collection.first.getter(v2, v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for TemplatingSection();
  if (OUTLINED_FUNCTION_87_0(v3) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0[9], &demangling cache variable for type metadata for TemplatingSection?);
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    TemplatingSection.content.getter();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_66();
    v6();
    uint64_t v4 = TemplatingText.text.getter();
    uint64_t v5 = v7;
    uint64_t v8 = OUTLINED_FUNCTION_87();
    v9(v8);
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.debug.getter();
  uint64_t v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[12];
  uint64_t v15 = v0[13];
  uint64_t v17 = v0[10];
  uint64_t v16 = v0[11];
  if (v13)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v25 = v17;
    *(_DWORD *)uint64_t v18 = 136315138;
    if (v5) {
      uint64_t v20 = v4;
    }
    else {
      uint64_t v20 = 0x2D6C696E2DLL;
    }
    uint64_t v26 = v4;
    uint64_t v27 = v19;
    if (v5) {
      uint64_t v21 = v5;
    }
    else {
      uint64_t v21 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v11, v12, "#LinkActionDialogTemplating makeNeedsDisambiguationTitle (pre-RF2.0) needsDisambiguationText=\"%s\"", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v25);
    uint64_t v22 = v15;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v17);
    uint64_t v22 = v15;
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v22, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_78_1();
  return v23(v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 104), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for Locale();
  v1[4] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[5] = v4;
  v1[6] = OUTLINED_FUNCTION_25();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_64_0(v5);
  *uint64_t v6 = v7;
  v6[1] = LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:);
  return LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void *v10;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = *v1;
  *uint64_t v4 = *v1;
  v3[8] = v6;
  v3[9] = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v5 + 8);
    return v8();
  }
  else
  {
    uint64_t v10 = (void *)swift_task_alloc();
    v3[10] = v10;
    *uint64_t v10 = v5;
    v10[1] = LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:);
    return static LabelTemplates.cancel()();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 88) = v6;
  *(void *)(v3 + 96) = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v5 + 8);
    return v8();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v10, v11, v12);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  v7[14] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7[15] = v3;
    v7[16] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();

  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_46_6();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  v7[18] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7[19] = v3;
    v7[20] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();

  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_46_6();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  v3[23] = v7;
  v3[24] = v8;
  v3[25] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 192);

  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 192);
    uint64_t v3 = (uint64_t *)(v0 + 184);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 72);
    uint64_t v3 = (uint64_t *)(v0 + 64);
  }
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v6 = *v3;
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8);
  return v7(v6, v2, v5, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = (void *)v10[2];
  if (!v11)
  {
LABEL_19:
    swift_task_dealloc();
    OUTLINED_FUNCTION_14_1();
    return v38(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10);
  }
  id v12 = v11;
  uint64_t v13 = (char *)[v12 type];
  if (!v13)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = (void *)swift_task_alloc();
    v10[17] = v17;
    *uint64_t v17 = v10;
    v17[1] = LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:);
    OUTLINED_FUNCTION_59_3();
    goto LABEL_8;
  }
  if (v13 == (unsigned char *)&dword_0 + 2)
  {
    uint64_t v21 = v10[5];
    uint64_t v20 = v10[6];
    uint64_t v22 = v10[4];
    __swift_project_boxed_opaque_existential_1((void *)(v10[3] + 16), *(void *)(v10[3] + 40));
    dispatch thunk of DeviceState.siriLocale.getter();
    Locale.identifier.getter();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    id v23 = [v12 acceptLabel];
    if (v23)
    {
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      NSString v25 = String._bridgeToObjectiveC()();
      id v26 = [v24 localizedStringForLocaleIdentifier:v25];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v29 = [v12 denyLabel];
    if (v29)
    {
      uint64_t v30 = v29;
      swift_bridgeObjectRelease();
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v32 = [v30 localizedStringForLocaleIdentifier:v31];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    goto LABEL_19;
  }
  if (v13 == (unsigned char *)&dword_0 + 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)OUTLINED_FUNCTION_27_14(v14);
    *uint64_t v15 = v16;
    v15[1] = LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:);
LABEL_8:
    OUTLINED_FUNCTION_14_1();
    return LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)();
  }
  v10[21] = LNConfirmationActionName.toIntentVerb()()._object;
  uint64_t v27 = (void *)swift_task_alloc();
  v10[22] = v27;
  *uint64_t v27 = v10;
  v27[1] = LinkActionDialogTemplating.makeConfirmAndCancelButton(confirmationActionName:);
  OUTLINED_FUNCTION_14_1();
  return LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:)();
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for TemplatingText();
  v1[5] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[6] = v5;
  v1[7] = OUTLINED_FUNCTION_25();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_16(v6);
  v1[8] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  v1[9] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[10] = v8;
  v1[11] = OUTLINED_FUNCTION_25();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v9);
  v1[12] = OUTLINED_FUNCTION_13_0();
  v1[13] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[14] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[15] = v11;
  v1[16] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for SpeakableString();
  v1[17] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[18] = v13;
  v1[19] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_6_17();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 168) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_44_3();
  uint64_t v8 = *(void *)(v7 + 104);
  if (!v0) {
    *(void *)(v5 + 176) = v3;
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 96);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  char *v7 = v6;
  *(void *)(v8 + 192) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_30_4();
  uint64_t v14 = v12[15];
  uint64_t v13 = v12[16];
  uint64_t v15 = v12[14];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34_10();
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v15);
  char v16 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  uint64_t v17 = v12[17];
  uint64_t v18 = v12[4];
  if (v16)
  {
    uint64_t v19 = v12[13];
    uint64_t v20 = *(void **)(v18 + 64);
    uint64_t v21 = OUTLINED_FUNCTION_84_0();
    v22(v21);
    __swift_storeEnumTagSinglePayload(v19, 0, 1, v17);
    uint64_t v47 = *(void *)(class metadata base offset for RunLinkActionCATsSimple + *v20 + 56)
        + **(int **)(class metadata base offset for RunLinkActionCATsSimple + *v20 + 56);
    uint64_t v49 = class metadata base offset for RunLinkActionCATsSimple + *v20 + 56;
    id v23 = (void *)swift_task_alloc();
    v12[20] = v23;
    *id v23 = v12;
    v23[1] = LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:);
    OUTLINED_FUNCTION_22_16();
    return v26(v24, v25, v26, v27, v28, v29, v30, v31, a9, v47, v49, a12);
  }
  else
  {
    uint64_t v33 = v12[12];
    uint64_t v34 = *(void **)(v18 + 56);
    uint64_t v35 = OUTLINED_FUNCTION_84_0();
    v36(v35);
    __swift_storeEnumTagSinglePayload(v33, 0, 1, v17);
    uint64_t v48 = *(void *)(class metadata base offset for RunLinkActionCATs + *v34 + 24)
        + **(int **)(class metadata base offset for RunLinkActionCATs + *v34 + 24);
    uint64_t v50 = class metadata base offset for RunLinkActionCATs + *v34 + 24;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v12[23] = v37;
    *uint64_t v37 = v38;
    v37[1] = LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:);
    OUTLINED_FUNCTION_22_16();
    return v42(v39, v40, v41, v42, v43, v44, v45, v46, a9, v48, v50, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  dispatch thunk of LabelExecutionResult.subscript.getter();
  swift_release();
  uint64_t v13 = *(void *)(v12 + 152);
  OUTLINED_FUNCTION_66_1();
  v14(v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_78_1();
  OUTLINED_FUNCTION_28_0();
  return v18(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = v12[8];
  uint64_t v14 = TemplatingResult.sections.getter();
  specialized Collection.first.getter(v14, v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = type metadata accessor for TemplatingSection();
  if (OUTLINED_FUNCTION_87_0(v15) == 1)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v12[8], &demangling cache variable for type metadata for TemplatingSection?);
  }
  else
  {
    uint64_t v17 = v12[6];
    char v16 = v12[7];
    uint64_t v18 = v12[5];
    TemplatingSection.content.getter();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_66();
    v19();
    TemplatingText.text.getter();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  (*(void (**)(void, void))(v12[10] + 8))(v12[11], v12[9]);
  uint64_t v20 = v12[19];
  OUTLINED_FUNCTION_66_1();
  v21(v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_67_1();
  OUTLINED_FUNCTION_28_0();
  return v25(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v10 = OUTLINED_FUNCTION_26_13();
  v11(v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v10 = OUTLINED_FUNCTION_26_13();
  v11(v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for TemplatingText();
  v1[5] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[6] = v5;
  v1[7] = OUTLINED_FUNCTION_25();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_16(v6);
  v1[8] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  v1[9] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[10] = v8;
  v1[11] = OUTLINED_FUNCTION_25();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v9);
  v1[12] = OUTLINED_FUNCTION_13_0();
  v1[13] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[14] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[15] = v11;
  v1[16] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for SpeakableString();
  v1[17] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[18] = v13;
  v1[19] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_20_19();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 176) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 104);
  if (!v0) {
    *(void *)(v5 + 184) = v2;
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 96);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  char *v7 = v6;
  *(void *)(v8 + 200) = v0;
  swift_task_dealloc();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v16 = v14[15];
  uint64_t v15 = v14[16];
  uint64_t v17 = v14[14];
  uint64_t v18 = (void *)v14[4];
  uint64_t v20 = v18[5];
  uint64_t v19 = v18[6];
  __swift_project_boxed_opaque_existential_1(v18 + 2, v20);
  v14[20] = DeviceState.asSiriKitDeviceState()(v20, v19);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_36_7();
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v15, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v17);
  LOBYTE(v20) = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_81();
  v21();
  uint64_t v22 = v14[17];
  uint64_t v23 = v14[4];
  if (v20)
  {
    uint64_t v24 = v14[13];
    uint64_t v25 = *(void **)(v23 + 80);
    uint64_t v26 = OUTLINED_FUNCTION_92_0();
    v27(v26);
    __swift_storeEnumTagSinglePayload(v24, 0, 1, v22);
    uint64_t v52 = *(void *)(class metadata base offset for RunVoiceCommandCATsSimple + *v25 + 232)
        + **(int **)(class metadata base offset for RunVoiceCommandCATsSimple + *v25 + 232);
    uint64_t v54 = class metadata base offset for RunVoiceCommandCATsSimple + *v25 + 232;
    swift_retain();
    uint64_t v28 = (void *)swift_task_alloc();
    v14[21] = v28;
    *uint64_t v28 = v14;
    v28[1] = LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:);
    OUTLINED_FUNCTION_3();
    return v32(v29, v30, v31, v32, v33, v34, v35, v36, a9, v52, v54, a12, a13, a14);
  }
  else
  {
    uint64_t v38 = v14[12];
    uint64_t v39 = *(void **)(v23 + 72);
    uint64_t v40 = OUTLINED_FUNCTION_92_0();
    v41(v40);
    __swift_storeEnumTagSinglePayload(v38, 0, 1, v22);
    uint64_t v53 = *(void *)(class metadata base offset for RunVoiceCommandCATs + *v39 + 112)
        + **(int **)(class metadata base offset for RunVoiceCommandCATs + *v39 + 112);
    uint64_t v55 = class metadata base offset for RunVoiceCommandCATs + *v39 + 112;
    swift_retain();
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v14[24] = v42;
    *uint64_t v42 = v43;
    v42[1] = LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:);
    OUTLINED_FUNCTION_3();
    return v48(v44, v45, v46, v47, v48, v49, v50, v51, a9, v53, v55, a12, a13, a14);
  }
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int EnumTagSinglePayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  void (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = v14[8];
  uint64_t v16 = TemplatingResult.sections.getter();
  specialized Collection.first.getter(v16, v15);
  swift_bridgeObjectRelease();
  uint64_t v17 = type metadata accessor for TemplatingSection();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v15, 1, v17);
  uint64_t v19 = v14[18];
  uint64_t v20 = v14[8];
  if (EnumTagSinglePayload == 1)
  {
    swift_release();
    uint64_t v21 = OUTLINED_FUNCTION_71_1();
    v22(v21);
    OUTLINED_FUNCTION_81();
    v23();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v20, &demangling cache variable for type metadata for TemplatingSection?);
  }
  else
  {
    a10 = v14[19];
    a11 = v14[17];
    uint64_t v24 = v14[6];
    uint64_t v25 = v14[7];
    a9 = v14[5];
    TemplatingSection.content.getter();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_66();
    v26();
    TemplatingText.text.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, a9);
    uint64_t v27 = OUTLINED_FUNCTION_71_1();
    v28(v27);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a10, a11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_67_1();
  OUTLINED_FUNCTION_3();
  return v32(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12, a13, a14);
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  *(unsigned char *)(v10 + 208) = 2;
  dispatch thunk of LabelExecutionResult.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v11 = OUTLINED_FUNCTION_29_9();
  v12(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_78_1();
  OUTLINED_FUNCTION_14_1();
  return v16(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t LinkActionDialogTemplating.makeConfirmationButtonLabelForCategory(verb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_43_5();
  OUTLINED_FUNCTION_81();
  v12();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_0();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

{
  void (*v12)(void);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  OUTLINED_FUNCTION_43_5();
  OUTLINED_FUNCTION_81();
  v12();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_0();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

uint64_t LinkActionDialogTemplating.makeContinueButton()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = LinkActionDialogTemplating.makeContinueButton();
  OUTLINED_FUNCTION_59_3();
  return LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  char *v7 = v6;
  swift_task_dealloc();
  OUTLINED_FUNCTION_78_1();
  if (!v0)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v3;
  }
  return v10(v8, v9);
}

uint64_t LinkActionDialogTemplating.actionPerformedDialog(customPrompt:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = swift_task_alloc();
    uint64_t v2 = (void *)OUTLINED_FUNCTION_65_1(v1);
    *uint64_t v2 = v3;
    v2[1] = LinkActionDialogTemplating.actionPerformedDialog(customPrompt:);
    uint64_t v4 = *(void *)(v0 + 32);
    return LNDialog.asSpeakableString.getter(v4);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 32);
    uint64_t v7 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
    OUTLINED_FUNCTION_49_4();
    uint64_t v8 = swift_task_alloc();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_58_1(v8);
    *uint64_t v9 = v10;
    v9[1] = LinkActionDialogTemplating.actionPerformedDialog(customPrompt:);
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    return v12(v11);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_49_4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_58_1(v0);
  void *v1 = v2;
  v1[1] = LinkActionDialogTemplating.actionPerformedDialog(customPrompt:);
  uint64_t v3 = OUTLINED_FUNCTION_25_10();
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 64) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 32), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  uint64_t v2 = *(void *)(v0 + 64);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 32), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkActionDialogTemplating.actionPerformedDialog_preRFv2(customPrompt:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for TemplatingText();
  v1[4] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[5] = v4;
  v1[6] = OUTLINED_FUNCTION_25();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_16(v5);
  v1[7] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[8] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[9] = v7;
  v1[10] = OUTLINED_FUNCTION_25();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  v1[11] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = swift_task_alloc();
    uint64_t v2 = (void *)OUTLINED_FUNCTION_28_10(v1);
    *uint64_t v2 = v3;
    v2[1] = LinkActionDialogTemplating.actionPerformedDialog_preRFv2(customPrompt:);
    uint64_t v4 = *(void *)(v0 + 88);
    return LNDialog.asSpeakableString.getter(v4);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v7 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
    OUTLINED_FUNCTION_50_4();
    uint64_t v8 = swift_task_alloc();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_27_14(v8);
    *uint64_t v9 = v10;
    v9[1] = LinkActionDialogTemplating.actionPerformedDialog_preRFv2(customPrompt:);
    uint64_t v11 = OUTLINED_FUNCTION_48_5();
    return v12(v11);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_50_4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_27_14(v0);
  void *v1 = v2;
  v1[1] = LinkActionDialogTemplating.actionPerformedDialog_preRFv2(customPrompt:);
  uint64_t v3 = OUTLINED_FUNCTION_48_5();
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(*(void *)(v0 + 88), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkActionDialogTemplating.actionPerformedDialog_preRFv2(customPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = *(void *)(v12 + 56);
  uint64_t v14 = TemplatingResult.sections.getter();
  specialized Collection.first.getter(v14, v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = type metadata accessor for TemplatingSection();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v13, 1, v15);
  uint64_t v17 = *(void *)(v12 + 88);
  uint64_t v18 = *(void *)(v12 + 56);
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v19 = OUTLINED_FUNCTION_70_0();
    v20(v19);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v17, &demangling cache variable for type metadata for SpeakableString?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v18, &demangling cache variable for type metadata for TemplatingSection?);
  }
  else
  {
    TemplatingSection.content.getter();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_66();
    v21();
    TemplatingText.text.getter();
    OUTLINED_FUNCTION_81();
    v22();
    uint64_t v23 = OUTLINED_FUNCTION_70_0();
    v24(v23);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v17, &demangling cache variable for type metadata for SpeakableString?);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_67_1();
  OUTLINED_FUNCTION_28_0();
  return v28(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
}

uint64_t LinkActionDialogTemplating.actionConfirmationHeader(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = swift_task_alloc();
    uint64_t v2 = (void *)OUTLINED_FUNCTION_65_1(v1);
    *uint64_t v2 = v3;
    v2[1] = LinkActionDialogTemplating.actionConfirmationHeader(customDialog:);
    uint64_t v4 = *(void *)(v0 + 32);
    return LNDialog.asSpeakableString.getter(v4);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 32);
    uint64_t v7 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
    OUTLINED_FUNCTION_49_4();
    uint64_t v8 = swift_task_alloc();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_58_1(v8);
    *uint64_t v9 = v10;
    v9[1] = LinkActionDialogTemplating.actionConfirmationHeader(customDialog:);
    uint64_t v11 = OUTLINED_FUNCTION_25_10();
    return v12(v11);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_49_4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_58_1(v0);
  void *v1 = v2;
  v1[1] = LinkActionDialogTemplating.actionConfirmationHeader(customDialog:);
  uint64_t v3 = OUTLINED_FUNCTION_25_10();
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 64) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t LinkActionDialogTemplating.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 88);
  return v0;
}

uint64_t LinkActionDialogTemplating.__deallocating_deinit()
{
  LinkActionDialogTemplating.deinit();

  return swift_deallocClassInstance();
}

void *specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  a7[14] = a8;
  a7[15] = a9;
  __swift_allocate_boxed_opaque_existential_1(a7 + 11);
  OUTLINED_FUNCTION_40();
  (*(void (**)(void))(v15 + 32))();
  outlined init with take of AceServiceInvokerAsync(a1, (uint64_t)(a7 + 2));
  a7[7] = a2;
  a7[8] = a3;
  a7[9] = a4;
  a7[10] = a5;
  return a7;
}

uint64_t partial apply for closure #1 in LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)(uint64_t a1)
{
  return closure #1 in LinkActionDialogTemplating.makeParameterValueConfirmationPattern_preRFv2(customPrompt:parameterValue:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #2 in LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:)(uint64_t a1)
{
  return outlined assign with copy of SpeakableString?(*(void *)(v1 + 16), a1);
}

uint64_t type metadata accessor for LinkActionDialogTemplating()
{
  return self;
}

uint64_t outlined assign with copy of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_10_24@<X0>(uint64_t a1@<X8>)
{
  __swift_project_boxed_opaque_existential_1((void *)(a1 + 88), *(void *)(a1 + 112));
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_12_16(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_13_18()
{
  return 0;
}

char *OUTLINED_FUNCTION_24_12@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_25_10()
{
  return *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_26_13()
{
  return *(void *)(v0 + 152);
}

uint64_t OUTLINED_FUNCTION_27_14(uint64_t result)
{
  *(void *)(v1 + 104) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_28_10(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_29_9()
{
  return v0;
}

void *OUTLINED_FUNCTION_32_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)(v14, v13, v12, v11, v10, v16, v9, v15, a9);
}

uint64_t OUTLINED_FUNCTION_34_10()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_36_7()
{
  return SpeakableString.init(print:speak:)();
}

id OUTLINED_FUNCTION_37_8()
{
  uint64_t v3 = *(const char **)(v1 + 4000);
  return [v0 v3];
}

uint64_t OUTLINED_FUNCTION_40_6()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_41_7()
{
  *(void *)(v0 + 80) = v1;
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 32) + 88), *(void *)(*(void *)(v0 + 32) + 112));
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_43_5()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_45_4()
{
  return *(void *)(v0 + 64);
}

uint64_t OUTLINED_FUNCTION_46_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_47_5(void *a1)
{
  *(void *)(v3 + 88) = a1;
  a1[2] = v5;
  a1[3] = v1;
  a1[4] = v4;
  return v2 + 64;
}

uint64_t OUTLINED_FUNCTION_48_5()
{
  return *(void *)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_51_3()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_54_2()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_58_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_59_3()
{
  return 0x65756E69746E6F63;
}

uint64_t OUTLINED_FUNCTION_61_1(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(a1 + 16) = v3;
  return v1 + 72;
}

uint64_t OUTLINED_FUNCTION_62_0(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(a1 + 16) = v3;
  return v1 + 8;
}

uint64_t OUTLINED_FUNCTION_64_0(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_65_1(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_67_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_70_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_71_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_74_0(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_76_1(uint64_t result)
{
  *(void *)(v1 + 88) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_77_0(uint64_t result)
{
  *(void *)(v1 + 120) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_81_1()
{
  return *(void *)(v0 + 72);
}

uint64_t OUTLINED_FUNCTION_82_1@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_83_0()
{
  return *(void *)(v0 + 48);
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_85_1()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_86_0(uint64_t a1)
{
  return specialized Sequence<>.contains(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_87_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

unint64_t OUTLINED_FUNCTION_88_0()
{
  return type metadata accessor for LNSystemProtocol();
}

uint64_t OUTLINED_FUNCTION_89_0(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_90_0(uint64_t a1)
{
  return specialized Sequence<>.contains(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_91_0()
{
  return *(void *)(v0 + 96);
}

uint64_t OUTLINED_FUNCTION_92_0()
{
  return v0;
}

uint64_t CustomIntentExecutionFlow.__allocating_init(runner:intent:voiceCommandName:deviceIdiom:deviceState:aceServiceInvoker:appPolicyHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v16 = a6 & 1;
  uint64_t v17 = swift_allocObject();
  CustomIntentExecutionFlow.init(runner:intent:voiceCommandName:deviceIdiom:deviceState:aceServiceInvoker:appPolicyHandler:)(a1, a2, a3, a4, a5, v16, a7, a8, a9);
  return v17;
}

uint64_t CustomIntentExecutionFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CustomIntentExecutionFlow.State(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_25_8();
  swift_beginAccess();
  uint64_t v4 = OUTLINED_FUNCTION_36_8();
  outlined init with copy of CustomIntentExecutionFlow.State(v4, v5);
  OUTLINED_FUNCTION_31_7();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 7:
      goto LABEL_7;
    case 3:
      char v10 = *(unsigned char *)(v1 + 8);
      *(void *)a1 = *(void *)v1;
      *(unsigned char *)(a1 + 8) = v10;
LABEL_7:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      OUTLINED_FUNCTION_6();
      uint64_t v11 = OUTLINED_FUNCTION_29_10();
      return v12(v11);
    case 2:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      OUTLINED_FUNCTION_6();
      uint64_t v7 = OUTLINED_FUNCTION_75();
      return v8(v7);
    default:
      lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
      uint64_t v13 = OUTLINED_FUNCTION_9_6();
      *uint64_t v14 = 0;
      *(void *)a1 = v13;
      *(unsigned char *)(a1 + 8) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      OUTLINED_FUNCTION_6();
      uint64_t v15 = OUTLINED_FUNCTION_29_10();
      v16(v15);
      return outlined destroy of CustomIntentExecutionFlow.State(v1);
  }
}

void *CustomIntentExecutionFlow.init(runner:intent:voiceCommandName:deviceIdiom:deviceState:aceServiceInvoker:appPolicyHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v10 = v9;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_2();
  uint64_t v42 = v19;
  uint64_t v43 = v18;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_20_0();
  uint64_t v20 = (char *)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_input;
  uint64_t v21 = type metadata accessor for Input();
  uint64_t v22 = (uint64_t)v20;
  uint64_t v23 = a1;
  __swift_storeEnumTagSinglePayload(v22, 1, 1, v21);
  v10[13] = a3;
  v10[14] = a4;
  outlined init with copy of DeviceState(a1, (uint64_t)(v10 + 15));
  outlined init with copy of DeviceState(a7, (uint64_t)(v10 + 3));
  uint64_t v45 = a8;
  outlined init with copy of DeviceState(a8, (uint64_t)(v10 + 8));
  outlined init with copy of DeviceState(a7, (uint64_t)v46);
  if (a6)
  {
    __swift_project_boxed_opaque_existential_1(v46, v46[3]);
    OUTLINED_FUNCTION_36_8();
    a5 = DeviceState.currentDevice.getter();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
  v10[2] = a5;
  *((unsigned char *)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appBlockedByScreentime) = 0;
  outlined init with copy of DeviceState(a9, (uint64_t)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appPolicyHandler);
  if (a2)
  {
    id v24 = a2;
    id v25 = [v24 _metadata];
    id v26 = v25;
    if (!v25)
    {
      id v27 = [objc_allocWithZone((Class)_INPBIntentMetadata) init];
      if (!v27)
      {
        id v26 = 0;
        goto LABEL_8;
      }
      id v26 = v27;
    }
    id v28 = v25;
    UUID.init()();
    uint64_t v29 = UUID.uuidString.getter();
    uint64_t v31 = v30;
    OUTLINED_FUNCTION_66();
    v32();
    outlined bridged method (mbnn) of @objc _INPBIntentMetadata.intentId.setter(v29, v31, v26);

LABEL_8:
    objc_msgSend(v24, "_setMetadata:", v26, v42, v43);

    *(void *)((char *)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state) = a2;
    goto LABEL_10;
  }
  *(void *)((char *)v10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state) = 0;
LABEL_10:
  type metadata accessor for CustomIntentExecutionFlow.State(0);
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.voiceCommands);
  id v34 = a2;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    v46[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    if (a2
      && (uint64_t v38 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v34, (SEL *)&selRef_identifier), v39))
    {
      unint64_t v40 = v39;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v40 = 0xE500000000000000;
      uint64_t v38 = 0x7974706D65;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v35, v36, "intent id: %s", v37, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  __swift_destroy_boxed_opaque_existential_1Tm(v45);
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  __swift_destroy_boxed_opaque_existential_1Tm(v23);
  return v10;
}

uint64_t type metadata accessor for CustomIntentExecutionFlow.State(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for CustomIntentExecutionFlow.State);
}

uint64_t outlined init with copy of CustomIntentExecutionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustomIntentExecutionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CustomIntentExecutionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustomIntentExecutionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CustomIntentExecutionFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v89 = type metadata accessor for CustomIntentExecutionFlow.State(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_25_6();
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v6);
  Swift::Int v90 = (char *)&v82 - v7;
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v85 = v8;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_25_6();
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v10);
  uint64_t v84 = (char *)&v82 - v11;
  *(void *)&long long v92 = type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_2();
  uint64_t v91 = v12;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_20_0();
  uint64_t v16 = v15 - v14;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_25_8();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  __chkstk_darwin(v18 - 8);
  OUTLINED_FUNCTION_51_0();
  uint64_t v21 = v19 - v20;
  __chkstk_darwin(v22);
  id v24 = (char *)&v82 - v23;
  uint64_t v25 = type metadata accessor for Input();
  OUTLINED_FUNCTION_6();
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, a1, v25);
  __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v25);
  outlined init with take of Input?((uint64_t)v24, v21, &demangling cache variable for type metadata for Input?);
  uint64_t v27 = v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_input;
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of Input?(v21, v27);
  swift_endAccess();
  Input.parse.getter();
  uint64_t v28 = OUTLINED_FUNCTION_31_7();
  int v30 = v29(v28);
  if (v30 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    if (v30 != enum case for Parse.directInvocation(_:))
    {
      uint64_t v47 = OUTLINED_FUNCTION_31_7();
LABEL_28:
      v49(v47, v48);
      return 0;
    }
    uint64_t v37 = OUTLINED_FUNCTION_17_14();
    v38(v37);
    uint64_t v39 = v91;
    uint64_t v40 = v16;
    uint64_t v41 = OUTLINED_FUNCTION_75();
    uint64_t v42 = v92;
    v43(v41);
    if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000003BLL && v44 == 0x8000000000226A60)
    {
      swift_bridgeObjectRelease();
      uint64_t v45 = (uint64_t)v90;
    }
    else
    {
      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = (uint64_t)v90;
      if ((v50 & 1) == 0)
      {
LABEL_27:
        uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        uint64_t v47 = v40;
        uint64_t v48 = v42;
        goto LABEL_28;
      }
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.voiceCommands);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_0, v52, v53, "CustomIntentExecutionFlow on input: direct Invocation done button", v54, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v55 = v2 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
    swift_beginAccess();
    outlined init with copy of CustomIntentExecutionFlow.State(v55, v45);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      uint64_t v56 = OUTLINED_FUNCTION_12_17();
      v57(v56);
      uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 32);
      uint64_t v59 = v84;
      uint64_t v60 = v86;
      v58(v84, v45, v86);
      uint64_t v61 = v87;
      v58((char *)v87, (uint64_t)v59, v60);
      OUTLINED_FUNCTION_31_7();
      swift_storeEnumTagMultiPayload();
      uint64_t v62 = v88;
      outlined init with take of CustomIntentExecutionFlow.State(v61, v88);
      OUTLINED_FUNCTION_23_6();
      outlined assign with take of CustomIntentExecutionFlow.State(v62, v55);
LABEL_22:
      swift_endAccess();
      return 1;
    }
    outlined destroy of CustomIntentExecutionFlow.State(v45);
    uint64_t v63 = Parse.DirectInvocation.userData.getter();
    if (v63)
    {
      static ShortcutDoneButtonConverter.toShortcutDoneButton(userData:)(v63, v93);
      swift_bridgeObjectRelease();
      outlined init with take of Input?((uint64_t)v93, (uint64_t)&v94, &demangling cache variable for type metadata for ShortcutDoneButton?);
      if ((void)v95)
      {
        long long v97 = v94;
        long long v98 = v95;
        uint64_t v99 = v96;
        uint64_t v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v64, v65))
        {
          *(_WORD *)OUTLINED_FUNCTION_33() = 0;
          OUTLINED_FUNCTION_20(&dword_0, v66, v67, "CustomIntentExecutionFlow creating exit value with done button.");
          OUTLINED_FUNCTION_7_0();
        }

        uint64_t v68 = OUTLINED_FUNCTION_12_17();
        v69(v68);
        uint64_t v70 = v99;
        long long v92 = v98;
        outlined init with take of Input?((uint64_t)&v97, (uint64_t)v100, &demangling cache variable for type metadata for String?);
        outlined release of String?((uint64_t)v100);
        uint64_t v71 = v83;
        *uint64_t v83 = v70;
        *(_OWORD *)(v71 + 1) = v92;
        uint64_t v72 = v85;
        uint64_t v73 = v86;
        (*(void (**)(void *, void, uint64_t))(v85 + 104))(v71, enum case for RCHFlowResult.complete<A, B>(_:), v86);
        uint64_t v74 = v87;
        (*(void (**)(uint64_t, void *, uint64_t))(v72 + 32))(v87, v71, v73);
        swift_storeEnumTagMultiPayload();
        uint64_t v75 = v74;
        uint64_t v76 = v88;
        outlined init with take of CustomIntentExecutionFlow.State(v75, v88);
        OUTLINED_FUNCTION_23_6();
        outlined assign with take of CustomIntentExecutionFlow.State(v76, v55);
        goto LABEL_22;
      }
    }
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v78, v79))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_20(&dword_0, v80, v81, "CustomIntentExecutionFlow on input: incorrect state for done button");
      OUTLINED_FUNCTION_7_0();
    }

    goto LABEL_27;
  }
  uint64_t v31 = OUTLINED_FUNCTION_17_14();
  v32(v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
  uint64_t v33 = (void *)Parse.ServerConversion.siriKitIntent.getter();
  id v34 = (char *)[v33 _type];

  if (v34 == (unsigned char *)&dword_0 + 2)
  {
    uint64_t v35 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    CustomIntentExecutionFlow.processCustomIntentConversionResult(conversionResult:)(v35, 0);

    swift_release();
    type metadata accessor for NLIntent();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_66();
    v36();
    return 1;
  }
  swift_release();
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_66();
  v46();
  return 0;
}

uint64_t CustomIntentExecutionFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[31] = v2;
  v1[32] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
  v1[33] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[34] = v4;
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<CustomIntentRCHFlowStrategy>);
  v1[37] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[38] = v6;
  v1[39] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INIntent, INIntentResponse>);
  v1[40] = swift_task_alloc();
  v1[41] = type metadata accessor for CustomIntentExecutionFlow.State(0);
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  return _swift_task_switch(CustomIntentExecutionFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  void *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t (*v80)(void);
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[7];
  uint64_t v88;
  long long v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  long long v92 = v0;
  uint64_t v1 = *(void *)(v0 + 256) + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
  swift_beginAccess();
  uint64_t v2 = OUTLINED_FUNCTION_19();
  outlined init with copy of CustomIntentExecutionFlow.State(v2, v3);
  OUTLINED_FUNCTION_36_8();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v4 = *(void *)(v0 + 344);
      uint64_t v5 = **(void ***)(v0 + 352);
      uint64_t v6 = *(void *)(v0 + 336);
      if (!v5)
      {
        lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
        uint64_t v74 = OUTLINED_FUNCTION_9_6();
        *uint64_t v75 = 0;
        *(void *)uint64_t v4 = v74;
        *(unsigned char *)(v4 + 8) = 0;
        swift_storeEnumTagMultiPayload();
        outlined init with take of CustomIntentExecutionFlow.State(v4, v6);
        OUTLINED_FUNCTION_75();
        OUTLINED_FUNCTION_23_6();
        outlined assign with take of CustomIntentExecutionFlow.State(v6, v1);
        swift_endAccess();
        static ExecuteResponse.complete()();
        goto LABEL_41;
      }
      uint64_t v7 = *(void *)(v0 + 256);
      *(void *)uint64_t v4 = v5;
      swift_storeEnumTagMultiPayload();
      outlined init with take of CustomIntentExecutionFlow.State(v4, v6);
      OUTLINED_FUNCTION_23_6();
      uint64_t v8 = v5;
      outlined assign with take of CustomIntentExecutionFlow.State(v6, v1);
      swift_endAccess();
      outlined init with copy of DeviceState(v7 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appPolicyHandler, v0 + 16);
      uint64_t v9 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v8, (SEL *)&selRef_launchId);
      if (v10) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = 0xD000000000000013;
      }
      if (v10) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = 0x8000000000225330;
      }
      uint64_t v13 = type metadata accessor for VoiceCommandsScreentimeCheckFlowStrategy();
      uint64_t v14 = swift_allocObject();
      outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 16), v14 + 16);
      *(void *)(v14 + 56) = v11;
      *(void *)(v14 + 64) = v12;
      Swift::Int v90 = v13;
      uint64_t v91 = lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type VoiceCommandsScreentimeCheckFlowStrategy and conformance VoiceCommandsScreentimeCheckFlowStrategy, (void (*)(uint64_t))type metadata accessor for VoiceCommandsScreentimeCheckFlowStrategy);
      *(void *)&uint64_t v89 = v14;
      swift_retain();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      type metadata accessor for ScreentimeCheckFlow();
      OUTLINED_FUNCTION_35_2();
      *(void *)(v0 + 240) = ScreentimeCheckFlow.init(strategy:outputPublisher:)();
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = partial apply for implicit closure #3 in implicit closure #2 in CustomIntentExecutionFlow.execute();
      *(void *)(v15 + 24) = v7;
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();

      swift_release();
      swift_release();
      goto LABEL_18;
    case 1u:
      uint64_t v16 = *(void **)(v0 + 256);
      uint64_t v17 = **(void ***)(v0 + 352);
      if (*((unsigned char *)v16 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appBlockedByScreentime) == 1)
      {
        static ExecuteResponse.complete()();
      }
      else
      {
        uint64_t v62 = v16[13];
        uint64_t v63 = v16[14];
        uint64_t v64 = v16[2];
        type metadata accessor for CustomIntentExecutionFlow(0);
        lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow, (void (*)(uint64_t))type metadata accessor for CustomIntentExecutionFlow);
        os_log_type_t v65 = SiriEnvironmentLocating<>.siriEnvironment.getter();
        specialized static RCHChildFlowProducersAsync.forCustomIntents(voiceCommandName:originDevice:runner:siriEnvironment:deviceState:)(v62, v63, v64, (uint64_t)(v16 + 15), v65, v16 + 3);
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INIntent, INIntentResponse>);
        OUTLINED_FUNCTION_35_2();
        RCHChildFlowFactory.init(producers:)();
        type metadata accessor for App();
        outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v17, (SEL *)&selRef_launchId);
        App.__allocating_init(appIdentifier:)();
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v66 = type metadata accessor for Logger();
        __swift_project_value_buffer(v66, (uint64_t)static Logger.voiceCommands);
        uint64_t v67 = v17;
        uint64_t v68 = Logger.logObject.getter();
        uint64_t v69 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = (uint8_t *)swift_slowAlloc();
          *(void *)&v87[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = 136315138;
          uint64_t v71 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v67, (SEL *)&selRef_intentId);
          if (v72)
          {
            uint64_t v73 = v72;
          }
          else
          {
            uint64_t v71 = 0x7974706D65;
            uint64_t v73 = 0xE500000000000000;
          }
          *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v73, (uint64_t *)v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_0, v68, v69, "CustomIntentExecutionFlow intent id: %s", v70, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
        else
        {
        }
        uint64_t v76 = *(void *)(v0 + 304);
        uint64_t v77 = *(void *)(v0 + 312);
        uint64_t v78 = *(void *)(v0 + 296);
        type metadata accessor for CustomIntentRCHFlowStrategy();
        os_log_type_t v79 = v67;
        static Device.current.getter();
        *(void *)(v0 + 224) = CustomIntentRCHFlowStrategy.__allocating_init(intent:deviceState:)((uint64_t)v79, (uint64_t)v87);
        lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentRCHFlowStrategy and conformance CustomIntentRCHFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentRCHFlowStrategy);
        swift_retain();
        RCHFlowFactory.init(strategy:childFlowFactory:)();
        RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)();
        swift_retain();
        static ExecuteResponse.ongoing<A>(next:childCompletion:)();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v77, v78);
      }
      goto LABEL_41;
    case 4u:
      uint64_t v19 = *(void *)(v0 + 352);
      uint64_t v20 = *(void *)(v0 + 288);
      uint64_t v21 = *(void *)(v0 + 264);
      uint64_t v22 = *(void *)(v0 + 272);
      id v24 = *(void **)v19;
      uint64_t v23 = *(void **)(v19 + 8);
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (intent: INIntent, intentResponse: INIntentResponse, exitValue: RCHFlowResult<INIntent, INIntentResponse>));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v20, v19 + *(int *)(v25 + 64), v21);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v27 = OUTLINED_FUNCTION_26_1(v26, (uint64_t)static Logger.voiceCommands);
      uint64_t v28 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_32(v28))
      {
        uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl(&dword_0, v27, (os_log_type_t)v21, "Pushing Reading Flow to handle customIntents handle dialog", v29, 2u);
        OUTLINED_FUNCTION_7_0();
      }
      int v30 = *(void *)(v0 + 344);
      uint64_t v83 = *(void *)(v0 + 336);
      uint64_t v82 = *(void *)(v0 + 288);
      uint64_t v31 = *(void *)(v0 + 264);
      uint64_t v32 = *(void *)(v0 + 272);
      uint64_t v33 = *(void *)(v0 + 256);

      uint64_t v84 = v23;
      CustomIntentExecutionFlow.getReadItems(intent:intentResponse:)(v24, v23);

      uint64_t v88 = 0;
      memset(v87, 0, sizeof(v87));
      outlined init with copy of DeviceState(v33 + 24, v0 + 56);
      static OutputPublisherFactory.makeOutputPublisher()();
      type metadata accessor for RunCustomIntentReadingDelegate();
      swift_allocObject();
      RunCustomIntentReadingDelegate.init(templater:deviceState:outputPublisher:)((uint64_t)v87, (void *)(v0 + 56), &v89);
      type metadata accessor for PaginatedConversationFlowSource();
      OUTLINED_FUNCTION_35_2();
      lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate, (void (*)(uint64_t))type metadata accessor for RunCustomIntentReadingDelegate);
      swift_retain();
      PaginatedConversationFlowSource.init<A>(items:delegate:)();
      type metadata accessor for ReadingFlow();
      OUTLINED_FUNCTION_35_2();
      swift_retain();
      id v34 = ReadingFlow.init(source:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v30, v82, v31);
      swift_storeEnumTagMultiPayload();
      outlined init with take of CustomIntentExecutionFlow.State(v30, v83);
      OUTLINED_FUNCTION_23_6();
      outlined assign with take of CustomIntentExecutionFlow.State(v83, v1);
      swift_endAccess();
      *(void *)(v0 + 232) = v34;
      static ExecuteResponse.complete<A>(next:)();

      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v82, v31);
LABEL_18:
      swift_release();
      goto LABEL_41;
    case 5u:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      os_log_type_t v36 = OUTLINED_FUNCTION_26_1(v35, (uint64_t)static Logger.voiceCommands);
      uint64_t v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl(&dword_0, v36, v37, "CustomIntentExecutionFlow waiting for done.", v38, 2u);
        OUTLINED_FUNCTION_7_0();
      }

      static ExecuteResponse.ongoing(requireInput:)();
      uint64_t v39 = OUTLINED_FUNCTION_75();
      v40(v39);
      goto LABEL_41;
    case 6u:
      (*(void (**)(void, void, void))(*(void *)(v0 + 272) + 32))(*(void *)(v0 + 280), *(void *)(v0 + 352), *(void *)(v0 + 264));
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      *(void *)(v0 + 360) = __swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
      uint64_t v42 = (void *)Logger.logObject.getter();
      uint64_t v43 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_32(v43))
      {
        *(_WORD *)OUTLINED_FUNCTION_33() = 0;
        OUTLINED_FUNCTION_42_0(&dword_0, v44, v45, "CustomIntentExecutionFlow user pressed done, showing empty snippet");
        OUTLINED_FUNCTION_7_0();
      }
      uint64_t v46 = *(void *)(v0 + 336);
      uint64_t v47 = *(void *)(v0 + 344);
      uint64_t v48 = *(void *)(v0 + 272);
      uint64_t v86 = *(void *)(v0 + 280);
      uint64_t v49 = *(void **)(v0 + 256);
      uint64_t v85 = *(void *)(v0 + 264);

      char v50 = [objc_allocWithZone((Class)SAUIAssistantUtteranceView) init];
      uint64_t v51 = [objc_allocWithZone((Class)SAUIAddViews) init];
      *(void *)(v0 + 368) = v51;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = xmmword_211C70;
      *(void *)(v52 + 32) = v50;
      *(void *)&v87[0] = v52;
      specialized Array._endMutation()();
      os_log_type_t v53 = v50;
      uint64_t v54 = OUTLINED_FUNCTION_36_8();
      outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(v54, v55);
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      outlined bridged method (mbnn) of @objc SAUIAddViews.dialogPhase.setter(v56, v57, v51);

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v47, v86, v85);
      swift_storeEnumTagMultiPayload();
      outlined init with take of CustomIntentExecutionFlow.State(v47, v46);
      OUTLINED_FUNCTION_23_6();
      outlined assign with take of CustomIntentExecutionFlow.State(v46, v1);
      swift_endAccess();
      uint64_t v59 = v49[11];
      uint64_t v58 = v49[12];
      __swift_project_boxed_opaque_existential_1(v49 + 8, v59);
      uint64_t v60 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v60;
      uint64_t v61 = type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
      *uint64_t v60 = v0;
      v60[1] = CustomIntentExecutionFlow.execute();
      return AceServiceInvokerAsync.submit<A>(_:)(v51, v59, v61, v58);
    default:
      uint64_t v18 = *(void *)(v0 + 352);
      static ExecuteResponse.complete()();
      outlined destroy of CustomIntentExecutionFlow.State(v18);
LABEL_41:
      OUTLINED_FUNCTION_9_22();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_18_0();
      return v80();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 384) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = CustomIntentExecutionFlow.execute();
  }
  else
  {

    uint64_t v7 = CustomIntentExecutionFlow.execute();
  }
  return _swift_task_switch(v7, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static WFDialogState.shared + 248))();
  OUTLINED_FUNCTION_26_14();

  uint64_t v1 = OUTLINED_FUNCTION_12_2();
  v2(v1);
  OUTLINED_FUNCTION_9_22();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  void *v0;
  void *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v2))
  {
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v3, v4, "CustomIntentExecutionFlow error submitting empty dialog");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_26_14();
  uint64_t v5 = OUTLINED_FUNCTION_12_2();
  v6(v5);
  OUTLINED_FUNCTION_9_22();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

uint64_t implicit closure #3 in implicit closure #2 in CustomIntentExecutionFlow.execute()()
{
  return CustomIntentExecutionFlow.processScreentimeCheckCompletion(guardFlowResult:)();
}

uint64_t specialized static RCHChildFlowProducersAsync.forCustomIntents(voiceCommandName:originDevice:runner:siriEnvironment:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9 = type metadata accessor for CATOption();
  __chkstk_darwin(v9 - 8);
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for INIntentResponse);
  RCHChildFlowProducersAsync.init()();
  type metadata accessor for ModeInfoProvider();
  swift_allocObject();
  id v31 = ModeInfoProvider.init()();
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v35);
  type metadata accessor for RunCustomIntentCATs();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for CustomIntentNeedsValueFlowStrategy();
  swift_allocObject();
  *(void *)&v35[0] = CustomIntentNeedsValueFlowStrategy.init(deviceState:catWrapper:catWrapperSimple:)(v35, v10, v11);
  lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentNeedsValueFlowStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INIntent, INIntentResponse>);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v35);
  swift_bridgeObjectRetain();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v12 = CATWrapper.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v30 = type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v16 = ResponseFactory.init()();
  type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
  uint64_t v17 = swift_allocObject();
  *(void *)&v35[0] = specialized CustomIntentNeedsConfirmationFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:responseFactory:)(a1, a2, a5, (uint64_t)v35, v12, v13, v14, v15, v16, v17);
  lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentNeedsConfirmationFlowStrategy and conformance CustomIntentNeedsConfirmationFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v35);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy();
  uint64_t v19 = swift_allocObject();
  *(void *)&v35[0] = specialized CustomIntentNeedsDisambiguationFlowStrategy.init(voiceCommandName:deviceState:modeInfoProvider:siriEnvironment:runCustomIntentCatWrapperSimple:)(a1, a2, (uint64_t)v35, (uint64_t)v31, a5, v18, v19);
  lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentNeedsDisambiguationFlowStrategy and conformance CustomIntentNeedsDisambiguationFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentNeedsDisambiguationFlowStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v35);
  type metadata accessor for CustomIntentUnsupportedValueFlowStrategy();
  swift_allocObject();
  *(void *)&v35[0] = CustomIntentUnsupportedValueFlowStrategy.init(deviceState:)((uint64_t)v35);
  lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentUnsupportedValueFlowStrategy and conformance CustomIntentUnsupportedValueFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentUnsupportedValueFlowStrategy);
  static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v35);
  type metadata accessor for CustomIntentConfirmIntentFlowStrategy(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  *(void *)&v35[0] = CustomIntentConfirmIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)(a1, a2, a5, (uint64_t)v35);
  lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentConfirmIntentFlowStrategy and conformance CustomIntentConfirmIntentFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentConfirmIntentFlowStrategy);
  static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)();
  swift_release();
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v35);
  type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  *(void *)&v35[0] = CustomIntentHandleIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)(a1, a2, a5, (uint64_t)v35);
  lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentHandleIntentFlowStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  __swift_project_boxed_opaque_existential_1(a6, a6[3]);
  if (dispatch thunk of DeviceState.isHomePod.getter())
  {
    outlined init with copy of DeviceState(a4, (uint64_t)v35);
    outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v33);
    type metadata accessor for CustomIntentContinueInAppWithDialogStrategy();
    swift_allocObject();
    *(void *)&v35[0] = CustomIntentContinueInAppWithDialogStrategy.init(runner:deviceState:)(v35, (uint64_t)v33);
    lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentContinueInAppWithDialogStrategy and conformance CustomIntentContinueInAppWithDialogStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentContinueInAppWithDialogStrategy);
    static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithHandoffToCompanionProducer<A>(strategy:)();
    swift_release();
    uint64_t v20 = v30;
  }
  else
  {
    outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v35);
    type metadata accessor for ContinueInAppCATWrapperSimple();
    memset(v33, 0, sizeof(v33));
    uint64_t v34 = 0;
    swift_allocObject();
    outlined init with copy of DeviceState?((uint64_t)v33, (uint64_t)v32);
    swift_bridgeObjectRetain();
    swift_retain();
    SiriKitFlowCATWrapperSimple.init(deviceState:)();
    uint64_t v22 = v21;
    outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)v33, &demangling cache variable for type metadata for DeviceState?);
    uint64_t v20 = v30;
    swift_allocObject();
    uint64_t v23 = ResponseFactory.init()();
    type metadata accessor for CustomIntentContinueInAppFlowStrategy();
    uint64_t v24 = swift_allocObject();
    *(void *)&v35[0] = specialized CustomIntentContinueInAppFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:continueInAppCATWrapperSimple:responseFactory:)(a1, a2, a5, (uint64_t)v35, v22, v23, v24);
    lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentContinueInAppFlowStrategy and conformance CustomIntentContinueInAppFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentContinueInAppFlowStrategy);
    static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)();
    swift_release();
  }
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v35);
  swift_allocObject();
  uint64_t v25 = ResponseFactory.init()();
  type metadata accessor for CustomIntentTCCFlowStrategy();
  uint64_t v26 = (void *)swift_allocObject();
  v26[10] = &type metadata for EnableTCCLabelsProvider;
  v26[11] = &protocol witness table for EnableTCCLabelsProvider;
  v26[15] = v20;
  v26[16] = &protocol witness table for ResponseFactory;
  v26[12] = v25;
  outlined init with take of AceServiceInvokerAsync(v35, (uint64_t)(v26 + 2));
  *(void *)&v35[0] = v26;
  lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentTCCFlowStrategy and conformance CustomIntentTCCFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentTCCFlowStrategy);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  return swift_release();
}

uint64_t CustomIntentExecutionFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t CustomIntentExecutionFlow.isReadRequest(intent:intentResponse:deviceState:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InteractionType();
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_51_0();
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v25[-1] - v14;
  uint64_t v16 = *(void *)(CustomIntentExecutionFlow.getReadItems(intent:intentResponse:)(a1, a2) + 16);
  swift_bridgeObjectRelease();
  outlined init with copy of DeviceState(a3, (uint64_t)v29);
  if (v16)
  {
    OUTLINED_FUNCTION_6_18(v29);
    char v17 = dispatch thunk of DeviceState.isWatch.getter();
    outlined init with copy of DeviceState((uint64_t)v29, (uint64_t)v28);
    if (v17)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
      outlined init with copy of DeviceState((uint64_t)v29, (uint64_t)v27);
    }
    else
    {
      OUTLINED_FUNCTION_6_18(v28);
      char v19 = dispatch thunk of DeviceState.isCarPlay.getter();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
      outlined init with copy of DeviceState((uint64_t)v29, (uint64_t)v27);
      if ((v19 & 1) == 0)
      {
        OUTLINED_FUNCTION_6_18(v27);
        char v21 = dispatch thunk of DeviceState.isHomePod.getter();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
        outlined init with copy of DeviceState((uint64_t)v29, (uint64_t)v26);
        if ((v21 & 1) == 0)
        {
          OUTLINED_FUNCTION_6_18(v26);
          char v22 = dispatch thunk of DeviceState.isEyesFree.getter();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
          outlined init with copy of DeviceState((uint64_t)v29, (uint64_t)v25);
          if ((v22 & 1) == 0)
          {
            __swift_project_boxed_opaque_existential_1(v25, v25[3]);
            dispatch thunk of DeviceState.interactionType.getter();
            (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v12, enum case for InteractionType.dialogDriven(_:), v6);
            char v18 = specialized == infix<A>(_:_:)();
            uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
            v23(v12, v6);
            v23((uint64_t)v15, v6);
            goto LABEL_9;
          }
LABEL_8:
          char v18 = 1;
LABEL_9:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
          goto LABEL_10;
        }
LABEL_7:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
        outlined init with copy of DeviceState((uint64_t)v29, (uint64_t)v25);
        goto LABEL_8;
      }
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
    outlined init with copy of DeviceState((uint64_t)v29, (uint64_t)v26);
    goto LABEL_7;
  }
  char v18 = 0;
LABEL_10:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  return v18 & 1;
}

uint64_t CustomIntentExecutionFlow.getReadItems(intent:intentResponse:)(void *a1, void *a2)
{
  if (!a2) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  id v3 = a2;
  uint64_t v4 = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(v3);
  if (!v4)
  {

    return (uint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v5 = v4;
  id v6 = [a1 typeName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  uint64_t v35 = v3;
  INIntentResponse.localizedResponseTemplate(intentName:)(v10);
  type metadata accessor for CATSpeakableString();
  uint64_t v11 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v13 = 0;
  uint64_t v37 = v5 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v5 + 64);
  int64_t v38 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v40 = v11;
  uint64_t v34 = v11 + 9;
  char v17 = &type metadata for AnyHashable;
  char v18 = &type metadata for String;
  uint64_t v39 = v5;
  while (v16)
  {
    unint64_t v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v20 = v19 | (v13 << 6);
LABEL_8:
    outlined init with copy of AnyHashable(*(void *)(v5 + 48) + 40 * v20, (uint64_t)&v45);
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v47 + 8);
LABEL_27:
    outlined init with take of Input?((uint64_t)&v45, (uint64_t)&v49, &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
    if (!*((void *)&v50 + 1))
    {
      swift_bridgeObjectRelease();
      swift_release();

      return (uint64_t)_swiftEmptyArrayStorage;
    }
    outlined init with take of Any(&v52, v44);
    long long v45 = v49;
    long long v46 = v50;
    *(void *)&v47[0] = v51;
    if (swift_dynamicCast())
    {
      int64_t v41 = v13;
      uint64_t v24 = v18;
      uint64_t v25 = v17;
      uint64_t v26 = v40[2];
      if (v26)
      {
        BOOL v27 = v40[4] == v42 && v40[5] == v43;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v44);
          goto LABEL_45;
        }
        if (v26 != 1)
        {
          if (v40[6] == v42 && v40[7] == v43) {
            goto LABEL_44;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            goto LABEL_44;
          }
          if (v26 != 2)
          {
            uint64_t v29 = v34;
            uint64_t v30 = 2;
            do
            {
              uint64_t v31 = v30 + 1;
              if (__OFADD__(v30, 1)) {
                goto LABEL_61;
              }
              if (*(v29 - 1) == v42 && *v29 == v43) {
                goto LABEL_44;
              }
              uint64_t v36 = v30;
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result) {
                goto LABEL_44;
              }
              v29 += 2;
              uint64_t v30 = v36 + 1;
            }
            while (v31 != v26);
          }
        }
      }
      swift_bridgeObjectRelease();
      outlined init with take of Any(v44, &v45);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        swift_bridgeObjectRelease();

        uint64_t v33 = v42;
        swift_release();
        return v33;
      }
LABEL_45:
      uint64_t v5 = v39;
      char v17 = v25;
      char v18 = v24;
      int64_t v13 = v41;
    }
    else
    {
      uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v44);
    }
  }
  int64_t v21 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v21 >= v38)
  {
LABEL_26:
    unint64_t v16 = 0;
    uint64_t v48 = 0;
    memset(v47, 0, sizeof(v47));
    long long v45 = 0u;
    long long v46 = 0u;
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v21);
  if (v22)
  {
LABEL_12:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v21 << 6);
    int64_t v13 = v21;
    goto LABEL_8;
  }
  int64_t v23 = v13 + 2;
  ++v13;
  if (v21 + 1 >= v38) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v23);
  if (v22) {
    goto LABEL_15;
  }
  int64_t v13 = v21 + 1;
  if (v21 + 2 >= v38) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v37 + 8 * (v21 + 2));
  if (v22)
  {
    v21 += 2;
    goto LABEL_12;
  }
  int64_t v23 = v21 + 3;
  int64_t v13 = v21 + 2;
  if (v21 + 3 >= v38) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v23);
  if (v22)
  {
LABEL_15:
    int64_t v21 = v23;
    goto LABEL_12;
  }
  while (1)
  {
    int64_t v21 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v21 >= v38)
    {
      int64_t v13 = v38 - 1;
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v21);
    ++v23;
    if (v22) {
      goto LABEL_12;
    }
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t CustomIntentExecutionFlow.processCustomIntentConversionResult(conversionResult:)(void *a1, char a2)
{
  type metadata accessor for CustomIntentExecutionFlow.State(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_51_0();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  Swift::String v10 = (uint64_t *)((char *)&v24 - v9);
  if (a2)
  {
    *Swift::String v10 = (uint64_t)a1;
    OUTLINED_FUNCTION_27_15();
    outlined init with take of CustomIntentExecutionFlow.State((uint64_t)v10, v7);
    OUTLINED_FUNCTION_23_6();
    swift_errorRetain();
    uint64_t v13 = OUTLINED_FUNCTION_75();
  }
  else
  {
    id v11 = a1;
    outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v11, (SEL *)&selRef_launchId);
    if (v12)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      char v17 = Logger.logObject.getter();
      if (os_log_type_enabled(v17, v16))
      {
        char v18 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)char v18 = 0;
        _os_log_impl(&dword_0, v17, v16, "No launchId found in INIntent", v18, 2u);
        OUTLINED_FUNCTION_7_0();
      }

      lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
      uint64_t v19 = OUTLINED_FUNCTION_9_6();
      *unint64_t v20 = 0;
      *Swift::String v10 = v19;
      OUTLINED_FUNCTION_27_15();
      outlined init with take of CustomIntentExecutionFlow.State((uint64_t)v10, v7);
      OUTLINED_FUNCTION_23_6();
      uint64_t v21 = OUTLINED_FUNCTION_19();
      outlined assign with take of CustomIntentExecutionFlow.State(v21, v22);
      swift_endAccess();
    }
    *Swift::String v10 = (uint64_t)v11;
    swift_storeEnumTagMultiPayload();
    outlined init with take of CustomIntentExecutionFlow.State((uint64_t)v10, v7);
    OUTLINED_FUNCTION_23_6();
    uint64_t v13 = OUTLINED_FUNCTION_19();
  }
  outlined assign with take of CustomIntentExecutionFlow.State(v13, v14);
  return swift_endAccess();
}

uint64_t CustomIntentExecutionFlow.processCustomIntentExecutionResult(executionResult:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CustomIntentExecutionFlow.State(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_51_0();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  Swift::String v10 = (void *)((char *)v45 - v9);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_20_0();
  char v17 = (void *)(v16 - v15);
  char v18 = *(void (**)(void))(v13 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v16 - v15, a1, v11);
  int v19 = (*(uint64_t (**)(void *, uint64_t))(v13 + 88))(v17, v11);
  if (v19 == enum case for RCHFlowResult.complete<A, B>(_:))
  {
    v45[0] = a1;
    v45[1] = v3;
    v45[2] = v7;
    uint64_t v20 = OUTLINED_FUNCTION_22_17();
    v21(v20);
    uint64_t v22 = v17[1];
    int64_t v23 = (void *)v17[2];
    swift_release();
    uint64_t v24 = v1;
    uint64_t v25 = (void *)(v1 + 24);
    uint64_t v26 = v23;
    char v27 = CustomIntentExecutionFlow.isReadRequest(intent:intentResponse:deviceState:)(v22, v23, v1 + 24);

    if (v27)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (intent: INIntent, intentResponse: INIntentResponse, exitValue: RCHFlowResult<INIntent, INIntentResponse>));
      *Swift::String v10 = (uint64_t)v22;
      v10[1] = (uint64_t)v26;
      OUTLINED_FUNCTION_8_16();
      v18();
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_20_20();
      uint64_t v28 = v24 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
LABEL_20:
      OUTLINED_FUNCTION_23_6();
      uint64_t v32 = (uint64_t)v18;
      goto LABEL_21;
    }
    if ([v26 _intentResponseCode] == &dword_4)
    {
      type metadata accessor for CustomIntentExecutionFlow(0);
      lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow, (void (*)(uint64_t))type metadata accessor for CustomIntentExecutionFlow);
      SiriEnvironmentLocating<>.siriEnvironment.getter();
      char v33 = static CustomIntentExecutionFlow.isSkippingWaitForDone(intent:deviceState:siriEnvironment:)(v22, v25);
      swift_release();
      if (v33)
      {

        OUTLINED_FUNCTION_8_16();
        v18();
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_20_20();
        uint64_t v28 = v24 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
        goto LABEL_20;
      }
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      int64_t v41 = OUTLINED_FUNCTION_26_1(v40, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl(&dword_0, v41, v42, "CustomIntentExecutionFlow setting state to wait for done.", v43, 2u);
        OUTLINED_FUNCTION_7_0();
        uint64_t v44 = v26;
      }
      else
      {
        uint64_t v44 = v41;
        int64_t v41 = v22;
        uint64_t v22 = v26;
      }

      OUTLINED_FUNCTION_8_16();
      v18();
    }
    else
    {

      OUTLINED_FUNCTION_8_16();
      v18();
    }
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_20_20();
    uint64_t v28 = v24 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
    goto LABEL_20;
  }
  if (v19 == enum case for RCHFlowResult.error<A, B>(_:))
  {
    uint64_t v29 = OUTLINED_FUNCTION_22_17();
    v30(v29);
    char v31 = *((unsigned char *)v17 + 8);
    *Swift::String v10 = *v17;
    *((unsigned char *)v10 + 8) = v31;
    swift_storeEnumTagMultiPayload();
    outlined init with take of CustomIntentExecutionFlow.State((uint64_t)v10, v7);
    uint64_t v28 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
    OUTLINED_FUNCTION_23_6();
    uint64_t v32 = v7;
LABEL_21:
    uint64_t v35 = v28;
    goto LABEL_22;
  }
  if (v19 != enum case for RCHFlowResult.cancelled<A, B>(_:))
  {
    lazy protocol witness table accessor for type RunVoiceShortcutFlowErrors and conformance RunVoiceShortcutFlowErrors();
    uint64_t v36 = OUTLINED_FUNCTION_9_6();
    *uint64_t v37 = 0;
    *Swift::String v10 = v36;
    *((unsigned char *)v10 + 8) = 0;
    swift_storeEnumTagMultiPayload();
    outlined init with take of CustomIntentExecutionFlow.State((uint64_t)v10, v7);
    uint64_t v38 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
    OUTLINED_FUNCTION_23_6();
    outlined assign with take of CustomIntentExecutionFlow.State(v7, v38);
    swift_endAccess();
    return (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v17, v11);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state;
  OUTLINED_FUNCTION_23_6();
  uint64_t v32 = (uint64_t)v10;
  uint64_t v35 = v34;
LABEL_22:
  outlined assign with take of CustomIntentExecutionFlow.State(v32, v35);
  return swift_endAccess();
}

uint64_t static CustomIntentExecutionFlow.isSkippingWaitForDone(intent:deviceState:siriEnvironment:)(void *a1, void *a2)
{
  id v4 = [a1 typeName];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  if (v5 == 0xD000000000000051 && v7 == 0x8000000000226870) {
    goto LABEL_6;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v8) {
    goto LABEL_7;
  }
  id v9 = [a1 typeName];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (v10 == 0xD00000000000005ALL && v12 == 0x8000000000228250)
  {
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0 && !INIntent.shouldSupressIntentResponseDialog()())
    {
      type metadata accessor for CustomIntentsDialogTemplating();
      if ((static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(a1) & 1) == 0)
      {
        id v21 = [a1 _metadata];
        if (v21)
        {
          uint64_t v22 = v21;
          unsigned int v23 = [v21 showsWhenRun];

          if (v23)
          {
            type metadata accessor for CustomIntentSnippetProvider();
            if (static CustomIntentSnippetProvider.isDoneButtonEligible(deviceState:intent:siriEnvironment:)(a2, a1))
            {
              if (one-time initialization token for voiceCommands != -1) {
                swift_once();
              }
              uint64_t v24 = type metadata accessor for Logger();
              uint64_t v14 = (void *)OUTLINED_FUNCTION_26_1(v24, (uint64_t)static Logger.voiceCommands);
              os_log_type_t v25 = static os_log_type_t.debug.getter();
              if (!OUTLINED_FUNCTION_34_9(v25))
              {
                uint64_t v19 = 0;
                goto LABEL_28;
              }
              *(_WORD *)OUTLINED_FUNCTION_33() = 0;
              OUTLINED_FUNCTION_25_11(&dword_0, v26, v27, "#CustomIntentExecutionFlow isSkippingWaitForDone - will wait for done; button present");
              uint64_t v19 = 0;
              goto LABEL_12;
            }
          }
        }
      }
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      uint64_t v14 = (void *)OUTLINED_FUNCTION_26_1(v28, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v29 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_34_9(v29))
      {
        *(_WORD *)OUTLINED_FUNCTION_33() = 0;
        char v18 = "#CustomIntentExecutionFlow isSkippingWaitForDone - skipping wait for done";
        goto LABEL_11;
      }
LABEL_27:
      uint64_t v19 = 1;
      goto LABEL_28;
    }
  }
LABEL_7:
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = (void *)OUTLINED_FUNCTION_26_1(v13, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (!OUTLINED_FUNCTION_34_9(v15)) {
    goto LABEL_27;
  }
  *(_WORD *)OUTLINED_FUNCTION_33() = 0;
  char v18 = "#CustomIntentExecutionFlow isSkippingWaitForDone - skipping wait for done due to smart prompt";
LABEL_11:
  OUTLINED_FUNCTION_25_11(&dword_0, v16, v17, v18);
  uint64_t v19 = 1;
LABEL_12:
  OUTLINED_FUNCTION_7_0();
LABEL_28:

  return v19;
}

uint64_t CustomIntentExecutionFlow.processScreentimeCheckCompletion(guardFlowResult:)()
{
  uint64_t result = static GuardFlowResult.== infix(_:_:)();
  if (result) {
    *(unsigned char *)(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appBlockedByScreentime) = 1;
  }
  return result;
}

uint64_t CustomIntentExecutionFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 120);
  outlined destroy of CustomIntentExecutionFlow.State(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_state);
  outlined destroy of SiriWorkflowRunnerEvent?(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_input, &demangling cache variable for type metadata for Input?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin25CustomIntentExecutionFlow_appPolicyHandler);
  return v0;
}

uint64_t CustomIntentExecutionFlow.__deallocating_deinit()
{
  CustomIntentExecutionFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance CustomIntentExecutionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance CustomIntentExecutionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))();
}

uint64_t protocol witness for Flow.execute() in conformance CustomIntentExecutionFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 272) + **(int **)(**(void **)v1 + 272));
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *id v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance CustomIntentExecutionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

void outlined bridged method (mbnn) of @objc _INPBIntentMetadata.intentId.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setIntentId:v4];
}

uint64_t outlined assign with take of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CustomIntentExecutionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustomIntentExecutionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of CustomIntentExecutionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustomIntentExecutionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CustomIntentExecutionFlow(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for CustomIntentExecutionFlow);
}

uint64_t lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in CustomIntentExecutionFlow.execute()()
{
  return implicit closure #3 in implicit closure #2 in CustomIntentExecutionFlow.execute()();
}

uint64_t sub_BA140()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _s11SiriKitFlow05GuardC6ResultOIegy_ACIegn_TRTA_0(unsigned __int8 *a1)
{
  return thunk for @escaping @callee_guaranteed (@unowned GuardFlowResult) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t base witness table accessor for Flow in CustomIntentExecutionFlow()
{
  return lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow, (void (*)(uint64_t))type metadata accessor for CustomIntentExecutionFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in CustomIntentExecutionFlow()
{
  return lazy protocol witness table accessor for type RunCustomIntentReadingDelegate and conformance RunCustomIntentReadingDelegate(&lazy protocol witness table cache variable for type CustomIntentExecutionFlow and conformance CustomIntentExecutionFlow, (void (*)(uint64_t))type metadata accessor for CustomIntentExecutionFlow);
}

uint64_t ObjC metadata update function for CustomIntentExecutionFlow()
{
  return type metadata accessor for CustomIntentExecutionFlow(0);
}

void type metadata completion function for CustomIntentExecutionFlow()
{
  type metadata accessor for CustomIntentExecutionFlow.State(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for Input?()
{
  if (!lazy cache variable for type metadata for Input?)
  {
    type metadata accessor for Input();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Input?);
    }
  }
}

char *initializeBufferWithCopyOfBuffer for CustomIntentExecutionFlow.State(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    id v9 = *(char **)a2;
    *(void *)a1 = *(void *)a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v7 = *(char **)a2;
        *(void *)a1 = *(void *)a2;
        char v8 = v7;
        goto LABEL_9;
      case 2u:
      case 5u:
      case 6u:
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        goto LABEL_9;
      case 3u:
        uint64_t v10 = *(char **)a2;
        swift_errorRetain();
        *(void *)a1 = v10;
        a1[8] = a2[8];
        goto LABEL_9;
      case 4u:
        uint64_t v11 = *(char **)a2;
        uint64_t v12 = (void *)*((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v12;
        uint64_t v13 = v11;
        id v14 = v12;
        uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (intent: INIntent, intentResponse: INIntentResponse, exitValue: RCHFlowResult<INIntent, INIntentResponse>))
                     + 64);
        uint64_t v16 = &a1[v15];
        uint64_t v17 = &a2[v15];
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for CustomIntentExecutionFlow.State(id *a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      id v2 = *a1;

      break;
    case 2u:
    case 5u:
    case 6u:
      goto LABEL_9;
    case 3u:
      swift_errorRelease();
      break;
    case 4u:

      a1 = (id *)((char *)a1
                + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (intent: INIntent, intentResponse: INIntentResponse, exitValue: RCHFlowResult<INIntent, INIntentResponse>))
                         + 64));
LABEL_9:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      uint64_t v4 = *(void (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    default:
      return;
  }
}

char *initializeWithCopy for CustomIntentExecutionFlow.State(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      uint64_t v6 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v7 = v6;
      goto LABEL_7;
    case 2u:
    case 5u:
    case 6u:
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
      goto LABEL_7;
    case 3u:
      char v8 = *(void **)a2;
      swift_errorRetain();
      *(void *)a1 = v8;
      a1[8] = a2[8];
      goto LABEL_7;
    case 4u:
      id v9 = *(void **)a2;
      uint64_t v10 = (void *)*((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v10;
      id v11 = v9;
      id v12 = v10;
      uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (intent: INIntent, intentResponse: INIntentResponse, exitValue: RCHFlowResult<INIntent, INIntentResponse>))
                   + 64);
      id v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithCopy for CustomIntentExecutionFlow.State(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CustomIntentExecutionFlow.State((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v6 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v7 = v6;
        goto LABEL_8;
      case 2u:
      case 5u:
      case 6u:
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
        goto LABEL_8;
      case 3u:
        char v8 = *(void **)a2;
        swift_errorRetain();
        *(void *)a1 = v8;
        a1[8] = a2[8];
        goto LABEL_8;
      case 4u:
        id v9 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        uint64_t v10 = (void *)*((void *)a2 + 1);
        *((void *)a1 + 1) = v10;
        id v11 = v9;
        id v12 = v10;
        uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (intent: INIntent, intentResponse: INIntentResponse, exitValue: RCHFlowResult<INIntent, INIntentResponse>))
                     + 64);
        id v14 = &a1[v13];
        uint64_t v15 = &a2[v13];
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for CustomIntentExecutionFlow.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
    case 5u:
    case 6u:
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      goto LABEL_5;
    case 4u:
      *a1 = *a2;
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (intent: INIntent, intentResponse: INIntentResponse, exitValue: RCHFlowResult<INIntent, INIntentResponse>))
                  + 64);
      id v7 = (char *)a1 + v6;
      char v8 = (char *)a2 + v6;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *assignWithTake for CustomIntentExecutionFlow.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CustomIntentExecutionFlow.State((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
      case 5u:
      case 6u:
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        goto LABEL_6;
      case 4u:
        *a1 = *a2;
        uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (intent: INIntent, intentResponse: INIntentResponse, exitValue: RCHFlowResult<INIntent, INIntentResponse>))
                    + 64);
        id v7 = (char *)a1 + v6;
        char v8 = (char *)a2 + v6;
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
LABEL_6:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void type metadata completion function for CustomIntentExecutionFlow.State()
{
  uint64_t v3 = "\b";
  uint64_t v4 = (char *)&value witness table for Builtin.UnknownObject + 64;
  type metadata accessor for RCHFlowResult<INIntent, INIntentResponse>();
  if (v1 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v0 - 8) + 64;
    uint64_t v6 = &unk_2162E8;
    swift_getTupleTypeLayout3();
    id v7 = &v2;
    uint64_t v8 = v5;
    uint64_t v9 = v5;
    swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for RCHFlowResult<INIntent, INIntentResponse>()
{
  if (!lazy cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>)
  {
    type metadata accessor for NSError(255, (unint64_t *)&lazy cache variable for type metadata for INIntent);
    type metadata accessor for NSError(255, &lazy cache variable for type metadata for INIntentResponse);
    unint64_t v0 = type metadata accessor for RCHFlowResult();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RCHFlowResult<INIntent, INIntentResponse>);
    }
  }
}

uint64_t outlined init with copy of DeviceState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceState?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of Input?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_19();
  v5(v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_6_18(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_9_22()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_12_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_20()
{
  uint64_t v3 = *(void *)(v1 - 112);
  return outlined init with take of CustomIntentExecutionFlow.State(v0, v3);
}

void OUTLINED_FUNCTION_21_12()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_22_17()
{
  return v0;
}

void OUTLINED_FUNCTION_25_11(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 2u);
}

uint64_t OUTLINED_FUNCTION_26_14()
{
  return static ExecuteResponse.complete()();
}

uint64_t OUTLINED_FUNCTION_27_15()
{
  *(unsigned char *)(v0 + 8) = 0;
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_29_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_36_8()
{
  return v0;
}

void static ShortcutDoneButtonConverter.toShortcutDoneButton(userData:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_25;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x614E746E65746E69, 0xEA0000000000656DLL);
  if ((v5 & 1) == 0) {
    goto LABEL_25;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v25);
  if ((OUTLINED_FUNCTION_0_17() & 1) == 0) {
    goto LABEL_25;
  }
  specialized Dictionary.subscript.getter(0x6144746E65746E69, 0xEA00000000006174, a1, &v25);
  if (!v26)
  {
    swift_bridgeObjectRelease();
LABEL_24:
    outlined destroy of Any?((uint64_t)&v25);
    goto LABEL_25;
  }
  if ((OUTLINED_FUNCTION_0_17() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    id v8 = 0;
    goto LABEL_26;
  }
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = (id)INIntentCreate();

  if (!v8)
  {
    OUTLINED_FUNCTION_1_20();
    uint64_t v13 = 0;
    unint64_t v14 = 0;
LABEL_26:
    id v11 = 0;
LABEL_27:
    uint64_t v12 = 0;
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_3_21((uint64_t)"intentResponseName", v15, v17, v19, v22, v25);
  if (!v26)
  {
    OUTLINED_FUNCTION_1_20();
LABEL_23:

    goto LABEL_24;
  }
  if ((OUTLINED_FUNCTION_0_17() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_20();
LABEL_30:

    goto LABEL_25;
  }
  OUTLINED_FUNCTION_3_21((uint64_t)"intentResponseData", v16, v18, v20, v23, v25);
  if (!v26)
  {
    OUTLINED_FUNCTION_1_20();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if ((OUTLINED_FUNCTION_0_17() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_20();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v10 = Data._bridgeToObjectiveC()().super.isa;
  id v11 = (id)INIntentResponseCreate();

  if (!v11)
  {
    OUTLINED_FUNCTION_1_20();

    outlined consume of Data._Representation(v21, v24);
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    id v8 = 0;
    goto LABEL_27;
  }
  specialized Dictionary.subscript.getter(0x6449707061, 0xE500000000000000, a1, &v25);
  if (!v26)
  {
    OUTLINED_FUNCTION_1_20();

    outlined consume of Data._Representation(v21, v24);
    goto LABEL_24;
  }
  if ((OUTLINED_FUNCTION_0_17() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_20();

    outlined consume of Data._Representation(v21, v24);
    goto LABEL_25;
  }
  type metadata accessor for App();
  uint64_t v12 = App.__allocating_init(appIdentifier:)();
  specialized Dictionary.subscript.getter(0x776F6C666B726F77, 0xEC000000656D614ELL, a1, &v25);
  OUTLINED_FUNCTION_1_20();
  outlined consume of Data._Representation(v21, v24);
  if (!v26)
  {
    outlined destroy of Any?((uint64_t)&v25);
    goto LABEL_35;
  }
  if ((OUTLINED_FUNCTION_0_17() & 1) == 0)
  {
LABEL_35:
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    goto LABEL_28;
  }
  uint64_t v13 = v21;
  unint64_t v14 = v24;
LABEL_28:
  *a2 = v13;
  a2[1] = v14;
  a2[2] = (uint64_t)v8;
  a2[3] = (uint64_t)v11;
  a2[4] = v12;
}

id static ShortcutDoneButtonConverter.toUserData(shortcutDoneButton:)(uint64_t *a1)
{
  uint64_t v58 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v5 = *a1;
    *((void *)&v57 + 1) = &type metadata for String;
    *(void *)&long long v56 = v5;
    *((void *)&v56 + 1) = v4;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v56);
  }
  NSString v6 = (void *)a1[3];
  id v7 = (id)a1[2];
  id v8 = v6;
  outlined bridged method (ob) of @objc PBCodable.data.getter([v7 backingStore]);
  if (v9 >> 60 != 15)
  {
    id v10 = OUTLINED_FUNCTION_5_16();
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    *((void *)&v57 + 1) = &type metadata for String;
    *((void *)&v56 + 1) = v13;
    uint64_t v21 = OUTLINED_FUNCTION_4_19(v14, v15, 0xEA0000000000656DLL, v16, v17, v18, v19, v20, v11);
    uint64_t v22 = specialized Dictionary.subscript.setter((uint64_t)v21);
    *((void *)&v57 + 1) = &type metadata for Data;
    *((void *)&v56 + 1) = v2;
    uint64_t v30 = OUTLINED_FUNCTION_4_19(v22, v23, v24, v25, v26, v27, v28, v29, v1);
    specialized Dictionary.subscript.setter((uint64_t)v30);
  }
  id result = objc_msgSend(v8, "backingStore", v56);
  if (result)
  {
    outlined bridged method (ob) of @objc PBCodable.data.getter(result);
    if (v32 >> 60 != 15)
    {
      id v33 = OUTLINED_FUNCTION_5_16();
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      *(void *)&long long v56 = v34;
      *((void *)&v56 + 1) = v36;
      swift_bridgeObjectRetain();
      v37._countAndFlagsBits = 0x65736E6F70736552;
      v37._object = (void *)0xE800000000000000;
      String.append(_:)(v37);
      uint64_t v38 = swift_bridgeObjectRelease();
      *((void *)&v57 + 1) = &type metadata for String;
      uint64_t v46 = OUTLINED_FUNCTION_2_20(v38, v39, v40, v41, v42, v43, v44, v45, v56);
      *((void *)&v57 + 1) = &type metadata for Data;
      *((void *)&v56 + 1) = v2;
      OUTLINED_FUNCTION_2_20(v46, v47, v48, v49, v50, v51, v52, v53, v1);
    }
    swift_retain();
    uint64_t v54 = App.appIdentifier.getter();
    if (v55)
    {
      *((void *)&v57 + 1) = &type metadata for String;
      *(void *)&long long v56 = v54;
      *((void *)&v56 + 1) = v55;
    }
    else
    {
      long long v56 = 0u;
      long long v57 = 0u;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v56);

    swift_release();
    return (id)v58;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ShortcutDoneButton.app.getter()
{
  return swift_retain();
}

uint64_t outlined bridged method (ob) of @objc PBCodable.data.getter(void *a1)
{
  id v2 = [a1 data];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t destroy for ShortcutDoneButton(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void *initializeWithCopy for ShortcutDoneButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  id v6 = v4;
  id v7 = v5;
  swift_retain();
  return a1;
}

void *assignWithCopy for ShortcutDoneButton(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  id v7 = (void *)a2[3];
  id v8 = (void *)a1[3];
  a1[3] = v7;
  id v9 = v7;

  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ShortcutDoneButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShortcutDoneButton(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShortcutDoneButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShortcutDoneButton()
{
  return &type metadata for ShortcutDoneButton;
}

ValueMetadata *type metadata accessor for ShortcutDoneButtonConverter()
{
  return &type metadata for ShortcutDoneButtonConverter;
}

uint64_t OUTLINED_FUNCTION_0_17()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_1_20()
{
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_2_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized Dictionary.subscript.setter((uint64_t)&a9);
}

double OUTLINED_FUNCTION_3_21@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long a6)
{
  return specialized Dictionary.subscript.getter(0xD000000000000012, (a1 - 32) | 0x8000000000000000, v6, &a6);
}

uint64_t *OUTLINED_FUNCTION_4_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

id OUTLINED_FUNCTION_5_16()
{
  uint64_t v3 = *(const char **)(v0 + 376);
  return [v1 v3];
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ActivityKit0D10DescriptorVG_SSs5NeverOTg5026_s18SiriLinkFlowPlugin0B15d101ManagerC39fetchCurrentSessionOrCreateNewAssertion33_440D70ECFAB3F2F5E3414E511436AFF0LLyyFSS0E3Kit0E10F54Vcfu_33_919fc3da43e078a76f371169505c2454AHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = *(void *)(type metadata accessor for ActivityDescriptor() - 8);
    uint64_t v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = ActivityDescriptor.id.getter();
      uint64_t v8 = v7;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      if (v9 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      id v10 = (char *)&_swiftEmptyArrayStorage[2 * v9];
      *((void *)v10 + 4) = v6;
      *((void *)v10 + 5) = v8;
      v4 += v5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t LinkActivityManager.__allocating_init(bundleId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  LinkActivityManager.init(bundleId:)(a1, a2);
  return v4;
}

void *LinkActivityManager.init(bundleId:)(uint64_t a1, uint64_t a2)
{
  v2[2] = _swiftEmptyArrayStorage;
  v2[3] = 0;
  type metadata accessor for LinkActivityManager.AtomicSessionResult();
  uint64_t v5 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v5 + 112) = _swiftEmptyArrayStorage;
  v2[4] = v5;
  v2[5] = a1;
  v2[6] = a2;
  LinkActivityManager.fetchCurrentSessionOrCreateNewAssertion()();
  return v2;
}

uint64_t type metadata accessor for LinkActivityManager.AtomicSessionResult()
{
  return self;
}

uint64_t LinkActivityManager.sessionIDString()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = LinkActivityManager.sessionIDString();
  return LinkActivityManager.sessionID()();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = *v0;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(v4, v2);
}

void LinkActivityManager.fetchCurrentSessionOrCreateNewAssertion()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProcessDescriptor?);
  __chkstk_darwin(v2 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActivityAttributesType?);
  __chkstk_darwin(v6 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for ActivityPredicate();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_0();
  type metadata accessor for ActivityCenter();
  static ActivityCenter.shared.getter();
  uint64_t v11 = type metadata accessor for ActivityAttributesType();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v11);
  swift_bridgeObjectRetain();
  ProcessDescriptor.init(identifier:)();
  uint64_t v12 = type metadata accessor for ProcessDescriptor();
  __swift_storeEnumTagSinglePayload(v5, 0, 1, v12);
  ActivityPredicate.init(attributesType:owner:)();
  uint64_t v13 = dispatch thunk of ActivityCenter.descriptors(matching:)();
  uint64_t v14 = OUTLINED_FUNCTION_3_22();
  v15(v14);
  swift_release();
  if (*(void *)(v13 + 16))
  {
    NewAssertion33_440D70ECFAB3F2F5E3414E511436AFF0LLyyFSS0E3Kit0E10F54Vcfu_33_919fc3da43e078a76f371169505c2454AHSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ActivityKit0D10DescriptorVG_SSs5NeverOTg5026_s18SiriLinkFlowPlugin0B15d101ManagerC39fetchCurrentSessionOrCreateNewAssertion33_440D70ECFAB3F2F5E3414E511436AFF0LLyyFSS0E3Kit0E10F54Vcfu_33_919fc3da43e078a76f371169505c2454AHSSTf3nnnpk_nTf1cn_n(v13);
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v21 = Array.description.getter();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v18, v19, "LinkActivityManager: Fetched current session: %s", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    *(void *)(v1 + 16) = NewAssertion33_440D70ECFAB3F2F5E3414E511436AFF0LLyyFSS0E3Kit0E10F54Vcfu_33_919fc3da43e078a76f371169505c2454AHSSTf3nnnpk_nTf1cn_n;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_0, v25, v26, "LinkActivityManager: no current session, taking assertion...", v27, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    LinkActivityManager.takeSessionAssertion()();
  }
}

uint64_t LinkActivityManager.sessionID()()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(LinkActivityManager.sessionID(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;
  void *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v1 = v0[3];
  if (*(void *)(*(void *)(v1 + 16) + 16))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v6 = Array.description.getter();
      uint64_t v8 = v7;
      swift_bridgeObjectRelease();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v3, v4, "LinkActivityManager: Returning one of active session IDs in: %s", v5, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_release_n();
    }

    if (*(void *)(*(void *)(v1 + 16) + 16)) {
      swift_bridgeObjectRetain();
    }
    uint64_t v10 = OUTLINED_FUNCTION_5_17();
    return v11(v10);
  }
  else
  {
    uint64_t v9 = *(void *)(v1 + 32);
    v0[4] = v9;
    swift_retain();
    return _swift_task_switch(LinkActivityManager.sessionID(), v9, 0);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 40) = *(void *)(*(void *)(v0 + 32) + 112);
  swift_bridgeObjectRetain();
  swift_release();
  return _swift_task_switch(LinkActivityManager.sessionID(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v2, v3, "LinkActivityManager: Returning one of assertion session IDs in: %s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (*(void *)(*(void *)(v0 + 40) + 16)) {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = OUTLINED_FUNCTION_5_17();
  return v9(v8);
}

void LinkActivityManager.takeSessionAssertion()()
{
  uint64_t v1 = v0;
  type metadata accessor for SNAAssertionTarget();
  swift_bridgeObjectRetain();
  id v2 = SNAAssertionTarget.__allocating_init(bundleIdentifier:)();
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  id v4 = objc_allocWithZone((Class)SNAAssertion);
  id v5 = @nonobjc SNAAssertion.init(explanation:target:invalidateOnSessionRequest:invalidationHandler:)(0xD000000000000036, 0x8000000000228450, v2, 1, (uint64_t)partial apply for closure #1 in LinkActivityManager.takeSessionAssertion(), v3);
  uint64_t v6 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = v5;
}

id SNAAssertionTarget.__allocating_init(bundleIdentifier:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithBundleIdentifier:v1];

  return v2;
}

uint64_t closure #1 in LinkActivityManager.takeSessionAssertion()(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "Got assertion", v10, 2u);
    swift_slowDealloc();
  }

  if (a2)
  {
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v32 = a1;
      id v33 = v6;
      uint64_t v13 = swift_slowAlloc();
      v35[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v15 = *(void *)(Strong + 40);
        unint64_t v16 = *(void *)(Strong + 48);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        uint64_t v15 = 0x7974706D65;
        unint64_t v16 = 0xE500000000000000;
      }
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2080;
      uint64_t v34 = a2;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v11, v12, "Failed to take an assertion for app %s with error: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      a1 = v32;
      uint64_t v6 = v33;
    }
    else
    {
      swift_errorRelease();
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v33 = v6;
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      v35[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v19 = 136315138;
      swift_beginAccess();
      uint64_t v20 = swift_weakLoadStrong();
      if (v20)
      {
        uint64_t v21 = *(void *)(v20 + 40);
        unint64_t v22 = *(void *)(v20 + 48);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        uint64_t v21 = 0x7974706D65;
        unint64_t v22 = 0xE500000000000000;
      }
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v17, v18, "Took SessionKit assertion for app: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v6 = v33;
    }
    else
    {

      swift_release_n();
    }
  }
  swift_beginAccess();
  uint64_t v25 = swift_weakLoadStrong();
  if (v25)
  {
    uint64_t v26 = *(void *)(v25 + 32);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v26 = 0;
  }
  uint64_t v27 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v27);
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = 0;
  void v28[3] = 0;
  v28[4] = v26;
  v28[5] = a1;
  id v29 = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5();
  return swift_release();
}

uint64_t closure #1 in closure #1 in LinkActivityManager.takeSessionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return _swift_task_switch(closure #1 in closure #1 in LinkActivityManager.takeSessionAssertion(), 0, 0);
}

uint64_t closure #1 in closure #1 in LinkActivityManager.takeSessionAssertion()()
{
  OUTLINED_FUNCTION_9_0();
  if (*(void *)(v0 + 24))
  {
    id v1 = [*(id *)(v0 + 32) sessionIdentifiers];
    *(void *)(v0 + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v2 = *(void *)(v0 + 24);
    return _swift_task_switch(closure #1 in closure #1 in LinkActivityManager.takeSessionAssertion(), v2, 0);
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  LinkActivityManager.AtomicSessionResult.set(result:)(*(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  return _swift_task_switch(closure #1 in closure #1 in LinkActivityManager.takeSessionAssertion(), 0, 0);
}

{
  uint64_t v0;

  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 24) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LinkActivityManager.AtomicSessionResult.set(result:)(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t LinkActivityManager.AtomicSessionResult.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t LinkActivityManager.AtomicSessionResult.unownedExecutor.getter()
{
  return v0;
}

uint64_t LinkActivityManager.deinit()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1) {
    [v1 invalidate];
  }
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LinkActivityManager.__deallocating_deinit()
{
  LinkActivityManager.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LinkActivityManager()
{
  return self;
}

unint64_t type metadata accessor for SNAAssertionTarget()
{
  unint64_t result = lazy cache variable for type metadata for SNAAssertionTarget;
  if (!lazy cache variable for type metadata for SNAAssertionTarget)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SNAAssertionTarget);
  }
  return result;
}

uint64_t sub_BD540()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in LinkActivityManager.takeSessionAssertion()(void *a1, uint64_t a2)
{
  return closure #1 in LinkActivityManager.takeSessionAssertion()(a1, a2);
}

id @nonobjc SNAAssertion.init(explanation:target:invalidateOnSessionRequest:invalidationHandler:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a5)
  {
    v16[4] = a5;
    v16[5] = a6;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    _OWORD v16[2] = thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ();
    v16[3] = &block_descriptor_5;
    uint64_t v13 = _Block_copy(v16);
    swift_release();
  }
  else
  {
    uint64_t v13 = 0;
  }
  id v14 = [v7 initWithExplanation:v12 target:a3 invalidateOnSessionRequest:a4 & 1 invalidationHandler:v13];

  _Block_release(v13);
  return v14;
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_BD69C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in LinkActivityManager.takeSessionAssertion()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy;
  return closure #1 in closure #1 in LinkActivityManager.takeSessionAssertion()(a1, v4, v5, v7, v6);
}

uint64_t OUTLINED_FUNCTION_3_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_17()
{
  return v0;
}

Swift::String __swiftcall LNConfirmationActionName.toIntentVerb()()
{
  uint64_t v1 = (char *)[v0 type] - 3;
  uint64_t v2 = (void *)0xE200000000000000;
  uint64_t v3 = 28516;
  switch((unint64_t)v1)
  {
    case 0uLL:
      break;
    case 1uLL:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 7239026;
      break;
    case 2uLL:
      uint64_t v3 = 28519;
      break;
    case 3uLL:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 2003134838;
      break;
    case 4uLL:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1852141679;
      break;
    case 5uLL:
      uint64_t v2 = (void *)0xE500000000000000;
      uint64_t v3 = 0x726564726FLL;
      break;
    case 6uLL:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1802465122;
      break;
    case 7uLL:
      uint64_t v2 = (void *)0xE300000000000000;
      unsigned __int16 v4 = 24944;
      goto LABEL_11;
    case 8uLL:
      uint64_t v2 = (void *)0xE300000000000000;
      unsigned __int16 v4 = 30050;
LABEL_11:
      uint64_t v3 = v4 | 0x790000u;
      break;
    case 9uLL:
      uint64_t v2 = (void *)0xE700000000000000;
      uint64_t v3 = 0x74736575716572;
      break;
    case 0xAuLL:
      uint64_t v2 = (void *)0xEF6E6F6974616769;
      uint64_t v3 = 0x76616E7472617473;
      break;
    case 0xBuLL:
      uint64_t v2 = (void *)0xE500000000000000;
      uint64_t v3 = 0x6572616873;
      break;
    case 0xCuLL:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1953722224;
      break;
    case 0xDuLL:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1684956531;
      break;
    case 0xEuLL:
      uint64_t v2 = (void *)0xE600000000000000;
      uint64_t v3 = 0x657461657263;
      break;
    case 0xFuLL:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 6579297;
      break;
    case 0x10uLL:
      uint64_t v2 = (void *)0xE600000000000000;
      uint64_t v3 = 0x686372616573;
      break;
    case 0x11uLL:
      uint64_t v3 = 1684957542;
      uint64_t v2 = (void *)0xE400000000000000;
      break;
    case 0x12uLL:
      uint64_t v2 = (void *)0xE600000000000000;
      uint64_t v3 = 0x7265746C6966;
      break;
    case 0x13uLL:
      uint64_t v2 = (void *)0xE600000000000000;
      uint64_t v3 = 0x656C67676F74;
      break;
    case 0x14uLL:
      uint64_t v2 = (void *)0xE700000000000000;
      uint64_t v5 = 0x6F206E727574;
      goto LABEL_29;
    case 0x15uLL:
      uint64_t v2 = (void *)0xE800000000000000;
      uint64_t v3 = 0x66666F206E727574;
      break;
    case 0x16uLL:
      uint64_t v3 = 7628147;
      uint64_t v2 = (void *)0xE300000000000000;
      break;
    case 0x17uLL:
      uint64_t v2 = (void *)0xE800000000000000;
      uint64_t v3 = 0x64616F6C6E776F64;
      break;
    case 0x18uLL:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 7628135;
      break;
    case 0x19uLL:
      uint64_t v2 = (void *)0xE700000000000000;
      uint64_t v5 = 0x696B63656863;
LABEL_29:
      uint64_t v3 = v5 & 0xFFFFFFFFFFFFLL | 0x6E000000000000;
      break;
    case 0x1AuLL:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 6778732;
      break;
    case 0x1BuLL:
      uint64_t v2 = (void *)0xE700000000000000;
      uint64_t v3 = 0x61746164646461;
      break;
    case 0x1CuLL:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1819042147;
      break;
    case 0x1DuLL:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 2036427888;
      break;
    case 0x1EuLL:
      uint64_t v2 = (void *)0xEA0000000000646ELL;
      uint64_t v3 = 0x756F732079616C70;
      break;
    default:
      uint64_t v3 = 0;
      uint64_t v2 = (void *)0xE000000000000000;
      break;
  }
  result._object = v2;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t WFRunVoiceShortcutFlow.__allocating_init(deviceState:appPolicyHandler:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1(a2, *(void *)(a2 + 24));
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v3);
  uint64_t v5 = OUTLINED_FUNCTION_10_17(v4, v9);
  v6(v5);
  uint64_t v7 = OUTLINED_FUNCTION_33_10();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v7;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance WFRunVoiceShortcutFlowError()
{
  return EnablementMode.hashValue.getter(*v0);
}

uint64_t ShortcutIdentification.getIdentifyingName(vcClient:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v8 = (char *)&async function pointer to specialized ShortcutIdentification.getIdentifyingName(vcClient:)
     + async function pointer to specialized ShortcutIdentification.getIdentifyingName(vcClient:);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = ShortcutIdentification.getIdentifyingName(vcClient:);
  return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v8)(v5, v0, v3, v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_14_7();
  return v4(v3);
}

uint64_t WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)(uint64_t a1, uint64_t a2)
{
  __swift_mutable_project_boxed_opaque_existential_1(a2, *(void *)(a2 + 24));
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v3);
  uint64_t v5 = OUTLINED_FUNCTION_10_17(v4, v9);
  v6(v5);
  uint64_t v7 = OUTLINED_FUNCTION_33_10();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  return v7;
}

uint64_t WFRunVoiceShortcutFlow.on(input:)(uint64_t a1)
{
  uint64_t v103 = type metadata accessor for VoiceCommandsNLIntent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_50_1();
  uint64_t v101 = v3;
  OUTLINED_FUNCTION_23_14();
  uint64_t v102 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_12_1();
  uint64_t v100 = v4;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_50_1();
  uint64_t v99 = v6;
  uint64_t v7 = OUTLINED_FUNCTION_23_14();
  uint64_t v8 = type metadata accessor for WFRunVoiceShortcutFlow.State(v7);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_20_0();
  NSString v12 = (uint64_t *)(v11 - v10);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VoiceCommandTask?);
  uint64_t v14 = OUTLINED_FUNCTION_16(v13);
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_20_0();
  uint64_t v17 = v16 - v15;
  uint64_t v98 = type metadata accessor for ShortcutIdentification(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_50_1();
  uint64_t v93 = v19;
  OUTLINED_FUNCTION_23_14();
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v95 = v21;
  uint64_t v96 = v20;
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_50_1();
  uint64_t v94 = v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v24 = OUTLINED_FUNCTION_16(v23);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v97 = (uint64_t)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v108 = (char *)&v89 - v27;
  OUTLINED_FUNCTION_23_14();
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v109 = v29;
  uint64_t v110 = v28;
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_50_1();
  uint64_t v107 = v30;
  OUTLINED_FUNCTION_23_14();
  uint64_t v31 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v105 = v32;
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_50_1();
  uint64_t v106 = v34;
  OUTLINED_FUNCTION_23_14();
  type metadata accessor for Input();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v35);
  OUTLINED_FUNCTION_20_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.voiceCommands);
  uint64_t v111 = a1;
  OUTLINED_FUNCTION_59_0();
  v37();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = OUTLINED_FUNCTION_25_2();
    long long v92 = v12;
    uint64_t v41 = (uint8_t *)v40;
    uint64_t v42 = OUTLINED_FUNCTION_22_3();
    uint64_t v90 = v17;
    v113[0] = v42;
    uint64_t v91 = v8;
    *(_DWORD *)uint64_t v41 = 136315138;
    uint64_t v89 = v31;
    uint64_t v43 = Input.description.getter();
    uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v113);
    uint64_t v31 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v45 = OUTLINED_FUNCTION_38_9();
    v46(v45);
    _os_log_impl(&dword_0, v38, v39, "#WFRunVoiceShortcutFlow on input: %s", v41, 0xCu);
    swift_arrayDestroy();
    uint64_t v17 = v90;
    OUTLINED_FUNCTION_7_0();
    NSString v12 = v92;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v47 = OUTLINED_FUNCTION_38_9();
    v48(v47);
  }

  uint64_t v49 = v106;
  Input.parse.getter();
  uint64_t v50 = v105;
  uint64_t v51 = OUTLINED_FUNCTION_75();
  int v53 = v52(v51);
  uint64_t v54 = (uint64_t)v108;
  if (v53 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v55 = OUTLINED_FUNCTION_37_9();
    v56(v55);
    uint64_t v58 = v99;
    uint64_t v57 = v100;
    uint64_t v59 = v102;
    OUTLINED_FUNCTION_73();
    v60();
    uint64_t v61 = v101;
    OUTLINED_FUNCTION_59_0();
    v62();
    if (one-time initialization token for voiceCommandNameNode != -1) {
      swift_once();
    }
    _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
    IntentNodeTraversable.value<A>(forNode:)();
    uint64_t v64 = v113[0];
    uint64_t v63 = v113[1];
    outlined destroy of VoiceCommandsNLIntent(v61, (void (*)(void))type metadata accessor for VoiceCommandsNLIntent);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v59);
    if (v63)
    {
      *NSString v12 = v64;
      v12[1] = v63;
      swift_storeEnumTagMultiPayload();
    }
    goto LABEL_15;
  }
  if (v53 == enum case for Parse.uso(_:))
  {
    uint64_t v65 = OUTLINED_FUNCTION_37_9();
    v66(v65);
    OUTLINED_FUNCTION_73();
    v67();
    USOParse.userParse.getter();
    uint64_t v68 = Siri_Nlu_External_UserParse.userDialogActs.getter();
    OUTLINED_FUNCTION_66();
    v69();
    specialized Collection.first.getter(v68, v54);
    swift_bridgeObjectRelease();
    uint64_t v70 = v97;
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v54, v97, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v71 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    if (__swift_getEnumTagSinglePayload(v70, 1, v71) == 1)
    {
      outlined destroy of SiriWorkflowRunnerEvent?(v54, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v72 = OUTLINED_FUNCTION_30_10();
      v73(v72);
      uint64_t v74 = OUTLINED_FUNCTION_30_0();
      outlined destroy of SiriWorkflowRunnerEvent?(v74, v75);
      uint64_t v76 = type metadata accessor for VoiceCommandTask(0);
      __swift_storeEnumTagSinglePayload(v17, 1, 1, v76);
LABEL_17:
      outlined destroy of SiriWorkflowRunnerEvent?(v17, &demangling cache variable for type metadata for VoiceCommandTask?);
      return 0;
    }
    Siri_Nlu_External_UserDialogAct.convertToVoiceCommandTask()();
    outlined destroy of SiriWorkflowRunnerEvent?(v54, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v84 = OUTLINED_FUNCTION_30_10();
    v85(v84);
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_66();
    v86();
    uint64_t v87 = type metadata accessor for VoiceCommandTask(0);
    if (__swift_getEnumTagSinglePayload(v17, 1, v87) == 1) {
      goto LABEL_17;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v88 = v93;
      outlined init with take of ShortcutIdentification(v17, v93, (void (*)(void))type metadata accessor for ShortcutIdentification);
      outlined init with take of ShortcutIdentification(v88, (uint64_t)v12, (void (*)(void))type metadata accessor for ShortcutIdentification);
LABEL_15:
      swift_storeEnumTagMultiPayload();
      uint64_t v82 = v104 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
      OUTLINED_FUNCTION_23_6();
      outlined assign with take of WFRunVoiceShortcutFlow.State((uint64_t)v12, v82);
      swift_endAccess();
      return 1;
    }
    outlined destroy of VoiceCommandsNLIntent(v17, (void (*)(void))type metadata accessor for VoiceCommandTask);
  }
  else
  {
    lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError();
    uint64_t v77 = OUTLINED_FUNCTION_9_6();
    *uint64_t v78 = 0;
    *NSString v12 = v77;
    swift_storeEnumTagMultiPayload();
    uint64_t v79 = v50;
    uint64_t v80 = v49;
    uint64_t v81 = v104 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
    OUTLINED_FUNCTION_23_6();
    outlined assign with take of WFRunVoiceShortcutFlow.State((uint64_t)v12, v81);
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v80, v31);
  }
  return 0;
}

uint64_t WFRunVoiceShortcutFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[53] = v2;
  v1[54] = v0;
  uint64_t v3 = type metadata accessor for DateTimeResolver();
  v1[55] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[56] = v4;
  v1[57] = OUTLINED_FUNCTION_13_0();
  v1[58] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v5);
  v1[59] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for ShortcutIdentification(0);
  OUTLINED_FUNCTION_16(v6);
  v1[60] = OUTLINED_FUNCTION_25();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  OUTLINED_FUNCTION_16(v7);
  v1[61] = OUTLINED_FUNCTION_13_0();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v1[65] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[66] = v9;
  v1[67] = OUTLINED_FUNCTION_13_0();
  v1[68] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for WFRunVoiceShortcutFlow.State(0);
  v1[69] = v10;
  OUTLINED_FUNCTION_16(v10);
  v1[70] = OUTLINED_FUNCTION_13_0();
  v1[71] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 600) = v3;
  *(void *)(v1 + 608) = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(void);
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned char *v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  unsigned char v29[40];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v32 = v0;
  if (*(void *)(v0 + 608))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    __swift_project_value_buffer(*(void *)(v0 + 520), (uint64_t)static Logger.voiceCommands);
    uint64_t v1 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_23_0(&dword_0, v3, v4, "#WFRunVoiceShortcutFlow has shortcut name, moving onto WorkflowRunnerFlow");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v25 = *(_OWORD *)(v0 + 600);

    *(_OWORD *)(v0 + 16) = v25;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
    *(unsigned char *)(v0 + 80) = 0;
    uint64_t v28 = 0;
    memset(v27, 0, sizeof(v27));
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 456);
    uint64_t v6 = *(void *)(v0 + 464);
    uint64_t v8 = *(void *)(v0 + 440);
    uint64_t v7 = *(void *)(v0 + 448);
    uint64_t v26 = *(void *)(v0 + 480);
    uint64_t v24 = static WFDialogState.shared;
    swift_retain();
    static AceService.currentAsync.getter();
    static Device.current.getter();
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for RunCustomIntentCATs();
    OUTLINED_FUNCTION_49_5();
    uint64_t v23 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATs();
    OUTLINED_FUNCTION_49_5();
    uint64_t v22 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATsSimple();
    OUTLINED_FUNCTION_49_5();
    uint64_t v9 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
    OUTLINED_FUNCTION_49_5();
    uint64_t v10 = CATWrapper.__allocating_init(options:globals:)();
    static AceService.currentAsync.getter();
    type metadata accessor for LocationProvider();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = 0x3FA999999999999ALL;
    outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 168), v11 + 24);
    DateTimeResolver.init()();
    uint64_t v12 = (char *)objc_allocWithZone((Class)type metadata accessor for WorkflowRunnerFlow(0));
    OUTLINED_FUNCTION_59_0();
    v13();
    swift_retain();
    uint64_t v14 = specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)(v0 + 16, (uint64_t)v27, v24, (uint64_t)v29, (uint64_t)&v30, (uint64_t)&v31, v23, v22, v9, v10, (uint64_t)closure #1 in variable initialization expression of static SLFLocationAccessGuardProvider.makeGuardFlow, 0, v11, v5, (uint64_t)closure #1 in variable initialization expression of LinkRCHFlowFactory.getFlow, 0, v12);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_release();
    *(void *)(v0 + 384) = v14;
    _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_0(&lazy protocol witness table cache variable for type WorkflowRunnerFlow and conformance WorkflowRunnerFlow, (void (*)(uint64_t))type metadata accessor for WorkflowRunnerFlow);
    static ExecuteResponse.complete<A>(next:)();
    outlined destroy of VoiceCommandsNLIntent(v26, (void (*)(void))type metadata accessor for ShortcutIdentification);
  }
  else
  {
    uint64_t v15 = *(uint64_t **)(v0 + 560);
    uint64_t v16 = *(void *)(v0 + 480);
    uint64_t v17 = *(void *)(v0 + 432) + *(void *)(v0 + 576);
    lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError();
    uint64_t v18 = OUTLINED_FUNCTION_9_6();
    uint8_t *v19 = 4;
    *uint64_t v15 = v18;
    OUTLINED_FUNCTION_75();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_23_6();
    outlined assign with take of WFRunVoiceShortcutFlow.State((uint64_t)v15, v17);
    swift_endAccess();
    static ExecuteResponse.complete()();
    outlined destroy of VoiceCommandsNLIntent(v16, (void (*)(void))type metadata accessor for ShortcutIdentification);
  }
  OUTLINED_FUNCTION_14_11();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v20();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 624) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  uint64_t v1 = v0[15];
  __swift_project_boxed_opaque_existential_1(v0 + 11, v0[14]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[79] = v2;
  *uint64_t v2 = v0;
  v2[1] = WFRunVoiceShortcutFlow.execute();
  uint64_t v3 = OUTLINED_FUNCTION_75();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v3, v4, v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 640) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

void WFRunVoiceShortcutFlow.execute()()
{
  uint64_t v58 = v0;
  uint64_t v56 = (uint64_t)(v0 + 44);
  uint64_t v53 = (uint64_t)(v0 + 43);
  uint64_t v55 = (uint64_t)(v0 + 47);
  uint64_t v1 = v0[71];
  uint64_t v2 = v0[54];
  uint64_t v3 = OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
  v0[72] = OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
  uint64_t v4 = v2 + v3;
  swift_beginAccess();
  outlined init with copy of WFRunVoiceShortcutFlow.State(v4, v1, (void (*)(void))type metadata accessor for WFRunVoiceShortcutFlow.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of ShortcutIdentification(v0[71], v0[60], (void (*)(void))type metadata accessor for ShortcutIdentification);
      type metadata accessor for VoiceShortcutClientWrapper();
      v0[73] = swift_initStackObject();
      uint64_t v8 = (void *)swift_task_alloc();
      v0[74] = v8;
      *uint64_t v8 = v0;
      v8[1] = WFRunVoiceShortcutFlow.execute();
      OUTLINED_FUNCTION_2_1();
      __asm { BR              X2 }
      return;
    case 2u:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[65], (uint64_t)static Logger.voiceCommands);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_25_2();
        uint64_t v57 = OUTLINED_FUNCTION_22_3();
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_getErrorValue();
        uint64_t v14 = Error.localizedDescription.getter();
        v0[47] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v11, v12, "#WFRunVoiceShortcutFlo in error state, error: %s", v13, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      static ExecuteResponse.complete()();
      swift_errorRelease();
      goto LABEL_28;
    case 3u:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v16 = v0[68];
      uint64_t v17 = v0[66];
      uint64_t v18 = v0[65];
      uint64_t v20 = v0[63];
      uint64_t v19 = v0[64];
      uint64_t v21 = __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
      v22(v16, v21, v18);
      v22(v19, v16, v18);
      OUTLINED_FUNCTION_28_11(v19);
      outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v19, v20, &demangling cache variable for type metadata for Logger?);
      if (__swift_getEnumTagSinglePayload(v20, 1, v18) == 1)
      {
        outlined destroy of SiriWorkflowRunnerEvent?(v0[63], &demangling cache variable for type metadata for Logger?);
        goto LABEL_37;
      }
      os_log_type_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = OUTLINED_FUNCTION_22_3();
        uint64_t v57 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 136315650;
        uint64_t v42 = StaticString.description.getter();
        v0[50] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_23_9();
        v0[51] = 105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v41 + 22) = 2080;
        v0[52] = OUTLINED_FUNCTION_44_4((uint64_t)"VoiceShortcutFlow.swift", v50, v51, v52, v53, v55, v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_0, v39, v40, "FatalError at %s:%lu - %s", (uint8_t *)v41, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      goto LABEL_36;
    case 4u:
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      v0[77] = v23;
      *uint64_t v23 = v24;
      v23[1] = WFRunVoiceShortcutFlow.execute();
      OUTLINED_FUNCTION_2_1();
      WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName()();
      return;
    case 5u:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v26 = v0[67];
      uint64_t v27 = v0[66];
      uint64_t v28 = v0[65];
      uint64_t v30 = v0[61];
      uint64_t v29 = v0[62];
      uint64_t v31 = __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
      uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
      v32(v26, v31, v28);
      v32(v29, v26, v28);
      OUTLINED_FUNCTION_28_11(v29);
      outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v29, v30, &demangling cache variable for type metadata for Logger?);
      if (__swift_getEnumTagSinglePayload(v30, 1, v28) == 1)
      {
        outlined destroy of SiriWorkflowRunnerEvent?(v0[61], &demangling cache variable for type metadata for Logger?);
      }
      else
      {
        os_log_type_t v39 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v44))
        {
          uint64_t v45 = OUTLINED_FUNCTION_22_3();
          uint64_t v57 = swift_slowAlloc();
          *(_DWORD *)uint64_t v45 = 136315650;
          uint64_t v46 = StaticString.description.getter();
          v0[46] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_23_9();
          v0[45] = 128;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v45 + 22) = 2080;
          uint64_t v48 = OUTLINED_FUNCTION_44_4((uint64_t)"tion\"8@\"NSError\"16", v50, v51, v52, v53, v55, v56);
          *uint64_t v54 = v48;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_0, v39, v44, "FatalError at %s:%lu - %s", (uint8_t *)v45, 0x20u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
LABEL_36:

        OUTLINED_FUNCTION_2_6();
        v49();
      }
LABEL_37:
      static SiriKitLifecycle._logCrashToEventBus(_:)();
      _assertionFailure(_:_:file:line:flags:)();
      OUTLINED_FUNCTION_2_1();
      return;
    case 6u:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[65], (uint64_t)static Logger.voiceCommands);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        OUTLINED_FUNCTION_23_0(&dword_0, v35, v36, "#WFRunVoiceShortcutFlow completed, exiting");
        OUTLINED_FUNCTION_7_0();
      }

      static ExecuteResponse.complete()();
      goto LABEL_28;
    default:
      uint64_t v5 = v0[71];
      uint64_t v6 = v0[54];
      v0[49] = WFRunVoiceShortcutFlow.makeGuardFlows()();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WFRunVoiceShortcutFlow.execute();
      *(void *)(v7 + 24) = v6;
      type metadata accessor for GuardFlow();
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      swift_release();
      outlined destroy of VoiceCommandsNLIntent(v5, (void (*)(void))type metadata accessor for ShortcutIdentification);
LABEL_28:
      OUTLINED_FUNCTION_14_11();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_2_1();
      __asm { BRAA            X1, X16 }
      return;
  }
}

uint64_t WFRunVoiceShortcutFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = v14[70];
  uint64_t v16 = v14[54] + v14[72];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v14 + 11));
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of WFRunVoiceShortcutFlow.State(v15, v16);
  swift_endAccess();
  static ExecuteResponse.ongoing(requireInput:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v14 + 16));
  OUTLINED_FUNCTION_6_19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_3();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_31_8();
  uint64_t v16 = OUTLINED_FUNCTION_9_6();
  OUTLINED_FUNCTION_24_13(v16, v17);
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of WFRunVoiceShortcutFlow.State(v14, v15);
  swift_endAccess();
  static ExecuteResponse.complete()();
  swift_errorRelease();
  OUTLINED_FUNCTION_6_19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_3();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned char *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  __swift_destroy_boxed_opaque_existential_1Tm(v15 + 128);
  __swift_destroy_boxed_opaque_existential_1Tm(v15 + 88);
  OUTLINED_FUNCTION_31_8();
  uint64_t v17 = OUTLINED_FUNCTION_9_6();
  OUTLINED_FUNCTION_24_13(v17, v18);
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of WFRunVoiceShortcutFlow.State(v14, v16);
  swift_endAccess();
  static ExecuteResponse.complete()();
  swift_errorRelease();
  OUTLINED_FUNCTION_6_19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_3();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14);
}

uint64_t WFRunVoiceShortcutFlow.makeGuardFlows()()
{
  outlined init with copy of DeviceState(v0 + 72, (uint64_t)&v6);
  static Device.current.getter();
  uint64_t v1 = type metadata accessor for WFScreentimeCheckFlowStrategy();
  swift_allocObject();
  uint64_t v2 = WFScreentimeCheckFlowStrategy.init(appPolicyHandler:bundleId:deviceState:)(&v6, 0xD000000000000013, 0x8000000000225330, &v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
  type metadata accessor for CommonFlowGuard();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_212170;
  static CommonFlowGuard.disallowInSharingMode.getter();
  uint64_t v7 = v1;
  uint64_t v8 = _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type WFScreentimeCheckFlowStrategy and conformance WFScreentimeCheckFlowStrategy, (void (*)(uint64_t))type metadata accessor for WFScreentimeCheckFlowStrategy);
  *(void *)&long long v6 = v2;
  swift_retain();
  static CommonFlowGuard.ensuringAppIsPermittedByScreentime(using:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v6);
  uint64_t v3 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t implicit closure #2 in implicit closure #1 in WFRunVoiceShortcutFlow.execute()(char a1)
{
  return WFRunVoiceShortcutFlow.onGuardFlowsFinished(exitValue:)(a1 & 1);
}

uint64_t WFRunVoiceShortcutFlow.onGuardFlowsFinished(exitValue:)(char a1)
{
  uint64_t v3 = type metadata accessor for WFRunVoiceShortcutFlow.State(0);
  uint64_t v4 = __chkstk_darwin(v3);
  long long v6 = (uint64_t *)&v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v26[-v7];
  uint64_t v9 = type metadata accessor for ShortcutIdentification(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state;
  swift_beginAccess();
  outlined init with copy of WFRunVoiceShortcutFlow.State(v12, (uint64_t)v8, (void (*)(void))type metadata accessor for WFRunVoiceShortcutFlow.State);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of VoiceCommandsNLIntent((uint64_t)v8, (void (*)(void))type metadata accessor for WFRunVoiceShortcutFlow.State);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#WFRunVoiceShortcutFlow onGuardFlowsFinished unexpected state", v16, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError();
    uint64_t v17 = swift_allocError();
    *uint64_t v18 = 2;
    *long long v6 = v17;
  }
  else
  {
    outlined init with take of ShortcutIdentification((uint64_t)v8, (uint64_t)v11, (void (*)(void))type metadata accessor for ShortcutIdentification);
    if (a1)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_0, v20, v21, "#WFRunVoiceShortcutFlow guard flow check failed", v22, 2u);
        swift_slowDealloc();
      }

      lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError();
      uint64_t v23 = swift_allocError();
      *uint64_t v24 = 3;
      outlined destroy of VoiceCommandsNLIntent((uint64_t)v11, (void (*)(void))type metadata accessor for ShortcutIdentification);
      *long long v6 = v23;
    }
    else
    {
      outlined init with take of ShortcutIdentification((uint64_t)v11, (uint64_t)v6, (void (*)(void))type metadata accessor for ShortcutIdentification);
    }
  }
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of WFRunVoiceShortcutFlow.State((uint64_t)v6, v12);
  return swift_endAccess();
}

uint64_t WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for DialogPhase();
  v1[5] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[6] = v5;
  v1[7] = OUTLINED_FUNCTION_13_0();
  v1[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest();
  v1[9] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[10] = v7;
  v1[11] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[12] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[13] = v9;
  v1[14] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  v1[15] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[16] = v11;
  v1[17] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  void *v7;
  uint64_t *v9;
  uint64_t *boxed_opaque_existential_1;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  (*(void (**)(void))(**(void **)(v0[3] + 24) + 224))();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v5 = OUTLINED_FUNCTION_75();
  v6(v5);
  if (v4)
  {
    uint64_t v14 = (uint64_t (*)(void))(*(void *)(**(void **)(v0[3] + 16) + 288)
                            + **(int **)(**(void **)(v0[3] + 16) + 288));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[18] = v7;
    void *v7 = v0;
    v7[1] = WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName();
    return v14();
  }
  else
  {
    uint64_t v9 = (uint64_t *)v0[2];
    v9[3] = type metadata accessor for AceOutput();
    v9[4] = (uint64_t)&protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[24] = v11;
    *uint64_t v11 = v12;
    v11[1] = WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName();
    uint64_t v13 = v0[17];
    return WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:)((uint64_t)boxed_opaque_existential_1, v13);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 152) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 160) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void (*v7)(void);
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = v0[16];
  uint64_t v17 = v0[17];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[6];
  os_log_type_t v15 = v0[5];
  uint64_t v16 = v0[15];
  uint64_t v5 = v0[4];
  static DialogPhase.confirmed.getter();
  uint64_t v6 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_59_0();
  v7();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v15);
  OutputGenerationManifest.canUseServerTTS.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v17, v16);
  OUTLINED_FUNCTION_28_11(v5);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[21] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_211C70;
  *(void *)(v8 + 32) = v1;
  uint64_t v19 = v8;
  specialized Array._endMutation()();
  v0[22] = v19;
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
                                                          + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
  uint64_t v9 = v1;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[23] = v10;
  *uint64_t v10 = v11;
  v10[1] = WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName();
  uint64_t v12 = v0[11];
  uint64_t v13 = v0[2];
  return v18(v13, v19, v12);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 128);

  uint64_t v2 = OUTLINED_FUNCTION_30_0();
  v3(v2);
  uint64_t v4 = *(void *)(v0 + 136);
  OUTLINED_FUNCTION_52_1();
  (*(void (**)(uint64_t))(v1 + 8))(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 200) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void *)(v0 + 136);
  OUTLINED_FUNCTION_52_1();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void *)(v0 + 16);
  OUTLINED_FUNCTION_2_6();
  v2();
  __swift_deallocate_boxed_opaque_existential_1(v1);
  OUTLINED_FUNCTION_35_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_2_6();
  v0();
  OUTLINED_FUNCTION_35_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t WFRunVoiceShortcutFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  return _swift_task_switch(WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:), 0, 0);
}

uint64_t WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)(v0[9] + 16) + 296)
                                       + **(int **)(**(void **)(v0[9] + 16) + 296));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[14] = v1;
  void *v1 = v2;
  v1[1] = WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:);
  uint64_t v3 = v0[13];
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WFRunVoiceShortcutFlow.makeOutputForPromptForShortcutName_prerfv2(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v16 = *(void *)(v14 + 96);
  uint64_t v15 = *(void *)(v14 + 104);
  uint64_t v17 = *(void *)(v14 + 80);
  uint64_t v30 = *(void *)(v14 + 88);
  uint64_t v18 = *(void *)(v14 + 64);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v14 + 72) + 32), *(void *)(*(void *)(v14 + 72) + 56));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v19 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v17, v18, v19);
  __swift_storeEnumTagSinglePayload(v17, 0, 1, v19);
  *(void *)(v14 + 48) = 0;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of SiriWorkflowRunnerEvent?(v14 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of SiriWorkflowRunnerEvent?(v17, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_3();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, v14 + 16, a10, v30, a12, a13, a14);
}

uint64_t WFRunVoiceShortcutFlow.deinit()
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  outlined destroy of VoiceCommandsNLIntent(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin22WFRunVoiceShortcutFlow_state, (void (*)(void))type metadata accessor for WFRunVoiceShortcutFlow.State);
  return v0;
}

uint64_t WFRunVoiceShortcutFlow.__deallocating_deinit()
{
  WFRunVoiceShortcutFlow.deinit();
  OUTLINED_FUNCTION_17_15();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance WFRunVoiceShortcutFlow(uint64_t a1)
{
  return WFRunVoiceShortcutFlow.on(input:)(a1) & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFRunVoiceShortcutFlow()
{
  return WFRunVoiceShortcutFlow.execute(completion:)();
}

uint64_t protocol witness for Flow.execute() in conformance WFRunVoiceShortcutFlow()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return WFRunVoiceShortcutFlow.execute()();
}

id specialized WorkflowRunnerFlow.init(workflowRunnerInput:workflowRunner:dialogState:aceServiceInvoker:deviceState:outputPublisher:runCustomCatWrapper:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:locationGuardFlowProvider:locationProvider:dateTimeResolver:linkRCHFlowFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for WorkflowRunnerFlow.State(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_50_1();
  uint64_t v49 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriWorkflowRunnerEvent>);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_14();
  uint64_t v25 = type metadata accessor for CATOption();
  uint64_t v26 = OUTLINED_FUNCTION_16(v25);
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_20_0();
  v59[3] = type metadata accessor for LocationProvider();
  v59[4] = &protocol witness table for LocationProvider;
  v59[0] = a13;
  uint64_t v27 = type metadata accessor for DateTimeResolver();
  v58[3] = v27;
  v58[4] = (uint64_t)&protocol witness table for DateTimeResolver;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
  uint64_t v29 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32);
  uint64_t v30 = v27;
  uint64_t v31 = a5;
  v29(boxed_opaque_existential_1, a14, v30);
  outlined init with take of SiriWorkflowRunnerInput(a1, (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunnerInput]);
  outlined init with copy of DeviceState(a4, (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_aceServiceInvoker]);
  outlined init with copy of DeviceState(a5, (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_deviceState]);
  *(void *)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogState] = a3;
  outlined init with copy of DeviceState(a6, (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_outputPublisher]);
  outlined init with copy of DeviceState((uint64_t)v59, (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationProvider]);
  outlined init with copy of DeviceState((uint64_t)v58, (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dateTimeResolver]);
  uint64_t v32 = &a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_linkRCHFlowFactory];
  *(void *)uint64_t v32 = a15;
  *((void *)v32 + 1) = a16;
  *(void *)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_runVoiceCommandsCatWrapperSimple] = a9;
  uint64_t v33 = &a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_locationGuardFlowProvider];
  *(void *)uint64_t v33 = a11;
  *((void *)v33 + 1) = a12;
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(a2, (uint64_t)&v55, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  uint64_t v48 = a4;
  if (v56)
  {
    outlined init with take of AceServiceInvokerAsync(&v55, (uint64_t)v57);
    outlined init with take of AceServiceInvokerAsync(v57, (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner]);
    os_log_type_t v34 = a17;
    outlined retain of SiriWorkflowRunnerInput(a1, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v46 = a17;
    outlined retain of SiriWorkflowRunnerInput(a1, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)&v55, &demangling cache variable for type metadata for SiriWorkflowRunning?);
    outlined init with copy of DeviceState(a5, (uint64_t)v57);
    outlined init with copy of DeviceState(a4, (uint64_t)&v55);
    uint64_t v35 = type metadata accessor for SiriWorkflowRunner();
    swift_allocObject();
    outlined retain of SiriWorkflowRunnerInput(a1, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SiriWorkflowRunnerInput);
    uint64_t v36 = SiriWorkflowRunner.init(workflowRunnerInput:deviceState:aceServiceInvoker:)(a1, v57, &v55);
    Swift::String v37 = &v46[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner];
    *((void *)v37 + 3) = v35;
    *((void *)v37 + 4) = &protocol witness table for SiriWorkflowRunner;
    uint64_t v31 = a5;
    *(void *)Swift::String v37 = v36;
  }
  uint64_t v47 = v31;
  outlined init with copy of DeviceState(v31, (uint64_t)v57);
  type metadata accessor for WorkflowRunnerCATs();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v38 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v39 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v40 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject();
  *(void *)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_dialogTemplating] = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v57, a3, v38, v39, a7, v40, a8, a9, a10);
  uint64_t v41 = *(void *)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 24];
  uint64_t v42 = *(void *)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner + 32];
  __swift_project_boxed_opaque_existential_1(&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_workflowRunner], v41);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
  AsyncStream.makeAsyncIterator()();
  OUTLINED_FUNCTION_66();
  v43();
  swift_storeEnumTagMultiPayload();
  outlined init with take of ShortcutIdentification(v49, (uint64_t)&a17[OBJC_IVAR____TtC18SiriLinkFlowPlugin18WorkflowRunnerFlow_state], (void (*)(void))type metadata accessor for WorkflowRunnerFlow.State);

  v54.receiver = a17;
  v54.super_class = ObjectType;
  id v44 = objc_msgSendSuper2(&v54, "init");
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined retain of SiriWorkflowRunnerInput(a1, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SiriWorkflowRunnerInput);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v58);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  __swift_destroy_boxed_opaque_existential_1Tm(v47);
  __swift_destroy_boxed_opaque_existential_1Tm(v48);
  outlined destroy of SiriWorkflowRunnerEvent?(a2, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  return v44;
}

uint64_t specialized WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CATOption();
  __chkstk_darwin(v10 - 8);
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  type metadata accessor for WFRunVoiceShortcutFlow.State(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of DeviceState(a1, a3 + 32);
  outlined init with copy of DeviceState(a1, (uint64_t)v21);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v12 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v20 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATs();
  static CATOption.defaultMode.getter();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v16 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject();
  *(void *)(a3 + 16) = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v21, v12, v20, v13, v14, v15, v16, v17, v18);
  type metadata accessor for WorkflowNLContextProvider();
  *(void *)(a3 + 24) = swift_allocObject();
  outlined init with take of AceServiceInvokerAsync(&v22, a3 + 72);
  return a3;
}

uint64_t specialized ShortcutIdentification.getIdentifyingName(vcClient:)(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for ShortcutIdentification(0);
  v2[9] = swift_task_alloc();
  swift_retain();
  return _swift_task_switch(specialized ShortcutIdentification.getIdentifyingName(vcClient:), 0, 0);
}

uint64_t specialized ShortcutIdentification.getIdentifyingName(vcClient:)()
{
  OUTLINED_FUNCTION_14_0();
  outlined init with copy of WFRunVoiceShortcutFlow.State(v0[4], v0[9], (void (*)(void))type metadata accessor for ShortcutIdentification);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_73();
    v1();
    uint64_t v2 = UUID.uuidString.getter();
    uint64_t v4 = v3;
    v0[10] = v3;
    uint64_t v5 = (void *)swift_task_alloc();
    v0[11] = (uint64_t)v5;
    *uint64_t v5 = v0;
    v5[1] = specialized ShortcutIdentification.getIdentifyingName(vcClient:);
    return VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)(v2, v4);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = OUTLINED_FUNCTION_30_0();
    return v8(v7);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  *(void *)(v7 + 96) = v5;
  *(void *)(v7 + 104) = v6;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t *v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  outlined init with copy of WFRunVoiceShortcutFlow.State(v0[3], v0[10], (void (*)(void))type metadata accessor for ShortcutIdentification);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = v0[5];
    OUTLINED_FUNCTION_73();
    v1();
    uint64_t v2 = UUID.uuidString.getter();
    uint64_t v4 = v3;
    v0[13] = v3;
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 + 32) + **(int **)(v12 + 32));
    uint64_t v5 = (void *)swift_task_alloc();
    v0[14] = (uint64_t)v5;
    *uint64_t v5 = v0;
    v5[1] = specialized ShortcutIdentification.getIdentifyingName(vcClient:);
    uint64_t v6 = v0[4];
    uint64_t v7 = v0[5];
    return v11(v2, v4, v6, v7);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v0[11] + 8))(v0[12], v0[4]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = OUTLINED_FUNCTION_75();
    return v10(v9);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  *(void *)(v7 + 120) = v5;
  *(void *)(v7 + 128) = v6;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  uint64_t v18 = v0;
  uint64_t v1 = v0[16];
  if (v1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = v0[15];
      uint64_t v6 = v0[7];
      uint64_t v16 = v0[8];
      uint64_t v15 = v0[6];
      uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v17 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v1, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v3, v4, "shortcut identifier matches shortcutName=%s", v7, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();

      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v15);
    }
    else
    {
      uint64_t v10 = v0[7];
      uint64_t v9 = v0[8];
      uint64_t v11 = v0[6];

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
  }
  else
  {
    OUTLINED_FUNCTION_2_6();
    v8();
  }
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[4]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = OUTLINED_FUNCTION_14_7();
  return v13(v12);
}

void specialized ShortcutIdentification.getIdentifyingName(vcClient:)()
{
  unint64_t v1 = v0[13];
  if (v1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v13 = v0[12];
      uint64_t v5 = v0[6];
      uint64_t v15 = v0[7];
      uint64_t v14 = v0[5];
      uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t v16 = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v1, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v3, v4, "shortcut identifier matches shortcutName=%s", v6, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v14);
      swift_release();
    }
    else
    {
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = v0[5];

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      swift_release();
    }
  }
  else
  {
    OUTLINED_FUNCTION_2_6();
    v7();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_14_7();
  OUTLINED_FUNCTION_2_1();
  __asm { BRAA            X3, X16 }
}

uint64_t specialized ShortcutIdentification.getIdentifyingName(vcClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  uint64_t v6 = type metadata accessor for UUID();
  v4[6] = v6;
  v4[7] = *(void *)(v6 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = type metadata accessor for ShortcutIdentification(0);
  v4[10] = swift_task_alloc();
  uint64_t v7 = *(void *)(a3 - 8);
  v4[11] = v7;
  v4[12] = swift_task_alloc();
  (*(void (**)(void))(v7 + 16))();
  return _swift_task_switch(specialized ShortcutIdentification.getIdentifyingName(vcClient:), 0, 0);
}

uint64_t type metadata accessor for WFRunVoiceShortcutFlow.State(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WFRunVoiceShortcutFlow.State);
}

uint64_t type metadata accessor for ShortcutIdentification(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for ShortcutIdentification);
}

unint64_t lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError;
  if (!lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError;
  if (!lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError);
  }
  return result;
}

uint64_t outlined assign with take of WFRunVoiceShortcutFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WFRunVoiceShortcutFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for VoiceCommandTask(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for VoiceCommandTask);
}

uint64_t outlined destroy of VoiceCommandsNLIntent(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_66();
  v3();
  return a1;
}

uint64_t _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WFRunVoiceShortcutFlow.execute()(char a1)
{
  return implicit closure #2 in implicit closure #1 in WFRunVoiceShortcutFlow.execute()(a1 & 1);
}

uint64_t sub_C2D24()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for WFRunVoiceShortcutFlow(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WFRunVoiceShortcutFlow);
}

unint64_t lazy protocol witness table accessor for type EnablementMode and conformance EnablementMode()
{
  unint64_t result = lazy protocol witness table cache variable for type EnablementMode and conformance EnablementMode;
  if (!lazy protocol witness table cache variable for type EnablementMode and conformance EnablementMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnablementMode and conformance EnablementMode);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WFRunVoiceShortcutFlowError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for WFRunVoiceShortcutFlowError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xC2F70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WFRunVoiceShortcutFlowError()
{
  return &type metadata for WFRunVoiceShortcutFlowError;
}

uint64_t *initializeBufferWithCopyOfBuffer for VoiceCommandTask(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v6 = a2[2];
      a1[1] = a2[1];
      a1[2] = v6;
      swift_bridgeObjectRetain();
    }
    else
    {
      type metadata accessor for ShortcutIdentification(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      }
      else
      {
        uint64_t v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for VoiceCommandTask(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1
    || (type metadata accessor for ShortcutIdentification(0), swift_getEnumCaseMultiPayload() != 1))
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = type metadata accessor for UUID();
    int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
}

uint64_t initializeWithCopy for VoiceCommandTask(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for ShortcutIdentification(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v6;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for VoiceCommandTask(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of VoiceCommandsNLIntent(a1, (void (*)(void))type metadata accessor for VoiceCommandTask);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
    }
    else
    {
      type metadata accessor for ShortcutIdentification(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v4 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      }
      else
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for VoiceCommandTask(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for ShortcutIdentification(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for VoiceCommandTask(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of VoiceCommandsNLIntent((uint64_t)a1, (void (*)(void))type metadata accessor for VoiceCommandTask);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for ShortcutIdentification(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for VoiceCommandTask()
{
  uint64_t result = type metadata accessor for ShortcutIdentification(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for EnablementMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xC377CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnablementMode()
{
  return &type metadata for EnablementMode;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShortcutIdentification(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ShortcutIdentification(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for UUID();
    int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for ShortcutIdentification(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for ShortcutIdentification(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of VoiceCommandsNLIntent((uint64_t)a1, (void (*)(void))type metadata accessor for ShortcutIdentification);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ShortcutIdentification(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ShortcutIdentification(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of VoiceCommandsNLIntent((uint64_t)a1, (void (*)(void))type metadata accessor for ShortcutIdentification);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ShortcutIdentification()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for WFRunVoiceShortcutFlow()
{
  return type metadata accessor for WFRunVoiceShortcutFlow(0);
}

uint64_t type metadata completion function for WFRunVoiceShortcutFlow()
{
  uint64_t result = type metadata accessor for WFRunVoiceShortcutFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WFRunVoiceShortcutFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v10 = *a2;
        swift_errorRetain();
        *a1 = v10;
LABEL_14:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 1:
        type metadata accessor for ShortcutIdentification(0);
        if (swift_getEnumCaseMultiPayload() == 1) {
          goto LABEL_6;
        }
        goto LABEL_12;
      case 0:
        type metadata accessor for ShortcutIdentification(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_6:
          uint64_t v8 = type metadata accessor for UUID();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_13:
          swift_storeEnumTagMultiPayload();
          goto LABEL_14;
        }
LABEL_12:
        uint64_t v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain();
        goto LABEL_13;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for WFRunVoiceShortcutFlow.State(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    return swift_errorRelease();
  }
  else if (result <= 1)
  {
    type metadata accessor for ShortcutIdentification(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t *initializeWithCopy for WFRunVoiceShortcutFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v8 = *a2;
      swift_errorRetain();
      *a1 = v8;
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      type metadata accessor for ShortcutIdentification(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_5;
      }
      goto LABEL_10;
    case 0:
      type metadata accessor for ShortcutIdentification(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_5:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
LABEL_11:
        swift_storeEnumTagMultiPayload();
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      goto LABEL_11;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t *assignWithCopy for WFRunVoiceShortcutFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of VoiceCommandsNLIntent((uint64_t)a1, (void (*)(void))type metadata accessor for WFRunVoiceShortcutFlow.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v7 = *a2;
        swift_errorRetain();
        *a1 = v7;
LABEL_13:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 1:
        type metadata accessor for ShortcutIdentification(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_9:
          uint64_t v8 = type metadata accessor for UUID();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_12:
          swift_storeEnumTagMultiPayload();
          goto LABEL_13;
        }
LABEL_11:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 0:
        type metadata accessor for ShortcutIdentification(0);
        if (swift_getEnumCaseMultiPayload() == 1) {
          goto LABEL_9;
        }
        goto LABEL_11;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *initializeWithTake for WFRunVoiceShortcutFlow.State(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for ShortcutIdentification(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
LABEL_6:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_8:
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    goto LABEL_9;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for ShortcutIdentification(0);
    if (swift_getEnumCaseMultiPayload() == 1) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithTake for WFRunVoiceShortcutFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of VoiceCommandsNLIntent((uint64_t)a1, (void (*)(void))type metadata accessor for WFRunVoiceShortcutFlow.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for ShortcutIdentification(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_7:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_9:
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      goto LABEL_10;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for ShortcutIdentification(0);
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_7;
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for WFRunVoiceShortcutFlow.State()
{
  uint64_t result = type metadata accessor for ShortcutIdentification(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t outlined init with take of ShortcutIdentification(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of WFRunVoiceShortcutFlow.State(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_6_6();
  v5(v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_6_19()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_11()
{
  return *(void *)(v0 + 568);
}

uint64_t OUTLINED_FUNCTION_23_14()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_24_13(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  *uint64_t v2 = a1;
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_28_11(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_30_10()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_31_8()
{
  return lazy protocol witness table accessor for type WFRunVoiceShortcutFlowError and conformance WFRunVoiceShortcutFlowError();
}

uint64_t OUTLINED_FUNCTION_33_10()
{
  return specialized WFRunVoiceShortcutFlow.init(deviceState:appPolicyHandler:)(v1, v4, v0, v2, v3);
}

uint64_t OUTLINED_FUNCTION_35_9()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_37_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_44_4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, a1 | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_49_5()
{
  return static CATOption.defaultMode.getter();
}

uint64_t LNConnection.perform(action:options:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation.BufferingPolicy);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_56();
  (*(void (**)(uint64_t, void))(v2 + 104))(v0, enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:));
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in LNConnection.perform(action:options:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  __chkstk_darwin(v8);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, a1, v8);
  static AceService.currentAsync.getter();
  id v12 = objc_allocWithZone((Class)type metadata accessor for AnonymousConnectionDelegate());
  id v13 = AnonymousConnectionDelegate.init(continuation:aceService:)((uint64_t)v10, (uint64_t)v18);
  id v14 = [a2 executorForAction:a3 options:a4 delegate:v13];
  [v14 perform];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  *(void *)(v15 + 24) = v14;
  return AsyncThrowingStream.Continuation.onTermination.setter();
}

uint64_t partial apply for closure #1 in LNConnection.perform(action:options:)(uint64_t a1)
{
  return closure #1 in LNConnection.perform(action:options:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

id AnonymousConnectionDelegate.__allocating_init(continuation:aceService:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return AnonymousConnectionDelegate.init(continuation:aceService:)(a1, a2);
}

void closure #1 in closure #1 in LNConnection.perform(action:options:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  id v5 = a3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = v5;
    id v10 = [v9 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v6, v7, "Stopping executor %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "AsyncStream terminated", v16, 2u);
    swift_slowDealloc();
  }
}

uint64_t AnonymousConnectionDelegate.aceService.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_aceService, a1);
}

uint64_t AnonymousConnectionDelegate.continuation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_continuation;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

id AnonymousConnectionDelegate.init(continuation:aceService:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  outlined init with copy of DeviceState(a2, (uint64_t)&v2[OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_aceService]);
  uint64_t v6 = &v2[OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_continuation];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  v11.receiver = v2;
  v11.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v11, "init");
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

uint64_t AnonymousConnectionDelegate.executor(_:needsConfirmationWith:)(uint64_t a1, void *a2)
{
  return AnonymousConnectionDelegate.executor(_:needsConfirmationWith:)(a1, a2, "AnonymousConnectionDelegate got LNConfirmationRequest: %@");
}

uint64_t AnonymousConnectionDelegate.executor(_:needsActionConfirmationWith:)(uint64_t a1, void *a2)
{
  return AnonymousConnectionDelegate.executor(_:needsConfirmationWith:)(a1, a2, "AnonymousConnectionDelegate got LNActionConfirmationRequest: %@");
}

uint64_t AnonymousConnectionDelegate.executor(_:needsDisambiguationWith:)(uint64_t a1, void *a2)
{
  return AnonymousConnectionDelegate.executor(_:needsConfirmationWith:)(a1, a2, "AnonymousConnectionDelegate got LNDisambiguationRequest: %@");
}

uint64_t AnonymousConnectionDelegate.executor(_:needsValueWith:)(uint64_t a1, void *a2)
{
  return AnonymousConnectionDelegate.executor(_:needsConfirmationWith:)(a1, a2, "AnonymousConnectionDelegate got LNNeedsValueRequest: %@");
}

uint64_t AnonymousConnectionDelegate.executor(_:needsConfirmationWith:)(uint64_t a1, void *a2, const char *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_27_6();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
  id v11 = a2;
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v20 = v6;
    uint64_t v19 = v8;
    id v14 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v18 = (void *)swift_slowAlloc();
    *(_DWORD *)id v14 = 138412290;
    id v15 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v11;

    uint64_t v6 = v20;
    _os_log_impl(&dword_0, v12, v13, a3, v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    uint64_t v8 = v19;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
  }
  id v16 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  AsyncThrowingStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
}

uint64_t AnonymousConnectionDelegate.executor(_:didFinishWith:error:)(uint64_t a1, void *a2, uint64_t a3)
{
  id v49 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  OUTLINED_FUNCTION_0_2();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_56();
  uint64_t v15 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_2();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    uint64_t v44 = v11;
    uint64_t v45 = v10;
    uint64_t v43 = v3;
    uint64_t v46 = v5;
    uint64_t v47 = v13;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v27 = __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v27, v15);
    uint64_t v28 = v49;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = v47;
    if (v31)
    {
      uint64_t v42 = v7;
      uint64_t v33 = (uint8_t *)OUTLINED_FUNCTION_25_2();
      uint64_t result = swift_slowAlloc();
      uint64_t v41 = (void *)result;
      *(_DWORD *)uint64_t v33 = 138412290;
      if (!v49)
      {
LABEL_17:
        __break(1u);
        return result;
      }
      uint64_t v40 = v33 + 4;
      v51[0] = (uint64_t)v28;
      uint64_t v35 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v41 = v49;

      _os_log_impl(&dword_0, v29, v30, "AnonymousConnectionDelegate finished with result: %@", v33, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
      uint64_t v7 = v42;
      uint64_t v32 = v47;
    }
    else
    {

      uint64_t v29 = v28;
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
    uint64_t v36 = v45;
    uint64_t v37 = v46;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v45, v48 + OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_continuation, v46);
    if (v49)
    {
      v51[0] = (uint64_t)v49;
      v51[1] = 0;
      char v52 = 6;
      uint64_t v38 = v28;
      uint64_t v39 = v43;
      AsyncThrowingStream.Continuation.yield(_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v36, v37);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v39, v44);
      v51[0] = 0;
      return AsyncThrowingStream.Continuation.finish(throwing:)();
    }
    __break(1u);
    goto LABEL_17;
  }
  swift_errorRetain();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v50 = a3;
    v51[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v21, v22, "AnonymousConnectionDelegate finished with error: %s", v23, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  v51[0] = a3;
  swift_errorRetain();
  AsyncThrowingStream.Continuation.finish(throwing:)();
  return swift_errorRelease();
}

uint64_t AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return _swift_task_switch(AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:), 0, 0);
}

uint64_t AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)()
{
  OUTLINED_FUNCTION_13_1();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "AnonymousConnectionDelegate executorEnvironmentForViewSnippet", v4, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  char v5 = dispatch thunk of DeviceState.isHomePod.getter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  if (v5)
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_23_0(&dword_0, v8, v9, "Executing on Homepod. Returning nil for view snippet environment.");
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10(0);
  }
  else
  {
    uint64_t v12 = (void *)(v0[13] + OBJC_IVAR____TtC18SiriLinkFlowPlugin27AnonymousConnectionDelegate_aceService);
    uint64_t v14 = v12[3];
    uint64_t v13 = v12[4];
    __swift_project_boxed_opaque_existential_1(v12, v14);
    id v15 = [objc_allocWithZone((Class)SAUISnippetDisplayConfigurationRequest) init];
    v0[15] = v15;
    uint64_t v16 = (void *)swift_task_alloc();
    v0[16] = v16;
    uint64_t v17 = type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
    *uint64_t v16 = v0;
    v16[1] = AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:);
    return AceServiceInvokerAsync.submit<A>(_:)(v15, v14, v17, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  *(void *)(v1 + 136) = v3;
  *(void *)(v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:);
  }
  else
  {

    uint64_t v4 = AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:);
  }
  return _swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t (*v17)(id);
  uint64_t v19;

  OUTLINED_FUNCTION_13_1();
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    os_log_type_t v3 = (void *)v0[17];
    uint64_t v4 = (void *)v0[12];
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNSnippetEnvironment);
    char v5 = v3;
    uint64_t v6 = [v4 options];
    os_log_type_t v7 = [v6 environment];

    uint64_t v8 = [v7 localeIdentifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = static LNSnippetEnvironment.make(from:localeIdentifier:)(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.error.getter();
    uint64_t v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[17];
    if (v12)
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_23_0(&dword_0, v14, v15, "SnippetDisplayConfigurationRequest got unexpected response, going with default snippet size");
      OUTLINED_FUNCTION_7_0();
      uint64_t v16 = v10;
    }
    else
    {
      uint64_t v16 = v0[17];
      uint64_t v13 = v10;
    }

    type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNSnippetEnvironment);
    uint64_t v9 = static LNSnippetEnvironment.make(size:)(360.0, 9.22337204e18);
  }
  uint64_t v17 = (uint64_t (*)(id))v0[1];
  return v17(v9);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  uint64_t (*v7)(id);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = v0;

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v1, v2, "Hit error while trying to fetch snippet display config from UI layer %s", v3, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNSnippetEnvironment);
  uint64_t v6 = static LNSnippetEnvironment.make(size:)(360.0, 9.22337204e18);
  os_log_type_t v7 = *(uint64_t (**)(id))(v0 + 8);
  return v7(v6);
}

uint64_t @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  os_log_type_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  void *v7 = v3;
  v7[1] = @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:);
  return AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)((uint64_t)v6);
}

uint64_t @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)(void *a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = (void (**)(void, void))v3[4];
  char v5 = (void *)v3[3];
  id v6 = (void *)v3[2];
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();

  ((void (**)(void, void *))v4)[2](v4, a1);
  _Block_release(v4);

  OUTLINED_FUNCTION_18_0();
  return v9();
}

uint64_t _runTaskForBridgedAsyncMethod(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &_sIeghH_IeAgH_TRTATu;
  v9[5] = v8;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5((uint64_t)v6, (uint64_t)&_sIeAgH_ytIeAgHr_TRTATu, (uint64_t)v9);
  return swift_release();
}

uint64_t AnonymousConnectionDelegate.executor(_:shouldRunShowOutputAction:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.voiceCommands);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "AnonymousConnectionDelegate shouldRunShowOutputAction return false", v3, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  return 0;
}

uint64_t AnonymousConnectionDelegate.executor(_:needsContinueInAppWith:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_27_6();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "AnonymousConnectionDelegate needsContinueInAppWith request", v11, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  id v12 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  AsyncThrowingStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t AnonymousConnectionDelegate.executor(_:needsAppProtectionUnlockWithCompletionHandler:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation.YieldResult);
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_27_6();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "AnonymousConnectionDelegate needsAppProtectionUnlock", v8, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
  AsyncThrowingStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
}

void AnonymousConnectionDelegate.init()()
{
}

uint64_t protocol witness for LinkConnection.perform(action:options:) in conformance LNConnection()
{
  return LNConnection.perform(action:options:)();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

id outlined copy of LinkConnectionEvent(id result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      uint64_t result = result;
      break;
    case 5:
      uint64_t result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

void destroy for LinkConnectionEvent(uint64_t a1)
{
}

void outlined consume of LinkConnectionEvent(void *a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:

      break;
    case 5:
      swift_release();
      break;
    default:
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for LinkConnectionEvent(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of LinkConnectionEvent(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LinkConnectionEvent(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of LinkConnectionEvent(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of LinkConnectionEvent(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LinkConnectionEvent(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of LinkConnectionEvent(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkConnectionEvent(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 6) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkConnectionEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for LinkConnectionEvent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for LinkConnectionEvent(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LinkConnectionEvent()
{
  return &type metadata for LinkConnectionEvent;
}

uint64_t ObjC metadata update function for AnonymousConnectionDelegate()
{
  return type metadata accessor for AnonymousConnectionDelegate();
}

uint64_t type metadata accessor for AnonymousConnectionDelegate()
{
  uint64_t result = type metadata singleton initialization cache for AnonymousConnectionDelegate;
  if (!type metadata singleton initialization cache for AnonymousConnectionDelegate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for AnonymousConnectionDelegate()
{
  type metadata accessor for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation()
{
  if (!lazy cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    unint64_t v0 = type metadata accessor for AsyncThrowingStream.Continuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Continuation);
    }
  }
}

uint64_t sub_C7518()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_C7568()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)()
{
  uint64_t v1 = (void *)v0[2];
  int v2 = (void *)v0[3];
  unsigned int v3 = (void *)v0[4];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_7_21(v4);
  *uint64_t v5 = v6;
  v5[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *))((char *)&async function pointer to @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:)
                                                      + async function pointer to @objc closure #1 in AnonymousConnectionDelegate.executorEnvironmentForViewSnippet(_:));
  return v7(v1, v2, v3);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  unsigned int v3 = (int *)v0[4];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_7_21(v4);
  *uint64_t v5 = v6;
  v5[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu);
  return v7(v1, v2, v3);
}

uint64_t objectdestroy_11Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = (int *)v0[4];
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_7_21(v6);
  void *v7 = v8;
  v7[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu + _sIeAgH_ytIeAgHr_TRTu);
  return v9(v2, v3, v4, v5);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_C7884()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v3 = *(int **)(v1 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_7_21(v4);
  *uint64_t v5 = v6;
  v5[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu);
  return v7(a1, v3);
}

uint64_t sub_C7970()
{
  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in LNConnection.perform(action:options:)(uint64_t a1)
{
  closure #1 in closure #1 in LNConnection.perform(action:options:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t OUTLINED_FUNCTION_7_21(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

void VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)()
{
  OUTLINED_FUNCTION_36();
  v13[2] = v1;
  uint64_t v14 = v0;
  v13[0] = v2;
  v13[1] = v3;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_6_20();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  OUTLINED_FUNCTION_1_21();
  NLContextUpdate.weightedPromptStrict.setter();
  NLContextUpdate.weightedPromptAbortValues.setter();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  VoiceCommandNLContextProvider.buildSDAForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_212160;
  OUTLINED_FUNCTION_59_0();
  v12(v8, v9, v10, v11);
  NLContextUpdate.nluSystemDialogActs.setter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  OUTLINED_FUNCTION_27_1();
}

uint64_t VoiceCommandNLContextProvider.makeContextForDisambiguation(items:)()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_25_8();
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_6_20();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  OUTLINED_FUNCTION_1_21();
  NLContextUpdate.weightedPromptStrict.setter();
  VoiceCommandNLContextProvider.buildSDAForDisambiguation(items:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_212160;
  OUTLINED_FUNCTION_59_0();
  v3();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void VoiceCommandNLContextProvider.getDisplayHints(items:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_20_0();
  uint64_t v40 = v6 - v5;
  uint64_t v39 = type metadata accessor for DisplayHint();
  OUTLINED_FUNCTION_12_1();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_13_19();
  uint64_t v10 = type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_12_1();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_25_6();
  uint64_t v38 = v14;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v31 - v16;
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v37 = *(void *)(v2 + 16);
  if (v37)
  {
    unint64_t v18 = type metadata accessor for INIntentResolutionResult();
    unint64_t v19 = 0;
    uint64_t v20 = (void *)(v2 + 32);
    uint64_t v32 = (void (**)(void))(v12 + 16);
    unint64_t v33 = v18;
    v31[2] = v12 + 8;
    v31[3] = v8 + 32;
    v31[1] = 0x8000000000227F50;
    uint64_t v35 = v10;
    uint64_t v36 = v8;
    os_log_type_t v34 = v17;
    do
    {
      uint64_t v21 = v20[3];
      uint64_t v22 = v20[4];
      __swift_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
      SemanticValue.init(string:label:)();
      uint64_t v23 = *v32;
      uint64_t v24 = v40;
      OUTLINED_FUNCTION_23_15();
      v23();
      __swift_storeEnumTagSinglePayload(v24, 0, 1, v10);
      OUTLINED_FUNCTION_23_15();
      v23();
      DisplayHint.init(idValue:displayValue:)();
      uint64_t v25 = (uint64_t)v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1, v25);
      }
      unint64_t v27 = *(void *)(v25 + 16);
      unint64_t v26 = *(void *)(v25 + 24);
      if (v27 >= v26 >> 1) {
        uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v25);
      }
      *(void *)(v25 + 16) = v27 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v36 + 32))(v25+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v27, v0, v39);
      uint64_t v41 = (void *)v25;
      uint64_t v28 = v37;
      uint64_t v29 = static INIntentResolutionResult.inferOrdinalDisplayValues(index:count:)(v19, v37);
      __chkstk_darwin(v29);
      v31[-2] = v34;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11SiriKitFlow11DisplayHintVs5NeverOTg5((void (*)(void *))partial apply for closure #1 in VoiceCommandNLContextProvider.getDisplayHints(items:), (uint64_t)&v31[-4], (uint64_t)v29);
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)();
      uint64_t v10 = v35;
      OUTLINED_FUNCTION_66();
      v30();
      v20 += 5;
      ++v19;
    }
    while (v28 != v19);
  }
  OUTLINED_FUNCTION_27_1();
}

void VoiceCommandNLContextProvider.buildSDAForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  uint64_t v5 = OUTLINED_FUNCTION_16(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_20_0();
  if ((SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) == 0)
  {
    Siri_Nlu_External_SystemDialogAct.init()();
    Siri_Nlu_External_SystemOffered.init()();
    Siri_Nlu_External_SystemDialogAct.offered.setter();
LABEL_9:
    OUTLINED_FUNCTION_27_1();
    return;
  }
  if (!v3 || !v1)
  {
    VoiceCommandNLContextProvider.buildSDAForActionConfirmationWithYesNo()();
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_27_1();
  VoiceCommandNLContextProvider.buildSDAForActionConfirmationWithCustomLabel(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
}

void VoiceCommandNLContextProvider.buildSDAForActionConfirmationWithYesNo()()
{
  OUTLINED_FUNCTION_36();
  uint64_t v26 = v0;
  uint64_t v27 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  OUTLINED_FUNCTION_12_1();
  uint64_t v25 = v1;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_25_6();
  uint64_t v24 = v3;
  __chkstk_darwin(v4);
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_12_1();
  uint64_t v28 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_10_25();
  __chkstk_darwin(v7);
  uint64_t v8 = OUTLINED_FUNCTION_22_18();
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_13_19();
  uint64_t v22 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  OUTLINED_FUNCTION_12_1();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_51_0();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v21 - v14;
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  OUTLINED_FUNCTION_35_2();
  UsoTaskBuilder_execute_common_VoiceCommand.init()();
  Siri_Nlu_External_UserWantedToProceed.init()();
  UsoTaskBuilder.asUsoGraph()();
  Siri_Nlu_External_UserWantedToProceed.reference.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  OUTLINED_FUNCTION_59_0();
  v16();
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  Siri_Nlu_External_SystemOffered.init()();
  OUTLINED_FUNCTION_59_0();
  v17();
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  Siri_Nlu_External_SystemDialogAct.init()();
  OUTLINED_FUNCTION_59_0();
  v18();
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  swift_release();
  OUTLINED_FUNCTION_66();
  v19();
  OUTLINED_FUNCTION_66();
  v20();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v22);
  OUTLINED_FUNCTION_27_1();
}

void VoiceCommandNLContextProvider.buildSDAForActionConfirmationWithCustomLabel(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)()
{
  OUTLINED_FUNCTION_36();
  v9[1] = v0;
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  OUTLINED_FUNCTION_12_1();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_33_9();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v9 - v6;
  VoiceCommandNLContextProvider.buildTaskFor(label:alternatives:confirmation:)();
  VoiceCommandNLContextProvider.buildTaskFor(label:alternatives:confirmation:)();
  Siri_Nlu_External_SystemGaveOptions.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>);
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_212170;
  UsoTaskBuilder_execute_common_VoiceCommand.toUserDialogAct()();
  UsoTaskBuilder_execute_common_VoiceCommand.toUserDialogAct()();
  Siri_Nlu_External_SystemGaveOptions.choices.setter();
  Siri_Nlu_External_SystemDialogAct.init()();
  OUTLINED_FUNCTION_59_0();
  v8();
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v1);
  OUTLINED_FUNCTION_27_1();
}

uint64_t VoiceCommandNLContextProvider.makeContextForNeedsValue(taskBuilder:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v3 = OUTLINED_FUNCTION_16(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_17_16();
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_12_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  NLContextUpdate.init()();
  NLContextUpdate.weightedPromptStrict.setter();
  OUTLINED_FUNCTION_1_21();
  if ((SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) != 0 && a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_212160;
    swift_retain();
    VoiceCommandNLContextProvider.buildSDAForNeedsValue(taskBuilder:)();
    NLContextUpdate.nluSystemDialogActs.setter();
    return swift_release();
  }
  else
  {
    Siri_Nlu_External_SystemDialogAct.init()();
    Siri_Nlu_External_SystemPrompted.init()();
    Siri_Nlu_External_SystemDialogAct.prompted.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_212160;
    OUTLINED_FUNCTION_59_0();
    v11();
    NLContextUpdate.nluSystemDialogActs.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  }
}

uint64_t VoiceCommandNLContextProvider.buildSDAForNeedsValue(taskBuilder:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v1 = OUTLINED_FUNCTION_16(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_11_20();
  type metadata accessor for Siri_Nlu_External_SystemPrompted();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_33_9();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_21_13();
  Siri_Nlu_External_SystemPrompted.init()();
  UsoTaskBuilder.asUsoGraph()();
  Siri_Nlu_External_SystemPrompted.target.setter();
  Siri_Nlu_External_SystemDialogAct.init()();
  OUTLINED_FUNCTION_59_0();
  v4();
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  uint64_t v5 = OUTLINED_FUNCTION_18_14();
  return v6(v5);
}

void VoiceCommandNLContextProvider.makeContextForBoolNeedsValuePrompt(intent:parameter:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v25 = v7;
  uint64_t v24 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_12_1();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_12_18();
  uint64_t v23 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_12_1();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_17_16();
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_6_20();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  OUTLINED_FUNCTION_1_21();
  NLContextUpdate.weightedPromptStrict.setter();
  NLContextUpdate.weightedPromptAbortValues.setter();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  uint64_t v14 = NLContextUpdate.weightedPromptResponseOptions.setter();
  if (!v6 || !v4) {
    goto LABEL_6;
  }
  id v15 = v6;
  uint64_t v16 = (void *)INIntent.BOOLeanAttributeMetadata(parameterName:)();
  if (!v16)
  {

LABEL_6:
    (*(void (**)(uint64_t))(*(void *)v0 + 152))(v14);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
    *(_OWORD *)(OUTLINED_FUNCTION_9_23() + 16) = xmmword_212160;
    uint64_t v20 = v24;
    OUTLINED_FUNCTION_59_0();
    v22();
    NLContextUpdate.nluSystemDialogActs.setter();
    goto LABEL_7;
  }
  uint64_t v17 = v16;
  id v18 = [v16 localizedTrueDisplayName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v19 = [v17 localizedFalseDisplayName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  VoiceCommandNLContextProvider.buildSDAForActionConfirmationWithCustomLabel(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  *(_OWORD *)(OUTLINED_FUNCTION_9_23() + 16) = xmmword_212160;
  uint64_t v20 = v24;
  OUTLINED_FUNCTION_59_0();
  v21();
  NLContextUpdate.nluSystemDialogActs.setter();

LABEL_7:
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v25, v2, v23);
  OUTLINED_FUNCTION_27_1();
}

void VoiceCommandNLContextProvider.buildSDAForBoolNeedsValuePrompt()()
{
  OUTLINED_FUNCTION_36();
  uint64_t v27 = v1;
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  OUTLINED_FUNCTION_12_1();
  uint64_t v26 = v2;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_25_6();
  uint64_t v25 = v4;
  __chkstk_darwin(v5);
  uint64_t v24 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_12_1();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_10_25();
  __chkstk_darwin(v9);
  uint64_t v10 = OUTLINED_FUNCTION_22_18();
  uint64_t v11 = OUTLINED_FUNCTION_16(v10);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_25_8();
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  OUTLINED_FUNCTION_12_1();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_51_0();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v23 - v16;
  Siri_Nlu_External_UserStatedTask.init()();
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  OUTLINED_FUNCTION_35_2();
  UsoTaskBuilder_execute_common_VoiceCommand.init()();
  UsoTaskBuilder.asUsoGraph()();
  swift_release();
  Siri_Nlu_External_UserStatedTask.task.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  OUTLINED_FUNCTION_59_0();
  v18();
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  Siri_Nlu_External_SystemOffered.init()();
  uint64_t v19 = v24;
  OUTLINED_FUNCTION_59_0();
  v20();
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  Siri_Nlu_External_SystemDialogAct.init()();
  OUTLINED_FUNCTION_59_0();
  v21();
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  OUTLINED_FUNCTION_66();
  v22();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v19);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v23);
  OUTLINED_FUNCTION_27_1();
}

void VoiceCommandNLContextProvider.buildSDAForDisambiguation(items:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v36 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_12_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  OUTLINED_FUNCTION_12_1();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_51_0();
  uint64_t v16 = v14 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v32 - v18;
  Siri_Nlu_External_SystemGaveOptions.init()();
  if ((SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) == 0) {
    goto LABEL_18;
  }
  unint64_t v33 = v19;
  uint64_t v34 = v16;
  uint64_t v35 = v12;
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v20 = *(void *)(v1 + 16);
  if (v20)
  {
    uint64_t v21 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DeviceState(v21, (uint64_t)v37);
      uint64_t v22 = v38;
      uint64_t v23 = v39;
      __swift_project_boxed_opaque_existential_1(v37, v38);
      unint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 40))(v22, v23);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
      specialized Array.append<A>(contentsOf:)(v24);
      v21 += 40;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    unint64_t v25 = (unint64_t)v40;
  }
  else
  {
    unint64_t v25 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (!(v25 >> 62))
  {
    uint64_t v26 = *(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFFF8));
    if (v26) {
      goto LABEL_9;
    }
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v19 = v33;
    Siri_Nlu_External_SystemGaveOptions.choices.setter();
    uint64_t v12 = v35;
LABEL_18:
    Siri_Nlu_External_SystemDialogAct.init()();
    OUTLINED_FUNCTION_59_0();
    v31();
    Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v10);
    OUTLINED_FUNCTION_27_1();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v26) {
    goto LABEL_16;
  }
LABEL_9:
  v37[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26 & ~(v26 >> 63), 0);
  if ((v26 & 0x8000000000000000) == 0)
  {
    v32[0] = v10;
    v32[1] = v3;
    uint64_t v27 = 0;
    uint64_t v28 = v37[0];
    do
    {
      swift_retain();
      UsoEntityBuilder_common_VoiceCommandPayload.toUserDialogAct()();
      swift_release();
      v37[0] = v28;
      unint64_t v30 = *(void *)(v28 + 16);
      unint64_t v29 = *(void *)(v28 + 24);
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        uint64_t v28 = v37[0];
      }
      ++v27;
      *(void *)(v28 + 16) = v30 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v28+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v30, v9, v36);
    }
    while (v26 != v27);
    swift_bridgeObjectRelease();
    uint64_t v10 = v32[0];
    goto LABEL_17;
  }
  __break(1u);
}

unint64_t type metadata accessor for INIntentResolutionResult()
{
  unint64_t result = lazy cache variable for type metadata for INIntentResolutionResult;
  if (!lazy cache variable for type metadata for INIntentResolutionResult)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntentResolutionResult);
  }
  return result;
}

void VoiceCommandNLContextProvider.buildTaskFor(label:alternatives:confirmation:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_12_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_12_18();
  type metadata accessor for UsoEntityBuilder_common_VoiceCommand();
  OUTLINED_FUNCTION_35_2();
  UsoEntityBuilder_common_VoiceCommand.init()();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommand.setName(value:)();
  UsoIdentifier.init(value:appBundleId:namespace:)();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  uint64_t v7 = v3;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v0, v3);
  uint64_t v9 = *(void *)(v2 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = v2 + 40;
    do
    {
      swift_bridgeObjectRetain();
      UsoIdentifier.init(value:appBundleId:namespace:)();
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
      v8(v0, v7);
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  OUTLINED_FUNCTION_35_2();
  UsoTaskBuilder_execute_common_VoiceCommand.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setReference(value:)();
  swift_release();
  OUTLINED_FUNCTION_27_1();
}

uint64_t closure #1 in VoiceCommandNLContextProvider.getDisplayHints(items:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SemanticValue();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v15 - v11;
  swift_bridgeObjectRetain();
  SemanticValue.init(string:label:)();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13(v5, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  v13(v10, (uint64_t)v12, v6);
  DisplayHint.init(idValue:displayValue:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

uint64_t UsoTaskBuilder_execute_common_VoiceCommand.toUserDialogAct()()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v1 = OUTLINED_FUNCTION_16(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_11_20();
  type metadata accessor for Siri_Nlu_External_UserStatedTask();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_33_9();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_21_13();
  Siri_Nlu_External_UserStatedTask.init()();
  UsoTaskBuilder.asUsoGraph()();
  Siri_Nlu_External_UserStatedTask.task.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  OUTLINED_FUNCTION_59_0();
  v4();
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  uint64_t v5 = OUTLINED_FUNCTION_18_14();
  return v6(v5);
}

uint64_t UsoEntityBuilder_common_VoiceCommandPayload.toUserDialogAct()()
{
  type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
  OUTLINED_FUNCTION_35_2();
  UsoTaskBuilder_execute_common_VoiceCommand.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)();
  UsoTaskBuilder_execute_common_VoiceCommand.toUserDialogAct()();

  return swift_release();
}

uint64_t partial apply for closure #1 in VoiceCommandNLContextProvider.getDisplayHints(items:)(uint64_t a1)
{
  return closure #1 in VoiceCommandNLContextProvider.getDisplayHints(items:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for VoiceCommandNLContextProvider()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_1_21()
{
  return NLContextUpdate.currentDomainName.setter();
}

unint64_t OUTLINED_FUNCTION_6_20()
{
  return 0xD00000000000001FLL;
}

uint64_t OUTLINED_FUNCTION_9_23()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_11_20()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_12_18()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_13_19()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_18_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_18()
{
  return type metadata accessor for Siri_Nlu_External_UsoGraph();
}

uint64_t UserDefaultsWrapper.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  UserDefaultsWrapper.init()();
  return v0;
}

void *UserDefaultsWrapper.init()()
{
  v0[2] = 0x75616665444D4143;
  v0[3] = 0xEB0000000073746CLL;
  v0[4] = 0xD000000000000021;
  v0[5] = 0x80000000002253C0;
  v0[6] = [objc_allocWithZone((Class)NSUserDefaults) init];
  return v0;
}

Swift::Void __swiftcall UserDefaultsWrapper.recordFirstRunShown(bundleId:)(Swift::String bundleId)
{
  uint64_t v2 = v1;
  object = bundleId._object;
  uint64_t countAndFlagsBits = bundleId._countAndFlagsBits;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v6, v7, "Storing ambiguous first run shown for %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v9 = (void *)v2[6];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 dictionaryForKey:v10];

  if (v11)
  {
    uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
  }
  uint64_t v25 = v12;
  uint64_t v14 = v2[4];
  uint64_t v13 = v2[5];
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v14, v13, v12, v23);
  swift_bridgeObjectRelease();
  if (v24)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      uint64_t v15 = v22;
      goto LABEL_14;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v23);
  }
  uint64_t v15 = _swiftEmptyArrayStorage;
LABEL_14:
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v15 = v20;
  }
  unint64_t v16 = v15[2];
  if (v16 >= v15[3] >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v15 = v21;
  }
  v15[2] = v16 + 1;
  uint64_t v17 = &v15[2 * v16];
  v17[4] = countAndFlagsBits;
  v17[5] = object;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v23[0] = (uint64_t)v15;
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v23);
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v19 = String._bridgeToObjectiveC()();
  [v9 setObject:isa forKey:v19];
  swift_bridgeObjectRelease();
}

uint64_t UserDefaultsWrapper.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t UserDefaultsWrapper.__deallocating_deinit()
{
  UserDefaultsWrapper.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for UserDefaultsWrapping.recordFirstRunShown(bundleId:) in conformance UserDefaultsWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t type metadata accessor for UserDefaultsWrapper()
{
  return self;
}

uint64_t RunCustomIntentReadingDelegate.__allocating_init(templater:deviceState:outputPublisher:)(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = swift_allocObject();
  RunCustomIntentReadingDelegate.init(templater:deviceState:outputPublisher:)(a1, a2, a3);
  return v6;
}

uint64_t RunCustomIntentReadingDelegate.viewFactory.getter()
{
  return swift_retain();
}

_OWORD *RunCustomIntentReadingDelegate.templater.getter@<X0>(_OWORD *a1@<X8>)
{
  return outlined init with copy of RunCustomIntentReadingDelegate.Templating((_OWORD *)(v1 + 32), a1);
}

void *RunCustomIntentReadingDelegate.init(templater:deviceState:outputPublisher:)(uint64_t a1, void *a2, long long *a3)
{
  v3[2] = 5;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  type metadata accessor for ViewFactory();
  OUTLINED_FUNCTION_35_2();
  v3[3] = ViewFactory.init(ttsEnabled:)();
  outlined init with copy of RunCustomIntentReadingDelegate.Templating?(a1, (uint64_t)v8, &demangling cache variable for type metadata for RunCustomIntentReadingDelegate.Templating?);
  if (v8[3])
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for RunCustomIntentReadingDelegate.Templating?);
    memcpy(__dst, v8, sizeof(__dst));
  }
  else
  {
    static RunCustomIntentReadingDelegate.Templating.default(pageSize:)(5, __dst);
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for RunCustomIntentReadingDelegate.Templating?);
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for RunCustomIntentReadingDelegate.Templating?);
  }
  memcpy(v3 + 4, __dst, 0x78uLL);
  outlined init with take of AceServiceInvokerAsync(a3, (uint64_t)(v3 + 19));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a2);
  return v3;
}

_OWORD *outlined init with copy of RunCustomIntentReadingDelegate.Templating(_OWORD *a1, _OWORD *a2)
{
  return a2;
}

uint64_t static RunCustomIntentReadingDelegate.Templating.default(pageSize:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for IntroduceCustomIntentCatTemplater();
  uint64_t v5 = OUTLINED_FUNCTION_6_21();
  *(void *)(v5 + 16) = a1;
  a2[3] = v4;
  a2[4] = (uint64_t)&protocol witness table for IntroduceCustomIntentCatTemplater;
  *a2 = v5;
  uint64_t v6 = type metadata accessor for DescribeCustomIntentItemCatTemplater();
  uint64_t v7 = OUTLINED_FUNCTION_4_20();
  a2[8] = v6;
  a2[9] = (uint64_t)&protocol witness table for DescribeCustomIntentItemCatTemplater;
  a2[5] = v7;
  uint64_t v8 = type metadata accessor for OfferMoreItemsCatTemplater();
  uint64_t result = OUTLINED_FUNCTION_4_20();
  a2[13] = v8;
  a2[14] = (uint64_t)&protocol witness table for OfferMoreItemsCatTemplater;
  a2[10] = result;
  return result;
}

uint64_t RunCustomIntentReadingDelegate.makeAction(introducingItems:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = type metadata accessor for IntroduceCustomIntentViewBuilder();
  uint64_t v5 = OUTLINED_FUNCTION_6_21();
  *(void *)(v5 + 16) = v3;
  outlined init with copy of DeviceState(v1 + 32, (uint64_t)v9);
  type metadata accessor for IntroduceCustomIntentOutputProvider();
  uint64_t v6 = (void *)swift_allocObject();
  v6[6] = v4;
  v6[7] = &protocol witness table for IntroduceCustomIntentViewBuilder;
  _OWORD v6[2] = a1;
  v6[3] = v5;
  outlined init with take of AceServiceInvokerAsync(v9, (uint64_t)(v6 + 8));
  outlined init with copy of DeviceState(v1 + 152, (uint64_t)v9);
  type metadata accessor for OutputAction();
  OUTLINED_FUNCTION_35_2();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = OutputAction.init(publisher:nextAction:producer:)();
  lazy protocol witness table accessor for type OutputAction and conformance OutputAction(&lazy protocol witness table cache variable for type OutputAction and conformance OutputAction, 255, (void (*)(uint64_t))&type metadata accessor for OutputAction);
  return v7;
}

uint64_t RunCustomIntentReadingDelegate.makeAction(forItem:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for DescribeCustomIntentItemViewBuilder();
  uint64_t v3 = OUTLINED_FUNCTION_6_21();
  *(void *)(v3 + 16) = v1;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItem<String>);
  PaginatedItem.item.getter();
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  outlined init with copy of DeviceState(v0 + 72, (uint64_t)v9);
  type metadata accessor for DescribeCustomIntentItemOutputProvider();
  uint64_t v6 = (void *)swift_allocObject();
  v6[7] = v2;
  v6[8] = &protocol witness table for DescribeCustomIntentItemViewBuilder;
  v6[3] = v5;
  v6[4] = v3;
  _OWORD v6[2] = v4;
  outlined init with take of AceServiceInvokerAsync(v9, (uint64_t)(v6 + 9));
  outlined init with copy of DeviceState(v0 + 152, (uint64_t)v9);
  type metadata accessor for OutputAction();
  OUTLINED_FUNCTION_35_2();
  uint64_t v7 = OutputAction.init(publisher:nextAction:producer:)();
  lazy protocol witness table accessor for type OutputAction and conformance OutputAction(&lazy protocol witness table cache variable for type OutputAction and conformance OutputAction, 255, (void (*)(uint64_t))&type metadata accessor for OutputAction);
  return v7;
}

uint64_t RunCustomIntentReadingDelegate.makeGroup(withActions:nextPage:)(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionGroupTransition?);
  __chkstk_darwin(v5 - 8);
  uint64_t v60 = (uint64_t *)((char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (page: Page, group: ActionGrouping)?);
  __chkstk_darwin(v7 - 8);
  OUTLINED_FUNCTION_3_23();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Page, ActionGrouping));
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Page();
  OUTLINED_FUNCTION_0_2();
  uint64_t v14 = v13;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v51 - v19;
  outlined init with copy of RunCustomIntentReadingDelegate.Templating?(a2, v3, &demangling cache variable for type metadata for (page: Page, group: ActionGrouping)?);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (page: Page, group: ActionGrouping));
  if (__swift_getEnumTagSinglePayload(v3, 1, v21) == 1)
  {
    outlined destroy of Any?(v3, &demangling cache variable for type metadata for (page: Page, group: ActionGrouping)?);
    uint64_t v22 = type metadata accessor for ActionGroupTransition();
    __swift_storeEnumTagSinglePayload((uint64_t)v60, 1, 1, v22);
    type metadata accessor for StaticActionGroup();
    OUTLINED_FUNCTION_35_2();
    swift_bridgeObjectRetain();
    uint64_t v23 = StaticActionGroup.init(actions:transition:debugDescription:)();
  }
  else
  {
    uint64_t v24 = *(int *)(v21 + 48);
    uint64_t v25 = *(int *)(v8 + 48);
    uint64_t v58 = v14;
    uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
    long long v55 = *(_OWORD *)(v3 + v24);
    char v52 = v26;
    uint64_t v53 = v2;
    v26((uint64_t)v11, (char *)v3, v12);
    *(_OWORD *)&v11[v25] = v55;
    uint64_t v27 = &v11[*(int *)(v8 + 48)];
    uint64_t v29 = *(void *)v27;
    uint64_t v28 = *((void *)v27 + 1);
    uint64_t v54 = v29;
    *(void *)&long long v55 = v28;
    uint64_t v57 = v20;
    v26((uint64_t)v20, v11, v12);
    uint64_t v30 = type metadata accessor for OfferMoreItemsCatTemplater();
    uint64_t v31 = OUTLINED_FUNCTION_4_20();
    uint64_t v32 = *(void *)(v2 + 24);
    uint64_t v33 = type metadata accessor for OfferMoreItemsViewBuilder();
    uint64_t v34 = OUTLINED_FUNCTION_6_21();
    *(void *)(v34 + 16) = v32;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, v20, v12);
    type metadata accessor for OfferMoreItemsOutputProvider();
    uint64_t v35 = OUTLINED_FUNCTION_35_2();
    uint64_t v56 = v12;
    uint64_t v36 = (uint64_t *)(v35 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_templating);
    v36[3] = v30;
    v36[4] = (uint64_t)&protocol witness table for OfferMoreItemsCatTemplater;
    *uint64_t v36 = v31;
    uint64_t v37 = (uint64_t *)(v35 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_viewBuilder);
    void v37[3] = v33;
    v37[4] = (uint64_t)&protocol witness table for OfferMoreItemsViewBuilder;
    *uint64_t v37 = v34;
    v52(v35 + OBJC_IVAR____TtC18SiriLinkFlowPlugin28OfferMoreItemsOutputProvider_nextPage, v18, v12);
    type metadata accessor for ContinueReadingConfirmationFlowStrategy();
    uint64_t v38 = type metadata accessor for RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser();
    uint64_t v39 = OUTLINED_FUNCTION_4_20();
    uint64_t v63 = v38;
    uint64_t v64 = lazy protocol witness table accessor for type OutputAction and conformance OutputAction(&lazy protocol witness table cache variable for type RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser and conformance RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser, v40, (void (*)(uint64_t))type metadata accessor for RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser);
    uint64_t v62 = v39;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    ContinueReadingConfirmationFlowStrategy.__allocating_init(outputProducer:confirmationResponseParser:)();
    type metadata accessor for ContinueReadingConfirmationFlowStrategy.ContinueReadingActionGroupReturning();
    OUTLINED_FUNCTION_35_2();
    swift_unknownObjectRetain();
    uint64_t v41 = ContinueReadingConfirmationFlowStrategy.ContinueReadingActionGroupReturning.init(yesGroup:noGroup:cancelGroup:)();
    uint64_t v42 = dispatch thunk of ContinueReadingConfirmationFlowStrategy.makeFlow(outputPublisher:)();
    uint64_t v61 = v41;
    uint64_t v62 = v42;
    type metadata accessor for AnyFlowAndActionGroupReturning();
    OUTLINED_FUNCTION_35_2();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy>);
    lazy protocol witness table accessor for type PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy> and conformance PromptForConfirmationFlow<A>();
    uint64_t v43 = AnyFlowAndActionGroupReturning.init<A, B>(flow:groupReturning:)();
    uint64_t v44 = v60;
    *uint64_t v60 = v43;
    uint64_t v45 = enum case for FlowTransition.flow(_:);
    type metadata accessor for FlowTransition();
    OUTLINED_FUNCTION_6();
    (*(void (**)(uint64_t *, uint64_t))(v46 + 104))(v44, v45);
    uint64_t v47 = enum case for ActionGroupTransition.following(_:);
    uint64_t v48 = type metadata accessor for ActionGroupTransition();
    OUTLINED_FUNCTION_6();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v49 + 104))(v44, v47, v48);
    __swift_storeEnumTagSinglePayload((uint64_t)v44, 0, 1, v48);
    type metadata accessor for StaticActionGroup();
    OUTLINED_FUNCTION_35_2();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v23 = StaticActionGroup.init(actions:transition:debugDescription:)();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v56);
  }
  lazy protocol witness table accessor for type OutputAction and conformance OutputAction(&lazy protocol witness table cache variable for type StaticActionGroup and conformance StaticActionGroup, 255, (void (*)(uint64_t))&type metadata accessor for StaticActionGroup);
  return v23;
}

uint64_t RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser.parseConfirmationResponse(input:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SiriKitConfirmationState();
  OUTLINED_FUNCTION_0_2();
  uint64_t v5 = v4;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_3_23();
  Input.parse.getter();
  static VoiceCommandConfirmationUtils.getSiriKitConfirmationState(parse:)((uint64_t)v11);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v12);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v11, v3);
  int v16 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v9, v3);
  if (v16 != enum case for SiriKitConfirmationState.unset(_:))
  {
    if (v16 != enum case for SiriKitConfirmationState.cancelled(_:))
    {
      if (v16 == enum case for SiriKitConfirmationState.confirmed(_:))
      {
        uint64_t v21 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
LABEL_8:
        uint64_t v22 = *v21;
        uint64_t v23 = type metadata accessor for ConfirmationResponse();
        OUTLINED_FUNCTION_6();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 104))(a1, v22, v23);
        uint64_t v17 = a1;
        uint64_t v18 = 0;
        uint64_t v19 = 1;
        uint64_t v20 = v23;
        return __swift_storeEnumTagSinglePayload(v17, v18, v19, v20);
      }
      if (v16 != enum case for SiriKitConfirmationState.rejected(_:))
      {
        type metadata accessor for ConfirmationResponse();
        uint64_t v26 = OUTLINED_FUNCTION_7();
        __swift_storeEnumTagSinglePayload(v26, v27, v28, v29);
        return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v3);
      }
    }
    uint64_t v21 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
    goto LABEL_8;
  }
  type metadata accessor for ConfirmationResponse();
  uint64_t v17 = OUTLINED_FUNCTION_7();
  return __swift_storeEnumTagSinglePayload(v17, v18, v19, v20);
}

uint64_t protocol witness for ConfirmationResponseParsing.parseConfirmationResponse(input:) in conformance RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t RunCustomIntentReadingDelegate.Templating.intro.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1, a1);
}

uint64_t RunCustomIntentReadingDelegate.Templating.itemDescription.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 40, a1);
}

uint64_t RunCustomIntentReadingDelegate.Templating.offerMore.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 80, a1);
}

uint64_t RunCustomIntentReadingDelegate.Templating.init(intro:itemDescription:offerMore:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with take of AceServiceInvokerAsync(a1, a4);
  outlined init with take of AceServiceInvokerAsync(a2, a4 + 40);

  return outlined init with take of AceServiceInvokerAsync(a3, a4 + 80);
}

uint64_t RunCustomIntentReadingDelegate.deinit()
{
  swift_release();
  outlined destroy of RunCustomIntentReadingDelegate.Templating(v0 + 32);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
  return v0;
}

uint64_t RunCustomIntentReadingDelegate.__deallocating_deinit()
{
  RunCustomIntentReadingDelegate.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PaginatedConversationDelegate.pageSizePadding.getter in conformance RunCustomIntentReadingDelegate()
{
  return PaginatedConversationDelegate.pageSizePadding.getter();
}

uint64_t protocol witness for PaginatedConversationDelegate.makeAction(introducingItems:) in conformance RunCustomIntentReadingDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t protocol witness for PaginatedConversationDelegate.makeAction(forItem:) in conformance RunCustomIntentReadingDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t protocol witness for PaginatedConversationDelegate.makeGroup(withActions:nextPage:) in conformance RunCustomIntentReadingDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t protocol witness for ReadingFlowDelegate.groupWillTransition(_:) in conformance RunCustomIntentReadingDelegate()
{
  return ReadingFlowDelegate.groupWillTransition(_:)();
}

uint64_t protocol witness for ReadingFlowDelegate.groupDidComplete(_:) in conformance RunCustomIntentReadingDelegate()
{
  return ReadingFlowDelegate.groupDidComplete(_:)();
}

uint64_t protocol witness for ReadingFlowDelegate.flowWillTransition(_:) in conformance RunCustomIntentReadingDelegate()
{
  return ReadingFlowDelegate.flowWillTransition(_:)();
}

uint64_t protocol witness for ReadingFlowDelegate.flowDidComplete(_:) in conformance RunCustomIntentReadingDelegate()
{
  return ReadingFlowDelegate.flowDidComplete(_:)();
}

uint64_t protocol witness for ReadingFlowDelegate.actionWillExecute(_:) in conformance RunCustomIntentReadingDelegate()
{
  return ReadingFlowDelegate.actionWillExecute(_:)();
}

uint64_t protocol witness for ReadingFlowDelegate.actionDidExecute(_:) in conformance RunCustomIntentReadingDelegate()
{
  return ReadingFlowDelegate.actionDidExecute(_:)();
}

uint64_t protocol witness for ReadingFlowDelegate.handleInterruption(_:) in conformance RunCustomIntentReadingDelegate()
{
  return ReadingFlowDelegate.handleInterruption(_:)();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in RunCustomIntentReadingDelegate.makeAction(introducingItems:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in RunCustomIntentReadingDelegate.makeAction(forItem:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t outlined init with copy of RunCustomIntentReadingDelegate.Templating?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in RunCustomIntentReadingDelegate.makeGroup(withActions:nextPage:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t type metadata accessor for RunCustomIntentReadingDelegate.CustomIntentsConfirmResponseParser()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type OutputAction and conformance OutputAction(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy> and conformance PromptForConfirmationFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy> and conformance PromptForConfirmationFlow<A>;
  if (!lazy protocol witness table cache variable for type PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy> and conformance PromptForConfirmationFlow<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptForConfirmationFlow<ContinueReadingConfirmationFlowStrategy> and conformance PromptForConfirmationFlow<A>);
  }
  return result;
}

uint64_t outlined destroy of RunCustomIntentReadingDelegate.Templating(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for RunCustomIntentReadingDelegate()
{
  return self;
}

uint64_t destroy for RunCustomIntentReadingDelegate.Templating(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);

  return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 80);
}

_OWORD *initializeWithCopy for RunCustomIntentReadingDelegate.Templating(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

uint64_t *assignWithCopy for RunCustomIntentReadingDelegate.Templating(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

void *__swift_memcpy120_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x78uLL);
}

uint64_t assignWithTake for RunCustomIntentReadingDelegate.Templating(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for RunCustomIntentReadingDelegate.Templating(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 120))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RunCustomIntentReadingDelegate.Templating(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RunCustomIntentReadingDelegate.Templating()
{
  return &type metadata for RunCustomIntentReadingDelegate.Templating;
}

uint64_t OUTLINED_FUNCTION_4_20()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_6_21()
{
  return swift_allocObject();
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.__allocating_init(appBundleId:deviceState:outputPublisher:)(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  uint64_t v8 = swift_allocObject();
  ShortcutsLinkPromptForContinueInAppFlowStrategy.init(appBundleId:deviceState:outputPublisher:)(a1, a2, a3, a4);
  return v8;
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.init(appBundleId:deviceState:outputPublisher:)(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  outlined init with take of AceServiceInvokerAsync(a3, v4 + 32);
  outlined init with take of AceServiceInvokerAsync(a4, v4 + 72);
  return v4;
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:)(uint64_t a1)
{
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_20_0();
  uint64_t v4 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_2();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v12 = OUTLINED_FUNCTION_16(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_20_0();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v15, 1, 1, v16);
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = 0;
  v17[3] = 0;
  v17[4] = v1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a1, v4);
  uint64_t v19 = Logger.logObject.getter();
  uint64_t v20 = v4;
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v23 = Input.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v20);
    _os_log_impl(&dword_0, v19, v21, "#ShortcutsLinkPromptForContinueInAppFlowStrategy on input: %s", v22, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v20);
  }

  Input.parse.getter();
  char v25 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  OUTLINED_FUNCTION_16_15();
  v26();
  switch(v25)
  {
    case 2:
      goto LABEL_9;
    case 3:
      return static ActionForInput.ignore()();
    default:
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v27) {
        return static ActionForInput.cancel()();
      }
      if (v25)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        return static ActionForInput.cancel()();
      }
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v29) {
        return static ActionForInput.cancel()();
      }
      return static ActionForInput.handle()();
  }
}

uint64_t closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  return _swift_task_switch(closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:), 0, 0);
}

uint64_t closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:)()
{
  OUTLINED_FUNCTION_21_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v1[13] = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v0, "#ShortcutsLinkPromptForContinueInAppFlowStrategy submitting empty output to clear screen and prevent double-taps", v5, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v6 = v1[12];

  outlined init with copy of DeviceState(v6 + 72, (uint64_t)(v1 + 2));
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v7);
  static OutputUtils.makeTemporaryOutput()(v1 + 7);
  uint64_t v9 = (void *)swift_task_alloc();
  v1[14] = v9;
  *uint64_t v9 = v1;
  v9[1] = closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:);
  uint64_t v10 = OUTLINED_FUNCTION_28_12();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v10, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  os_log_type_t v4 = v2 + 56;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 120) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + 16);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    os_log_type_t v4 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl(&dword_0, v2, v0, "#ShortcutsLinkPromptForContinueInAppFlowStrategy failed to submit empty output to clear screen", v4, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_18_0();
  return v5();
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.parseConfirmationResponse(input:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[3] = v1;
  v0[4] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_16(v3);
  v0[5] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for Parse();
  v0[6] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v0[7] = v5;
  v0[8] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  NSObject *v1;
  char v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  const char *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  os_log_type_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  uint64_t v23 = v0;
  uint64_t v1 = v0[8];
  Input.parse.getter();
  uint64_t v2 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  uint64_t v3 = OUTLINED_FUNCTION_22_19();
  v4(v3);
  if (v2 == 3)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_32(v7)) {
      goto LABEL_26;
    }
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v8 = 0;
    uint64_t v9 = "#ShortcutsLinkPromptForContinueInAppFlowStrategy failed to receive confirmation";
    goto LABEL_25;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.voiceCommands);
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    if (v2)
    {
      if (v2 == 1) {
        uint64_t v13 = 28526;
      }
      else {
        uint64_t v13 = 0x6C65636E6163;
      }
      if (v2 == 1) {
        uint64_t v14 = 0xE200000000000000;
      }
      else {
        uint64_t v14 = 0xE600000000000000;
      }
    }
    else
    {
      uint64_t v14 = 0xE300000000000000;
      uint64_t v13 = 7562617;
    }
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v1, v11, "#ShortcutsLinkPromptForContinueInAppFlowStrategy received confirmation: %s", v12, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }

  if (!v2)
  {
    uint64_t v16 = v0[5];
    uint64_t v17 = enum case for ConfirmationResponse.confirmed(_:);
    uint64_t v18 = type metadata accessor for ConfirmationResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v16, v17, v18);
    __swift_storeEnumTagSinglePayload(v16, 0, 1, v18);
    SimpleConfirmationResponseProvider.init(_:)();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    goto LABEL_27;
  }
  if (v2 == 1)
  {
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v15 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v15))
    {
      uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v8 = 0;
      uint64_t v9 = "#ShortcutsLinkPromptForContinueInAppFlowStrategy shouldn't receive no in parse";
LABEL_25:
      _os_log_impl(&dword_0, v6, (os_log_type_t)v1, v9, v8, 2u);
      OUTLINED_FUNCTION_7_0();
    }
  }
  else
  {
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v20))
    {
      uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v8 = 0;
      uint64_t v9 = "#ShortcutsLinkPromptForContinueInAppFlowStrategy shouldn't receive cancel in parse";
      goto LABEL_25;
    }
  }
LABEL_26:

  lazy protocol witness table accessor for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
LABEL_27:
  return v19();
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[32] = v2;
  v1[33] = v0;
  v1[31] = v3;
  uint64_t v4 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[34] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[35] = v5;
  v1[36] = OUTLINED_FUNCTION_25();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v6);
  v1[37] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_16(v7);
  v1[38] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[39] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[40] = v9;
  v1[41] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  v1[42] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[43] = v11;
  v1[44] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v12);
  v1[45] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *inited;
  void *v7;
  uint64_t v9;

  OUTLINED_FUNCTION_21_0();
  type metadata accessor for ShortcutsLinkNLContextProvider();
  *(void *)(v0 + 368) = swift_initStackObject();
  static Device.current.getter();
  type metadata accessor for RunLinkActionCATs();
  OUTLINED_FUNCTION_18_15();
  uint64_t v1 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATsSimple();
  OUTLINED_FUNCTION_18_15();
  uint64_t v2 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_18_15();
  uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_18_15();
  uint64_t v4 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  OUTLINED_FUNCTION_18_15();
  uint64_t v5 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for LinkActionDialogTemplating();
  inited = (void *)swift_initStackObject();
  *(void *)(v0 + 376) = inited;
  *(void *)(v0 + 384) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)((long long *)(v0 + 144), v1, v2, v3, v4, v5, inited);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v7;
  char *v7 = v0;
  v7[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  return LinkActionDialogTemplating.makeConfirmationButtonLabel(confirmationVerb:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  *uint64_t v4 = v5;
  v3[50] = v6;
  v3[51] = v7;
  v3[52] = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    v3[53] = v11;
    *uint64_t v11 = v5;
    v11[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    return static LabelTemplates.cancel()();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  v2[54] = v4;
  v2[55] = v5;
  v2[56] = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_8_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v40 = v0;
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v33 = *(void *)(v0 + 432);
  uint64_t v34 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v35 = *(void *)(v0 + 352);
  uint64_t v36 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v37 = *(void *)(v0 + 272);
  uint64_t v38 = *(void *)(v0 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ShortcutsLinkNLContextProvider.makeContextForActionConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)(v3, v2, v33, v1, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static DialogPhase.confirmation.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v35, v36);
  __swift_storeEnumTagSinglePayload(v5, 0, 1, v36);
  OutputGenerationManifest.nlContextUpdate.setter();
  static TemplatingResult.getListenAfterSpeakingDisabled()();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v38, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v37);
  uint64_t v7 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v38, v37);
  if (v7)
  {
    uint64_t v8 = *(void *)(v0 + 264);
    type metadata accessor for App();
    uint64_t v9 = *(void *)(v8 + 16);
    *(void *)(v0 + 456) = v9;
    uint64_t v10 = *(void *)(v8 + 24);
    *(void *)(v0 + 464) = v10;
    swift_bridgeObjectRetain();
    App.__allocating_init(appIdentifier:)();
    uint64_t v11 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(v8 + 32, 2);
    uint64_t v13 = v12;
    swift_release();
    *(void *)(v0 + 472) = v13;
    *(void *)(v0 + 480) = v11;
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
    uint64_t v15 = 0xE000000000000000;
    if (v13) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    if ((v15 & 0x2000000000000000) != 0) {
      uint64_t v14 = HIBYTE(v15) & 0xF;
    }
    if (!v14)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
      swift_retain();
      uint64_t v17 = Logger.logObject.getter();
      uint64_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_0, v17, v18, "#ShortcutsLinkPromptForContinueInAppFlowStrategy: failed to get app's displayName; bundleId='%s'",
          v19,
          0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        swift_release();
      }
    }
    *(void *)(v0 + 488) = objc_msgSend(*(id *)(v0 + 256), "dialog", v33, v34);
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v31;
    *uint64_t v31 = v0;
    v31[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    OUTLINED_FUNCTION_28_12();
    OUTLINED_FUNCTION_2_1();
    return LinkActionDialogTemplating.actionConfirmationHeader(customDialog:)();
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 552) = v20;
    *uint64_t v20 = v21;
    v20[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:);
    OUTLINED_FUNCTION_2_1();
    return ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:)(v22, v23, v24, v25, v26, v27, v28);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 504) = v0;
  swift_task_dealloc();

  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(v5 + 512) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 184;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  void (*v4)(void);
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void **)(v0 + 512);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t v2 = OUTLINED_FUNCTION_9_24();
  v3(v2);
  OUTLINED_FUNCTION_16_15();
  v4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 560) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(void);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_21_0();
  swift_release();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_9_24();
  v1(v0);
  OUTLINED_FUNCTION_16_15();
  v2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v3();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_8_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_20_21();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_25_12();
  v1(v0);
  uint64_t v2 = OUTLINED_FUNCTION_23_16();
  v3(v2);
  OUTLINED_FUNCTION_8_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_20_21();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_25_12();
  v1(v0);
  uint64_t v2 = OUTLINED_FUNCTION_23_16();
  v3(v2);
  OUTLINED_FUNCTION_8_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

void ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v1 = (void *)v0[64];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[58];
  uint64_t v19 = v0[55];
  if (v2) {
    unint64_t v4 = v0[59];
  }
  else {
    unint64_t v4 = 0xE000000000000000;
  }
  if (v2) {
    uint64_t v5 = v0[60];
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = objc_msgSend(v1, "catId", v0[50], v0[57], v0[51], v0[54]);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  swift_bridgeObjectRetain();
  Swift::String_optional v7 = DialogExecutionResult.firstDialogFullPrint()();
  v0[65] = (uint64_t)v7.value._object;
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[66] = ResponseFactory.init()();
  v0[26] = type metadata accessor for WorkflowDataModels(0);
  v0[27] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 23);
  uint64_t *boxed_opaque_existential_1 = v16;
  boxed_opaque_existential_1[1] = v3;
  boxed_opaque_existential_1[2] = v5;
  boxed_opaque_existential_1[3] = v4;
  boxed_opaque_existential_1[4] = v15;
  boxed_opaque_existential_1[5] = v17;
  boxed_opaque_existential_1[6] = v18;
  boxed_opaque_existential_1[7] = v19;
  *((_OWORD *)boxed_opaque_existential_1 + 4) = xmmword_216970;
  *((unsigned char *)boxed_opaque_existential_1 + 80) = 0;
  *(Swift::String_optional *)(boxed_opaque_existential_1 + 11) = v7;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_211C70;
  *(void *)(v9 + 32) = v1;
  uint64_t v20 = v9;
  specialized Array._endMutation()();
  v0[67] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(0, 0xF000000000000000);
  swift_bridgeObjectRetain();
  id v10 = v1;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[68] = (uint64_t)v11;
  *uint64_t v11 = v12;
  v11[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:);
  OUTLINED_FUNCTION_2_1();
  __asm { BR              X4 }
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[42] = a7;
  v8[43] = v7;
  v8[40] = a5;
  v8[41] = a6;
  v8[38] = a3;
  v8[39] = a4;
  v8[36] = a1;
  v8[37] = a2;
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v8[44] = v9;
  v8[45] = *(void *)(v9 - 8);
  v8[46] = swift_task_alloc();
  type metadata accessor for CATOption();
  v8[47] = swift_task_alloc();
  return _swift_task_switch(ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:), 0, 0);
}

uint64_t ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:)()
{
  uint64_t v1 = *(void **)(v0 + 296);
  static Device.current.getter();
  type metadata accessor for RunLinkActionCATs();
  OUTLINED_FUNCTION_19_12();
  uint64_t v2 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATsSimple();
  OUTLINED_FUNCTION_19_12();
  uint64_t v3 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_19_12();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_19_12();
  uint64_t v5 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  OUTLINED_FUNCTION_19_12();
  uint64_t v6 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for LinkActionDialogTemplating();
  inited = (void *)swift_initStackObject();
  *(void *)(v0 + 384) = inited;
  *(void *)(v0 + 392) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)((long long *)(v0 + 248), v2, v3, v4, v5, v6, inited);
  *(void *)(v0 + 400) = [v1 dialog];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v8;
  *uint64_t v8 = v0;
  v8[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:);
  OUTLINED_FUNCTION_28_12();
  return LinkActionDialogTemplating.makeContinueInAppPattern(customResponse:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 416) = v5;
  *(void *)(v3 + 424) = v0;
  swift_task_dealloc();
  if (!v0) {

  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 432) = [*(id *)(v0 + 296) dialog];
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 440) = v1;
  void *v1 = v0;
  v1[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:);
  OUTLINED_FUNCTION_28_12();
  return LinkActionDialogTemplating.actionConfirmationHeader_preRFv2(customDialog:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  *(void *)(v7 + 448) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    *(void *)(v7 + 456) = v3;
    *(void *)(v7 + 464) = v5;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  unsigned char v12[40];
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  uint64_t v1 = v0[57];
  uint64_t v11 = v0[58];
  uint64_t v2 = v0[43];
  uint64_t v4 = v0[40];
  uint64_t v3 = v0[41];
  uint64_t v6 = v0[38];
  uint64_t v5 = v0[39];
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Device.current.getter();
  ActionConfirmationVisual.init(appBundleId:confirmButton:noButton:destructive:prompt:viewData:deviceState:)(v7, v8, v6, v5, v4, v3, 0, v11, (uint64_t)(v0 + 18), v1, 0, 0xF000000000000000, (uint64_t)v12);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[59] = v9;
  *uint64_t v9 = v0;
  v9[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:);
  return ActionConfirmationVisual.data.getter();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[60] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[61] = v3;
    v7[62] = v5;
    outlined release of ActionConfirmationVisual((uint64_t)(v7 + 18));
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = (void *)v0[52];
  uint64_t v3 = v0[45];
  uint64_t v2 = v0[46];
  uint64_t v4 = v0[44];
  uint64_t v5 = v0[42];
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(v0[62], v0[61], v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = [v1 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[63] = ResponseFactory.init()();
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)
                                                          + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[64] = v7;
  char *v7 = v8;
  v7[1] = ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation_preRFv2(itemToConfirm:continueLabel:cancelLabel:manifest:);
  uint64_t v9 = v0[52];
  uint64_t v10 = v0[46];
  uint64_t v11 = v0[36];
  return v13(v11, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 520) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();

  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_22_19();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 416);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 416);
  outlined release of ActionConfirmationVisual(v0 + 144);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 352);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

uint64_t DescribeCustomIntentItemOutputProvider.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  return v0;
}

uint64_t DescribeCustomIntentItemOutputProvider.__deallocating_deinit()
{
  DescribeCustomIntentItemOutputProvider.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance ShortcutsLinkPromptForContinueInAppFlowStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ShortcutsLinkPromptForContinueInAppFlowStrategy.parseConfirmationResponse(input:)();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance ShortcutsLinkPromptForContinueInAppFlowStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return ShortcutsLinkPromptForContinueInAppFlowStrategy.makePromptForConfirmation(itemToConfirm:)();
}

uint64_t sub_CE1B8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v1 + 16) = v7;
  void *v7 = v8;
  v7[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return closure #1 in ShortcutsLinkPromptForContinueInAppFlowStrategy.actionForInput(_:)(v3, v4, v5, v6);
}

unint64_t lazy protocol witness table accessor for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError;
  if (!lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError;
  if (!lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShortcutsLinkConfirmationError and conformance ShortcutsLinkConfirmationError);
  }
  return result;
}

uint64_t type metadata accessor for ShortcutsLinkPromptForContinueInAppFlowStrategy()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_8_17()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_9_24()
{
  return *(void *)(v0 + 328);
}

uint64_t OUTLINED_FUNCTION_18_15()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_19_12()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_20_21()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_22_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_12()
{
  return v0;
}

SiriLinkFlowPlugin::CustomIntentDefinition_optional __swiftcall INCodableDescription.asCustomIntentDescription()()
{
  return (SiriLinkFlowPlugin::CustomIntentDefinition_optional)static CustomRequestDefinition.buildFromIntentDescription(intentDescription:)(v0);
}

id INCodableDescription.attributeForParameter(intent:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(a2, a3, v3);
}

id SiriStateObserver.__allocating_init(runnerClient:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return SiriStateObserver.init(runnerClient:)(a1);
}

id SiriStateObserver.init(runnerClient:)(uint64_t a1)
{
  v1[OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_shouldCancelRunner] = 1;
  outlined init with copy of DeviceState(a1, (uint64_t)&v1[OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_runnerClient]);
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SiriStateObserver();
  id v3 = objc_msgSendSuper2(&v5, "init");
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v3;
}

uint64_t type metadata accessor for SiriStateObserver()
{
  return self;
}

void SiriStateObserver.notifyObserver(_:didChangeStateFrom:to:)(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  unint64_t v7 = a3 & 2;
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 8) = 1024;
    LODWORD(v25[0]) = v7 >> 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v9, v10, "#SiriStateObserver.notifyObserver has fromState: %{BOOL}d, toState: %{BOOL}d", (uint8_t *)v11, 0xEu);
    OUTLINED_FUNCTION_7_0();
  }

  if (((a2 & 2) != 0) == (v7 != 0))
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v14 = 0;
      uint64_t v15 = "#SiriStateObserver.notifyObserver active session state didn't change, returning...";
      goto LABEL_11;
    }
LABEL_12:

    return;
  }
  if (v7)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v14 = 0;
      uint64_t v15 = "#SiriStateObserver.notifyObserver still has active session, returning...";
LABEL_11:
      _os_log_impl(&dword_0, v12, v13, v15, v14, 2u);
      OUTLINED_FUNCTION_7_0();
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  uint64_t v16 = OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_shouldCancelRunner;
  int v17 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_shouldCancelRunner);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  if (v17 == 1)
  {
    if (v20)
    {
      os_log_type_t v21 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)os_log_type_t v21 = 0;
      _os_log_impl(&dword_0, v18, v19, "#SiriStateObserver stopping runner client", v21, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    outlined init with copy of DeviceState(v4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_runnerClient, (uint64_t)v25);
    uint64_t v22 = v26;
    uint64_t v23 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v23 + 56))(v22, v23);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
  }
  else
  {
    if (v20)
    {
      unint64_t v24 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl(&dword_0, v18, v19, "#SiriStateObserver not canceling the runner because shouldCancelRunner = false, flipping the switch...", v24, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    *(unsigned char *)(v4 + v16) = 1;
  }
}

Swift::Void __swiftcall SiriStateObserver.doNotCancelRunner()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    objc_super v5 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)objc_super v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "#SiriStateObserver resetContinuationOnAppLaunch", v5, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  *(unsigned char *)(v1 + OBJC_IVAR____TtC18SiriLinkFlowPlugin17SiriStateObserver_shouldCancelRunner) = 0;
}

void SiriStateObserver.init()()
{
}

id SiriStateObserver.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SiriStateObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t ContactResolving.makeRecommendations(queries:config:)()
{
  type metadata accessor for ContactResolver();
  swift_allocObject();
  ContactResolver.init()();
  uint64_t v0 = dispatch thunk of ContactResolver.makeRecommendations(queries:config:)();
  swift_release();
  return v0;
}

uint64_t ContactResolving.contactResolverConfig(locale:)(uint64_t a1)
{
  type metadata accessor for RecommenderType();
  OUTLINED_FUNCTION_0_2();
  uint64_t v28 = v2;
  uint64_t v29 = v1;
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_20_0();
  uint64_t v27 = v4 - v3;
  uint64_t v25 = type metadata accessor for SearchSuggestedContacts();
  OUTLINED_FUNCTION_0_2();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for ContactResolverDomain();
  __chkstk_darwin(v11 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleTypePreference?);
  __chkstk_darwin(v12 - 8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_2();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_20_0();
  uint64_t v22 = v21 - v20;
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.flowTask.getter();
  swift_release();
  dispatch thunk of FlowTaskProvider.id.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v22, a1, v16);
  uint64_t v23 = type metadata accessor for ContactHandleTypePreference();
  __swift_storeEnumTagSinglePayload(v15, 1, 1, v23);
  static ContactResolverDomain.all.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v10, enum case for SearchSuggestedContacts.ifOnlyMatchIsSuggested(_:), v25);
  (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))(v27, enum case for RecommenderType.mlRecommender(_:), v29);
  return ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:includeResolutionSignals:)();
}

uint64_t protocol witness for ContactResolving.contactResolverConfig(locale:) in conformance ContactResolver(uint64_t a1)
{
  return ContactResolving.contactResolverConfig(locale:)(a1);
}

uint64_t protocol witness for ContactResolving.makeRecommendations(queries:config:) in conformance ContactResolver()
{
  return dispatch thunk of ContactResolver.makeRecommendations(queries:config:)();
}

void *WorkflowDialogTemplating.__allocating_init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_33_11();
  uint64_t v17 = v16;
  uint64_t v18 = (void *)swift_allocObject();
  outlined init with take of AceServiceInvokerAsync(v17, (uint64_t)(v18 + 2));
  v18[7] = v15;
  v18[8] = v14;
  v18[9] = v13;
  v18[10] = v12;
  v18[11] = v11;
  v18[12] = v10;
  v18[13] = v9;
  v18[14] = a9;
  return v18;
}

void *WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_33_11();
  outlined init with take of AceServiceInvokerAsync(v17, (uint64_t)(v10 + 2));
  v10[7] = v16;
  v10[8] = v15;
  v10[9] = v14;
  v10[10] = v13;
  v10[11] = v12;
  v10[12] = v11;
  v10[13] = v9;
  v10[14] = a9;
  return v10;
}

uint64_t WorkflowDialogTemplating.makeShowAlertPattern(request:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowDialogTemplating.makeShowAlertPattern(request:));
}

uint64_t WorkflowDialogTemplating.makeShowAlertPattern(request:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void **)(v0[3] + 112);
  uint64_t v3 = swift_task_alloc();
  v0[4] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v8 = (uint64_t (*)(void, uint64_t (*)(uint64_t), uint64_t))(*(void *)(class metadata base offset for WorkflowRunnerCATPatternsExecutor
                                                                                            + *v2
                                                                                            + 16)
                                                                                + **(int **)(class metadata base offset for WorkflowRunnerCATPatternsExecutor
                                                                                           + *v2
                                                                                           + 16));
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_40_7(v4);
  *uint64_t v5 = v6;
  v5[1] = WorkflowDialogTemplating.makeShowAlertPattern(request:);
  return v8(0, partial apply for closure #1 in WorkflowDialogTemplating.makeShowAlertPattern(request:), v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_34_11();
  return v0();
}

uint64_t closure #1 in WorkflowDialogTemplating.makeShowAlertPattern(request:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(a2, (SEL *)&selRef_message);
  if (v7)
  {
    SpeakableString.init(print:speak:)();
    uint64_t v8 = type metadata accessor for SpeakableString();
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = type metadata accessor for SpeakableString();
    uint64_t v9 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v6, v9, 1, v8);
  uint64_t v10 = type metadata accessor for WorkflowRunnerShowAlertParameters(0);
  return outlined assign with take of SpeakableString?((uint64_t)v6, a1 + *(int *)(v10 + 20));
}

uint64_t partial apply for closure #1 in WorkflowDialogTemplating.makeShowAlertPattern(request:)(uint64_t a1)
{
  return closure #1 in WorkflowDialogTemplating.makeShowAlertPattern(request:)(a1, *(void **)(v1 + 16));
}

uint64_t WorkflowDialogTemplating.makeShowAlertDialog(request:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;

  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v3, (SEL *)&selRef_message);
  uint64_t v6 = v5;
  uint64_t v7 = outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v3, (SEL *)&selRef_prompt);
  WorkflowDialogTemplating.getCustomPrompt(message:prompt:)(v4, v6, v7, v8, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int **)(class metadata base offset for WorkflowRunnerCATsSimple + **(void **)(v2 + 72) + 32);
  uint64_t v15 = (uint64_t (*)(uint64_t))((char *)v9 + *v9);
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_40_7(v10);
  *uint64_t v11 = v12;
  v11[1] = WorkflowDialogTemplating.makeShowAlertDialog(request:);
  uint64_t v13 = v0[4];
  return v15(v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 56) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of URL?(*(void *)(v0 + 32), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  uint64_t v2 = *(void *)(v0 + 56);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of URL?(*(void *)(v0 + 32), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_34_11();
  return v1();
}

uint64_t WorkflowDialogTemplating.confirmInteractionDialog(request:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 112) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_13_0();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = OUTLINED_FUNCTION_46_2(v5);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_57_1(v6);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_21_0();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)*v1;
  uint64_t v5 = (void *)*v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  v5[12] = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v7 = v4[7];
  uint64_t v8 = v4[6];
  uint64_t v9 = v4[5];
  uint64_t v10 = v4[4];
  if (!v0) {
    v5[13] = v3;
  }
  outlined destroy of URL?(v10, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v9, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v8, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void **)(v0 + 64);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_23_1();
  return v4(v2, v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 64);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

uint64_t WorkflowDialogTemplating.confirmInteractionDialog(request:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  id v15 = [*(id *)(v14 + 16) interaction];
  id v16 = [v15 intentResponse];
  *(void *)(v14 + 64) = v16;

  if (v16)
  {
    uint64_t v18 = *(void **)(v14 + 16);
    uint64_t v17 = *(void *)(v14 + 24);
    id v19 = [v18 interaction];
    id v20 = [v19 intent];
    *(void *)(v14 + 72) = v20;

    outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v18, (SEL *)&selRef_prompt);
    OUTLINED_FUNCTION_17_15();
    uint64_t v21 = OUTLINED_FUNCTION_52_2();
    v22(v21);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void **)(v17 + 104);
    *(void *)(v14 + 80) = OUTLINED_FUNCTION_10_26();
    uint64_t v26 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v20);
    WorkflowDialogTemplating.getAppName(bundleId:)(v26, v27);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    if (v29)
    {
      OUTLINED_FUNCTION_36_7();
      uint64_t v30 = 0;
    }
    else
    {
      uint64_t v30 = 1;
    }
    uint64_t v41 = *(void *)(v14 + 56);
    uint64_t v42 = type metadata accessor for SpeakableString();
    uint64_t v43 = 1;
    OUTLINED_FUNCTION_36_9(v41, v30);
    if (v24)
    {
      OUTLINED_FUNCTION_36_7();
      uint64_t v43 = 0;
    }
    uint64_t v44 = *(void *)(v14 + 40);
    uint64_t v45 = *(void *)(v14 + 32);
    OUTLINED_FUNCTION_36_9(*(void *)(v14 + 48), v43);
    [v20 _intentCategory];
    INIntentCategory.asINPBString()();
    OUTLINED_FUNCTION_36_7();
    OUTLINED_FUNCTION_36_9(v44, 0);
    id v46 = [v20 verb];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_36_7();
    __swift_storeEnumTagSinglePayload(v45, 0, 1, v42);
    uint64_t v58 = *(void *)(class metadata base offset for RunVoiceCommandCATsSimple + *v25 + 96)
        + **(int **)(class metadata base offset for RunVoiceCommandCATsSimple + *v25 + 96);
    uint64_t v59 = class metadata base offset for RunVoiceCommandCATsSimple + *v25 + 96;
    uint64_t v47 = (void *)swift_task_alloc();
    *(void *)(v14 + 88) = v47;
    void *v47 = v14;
    v47[1] = WorkflowDialogTemplating.confirmInteractionDialog(request:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_3();
    return v56(v48, v49, v50, v51, v52, v53, v54, v55, v58, v59, a11, a12, a13, a14);
  }
  else
  {
    lazy protocol witness table accessor for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError();
    swift_allocError();
    *uint64_t v31 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_3();
    return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t WorkflowDialogTemplating.confirmInteractionDialog_prerfv2(request:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 112) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  uint64_t v7 = OUTLINED_FUNCTION_46_2(v6);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_57_1(v7);
  *(void *)(v1 + 64) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v3 = v2;
  uint64_t v5 = v4[8];
  uint64_t v6 = v4[7];
  uint64_t v7 = v4[6];
  uint64_t v8 = v4[5];
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  *(void *)(v11 + 104) = v0;
  swift_task_dealloc();
  swift_release();
  outlined destroy of URL?(v8, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void **)(v0 + 72);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_23_1();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 72);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

uint64_t WorkflowDialogTemplating.confirmInteractionDialog_prerfv2(request:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  id v15 = [*(id *)(v14 + 24) interaction];
  id v16 = [v15 intentResponse];
  *(void *)(v14 + 72) = v16;

  if (v16)
  {
    uint64_t v18 = *(void **)(v14 + 24);
    uint64_t v17 = *(void *)(v14 + 32);
    id v19 = [v18 interaction];
    id v20 = [v19 intent];
    *(void *)(v14 + 80) = v20;

    outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v18, (SEL *)&selRef_prompt);
    OUTLINED_FUNCTION_17_15();
    uint64_t v21 = OUTLINED_FUNCTION_52_2();
    v22(v21);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void **)(v17 + 96);
    *(void *)(v14 + 88) = OUTLINED_FUNCTION_10_26();
    uint64_t v26 = outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v20);
    WorkflowDialogTemplating.getAppName(bundleId:)(v26, v27);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    if (v29)
    {
      OUTLINED_FUNCTION_36_7();
      uint64_t v30 = 0;
    }
    else
    {
      uint64_t v30 = 1;
    }
    uint64_t v41 = *(void *)(v14 + 64);
    uint64_t v42 = type metadata accessor for SpeakableString();
    uint64_t v43 = 1;
    OUTLINED_FUNCTION_36_9(v41, v30);
    if (v24)
    {
      OUTLINED_FUNCTION_36_7();
      uint64_t v43 = 0;
    }
    uint64_t v44 = *(void *)(v14 + 48);
    uint64_t v45 = *(void *)(v14 + 40);
    OUTLINED_FUNCTION_36_9(*(void *)(v14 + 56), v43);
    [v20 _intentCategory];
    INIntentCategory.asINPBString()();
    OUTLINED_FUNCTION_36_7();
    OUTLINED_FUNCTION_36_9(v44, 0);
    id v46 = [v20 verb];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_36_7();
    __swift_storeEnumTagSinglePayload(v45, 0, 1, v42);
    uint64_t v59 = *(void *)(class metadata base offset for RunVoiceCommandCATs + *v25 + 48)
        + **(int **)(class metadata base offset for RunVoiceCommandCATs + *v25 + 48);
    uint64_t v60 = class metadata base offset for RunVoiceCommandCATs + *v25 + 48;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v14 + 96) = v47;
    void *v47 = v48;
    v47[1] = WorkflowDialogTemplating.confirmInteractionDialog_prerfv2(request:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_3();
    return v57(v49, v50, v51, v52, v53, v54, v55, v56, v59, v60, a11, a12, a13, a14);
  }
  else
  {
    lazy protocol witness table accessor for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError();
    swift_allocError();
    *uint64_t v31 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_3();
    return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t WorkflowDialogTemplating.inputTextDialog_rfv1(request:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  v1[7] = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  void *v7 = v6;
  *(void *)(v8 + 80) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of URL?(*(void *)(v0 + 56), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of URL?(*(void *)(v0 + 56), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_35_10();
  return v1();
}

uint64_t WorkflowDialogTemplating.inputTextDialog_rfv1(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_11_0();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_26();
  a20 = v22;
  id v25 = [*(id *)(v22 + 32) textFieldConfiguration];
  id v26 = [v25 keyboardType];

  if (v26)
  {
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;
  }
  else
  {
    uint64_t v27 = 0;
    unint64_t v29 = 0;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_27_16(v30, (uint64_t)static Logger.voiceCommands);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (_DWORD *)OUTLINED_FUNCTION_30_11();
    a11 = OUTLINED_FUNCTION_22_3();
    *uint64_t v33 = 136315138;
    OUTLINED_FUNCTION_63_2();
    unint64_t v36 = v35 & 0xFFFF00000000FFFFLL | 0x7974700000;
    if (v34) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = v27;
    }
    if (v34) {
      unint64_t v38 = 0xE500000000000000;
    }
    else {
      unint64_t v38 = v29;
    }
    swift_bridgeObjectRetain();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &a11);
    OUTLINED_FUNCTION_58_4(v39);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_29_11();
    OUTLINED_FUNCTION_9_15(&dword_0, v40, v41, "#WorkflowDialogTemplating.inputTextDialog inputType: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_29_11();
  }

  uint64_t v43 = *(void **)(v22 + 32);
  uint64_t v42 = *(void *)(v22 + 40);
  outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v43, (SEL *)&selRef_message);
  uint64_t v44 = outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v43, (SEL *)&selRef_prompt);
  OUTLINED_FUNCTION_46_7(v44, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v46 = *(void **)(v42 + 64);
  *(void *)(v22 + 64) = OUTLINED_FUNCTION_41_8();
  if (v29)
  {
    OUTLINED_FUNCTION_36_7();
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v47 = 1;
  }
  uint64_t v48 = *(void *)(v22 + 48);
  uint64_t v49 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v48, v47, 1, v49);
  uint64_t v62 = *(void *)(class metadata base offset for WorkflowRunnerCATs + *v46 + 8)
      + **(int **)(class metadata base offset for WorkflowRunnerCATs + *v46 + 8);
  uint64_t v63 = class metadata base offset for WorkflowRunnerCATs + *v46 + 8;
  uint64_t v50 = swift_task_alloc();
  uint64_t v51 = (void *)OUTLINED_FUNCTION_32_12(v50);
  void *v51 = v52;
  v51[1] = WorkflowDialogTemplating.inputTextDialog_rfv1(request:);
  OUTLINED_FUNCTION_3();
  return v58(v53, v54, v55, v56, v57, v58, v59, v60, v62, v63, a11, a12, a13, a14);
}

uint64_t WorkflowDialogTemplating.inputTextDialog(request:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  uint64_t v4 = OUTLINED_FUNCTION_13_0();
  v1[6] = OUTLINED_FUNCTION_46_2(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  uint64_t v43 = v0;
  uint64_t v1 = [*(id *)(v0 + 24) textFieldConfiguration];
  uint64_t v2 = [v1 keyboardType];

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_27_16(v6, (uint64_t)static Logger.voiceCommands);
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (_DWORD *)OUTLINED_FUNCTION_30_11();
    uint64_t v42 = OUTLINED_FUNCTION_22_3();
    *uint64_t v9 = 136315138;
    OUTLINED_FUNCTION_63_2();
    uint64_t v12 = v11 & 0xFFFF00000000FFFFLL | 0x7974700000;
    if (v10) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = v3;
    }
    if (v10) {
      uint64_t v14 = 0xE500000000000000;
    }
    else {
      uint64_t v14 = v5;
    }
    swift_bridgeObjectRetain();
    id v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v42);
    OUTLINED_FUNCTION_55_3(v15, v16, v17, v18, v19, v20, v21, v22, v40, v0 + 24, (void *)(v0 + 16));
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_29_11();
    OUTLINED_FUNCTION_43(&dword_0, v23, v24, "#WorkflowDialogTemplating.inputTextDialog inputType: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_29_11();
  }

  id v26 = *(void **)(v0 + 24);
  id v25 = *(void *)(v0 + 32);
  outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v26, (SEL *)&selRef_message);
  uint64_t v27 = outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v26, (SEL *)&selRef_prompt);
  OUTLINED_FUNCTION_46_7(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v29 = *(void **)(v25 + 72);
  uint64_t v30 = OUTLINED_FUNCTION_41_8();
  *(void *)(v0 + 56) = v30;
  if (v5)
  {
    OUTLINED_FUNCTION_36_7();
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v31 = 1;
  }
  os_log_type_t v32 = *(void *)(v0 + 40);
  uint64_t v33 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v32, v31, 1, v33);
  uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(class metadata base offset for WorkflowRunnerCATsSimple
                                                                      + *v29
                                                                      + 16)
                                                          + **(int **)(class metadata base offset for WorkflowRunnerCATsSimple
                                                                     + *v29
                                                                     + 16));
  char v34 = swift_task_alloc();
  uint64_t v35 = (void *)OUTLINED_FUNCTION_68_1(v34);
  *uint64_t v35 = v36;
  v35[1] = WorkflowDialogTemplating.inputTextDialog(request:);
  uint64_t v37 = *(void *)(v0 + 40);
  unint64_t v38 = *(void *)(v0 + 48);
  return v41(v30, v37, v38);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 40);
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of URL?(*(void *)(v0 + 48), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  uint64_t v2 = *(void *)(v0 + 80);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of URL?(*(void *)(v0 + 48), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v1();
}

uint64_t WorkflowDialogTemplating.inputDateDialog(request:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  uint64_t v4 = OUTLINED_FUNCTION_13_0();
  v1[6] = OUTLINED_FUNCTION_46_2(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  uint64_t v40 = v0;
  uint64_t v1 = [*(id *)(v0 + 24) configuration];
  uint64_t v2 = [v1 datePickerMode];

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_27_16(v6, (uint64_t)static Logger.voiceCommands);
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (_DWORD *)OUTLINED_FUNCTION_30_11();
    uint64_t v39 = OUTLINED_FUNCTION_22_3();
    *uint64_t v9 = 136315138;
    OUTLINED_FUNCTION_63_2();
    uint64_t v12 = v11 & 0xFFFF00000000FFFFLL | 0x7974700000;
    if (v10) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = v3;
    }
    if (v10) {
      uint64_t v14 = 0xE500000000000000;
    }
    else {
      uint64_t v14 = v5;
    }
    swift_bridgeObjectRetain();
    id v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v39);
    OUTLINED_FUNCTION_55_3(v15, v16, v17, v18, v19, v20, v21, v22, v37, v0 + 24, (void *)(v0 + 16));
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_29_11();
    OUTLINED_FUNCTION_43(&dword_0, v23, v24, "#WorkflowDialogTemplating.inputDateDialog inputType: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_29_11();
  }

  id v25 = OUTLINED_FUNCTION_38_10(*(void **)(v0 + 32));
  *(void *)(v0 + 56) = v25;
  if (v5) {
    OUTLINED_FUNCTION_36_7();
  }
  id v26 = *(void **)(v0 + 24);
  uint64_t v27 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_77_1(v27);
  outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v26, (SEL *)&selRef_message);
  unint64_t v28 = outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v26, (SEL *)&selRef_prompt);
  OUTLINED_FUNCTION_45_5(v28, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_13();
  unint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v30
                                                                      + class metadata base offset for WorkflowRunnerCATsSimple)
                                                          + **(int **)(v30
                                                                     + class metadata base offset for WorkflowRunnerCATsSimple));
  uint64_t v31 = swift_task_alloc();
  os_log_type_t v32 = (void *)OUTLINED_FUNCTION_68_1(v31);
  *os_log_type_t v32 = v33;
  v32[1] = WorkflowDialogTemplating.inputDateDialog(request:);
  uint64_t v35 = *(void *)(v0 + 40);
  char v34 = *(void *)(v0 + 48);
  return v38(v25, v34, v35);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 72) = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_64_1();
  uint64_t v6 = *(void *)(v5 + 48);
  outlined destroy of URL?(*(void *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  if (v1)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_75_1();
    OUTLINED_FUNCTION_23_1();
    return v13(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v0();
}

uint64_t WorkflowDialogTemplating.inputDateDialog_prerfv2(request:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  v1[7] = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = *(void *)(v5 + 48);
  uint64_t v8 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v9 = v8;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  swift_release();
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v10, v11, v12);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_23_1();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_35_10();
  return v0();
}

uint64_t WorkflowDialogTemplating.inputDateDialog_prerfv2(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_11_0();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_26();
  a20 = v22;
  id v25 = [*(id *)(v22 + 32) configuration];
  id v26 = [v25 datePickerMode];

  if (v26)
  {
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;
  }
  else
  {
    uint64_t v27 = 0;
    unint64_t v29 = 0;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_27_16(v30, (uint64_t)static Logger.voiceCommands);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (_DWORD *)OUTLINED_FUNCTION_30_11();
    a11 = OUTLINED_FUNCTION_22_3();
    *uint64_t v33 = 136315138;
    OUTLINED_FUNCTION_63_2();
    unint64_t v36 = v35 & 0xFFFF00000000FFFFLL | 0x7974700000;
    if (v34) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = v27;
    }
    if (v34) {
      unint64_t v38 = 0xE500000000000000;
    }
    else {
      unint64_t v38 = v29;
    }
    swift_bridgeObjectRetain();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &a11);
    OUTLINED_FUNCTION_58_4(v39);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_29_11();
    OUTLINED_FUNCTION_9_15(&dword_0, v40, v41, "#WorkflowDialogTemplating.inputDateDialog inputType: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_29_11();
  }

  *(void *)(v22 + 64) = OUTLINED_FUNCTION_38_10(*(void **)(v22 + 40));
  if (v29) {
    OUTLINED_FUNCTION_36_7();
  }
  uint64_t v42 = *(void **)(v22 + 32);
  uint64_t v43 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_77_1(v43);
  outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v42, (SEL *)&selRef_message);
  uint64_t v44 = outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v42, (SEL *)&selRef_prompt);
  OUTLINED_FUNCTION_45_5(v44, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_13();
  uint64_t v59 = *(void *)(v46 + class metadata base offset for WorkflowRunnerCATs)
      + **(int **)(v46 + class metadata base offset for WorkflowRunnerCATs);
  uint64_t v60 = v46 + class metadata base offset for WorkflowRunnerCATs;
  uint64_t v47 = swift_task_alloc();
  uint64_t v48 = (void *)OUTLINED_FUNCTION_32_12(v47);
  *uint64_t v48 = v49;
  v48[1] = WorkflowDialogTemplating.inputDateDialog_prerfv2(request:);
  OUTLINED_FUNCTION_3();
  return v55(v50, v51, v52, v53, v54, v55, v56, v57, v59, v60, a11, a12, a13, a14);
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog(request:disambiguationItems:siriEnvironment:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  v1[6] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_12_19();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v5 + 88) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of URL?(*(void *)(v0 + 48), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  uint64_t v2 = *(void *)(v0 + 88);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of URL?(*(void *)(v0 + 48), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_35_10();
  return v1();
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog(request:disambiguationItems:siriEnvironment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = v12[5];
  uint64_t v14 = (void *)v12[2];
  outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v14, (SEL *)&selRef_message);
  uint64_t v15 = outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v14, (SEL *)&selRef_prompt);
  OUTLINED_FUNCTION_44_5(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_17_15();
  uint64_t v17 = OUTLINED_FUNCTION_76_2();
  v12[7] = v18(v17);
  id v19 = *(void **)(v13 + 88);
  v12[8] = OUTLINED_FUNCTION_10_26();
  uint64_t v30 = *(void *)(class metadata base offset for RunCustomIntentCATsSimple + *v19 + 80)
      + **(int **)(class metadata base offset for RunCustomIntentCATsSimple + *v19 + 80);
  uint64_t v31 = class metadata base offset for RunCustomIntentCATsSimple + *v19 + 80;
  id v20 = (void *)swift_task_alloc();
  v12[9] = v20;
  *id v20 = v12;
  v20[1] = WorkflowDialogTemplating.chooseFromListDialog(request:disambiguationItems:siriEnvironment:);
  OUTLINED_FUNCTION_22_16();
  return v25(v21, v22, v23, v24, v25, v26, v27, v28, a9, v30, v31, a12);
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog_preRFv2(request:disambiguationItems:siriEnvironment:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  v1[7] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_64_1();
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of URL?(*(void *)(v0 + 56), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of URL?(*(void *)(v0 + 56), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t WorkflowDialogTemplating.chooseFromListDialog_preRFv2(request:disambiguationItems:siriEnvironment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = v12[6];
  uint64_t v14 = (void *)v12[3];
  outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v14, (SEL *)&selRef_message);
  uint64_t v15 = outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(v14, (SEL *)&selRef_prompt);
  OUTLINED_FUNCTION_44_5(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_17_15();
  uint64_t v17 = OUTLINED_FUNCTION_76_2();
  v12[8] = v18(v17);
  id v19 = *(void **)(v13 + 80);
  v12[9] = OUTLINED_FUNCTION_10_26();
  uint64_t v31 = *(void *)(class metadata base offset for RunCustomIntentCATs + *v19 + 40)
      + **(int **)(class metadata base offset for RunCustomIntentCATs + *v19 + 40);
  uint64_t v32 = class metadata base offset for RunCustomIntentCATs + *v19 + 40;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v12[10] = v20;
  *id v20 = v21;
  v20[1] = WorkflowDialogTemplating.chooseFromListDialog_preRFv2(request:disambiguationItems:siriEnvironment:);
  OUTLINED_FUNCTION_22_16();
  return v27(v22, v23, v24, v25, v26, v27, v28, v29, a9, v31, v32, a12);
}

uint64_t WorkflowDialogTemplating.makeContinueInAppDialog(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[20] = v2;
  v1[21] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_16(v3);
  v1[22] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  int *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  OUTLINED_FUNCTION_30_4();
  uint64_t v1 = v0[21];
  if (OUTLINED_FUNCTION_70_1())
  {
    uint64_t v2 = *(int **)(*(void *)v0[21] + 272);
    uint64_t v15 = (uint64_t (*)(void))((char *)v2 + *v2);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[23] = v3;
    *uint64_t v3 = v0;
    v3[1] = WorkflowDialogTemplating.makeContinueInAppDialog(app:);
    return v15();
  }
  else
  {
    uint64_t v5 = v0[22];
    outlined init with copy of DeviceState(v1 + 16, (uint64_t)(v0 + 2));
    type metadata accessor for ContinueInAppCATWrapperSimple();
    swift_allocObject();
    outlined init with copy of DeviceState?((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
    SiriKitFlowCATWrapperSimple.init(deviceState:)();
    uint64_t v7 = v6;
    v0[24] = v6;
    outlined destroy of URL?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for DeviceState?);
    uint64_t v8 = *(void *)(v1 + 40);
    uint64_t v9 = *(void *)(v1 + 48);
    uint64_t v10 = (void *)OUTLINED_FUNCTION_19();
    __swift_project_boxed_opaque_existential_1(v10, v11);
    uint64_t v12 = DeviceState.asSiriKitDeviceState()(v8, v9);
    v0[25] = v12;
    v0[15] = &type metadata for AppInfoResolver;
    v0[16] = &protocol witness table for AppInfoResolver;
    App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(v1 + 16, v0 + 12, 2, v5);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*v7
                                                               + class metadata base offset for ContinueInAppCATWrapperSimple)
                                                   + **(int **)(*v7
                                                              + class metadata base offset for ContinueInAppCATWrapperSimple));
    uint64_t v13 = (void *)swift_task_alloc();
    v0[26] = v13;
    *uint64_t v13 = v0;
    v13[1] = WorkflowDialogTemplating.makeContinueInAppDialog(app:);
    uint64_t v14 = v0[22];
    return v16(v12, v14);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_12_19();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  v2[17] = v1;
  v2[18] = v4;
  v2[19] = v0;
  uint64_t v6 = *(void *)(v5 + 176);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v9 + 216) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for AppDisplayInfo?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 144);
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  return v2(v1);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WorkflowDialogTemplating.makeContinueInAppDialog_preRFv2(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_16(v4);
  v1[15] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v1[16] = v5;
  v1[17] = *(void *)(v5 - 8);
  v1[18] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  int *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[14] + 16;
  if (OUTLINED_FUNCTION_70_1())
  {
    uint64_t v2 = *(int **)(*(void *)v0[14] + 280);
    uint64_t v12 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[19] = v3;
    *uint64_t v3 = v4;
    v3[1] = WorkflowDialogTemplating.makeContinueInAppDialog_preRFv2(app:);
    uint64_t v5 = v0[12];
    return v12(v5);
  }
  else
  {
    uint64_t v7 = v0[15];
    v0[5] = &type metadata for AppInfoResolver;
    v0[6] = &protocol witness table for AppInfoResolver;
    App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(v1, v0 + 2, 2, v7);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    outlined init with copy of DeviceState(v1, (uint64_t)(v0 + 7));
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[20] = v8;
    *uint64_t v8 = v9;
    v8[1] = WorkflowDialogTemplating.makeContinueInAppDialog_preRFv2(app:);
    uint64_t v10 = v0[18];
    uint64_t v11 = v0[15];
    return static ResponseTemplates.continueInApp(appDisplayInfo:deviceState:)(v10, v11, v0 + 7);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = v2 + 56;
  uint64_t v6 = *(void *)(v5 + 120);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v9 + 168) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v4, &demangling cache variable for type metadata for DeviceState?);
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  (*(void (**)(void, void, void))(v0[17] + 32))(v0[12], v0[18], v0[16]);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WorkflowDialogTemplating.makeOpenInteractionFailedDialog()()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v2);
  *(void *)(v1 + 24) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v2 + 24);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    swift_release();
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v9 = OUTLINED_FUNCTION_67_2();
    return v10(v9);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WorkflowDialogTemplating.makeOpenInteractionFailedDialog()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_30_4();
  char v14 = OUTLINED_FUNCTION_48_6();
  uint64_t v15 = v12[2];
  if (v14)
  {
    uint64_t v16 = OUTLINED_FUNCTION_4_21(v13);
    OUTLINED_FUNCTION_59_4(v16);
    uint64_t v50 = *(void *)(class metadata base offset for RunVoiceCommandCATsSimple + v17 + 160)
        + **(int **)(class metadata base offset for RunVoiceCommandCATsSimple + v17 + 160);
    uint64_t v52 = class metadata base offset for RunVoiceCommandCATsSimple + v17 + 160;
    uint64_t v18 = swift_task_alloc();
    id v19 = (void *)OUTLINED_FUNCTION_40_7(v18);
    void *v19 = v20;
    v19[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog();
    OUTLINED_FUNCTION_31_9();
    OUTLINED_FUNCTION_22_16();
    return v23(v21, v22, v23, v24, v25, v26, v27, v28, a9, v50, v52, a12);
  }
  char v30 = OUTLINED_FUNCTION_60_0();
  uint64_t v31 = *(void **)(v15 + 104);
  v12[7] = OUTLINED_FUNCTION_4_21(v13);
  if ((v30 & 1) == 0)
  {
    uint64_t v50 = *(void *)(class metadata base offset for RunVoiceCommandCATsSimple + *v31 + 144)
        + **(int **)(class metadata base offset for RunVoiceCommandCATsSimple + *v31 + 144);
    uint64_t v52 = class metadata base offset for RunVoiceCommandCATsSimple + *v31 + 144;
    char v34 = (void *)swift_task_alloc();
    v12[10] = v34;
    void *v34 = v12;
    v34[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog();
    OUTLINED_FUNCTION_22_16();
    return v23(v21, v22, v23, v24, v25, v26, v27, v28, a9, v50, v52, a12);
  }
  OUTLINED_FUNCTION_47_6();
  if (v32)
  {
    OUTLINED_FUNCTION_36_7();
    uint64_t v33 = 0;
  }
  else
  {
    uint64_t v33 = 1;
  }
  uint64_t v35 = v12[3];
  uint64_t v36 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_80_1(v35, v33, v37, v36);
  uint64_t v51 = *(void *)(class metadata base offset for RunVoiceCommandCATsSimple + v38 + 176)
      + **(int **)(class metadata base offset for RunVoiceCommandCATsSimple + v38 + 176);
  uint64_t v53 = class metadata base offset for RunVoiceCommandCATsSimple + v38 + 176;
  uint64_t v39 = swift_task_alloc();
  uint64_t v40 = (void *)OUTLINED_FUNCTION_68_1(v39);
  void *v40 = v41;
  v40[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog();
  OUTLINED_FUNCTION_22_16();
  return v45(v42, v43, v44, v45, v46, v47, v48, v49, a9, v51, v53, a12);
}

uint64_t WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_12_19();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v2 + 32);
  *uint64_t v5 = *v1;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
  {
    swift_release();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    OUTLINED_FUNCTION_23_1();
    return v12(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_69_1();
  OUTLINED_FUNCTION_30_4();
  char v14 = OUTLINED_FUNCTION_48_6();
  uint64_t v15 = v12[3];
  if (v14)
  {
    uint64_t v16 = *(void **)(v15 + 96);
    v12[5] = OUTLINED_FUNCTION_4_21(v13);
    uint64_t v48 = *(void *)(class metadata base offset for RunVoiceCommandCATs + *v16 + 80)
        + **(int **)(class metadata base offset for RunVoiceCommandCATs + *v16 + 80);
    uint64_t v50 = class metadata base offset for RunVoiceCommandCATs + *v16 + 80;
    uint64_t v17 = (void *)swift_task_alloc();
    v12[6] = v17;
    *uint64_t v17 = v12;
    v17[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2();
    OUTLINED_FUNCTION_25_13();
    OUTLINED_FUNCTION_22_16();
    return v21(v18, v19, v20, v21, v22, v23, v24, v25, a9, v48, v50, a12);
  }
  char v27 = OUTLINED_FUNCTION_60_0();
  uint64_t v28 = *(void **)(v15 + 96);
  v12[8] = OUTLINED_FUNCTION_4_21(v13);
  if ((v27 & 1) == 0)
  {
    uint64_t v48 = *(void *)(class metadata base offset for RunVoiceCommandCATs + *v28 + 72)
        + **(int **)(class metadata base offset for RunVoiceCommandCATs + *v28 + 72);
    uint64_t v50 = class metadata base offset for RunVoiceCommandCATs + *v28 + 72;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v12[11] = v31;
    *uint64_t v31 = v32;
    v31[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2();
    OUTLINED_FUNCTION_71_2();
    OUTLINED_FUNCTION_22_16();
    return v21(v18, v19, v20, v21, v22, v23, v24, v25, a9, v48, v50, a12);
  }
  OUTLINED_FUNCTION_47_6();
  if (v29)
  {
    OUTLINED_FUNCTION_36_7();
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 1;
  }
  uint64_t v33 = v12[4];
  uint64_t v34 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_80_1(v33, v30, v35, v34);
  uint64_t v49 = *(void *)(class metadata base offset for RunVoiceCommandCATs + v36 + 88)
      + **(int **)(class metadata base offset for RunVoiceCommandCATs + v36 + 88);
  uint64_t v51 = class metadata base offset for RunVoiceCommandCATs + v36 + 88;
  uint64_t v37 = swift_task_alloc();
  uint64_t v38 = (void *)OUTLINED_FUNCTION_32_12(v37);
  *uint64_t v38 = v39;
  v38[1] = WorkflowDialogTemplating.makeOpenInteractionFailedDialog_preRFv2();
  OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_22_16();
  return v44(v40, v41, v42, v43, v44, v45, v46, v47, a9, v49, v51, a12);
}

uint64_t CustomIntentsDialogTemplating.makeHandoffDialog()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowDialogTemplating.makeHandoffDialog());
}

uint64_t WorkflowDialogTemplating.makeHandoffDialog()()
{
  OUTLINED_FUNCTION_13_1();
  v0[3] = OUTLINED_FUNCTION_4_21((void *)(v0[2] + 16));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  void *v1 = v0;
  v1[1] = WorkflowDialogTemplating.makeHandoffDialog();
  uint64_t v2 = OUTLINED_FUNCTION_31_9();
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WorkflowDialogTemplating.makeHandoffDialog_preRFv2()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowDialogTemplating.makeHandoffDialog_preRFv2());
}

uint64_t WorkflowDialogTemplating.makeHandoffDialog_preRFv2()()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = OUTLINED_FUNCTION_4_21((void *)(*(void *)(v0 + 24) + 16));
  OUTLINED_FUNCTION_59_4(v1);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_40_7(v2);
  *uint64_t v3 = v4;
  v3[1] = WorkflowDialogTemplating.makeHandoffDialog_preRFv2();
  uint64_t v5 = OUTLINED_FUNCTION_25_13();
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  OUTLINED_FUNCTION_34_11();
  return v0();
}

uint64_t WorkflowDialogTemplating.makePromptForShortcutName()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowDialogTemplating.makePromptForShortcutName());
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  v0[3] = OUTLINED_FUNCTION_4_21((void *)(v0[2] + 16));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  void *v1 = v0;
  v1[1] = WorkflowDialogTemplating.makePromptForShortcutName();
  uint64_t v2 = OUTLINED_FUNCTION_31_9();
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

uint64_t WorkflowDialogTemplating.makePromptForShortcutName_prerfv2()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowDialogTemplating.makePromptForShortcutName_prerfv2());
}

uint64_t WorkflowDialogTemplating.makePromptForShortcutName_prerfv2()()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = OUTLINED_FUNCTION_4_21((void *)(*(void *)(v0 + 24) + 16));
  OUTLINED_FUNCTION_59_4(v1);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_40_7(v2);
  *uint64_t v3 = v4;
  v3[1] = WorkflowDialogTemplating.makePromptForShortcutName_prerfv2();
  uint64_t v5 = OUTLINED_FUNCTION_25_13();
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

uint64_t WorkflowDialogTemplating.makeFinalDonePattern()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowDialogTemplating.makeFinalDonePattern());
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(void, SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *)(Swift::OpaquePointer), void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_17_15();
  uint64_t v4 = (uint64_t (*)(void, SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *)(Swift::OpaquePointer), void))(*(void *)(v1 + class metadata base offset for WorkflowRunnerCATPatternsExecutor) + **(int **)(v1 + class metadata base offset for WorkflowRunnerCATPatternsExecutor));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = WorkflowDialogTemplating.makeFinalDonePattern();
  return v4(0, CustomIntentDisambiguationItemContainer.init(items:), 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t WorkflowDialogTemplating.makeUnsupportedOnCarPlayErrorDialog()()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v2);
  *(void *)(v1 + 24) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = OUTLINED_FUNCTION_39_8(*(void **)(v0 + 16));
  *(void *)(v0 + 32) = v2;
  uint64_t v3 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_80_1(v1, 1, v4, v3);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple
                                                             + v5
                                                             + 64)
                                                 + **(int **)(class metadata base offset for RunVoiceCommandCATsSimple
                                                            + v5
                                                            + 64));
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_40_7(v6);
  void *v7 = v8;
  v7[1] = WorkflowDialogTemplating.makeUnsupportedOnCarPlayErrorDialog();
  uint64_t v9 = *(void *)(v0 + 24);
  return v11(v2, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 48) = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_64_1();
  outlined destroy of URL?(*(void *)(v0 + 24), &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v1)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v5, v6, v7);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_67_2();
    OUTLINED_FUNCTION_23_1();
    return v11(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_34_11();
  return v0();
}

uint64_t WorkflowDialogTemplating.makeUnsupportedOnCarPlayErrorDialog_prerfv2()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_39_8(*(void **)(v0 + 24));
  uint64_t v2 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_80_1(v1, 1, v3, v2);
  uint64_t v8 = (uint64_t (*)(uint64_t))(*(void *)(class metadata base offset for RunVoiceCommandCATs + v4 + 32)
                                       + **(int **)(class metadata base offset for RunVoiceCommandCATs + v4 + 32));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = WorkflowDialogTemplating.makeUnsupportedOnCarPlayErrorDialog_prerfv2();
  uint64_t v6 = OUTLINED_FUNCTION_72_1();
  return v8(v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v12();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WorkflowDialogTemplating.makeErrorDialog(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  v1[6] = OUTLINED_FUNCTION_46_2(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[3];
  uint64_t v2 = OUTLINED_FUNCTION_4_21((void *)(v0[4] + 16));
  v0[7] = v2;
  if (v1)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_36_7();
  }
  uint64_t v3 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_24_14(v3);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(class metadata base offset for RunVoiceCommandCATsSimple
                                                                      + v4
                                                                      + 32)
                                                          + **(int **)(class metadata base offset for RunVoiceCommandCATsSimple
                                                                     + v4
                                                                     + 32));
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_68_1(v5);
  *uint64_t v6 = v7;
  v6[1] = WorkflowDialogTemplating.inputDateDialog(request:);
  uint64_t v9 = v0[5];
  uint64_t v8 = v0[6];
  return v11(v2, v8, v9);
}

uint64_t WorkflowDialogTemplating.makeErrorDialog_prerfv2(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  uint64_t v6 = OUTLINED_FUNCTION_13_0();
  v1[7] = OUTLINED_FUNCTION_57_1(v6);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[4];
  v0[8] = OUTLINED_FUNCTION_4_21((void *)(v0[5] + 16));
  if (v1)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_36_7();
  }
  uint64_t v2 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_24_14(v2);
  uint64_t v9 = (uint64_t (*)(uint64_t))(*(void *)(class metadata base offset for RunVoiceCommandCATs + v3 + 16)
                                       + **(int **)(class metadata base offset for RunVoiceCommandCATs + v3 + 16));
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_32_12(v4);
  *uint64_t v5 = v6;
  v5[1] = WorkflowDialogTemplating.inputDateDialog_prerfv2(request:);
  uint64_t v7 = OUTLINED_FUNCTION_72_1();
  return v9(v7);
}

void *WorkflowDialogTemplating.mapDisambiguationItemList(disambiguationList:siriEnvironment:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_0_2();
  uint64_t v4 = v3;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v50 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v49 = (char *)&v48 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v48 - v10;
  if ((static OutputUtils.shouldReadItemsInDisambiguationList(siriEnvironment:)() & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v55 = v2;
  if (v12)
  {
    uint64_t v60 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    uint64_t v14 = type metadata accessor for CATSpeakableString();
    uint64_t v53 = v11;
    uint64_t v54 = (void (*)(char *, char *, uint64_t))v14;
    uint64_t v13 = v60;
    *(void *)&long long v52 = v4 + 32;
    uint64_t v15 = (void **)(a1 + 80);
    uint64_t v57 = v4;
    do
    {
      uint64_t v56 = v13;
      uint64_t v16 = (uint64_t)*(v15 - 6);
      uint64_t v17 = (uint64_t)*(v15 - 3);
      uint64_t v18 = *v15;
      id v19 = *(v15 - 2);
      swift_bridgeObjectRetain();
      id v20 = v18;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v21 = (uint64_t)v54;
      static CATSpeakableString.applyTTSHint(speak:)();
      OUTLINED_FUNCTION_69_2();
      swift_bridgeObjectRelease();
      v59[0] = v16;
      v59[1] = v21;
      if (v17)
      {
        swift_bridgeObjectRetain();
        uint64_t v22 = static CATSpeakableString.applyTTSHint(speak:)();
        unint64_t v24 = v23;
        swift_bridgeObjectRelease();
        uint64_t v25 = HIBYTE(v24) & 0xF;
        if ((v24 & 0x2000000000000000) == 0) {
          uint64_t v25 = v22 & 0xFFFFFFFFFFFFLL;
        }
        if (v25)
        {
          v58._uint64_t countAndFlagsBits = 0x209480E220;
          v58._object = (void *)0xA500000000000000;
          v26._uint64_t countAndFlagsBits = v22;
          v26._object = (void *)v24;
          String.append(_:)(v26);
          swift_bridgeObjectRelease();
          String.append(_:)(v58);
        }
        swift_bridgeObjectRelease();
      }
      char v27 = v53;
      OUTLINED_FUNCTION_36_7();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = v56;
      uint64_t v60 = v56;
      unint64_t v29 = v56[2];
      unint64_t v28 = v56[3];
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        uint64_t v13 = v60;
      }
      v15 += 7;
      v13[2] = v29 + 1;
      uint64_t v4 = v57;
      uint64_t v2 = v55;
      (*(void (**)(unint64_t, char *, uint64_t))(v57 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v29, v27, v55);
      --v12;
    }
    while (v12);
  }
  uint64_t v30 = v13[2];
  uint64_t v32 = v49;
  uint64_t v31 = v50;
  if (v30)
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v34 = v4 + 16;
    uint64_t v33 = v35;
    uint64_t v36 = (char *)v13 + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v53 = *(char **)(v34 + 56);
    uint64_t v37 = (void (**)(char *, uint64_t))(v34 - 8);
    uint64_t v56 = v13;
    swift_bridgeObjectRetain();
    *(void *)&long long v38 = 136315138;
    long long v52 = v38;
    uint64_t v51 = (char *)&type metadata for Any + 8;
    uint64_t v57 = v34;
    uint64_t v54 = v35;
    do
    {
      v33(v32, v36, v2);
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.voiceCommands);
      v33(v31, v32, v2);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = swift_slowAlloc();
        v59[0] = OUTLINED_FUNCTION_22_3();
        *(_DWORD *)uint64_t v42 = v52;
        uint64_t v43 = SpeakableString.speak.getter();
        *(void *)(v42 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v59);
        swift_bridgeObjectRelease();
        uint64_t v45 = *v37;
        (*v37)(v31, v55);
        _os_log_impl(&dword_0, v40, v41, "itemAsString: %s", (uint8_t *)v42, 0xCu);
        swift_arrayDestroy();
        uint64_t v2 = v55;
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();

        v45(v32, v2);
      }
      else
      {

        uint64_t v46 = *v37;
        (*v37)(v31, v2);
        v46(v32, v2);
      }
      uint64_t v33 = v54;
      uint64_t v36 = &v53[(void)v36];
      --v30;
    }
    while (v30);
    uint64_t v13 = v56;
    swift_bridgeObjectRelease();
  }
  return v13;
}

uint64_t WorkflowDialogTemplating.getAppName(bundleId:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    type metadata accessor for App();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_19();
    App.__allocating_init(appIdentifier:)();
    type metadata accessor for AppNameResolver();
    swift_initStackObject();
    uint64_t v2 = (void *)static SAAppInfoFactory.createAppInfo(app:)();
    AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(v2);
    OUTLINED_FUNCTION_69_2();

    swift_release();
  }
  return OUTLINED_FUNCTION_19();
}

Swift::String_optional __swiftcall WorkflowDialogTemplating.getCustomDialog(intentResponse:defaultPrompt:)(INIntentResponse intentResponse, Swift::String_optional defaultPrompt)
{
  object = defaultPrompt.value._object;
  uint64_t countAndFlagsBits = defaultPrompt.value._countAndFlagsBits;
  id v5 = [self siriLocalizer];
  id v6 = [(objc_class *)intentResponse.super.isa _renderedResponseWithLocalizer:v5 requiresSiriCompatibility:1];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    object = v8;
  }
  else if (object)
  {
    type metadata accessor for CATSpeakableString();
    swift_bridgeObjectRetain();
    uint64_t v11 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)();

    uint64_t v12 = v11[2];
    swift_bridgeObjectRelease();
    if (v12)
    {
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = 0;
      object = 0;
    }
  }
  else
  {

    uint64_t countAndFlagsBits = 0;
  }
  uint64_t v9 = countAndFlagsBits;
  uint64_t v10 = object;
  result.value._object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t WorkflowDialogTemplating.getCustomPrompt(message:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_16(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_27_6();
  WorkflowDialogTemplating.processText(text:)(a1, a2, v5);
  uint64_t v13 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v5, 1, v13) == 1)
  {
    WorkflowDialogTemplating.processText(text:)(a3, a4, a5);
    return outlined destroy of URL?(v5, &demangling cache variable for type metadata for SpeakableString?);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a5, v5, v13);
    return OUTLINED_FUNCTION_36_9(a5, 0);
  }
}

uint64_t WorkflowDialogTemplating.processText(text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v32 = a1;
    uint64_t v33 = a2;
    CharacterSet.init(charactersIn:)();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v12 = StringProtocol.trimmingCharacters(in:)();
    unint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
    uint64_t v15 = HIBYTE(v14) & 0xF;
    if ((v14 & 0x2000000000000000) == 0) {
      uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (v15)
    {
      type metadata accessor for CATSpeakableString();
      static CATSpeakableString.applyTTSHint(speak:)();
      static CATSpeakableString.stripTTSHint(print:)(v12, v14, v16, v17, v18, v19, v20, v21, v32, v33, v34);
      swift_bridgeObjectRelease();
      SpeakableString.init(print:speak:)();
      uint64_t v22 = type metadata accessor for SpeakableString();
      return __swift_storeEnumTagSinglePayload(a3, 0, 1, v22);
    }
    else
    {
      type metadata accessor for SpeakableString();
      uint64_t v28 = OUTLINED_FUNCTION_7();
      __swift_storeEnumTagSinglePayload(v28, v29, v30, v31);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for SpeakableString();
    uint64_t v24 = OUTLINED_FUNCTION_7();
    return __swift_storeEnumTagSinglePayload(v24, v25, v26, v27);
  }
}

Swift::String __swiftcall String.trimSpaces()()
{
  uint64_t v1 = type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_27_6();
  CharacterSet.init(charactersIn:)();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.trimmingCharacters(in:)();
  OUTLINED_FUNCTION_69_2();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  uint64_t v5 = OUTLINED_FUNCTION_19();
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t WorkflowDialogTemplating.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t WorkflowDialogTemplating.__deallocating_deinit()
{
  WorkflowDialogTemplating.deinit();

  return swift_deallocClassInstance();
}

uint64_t outlined bridged method (pb) of @objc WFShowAlertDialogRequest.message.getter(void *a1)
{
  return outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(a1, (SEL *)&selRef_message);
}

unint64_t lazy protocol witness table accessor for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError;
  if (!lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError;
  if (!lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDialogTemplatingError and conformance WorkflowDialogTemplatingError);
  }
  return result;
}

uint64_t outlined bridged method (pb) of @objc WFChooseFromListDialogRequest.message.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_69_2();
  }
  return OUTLINED_FUNCTION_19();
}

unsigned char *storeEnumTagSinglePayload for WorkflowDialogTemplatingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xD6374);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkflowDialogTemplatingError()
{
  return &type metadata for WorkflowDialogTemplatingError;
}

uint64_t type metadata accessor for WorkflowDialogTemplating()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_4_21(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return DeviceState.asSiriKitDeviceState()(v1, v2);
}

uint64_t OUTLINED_FUNCTION_10_26()
{
  uint64_t v1 = v0 + 2;
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return DeviceState.asSiriKitDeviceState()(v3, v2);
}

uint64_t OUTLINED_FUNCTION_24_14(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v2, v1, 1, a1);
  return __swift_storeEnumTagSinglePayload(v3, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_25_13()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_27_16(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_29_11()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_30_11()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_31_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_12(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_34_11()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_35_10()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_36_9(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_38_10@<X0>(void *a1@<X8>)
{
  uint64_t v2 = a1[5];
  uint64_t v1 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v2);
  return DeviceState.asSiriKitDeviceState()(v2, v1);
}

uint64_t OUTLINED_FUNCTION_39_8@<X0>(void *a1@<X8>)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v1);
  return DeviceState.asSiriKitDeviceState()(v1, v2);
}

uint64_t OUTLINED_FUNCTION_40_7(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_41_8()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return DeviceState.asSiriKitDeviceState()(v2, v3);
}

uint64_t OUTLINED_FUNCTION_44_5(uint64_t a1, uint64_t a2)
{
  return WorkflowDialogTemplating.getCustomPrompt(message:prompt:)(v3, v4, a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_45_5(uint64_t a1, uint64_t a2)
{
  return WorkflowDialogTemplating.getCustomPrompt(message:prompt:)(v2, v4, a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_46_7(uint64_t a1, uint64_t a2)
{
  return WorkflowDialogTemplating.getCustomPrompt(message:prompt:)(v3, v4, a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_47_6()
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return DeviceState.userAssignedDeviceName.getter(v2, v3);
}

uint64_t OUTLINED_FUNCTION_48_6()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of DeviceState.isCarPlay.getter();
}

uint64_t OUTLINED_FUNCTION_52_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_55_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_57_1(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_58_4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_59_4(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  __swift_project_boxed_opaque_existential_1(v0, *(void *)(v1 + 40));
  return dispatch thunk of DeviceState.isWatch.getter();
}

uint64_t OUTLINED_FUNCTION_61_2()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_67_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_68_1(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_70_1()
{
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return dispatch thunk of DeviceState.isWatch.getter();
}

uint64_t OUTLINED_FUNCTION_71_2()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_72_1()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_75_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_76_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_77_1(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, v2, 1, a1);
}

uint64_t OUTLINED_FUNCTION_80_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, a4);
}

uint64_t WorkflowHomePodSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)()
{
  OUTLINED_FUNCTION_0_18();
  return WorkflowHomePodSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)(v1, v0, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t WorkflowHomePodSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t type metadata accessor for WorkflowHomePodSnippetProvider()
{
  return self;
}

void static SLFDisambiguationItemConverter.toDirectInvocationPayloadData(intent:chosenItem:parameterName:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_0_2();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_27_6();
  uint64_t v13 = static SLFDisambiguationItemConverter.getUpdatedIntent(intent:chosenItem:parameterName:)(a1, a2, a3, a4);
  if (v13)
  {
    unint64_t v14 = (void *)v13;
    Dictionary.init(dictionaryLiteral:)();
    uint64_t v15 = outlined bridged method (ob) of @objc PBCodable.data.getter([v14 backingStore]);
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = v15;
      unint64_t v18 = v16;
      outlined copy of Data._Representation(v15, v16);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v18, 0x6144746E65746E69, 0xEA00000000006174, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      id v20 = [v14 typeName];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static String.Encoding.utf8.getter();
      uint64_t v21 = String.data(using:allowLossyConversion:)();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v4, v9);
      specialized Dictionary.subscript.setter(v21, v23, 0x614E746E65746E69, 0xEA0000000000656DLL);
      outlined consume of Data?(v17, v18);
    }
  }
  OUTLINED_FUNCTION_27_1();
}

uint64_t static SLFDisambiguationItemConverter.getUpdatedIntent(intent:chosenItem:parameterName:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    id v12 = [v8 debugDescription];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = a3;
    unint64_t v15 = v14;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a3 = v27;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v9, v10, "SLFDisambiguationItemConverter intent: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v16 = [v8 _intentInstanceDescription];
  id v17 = static SLFDisambiguationItemConverter.slotNameToSlotDescription(intentDescription:parameterNameToResolve:)(v16, a3, a4);
  if (!v17)
  {

    return 0;
  }
  unint64_t v18 = v17;
  if ([v17 valueStyle] != (char *)&dword_0 + 3)
  {
    CustomIntentDisambiguationItem.getRawValue()((uint64_t)v28);
    __swift_project_boxed_opaque_existential_1(v28, v28[3]);
    uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
    outlined bridged method (pb) of @objc INIntentSlotDescription.facadePropertyName.getter(v18);
    if (v25)
    {
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v23 = 0;
    }
    [v8 setValue:v24 forProperty:v23];
    swift_unknownObjectRelease();
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_212160;
  CustomIntentDisambiguationItem.getRawValue()(v19 + 32);
  v20.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t result = outlined bridged method (pb) of @objc INIntentSlotDescription.facadePropertyName.getter(v18);
  if (v22)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 setValue:v20.super.isa forKey:v23];

LABEL_15:
    id v26 = v8;
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

id static SLFDisambiguationItemConverter.toDirectInvocationPayload(intent:chosenItem:parameterName:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  static SLFDisambiguationItemConverter.toDirectInvocationPayloadData(intent:chosenItem:parameterName:)(a1, a2, a3, a4);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  type metadata accessor for SKIDirectInvocationPayload();
  id v6 = OUTLINED_FUNCTION_13_20();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v5);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v8, v6);
  return v6;
}

id static SLFDisambiguationItemConverter.slotNameToSlotDescription(intentDescription:parameterNameToResolve:)(void *a1, uint64_t a2, unint64_t a3)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v7, v8, "SLFDisambiguationItemConverter.slotNameToSlotDescription parameter: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v10 = outlined bridged method (mbgnn) of @objc INIntentDescription.slot(byName:)(a2, a3, a1);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  if (v10)
  {
    if (v13)
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v14 = 0;
      os_log_type_t v15 = v12;
      id v16 = "SLFDisambiguationItemConverter.slotNameToSlotDescription retrieved slot name";
LABEL_11:
      _os_log_impl(&dword_0, v11, v15, v16, v14, 2u);
      swift_slowDealloc();
    }
  }
  else if (v13)
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    os_log_type_t v15 = v12;
    id v16 = "SLFDisambiguationItemConverter.slotNameToSlotDescription cannot find slot name";
    goto LABEL_11;
  }

  return v10;
}

id static SLFDisambiguationItemConverter.toDirectInvocationPayload(title:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_212160;
  *(void *)(inited + 32) = 0x656C746974;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for SKIDirectInvocationPayload();
  id v6 = OUTLINED_FUNCTION_13_20();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v5);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v8, v6);
  return v6;
}

void static SLFDisambiguationItemConverter.toIntent(userData:)()
{
  OUTLINED_FUNCTION_12_20();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v2 - 8);
  OUTLINED_FUNCTION_27_6();
  if (*(void *)(v1 + 16))
  {
    unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(0x614E746E65746E69, 0xEA0000000000656DLL);
    if (v4)
    {
      outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v3, (uint64_t)&v10);
      if (OUTLINED_FUNCTION_14_12())
      {
        static String.Encoding.utf8.getter();
        String.init(data:encoding:)();
        if (v5)
        {
          specialized Dictionary.subscript.getter(0x6144746E65746E69, 0xEA00000000006174, v1, &v10);
          if (v11)
          {
            if (OUTLINED_FUNCTION_14_12())
            {
              NSString v6 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              Class isa = Data._bridgeToObjectiveC()().super.isa;
              (id)INIntentCreate();
              OUTLINED_FUNCTION_11_21();
              outlined consume of Data._Representation(v8, v9);
            }
            else
            {
              OUTLINED_FUNCTION_11_21();
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            OUTLINED_FUNCTION_11_21();
            swift_bridgeObjectRelease();
            outlined destroy of Any?((uint64_t)&v10);
          }
        }
        else
        {
          OUTLINED_FUNCTION_11_21();
        }
      }
    }
  }
  OUTLINED_FUNCTION_4_22();
}

uint64_t static SLFDisambiguationItemConverter.toTitle(userData:)(uint64_t a1)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C746974, 0xE500000000000000), (v3 & 1) != 0)
    && (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v6), (swift_dynamicCast() & 1) != 0))
  {
    return v5;
  }
  else
  {
    return 0;
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)()
{
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_1_22(v2, v3, v4);
  OUTLINED_FUNCTION_0_19();
  if (v7)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v8 = v5;
  char v9 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, NSBundle>);
  if (OUTLINED_FUNCTION_3_24())
  {
    OUTLINED_FUNCTION_9_25();
    OUTLINED_FUNCTION_7_22();
    if (!v11) {
      goto LABEL_12;
    }
    uint64_t v8 = v10;
  }
  if (v9)
  {
    uint64_t v12 = *(void *)(*(void *)v1 + 56);

    *(void *)(v12 + 8 * v8) = v0;
    OUTLINED_FUNCTION_4_22();
  }
  else
  {
    OUTLINED_FUNCTION_6_22();
    specialized _NativeDictionary._insert(at:key:value:)(v13, v14, v15, v16, v17);
    OUTLINED_FUNCTION_4_22();
    swift_bridgeObjectRetain();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_12_20();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  char v6 = v5;
  specialized __RawDictionaryStorage.find<A>(_:)(v3, v1);
  OUTLINED_FUNCTION_0_19();
  if (v9)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v10 = v7;
  char v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, DMFPolicy>);
  if (OUTLINED_FUNCTION_3_24())
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v4, v2);
    OUTLINED_FUNCTION_8_18();
    if (!v13) {
      goto LABEL_12;
    }
    uint64_t v10 = v12;
  }
  uint64_t v14 = *v0;
  if (v11)
  {
    *(void *)(*(void *)(v14 + 56) + 8 * v10) = v6;
    OUTLINED_FUNCTION_4_22();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, v4, v2, v6, v14);
    OUTLINED_FUNCTION_4_22();
    swift_bridgeObjectRetain();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_1_22(v2, v3, v4);
  OUTLINED_FUNCTION_0_19();
  if (v7)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v8 = v5;
  char v9 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String : Any]>);
  if (OUTLINED_FUNCTION_3_24())
  {
    OUTLINED_FUNCTION_9_25();
    OUTLINED_FUNCTION_7_22();
    if (!v11) {
      goto LABEL_12;
    }
    uint64_t v8 = v10;
  }
  if (v9)
  {
    uint64_t v12 = *(void *)(*(void *)v1 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v12 + 8 * v8) = v0;
    OUTLINED_FUNCTION_4_22();
  }
  else
  {
    OUTLINED_FUNCTION_6_22();
    specialized _NativeDictionary._insert(at:key:value:)(v13, v14, v15, v16, v17);
    OUTLINED_FUNCTION_4_22();
    swift_bridgeObjectRetain();
  }
}

{
  Swift::Int *v0;
  Swift::Int *v1;
  char v2;
  char v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  char v6;
  char v7;
  Swift::Int v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_12_20();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v8 = *v0;
  specialized __RawDictionaryStorage.find<A>(_:)(v4);
  OUTLINED_FUNCTION_0_19();
  if (v11)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v12 = v9;
  unint64_t v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SiriLinkFlowFeatureFlags, Bool>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v8))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v5);
    OUTLINED_FUNCTION_8_18();
    if (!v15) {
      goto LABEL_12;
    }
    uint64_t v12 = v14;
  }
  if (v13)
  {
    *(unsigned char *)(*(void *)(*v1 + 56) + v12) = v7 & 1;
    OUTLINED_FUNCTION_4_22();
  }
  else
  {
    OUTLINED_FUNCTION_4_22();
    specialized _NativeDictionary._insert(at:key:value:)(v16, v17, v18, v19);
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)()
{
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_1_22(v1, v2, v3);
  OUTLINED_FUNCTION_0_19();
  if (v6)
  {
    __break(1u);
LABEL_14:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v7 = v4;
  char v8 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (OUTLINED_FUNCTION_3_24())
  {
    OUTLINED_FUNCTION_9_25();
    OUTLINED_FUNCTION_8_18();
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v7 = v9;
  }
  if (v8)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(*(void *)(*(void *)v0 + 56) + 32 * v7);
    OUTLINED_FUNCTION_4_22();
    return outlined init with take of Any(v11, v12);
  }
  else
  {
    OUTLINED_FUNCTION_6_22();
    specialized _NativeDictionary._insert(at:key:value:)(v15, v16, v17, v18, v19);
    OUTLINED_FUNCTION_4_22();
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6 = v5;
  Swift::Int v12 = *v5;
  specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  OUTLINED_FUNCTION_0_19();
  if (v15)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v13;
  char v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v12))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    OUTLINED_FUNCTION_7_22();
    if (!v19) {
      goto LABEL_12;
    }
    unint64_t v16 = v18;
  }
  uint64_t v20 = *v6;
  if (v17)
  {
    uint64_t v21 = *(void *)(v20 + 56) + 16 * v16;
    outlined consume of Data._Representation(*(void *)v21, *(void *)(v21 + 8));
    *(void *)uint64_t v21 = a1;
    *(void *)(v21 + 8) = a2;
    OUTLINED_FUNCTION_27_1();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a3, a4, a1, a2, v20);
    OUTLINED_FUNCTION_27_1();
    swift_bridgeObjectRetain();
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  OUTLINED_FUNCTION_0_2();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v14 = *v3;
  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  OUTLINED_FUNCTION_0_19();
  if (v17)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v18 = v15;
  char v19 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<RFFeatureFlags.ResponseFramework, Bool>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v14))
  {
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v21 & 1))
    {
      uint64_t v18 = v20;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    *(unsigned char *)(*(void *)(v22 + 56) + v18) = a1 & 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, v8);
    specialized _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)v13, a1 & 1, v22);
  }
  OUTLINED_FUNCTION_27_1();
}

id outlined bridged method (mbgnn) of @objc INIntentDescription.slot(byName:)(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 slotByName:v4];

  return v5;
}

uint64_t outlined bridged method (pb) of @objc INIntentSlotDescription.facadePropertyName.getter(void *a1)
{
  id v1 = [a1 facadePropertyName];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for SKIDirectInvocationPayload()
{
  unint64_t result = lazy cache variable for type metadata for SKIDirectInvocationPayload;
  if (!lazy cache variable for type metadata for SKIDirectInvocationPayload)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
  }
  return result;
}

ValueMetadata *type metadata accessor for SLFDisambiguationItemConverter()
{
  return &type metadata for SLFDisambiguationItemConverter;
}

unint64_t OUTLINED_FUNCTION_1_22(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
}

BOOL OUTLINED_FUNCTION_3_24()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

unint64_t OUTLINED_FUNCTION_9_25()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_21()
{
  return outlined consume of Data._Representation(v1, v0);
}

id OUTLINED_FUNCTION_13_20()
{
  return SKIDirectInvocationPayload.__allocating_init(identifier:)();
}

uint64_t OUTLINED_FUNCTION_14_12()
{
  return swift_dynamicCast();
}

uint64_t String.sanitized.getter()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v7 = String.lowercased()();
  static CharacterSet.punctuationCharacters.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v4 = StringProtocol.components(separatedBy:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v5 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t type metadata instantiation function for MatchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for MatchResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))WorkflowRunnerCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))RunVoiceCommandCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))RunCustomIntentCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))WorkflowRunnerCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))AutoShortcutCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))VoiceCommandsNLIntent.VoiceCommandReference.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))VoiceCommandsNLIntent.VoiceCommandUnit.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))SuggestionsCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))AutoShortcutCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))RunLinkActionCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))RunLinkActionCATsSimple.Properties.rawValue.getter);
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x656E6F68506E6FLL;
  }
  else {
    uint64_t v4 = 0x65446D6F74737563;
  }
  if (v3) {
    unint64_t v5 = 0xEC00000065636976;
  }
  else {
    unint64_t v5 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v6 = 0x656E6F68506E6FLL;
  }
  else {
    uint64_t v6 = 0x65446D6F74737563;
  }
  if (a2) {
    unint64_t v7 = 0xE700000000000000;
  }
  else {
    unint64_t v7 = 0xEC00000065636976;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x64656C696166;
  }
  else {
    uint64_t v4 = 0x65446D6F74737563;
  }
  if (v3) {
    unint64_t v5 = 0xEC00000065636976;
  }
  else {
    unint64_t v5 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v6 = 0x64656C696166;
  }
  else {
    uint64_t v6 = 0x65446D6F74737563;
  }
  if (a2) {
    unint64_t v7 = 0xE600000000000000;
  }
  else {
    unint64_t v7 = 0xEC00000065636976;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 27503;
  }
  else {
    uint64_t v4 = 0x6D7269666E6F63;
  }
  if (v3) {
    unint64_t v5 = 0xE700000000000000;
  }
  else {
    unint64_t v5 = 0xE200000000000000;
  }
  if (a2) {
    uint64_t v6 = 27503;
  }
  else {
    uint64_t v6 = 0x6D7269666E6F63;
  }
  if (a2) {
    unint64_t v7 = 0xE200000000000000;
  }
  else {
    unint64_t v7 = 0xE700000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;

  BOOL v3 = 0x6C65636E6163;
  if (a1)
  {
    OUTLINED_FUNCTION_47_7();
    if (v4) {
      uint64_t v6 = 28526;
    }
    else {
      uint64_t v6 = 7562617;
    }
    if (v4) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = 0xE300000000000000;
    }
  }
  else
  {
    unint64_t v7 = 0xE600000000000000;
    uint64_t v6 = 0x6C65636E6163;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_47_7();
    if (v8) {
      BOOL v3 = 28526;
    }
    else {
      BOOL v3 = 7562617;
    }
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0xE300000000000000;
    }
  }
  else
  {
    uint64_t v10 = 0xE600000000000000;
  }
  if (v6 == v3 && v7 == v10) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x6C70784568746977;
  }
  else {
    uint64_t v4 = 0x6E616C7078456F6ELL;
  }
  if (v3) {
    unint64_t v5 = 0xED00006E6F697461;
  }
  else {
    unint64_t v5 = 0xEF6E6F6974616E61;
  }
  if (a2) {
    uint64_t v6 = 0x6C70784568746977;
  }
  else {
    uint64_t v6 = 0x6E616C7078456F6ELL;
  }
  if (a2) {
    unint64_t v7 = 0xEF6E6F6974616E61;
  }
  else {
    unint64_t v7 = 0xED00006E6F697461;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x50746C7561666564;
  }
  else {
    uint64_t v4 = 0x61506D6F74737563;
  }
  if (v3) {
    unint64_t v5 = 0xEB000000006D6172;
  }
  else {
    unint64_t v5 = 0xEC0000006D617261;
  }
  if (a2) {
    uint64_t v6 = 0x50746C7561666564;
  }
  else {
    uint64_t v6 = 0x61506D6F74737563;
  }
  if (a2) {
    unint64_t v7 = 0xEC0000006D617261;
  }
  else {
    unint64_t v7 = 0xEB000000006D6172;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x726F4D726566666FLL;
  }
  else {
    uint64_t v4 = 0x656761507478656ELL;
  }
  if (v3) {
    unint64_t v5 = 0xEC0000007473614CLL;
  }
  else {
    unint64_t v5 = 0xE900000000000065;
  }
  if (a2) {
    uint64_t v6 = 0x726F4D726566666FLL;
  }
  else {
    uint64_t v6 = 0x656761507478656ELL;
  }
  if (a2) {
    unint64_t v7 = 0xE900000000000065;
  }
  else {
    unint64_t v7 = 0xEC0000007473614CLL;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0xD000000000000012;
  }
  else {
    uint64_t v4 = 0x4E707041776F6873;
  }
  if (v3) {
    unint64_t v5 = 0xEB00000000656D61;
  }
  else {
    unint64_t v5 = 0x8000000000224D60;
  }
  if (a2) {
    uint64_t v6 = 0xD000000000000012;
  }
  else {
    uint64_t v6 = 0x4E707041776F6873;
  }
  if (a2) {
    unint64_t v7 = 0x8000000000224D60;
  }
  else {
    unint64_t v7 = 0xEB00000000656D61;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x4E707041776F6873;
  }
  else {
    uint64_t v4 = 0x6D6F74737563;
  }
  if (v3) {
    unint64_t v5 = 0xE600000000000000;
  }
  else {
    unint64_t v5 = 0xEB00000000656D61;
  }
  if (a2) {
    uint64_t v6 = 0x4E707041776F6873;
  }
  else {
    uint64_t v6 = 0x6D6F74737563;
  }
  if (a2) {
    unint64_t v7 = 0xEB00000000656D61;
  }
  else {
    unint64_t v7 = 0xE600000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x4E707041776F6873;
  }
  else {
    uint64_t v4 = 0x6D614E7070416F6ELL;
  }
  if (v3) {
    unint64_t v5 = 0xE900000000000065;
  }
  else {
    unint64_t v5 = 0xEB00000000656D61;
  }
  if (a2) {
    uint64_t v6 = 0x4E707041776F6873;
  }
  else {
    uint64_t v6 = 0x6D614E7070416F6ELL;
  }
  if (a2) {
    unint64_t v7 = 0xEB00000000656D61;
  }
  else {
    unint64_t v7 = 0xE900000000000065;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))InstallShortcutCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x6D6F74737563;
  }
  else {
    uint64_t v4 = 0x61756E69746E6F63;
  }
  if (v3) {
    unint64_t v5 = 0xEC0000006E6F6974;
  }
  else {
    unint64_t v5 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v6 = 0x6D6F74737563;
  }
  else {
    uint64_t v6 = 0x61756E69746E6F63;
  }
  if (a2) {
    unint64_t v7 = 0xE600000000000000;
  }
  else {
    unint64_t v7 = 0xEC0000006E6F6974;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))ListShortcutsCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x656C62616E65;
  }
  else {
    uint64_t v4 = 0x656C6261736964;
  }
  if (v3) {
    unint64_t v5 = 0xE700000000000000;
  }
  else {
    unint64_t v5 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v6 = 0x656C62616E65;
  }
  else {
    uint64_t v6 = 0x656C6261736964;
  }
  if (a2) {
    unint64_t v7 = 0xE600000000000000;
  }
  else {
    unint64_t v7 = 0xE700000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (a1) {
    char v2 = 0x66664F6E727574;
  }
  else {
    char v2 = 0x6E4F657661656CLL;
  }
  if (a2) {
    BOOL v3 = 0x66664F6E727574;
  }
  else {
    BOOL v3 = 0x6E4F657661656CLL;
  }
  if (v2 == v3) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x7845657361726870;
  }
  else {
    uint64_t v4 = 0x616D7269666E6F63;
  }
  if (v3) {
    unint64_t v5 = 0xEC0000006E6F6974;
  }
  else {
    unint64_t v5 = 0xEE0073656C706D61;
  }
  if (a2) {
    uint64_t v6 = 0x7845657361726870;
  }
  else {
    uint64_t v6 = 0x616D7269666E6F63;
  }
  if (a2) {
    unint64_t v7 = 0xEE0073656C706D61;
  }
  else {
    unint64_t v7 = 0xEC0000006E6F6974;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (a1) {
    char v2 = 0x6E4F6E727574;
  }
  else {
    char v2 = 0x6C65636E6163;
  }
  if (a2) {
    BOOL v3 = 0x6E4F6E727574;
  }
  else {
    BOOL v3 = 0x6C65636E6163;
  }
  if (v2 == v3) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

{
  char v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;

  BOOL v3 = 7562617;
  if (a1)
  {
    OUTLINED_FUNCTION_47_7();
    if (v4) {
      uint64_t v6 = 28526;
    }
    else {
      uint64_t v6 = 0x6C65636E6163;
    }
    if (v4) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = 0xE600000000000000;
    }
  }
  else
  {
    unint64_t v7 = 0xE300000000000000;
    uint64_t v6 = 7562617;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_47_7();
    if (v8) {
      BOOL v3 = 28526;
    }
    else {
      BOOL v3 = 0x6C65636E6163;
    }
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0xE600000000000000;
    }
  }
  else
  {
    uint64_t v10 = 0xE300000000000000;
  }
  if (v6 == v3 && v7 == v10) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x6974736567677573;
  }
  else {
    uint64_t v4 = 0x7470697263736564;
  }
  if (v3) {
    unint64_t v5 = 0xEB000000006E6F69;
  }
  else {
    unint64_t v5 = 0xEA00000000006E6FLL;
  }
  if (a2) {
    uint64_t v6 = 0x6974736567677573;
  }
  else {
    uint64_t v6 = 0x7470697263736564;
  }
  if (a2) {
    unint64_t v7 = 0xEA00000000006E6FLL;
  }
  else {
    unint64_t v7 = 0xEB000000006E6F69;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x6D6F74737563;
  }
  else {
    uint64_t v4 = 0x6D7269666E6F63;
  }
  if (v3) {
    unint64_t v5 = 0xE700000000000000;
  }
  else {
    unint64_t v5 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v6 = 0x6D6F74737563;
  }
  else {
    uint64_t v6 = 0x6D7269666E6F63;
  }
  if (a2) {
    unint64_t v7 = 0xE600000000000000;
  }
  else {
    unint64_t v7 = 0xE700000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x6D6F74737563;
  }
  else {
    uint64_t v4 = 0x65756E69746E6F63;
  }
  if (v3) {
    unint64_t v5 = 0xED00007070416E49;
  }
  else {
    unint64_t v5 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v6 = 0x6D6F74737563;
  }
  else {
    uint64_t v6 = 0x65756E69746E6F63;
  }
  if (a2) {
    unint64_t v7 = 0xE600000000000000;
  }
  else {
    unint64_t v7 = 0xED00007070416E49;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;

  BOOL v3 = 0x6D7269666E6F63;
  if (a1)
  {
    OUTLINED_FUNCTION_28_13();
    if (v4) {
      uint64_t v6 = 0x6D6F74737563;
    }
    else {
      uint64_t v6 = 0x62726556736168;
    }
    if (v4) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = 0xE700000000000000;
    }
  }
  else
  {
    unint64_t v7 = 0xE700000000000000;
    uint64_t v6 = 0x6D7269666E6F63;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_28_13();
    if (v8) {
      BOOL v3 = 0x6D6F74737563;
    }
    else {
      BOOL v3 = 0x62726556736168;
    }
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0xE700000000000000;
    }
  }
  else
  {
    uint64_t v10 = 0xE700000000000000;
  }
  if (v6 == v3 && v7 == v10) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v3 = 0x7070416E69;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = a1;
  uint64_t v6 = 0x7070416E69;
  switch(v5)
  {
    case 1:
      uint64_t v6 = 0x7375437070416E69;
      unint64_t v4 = 0xEB000000006D6F74;
      break;
    case 2:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v6 = 0x7070416E65706FLL;
      break;
    case 3:
      uint64_t v6 = 0x437070416E65706FLL;
      unint64_t v4 = 0xED00006D6F747375;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      uint64_t v3 = 0x7375437070416E69;
      unint64_t v7 = 0xEB000000006D6F74;
      break;
    case 2:
      unint64_t v7 = 0xE700000000000000;
      uint64_t v3 = 0x7070416E65706FLL;
      break;
    case 3:
      uint64_t v3 = 0x437070416E65706FLL;
      unint64_t v7 = 0xED00006D6F747375;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  char v2 = 0x6E756F436D657469;
  uint64_t v3 = 0xE900000000000074;
  unint64_t v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x656C7069746C756DLL;
    }
    else {
      uint64_t v5 = 0x72746E49776F6873;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xED00007365676150;
    }
    else {
      uint64_t v6 = 0xE90000000000006FLL;
    }
  }
  else
  {
    uint64_t v5 = 0x6E756F436D657469;
    uint64_t v6 = 0xE900000000000074;
  }
  if (a2)
  {
    if (a2 == 1) {
      char v2 = 0x656C7069746C756DLL;
    }
    else {
      char v2 = 0x72746E49776F6873;
    }
    if (a2 == 1) {
      uint64_t v3 = 0xED00007365676150;
    }
    else {
      uint64_t v3 = 0xE90000000000006FLL;
    }
  }
  if (v5 == v2 && v6 == v3) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = OUTLINED_FUNCTION_42_8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  char v2 = 0xED00007070416E49;
  uint64_t v3 = 0x65756E69746E6F63;
  unint64_t v4 = a1;
  uint64_t v5 = 0x65756E69746E6F63;
  uint64_t v6 = 0xED00007070416E49;
  switch(v4)
  {
    case 1:
      uint64_t v6 = 0xE600000000000000;
      uint64_t v5 = OUTLINED_FUNCTION_19_13();
      break;
    case 2:
      uint64_t v5 = 0x43746C7561666564;
      uint64_t v6 = 0xEF65756E69746E6FLL;
      break;
    case 3:
      uint64_t v5 = 0x45746C7561666564;
      uint64_t v6 = 0xEC000000726F7272;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      char v2 = 0xE600000000000000;
      uint64_t v3 = 0x6D6F74737563;
      break;
    case 2:
      uint64_t v3 = 0x43746C7561666564;
      char v2 = 0xEF65756E69746E6FLL;
      break;
    case 3:
      uint64_t v3 = 0x45746C7561666564;
      char v2 = 0xEC000000726F7272;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = OUTLINED_FUNCTION_42_8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0x64656C6261736964;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = a1;
  uint64_t v6 = 0x64656C6261736964;
  switch(v5)
  {
    case 1:
      uint64_t v6 = OUTLINED_FUNCTION_52_3();
      unint64_t v4 = 0xE900000000000065;
      break;
    case 2:
      uint64_t v6 = 0x6C62616E45736177;
      unint64_t v4 = 0xEA00000000006465;
      break;
    case 3:
      uint64_t v6 = 0x7361576863746177;
      unint64_t v4 = 0xEF64656C62616E45;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      OUTLINED_FUNCTION_43_6();
      unint64_t v7 = 0xE900000000000065;
      break;
    case 2:
      uint64_t v3 = 0x6C62616E45736177;
      unint64_t v7 = 0xEA00000000006465;
      break;
    case 3:
      uint64_t v3 = 0x7361576863746177;
      unint64_t v7 = 0xEF64656C62616E45;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0x64656C62616E65;
  unint64_t v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x6C62616E45736177;
    }
    else {
      uint64_t v5 = 0x6863746177;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xEA00000000006465;
    }
    else {
      uint64_t v6 = 0xE500000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0xE700000000000000;
    uint64_t v5 = 0x64656C62616E65;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x6C62616E45736177;
    }
    else {
      uint64_t v3 = 0x6863746177;
    }
    if (a2 == 1) {
      unint64_t v7 = 0xEA00000000006465;
    }
    else {
      unint64_t v7 = 0xE500000000000000;
    }
  }
  else
  {
    unint64_t v7 = 0xE700000000000000;
  }
  if (v5 == v3 && v6 == v7) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a2 & 1;
  uint64_t v5 = a3(a1 & 1);
  uint64_t v7 = v6;
  if (v5 == a3(v4) && v7 == v8) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    LOBYTE(v5) = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1)
{
  unint64_t v3 = 0xE600000000000000;
  switch(a1)
  {
    case 2:
      unint64_t v3 = 0xE300000000000000;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      break;
    case 6:
      unint64_t v3 = 0xE300000000000000;
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_46_8();
  switch(v6)
  {
    case 1:
      unint64_t v5 = 0x6C65636E6163;
      break;
    case 2:
      unint64_t v1 = 0xE300000000000000;
      unint64_t v5 = 7239026;
      break;
    case 3:
      unint64_t v1 = 0xE400000000000000;
      unint64_t v5 = 1684957542;
      break;
    case 4:
      uint64_t v7 = 1634038371;
      goto LABEL_11;
    case 5:
      uint64_t v7 = 1701602660;
LABEL_11:
      unint64_t v5 = v7 & 0xFFFF0000FFFFFFFFLL | 0x657400000000;
      break;
    case 6:
      unint64_t v1 = 0xE300000000000000;
      unint64_t v5 = 7827304;
      break;
    default:
      break;
  }
  if (v4 == v5 && v3 == v1) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  unint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;

  if (a1)
  {
    OUTLINED_FUNCTION_28_13();
    if (v3) {
      uint64_t v7 = 0x7265626D756ELL;
    }
    else {
      uint64_t v7 = 7107189;
    }
    if (v3) {
      unint64_t v1 = v6;
    }
    else {
      unint64_t v1 = 0xE300000000000000;
    }
  }
  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_38_11();
  }
  if (v4)
  {
    OUTLINED_FUNCTION_28_13();
    if (v8) {
      unint64_t v5 = 0x7265626D756ELL;
    }
    else {
      unint64_t v5 = 7107189;
    }
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0xE300000000000000;
    }
  }
  else
  {
    uint64_t v10 = 0xE400000000000000;
  }
  if (v7 == v5 && v1 == v10) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    char v2 = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  uint64_t v7 = v6;
  if (v5 == ((uint64_t (*)(uint64_t))a3)(a2) && v7 == v8) {
    OUTLINED_FUNCTION_5_18();
  }
  else {
    LOBYTE(v5) = OUTLINED_FUNCTION_0_20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t WFInputTextFlow.exitValue.getter()
{
  unint64_t v1 = *(void **)(v0 + 160);
  int v2 = *(unsigned __int8 *)(v0 + 176);
  if (v2 == 2)
  {
    swift_errorRetain();
  }
  else if (v2 == 1)
  {
    id v3 = v1;
  }
  else
  {
    lazy protocol witness table accessor for type WFInputTextFlowError and conformance WFInputTextFlowError();
    return swift_allocError();
  }
  return (uint64_t)v1;
}

unint64_t lazy protocol witness table accessor for type WFInputTextFlowError and conformance WFInputTextFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError;
  if (!lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError;
  if (!lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFInputTextFlowError and conformance WFInputTextFlowError);
  }
  return result;
}

void WFInputTextFlow.__allocating_init(shortcutName:request:appBundleId:dialogTemplating:deviceState:outputPublisher:)()
{
}

void WFInputTextFlow.init(shortcutName:request:appBundleId:dialogTemplating:deviceState:outputPublisher:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  id v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = type metadata accessor for CATOption();
  uint64_t v19 = OUTLINED_FUNCTION_16(v18);
  __chkstk_darwin(v19);
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 192) = 0;
  *(void *)(v1 + 16) = v17;
  *(void *)(v1 + 24) = v15;
  *(void *)(v1 + 32) = v13;
  *(void *)(v1 + 40) = v11;
  *(void *)(v1 + 48) = v9;
  outlined init with copy of DeviceState((uint64_t)v5, v1 + 56);
  outlined init with copy of DeviceState((uint64_t)v5, (uint64_t)v35);
  if (v7)
  {
    swift_retain();
    id v20 = v13;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
    char v21 = v7;
  }
  else
  {
    uint64_t v33 = v3;
    outlined init with copy of DeviceState((uint64_t)v35, (uint64_t)v34);
    uint64_t v22 = one-time initialization token for shared;
    id v23 = v13;
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v24 = static WFDialogState.shared;
    type metadata accessor for WorkflowRunnerCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v32 = OUTLINED_FUNCTION_51_4();
    type metadata accessor for WorkflowRunnerCATsSimple();
    OUTLINED_FUNCTION_49_5();
    uint64_t v31 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for RunCustomIntentCATs();
    OUTLINED_FUNCTION_49_5();
    uint64_t v30 = OUTLINED_FUNCTION_51_4();
    type metadata accessor for RunCustomIntentCATsSimple();
    OUTLINED_FUNCTION_49_5();
    uint64_t v25 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATs();
    OUTLINED_FUNCTION_49_5();
    uint64_t v26 = OUTLINED_FUNCTION_51_4();
    type metadata accessor for RunVoiceCommandCATsSimple();
    OUTLINED_FUNCTION_49_5();
    uint64_t v27 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
    OUTLINED_FUNCTION_49_5();
    uint64_t v28 = OUTLINED_FUNCTION_51_4();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
    type metadata accessor for WorkflowDialogTemplating();
    swift_allocObject();
    char v21 = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v34, v24, v32, v31, v30, v25, v26, v27, v28);
    id v3 = v33;
  }
  *(void *)(v1 + 96) = v21;
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t v29 = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(v5);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  *(void *)(v1 + 104) = v29;
  type metadata accessor for WorkflowNLContextProvider();
  *(void *)(v1 + 112) = swift_allocObject();
  outlined init with take of AceServiceInvokerAsync(v3, v1 + 120);
  *(void *)(v1 + 160) = 0;
  *(void *)(v1 + 168) = 0;
  *(unsigned char *)(v1 + 176) = 3;
  OUTLINED_FUNCTION_27_1();
}

void WFInputTextFlow.on(input:)()
{
  OUTLINED_FUNCTION_36();
  int v2 = v1;
  type metadata accessor for Input();
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_56();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_59_0();
  v5();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    swift_slowAlloc();
    uint64_t v15 = OUTLINED_FUNCTION_39_9();
    *(_DWORD *)int v2 = 136315138;
    uint64_t v8 = Input.description.getter();
    uint64_t v10 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v15);
    OUTLINED_FUNCTION_39_6(v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v11 = OUTLINED_FUNCTION_44_6();
    v12(v11);
    _os_log_impl(&dword_0, v6, v7, "#WFInputTextFlow on input: %s", v2, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_44_6();
    v14(v13);
  }

  if (*(unsigned char *)(v0 + 176) == 3 && !*(void *)(v0 + 168) && *(void *)(v0 + 160) == 1) {
    WFInputTextFlow.processTextResponse(input:)();
  }
  OUTLINED_FUNCTION_27_1();
}

uint64_t WFInputTextFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = v1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t WFInputTextFlow.execute()()
{
  Swift::String v58 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    os_log_type_t v7 = *(void **)(v5 + 32);
    id v8 = [v7 message];
    if (v8)
    {
      unint64_t v9 = v8;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;
    }
    else
    {
      unint64_t v12 = 0xE500000000000000;
      uint64_t v10 = 0x7974706D65;
    }
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2080;
    id v13 = [v7 prompt];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;
    }
    else
    {
      unint64_t v17 = 0xE500000000000000;
      uint64_t v15 = 0x7974706D65;
    }
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v2, v3, "#WFInputTextFlow begins execution, message: %s, prompt: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v18 = v0[10];
  uint64_t v19 = *(void *)(v18 + 160);
  uint64_t v20 = *(void *)(v18 + 168);
  switch(*(unsigned char *)(v18 + 176))
  {
    case 1:
      uint64_t v30 = (void *)Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_5_3(v31)) {
        goto LABEL_22;
      }
      uint64_t v32 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v32);
      uint64_t v35 = "#WFInputTextFlow completed";
      goto LABEL_21;
    case 2:
      uint64_t v30 = (void *)Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_5_3(v36)) {
        goto LABEL_22;
      }
      uint64_t v37 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v37);
      uint64_t v35 = "#WFInputTextFlow error state";
LABEL_21:
      OUTLINED_FUNCTION_23_0(&dword_0, v33, v34, v35);
      OUTLINED_FUNCTION_7_0();
LABEL_22:

      static ExecuteResponse.complete()();
      goto LABEL_31;
    case 3:
      uint64_t v38 = v19 | v20;
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      if (v38)
      {
        if (v41)
        {
          uint64_t v42 = (uint8_t *)OUTLINED_FUNCTION_33();
          *(_WORD *)uint64_t v42 = 0;
          _os_log_impl(&dword_0, v39, v40, "#WFInputTextFlow waiting for response", v42, 2u);
          OUTLINED_FUNCTION_7_0();
        }

LABEL_30:
        static ExecuteResponse.ongoing(requireInput:)();
LABEL_31:
        OUTLINED_FUNCTION_18_0();
        OUTLINED_FUNCTION_18_2();
        __asm { BRAA            X1, X16 }
      }
      if (v41)
      {
        uint64_t v53 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl(&dword_0, v39, v40, "#WFInputTextFlow submitting output", v53, 2u);
        OUTLINED_FUNCTION_7_0();
      }

      uint64_t v54 = (void *)swift_task_alloc();
      v0[12] = v54;
      *uint64_t v54 = v0;
      v54[1] = WFInputTextFlow.execute();
      OUTLINED_FUNCTION_18_2();
      return WFInputTextFlow.buildOutput()();
    default:
      swift_bridgeObjectRetain();
      char v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        id v23 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)id v23 = 0;
        _os_log_impl(&dword_0, v21, v22, "#WFInputTextFlow responseReceived", v23, 2u);
        OUTLINED_FUNCTION_7_0();
      }

      if (v20)
      {
        id v24 = objc_allocWithZone((Class)WFInputTextDialogResponse);
        id v25 = @nonobjc WFInputTextDialogResponse.init(inputtedText:cancelled:)(v19, v20, 0);
        uint64_t v27 = *(void **)(v18 + 160);
        uint64_t v26 = *(void **)(v18 + 168);
        *(void *)(v18 + 160) = v25;
        *(void *)(v18 + 168) = 0;
        char v28 = *(unsigned char *)(v18 + 176);
        *(unsigned char *)(v18 + 176) = 1;
        id v29 = v25;
        outlined consume of WFInputTextFlow.State(v27, v26, v28);
        static ExecuteResponse.ongoing(requireInput:)();

        goto LABEL_31;
      }
      uint64_t v43 = (void *)Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_5_3(v44))
      {
        uint64_t v45 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v45);
        OUTLINED_FUNCTION_23_0(&dword_0, v46, v47, "#WFInputTextFlow received empty text");
        OUTLINED_FUNCTION_7_0();
      }

      uint64_t v48 = *(void **)(v18 + 160);
      uint64_t v49 = *(void **)(v18 + 168);
      *(void *)(v18 + 160) = 0;
      *(void *)(v18 + 168) = 0;
      char v50 = *(unsigned char *)(v18 + 176);
      *(unsigned char *)(v18 + 176) = 3;
      outlined consume of WFInputTextFlow.State(v48, v49, v50);
      goto LABEL_30;
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *os_log_type_t v3 = v2;
  BOOL v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = v1[18];
  os_log_type_t v3 = v1[19];
  __swift_project_boxed_opaque_existential_1(v1 + 15, v2);
  BOOL v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v4;
  *BOOL v4 = v0;
  v4[1] = WFInputTextFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v2, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *os_log_type_t v3 = v2;
  BOOL v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  char v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void **)(v1 + 160);
  os_log_type_t v3 = *(void **)(v1 + 168);
  *(_OWORD *)(v1 + 160) = xmmword_216D50;
  BOOL v4 = *(unsigned char *)(v1 + 176);
  *(unsigned char *)(v1 + 176) = 3;
  outlined consume of WFInputTextFlow.State(v2, v3, v4);
  static ExecuteResponse.ongoing(requireInput:)();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_18_0();
  return v5();
}

{
  _WORD *v0;
  char v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    uint64_t v0 = (_WORD *)OUTLINED_FUNCTION_33();
    *uint64_t v0 = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v4, v5, "#WFInputTextFlow error submitting output");
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_30_12();
  outlined consume of WFInputTextFlow.State(v2, v0, v1);
  static ExecuteResponse.complete()();
  swift_errorRelease();
  OUTLINED_FUNCTION_18_0();
  return v6();
}

{
  uint64_t v0;
  _WORD *v1;
  char v2;
  void *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  os_log_type_t v3 = (void *)Logger.logObject.getter();
  BOOL v4 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v4))
  {
    uint64_t v1 = (_WORD *)OUTLINED_FUNCTION_33();
    uint8_t *v1 = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v5, v6, "#WFInputTextFlow error submitting output");
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_30_12();
  outlined consume of WFInputTextFlow.State(v3, v1, v2);
  static ExecuteResponse.complete()();
  swift_errorRelease();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

uint64_t WFInputTextFlow.execute(completion:)()
{
  type metadata accessor for WFInputTextFlow();
  lazy protocol witness table accessor for type WFInputTextFlow and conformance WFInputTextFlow(&lazy protocol witness table cache variable for type WFInputTextFlow and conformance WFInputTextFlow, v0, (void (*)(uint64_t))type metadata accessor for WFInputTextFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t WFInputTextFlow.buildOutput()()
{
  OUTLINED_FUNCTION_9_0();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v3);
  v1[9] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for DialogPhase();
  v1[10] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[11] = v5;
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest();
  v1[14] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[15] = v7;
  v1[16] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for NLContextUpdate();
  v1[17] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[18] = v9;
  v1[19] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[20] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[21] = v11;
  v1[22] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  void *v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[20];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    uint64_t v6 = (void *)Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v7))
    {
      uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v8);
      OUTLINED_FUNCTION_23_0(&dword_0, v9, v10, "#WFInputTextFlow: building rfv2 snippet");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v11 = v0[8];

    uint64_t v12 = *(void *)(v11 + 32);
    v0[24] = v12;
    OUTLINED_FUNCTION_16_5();
    id v23 = (uint64_t (*)(uint64_t))(*(void *)(v13 + 200) + **(int **)(v13 + 200));
    uint64_t v14 = (void *)swift_task_alloc();
    v0[25] = v14;
    *uint64_t v14 = v0;
    v14[1] = WFInputTextFlow.buildOutput();
    return v23(v12);
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
    unint64_t v17 = (void *)Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v18))
    {
      uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v19);
      OUTLINED_FUNCTION_23_0(&dword_0, v20, v21, "#WFInputTextFlow: building rfv1 snippet");
      OUTLINED_FUNCTION_7_0();
    }

    os_log_type_t v22 = (void *)swift_task_alloc();
    v0[23] = v22;
    uint8_t *v22 = v0;
    v22[1] = WFInputTextFlow.buildOutput();
    return WFInputTextFlow.buildOutput_rfv1()();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v9();
  }
  else
  {
    *(void *)(v5 + 208) = v3;
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void (*v6)(void);
  void (*v7)(void);
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v1 = v0;
  uint64_t v2 = (void *)v0[26];
  unint64_t v17 = v0 + 2;
  uint64_t v3 = v0[18];
  uint64_t v15 = v0[17];
  uint64_t v13 = v0[19];
  uint64_t v14 = v0[9];
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v4 + 200))();
  static DialogPhase.confirmed.getter();
  uint64_t v5 = [v2 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_59_0();
  v6();
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  OUTLINED_FUNCTION_81();
  v7();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v14, v13, v15);
  __swift_storeEnumTagSinglePayload(v14, 0, 1, v15);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[27] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_211C70;
  *(void *)(v8 + 32) = v2;
  uint64_t v18 = v8;
  specialized Array._endMutation()();
  v0[28] = v18;
  uint64_t v16 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
  uint64_t v9 = v2;
  uint64_t v10 = (void *)swift_task_alloc();
  v1[29] = v10;
  *uint64_t v10 = v1;
  v10[1] = WFInputTextFlow.buildOutput();
  uint64_t v11 = v1[16];
  return ((uint64_t (*)(void *, uint64_t, uint64_t))v16)(v17, v18, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 16), v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t WFInputTextFlow.buildOutput_rfv1()()
{
  OUTLINED_FUNCTION_9_0();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v3);
  v1[9] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  v1[10] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[11] = v5;
  v1[12] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[13] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[14] = v7;
  v1[15] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0[8] + 32);
  v0[16] = v1;
  OUTLINED_FUNCTION_16_5();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 192) + **(int **)(v2 + 192));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[17] = v3;
  *uint64_t v3 = v0;
  v3[1] = WFInputTextFlow.buildOutput_rfv1();
  uint64_t v4 = v0[15];
  return v6(v4, v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void WFInputTextFlow.buildOutput_rfv1()()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v6 = *(uint64_t **)(v0 + 56);
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v7 + 200))();
  __swift_project_boxed_opaque_existential_1((void *)(v5 + 56), *(void *)(v5 + 80));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  OUTLINED_FUNCTION_59_0();
  v8();
  __swift_storeEnumTagSinglePayload(v4, 0, 1, v14);
  uint64_t v9 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v6[3] = v9;
  v6[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v14);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_2();
  __asm { BRAA            X1, X16 }
}

void WFInputTextFlow.processTextResponse(input:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = v0;
  uint64_t v4 = (uint8_t *)type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v49 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_50_1();
  char v50 = v7;
  uint64_t v8 = type metadata accessor for VoiceCommandsNLIntent(0);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_20_18();
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_27_6();
  Input.parse.getter();
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 88))(v1, v11);
  if (v15 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v16 = OUTLINED_FUNCTION_37_10();
    v17(v16);
    OUTLINED_FUNCTION_73();
    v18();
    OUTLINED_FUNCTION_59_0();
    v19();
    WFInputTextFlow.getTextFromIntent(intent:)();
    uint64_t v21 = v20;
    unint64_t v23 = v22;
    uint64_t v24 = v0;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    uint64_t v48 = v21;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v51 = v24;
      OUTLINED_FUNCTION_30_11();
      uint64_t v52 = OUTLINED_FUNCTION_39_9();
      *(_DWORD *)uint64_t v4 = 136315138;
      if (v23) {
        uint64_t v28 = v21;
      }
      else {
        uint64_t v28 = 0x7974706D65;
      }
      if (v23) {
        unint64_t v29 = v23;
      }
      else {
        unint64_t v29 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v30 = v28;
      uint64_t v24 = v51;
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, &v52);
      OUTLINED_FUNCTION_39_6(v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v26, v27, "#WFInputTextFlow received text: %s", v4, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();

      outlined destroy of VoiceCommandsNLIntent(v2);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      outlined destroy of VoiceCommandsNLIntent(v2);
    }
    OUTLINED_FUNCTION_81();
    v43();
    if (v23)
    {
LABEL_23:
      os_log_type_t v44 = *(void **)(v24 + 160);
      uint64_t v45 = *(void **)(v24 + 168);
      *(void *)(v24 + 160) = v48;
      *(void *)(v24 + 168) = v23;
      char v46 = *(unsigned char *)(v24 + 176);
      *(unsigned char *)(v24 + 176) = 0;
      outlined consume of WFInputTextFlow.State(v44, v45, v46);
    }
  }
  else
  {
    if (v15 != enum case for Parse.uso(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v11);
      goto LABEL_28;
    }
    uint64_t v32 = OUTLINED_FUNCTION_37_10();
    v33(v32);
    OUTLINED_FUNCTION_73();
    v34();
    if ((SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) == 0)
    {
      OUTLINED_FUNCTION_81();
      v47();
      goto LABEL_28;
    }
    uint64_t v24 = v0;
    uint64_t v35 = WFInputTextFlow.parseUSOInput(usoParse:)(v50);
    unint64_t v37 = v36;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
    swift_bridgeObjectRetain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    uint64_t v48 = v35;
    if (os_log_type_enabled(v39, v40))
    {
      OUTLINED_FUNCTION_30_11();
      uint64_t v52 = OUTLINED_FUNCTION_39_9();
      *(_DWORD *)uint64_t v4 = 136315138;
      uint64_t v24 = v3;
      if (v37)
      {
        unint64_t v41 = v37;
      }
      else
      {
        uint64_t v35 = 0x7974706D65;
        unint64_t v41 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v41, &v52);
      OUTLINED_FUNCTION_39_6(v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v39, v40, "#WFInputTextFlow received text from usoParse: %s", v4, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();

      (*(void (**)(uint8_t *, uint8_t *))(v49 + 8))(v50, v4);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint8_t *, uint8_t *))(v49 + 8))(v50, v4);
    }
    unint64_t v23 = v37;
    if (v37) {
      goto LABEL_23;
    }
  }
LABEL_28:
  OUTLINED_FUNCTION_27_1();
}

void WFInputTextFlow.getTextFromIntent(intent:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_56();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_27_6();
  id v9 = [*(id *)(v0 + 32) textFieldConfiguration];
  id v10 = [v9 keyboardType];

  if (v10)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
    if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14) {
      goto LABEL_14;
    }
    char v16 = OUTLINED_FUNCTION_31_10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_15;
    }
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;
    if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20)
    {
LABEL_14:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v22 = OUTLINED_FUNCTION_31_10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        if (one-time initialization token for voiceCommandTextNode == -1)
        {
LABEL_13:
          type metadata accessor for VoiceCommandsNLIntent(0);
          lazy protocol witness table accessor for type WFInputTextFlow and conformance WFInputTextFlow((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, 255, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
          IntentNodeTraversable.value<A>(forNode:)();

          goto LABEL_31;
        }
LABEL_35:
        swift_once();
        goto LABEL_13;
      }
    }
LABEL_15:
    if (one-time initialization token for voiceCommandScalarNode != -1) {
      swift_once();
    }
    type metadata accessor for VoiceCommandsNLIntent(0);
    lazy protocol witness table accessor for type WFInputTextFlow and conformance WFInputTextFlow((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, 255, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
    IntentNodeTraversable.value<A>(forNode:)();
    if (__swift_getEnumTagSinglePayload(v2, 1, v5) == 1)
    {

      outlined destroy of URL?(v2, &demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
      goto LABEL_31;
    }
    OUTLINED_FUNCTION_73();
    v23();
    Scalar.value.getter();
    if (v26)
    {
      OUTLINED_FUNCTION_81();
      v24();

      goto LABEL_31;
    }
    if (floor(v25) != v25)
    {
      Double.description.getter();
      goto LABEL_30;
    }
    if ((~*(void *)&v25 & 0x7FF0000000000000) != 0)
    {
      if (v25 > -9.22337204e18)
      {
        if (v25 < 9.22337204e18)
        {
          dispatch thunk of CustomStringConvertible.description.getter();
LABEL_30:

          (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
          goto LABEL_31;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_34;
  }
  if (one-time initialization token for voiceCommandTextNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  lazy protocol witness table accessor for type WFInputTextFlow and conformance WFInputTextFlow((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, 255, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  IntentNodeTraversable.value<A>(forNode:)();
LABEL_31:
  OUTLINED_FUNCTION_27_1();
}

uint64_t WFInputTextFlow.parseUSOInput(usoParse:)(uint8_t *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v67 = (char *)v66 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v10 = OUTLINED_FUNCTION_16(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_50_1();
  uint64_t v68 = v11;
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v13 = v12;
  uint64_t v15 = __chkstk_darwin(v14);
  v66[1] = (char *)v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_2();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_20_18();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v69 = __swift_project_value_buffer(v21, (uint64_t)static Logger.voiceCommands);
  char v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)OUTLINED_FUNCTION_33();
    v66[0] = v13;
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_0, v22, v23, "parsing uso input", v24, 2u);
    uint64_t v13 = v66[0];
    OUTLINED_FUNCTION_7_0();
  }

  USOParse.userParse.getter();
  uint64_t v25 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  char v26 = *(void (**)(void))(v13 + 8);
  OUTLINED_FUNCTION_81();
  v26();
  uint64_t v27 = v68;
  specialized Collection.first.getter(v25, v68);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v27, 1, v17) == 1)
  {
    outlined destroy of URL?(v27, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v30);
      _os_log_impl(&dword_0, v28, v29, "#WFInputTextFlow: missing UDA", a1, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    return 0;
  }
  OUTLINED_FUNCTION_73();
  v31();
  USOParse.userParse.getter();
  uint64_t v32 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  OUTLINED_FUNCTION_81();
  v26();
  unint64_t v33 = *(void *)(v32 + 16);
  swift_bridgeObjectRelease();
  BOOL v34 = v33 >= 2;
  uint64_t v35 = (uint64_t)v67;
  if (v34)
  {
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v37))
    {
      uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl(&dword_0, v36, (os_log_type_t)a1, "#WFInputTextFlow: more than one task found in UDA", v38, 2u);
      OUTLINED_FUNCTION_7_0();
    }
  }
  id v39 = [*(id *)(v66[2] + 32) textFieldConfiguration];
  id v40 = [v39 keyboardType];

  if (!v40) {
    goto LABEL_21;
  }
  SiriLinkFlowPlugin::WFInputTextTypes v41 = WFTextFieldKeyboardType.toInputType()();

  if (v41 - 1 >= 2)
  {
    if (v41)
    {
      Siri_Nlu_External_UserDialogAct.urlValue.getter(v35);
      outlined init with copy of URL?(v35, (uint64_t)v7);
      uint64_t v54 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v54) != 1)
      {
        uint64_t v51 = URL.absoluteString.getter();
        outlined destroy of URL?(v35, (uint64_t *)&demangling cache variable for type metadata for URL?);
        uint64_t v58 = OUTLINED_FUNCTION_15_16();
        v59(v58);
        (*(void (**)(char *, uint64_t))(*(void *)(v54 - 8) + 8))(v7, v54);
        return v51;
      }
      outlined destroy of URL?(v35, (uint64_t *)&demangling cache variable for type metadata for URL?);
      uint64_t v55 = OUTLINED_FUNCTION_15_16();
      v56(v55);
      outlined destroy of URL?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for URL?);
      return 0;
    }
LABEL_21:
    uint64_t v50 = Siri_Nlu_External_UserDialogAct.stringValue.getter();
    goto LABEL_22;
  }
  uint64_t v42 = Siri_Nlu_External_UserDialogAct.intValue.getter();
  if (v43)
  {
    Siri_Nlu_External_UserDialogAct.doubleValue.getter();
    if (v60)
    {
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v1, v17);
      return 0;
    }
    uint64_t v61 = (void *)Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v62))
    {
      uint64_t v63 = (float *)OUTLINED_FUNCTION_30_11();
      OUTLINED_FUNCTION_24_15(v63, 3.852e-34);
      OUTLINED_FUNCTION_55_4(&dword_0, v64, v65, "#WFInputTextFlow received double number: %f");
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v50 = Double.description.getter();
  }
  else
  {
    uint64_t v44 = v42;
    uint64_t v45 = (void *)Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v46))
    {
      uint64_t v47 = (float *)OUTLINED_FUNCTION_30_11();
      OUTLINED_FUNCTION_24_15(v47, 3.852e-34);
      OUTLINED_FUNCTION_55_4(&dword_0, v48, v49, "#WFInputTextFlow received int number: %lld");
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v70 = v44;
    uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
  }
LABEL_22:
  uint64_t v51 = v50;
  uint64_t v52 = OUTLINED_FUNCTION_15_16();
  v53(v52);
  return v51;
}

SiriLinkFlowPlugin::WFInputTextTypes __swiftcall WFTextFieldKeyboardType.toInputType()()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v1 == OUTLINED_FUNCTION_40_8() && v0 == v2)
  {
    SiriLinkFlowPlugin::WFInputTextTypes v5 = SiriLinkFlowPlugin_WFInputTextTypes_intNumber;
LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v5;
  }
  uint64_t v4 = OUTLINED_FUNCTION_16_16();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v4 == OUTLINED_FUNCTION_40_8() && v0 == v7)
    {
      SiriLinkFlowPlugin::WFInputTextTypes v5 = SiriLinkFlowPlugin_WFInputTextTypes_decimalNumber;
    }
    else
    {
      uint64_t v9 = OUTLINED_FUNCTION_16_16();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v9) {
        return 2;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      SiriLinkFlowPlugin::WFInputTextTypes v5 = SiriLinkFlowPlugin_WFInputTextTypes_url;
      if (v9 != OUTLINED_FUNCTION_40_8() || v0 != v10)
      {
        if (OUTLINED_FUNCTION_16_16()) {
          SiriLinkFlowPlugin::WFInputTextTypes v5 = SiriLinkFlowPlugin_WFInputTextTypes_url;
        }
        else {
          SiriLinkFlowPlugin::WFInputTextTypes v5 = SiriLinkFlowPlugin_WFInputTextTypes_text;
        }
      }
    }
    goto LABEL_8;
  }
  return 1;
}

uint64_t WFInputTextFlow.deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 120);
  outlined consume of WFInputTextFlow.State(*(void **)(v0 + 160), *(id *)(v0 + 168), *(unsigned char *)(v0 + 176));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t WFInputTextFlow.__deallocating_deinit()
{
  WFInputTextFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance WFInputTextFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFInputTextFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

uint64_t protocol witness for Flow.execute() in conformance WFInputTextFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 232) + **(int **)(**(void **)v1 + 232));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFInputTextFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 208))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

id @nonobjc WFInputTextDialogResponse.init(inputtedText:cancelled:)(uint64_t a1, uint64_t a2, char a3)
{
  if (a2)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  id v6 = [v3 initWithInputtedText:v5 cancelled:a3 & 1];

  return v6;
}

void outlined consume of WFInputTextFlow.State(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 2:
      swift_errorRelease();
      break;
    case 1:

      break;
    case 0:
      swift_bridgeObjectRelease();
      break;
  }
}

uint64_t type metadata accessor for WFInputTextFlow()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type WFInputTextTypes and conformance WFInputTextTypes()
{
  unint64_t result = lazy protocol witness table cache variable for type WFInputTextTypes and conformance WFInputTextTypes;
  if (!lazy protocol witness table cache variable for type WFInputTextTypes and conformance WFInputTextTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFInputTextTypes and conformance WFInputTextTypes);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for WFInputTextFlowError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0xDD964);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for WFInputTextFlowError()
{
  return &type metadata for WFInputTextFlowError;
}

unsigned char *storeEnumTagSinglePayload for WFInputTextTypes(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xDDA68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WFInputTextTypes()
{
  return &type metadata for WFInputTextTypes;
}

id outlined copy of WFInputTextFlow.State(id result, id a2, char a3)
{
  switch(a3)
  {
    case 2:
      return (id)swift_errorRetain();
    case 1:
      return result;
    case 0:
      return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for WFInputTextFlow.State(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for WFInputTextFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of WFInputTextFlow.State(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for WFInputTextFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of WFInputTextFlow.State(*(id *)a2, v4, v5);
  unsigned int v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of WFInputTextFlow.State(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for WFInputTextFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  unsigned int v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of WFInputTextFlow.State(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for WFInputTextFlow.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WFInputTextFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for WFInputTextFlow.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for WFInputTextFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void *type metadata accessor for WFInputTextFlow.State()
{
  return &unk_28B580;
}

uint64_t lazy protocol witness table accessor for type WFInputTextFlow and conformance WFInputTextFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_20()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_15_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_16()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_19_13()
{
  return 0x6D6F74737563;
}

uint64_t OUTLINED_FUNCTION_24_15(float *a1, float a2)
{
  *a1 = a2;
  *(void *)(v3 - 112) = v2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_30_12()
{
  *(void *)(v1 + 160) = v0;
  *(void *)(v1 + 168) = 0;
  *(unsigned char *)(v1 + 176) = 2;
  return swift_errorRetain();
}

uint64_t OUTLINED_FUNCTION_31_10()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_37_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_11()
{
  return 1954047348;
}

uint64_t OUTLINED_FUNCTION_39_9()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_40_8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_42_8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_44_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_4()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_52_3()
{
  return 0x6D69547473726966;
}

void OUTLINED_FUNCTION_55_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t ShortcutsLinkNLContextProvider.makeContextForNeedsValue(valueType:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = 0;
  if ((SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) != 0 && a1)
  {
    id v9 = a1;
    uint64_t v10 = (uint64_t)static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(v9);
    if (v12)
    {
      if (v12 != 1 && !(v10 ^ 2 | v11))
      {
        type metadata accessor for WorkflowNLContextProvider();
        swift_allocObject();
        VoiceCommandNLContextProvider.makeContextForBoolNeedsValuePrompt(intent:parameter:)();

        return swift_release();
      }
    }
    else
    {
      outlined consume of VoiceCommandIntentValueType(v10, v11, 0);
    }
    uint64_t v8 = LNValueType.executeCommonVoiceCommandTaskBuilder.getter();
  }
  VoiceCommandNLContextProvider.makeContextForNeedsValue(taskBuilder:)(v8);
  if (a1)
  {
    id v14 = a1;
    unint64_t v15 = (unint64_t)static LNValueTypeMap.mapLNValueTypeToIntentValueType(valueType:)(v14);
    if (v17 == 2 && v15 <= 0xD && ((1 << v15) & 0x2881) != 0)
    {
      OUTLINED_FUNCTION_0_21();
      LNValueType.toPromptTargetType()();
      NLContextUpdate.dictationPromptTargetNodes.setter();
    }
    else
    {
      outlined consume of VoiceCommandIntentValueType(v15, v16, v17);
      NLContextUpdate.weightedPromptTargetDomain.setter();
      LNValueType.toPromptTargetType()();
      NLContextUpdate.weightedPromptResponseTargets.setter();
    }
  }
  else
  {
    OUTLINED_FUNCTION_0_21();
    NLContextUpdate.dictationPromptTargetNodes.setter();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t ShortcutsLinkNLContextProvider.makeContextForActionConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  VoiceCommandNLContextProvider.makeContextForConfirmation(acceptLabel:denyLabel:acceptAlternatives:denyAlternatives:)();
  uint64_t result = NLContextUpdate.weightedPromptResponseTargets.setter();
  if (a2 && a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = (void (*)(uint64_t *, void))NLContextUpdate.weightedPromptResponseTargets.modify();
    if (*v14)
    {
      unint64_t v15 = v14;
      uint64_t v19 = v13;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v16 = *(void *)(*v15 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      uint64_t v17 = *v15;
      *(void *)(v17 + 16) = v16 + 1;
      uint64_t v18 = v17 + 16 * v16;
      *(void *)(v18 + 32) = 0xD000000000000022;
      *(void *)(v18 + 40) = 0x8000000000223810;
      v19(v20, 0);
    }
    else
    {
      v13(v20, 0);
    }
    v20[0] = a5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, a1, a2);
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, a3, a4);
    ShortcutsLinkNLContextProvider.getDisplayHints(acceptList:denyList:)(v20[0], a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return NLContextUpdate.displayHints.setter();
  }
  return result;
}

uint64_t ShortcutsLinkNLContextProvider.makeContextForDisambiguation(disambiguationItems:)(uint64_t a1)
{
  return NLContextUpdate.displayHints.setter();
}

void *ShortcutsLinkNLContextProvider.getDisplayHints(acceptList:denyList:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  __chkstk_darwin(v4 - 8);
  uint64_t v47 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for DisplayHint();
  uint64_t v6 = *(void *)(v48 - 8);
  uint64_t v7 = __chkstk_darwin(v48);
  uint64_t v44 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v36 - v9;
  uint64_t v11 = type metadata accessor for SemanticValue();
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v45 = (char *)v36 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v36 - v18;
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v46 = v6;
  uint64_t v38 = a2;
  char v43 = v14;
  if (v20)
  {
    uint64_t v41 = v6 + 32;
    uint64_t v42 = (void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v37 = v17;
    id v40 = (void (**)(char *, uint64_t))(v17 + 8);
    swift_bridgeObjectRetain();
    v36[1] = a1;
    uint64_t v21 = a1 + 40;
    char v22 = _swiftEmptyArrayStorage;
    unint64_t v39 = 0x8000000000227F50;
    do
    {
      swift_bridgeObjectRetain();
      SemanticValue.init(string:label:)();
      os_log_type_t v23 = *v42;
      uint64_t v24 = (uint64_t)v47;
      (*v42)(v47, v19, v11);
      __swift_storeEnumTagSinglePayload(v24, 0, 1, v11);
      v23(v45, v19, v11);
      DisplayHint.init(idValue:displayValue:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, (uint64_t)v22);
      }
      unint64_t v26 = v22[2];
      unint64_t v25 = v22[3];
      uint64_t v6 = v46;
      if (v26 >= v25 >> 1) {
        char v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, (uint64_t)v22);
      }
      v21 += 16;
      v22[2] = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v22+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v26, v10, v48);
      (*v40)(v19, v11);
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    uint64_t v17 = v37;
    a2 = v38;
    id v14 = v43;
  }
  else
  {
    char v22 = _swiftEmptyArrayStorage;
  }
  uint64_t v27 = *(void *)(a2 + 16);
  if (v27)
  {
    uint64_t v41 = v6 + 32;
    uint64_t v42 = (void (**)(char *, char *, uint64_t))(v17 + 16);
    id v40 = (void (**)(char *, uint64_t))(v17 + 8);
    swift_bridgeObjectRetain();
    uint64_t v28 = a2 + 40;
    unint64_t v39 = 0x8000000000227F50;
    os_log_type_t v29 = v45;
    uint64_t v30 = v42;
    do
    {
      swift_bridgeObjectRetain();
      SemanticValue.init(string:label:)();
      uint64_t v31 = *v30;
      uint64_t v32 = (uint64_t)v47;
      (*v30)(v47, v14, v11);
      __swift_storeEnumTagSinglePayload(v32, 0, 1, v11);
      v31(v29, v14, v11);
      DisplayHint.init(idValue:displayValue:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, (uint64_t)v22);
      }
      unint64_t v34 = v22[2];
      unint64_t v33 = v22[3];
      if (v34 >= v33 >> 1) {
        char v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (uint64_t)v22);
      }
      v28 += 16;
      v22[2] = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))((unint64_t)v22+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v34, v44, v48);
      id v14 = v43;
      (*v40)(v43, v11);
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
  }
  return v22;
}

uint64_t type metadata accessor for ShortcutsLinkNLContextProvider()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return NLContextUpdate.dictationPromptTargetDomain.setter();
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v20 = v5;
    unint64_t v21 = v5 & 0xC000000000000001;
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = v21 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v7);
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v10 = v6;
      uint64_t v11 = v8;
      uint64_t v12 = a3;
      id v13 = [v8 identifier];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      a3 = v12;
      BOOL v17 = v14 == a2 && v16 == v12;
      if (v17)
      {
        swift_bridgeObjectRelease();
LABEL_17:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v11;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_17;
      }

      ++v7;
      uint64_t v6 = v10;
      BOOL v17 = v9 == v10;
      unint64_t v5 = v20;
      if (v17) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void *LNValue.localizedEnumCaseName(metadataProvider:enumIdentifier:bundleIdentifier:localeIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  id v13 = [v7 value];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (!swift_dynamicCast())
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
    char v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_9;
    }
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v20 = 0;
    unint64_t v21 = "Failed to localize enum case name because value is not a String.";
LABEL_8:
    _os_log_impl(&dword_0, v18, v19, v21, v20, 2u);
    swift_slowDealloc();
LABEL_9:

    return 0;
  }
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(a4, a5, v14, v15);
  if (!v6)
  {
    unint64_t v23 = v16;
    swift_bridgeObjectRetain();
    uint64_t v24 = specialized Sequence.first(where:)(v23, a2, a3);
    swift_bridgeObjectRelease();
    if (v24)
    {
      id v25 = [v24 cases];

      type metadata accessor for LNEnumCaseMetadata();
      unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      uint64_t v27 = specialized Sequence.first(where:)(v26, v34, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v27)
      {
        id v28 = v27;
        id v29 = [v28 displayRepresentation];
        id v30 = [v29 title];

        NSString v31 = String._bridgeToObjectiveC()();
        id v32 = [v30 localizedStringForLocaleIdentifier:v31];

        a1 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        return a1;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.voiceCommands);
    char v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_9;
    }
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v20 = 0;
    unint64_t v21 = "Failed to find matching enum case.";
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t type metadata accessor for LNEnumCaseMetadata()
{
  unint64_t result = lazy cache variable for type metadata for LNEnumCaseMetadata;
  if (!lazy cache variable for type metadata for LNEnumCaseMetadata)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNEnumCaseMetadata);
  }
  return result;
}

uint64_t static InputUtils.getBool(from:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_22_10(v3);
    OUTLINED_FUNCTION_2_15(&dword_0, v4, v5, "#InputUtils getBool");
    OUTLINED_FUNCTION_7_0();
  }

  if (one-time initialization token for voiceCommandConfirmationNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  return 0x2000001u >> (8 * v7);
}

uint64_t static InputUtils.getDouble(from:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
  uint64_t v2 = OUTLINED_FUNCTION_16(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_25_8();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_56();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = OUTLINED_FUNCTION_26_1(v5, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    OUTLINED_FUNCTION_17_5(&dword_0, v8, v9, "#InputUtils getDouble");
    OUTLINED_FUNCTION_7_0();
  }

  if (one-time initialization token for voiceCommandScalarNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_45_6();
  OUTLINED_FUNCTION_24_8(v0, 1, v3);
  if (v10)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
    return 0;
  }
  else
  {
    OUTLINED_FUNCTION_73();
    v11();
    Scalar.value.getter();
    OUTLINED_FUNCTION_10_27();
    v12();
    return v14;
  }
}

uint64_t static InputUtils.getMeasurement(from:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VoiceCommandsNLIntent(0);
  OUTLINED_FUNCTION_40();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_56();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  outlined init with copy of VoiceCommandsNLIntent(a1, v1);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v22[0] = a1;
    uint64_t v23 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1(&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
    uint64_t v13 = NLIntentWrapper.description.getter();
    v22[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of VoiceCommandsNLIntent(v1);
    _os_log_impl(&dword_0, v9, v10, "#InputUtils getMeasurement %s", v11, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    outlined destroy of VoiceCommandsNLIntent(v1);
  }

  if (one-time initialization token for voiceCommandScalarNode != -1) {
    swift_once();
  }
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_75();
  IntentNodeTraversable.value<A>(forNode:)();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>);
  OUTLINED_FUNCTION_24_8((uint64_t)v6, 1, v15);
  if (v16)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v6, &demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
    uint64_t v17 = 0;
    char v18 = 1;
  }
  else
  {
    Scalar.value.getter();
    uint64_t v17 = v23;
    char v18 = v24;
    OUTLINED_FUNCTION_40();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v15);
  }
  if (one-time initialization token for voiceCommandUnitNode != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v23 == 88)
  {
    id v20 = 0;
    if ((v18 & 1) == 0) {
      return v17;
    }
  }
  else
  {
    id v20 = VoiceCommandsNLIntent.VoiceCommandUnit.unitType.getter(v23);
    if ((v18 & 1) == 0) {
      return v17;
    }
  }

  return 0;
}

NSAttributedString static InputUtils.getAttributedText(from:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_22_10(v3);
    OUTLINED_FUNCTION_2_15(&dword_0, v4, v5, "#InputUtils getAttributedText");
    OUTLINED_FUNCTION_7_0();
  }

  if (one-time initialization token for voiceCommandTextNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_46_9();
  if (!v7._object) {
    return 0;
  }
  type metadata accessor for NSAttributedString();
  return NSAttributedString.__allocating_init(string:)(v7);
}

uint64_t static InputUtils.getDate(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[6] = v1;
  v0[7] = v2;
  v0[4] = v3;
  v0[5] = v4;
  v0[3] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v0[8] = v6;
  OUTLINED_FUNCTION_16(v6);
  v0[9] = OUTLINED_FUNCTION_13_0();
  v0[10] = swift_task_alloc();
  v0[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Calendar.Identifier();
  v0[12] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v0[13] = v8;
  v0[14] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for Calendar();
  v0[15] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v0[16] = v10;
  v0[17] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for DateComponents();
  v0[18] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v0[19] = v12;
  v0[20] = OUTLINED_FUNCTION_25();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_16(v13);
  v0[21] = OUTLINED_FUNCTION_13_0();
  v0[22] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 184) = __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = (void *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_3(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v4);
    OUTLINED_FUNCTION_23_0(&dword_0, v5, v6, "#InputUtils getDate");
    OUTLINED_FUNCTION_7_0();
  }

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v7;
  void *v7 = v0;
  v7[1] = static InputUtils.getDate(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:);
  return static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  void (*v12)(void);
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(void);
  void (*v23)(void);
  void (*v24)(void);
  void (*v25)(void);
  uint64_t (*v26)(void);
  uint64_t v28;
  void *v29;
  uint64_t v30;

  id v29 = v0;
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[18];
  outlined init with copy of AppDisplayInfo?(v0[22], v1, &demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_24_8(v1, 1, v2);
  if (v3)
  {
    uint64_t v4 = v0[21];
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0[22], &demangling cache variable for type metadata for DateComponents?);
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v4, &demangling cache variable for type metadata for DateComponents?);
    uint64_t v5 = type metadata accessor for Date();
    OUTLINED_FUNCTION_13_17(v5);
  }
  else
  {
    uint64_t v7 = v0[13];
    uint64_t v6 = v0[14];
    uint64_t v9 = v0[11];
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[10];
    OUTLINED_FUNCTION_73();
    v11();
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for Calendar.Identifier.gregorian(_:), v8);
    Calendar.init(identifier:)();
    OUTLINED_FUNCTION_37_11();
    v12();
    Calendar.date(from:)();
    outlined init with copy of AppDisplayInfo?(v9, v10, &demangling cache variable for type metadata for Date?);
    uint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.debug.getter();
    uint64_t v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = v0[22];
    uint64_t v17 = v0[10];
    if (v15)
    {
      uint64_t v18 = v0[9];
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      id v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      outlined init with copy of AppDisplayInfo?(v17, v18, &demangling cache variable for type metadata for Date?);
      id v20 = String.init<A>(describing:)();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v17, &demangling cache variable for type metadata for Date?);
      _os_log_impl(&dword_0, v13, v14, "#InputUtils.getDate() returned %s", v19, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();

      OUTLINED_FUNCTION_51_5();
      v22();
      OUTLINED_FUNCTION_20_3();
      v23();
    }
    else
    {

      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v17, &demangling cache variable for type metadata for Date?);
      OUTLINED_FUNCTION_51_5();
      v24();
      OUTLINED_FUNCTION_20_3();
      v25();
    }
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v16, &demangling cache variable for type metadata for DateComponents?);
    outlined init with take of Date?(v0[11], v0[3]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[25] = v1;
  v0[26] = v2;
  v0[23] = v3;
  v0[24] = v4;
  v0[22] = v5;
  uint64_t v6 = type metadata accessor for OSSignpostError();
  v0[27] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v0[28] = v7;
  v0[29] = OUTLINED_FUNCTION_25();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>?);
  OUTLINED_FUNCTION_16(v8);
  v0[30] = OUTLINED_FUNCTION_13_0();
  v0[31] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DateTimeResolver();
  v0[32] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v0[33] = v10;
  v0[34] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy();
  v0[35] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v0[36] = v12;
  v0[37] = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for DateTimeResolutionSpec.ExpandToType();
  v0[38] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v0[39] = v14;
  v0[40] = OUTLINED_FUNCTION_25();
  uint64_t v15 = type metadata accessor for DateTimeResolutionSpec();
  v0[41] = v15;
  OUTLINED_FUNCTION_1_0(v15);
  v0[42] = v16;
  v0[43] = OUTLINED_FUNCTION_25();
  uint64_t v17 = type metadata accessor for Date();
  OUTLINED_FUNCTION_16(v17);
  v0[44] = OUTLINED_FUNCTION_25();
  uint64_t v18 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_16(v18);
  v0[45] = OUTLINED_FUNCTION_25();
  uint64_t v19 = type metadata accessor for DateTimeResolutionContext.Hemisphere();
  v0[46] = v19;
  OUTLINED_FUNCTION_1_0(v19);
  v0[47] = v20;
  v0[48] = OUTLINED_FUNCTION_13_0();
  v0[49] = swift_task_alloc();
  v0[50] = swift_task_alloc();
  uint64_t v21 = type metadata accessor for Locale();
  v0[51] = v21;
  OUTLINED_FUNCTION_1_0(v21);
  v0[52] = v22;
  v0[53] = OUTLINED_FUNCTION_13_0();
  v0[54] = swift_task_alloc();
  v0[55] = swift_task_alloc();
  v0[56] = swift_task_alloc();
  uint64_t v23 = type metadata accessor for Calendar.Identifier();
  v0[57] = v23;
  OUTLINED_FUNCTION_1_0(v23);
  v0[58] = v24;
  v0[59] = OUTLINED_FUNCTION_25();
  uint64_t v25 = type metadata accessor for Calendar();
  v0[60] = v25;
  OUTLINED_FUNCTION_1_0(v25);
  v0[61] = v26;
  v0[62] = OUTLINED_FUNCTION_13_0();
  v0[63] = swift_task_alloc();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_16(v27);
  v0[64] = OUTLINED_FUNCTION_25();
  uint64_t v28 = type metadata accessor for TerminalElement.DateTimeValue();
  v0[65] = v28;
  OUTLINED_FUNCTION_1_0(v28);
  v0[66] = v29;
  v0[67] = OUTLINED_FUNCTION_25();
  uint64_t v30 = type metadata accessor for OSSignpostID();
  v0[68] = v30;
  OUTLINED_FUNCTION_1_0(v30);
  v0[69] = v31;
  v0[70] = OUTLINED_FUNCTION_13_0();
  v0[71] = swift_task_alloc();
  v0[72] = swift_task_alloc();
  uint64_t v32 = type metadata accessor for OSSignposter();
  v0[73] = v32;
  OUTLINED_FUNCTION_1_0(v32);
  v0[74] = v33;
  v0[75] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v34, v35, v36);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_signpost_type_t v8;
  _WORD *v9;
  os_signpost_id_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  void (*v14)(void);
  void (*v15)(void);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void (*v35)(void);
  void (*v36)(void);
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 600);
  uint64_t v2 = *(void *)(v0 + 592);
  uint64_t v3 = *(void *)(v0 + 584);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Signposter.voiceCommands);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v5 = (uint8_t *)(v2 + 16);
  v6(v1, v4, v3);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v7 = OSSignposter.logHandle.getter();
  uint64_t v8 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v9);
    uint64_t v10 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v7, v8, v10, "InputUtilsGetDateComponents", "", v5, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v11 = *(void *)(v0 + 576);
  uint64_t v12 = *(void *)(v0 + 552);
  uint64_t v13 = *(uint8_t **)(v0 + 544);

  OUTLINED_FUNCTION_26_15();
  v14();
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(void *)(v0 + 608) = OSSignpostIntervalState.init(id:isOpen:)();
  *(void *)(v0 + 616) = *(void *)(v12 + 8);
  *(void *)(v0 + 624) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  OUTLINED_FUNCTION_20_3();
  v15();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  *(void *)(v0 + 632) = __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  uint64_t v17 = Logger.logObject.getter();
  uint64_t v18 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v18))
  {
    uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v19);
    _os_log_impl(&dword_0, v17, (os_log_type_t)v11, "#InputUtils getDateComponents", v13, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 512);
  uint64_t v22 = *(void *)(v0 + 184);

  outlined init with copy of AppDisplayInfo?(v22, v21, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_24_8(v21, 1, v20);
  if (v23)
  {
    uint64_t v24 = *(void *)(v0 + 512);
    uint64_t v25 = *(void *)(v0 + 176);
    OUTLINED_FUNCTION_50_5();
    v26();
    swift_release();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v24, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
    uint64_t v27 = type metadata accessor for DateComponents();
    __swift_storeEnumTagSinglePayload(v25, 1, 1, v27);
    OUTLINED_FUNCTION_12_21();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
  else
  {
    uint64_t v45 = (void *)(v0 + 16);
    uint64_t v31 = *(void *)(v0 + 464);
    uint64_t v30 = *(void *)(v0 + 472);
    uint64_t v32 = *(void *)(v0 + 456);
    uint64_t v33 = *(void *)(v0 + 376);
    uint64_t v46 = *(void *)(v0 + 400);
    uint64_t v34 = *(void **)(v0 + 200);
    uint64_t v47 = *(void *)(v0 + 192);
    uint64_t v49 = *(void *)(v0 + 208);
    OUTLINED_FUNCTION_73();
    v35();
    (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))(v30, enum case for Calendar.Identifier.gregorian(_:), v32);
    Calendar.init(identifier:)();
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_10_27();
    v36();
    __swift_project_boxed_opaque_existential_1(v34, v34[3]);
    uint64_t v37 = v0 + 96;
    OUTLINED_FUNCTION_75();
    dispatch thunk of DeviceState.siriLocale.getter();
    *(void *)(v0 + 640) = TerminalElement.DateTimeValue.toDateTime()();
    *(_DWORD *)(v0 + 680) = enum case for DateTimeResolutionContext.Hemisphere.north(_:);
    uint64_t v38 = *(void (**)(uint64_t))(v33 + 104);
    *(void *)(v0 + 648) = v38;
    *(void *)(v0 + 656) = (v33 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v38(v46);
    outlined init with copy of AppDisplayInfo?(v47, v0 + 56, &demangling cache variable for type metadata for LocationProviding?);
    outlined init with copy of DeviceState(v49, v0 + 96);
    if (*(void *)(v0 + 80))
    {
      __swift_destroy_boxed_opaque_existential_1Tm(v37);
      outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 56), (uint64_t)v45);
    }
    else
    {
      outlined init with copy of DeviceState(v37, v0 + 136);
      unint64_t v39 = type metadata accessor for LocationProvider();
      id v40 = swift_allocObject();
      OUTLINED_FUNCTION_39_10(v40);
      outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 136), v41);
      *(void *)(v0 + 40) = v39;
      *(void *)(v0 + 48) = &protocol witness table for LocationProvider;
      *(void *)(v0 + 16) = v40;
      __swift_destroy_boxed_opaque_existential_1Tm(v37);
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0 + 56, &demangling cache variable for type metadata for LocationProviding?);
    }
    uint64_t v42 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1(v45, *(void *)(v0 + 40));
    uint64_t v48 = (uint64_t (*)(uint64_t))(*(void *)(v42 + 8) + **(int **)(v42 + 8));
    char v43 = (void *)swift_task_alloc();
    *(void *)(v0 + 664) = v43;
    char *v43 = v0;
    v43[1] = static InputUtils.getDateComponents(dateTimeValue:locationProviding:deviceState:aceServiceInvoker:);
    uint64_t v44 = OUTLINED_FUNCTION_75();
    return v48(v44);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 672) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);
  void (*v33)(void);
  void (*v34)(void);
  void (*v35)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_signpost_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(void);
  void (*v51)(void);
  void (*v52)(void);
  void (*v53)(void);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(void);
  _WORD *v59;
  os_signpost_id_t v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(void);
  void (*v67)(void);
  void (*v68)(void);
  void (*v69)(void);
  void (*v70)(void);
  void (*v71)(void);
  uint64_t (*v72)(void);
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  uint64_t v1 = *(void **)(v0 + 672);
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
    uint64_t v3 = *(_DWORD *)(v0 + 680);
    uint64_t v4 = *(void *)(v0 + 392);
    uint64_t v5 = *(void *)(v0 + 368);
    [*(id *)(v0 + 672) lat];
    uint64_t v7 = v6;

    OUTLINED_FUNCTION_50_5();
    v8();
    if (v7 <= 0.0) {
      uint64_t v9 = enum case for DateTimeResolutionContext.Hemisphere.south(_:);
    }
    else {
      uint64_t v9 = v3;
    }
    v2(v4, v9, v5);
    uint64_t v10 = OUTLINED_FUNCTION_75();
    v11(v10);
  }
  else
  {
    uint64_t v12 = (void *)Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v14);
      OUTLINED_FUNCTION_23_0(&dword_0, v15, v16, "Could not get location, setting hemisphere to north");
      OUTLINED_FUNCTION_7_0();
    }
  }
  uint64_t v17 = *(void *)(v0 + 488);
  uint64_t v86 = *(void *)(v0 + 480);
  uint64_t v89 = *(void *)(v0 + 504);
  uint64_t v83 = *(void *)(v0 + 496);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v76 = *(void *)(v0 + 384);
  uint64_t v78 = *(void *)(v0 + 368);
  uint64_t v79 = *(void *)(v0 + 400);
  uint64_t v97 = *(void *)(v0 + 320);
  uint64_t v98 = *(void *)(v0 + 304);
  long long v92 = *(void *)(v0 + 312);
  uint64_t v95 = *(void *)(v0 + 288);
  uint64_t v100 = *(void *)(v0 + 296);
  uint64_t v102 = *(void *)(v0 + 280);
  uint64_t v19 = *(void (**)(void))(*(void *)(v0 + 416) + 16);
  OUTLINED_FUNCTION_28_14();
  v19();
  OUTLINED_FUNCTION_28_14();
  v19();
  OUTLINED_FUNCTION_28_14();
  v19();
  static TimeZone.current.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v76, v79, v78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v83, v89, v86);
  static Date.now.getter();
  type metadata accessor for DateTimeResolutionContext();
  swift_allocObject();
  DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)();
  (*(void (**)(uint64_t, void, uint64_t))(v92 + 104))(v97, enum case for DateTimeResolutionSpec.ExpandToType.pointInTime(_:), v98);
  (*(void (**)(uint64_t, void, uint64_t))(v95 + 104))(v100, enum case for DateTimeResolutionSpec.DateTimeConvergenceStrategy.future(_:), v102);
  type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange();
  type metadata accessor for DateTime();
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1(&lazy protocol witness table cache variable for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange, (void (*)(uint64_t))&type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange);
  Dictionary.init(dictionaryLiteral:)();
  DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)();
  DateTimeResolver.init()();
  DateTimeResolver.makeRecommendation(value:context:spec:)();
  uint64_t v21 = *(void *)(v0 + 240);
  uint64_t v20 = *(void *)(v0 + 248);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  __swift_storeEnumTagSinglePayload(v20, 0, 1, v22);
  uint64_t v23 = OUTLINED_FUNCTION_75();
  outlined init with copy of AppDisplayInfo?(v23, v24, v25);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  OUTLINED_FUNCTION_24_8(v21, 1, v26);
  if (v27)
  {
    OUTLINED_FUNCTION_35_11();
    uint64_t v28 = *(void *)(v0 + 416);
    uint64_t v93 = *(void *)(v0 + 408);
    uint64_t v96 = *(void *)(v0 + 448);
    uint64_t v29 = *(void *)(v0 + 376);
    uint64_t v87 = *(void *)(v0 + 368);
    uint64_t v90 = *(void *)(v0 + 400);
    uint64_t v30 = *(void *)(v0 + 336);
    uint64_t v81 = *(void *)(v0 + 328);
    uint64_t v84 = *(void *)(v0 + 344);
    uint64_t v31 = *(void *)(v0 + 248);
    uint64_t v101 = *(void *)(v0 + 240);
    swift_release();
    swift_release();
    swift_release();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v31, &demangling cache variable for type metadata for Recommendation<DateTime>?);
    OUTLINED_FUNCTION_37_11();
    v32();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v84, v81);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v90, v87);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v96, v93);
    OUTLINED_FUNCTION_20_3();
    v33();
    OUTLINED_FUNCTION_53_1();
    v34();
    OUTLINED_FUNCTION_66();
    v35();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v101, &demangling cache variable for type metadata for Recommendation<DateTime>?);
LABEL_17:
    uint64_t v54 = *(void *)(v0 + 176);
    uint64_t v55 = type metadata accessor for DateComponents();
    uint64_t v56 = v54;
    uint64_t v57 = 1;
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_12_1();
  uint64_t v38 = v37;
  if ((*(unsigned int (**)(void))(v36 + 88))() != enum case for Recommendation.confident<A>(_:))
  {
    OUTLINED_FUNCTION_35_11();
    uint64_t v45 = *(void *)(v0 + 416);
    uint64_t v91 = *(void *)(v0 + 408);
    uint64_t v94 = *(void *)(v0 + 448);
    uint64_t v46 = *(void *)(v0 + 376);
    uint64_t v85 = *(void *)(v0 + 368);
    uint64_t v88 = *(void *)(v0 + 400);
    uint64_t v47 = *(void *)(v0 + 264);
    uint64_t v77 = *(void *)(v0 + 272);
    uint64_t v49 = *(void *)(v0 + 248);
    uint64_t v48 = *(void *)(v0 + 256);
    uint64_t v99 = *(void *)(v0 + 240);
    swift_release();
    swift_release();
    swift_release();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v49, &demangling cache variable for type metadata for Recommendation<DateTime>?);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v77, v48);
    OUTLINED_FUNCTION_37_11();
    v50();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v88, v85);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v94, v91);
    OUTLINED_FUNCTION_51_5();
    v51();
    OUTLINED_FUNCTION_66();
    v52();
    OUTLINED_FUNCTION_66();
    v53();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v99, v26);
    goto LABEL_17;
  }
  (*(void (**)(void, uint64_t))(v38 + 96))(*(void *)(v0 + 240), v26);
  unint64_t v39 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  id v40 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v42 = *(void *)(v0 + 224);
    uint64_t v41 = *(void *)(v0 + 232);
    char v43 = *(uint8_t **)(v0 + 216);
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint8_t *))(v42 + 88))(v41, v43) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v44 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_50_5();
      v58();
      uint64_t v44 = "";
    }
    uint64_t v59 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_52_4(v59);
    char v60 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v39, v40, v60, "InputUtilsGetDateComponents", v44, v43, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v0 + 616);
  uint64_t v61 = *(void *)(v0 + 560);
  os_log_type_t v62 = v39;
  uint64_t v63 = *(void *)(v0 + 544);
  uint64_t v64 = *(void *)(v0 + 336);
  uint64_t v82 = *(void *)(v0 + 344);
  uint64_t v80 = *(void *)(v0 + 328);
  uint64_t v74 = *(void *)(v0 + 248);
  uint64_t v65 = *(void *)(v0 + 176);

  v75(v61, v63);
  dispatch thunk of DateTime.dateComponents.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v74, &demangling cache variable for type metadata for Recommendation<DateTime>?);
  OUTLINED_FUNCTION_53_1();
  v66();
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v82, v80);
  OUTLINED_FUNCTION_37_11();
  v67();
  OUTLINED_FUNCTION_51_5();
  v68();
  OUTLINED_FUNCTION_20_3();
  v69();
  OUTLINED_FUNCTION_66();
  v70();
  OUTLINED_FUNCTION_66();
  v71();
  uint64_t v55 = type metadata accessor for DateComponents();
  uint64_t v56 = v65;
  uint64_t v57 = 0;
LABEL_21:
  __swift_storeEnumTagSinglePayload(v56, v57, 1, v55);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_12_21();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v72 = *(uint64_t (**)(void))(v0 + 8);
  return v72();
}

uint64_t static InputUtils.getPlacemark(from:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[2] = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Location>?);
  OUTLINED_FUNCTION_16(v2);
  v0[3] = OUTLINED_FUNCTION_25();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Location>);
  v0[4] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v0[5] = v4;
  v0[6] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v10)(void);
  uint64_t v11;

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_26_1(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_3(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v4);
    OUTLINED_FUNCTION_23_0(&dword_0, v5, v6, "#InputUtils getPlacemark");
    OUTLINED_FUNCTION_7_0();
  }

  v0[7] = static InputUtils.getPlacemarkQueryText(_:)();
  v0[8] = v7;
  if (v7)
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[9] = v8;
    *uint64_t v8 = v0;
    v8[1] = static InputUtils.getPlacemark(from:);
    return static InputUtils.getPlacemarkQueryLatLong()();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10(0);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 80) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  unint64_t v12;
  uint64_t (*v13)(unint64_t);
  uint64_t v15;

  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 64);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 56);
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v0 + 32);
    [*(id *)(v0 + 80) lat];
    [v1 lng];
    static InputUtils.getPlacemarkRecommendation(queryText:latitude:longitude:)(v3, v2, v5);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_24_8(v5, 1, v4);
    if (!v6)
    {
      uint64_t v9 = *(void *)(v0 + 40);
      uint64_t v8 = *(void *)(v0 + 48);
      uint64_t v10 = *(void *)(v0 + 32);
      OUTLINED_FUNCTION_73();
      v11();
      uint64_t v12 = static InputUtils.getPlacemark(_:)();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      goto LABEL_7;
    }
    uint64_t v7 = *(void *)(v0 + 24);

    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v7, &demangling cache variable for type metadata for Recommendation<Location>?);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = 0;
LABEL_7:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v13(v12);
}

Class static InputUtils.getPerson(from:contactResolver:locale:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v157 = a3;
  uint64_t v161 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact?);
  uint64_t v6 = OUTLINED_FUNCTION_16(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_50_1();
  uint64_t v142 = v7;
  OUTLINED_FUNCTION_23_14();
  uint64_t v149 = type metadata accessor for Contact();
  OUTLINED_FUNCTION_12_1();
  uint64_t v153 = v8;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_25_6();
  uint64_t v143 = v10;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v11);
  v144 = (char *)v141 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>?);
  uint64_t v14 = OUTLINED_FUNCTION_16(v13);
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_25_6();
  v148 = (uint64_t *)v15;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v16);
  uint64_t v152 = (uint64_t)v141 - v17;
  OUTLINED_FUNCTION_23_14();
  type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_12_1();
  uint64_t v146 = v19;
  uint64_t v147 = v18;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_50_1();
  uint64_t v145 = v20;
  OUTLINED_FUNCTION_23_14();
  type metadata accessor for ContactResolverConfig();
  OUTLINED_FUNCTION_12_1();
  uint64_t v154 = v21;
  uint64_t v155 = v22;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_50_1();
  uint64_t v164 = v23;
  OUTLINED_FUNCTION_23_14();
  uint64_t v24 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_12_1();
  uint64_t v159 = v25;
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_25_6();
  uint64_t v156 = v27;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v28);
  v158 = (char *)v141 - v29;
  OUTLINED_FUNCTION_23_14();
  uint64_t v165 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_12_1();
  uint64_t v31 = v30;
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_25_6();
  uint64_t v150 = v33;
  OUTLINED_FUNCTION_25_7();
  uint64_t v35 = __chkstk_darwin(v34);
  __chkstk_darwin(v35);
  uint64_t v36 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_12_1();
  uint64_t v38 = v37;
  __chkstk_darwin(v39);
  OUTLINED_FUNCTION_41_9();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v36, (uint64_t)static Signposter.voiceCommands);
  v160 = v38;
  uint64_t v162 = v36;
  OUTLINED_FUNCTION_26_15();
  v40();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v163 = v3;
  uint64_t v41 = OSSignposter.logHandle.getter();
  os_signpost_type_t v42 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    char v43 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_52_4(v43);
    os_signpost_id_t v44 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v41, v42, v44, "InputUtilsGetPerson", "", v38, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_26_15();
  v45();
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v46 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v48 = (uint8_t *)(v31 + 8);
  uint64_t v47 = *(void (**)(void))(v31 + 8);
  v151 = v48;
  OUTLINED_FUNCTION_20_3();
  v47();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  uint64_t v50 = __swift_project_value_buffer(v49, (uint64_t)static Logger.voiceCommands);
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.debug.getter();
  BOOL v53 = os_log_type_enabled(v51, v52);
  uint64_t v54 = v164;
  if (v53)
  {
    uint64_t v55 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_52_4(v55);
    _os_log_impl(&dword_0, v51, v52, "#InputUtils getPerson", v48, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  if (!VoiceCommandsNLIntent.voiceCommandContact.getter())
  {
    uint64_t v72 = (void *)Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_16_11(v73))
    {
      uint64_t v74 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v74);
      OUTLINED_FUNCTION_11_22(&dword_0, v75, v76, "Did not receive valid voiceCommandContact from server");
      OUTLINED_FUNCTION_7_0();
    }
    swift_release();

    OUTLINED_FUNCTION_66();
    v77();
    return 0;
  }
  v141[2] = v47;
  v141[1] = v50;
  uint64_t v161 = v46;
  VoiceCommandsNLIntent.VoiceCommandContactIntentNode.toContactQuery()();
  swift_release();
  Class isa = (Class)v24;
  uint64_t v58 = v158;
  uint64_t v57 = v159;
  OUTLINED_FUNCTION_73();
  v59();
  uint64_t v60 = a2[3];
  uint64_t v61 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 8))(v157, v60, v61);
  uint64_t v62 = v54;
  uint64_t v63 = (uint8_t *)a2[3];
  uint64_t v64 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, (uint64_t)v63);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
  unint64_t v65 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_212160;
  (*(void (**)(unint64_t, char *, Class))(v57 + 16))(v66 + v65, v58, isa);
  uint64_t v67 = v166;
  uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint8_t *, uint64_t))(v64 + 16))(v66, v62, v63, v64);
  if (v67)
  {
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_66();
    v69();
    OUTLINED_FUNCTION_37_11();
    v70();
    OUTLINED_FUNCTION_66();
    v71();
    return isa;
  }
  uint64_t v78 = v68;
  uint64_t v166 = 0;
  swift_bridgeObjectRelease();
  uint64_t v79 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v80 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    uint64_t v81 = v145;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v83 = v146;
    uint64_t v82 = v147;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v146 + 88))(v81, v147) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v84 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v81, v82);
      uint64_t v84 = "";
    }
    uint64_t v85 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_52_4(v85);
    os_signpost_id_t v86 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v79, v80, v86, "InputUtilsGetPerson", v84, v63, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_50_5();
  v87();
  uint64_t v88 = v152;
  specialized Collection.first.getter(v78, v152);
  swift_bridgeObjectRelease();
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v88, 1, v89);
  uint64_t v91 = v153;
  if (EnumTagSinglePayload == 1)
  {
LABEL_21:
    long long v92 = (void *)OUTLINED_FUNCTION_49_6();
    os_log_type_t v93 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_16_11(v93))
    {
      uint64_t v94 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v94);
      OUTLINED_FUNCTION_11_22(&dword_0, v95, v96, "#InputUtils ContactResolver could not recommend a contact");
      OUTLINED_FUNCTION_7_0();
    }
    swift_release();

    OUTLINED_FUNCTION_66();
    v97();
    uint64_t v98 = OUTLINED_FUNCTION_6_23();
    v99(v98);
    OUTLINED_FUNCTION_66();
    v100();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v88, &demangling cache variable for type metadata for Recommendation<Contact>?);
    return 0;
  }
  uint64_t v102 = v148;
  outlined init with copy of AppDisplayInfo?(v88, (uint64_t)v148, &demangling cache variable for type metadata for Recommendation<Contact>?);
  uint64_t v103 = *(void *)(v89 - 8);
  int v104 = (*(uint64_t (**)(uint64_t *, uint64_t))(v103 + 88))(v102, v89);
  if (v104 == enum case for Recommendation.confident<A>(_:))
  {
    uint64_t v105 = OUTLINED_FUNCTION_16_17();
    v106(v105);
    OUTLINED_FUNCTION_73();
    v107();
    v108 = (void *)OUTLINED_FUNCTION_49_6();
    os_log_type_t v109 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_16_11(v109))
    {
      uint64_t v110 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v110);
      OUTLINED_FUNCTION_11_22(&dword_0, v111, v112, "#InputUtils ContactResolver confidently recommended a contact");
      OUTLINED_FUNCTION_7_0();
    }
LABEL_33:

    Class isa = Contact.toINPerson()().super.isa;
    swift_release();
    OUTLINED_FUNCTION_53_1();
    v120();
    OUTLINED_FUNCTION_66();
    v121();
    uint64_t v122 = OUTLINED_FUNCTION_6_23();
    v123(v122);
    OUTLINED_FUNCTION_66();
    v124();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v88, &demangling cache variable for type metadata for Recommendation<Contact>?);
    return isa;
  }
  if (v104 == enum case for Recommendation.needsConfirmation<A>(_:))
  {
    uint64_t v113 = OUTLINED_FUNCTION_16_17();
    v114(v113);
    OUTLINED_FUNCTION_73();
    v115();
    v108 = (void *)OUTLINED_FUNCTION_49_6();
    os_log_type_t v116 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_16_11(v116))
    {
      v117 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_22_10(v117);
      OUTLINED_FUNCTION_11_22(&dword_0, v118, v119, "#InputUtils ContactResolver call returned needsConfirmation which is unsupported, returning contact");
      OUTLINED_FUNCTION_7_0();
    }
    goto LABEL_33;
  }
  if (v104 != enum case for Recommendation.needsDisambiguation<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v103 + 8))(v102, v89);
    goto LABEL_21;
  }
  uint64_t v125 = OUTLINED_FUNCTION_16_17();
  v126(v125);
  uint64_t v127 = *v102;
  v128 = OUTLINED_FUNCTION_49_6();
  os_log_type_t v129 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_16_11(v129))
  {
    v130 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v130);
    _os_log_impl(&dword_0, v128, (os_log_type_t)v89, "#InputUtils ContactResolver call returned needsDisambiguation which is unsupported, picking first one", (uint8_t *)v91, 2u);
    uint64_t v91 = v153;
    OUTLINED_FUNCTION_7_0();
  }

  uint64_t v131 = v142;
  specialized Collection.first.getter(v127, v142);
  swift_bridgeObjectRelease();
  uint64_t v132 = v149;
  if (__swift_getEnumTagSinglePayload(v131, 1, v149) == 1)
  {
    swift_release();
    OUTLINED_FUNCTION_66();
    v133();
    uint64_t v134 = OUTLINED_FUNCTION_6_23();
    v135(v134);
    OUTLINED_FUNCTION_66();
    v136();
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v131, &demangling cache variable for type metadata for Contact?);
    Class isa = 0;
  }
  else
  {
    Class isa = Contact.toINPerson()().super.isa;
    swift_release();
    OUTLINED_FUNCTION_66();
    v137();
    uint64_t v138 = OUTLINED_FUNCTION_6_23();
    v139(v138);
    OUTLINED_FUNCTION_66();
    v140();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v131, v132);
  }
  _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v88, &demangling cache variable for type metadata for Recommendation<Contact>?);
  return isa;
}

uint64_t static InputUtils.getURL(from:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = OUTLINED_FUNCTION_26_1(v3, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v6);
    _os_log_impl(&dword_0, v4, v5, "#InputUtils getURL", v1, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  if (one-time initialization token for voiceCommandTextNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v9)
  {
    String.convertedToURL()(a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    return OUTLINED_FUNCTION_13_17(v8);
  }
}

uint64_t static InputUtils.getText(from:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_26_1(v0, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_22_10(v3);
    OUTLINED_FUNCTION_2_15(&dword_0, v4, v5, "#InputUtils getText");
    OUTLINED_FUNCTION_7_0();
  }

  if (one-time initialization token for voiceCommandTextNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_46_9();
  return v7;
}

id static InputUtils.getCurrency(from:locale:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.Currency?);
  uint64_t v2 = OUTLINED_FUNCTION_16(v1);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
  uint64_t v6 = OUTLINED_FUNCTION_16(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_17_16();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "#InputUtils getCurrency", v10, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  if (one-time initialization token for voiceCommandScalarNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>);
  OUTLINED_FUNCTION_24_8(v0, 1, v11);
  if (v12)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
LABEL_11:
    uint64_t v16 = (void *)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_16_11(v17))
    {
LABEL_14:

      return 0;
    }
    uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v18);
    uint64_t v21 = "#InputUtils missing value for currency amount";
LABEL_13:
    OUTLINED_FUNCTION_20(&dword_0, v19, v20, v21);
    OUTLINED_FUNCTION_7_0();
    goto LABEL_14;
  }
  Scalar.value.getter();
  double v13 = v31;
  char v14 = v32;
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_66();
  v15();
  if (v14) {
    goto LABEL_11;
  }
  if (one-time initialization token for voiceCommandCurrencyUnitNode != -1) {
    swift_once();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v30 >= 0xBu)
  {
    if (v30 == 89)
    {
      uint64_t v16 = (void *)Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_16_11(v27)) {
        goto LABEL_14;
      }
      uint64_t v28 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v28);
      uint64_t v21 = "#InputUtils missing value for currency unit";
      goto LABEL_13;
    }
    VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.rawValue.getter(v30);
    String.uppercased()();
    swift_bridgeObjectRelease();
  }
  else
  {
    Locale.currency.getter();
    uint64_t v23 = type metadata accessor for Locale.Currency();
    OUTLINED_FUNCTION_24_8((uint64_t)v4, 1, v23);
    if (v12)
    {
      _s11SiriKitFlow0C8Activity_pSgWOhTm_0((uint64_t)v4, &demangling cache variable for type metadata for Locale.Currency?);
    }
    else
    {
      Locale.Currency.identifier.getter();
      OUTLINED_FUNCTION_40();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v23);
    }
  }
  id v25 = [objc_allocWithZone((Class)NSDecimalNumber) initWithDouble:v13];
  id v26 = objc_allocWithZone((Class)INCurrencyAmount);
  return @nonobjc INCurrencyAmount.init(amount:currencyCode:)(v25);
}

void one-time initialization function for NUMBERICREFERENCENODEVALUES()
{
  static InputUtils.NUMBERICREFERENCENODEVALUES = (uint64_t)&outlined read-only object #0 of one-time initialization function for NUMBERICREFERENCENODEVALUES;
}

uint64_t *InputUtils.NUMBERICREFERENCENODEVALUES.unsafeMutableAddressor()
{
  if (one-time initialization token for NUMBERICREFERENCENODEVALUES != -1) {
    swift_once();
  }
  return &static InputUtils.NUMBERICREFERENCENODEVALUES;
}

uint64_t static InputUtils.NUMBERICREFERENCENODEVALUES.getter()
{
  if (one-time initialization token for NUMBERICREFERENCENODEVALUES != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

double static InputUtils.convertVoiceCommandReferenceToIndex(reference:lastInd:)(char a1, uint64_t a2)
{
  if (a1 != 35)
  {
    if (one-time initialization token for NUMBERICREFERENCENODEVALUES != -1) {
      swift_once();
    }
    uint64_t v4 = (void *)static InputUtils.NUMBERICREFERENCENODEVALUES;
    uint64_t v5 = VoiceCommandsNLIntent.VoiceCommandReference.rawValue.getter(a1);
    uint64_t v7 = specialized Collection<>.firstIndex(of:)(v5, v6, v4);
    char v9 = v8;
    swift_bridgeObjectRelease();
    if (v9)
    {
      switch(a1)
      {
        case 25:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v12 = OUTLINED_FUNCTION_16_2();
          *(void *)&double result = 1;
          *(_OWORD *)(v12 + 16) = xmmword_212160;
          *(void *)(v12 + 32) = a2;
          break;
        case 26:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v13 = a2 / 2;
          if (a2)
          {
            uint64_t v17 = swift_allocObject();
            *(void *)&double result = 2;
            *(_OWORD *)(v17 + 16) = xmmword_212170;
            *(void *)(v17 + 32) = v13;
            *(void *)(v17 + 40) = v13 + 1;
          }
          else
          {
            uint64_t v14 = OUTLINED_FUNCTION_16_2();
            *(void *)&double result = 1;
            *(_OWORD *)(v14 + 16) = xmmword_212160;
            *(void *)(v14 + 32) = v13;
          }
          break;
        case 29:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v15 = OUTLINED_FUNCTION_16_2();
          *(void *)&double result = 1;
          *(_OWORD *)(v15 + 16) = xmmword_212160;
          uint64_t v16 = a2 - 1;
          if (!__OFSUB__(a2, 1)) {
            goto LABEL_14;
          }
          __break(1u);
          goto LABEL_13;
        case 30:
LABEL_13:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v15 = OUTLINED_FUNCTION_16_2();
          *(void *)&double result = 1;
          *(_OWORD *)(v15 + 16) = xmmword_212160;
          uint64_t v16 = a2 - 2;
          if (__OFSUB__(a2, 2))
          {
            __break(1u);
            JUMPOUT(0xE2E94);
          }
LABEL_14:
          *(void *)(v15 + 32) = v16;
          break;
        default:
          return result;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v11 = OUTLINED_FUNCTION_16_2();
      *(void *)&double result = 1;
      *(_OWORD *)(v11 + 16) = xmmword_212160;
      *(void *)(v11 + 32) = v7;
    }
  }
  return result;
}

uint64_t static InputUtils.getInt(from:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
  uint64_t v2 = OUTLINED_FUNCTION_16(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_25_8();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_56();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = OUTLINED_FUNCTION_26_1(v5, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    OUTLINED_FUNCTION_17_5(&dword_0, v8, v9, "#InputUtils getInt");
    OUTLINED_FUNCTION_7_0();
  }

  if (one-time initialization token for voiceCommandScalarNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_45_6();
  OUTLINED_FUNCTION_24_8(v0, 1, v3);
  if (v10)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>?);
    return 0;
  }
  OUTLINED_FUNCTION_73();
  v11();
  Scalar.value.getter();
  OUTLINED_FUNCTION_10_27();
  uint64_t result = v12();
  if (v15) {
    return 0;
  }
  if ((~*(void *)&v14 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v14 < 9.22337204e18) {
    return (uint64_t)v14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t static InputUtils.getPlacemarkQueryText(_:)()
{
  if (one-time initialization token for voiceCommandTextNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v6) {
    return v5;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#InputUtils getPlacemarkQueryText - no voiceCommandText from intent", v4, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t static InputUtils.getPlacemarkQueryLatLong()()
{
  return _swift_task_switch(static InputUtils.getPlacemarkQueryLatLong(), 0, 0);
}

{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  static AceService.currentAsync.getter();
  type metadata accessor for LocationProvider();
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 120) = inited;
  OUTLINED_FUNCTION_39_10(inited);
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 80), v2);
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v3;
  *os_log_type_t v3 = v0;
  v3[1] = static InputUtils.getPlacemarkQueryLatLong();
  return LocationProvider.getCurrentLocation()();
}

uint64_t static InputUtils.getPlacemarkQueryLatLong()(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *(void *)(v3 + 120);
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1Tm(v4 + 24);
  os_log_type_t v7 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v7(a1);
}

uint64_t static InputUtils.getPlacemarkRecommendation(queryText:latitude:longitude:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v39 = a1;
  uint64_t v49 = a3;
  uint64_t v3 = type metadata accessor for LocationResolutionSpec();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  __chkstk_darwin(v3);
  uint64_t v37 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LocationResolver();
  uint64_t v44 = *(void *)(v5 - 8);
  uint64_t v45 = v5;
  __chkstk_darwin(v5);
  uint64_t v36 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Location();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  __chkstk_darwin(v7);
  uint64_t v48 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimeZone();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for LocationResolutionContext();
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Locale();
  uint64_t v35 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v35 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v35 - v23;
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v50, v50[3]);
  uint64_t v25 = v13;
  uint64_t v26 = v35;
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
  os_log_type_t v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v27(v22, v24, v25);
  v27(v19, v24, v25);
  v27(v16, v24, v25);
  uint64_t v28 = v12;
  uint64_t v29 = v36;
  static TimeZone.current.getter();
  uint64_t v30 = (uint64_t)v48;
  LocationResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:latitude:longitude:)();
  uint64_t v31 = v38;
  swift_bridgeObjectRetain();
  Location.init(locationLabel:)(v39, v31, v30);
  LocationResolver.init()();
  char v32 = v37;
  LocationResolutionSpec.init()();
  LocationResolver.makeRecommendation(value:context:spec:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v47);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v45);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v30, v43);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v41);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Location>);
  return __swift_storeEnumTagSinglePayload(v49, 0, 1, v33);
}

unint64_t static InputUtils.getPlacemark(_:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Location?);
  uint64_t v3 = OUTLINED_FUNCTION_16(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_41_9();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Location>);
  OUTLINED_FUNCTION_12_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_17_16();
  uint64_t v8 = type metadata accessor for Location();
  OUTLINED_FUNCTION_12_1();
  uint64_t v10 = v9;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v55 - v15;
  OUTLINED_FUNCTION_26_15();
  v17();
  int v18 = (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 88))(v1, v4);
  BOOL v19 = v18 == enum case for Recommendation.confident<A>(_:)
     || v18 == enum case for Recommendation.needsConfirmation<A>(_:);
  if (v19)
  {
    uint64_t v20 = OUTLINED_FUNCTION_40_9();
    v21(v20);
    goto LABEL_21;
  }
  if (v18 != enum case for Recommendation.needsDisambiguation<A>(_:))
  {
    if (v18 != enum case for Recommendation.none<A>(_:))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      uint64_t v47 = (void *)OUTLINED_FUNCTION_26_1(v46, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_16_11(v48))
      {
        uint64_t v49 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v49);
        OUTLINED_FUNCTION_20(&dword_0, v50, v51, "#InputUtils getPlacemark - unknown recommendation");
        OUTLINED_FUNCTION_7_0();
      }

      OUTLINED_FUNCTION_37_11();
      v52();
      return 0;
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    uint64_t v25 = (void *)OUTLINED_FUNCTION_26_1(v31, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_16_11(v32)) {
      goto LABEL_20;
    }
    uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v33);
    uint64_t v30 = "#InputUtils getPlacemark - no recommendations";
    goto LABEL_19;
  }
  uint64_t v22 = OUTLINED_FUNCTION_40_9();
  v23(v22);
  specialized Collection.first.getter(*v1, v0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24_8(v0, 1, v8);
  if (v19)
  {
    _s11SiriKitFlow0C8Activity_pSgWOhTm_0(v0, &demangling cache variable for type metadata for Location?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    uint64_t v25 = (void *)OUTLINED_FUNCTION_26_1(v24, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_16_11(v26)) {
      goto LABEL_20;
    }
    os_log_type_t v27 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v27);
    uint64_t v30 = "#InputUtils getPlacemark - zero recommendations for disambiguation";
LABEL_19:
    OUTLINED_FUNCTION_20(&dword_0, v28, v29, v30);
    OUTLINED_FUNCTION_7_0();
LABEL_20:

    return 0;
  }
LABEL_21:
  OUTLINED_FUNCTION_73();
  v34();
  unint64_t v35 = (unint64_t)Location.toCLPlacemark()();
  if (!v35)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.voiceCommands);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v16, v8);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v58 = v56;
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v42 = Location.locationLabel.getter();
      if (v43)
      {
        unint64_t v44 = v43;
      }
      else
      {
        uint64_t v42 = 7104878;
        unint64_t v44 = 0xE300000000000000;
      }
      uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void (**)(void))(v10 + 8);
      OUTLINED_FUNCTION_10_27();
      v45();
      _os_log_impl(&dword_0, v39, v40, "#InputUtils getPlacemark - failed to convert to CLPlacemark; location-label=%s",
        v41,
        0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();

      ((void (*)(char *, uint64_t))v45)(v16, v8);
    }
    else
    {

      BOOL v53 = *(void (**)(char *, uint64_t))(v10 + 8);
      v53(v14, v8);
      v53(v16, v8);
    }
    return 0;
  }
  unint64_t v36 = v35;
  OUTLINED_FUNCTION_10_27();
  v37();
  return v36;
}

uint64_t Location.init(locationLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v62 = a1;
  uint64_t v63 = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for County?);
  __chkstk_darwin(v3 - 8);
  uint64_t v60 = (uint64_t)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationName?);
  __chkstk_darwin(v5 - 8);
  uint64_t v59 = (uint64_t)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AddressReference?);
  __chkstk_darwin(v7 - 8);
  uint64_t v58 = (uint64_t)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContinentName?);
  __chkstk_darwin(v9 - 8);
  uint64_t v57 = (uint64_t)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StreetAddress?);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Landmark?);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proximity?);
  __chkstk_darwin(v17 - 8);
  BOOL v19 = (char *)v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Place?);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56[1] = v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Centroid?);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56[2] = v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for City?);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56[3] = v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State?);
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (char *)v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56[4] = v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zipcode?);
  __chkstk_darwin(v32 - 8);
  uint64_t v34 = (char *)v56 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Country?);
  __chkstk_darwin(v35 - 8);
  uint64_t v37 = (char *)v56 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Radius?);
  __chkstk_darwin(v38 - 8);
  os_log_type_t v40 = (char *)v56 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Radius();
  __swift_storeEnumTagSinglePayload((uint64_t)v40, 1, 1, v41);
  uint64_t v42 = type metadata accessor for Country();
  __swift_storeEnumTagSinglePayload((uint64_t)v37, 1, 1, v42);
  uint64_t v43 = type metadata accessor for Zipcode();
  __swift_storeEnumTagSinglePayload((uint64_t)v34, 1, 1, v43);
  uint64_t v44 = type metadata accessor for State();
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 1, 1, v44);
  uint64_t v45 = type metadata accessor for City();
  __swift_storeEnumTagSinglePayload((uint64_t)v28, 1, 1, v45);
  uint64_t v46 = type metadata accessor for Centroid();
  __swift_storeEnumTagSinglePayload((uint64_t)v25, 1, 1, v46);
  uint64_t v47 = type metadata accessor for Place();
  __swift_storeEnumTagSinglePayload((uint64_t)v22, 1, 1, v47);
  uint64_t v48 = type metadata accessor for Proximity();
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v48);
  uint64_t v49 = type metadata accessor for Landmark();
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, v49);
  uint64_t v50 = type metadata accessor for StreetAddress();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v50);
  uint64_t v51 = type metadata accessor for ContinentName();
  __swift_storeEnumTagSinglePayload(v57, 1, 1, v51);
  uint64_t v52 = type metadata accessor for AddressReference();
  __swift_storeEnumTagSinglePayload(v58, 1, 1, v52);
  uint64_t v53 = type metadata accessor for LocationName();
  __swift_storeEnumTagSinglePayload(v59, 1, 1, v53);
  uint64_t v54 = type metadata accessor for County();
  __swift_storeEnumTagSinglePayload(v60, 1, 1, v54);
  return Location.init(radius:country:zipcode:state:city:centroid:place:timezone:proximity:landmark:streetAddress:continentName:addressReference:locationName:locationLabel:county:locationAccuracy:)();
}

id @nonobjc INCurrencyAmount.init(amount:currencyCode:)(void *a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v1 initWithAmount:a1 currencyCode:v3];

  return v4;
}

uint64_t outlined init with copy of VoiceCommandsNLIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VoiceCommandsNLIntent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }
  return result;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for InputUtils()
{
  return &type metadata for InputUtils;
}

uint64_t OUTLINED_FUNCTION_6_23()
{
  return v0;
}

void OUTLINED_FUNCTION_11_22(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_12_21()
{
  return *(void *)(v0 + 600);
}

uint64_t OUTLINED_FUNCTION_16_17()
{
  return v0;
}

void OUTLINED_FUNCTION_35_11()
{
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[74];
  *(void *)(v1 - 112) = v0[73];
  *(void *)(v1 - 104) = v2;
  *(void *)(v1 - 128) = v0[67];
  *(void *)(v1 - 120) = v3;
}

uint64_t OUTLINED_FUNCTION_39_10(uint64_t result)
{
  *(void *)(result + 16) = 0x3FA999999999999ALL;
  return result;
}

uint64_t OUTLINED_FUNCTION_40_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_45_6()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_46_9()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_49_6()
{
  return Logger.logObject.getter();
}

_WORD *OUTLINED_FUNCTION_52_4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t RunCustomIntentCATs.confirmSlotValue(device:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunCustomIntentCATs.confirmSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_35_3(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_16_18(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  void *v22 = v23;
  v22[1] = RunCustomIntentCATs.confirmSlotValue(device:parameterName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_31_11();
  OUTLINED_FUNCTION_48_0();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunCustomIntentCATs.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 96) = v3;
  OUTLINED_FUNCTION_56_2(v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 64) = OUTLINED_FUNCTION_79_2(v8);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_77_2();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_72_2();
  return v0();
}

uint64_t RunCustomIntentCATs.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_70_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_67_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_214D20);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v11 + 56) = 0;
    *(void *)(v11 + 64) = 0;
  }
  uint64_t v16 = *(void *)(v10 + 64);
  *(void *)(v11 + 48) = v12;
  OUTLINED_FUNCTION_21_14(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_18_7(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v20();
    swift_retain();
  }
  OUTLINED_FUNCTION_36_10();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v21, v16, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v19)
  {
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  OUTLINED_FUNCTION_65_2();
  *(void *)(v11 + 216) = &type metadata for Bool;
  *(unsigned char *)(v11 + 192) = v23;
  uint64_t v24 = OUTLINED_FUNCTION_17_2();
  uint64_t v25 = (void *)OUTLINED_FUNCTION_44_0(v24);
  *uint64_t v25 = v26;
  v25[1] = RunCustomIntentCATs.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_14_13();
  OUTLINED_FUNCTION_48_0();
  return v31(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

uint64_t RunCustomIntentCATs.describeCustomIntentItem(device:item:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RunCustomIntentCATs.describeCustomIntentItem(device:item:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_38_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_35_3(v13);
  OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_212170);
  if (v12)
  {
    type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v15 = *(void *)(v10 + 48);
  OUTLINED_FUNCTION_53_2();
  v11[9] = v16;
  v11[10] = 1835365481;
  v11[11] = 0xE400000000000000;
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  void *v22 = v23;
  v22[1] = RunCustomIntentCATs.describeCustomIntentItem(device:item:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_31_11();
  OUTLINED_FUNCTION_48_0();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunCustomIntentCATs.deviceUnlock(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATs.deviceUnlock(device:));
}

uint64_t RunCustomIntentCATs.deviceUnlock(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_59_5(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_45_0(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATs.deviceUnlock(device:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_43_1();
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

uint64_t RunCustomIntentCATs.disambiguateSlotValue(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATs.disambiguateSlotValue(device:));
}

uint64_t RunCustomIntentCATs.disambiguateSlotValue(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_59_5(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_45_0(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATs.disambiguateSlotValue(device:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_43_1();
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

uint64_t RunCustomIntentCATs.disambiguateSlotValueItems(device:customPrompt:items:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  OUTLINED_FUNCTION_56_2(v3, v4, v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  v1[7] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t RunCustomIntentCATs.disambiguateSlotValueItems(device:customPrompt:items:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v10 = v9[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = (__n128 *)OUTLINED_FUNCTION_76_3();
  v9[8] = v11;
  OUTLINED_FUNCTION_1_2(v11, (__n128)xmmword_2138B0);
  if (v10)
  {
    type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[3].n128_u64[1] = 0;
    v11[4].n128_u64[0] = 0;
  }
  uint64_t v12 = v9[7];
  OUTLINED_FUNCTION_53_2();
  OUTLINED_FUNCTION_21_14(v13);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v14);
  uint64_t v15 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v12, 1, v15);
  uint64_t v16 = v9[7];
  OUTLINED_FUNCTION_26_16();
  if (v17)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v18();
    swift_retain();
  }
  unint64_t v19 = v9[5];
  v11[8].n128_u64[0] = 0x736D657469;
  v11[8].n128_u64[1] = 0xE500000000000000;
  v11[10].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v11[9].n128_u64[0] = v19;
  uint64_t v30 = (char *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:)
      + async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:);
  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)swift_task_alloc();
  v9[9] = v20;
  *uint64_t v20 = v9;
  v20[1] = RunCustomIntentCATs.disambiguateSlotValueItems(device:customPrompt:items:);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_31_11();
  OUTLINED_FUNCTION_48_0();
  return v25(v21, v22, v23, v24, v25, v26, v27, v28, a9, v30);
}

uint64_t RunCustomIntentCATs.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v0 + 112) = v1;
  OUTLINED_FUNCTION_62_1(v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  *(void *)(v0 + 64) = OUTLINED_FUNCTION_13_0();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 80) = OUTLINED_FUNCTION_36_0(v8);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RunCustomIntentCATs.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  unint64_t v11 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)swift_allocObject();
  *(void *)(v10 + 88) = v12;
  uint64_t v13 = OUTLINED_FUNCTION_1_2(v12, (__n128)xmmword_213920);
  if (v11)
  {
    uint64_t v13 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v12[3].n128_u64[1] = 0;
    v12[4].n128_u64[0] = 0;
  }
  uint64_t v14 = *(void *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 32);
  v12[3].n128_u64[0] = v11;
  v12[4].n128_u64[1] = v13;
  v12[5].n128_u64[0] = 0xD000000000000018;
  v12[5].n128_u64[1] = 0x8000000000228C00;
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v15);
  uint64_t v16 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v14, 1, v16);
  uint64_t v17 = *(void *)(v10 + 80);
  OUTLINED_FUNCTION_26_16();
  if (v18)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v19();
    swift_retain();
  }
  uint64_t v20 = *(void *)(v10 + 72);
  uint64_t v21 = *(void *)(v10 + 40);
  v12[8].n128_u64[0] = 0xD000000000000015;
  v12[8].n128_u64[1] = 0x8000000000228C20;
  outlined init with copy of AppDisplayInfo?(v21, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = *(void *)(v10 + 64);
  uint64_t v24 = *(void *)(v10 + 48);
  v12[11].n128_u64[0] = 0xD000000000000010;
  v12[11].n128_u64[1] = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v24, v23, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of AutoShortcutInvocation?(v23, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  unsigned __int8 v26 = *(unsigned char *)(v10 + 112);
  v12[14].n128_u64[0] = 0xD000000000000018;
  v12[14].n128_u64[1] = 0x8000000000226BE0;
  v12[16].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v12[15].n128_u8[0] = v26;
  uint64_t v27 = OUTLINED_FUNCTION_59();
  uint64_t v28 = (void *)OUTLINED_FUNCTION_28_10(v27);
  *uint64_t v28 = v29;
  v28[1] = RunCustomIntentCATs.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_6_1();
  return v34(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t RunCustomIntentCATs.doneButton()()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = v1;
  uint64_t v3 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 16) = v3;
  *uint64_t v3 = v0;
  v3[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v5(v2, 0xD00000000000001ALL, 0x8000000000224690, _swiftEmptyArrayStorage);
}

uint64_t RunCustomIntentCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  OUTLINED_FUNCTION_56_2(v3, v4, v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  uint64_t v7 = OUTLINED_FUNCTION_13_0();
  v1[8] = OUTLINED_FUNCTION_79_2(v7);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t RunCustomIntentCATs.errorWithCodeCustomError(device:customDialog:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = v10[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_76_3();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_67_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_2138B0);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v11 + 56) = 0;
    *(void *)(v11 + 64) = 0;
  }
  uint64_t v16 = v10[8];
  uint64_t v17 = v10[4];
  *(void *)(v11 + 48) = v12;
  *(void *)(v11 + 72) = v15;
  strcpy((char *)(v11 + 80), "customDialog");
  *(unsigned char *)(v11 + 93) = 0;
  *(_WORD *)(v11 + 94) = -5120;
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_18_7(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v20();
    swift_retain();
  }
  OUTLINED_FUNCTION_36_10();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v21, v16, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v19)
  {
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = OUTLINED_FUNCTION_17_2();
  uint64_t v24 = (void *)OUTLINED_FUNCTION_44_0(v23);
  *uint64_t v24 = v25;
  v24[1] = RunCustomIntentCATs.confirmSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_14_13();
  OUTLINED_FUNCTION_48_0();
  return v30(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
}

uint64_t RunCustomIntentCATs.extensionTimedOut(device:actionName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t RunCustomIntentCATs.extensionTimedOut(device:actionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_38_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_35_3(v13);
  OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_212170);
  if (v12)
  {
    type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v15 = *(void *)(v10 + 48);
  OUTLINED_FUNCTION_53_2();
  v11[9] = v16;
  v11[10] = 0x614E6E6F69746361;
  v11[11] = 0xEA0000000000656DLL;
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  void *v22 = v23;
  v22[1] = RunCustomIntentCATs.confirmSlotValue(device:parameterName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_31_11();
  OUTLINED_FUNCTION_48_0();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunCustomIntentCATs.followupNotSupported(device:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t RunCustomIntentCATs.followupNotSupported(device:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_38_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_35_3(v13);
  OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_212170);
  if (v12)
  {
    type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v15 = *(void *)(v10 + 48);
  OUTLINED_FUNCTION_53_2();
  v11[9] = v16;
  v11[10] = 0xD000000000000010;
  v11[11] = 0x8000000000226B80;
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_59();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  void *v22 = v23;
  v22[1] = RunCustomIntentCATs.confirmSlotValue(device:parameterName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_6_1();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunCustomIntentCATs.handoffNotificationMessage(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATs.handoffNotificationMessage(device:));
}

uint64_t RunCustomIntentCATs.handoffNotificationMessage(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_59_5(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_45_0(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATs.disambiguateSlotValue(device:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_43_1();
  return v10();
}

uint64_t RunCustomIntentCATs.handoffNotificationMessageHomePodOnly(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATs.handoffNotificationMessageHomePodOnly(device:));
}

uint64_t RunCustomIntentCATs.handoffNotificationMessageHomePodOnly(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_59_5(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_45_0(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATs.disambiguateSlotValue(device:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_43_1();
  return v10();
}

uint64_t RunCustomIntentCATs.initiateHandoff(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATs.initiateHandoff(device:));
}

uint64_t RunCustomIntentCATs.initiateHandoff(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_59_5(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_45_0(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATs.disambiguateSlotValue(device:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_43_1();
  return v10();
}

uint64_t RunCustomIntentCATs.intentConfirmationPrompt(device:intentCategory:categoryVerb:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_62_1(v1, v2, v3, v4, v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v0 + 64) = OUTLINED_FUNCTION_13_0();
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 80) = OUTLINED_FUNCTION_36_0(v7);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunCustomIntentCATs.intentConfirmationPrompt(device:intentCategory:categoryVerb:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = v10[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_70_2();
  v10[11] = v12;
  uint64_t v13 = OUTLINED_FUNCTION_1_2(v12, (__n128)xmmword_214D20);
  if (v11)
  {
    uint64_t v13 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v12[3].n128_u64[1] = 0;
    v12[4].n128_u64[0] = 0;
  }
  uint64_t v14 = v10[10];
  OUTLINED_FUNCTION_8_19(v13);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v15);
  uint64_t v16 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v14, 1, v16);
  uint64_t v17 = v10[10];
  OUTLINED_FUNCTION_26_16();
  if (v18)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v19();
    swift_retain();
  }
  uint64_t v20 = v10[9];
  uint64_t v21 = OUTLINED_FUNCTION_15_17();
  outlined init with copy of AppDisplayInfo?(v21, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  OUTLINED_FUNCTION_68_2();
  OUTLINED_FUNCTION_66_2((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v23, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_17_2();
  uint64_t v26 = (void *)OUTLINED_FUNCTION_28_10(v25);
  void *v26 = v27;
  v26[1] = RunCustomIntentCATs.intentConfirmationPrompt(device:intentCategory:categoryVerb:localizedAppName:);
  OUTLINED_FUNCTION_14_13();
  OUTLINED_FUNCTION_48_0();
  return v32(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
}

uint64_t RunCustomIntentCATs.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v0;
  *(unsigned char *)(v1 + 128) = v3;
  *(void *)(v1 + 40) = v4;
  *(void *)(v1 + 48) = v5;
  OUTLINED_FUNCTION_56_2(v6, v7, v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v9);
  uint64_t v10 = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 80) = OUTLINED_FUNCTION_36_0(v10);
  *(void *)(v1 + 88) = swift_task_alloc();
  *(void *)(v1 + 96) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunCustomIntentCATs.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)swift_allocObject();
  *(void *)(v10 + 104) = v12;
  uint64_t v13 = OUTLINED_FUNCTION_1_2(v12, (__n128)xmmword_2126D0);
  if (v11)
  {
    uint64_t v13 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v12[3].n128_u64[1] = 0;
    v12[4].n128_u64[0] = 0;
  }
  uint64_t v14 = *(void *)(v10 + 96);
  OUTLINED_FUNCTION_8_19(v13);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v15);
  uint64_t v16 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v14, 1, v16);
  uint64_t v17 = *(void *)(v10 + 96);
  OUTLINED_FUNCTION_26_16();
  if (v18)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v19();
    swift_retain();
  }
  uint64_t v20 = *(void *)(v10 + 88);
  uint64_t v21 = OUTLINED_FUNCTION_15_17();
  outlined init with copy of AppDisplayInfo?(v21, v20, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v20, 1, v16) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v10 + 88), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = *(void *)(v10 + 80);
  OUTLINED_FUNCTION_66_2((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v24, v23, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v23, 1, v16) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v10 + 80), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = *(void *)(v10 + 72);
  OUTLINED_FUNCTION_51_6();
  v12[14].n128_u64[0] = v27;
  v12[14].n128_u64[1] = v28;
  outlined init with copy of AppDisplayInfo?(v29, v26, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of AutoShortcutInvocation?(v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v12[16].n128_u64[1] = v16;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12[15]);
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v30();
  }
  unsigned __int8 v31 = *(unsigned char *)(v10 + 128);
  v12[17].n128_u64[0] = 0xD000000000000018;
  v12[17].n128_u64[1] = 0x8000000000226BE0;
  v12[19].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v12[18].n128_u8[0] = v31;
  uint64_t v32 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v10 + 112) = v32;
  *uint64_t v32 = v10;
  v32[1] = RunCustomIntentCATs.intentConfirmationPromptWithTemplate(device:intentCategory:categoryVerb:localizedAppName:customDialog:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_14_13();
  OUTLINED_FUNCTION_48_0();
  return v37(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10);
}

uint64_t RunCustomIntentCATs.intentHandledResponse(device:intentCategory:categoryVerb:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_62_1(v1, v2, v3, v4, v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v0 + 64) = OUTLINED_FUNCTION_13_0();
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 80) = OUTLINED_FUNCTION_36_0(v7);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t RunCustomIntentCATs.intentHandledResponse(device:intentCategory:categoryVerb:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = v10[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_70_2();
  v10[11] = v12;
  uint64_t v13 = OUTLINED_FUNCTION_1_2(v12, (__n128)xmmword_214D20);
  if (v11)
  {
    uint64_t v13 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v12[3].n128_u64[1] = 0;
    v12[4].n128_u64[0] = 0;
  }
  uint64_t v14 = v10[10];
  OUTLINED_FUNCTION_8_19(v13);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v15);
  uint64_t v16 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v14, 1, v16);
  uint64_t v17 = v10[10];
  OUTLINED_FUNCTION_26_16();
  if (v18)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v19();
    swift_retain();
  }
  uint64_t v20 = v10[9];
  uint64_t v21 = OUTLINED_FUNCTION_15_17();
  outlined init with copy of AppDisplayInfo?(v21, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  OUTLINED_FUNCTION_68_2();
  OUTLINED_FUNCTION_66_2((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v23, v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_4();
  if (v18)
  {
    outlined destroy of AutoShortcutInvocation?(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v24();
  }
  uint64_t v25 = OUTLINED_FUNCTION_17_2();
  uint64_t v26 = (void *)OUTLINED_FUNCTION_28_10(v25);
  void *v26 = v27;
  v26[1] = RunCustomIntentCATs.disambiguateSlotValueWithCustomText(device:customIntroductionPrompt:customSelectionPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_14_13();
  OUTLINED_FUNCTION_48_0();
  return v32(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
}

uint64_t RunCustomIntentCATs.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v0;
  *(unsigned char *)(v1 + 128) = v3;
  *(void *)(v1 + 40) = v4;
  *(void *)(v1 + 48) = v5;
  OUTLINED_FUNCTION_56_2(v6, v7, v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v9);
  uint64_t v10 = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 80) = OUTLINED_FUNCTION_36_0(v10);
  *(void *)(v1 + 88) = swift_task_alloc();
  *(void *)(v1 + 96) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t RunCustomIntentCATs.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)swift_allocObject();
  *(void *)(v10 + 104) = v12;
  uint64_t v13 = OUTLINED_FUNCTION_1_2(v12, (__n128)xmmword_2126D0);
  if (v11)
  {
    uint64_t v13 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v12[3].n128_u64[1] = 0;
    v12[4].n128_u64[0] = 0;
  }
  uint64_t v14 = *(void *)(v10 + 96);
  OUTLINED_FUNCTION_8_19(v13);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v15);
  uint64_t v16 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v14, 1, v16);
  uint64_t v17 = *(void *)(v10 + 96);
  OUTLINED_FUNCTION_26_16();
  if (v18)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v17, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v19();
    swift_retain();
  }
  uint64_t v20 = *(void *)(v10 + 88);
  uint64_t v21 = OUTLINED_FUNCTION_15_17();
  outlined init with copy of AppDisplayInfo?(v21, v20, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v20, 1, v16) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v10 + 88), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = *(void *)(v10 + 80);
  OUTLINED_FUNCTION_51_6();
  v12[11].n128_u64[0] = v24;
  v12[11].n128_u64[1] = v25;
  outlined init with copy of AppDisplayInfo?(v26, v23, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v23, 1, v16) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v10 + 80), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_71_3();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v27();
  }
  uint64_t v28 = *(void *)(v10 + 72);
  OUTLINED_FUNCTION_78_2();
  v12[14].n128_u64[0] = 0xD000000000000010;
  v12[14].n128_u64[1] = v29;
  outlined init with copy of AppDisplayInfo?(v30, v28, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_2();
  if (v18)
  {
    outlined destroy of AutoShortcutInvocation?(v28, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v12[16].n128_u64[1] = v16;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12[15]);
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v31();
  }
  unsigned __int8 v32 = *(unsigned char *)(v10 + 128);
  v12[17].n128_u64[0] = 0xD000000000000018;
  v12[17].n128_u64[1] = 0x8000000000226BE0;
  v12[19].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v12[18].n128_u8[0] = v32;
  uint64_t v33 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v10 + 112) = v33;
  *uint64_t v33 = v10;
  v33[1] = RunCustomIntentCATs.intentHandledResponseWithTemplate(device:intentCategory:categoryVerb:customDialog:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_14_13();
  OUTLINED_FUNCTION_48_0();
  return v38(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10);
}

uint64_t RunCustomIntentCATs.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 48) = v2;
  *(void *)(v1 + 56) = v0;
  *(unsigned char *)(v1 + 98) = v3;
  *(unsigned char *)(v1 + 97) = v4;
  *(unsigned char *)(v1 + 96) = v5;
  *(void *)(v1 + 32) = v6;
  *(void *)(v1 + 40) = v7;
  *(void *)(v1 + 16) = v8;
  *(void *)(v1 + 24) = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v10);
  *(void *)(v1 + 64) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *char v4 = v3;
  char v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_72_2();
  return v0();
}

uint64_t RunCustomIntentCATs.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_67_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_213920);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v11 + 56) = 0;
    *(void *)(v11 + 64) = 0;
  }
  char v16 = *(unsigned char *)(v10 + 96);
  *(void *)(v11 + 48) = v12;
  *(void *)(v11 + 72) = v15;
  *(void *)(v11 + 80) = 0x6E756F436D657469;
  *(void *)(v11 + 88) = 0xE900000000000074;
  if (v16)
  {
    char v18 = 0;
    uint64_t v17 = 0;
    *(void *)(v11 + 104) = 0;
    *(void *)(v11 + 112) = 0;
  }
  else
  {
    uint64_t v17 = *(void *)(v10 + 32);
    char v18 = &type metadata for Double;
  }
  char v19 = *(unsigned char *)(v10 + 97);
  *(void *)(v11 + 96) = v17;
  *(void *)(v11 + 120) = v18;
  *(void *)(v11 + 128) = 0x657A695365676170;
  *(void *)(v11 + 136) = 0xE800000000000000;
  if (v19)
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
    *(void *)(v11 + 152) = 0;
    *(void *)(v11 + 160) = 0;
  }
  else
  {
    uint64_t v20 = *(void *)(v10 + 40);
    uint64_t v21 = &type metadata for Double;
  }
  uint64_t v22 = *(void *)(v10 + 64);
  *(void *)(v11 + 144) = v20;
  *(void *)(v11 + 168) = v21;
  *(void *)(v11 + 176) = 0xD000000000000010;
  OUTLINED_FUNCTION_78_2();
  *(void *)(v11 + 184) = v23;
  *(unsigned char *)(v11 + 192) = v24;
  *(void *)(v11 + 216) = &type metadata for Bool;
  *(void *)(v11 + 224) = 0xD000000000000018;
  OUTLINED_FUNCTION_78_2();
  *(void *)(v11 + 232) = v25;
  outlined init with copy of AppDisplayInfo?(v26, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v27 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v22, 1, v27);
  uint64_t v28 = *(void *)(v10 + 64);
  OUTLINED_FUNCTION_26_16();
  if (v29)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v28, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    *(void *)(v11 + 264) = v27;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v11 + 240));
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v30();
    swift_retain();
  }
  uint64_t v31 = OUTLINED_FUNCTION_59();
  unsigned __int8 v32 = (void *)OUTLINED_FUNCTION_44_0(v31);
  *unsigned __int8 v32 = v33;
  v32[1] = RunCustomIntentCATs.introduceDisambiguationList(device:itemCount:pageSize:hasMultiplePages:customIntroductionPrompt:);
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_6_1();
  return v38(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10);
}

uint64_t RunCustomIntentCATs.introduceNextDisambiguationPage(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATs.introduceNextDisambiguationPage(device:));
}

uint64_t RunCustomIntentCATs.introduceNextDisambiguationPage(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  char v5 = (__n128 *)OUTLINED_FUNCTION_59_5(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_45_0(v7);
  *uint64_t v8 = v9;
  v8[1] = RunCustomIntentCATs.disambiguateSlotValue(device:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_43_1();
  return v10();
}

uint64_t RunCustomIntentCATs.offerMoreDisambiguationItems(device:remainingPages:customSelectionPrompt:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 88) = v3;
  OUTLINED_FUNCTION_56_2(v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunCustomIntentCATs.offerMoreDisambiguationItems(device:remainingPages:customSelectionPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  unint64_t v11 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_76_3();
  *(void *)(v10 + 64) = v12;
  uint64_t v13 = OUTLINED_FUNCTION_1_2(v12, (__n128)xmmword_2138B0);
  if (v11)
  {
    uint64_t v13 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v12[3].n128_u64[1] = 0;
    v12[4].n128_u64[0] = 0;
  }
  char v14 = *(unsigned char *)(v10 + 88);
  v12[3].n128_u64[0] = v11;
  v12[4].n128_u64[1] = v13;
  strcpy((char *)&v12[5], "remainingPages");
  v12[5].n128_u8[15] = -18;
  if (v14)
  {
    char v16 = 0;
    unint64_t v15 = 0;
    v12[6].n128_u64[1] = 0;
    v12[7].n128_u64[0] = 0;
  }
  else
  {
    unint64_t v15 = *(void *)(v10 + 32);
    char v16 = &type metadata for Double;
  }
  uint64_t v17 = *(void *)(v10 + 56);
  v12[6].n128_u64[0] = v15;
  v12[7].n128_u64[1] = (unint64_t)v16;
  v12[8].n128_u64[0] = 0xD000000000000015;
  OUTLINED_FUNCTION_78_2();
  v12[8].n128_u64[1] = v18;
  outlined init with copy of AppDisplayInfo?(v19, v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v20 = type metadata accessor for SpeakableString();
  __swift_getEnumTagSinglePayload(v17, 1, v20);
  uint64_t v21 = *(void *)(v10 + 56);
  OUTLINED_FUNCTION_26_16();
  if (v22)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v21, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    v12[10].n128_u64[1] = v20;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12[9]);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v23();
    swift_retain();
  }
  char v24 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v10 + 72) = v24;
  *char v24 = v10;
  v24[1] = RunCustomIntentCATs.offerMoreDisambiguationItems(device:remainingPages:customSelectionPrompt:);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_7_10();
  OUTLINED_FUNCTION_6_1();
  return v29(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
}

uint64_t RunCustomIntentCATs.offerMoreItems(device:remainingPages:nextPageSize:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 40) = a5;
  *(void *)(v7 + 48) = v6;
  *(unsigned char *)(v7 + 81) = a6;
  *(unsigned char *)(v7 + 80) = a4;
  OUTLINED_FUNCTION_56_2(a1, a2, a3);
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATs.offerMoreItems(device:remainingPages:nextPageSize:));
}

uint64_t RunCustomIntentCATs.offerMoreItems(device:remainingPages:nextPageSize:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v17 = v1;
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_76_3();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_2138B0;
  *(void *)(v3 + 32) = 0x656369766564;
  *(void *)(v3 + 40) = 0xE600000000000000;
  if (v2)
  {
    uint64_t v4 = type metadata accessor for SirikitDeviceState();
    uint64_t v5 = v2;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    *(void *)(v3 + 56) = 0;
    *(void *)(v3 + 64) = 0;
  }
  char v6 = *(unsigned char *)(v0 + 80);
  *(void *)(v3 + 48) = v5;
  *(void *)(v3 + 72) = v4;
  strcpy((char *)(v3 + 80), "remainingPages");
  *(unsigned char *)(v3 + 95) = -18;
  if (v6)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    *(void *)(v3 + 104) = 0;
    *(void *)(v3 + 112) = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 32);
    uint64_t v8 = &type metadata for Double;
  }
  char v9 = *(unsigned char *)(v0 + 81);
  *(void *)(v3 + 96) = v7;
  *(void *)(v3 + 120) = v8;
  strcpy((char *)(v3 + 128), "nextPageSize");
  *(unsigned char *)(v3 + 141) = 0;
  *(_WORD *)(v3 + 142) = -5120;
  if (v9)
  {
    unint64_t v11 = 0;
    uint64_t v10 = 0;
    *(void *)(v3 + 152) = 0;
    *(void *)(v3 + 160) = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 40);
    unint64_t v11 = &type metadata for Double;
  }
  *(void *)(v3 + 168) = v11;
  *(void *)(v3 + 144) = v10;
  OUTLINED_FUNCTION_3_1();
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)OUTLINED_FUNCTION_14_6(v12);
  *uint64_t v13 = v14;
  v13[1] = RunCustomIntentCATs.offerMoreItems(device:remainingPages:nextPageSize:);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_43_1();
  return v15();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *char v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RunCustomIntentCATs.promptForSlotValue(device:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t RunCustomIntentCATs.promptForSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  unint64_t v15 = (__n128 *)OUTLINED_FUNCTION_35_3(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_16_18(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  char v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  void *v22 = v23;
  v22[1] = RunCustomIntentCATs.confirmSlotValue(device:parameterName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_31_11();
  OUTLINED_FUNCTION_48_0();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunCustomIntentCATs.promptForSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 96) = v3;
  OUTLINED_FUNCTION_56_2(v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 64) = OUTLINED_FUNCTION_79_2(v8);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_77_2();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunCustomIntentCATs.promptForSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_70_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_67_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_214D20);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v11 + 56) = 0;
    *(void *)(v11 + 64) = 0;
  }
  uint64_t v16 = *(void *)(v10 + 64);
  *(void *)(v11 + 48) = v12;
  OUTLINED_FUNCTION_21_14(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_18_7(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v20();
    swift_retain();
  }
  OUTLINED_FUNCTION_36_10();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v21, v16, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v19)
  {
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  OUTLINED_FUNCTION_65_2();
  *(void *)(v11 + 216) = &type metadata for Bool;
  *(unsigned char *)(v11 + 192) = v23;
  uint64_t v24 = OUTLINED_FUNCTION_17_2();
  uint64_t v25 = (void *)OUTLINED_FUNCTION_44_0(v24);
  *uint64_t v25 = v26;
  v25[1] = RunCustomIntentCATs.promptForSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_14_13();
  OUTLINED_FUNCTION_48_0();
  return v31(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

uint64_t RunCustomIntentCATs.readDisambiguationItems(device:items:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OUTLINED_FUNCTION_2_3((uint64_t)RunCustomIntentCATs.readDisambiguationItems(device:items:));
}

uint64_t RunCustomIntentCATs.readDisambiguationItems(device:items:)()
{
  OUTLINED_FUNCTION_13_1();
  unint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_38_2();
  v0[6] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_1_2(v2, (__n128)xmmword_212170);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  unint64_t v4 = v0[4];
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  v2[5].n128_u64[0] = 0x736D657469;
  v2[5].n128_u64[1] = 0xE500000000000000;
  v2[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v2[6].n128_u64[0] = v4;
  uint64_t v7 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:)
                         + async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = RunCustomIntentCATs.readDisambiguationItems(device:items:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  return v7();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *unint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

uint64_t RunCustomIntentCATs.unsupportedSlotValue(device:parameterName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t RunCustomIntentCATs.unsupportedSlotValue(device:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_35_3(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_16_18(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_11(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  char v22 = (void *)OUTLINED_FUNCTION_14_6(v21);
  void *v22 = v23;
  v22[1] = RunCustomIntentCATs.confirmSlotValue(device:parameterName:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_31_11();
  OUTLINED_FUNCTION_48_0();
  return v28(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t RunCustomIntentCATs.unsupportedSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 96) = v3;
  OUTLINED_FUNCTION_56_2(v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  uint64_t v8 = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 64) = OUTLINED_FUNCTION_79_2(v8);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t RunCustomIntentCATs.unsupportedSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_70_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_67_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_214D20);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v11 + 56) = 0;
    *(void *)(v11 + 64) = 0;
  }
  uint64_t v16 = *(void *)(v10 + 64);
  *(void *)(v11 + 48) = v12;
  OUTLINED_FUNCTION_21_14(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_18_7(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v20();
    swift_retain();
  }
  OUTLINED_FUNCTION_36_10();
  OUTLINED_FUNCTION_54_3((uint64_t)"localizedAppName");
  outlined init with copy of AppDisplayInfo?(v21, v16, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_32_4();
  if (v19)
  {
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  OUTLINED_FUNCTION_65_2();
  *(void *)(v11 + 216) = &type metadata for Bool;
  *(unsigned char *)(v11 + 192) = v23;
  uint64_t v24 = OUTLINED_FUNCTION_17_2();
  uint64_t v25 = (void *)OUTLINED_FUNCTION_44_0(v24);
  *uint64_t v25 = v26;
  v25[1] = RunCustomIntentCATs.promptForSlotValueWithCustomText(device:customPrompt:localizedAppName:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_14_13();
  OUTLINED_FUNCTION_48_0();
  return v31(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10);
}

uint64_t RunCustomIntentCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return RunCustomIntentCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t RunCustomIntentCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v11;
}

uint64_t type metadata accessor for RunCustomIntentCATs()
{
  uint64_t result = type metadata singleton initialization cache for RunCustomIntentCATs;
  if (!type metadata singleton initialization cache for RunCustomIntentCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RunCustomIntentCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for RunCustomIntentCATs()
{
  return type metadata accessor for RunCustomIntentCATs();
}

uint64_t OUTLINED_FUNCTION_8_19(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "intentCategory");
  *(unsigned char *)(v2 + 95) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_15_17()
{
  uint64_t result = *(void *)(v0 + 40);
  strcpy((char *)(v1 + 128), "categoryVerb");
  *(unsigned char *)(v1 + 141) = 0;
  *(_WORD *)(v1 + 142) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_16_18(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "parameterName");
  *(_WORD *)(v2 + 94) = -4864;
  return result;
}

uint64_t OUTLINED_FUNCTION_21_14(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  strcpy((char *)(v1 + 80), "customPrompt");
  *(unsigned char *)(v1 + 93) = 0;
  *(_WORD *)(v1 + 94) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_36_10()
{
  return *(void *)(v0 + 40);
}

uint64_t *OUTLINED_FUNCTION_44_7()
{
  *(void *)(v2 + 120) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_52_5()
{
  return *(void *)(v0 + 16);
}

void OUTLINED_FUNCTION_53_2()
{
  *(void *)(v1 + 48) = v0;
}

void OUTLINED_FUNCTION_54_3(uint64_t a1@<X8>)
{
  *(void *)(v2 + 128) = v1;
  *(void *)(v2 + 136) = (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_56_2(uint64_t result, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_58_5(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_59_5(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_62_1(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  _OWORD v6[2] = result;
  v6[3] = a2;
  return result;
}

void OUTLINED_FUNCTION_65_2()
{
  *(void *)(v2 + 176) = v0;
  *(void *)(v2 + 184) = (v1 - 32) | 0x8000000000000000;
}

void OUTLINED_FUNCTION_66_2(uint64_t a1@<X8>)
{
  *(void *)(v2 + 176) = v1;
  *(void *)(v2 + 184) = (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_67_3(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_68_2()
{
  return *(void *)(v0 + 48);
}

uint64_t OUTLINED_FUNCTION_70_2()
{
  return swift_allocObject();
}

uint64_t *OUTLINED_FUNCTION_71_3()
{
  *(void *)(v2 + 216) = v0;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_72_2()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_76_3()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_77_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_79_2(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return swift_task_alloc();
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.__allocating_init(runner:deviceState:)(long long *a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of AceServiceInvokerAsync(a1, v4 + 56);
  outlined init with take of AceServiceInvokerAsync(a2, v4 + 16);
  return v4;
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.init(runner:deviceState:)(long long *a1, long long *a2)
{
  outlined init with take of AceServiceInvokerAsync(a1, v2 + 56);
  outlined init with take of AceServiceInvokerAsync(a2, v2 + 16);
  return v2;
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse()()
{
  OUTLINED_FUNCTION_9_0();
  v1[12] = v2;
  v1[13] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[14] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for AceOutput();
  v1[15] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[16] = v4;
  v1[17] = OUTLINED_FUNCTION_25();
  type metadata accessor for CATOption();
  v1[18] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v1[19] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[20] = v6;
  v1[21] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = (void *)v0[13];
  type metadata accessor for RunCustomIntentCATs();
  static CATOption.defaultMode.getter();
  uint64_t v2 = (void *)CATWrapper.__allocating_init(options:globals:)();
  v0[22] = v2;
  uint64_t v3 = v1 + 2;
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v6 = DeviceState.asSiriKitDeviceState()(v4, v5);
  v0[23] = v6;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(class metadata base offset for RunCustomIntentCATs
                                                             + *v2
                                                             + 104)
                                                 + **(int **)(class metadata base offset for RunCustomIntentCATs
                                                            + *v2
                                                            + 104));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[24] = v7;
  char *v7 = v0;
  v7[1] = CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse();
  uint64_t v8 = v0[21];
  return v10(v8, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 200) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 32) + **(int **)(v3 + 32));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v4;
  *uint64_t v4 = v0;
  v4[1] = CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse();
  return v6(v2, v3);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 248) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;

  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v9 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[15];
  uint64_t v4 = v0[16];
  v0[10] = v5;
  v0[11] = (uint64_t)&protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(boxed_opaque_existential_1, v3, v5);
  HandoffResponse.init(output:companionNotificationText:runSiriKitExecutorCommand:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[19];
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = *(void *)(v14 + 112);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v14 + 104) + 16), *(void *)(*(void *)(v14 + 104) + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v16 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v15, 1, 1, v16);
  *(void *)(v14 + 48) = 0;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v14 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v15, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v14 + 208) = v17;
  *uint64_t v17 = v14;
  v17[1] = CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse();
  return static NotificationTemplates.genericHandoffNotification()(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.makeHandoffResponse()(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v3;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[27] = v2;
  swift_task_dealloc();
  if (!v2)
  {
    v7[28] = a2;
    v7[29] = a1;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  return v0;
}

uint64_t CustomIntentHandoffToCompanionFlowStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse() in conformance CustomIntentHandoffToCompanionFlowStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 104) + **(int **)(**(void **)v1 + 104));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return v6(a1);
}

uint64_t type metadata accessor for CustomIntentHandoffToCompanionFlowStrategy()
{
  return self;
}

uint64_t CustomIntentHandleIntentFlowStrategy.__allocating_init(voiceCommandName:siriEnvironment:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  CustomIntentHandleIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)(a1, a2, a3, a4);
  return v8;
}

uint64_t CustomIntentHandleIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = type metadata accessor for CATOption();
  __chkstk_darwin(v8 - 8);
  outlined init with copy of DeviceState(a4, v4 + 16);
  outlined init with copy of DeviceState(a4, (uint64_t)v24);
  type metadata accessor for RunCustomIntentCATs();
  OUTLINED_FUNCTION_9_26();
  uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  OUTLINED_FUNCTION_9_26();
  uint64_t v10 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_9_26();
  uint64_t v11 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_9_26();
  uint64_t v12 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for ContinueInAppCATWrapperSimple();
  memset(v22, 0, sizeof(v22));
  uint64_t v23 = 0;
  swift_allocObject();
  outlined init with copy of DeviceState?((uint64_t)v22, (uint64_t)v21);
  SiriKitFlowCATWrapperSimple.init(deviceState:)();
  uint64_t v14 = v13;
  outlined destroy of DeviceState?((uint64_t)v22);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v15 = ResponseFactory.init()();
  type metadata accessor for CustomIntentHandleIntentResponseGenerator();
  uint64_t v16 = (void *)swift_allocObject();
  outlined init with copy of DeviceState((uint64_t)v24, (uint64_t)v22);
  swift_retain();
  uint64_t v17 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(a1, a2, a3, v22, v9, v10, v11, v12, v14, v15, v16);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  *(void *)(v5 + 56) = v17;
  return v5;
}

uint64_t CustomIntentHandleIntentFlowStrategy.makePromptForDeviceUnlock(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentHandleIntentFlowStrategy.makePromptForDeviceUnlock(rchRecord:));
}

uint64_t CustomIntentHandleIntentFlowStrategy.makePromptForDeviceUnlock(rchRecord:)()
{
  uint64_t v2 = *(void *)(v0[4] + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v3 = IntentResolutionRecord.app.getter();
  uint64_t v4 = OUTLINED_FUNCTION_8_20(v3);
  v0[6] = v4;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v2 + 240)
                                                         + **(int **)(*(void *)v2 + 240));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = CustomIntentHandleIntentFlowStrategy.makePromptForDeviceUnlock(rchRecord:);
  uint64_t v6 = v0[2];
  return v8(v6, v1, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7_23();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(CustomIntentHandleIntentFlowStrategy.makePromptForDeviceUnlock(rchRecord:), 0, 0);
  }
  else
  {

    swift_release();
    OUTLINED_FUNCTION_12_0();
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CustomIntentHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:));
}

uint64_t CustomIntentHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v1 = v0[4];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v2 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v3 = (void *)IntentResolutionRecord.intentResponse.getter();
  char v4 = CustomIntentHandleIntentFlowStrategy.isReadRequest(intent:intentResponse:deviceState:)(v2, v3, v1 + 16);

  if (v4)
  {
    type metadata accessor for EmptyOutput();
    static EmptyOutput.instance.getter();
    OUTLINED_FUNCTION_12_0();
    return v5();
  }
  else
  {
    uint64_t v7 = IntentResolutionRecord.app.getter();
    v0[6] = OUTLINED_FUNCTION_8_20(v7);
    v0[7] = IntentResolutionRecord.intentResponse.getter();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[8] = v8;
    *uint64_t v8 = v0;
    v8[1] = CustomIntentHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v9 = OUTLINED_FUNCTION_5_19();
    return v10(v9);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7_23();
  *char v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(CustomIntentHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:), 0, 0);
  }
  else
  {
    uint64_t v7 = *(void **)(v3 + 48);

    swift_release();
    OUTLINED_FUNCTION_12_0();
    return v8();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 48);

  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t CustomIntentHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:));
}

uint64_t CustomIntentHandleIntentFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v1 = IntentResolutionRecord.app.getter();
  v0[6] = OUTLINED_FUNCTION_8_20(v1);
  v0[7] = IntentResolutionRecord.intentResponse.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:);
  uint64_t v3 = OUTLINED_FUNCTION_5_19();
  return v4(v3);
}

uint64_t CustomIntentHandleIntentFlowStrategy.isReadRequest(intent:intentResponse:deviceState:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InteractionType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22[-1] - v11;
  uint64_t v13 = *(void *)(CustomIntentHandleIntentFlowStrategy.getReadItems(intent:intentResponse:)(a1, a2) + 16);
  swift_bridgeObjectRelease();
  outlined init with copy of DeviceState(a3, (uint64_t)v26);
  if (v13)
  {
    OUTLINED_FUNCTION_6_18(v26);
    char v14 = dispatch thunk of DeviceState.isWatch.getter();
    outlined init with copy of DeviceState((uint64_t)v26, (uint64_t)v25);
    if (v14)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      outlined init with copy of DeviceState((uint64_t)v26, (uint64_t)v24);
    }
    else
    {
      OUTLINED_FUNCTION_6_18(v25);
      char v16 = dispatch thunk of DeviceState.isCarPlay.getter();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      outlined init with copy of DeviceState((uint64_t)v26, (uint64_t)v24);
      if ((v16 & 1) == 0)
      {
        OUTLINED_FUNCTION_6_18(v24);
        char v18 = dispatch thunk of DeviceState.isHomePod.getter();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
        outlined init with copy of DeviceState((uint64_t)v26, (uint64_t)v23);
        if ((v18 & 1) == 0)
        {
          OUTLINED_FUNCTION_6_18(v23);
          char v19 = dispatch thunk of DeviceState.isEyesFree.getter();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
          outlined init with copy of DeviceState((uint64_t)v26, (uint64_t)v22);
          if ((v19 & 1) == 0)
          {
            __swift_project_boxed_opaque_existential_1(v22, v22[3]);
            dispatch thunk of DeviceState.interactionType.getter();
            (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for InteractionType.dialogDriven(_:), v6);
            char v15 = specialized == infix<A>(_:_:)();
            uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
            v20(v10, v6);
            v20(v12, v6);
            goto LABEL_9;
          }
LABEL_8:
          char v15 = 1;
LABEL_9:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
          goto LABEL_10;
        }
LABEL_7:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
        outlined init with copy of DeviceState((uint64_t)v26, (uint64_t)v22);
        goto LABEL_8;
      }
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
    outlined init with copy of DeviceState((uint64_t)v26, (uint64_t)v23);
    goto LABEL_7;
  }
  char v15 = 0;
LABEL_10:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
  return v15 & 1;
}

uint64_t CustomIntentHandleIntentFlowStrategy.getReadItems(intent:intentResponse:)(void *a1, void *a2)
{
  if (!a2) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  id v3 = a2;
  uint64_t v4 = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(v3);
  if (!v4)
  {

    return (uint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v5 = v4;
  id v6 = [a1 typeName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  INIntentResponse.localizedResponseTemplate(intentName:)(v10);
  type metadata accessor for CATSpeakableString();
  uint64_t v11 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v13 = 0;
  uint64_t v33 = v5 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v5 + 64);
  uint64_t v17 = &v46;
  int64_t v34 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v35 = v5;
  while (v16)
  {
    unint64_t v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v19 = v18 | (v13 << 6);
LABEL_8:
    outlined init with copy of AnyHashable(*(void *)(v5 + 48) + 40 * v19, (uint64_t)&v39);
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v19, (uint64_t)v41 + 8);
LABEL_27:
    outlined init with take of (key: AnyHashable, value: Any)?((uint64_t)&v39, (uint64_t)&v43);
    if (!*((void *)&v44 + 1))
    {
      swift_bridgeObjectRelease();
      swift_release();

      return (uint64_t)_swiftEmptyArrayStorage;
    }
    outlined init with take of Any(v17, v38);
    long long v39 = v43;
    long long v40 = v44;
    *(void *)&v41[0] = v45;
    if (swift_dynamicCast())
    {
      uint64_t v23 = v17;
      uint64_t v24 = v11[2];
      if (v24)
      {
        BOOL v25 = v11[4] == v36 && v11[5] == v37;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
          goto LABEL_45;
        }
        if (v24 != 1)
        {
          if (v11[6] == v36 && v11[7] == v37) {
            goto LABEL_44;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            goto LABEL_44;
          }
          if (v24 != 2)
          {
            uint64_t v27 = v11 + 9;
            uint64_t v28 = 2;
            do
            {
              uint64_t v29 = v28 + 1;
              if (__OFADD__(v28, 1)) {
                goto LABEL_61;
              }
              if (*(v27 - 1) == v36 && *v27 == v37) {
                goto LABEL_44;
              }
              uint64_t v32 = v28;
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result) {
                goto LABEL_44;
              }
              v27 += 2;
              uint64_t v28 = v32 + 1;
            }
            while (v29 != v24);
          }
        }
      }
      swift_bridgeObjectRelease();
      outlined init with take of Any(v38, &v39);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        swift_bridgeObjectRelease();

        uint64_t v31 = v36;
        swift_release();
        return v31;
      }
LABEL_45:
      uint64_t v17 = v23;
      uint64_t v5 = v35;
    }
    else
    {
      uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
    }
  }
  int64_t v20 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v20 >= v34)
  {
LABEL_26:
    unint64_t v16 = 0;
    uint64_t v42 = 0;
    memset(v41, 0, sizeof(v41));
    long long v39 = 0u;
    long long v40 = 0u;
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v33 + 8 * v20);
  if (v21)
  {
LABEL_12:
    unint64_t v16 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v20 << 6);
    int64_t v13 = v20;
    goto LABEL_8;
  }
  int64_t v22 = v13 + 2;
  ++v13;
  if (v20 + 1 >= v34) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v33 + 8 * v22);
  if (v21) {
    goto LABEL_15;
  }
  int64_t v13 = v20 + 1;
  if (v20 + 2 >= v34) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v33 + 8 * (v20 + 2));
  if (v21)
  {
    v20 += 2;
    goto LABEL_12;
  }
  int64_t v22 = v20 + 3;
  int64_t v13 = v20 + 2;
  if (v20 + 3 >= v34) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v33 + 8 * v22);
  if (v21)
  {
LABEL_15:
    int64_t v20 = v22;
    goto LABEL_12;
  }
  while (1)
  {
    int64_t v20 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v20 >= v34)
    {
      int64_t v13 = v34 - 1;
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v33 + 8 * v20);
    ++v22;
    if (v21) {
      goto LABEL_12;
    }
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t InstallShortcutViewFactory.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  return v0;
}

uint64_t InstallShortcutViewFactory.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.authenticationPolicy.getter in conformance CustomIntentHandleIntentFlowStrategy()
{
  return HandleIntentFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 104)
                                                + **(int **)(**(void **)v2 + 104));
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 112)
                                                + **(int **)(**(void **)v2 + 112));
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 120)
                                                + **(int **)(**(void **)v2 + 120));
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = protocol witness for Flow.execute() in conformance ListShortcutsFlow;
  return v8(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentHandleIntentFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentRCHFlowStrategy;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t outlined destroy of DeviceState?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceState?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void v27[3] = type metadata accessor for ResponseFactory();
  v27[4] = &protocol witness table for ResponseFactory;
  v27[0] = a10;
  a11[10] = a1;
  a11[11] = a2;
  outlined init with copy of DeviceState((uint64_t)a4, (uint64_t)(a11 + 2));
  a11[9] = a3;
  a11[12] = a9;
  outlined init with copy of DeviceState((uint64_t)v27, (uint64_t)(a11 + 13));
  outlined init with copy of DeviceState((uint64_t)a4, (uint64_t)v26);
  uint64_t v18 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = static WFDialogState.shared;
  swift_retain();
  swift_release();
  swift_release();
  type metadata accessor for AppNameResolver();
  uint64_t v20 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
  type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(v26, v19, 0, 1, a5, a6, a7, a8, v20, v21);
  a11[7] = v22;
  uint64_t v23 = a11[9];
  type metadata accessor for CustomIntentSnippetProvider();
  swift_allocObject();
  a11[8] = CustomIntentSnippetProvider.init(voiceCommandName:templatingService:deviceState:siriEnvironment:)(a1, a2, v22, a4, v23);
  swift_retain();
  swift_retain();
  return a11;
}

unint64_t lazy protocol witness table accessor for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy;
  if (!lazy protocol witness table cache variable for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy)
  {
    type metadata accessor for CustomIntentHandleIntentFlowStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentHandleIntentFlowStrategy and conformance CustomIntentHandleIntentFlowStrategy);
  }
  return result;
}

uint64_t type metadata accessor for CustomIntentHandleIntentFlowStrategy()
{
  return self;
}

uint64_t outlined init with take of (key: AnyHashable, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_5_19()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_8_20(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return IntentResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_9_26()
{
  return static CATOption.defaultMode.getter();
}

void ShortcutsLinkRCHFlowStrategy.__allocating_init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_23_4(v22, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = *(void *)(a22 + 24);
  uint64_t v32 = *(void *)(a22 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a22, v31);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_20_0();
  uint64_t v36 = v35 - v34;
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(v37 + 16))(v35 - v34);
  OUTLINED_FUNCTION_26_17(v38, v39, v40, v41, v42, v43, v44, v45, a21, v36, v30, v31, v32);
  __swift_destroy_boxed_opaque_existential_1Tm(a22);
  OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_27_1();
}

void ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_23_4(v23, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v31 = *(void *)(a22 + 24);
  uint64_t v32 = *(void *)(a22 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a22, v31);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_20_0();
  uint64_t v36 = v35 - v34;
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(v37 + 16))(v35 - v34);
  OUTLINED_FUNCTION_26_17(v38, v39, v40, v41, v42, v43, v44, v45, a21, v36, v22, v31, v32);
  __swift_destroy_boxed_opaque_existential_1Tm(a22);
  OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_27_1();
}

void ShortcutsLinkRCHFlowStrategy.flowFor(action:needsValueRequest:actionMetadata:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for CATOption();
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  outlined init with copy of DeviceState(v1 + 128, (uint64_t)v18);
  id v12 = v7;
  id v13 = v5;
  swift_bridgeObjectRetain();
  id v14 = v3;
  static Device.current.getter();
  type metadata accessor for RunLinkActionCATs();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v16 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for ShortcutsLinkPromptForValueFlowStrategy();
  swift_allocObject();
  ShortcutsLinkPromptForValueFlowStrategy.init(action:needsValueRequest:appBundleId:actionMetadata:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:serviceInvoker:)(v12, v13, v10, v11, v14, (uint64_t)&v17, v15, v16, (uint64_t)v18);
  outlined init with copy of DeviceState(v1 + 88, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForValueFlowAsync<LNValue>);
  OUTLINED_FUNCTION_35_2();
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy(&lazy protocol witness table cache variable for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy, (void (*)(uint64_t))type metadata accessor for ShortcutsLinkPromptForValueFlowStrategy);
  swift_retain();
  v18[0] = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)();
  lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptForValueFlowAsync<LNValue> and conformance PromptForValueFlowAsync<A>, &demangling cache variable for type metadata for PromptForValueFlowAsync<LNValue>);
  Flow.eraseToAnyValueFlow()();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_27_1();
}

void ShortcutsLinkRCHFlowStrategy.flowFor(action:disambiguatingNeedsValueRequest:actionMetadata:actionParameterMetadata:selectedValues:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  unint64_t v23 = v2;
  uint64_t v22 = v3;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = v0[2];
  uint64_t v8 = v0[3];
  uint64_t v9 = (uint64_t)(v0 + 5);
  __swift_project_boxed_opaque_existential_1(v0 + 5, v0[8]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v10 = Locale.identifier.getter();
  uint64_t v12 = v11;
  OUTLINED_FUNCTION_81();
  v13();
  type metadata accessor for LinkMetadataProvider();
  uint64_t inited = swift_initStackObject();
  id v15 = [objc_allocWithZone((Class)LNMetadataProvider) init];
  *(void *)(inited + 16) = v15;
  uint64_t v16 = v7;
  specialized LNNeedsValueRequest.toDisambiguationItems(bundleIdentifier:actionParameterMetadata:selectedValues:locale:metadataProvider:)(v7, v8, v22, v23, v10, v12);

  swift_bridgeObjectRelease();
  uint64_t v17 = v8;
  swift_bridgeObjectRetain();
  id v18 = v25;
  id v19 = [v24 dialog];
  outlined init with copy of DeviceState(v9, (uint64_t)v28);
  outlined init with copy of DeviceState((uint64_t)(v1 + 16), (uint64_t)v27);
  outlined init with copy of DeviceState((uint64_t)(v1 + 11), (uint64_t)v26);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = [objc_allocWithZone((Class)LNMetadataProvider) init];
  type metadata accessor for ShortcutsLinkDisambiguationFlowStrategy();
  uint64_t v21 = (void *)swift_allocObject();
  specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)(v16, v17, (uint64_t)v18, (uint64_t)v19, v20, v28, v27, v26, v21);
  outlined init with copy of DeviceState((uint64_t)(v1 + 11), (uint64_t)v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]>);
  OUTLINED_FUNCTION_35_2();
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy(&lazy protocol witness table cache variable for type ShortcutsLinkDisambiguationFlowStrategy and conformance ShortcutsLinkDisambiguationFlowStrategy, (void (*)(uint64_t))type metadata accessor for ShortcutsLinkDisambiguationFlowStrategy);
  swift_retain();
  *(void *)&v28[0] = PromptForDisambiguationFlowAsync.init<A>(items:strategy:outputPublisher:)();
  lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]> and conformance PromptForDisambiguationFlowAsync<A, B>, &demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]>);
  Flow.eraseToAnyValueFlow()();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_27_1();
}

void ShortcutsLinkRCHFlowStrategy.flowFor(action:confirmationRequest:actionMetadata:)()
{
  OUTLINED_FUNCTION_36();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for CATOption();
  uint64_t v8 = OUTLINED_FUNCTION_16(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v19 = *(void *)(v0 + 16);
  outlined init with copy of DeviceState(v0 + 40, (uint64_t)v22);
  outlined init with copy of DeviceState(v0 + 128, (uint64_t)v21);
  outlined init with copy of DeviceState(v0 + 88, (uint64_t)v20);
  type metadata accessor for RunLinkActionCATsSimple();
  id v10 = v6;
  id v11 = v4;
  id v12 = v2;
  swift_bridgeObjectRetain();
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATs();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  uint64_t v16 = ResponseFactory.init()();
  type metadata accessor for ShortcutsLinkPromptForConfirmationFlowStrategy();
  uint64_t v17 = (void *)swift_allocObject();
  specialized ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)((uint64_t)v10, (uint64_t)v11, (uint64_t)v12, v19, v9, v13, v14, v15, v16, v22, v21, v20, v17);
  id v18 = [v11 value];
  outlined init with copy of DeviceState(v0 + 88, (uint64_t)v22);
  *(void *)&v21[0] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNValue, SimpleConfirmationResponseProvider>);
  OUTLINED_FUNCTION_35_2();
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy(&lazy protocol witness table cache variable for type ShortcutsLinkPromptForConfirmationFlowStrategy and conformance ShortcutsLinkPromptForConfirmationFlowStrategy, (void (*)(uint64_t))type metadata accessor for ShortcutsLinkPromptForConfirmationFlowStrategy);
  swift_retain();
  *(void *)&v22[0] = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
  lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptForConfirmationFlowAsync<LNValue, SimpleConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>, &demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNValue, SimpleConfirmationResponseProvider>);
  Flow.eraseToAnyValueFlow()();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_27_1();
}

void *ShortcutsLinkRCHFlowStrategy.flowFor(action:actionConfirmationRequest:actionMetadata:)(void *a1, void *a2, void *a3)
{
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  outlined init with copy of DeviceState(v3 + 40, (uint64_t)v16);
  outlined init with copy of DeviceState(v3 + 128, (uint64_t)v15);
  outlined init with copy of DeviceState(v3 + 88, (uint64_t)v14);
  type metadata accessor for ShortcutsLinkPromptForActionConfirmationFlowStrategy();
  swift_allocObject();
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  swift_bridgeObjectRetain();
  ShortcutsLinkPromptForActionConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:deviceState:serviceInvoker:outputPublisher:)(v9, v10, v11, v8, v7, v16, (uint64_t)v15, v14);
  outlined init with copy of DeviceState(v3 + 88, (uint64_t)v16);
  v15[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNAction, SimpleConfirmationResponseProvider>);
  OUTLINED_FUNCTION_35_2();
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy(&lazy protocol witness table cache variable for type ShortcutsLinkPromptForActionConfirmationFlowStrategy and conformance ShortcutsLinkPromptForActionConfirmationFlowStrategy, (void (*)(uint64_t))type metadata accessor for ShortcutsLinkPromptForActionConfirmationFlowStrategy);
  id v12 = v9;
  swift_retain();
  v16[0] = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
  lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptForConfirmationFlowAsync<LNAction, SimpleConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>, &demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNAction, SimpleConfirmationResponseProvider>);
  Flow.eraseToAnyValueFlow()();
  OUTLINED_FUNCTION_40_10();
  swift_release();
  return v16;
}

void ShortcutsLinkRCHFlowStrategy.flowFor(action:disambiguationRequest:selectedValues:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = (uint64_t)(v0 + 5);
  __swift_project_boxed_opaque_existential_1(v0 + 5, v0[8]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v8 = Locale.identifier.getter();
  OUTLINED_FUNCTION_81();
  v9();
  LNDisambiguationRequest.toDisambiguationItems(selectedValues:locale:)(v3, v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  id v12 = (void *)v1[4];
  swift_bridgeObjectRetain();
  id v13 = v12;
  id v14 = [v5 dialog];
  outlined init with copy of DeviceState(v7, (uint64_t)v20);
  outlined init with copy of DeviceState((uint64_t)(v1 + 16), (uint64_t)v19);
  uint64_t v15 = (uint64_t)(v1 + 11);
  outlined init with copy of DeviceState((uint64_t)(v1 + 11), (uint64_t)v18);
  type metadata accessor for LinkMetadataProvider();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = [objc_allocWithZone((Class)LNMetadataProvider) init];
  type metadata accessor for ShortcutsLinkDisambiguationFlowStrategy();
  uint64_t v17 = (void *)swift_allocObject();
  specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)(v10, v11, (uint64_t)v13, (uint64_t)v14, v16, v20, v19, v18, v17);
  outlined init with copy of DeviceState(v15, (uint64_t)v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]>);
  OUTLINED_FUNCTION_35_2();
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy(&lazy protocol witness table cache variable for type ShortcutsLinkDisambiguationFlowStrategy and conformance ShortcutsLinkDisambiguationFlowStrategy, (void (*)(uint64_t))type metadata accessor for ShortcutsLinkDisambiguationFlowStrategy);
  swift_retain();
  *(void *)&v20[0] = PromptForDisambiguationFlowAsync.init<A>(items:strategy:outputPublisher:)();
  lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]> and conformance PromptForDisambiguationFlowAsync<A, B>, &demangling cache variable for type metadata for PromptForDisambiguationFlowAsync<ShortcutsLinkDisambiguationItem, [LNValue]>);
  Flow.eraseToAnyValueFlow()();
  OUTLINED_FUNCTION_40_10();
  swift_release();
  OUTLINED_FUNCTION_27_1();
}

long long *ShortcutsLinkRCHFlowStrategy.flowFor(action:continueInAppRequest:actionMetadata:)(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  outlined init with copy of DeviceState(v2 + 40, (uint64_t)v9);
  outlined init with copy of DeviceState(v2 + 88, (uint64_t)v8);
  type metadata accessor for ShortcutsLinkPromptForContinueInAppFlowStrategy();
  swift_allocObject();
  ShortcutsLinkPromptForContinueInAppFlowStrategy.init(appBundleId:deviceState:outputPublisher:)(v4, v5, v9, v8);
  outlined init with copy of DeviceState(v2 + 88, (uint64_t)v9);
  *(void *)&v8[0] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNContinueInAppRequest, SimpleConfirmationResponseProvider>);
  OUTLINED_FUNCTION_35_2();
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy(&lazy protocol witness table cache variable for type ShortcutsLinkPromptForContinueInAppFlowStrategy and conformance ShortcutsLinkPromptForContinueInAppFlowStrategy, (void (*)(uint64_t))type metadata accessor for ShortcutsLinkPromptForContinueInAppFlowStrategy);
  swift_bridgeObjectRetain();
  id v6 = a2;
  swift_retain();
  *(void *)&v9[0] = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
  lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptForConfirmationFlowAsync<LNContinueInAppRequest, SimpleConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>, &demangling cache variable for type metadata for PromptForConfirmationFlowAsync<LNContinueInAppRequest, SimpleConfirmationResponseProvider>);
  Flow.eraseToAnyValueFlow()();
  OUTLINED_FUNCTION_40_10();
  swift_release();
  return v9;
}

void ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v45 = v2;
  uint64_t v46 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v44 = *v0;
  uint64_t v8 = type metadata accessor for ResponseMode();
  OUTLINED_FUNCTION_12_1();
  uint64_t v43 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_0();
  uint64_t v13 = v12 - v11;
  id v14 = [(id)v0[4] systemProtocols];
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  char v16 = Array<A>.isAudioStarting.getter(v15);
  swift_bridgeObjectRelease();
  if (v16)
  {
    OUTLINED_FUNCTION_45_7();
    if (!v17) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.voiceCommands);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_0, v19, (os_log_type_t)v15, "#ShortcutsLinkRCHFlowStrategy action is audioStarting intent", v21, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_16_5();
    (*(void (**)(void))(v22 + 264))();
  }
  if ([v7 openAppWhenRun])
  {
    id v23 = [v5 output];
    unint64_t v15 = (unint64_t)[v23 showOutputAction];

    if (v15)
    {
      OUTLINED_FUNCTION_45_7();
      if (!v17) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_32(v26)) {
        goto LABEL_27;
      }
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      uint64_t v28 = "#ShortcutsLinkRCHFlowStrategy skipping dialog because openAppWhenRun = true";
LABEL_26:
      _os_log_impl(&dword_0, v25, (os_log_type_t)v15, v28, v27, 2u);
      OUTLINED_FUNCTION_7_0();
LABEL_27:

      outlined init with copy of DeviceState((uint64_t)(v1 + 16), (uint64_t)v48);
      type metadata accessor for EmptyOutputAndCloseFlow();
      swift_allocObject();
      *(void *)&v48[0] = EmptyOutputAndCloseFlow.init(shouldClose:aceServiceInvoker:applicationSessionID:)(0, v48, v45, v46);
      lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type EmptyOutputAndCloseFlow and conformance EmptyOutputAndCloseFlow, (void (*)(uint64_t))type metadata accessor for EmptyOutputAndCloseFlow);
      swift_bridgeObjectRetain();
      Flow.eraseToAnyFlow()();
      goto LABEL_28;
    }
  }
  if (*((unsigned char *)v1 + 80) != 1
    || (id v29 = [v5 output],
        LOBYTE(v15) = LNActionOutput.hasCustomOutput()(),
        v29,
        (v15 & 1) == 0))
  {
    OUTLINED_FUNCTION_45_7();
    if (!v17) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.voiceCommands);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_32(v41)) {
      goto LABEL_27;
    }
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    uint64_t v28 = "#ShortcutsLinkRCHFlowStrategy not showing anything for successResult";
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_45_7();
  if (!v17) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.voiceCommands);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    os_log_type_t v42 = v32;
    uint64_t v33 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    *(void *)&v48[0] = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v34 = v33;
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentRequest.getter();
    swift_release();
    CurrentRequest.responseMode.getter();
    swift_release();
    uint64_t v35 = ResponseMode.description.getter();
    unint64_t v37 = v36;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v13, v8);
    *(void *)&long long v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, (uint64_t *)v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v31, v42, "#ShortcutsLinkRCHFlowStrategy showing success snippet and dialog: %s", v34, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }

  outlined init with copy of DeviceState((uint64_t)(v1 + 11), (uint64_t)v48);
  outlined init with copy of DeviceState((uint64_t)(v1 + 16), (uint64_t)&v47);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v1;
  *(void *)(v38 + 24) = v5;
  *(void *)(v38 + 32) = v45;
  *(void *)(v38 + 40) = v46;
  *(unsigned char *)(v38 + 48) = v16 & 1;
  *(void *)(v38 + 56) = v44;
  type metadata accessor for ShowOutputAndCloseFlow();
  swift_allocObject();
  *(void *)&v48[0] = ShowOutputAndCloseFlow.init(shouldCloseSiri:outputPublisher:aceServiceInvoker:outputGenerator:)(0, v48, &v47, (uint64_t)&async function pointer to partial apply for closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:), v38);
  lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type ShowOutputAndCloseFlow and conformance ShowOutputAndCloseFlow, (void (*)(uint64_t))type metadata accessor for ShowOutputAndCloseFlow);
  swift_bridgeObjectRetain();
  swift_retain();
  id v39 = v5;
  Flow.eraseToAnyFlow()();
LABEL_28:
  swift_release();
  OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_27_1();
}

uint64_t closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(unsigned char *)(v7 + 128) = a6;
  *(void *)(v7 + 88) = a5;
  *(void *)(v7 + 96) = a7;
  *(void *)(v7 + 72) = a3;
  *(void *)(v7 + 80) = a4;
  *(void *)(v7 + 56) = a1;
  *(void *)(v7 + 64) = a2;
  return _swift_task_switch(closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:), 0, 0);
}

uint64_t closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:)()
{
  OUTLINED_FUNCTION_21_0();
  *(void *)(v0 + 104) = [*(id *)(v0 + 72) output];
  uint64_t v1 = type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  uint64_t v2 = ResponseFactory.init()();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = &protocol witness table for ResponseFactory;
  *(void *)(v0 + 16) = v2;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 112) = v3;
  *uint64_t v3 = v4;
  v3[1] = closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:);
  return static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = v2 + 16;
  uint64_t v6 = *(void **)(v5 + 104);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  *(void *)(v9 + 120) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);

  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v10, v11, v12);
  }
  else
  {
    OUTLINED_FUNCTION_18_0();
    return v13();
  }
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 120) = v21;
  *(void *)(v1 + 128) = v0;
  *(void *)(v1 + 104) = v2;
  *(void *)(v1 + 112) = v20;
  *(unsigned char *)(v1 + 296) = v3;
  *(void *)(v1 + 88) = v4;
  *(void *)(v1 + 96) = v5;
  *(void *)(v1 + 72) = v6;
  *(void *)(v1 + 80) = v7;
  *(void *)(v1 + 56) = v8;
  *(void *)(v1 + 64) = v9;
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  *(void *)(v1 + 136) = v10;
  OUTLINED_FUNCTION_1_0(v10);
  *(void *)(v1 + 144) = v11;
  *(void *)(v1 + 152) = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_16(v12);
  *(void *)(v1 + 160) = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v1 + 168) = v13;
  OUTLINED_FUNCTION_1_0(v13);
  *(void *)(v1 + 176) = v14;
  *(void *)(v1 + 184) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v15, v16, v17);
}

{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v1 = (void *)v0[10];
  v0[24] = [v1 dialog];
  uint64_t v2 = [v1 viewSnippet];
  char v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 viewData];

    char v3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0xF000000000000000;
  }
  v0[25] = v3;
  v0[26] = v6;
  uint64_t v7 = v0[19];
  uint64_t v8 = v0[17];
  uint64_t v9 = v0[18];
  uint64_t v11 = v0[11];
  uint64_t v10 = v0[12];
  static DialogPhase.summary.getter();
  uint64_t v12 = swift_task_alloc();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v10;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v7, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v8);
  uint64_t v13 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_81();
  v14();
  if (v13)
  {
    uint64_t v15 = v0[13];
    type metadata accessor for App();
    swift_bridgeObjectRetain();
    App.__allocating_init(appIdentifier:)();
    uint64_t v16 = specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(v15, 2);
    uint64_t v18 = v17;
    swift_release();
    v0[27] = v16;
    v0[28] = v18;
    uint64_t v19 = (void *)swift_task_alloc();
    v0[29] = v19;
    NSObject *v19 = v0;
    v19[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:);
    return LinkActionDialogTemplating.actionPerformedDialog(customPrompt:)();
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[35] = v21;
    *uint64_t v21 = v22;
    v21[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:);
    OUTLINED_FUNCTION_28_0();
    return static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:)(v23, v24, v25, v26, v27, v28, v29, v30);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 240) = v5;
  *(void *)(v3 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  Swift::String_optional v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String_optional *boxed_opaque_existential_1;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  char v3 = [*(id *)(v0 + 240) catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  swift_bridgeObjectRetain();
  uint64_t v4 = DialogExecutionResult.firstDialogFullPrint()();
  *(void *)(v0 + 256) = v4.value._object;
  outlined copy of Data?(v2, v1);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v21 = *(void **)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void **)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 200);
  uint64_t v20 = *(void *)(v0 + 208);
  uint64_t v8 = *(void **)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v9 = *(void **)(v0 + 72);
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v11 + 224))();
  uint64_t v22 = v8[3];
  id v23 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v22);
  *(void *)(v0 + 40) = type metadata accessor for WorkflowDataModels(0);
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  boxed_opaque_existential_1 = (Swift::String_optional *)__swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  boxed_opaque_existential_1->value._uint64_t countAndFlagsBits = v10;
  boxed_opaque_existential_1->value._object = v9;
  boxed_opaque_existential_1[1].value._uint64_t countAndFlagsBits = v5;
  boxed_opaque_existential_1[1].value._object = v6;
  boxed_opaque_existential_1[2] = v4;
  boxed_opaque_existential_1[3].value._uint64_t countAndFlagsBits = v7;
  boxed_opaque_existential_1[3].value._object = (void *)v20;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_211C70;
  *(void *)(v13 + 32) = v21;
  uint64_t v24 = v13;
  specialized Array._endMutation()();
  *(void *)(v0 + 264) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v7, v20);
  uint64_t v14 = v21;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 272) = v15;
  *uint64_t v15 = v16;
  v15[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:);
  uint64_t v17 = *(void *)(v0 + 184);
  uint64_t v18 = *(void *)(v0 + 56);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v18, v0 + 16, v24, v17, v22, v23);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  char v3 = v1 + 16;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 288) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);

  outlined consume of Data?(v1, v2);
  char v3 = OUTLINED_FUNCTION_18_16();
  v4(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

void static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)()
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = (void *)v0[30];
  uint64_t v3 = v0[25];
  unint64_t v2 = v0[26];
  uint64_t v4 = (void *)v0[24];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v3, v2);

  outlined consume of Data?(v3, v2);
  uint64_t v5 = OUTLINED_FUNCTION_18_16();
  v6(v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_2();
  __asm { BRAA            X1, X16 }
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_41_10();
  outlined consume of Data?(v1, v0);
  unint64_t v2 = OUTLINED_FUNCTION_70_0();
  v3(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  __asm { BRAA            X1, X16 }
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_41_10();
  outlined consume of Data?(v1, v0);
  unint64_t v2 = OUTLINED_FUNCTION_70_0();
  v3(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  __asm { BRAA            X1, X16 }
}

uint64_t ShortcutsLinkRCHFlowStrategy.flowForAppProtectionCheck()()
{
  type metadata accessor for App();
  swift_bridgeObjectRetain();
  App.__allocating_init(appIdentifier:)();
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
  static AppFlowFactory.makeFixedAppResolutionFlow<A>(app:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyAppResolutionFlow<INIntent>);
  lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>, &demangling cache variable for type metadata for AnyAppResolutionFlow<INIntent>);
  uint64_t v0 = Flow.eraseToAnyValueFlow()();
  swift_release();
  swift_release();
  return v0;
}

uint64_t *ShortcutsLinkRCHFlowStrategy.flowFor(error:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    v12[0] = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v8 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v5, v6, "Failed to perform action with error: %s", v7, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  outlined init with copy of DeviceState(v2 + 88, (uint64_t)v12);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = v2;
  type metadata accessor for SimpleOutputFlowAsync();
  OUTLINED_FUNCTION_35_2();
  swift_errorRetain();
  swift_retain();
  v12[0] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  Flow.eraseToAnyFlow()();
  OUTLINED_FUNCTION_40_10();
  return v12;
}

uint64_t closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[30] = a2;
  v3[31] = a3;
  v3[29] = a1;
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[32] = v4;
  v3[33] = *(void *)(v4 - 8);
  v3[34] = swift_task_alloc();
  return _swift_task_switch(closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:), 0, 0);
}

uint64_t closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:)()
{
  uint64_t v30 = v0;
  *(void *)(v0 + 280) = _convertErrorToNSError(_:)();
  if (NSError.isPreflightError.getter())
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (_DWORD *)OUTLINED_FUNCTION_25_2();
      uint64_t v29 = OUTLINED_FUNCTION_22_3();
      *uint64_t v4 = 136315138;
      swift_getErrorValue();
      uint64_t v5 = Error.localizedDescription.getter();
      *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      OUTLINED_FUNCTION_42_9(&dword_0, v7, v8, "Handling preflight error: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    static Device.current.getter();
    type metadata accessor for WorkflowSnippetProvider();
    uint64_t inited = swift_initStackObject();
    *(void *)(v0 + 288) = inited;
    outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 72), inited + 16);
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 296) = v18;
    *uint64_t v18 = v19;
    v18[1] = closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:);
    OUTLINED_FUNCTION_3();
    return WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:)();
  }
  else
  {
    if (!NSError.isLinkUserCancelledError.getter())
    {
      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      *(void *)(v0 + 328) = v22;
      void *v22 = v23;
      v22[1] = closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:);
      OUTLINED_FUNCTION_3();
      __asm { BRAA            X3, X16 }
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (_DWORD *)OUTLINED_FUNCTION_25_2();
      uint64_t v29 = OUTLINED_FUNCTION_22_3();
      *uint64_t v12 = 136315138;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      OUTLINED_FUNCTION_42_9(&dword_0, v15, v16, "Handling user cancelled error: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 312) = v26;
    void *v26 = v27;
    v26[1] = closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:);
    OUTLINED_FUNCTION_3();
    return static ResponseTemplates.taskAborted()();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  os_log_type_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *unint64_t v6 = v5;
  *(void *)(v3 + 304) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v7 = *(void *)(v3 + 288) + 16;
    swift_setDeallocating();
    __swift_destroy_boxed_opaque_existential_1Tm(v7);
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *os_log_type_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 320) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *os_log_type_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 336) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288) + 16;
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1Tm(v2);

  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

void closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:)()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(uint64_t **)(v0 + 232);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 248) + 40), *(void *)(*(void *)(v0 + 248) + 64));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v6 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 128) = 0u;
  *(void *)(v0 + 144) = 0;
  *(_OWORD *)(v0 + 112) = 0u;
  v5[3] = v6;
  v5[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)();

  outlined destroy of URL?(v0 + 112, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_28_0();
  __asm { BRAA            X1, X16 }
}

uint64_t ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[24] = v2;
  v1[25] = v0;
  v1[23] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v4);
  v1[26] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v1[27] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[28] = v6;
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for DialogPhase();
  v1[30] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[31] = v8;
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v1[34] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[35] = v10;
  v1[36] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[37] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[38] = v12;
  v1[39] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  void *v0;
  char v1;
  void (*v2)(void);
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  (*(void (**)(void, void, void))(v0[38] + 104))(v0[39], enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v0[37]);
  uint64_t v1 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  OUTLINED_FUNCTION_36_11();
  v2();
  if (v1)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[40] = v3;
    *uint64_t v3 = v0;
    v3[1] = ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:);
    return LinkActionDialogTemplating.makeFailureHandlingIntentDialog(error:)();
  }
  else
  {
    uint64_t v5 = swift_task_alloc();
    uint64_t v6 = (void *)OUTLINED_FUNCTION_22_21(v5);
    *uint64_t v6 = v7;
    v6[1] = ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:);
    return LinkActionDialogTemplating.makeFailureHandlingIntentDialog_preRFv2(error:)();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 328) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_24_2();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_24_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  long long *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  uint64_t v1 = (long long *)(v0 + 7);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  outlined init with copy of DeviceState((uint64_t)(v0 + 7), (uint64_t)(v0 + 12));
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = (void *)v0[41];
  uint64_t v7 = v0[35];
  uint64_t v8 = v0[36];
  uint64_t v9 = v0[34];
  if (v5)
  {
    uint64_t v15 = v0[36];
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v16 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v10 = 136315138;
    outlined init with copy of DeviceState((uint64_t)(v0 + 12), (uint64_t)(v0 + 17));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
    uint64_t v11 = String.init<A>(describing:)();
    v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
    _os_log_impl(&dword_0, v3, v4, "#ShortcutsLinkRCHFlowStrategy flowFor:error; output: %s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    uint64_t v1 = (long long *)(v0 + 7);
    OUTLINED_FUNCTION_7_0();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v9);
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  }
  outlined init with take of AceServiceInvokerAsync(v1, v0[23]);
  OUTLINED_FUNCTION_30_13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v13();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 368) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

void ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)v0[41];
  uint64_t v4 = v0[32];
  uint64_t v3 = v0[33];
  uint64_t v5 = v0[31];
  uint64_t v6 = v1[30];
  static DialogPhase.error.getter();
  id v7 = [v2 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v1[42] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_211C70;
  *(void *)(v8 + 32) = v2;
  uint64_t v13 = v8;
  specialized Array._endMutation()();
  v1[43] = v13;
  id v9 = v2;
  uint64_t v10 = (void *)swift_task_alloc();
  v1[44] = v10;
  *uint64_t v10 = v1;
  v10[1] = ShortcutsLinkRCHFlowStrategy.makeOutputForFailureHandlingIntentDialog(error:);
  OUTLINED_FUNCTION_3();
  __asm { BR              X3 }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(uint64_t **)(v0 + 184);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 200) + 40), *(void *)(*(void *)(v0 + 200) + 64));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v3);
  uint64_t v4 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v2[3] = v4;
  v2[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v2);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_81();
  v6(v5);
  OUTLINED_FUNCTION_30_13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_28_0();
  __asm { BRAA            X1, X16 }
}

{
  uint64_t v1;

  OUTLINED_FUNCTION_13_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  __asm { BRAA            X1, X16 }
}

uint64_t closure #1 in static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)()
{
  return OutputGenerationManifest.applicationSessionID.setter();
}

uint64_t static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 192) = v14;
  *(_OWORD *)(v8 + 176) = v13;
  *(void *)(v8 + 160) = a7;
  *(void *)(v8 + 168) = a8;
  *(void *)(v8 + 144) = a5;
  *(void *)(v8 + 152) = a6;
  *(unsigned char *)(v8 + 376) = a4;
  *(void *)(v8 + 128) = a2;
  *(void *)(v8 + 136) = a3;
  *(void *)(v8 + 120) = a1;
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v8 + 200) = v9;
  *(void *)(v8 + 208) = *(void *)(v9 - 8);
  *(void *)(v8 + 216) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + 224) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SpeakableString();
  *(void *)(v8 + 232) = v10;
  *(void *)(v8 + 240) = *(void *)(v10 - 8);
  *(void *)(v8 + 248) = swift_task_alloc();
  *(void *)(v8 + 256) = swift_task_alloc();
  return _swift_task_switch(static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:), 0, 0);
}

uint64_t static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:)()
{
  OUTLINED_FUNCTION_9_0();
  if (*(void *)(v0 + 144))
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 264) = v1;
    void *v1 = v2;
    v1[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    uint64_t v3 = *(void *)(v0 + 224);
    return LNDialog.asSpeakableString.getter(v3);
  }
  else
  {
    __swift_storeEnumTagSinglePayload(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 232));
    outlined destroy of URL?(*(void *)(v0 + 224), &demangling cache variable for type metadata for SpeakableString?);
    *(unsigned char *)(v0 + 377) = *(void *)(v0 + 144) != 0;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v5;
    *uint64_t v5 = v0;
    v5[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    OUTLINED_FUNCTION_37_12();
    return LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:)();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  void *v18;
  uint64_t v19;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1)
  {
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v3 = *(void *)(v0 + 144) != 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 248);
    uint64_t v4 = *(void *)(v0 + 256);
    uint64_t v6 = *(void *)(v0 + 240);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v2, v1);
    id v7 = SpeakableString.print.getter();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 0x2000000000000000) != 0) {
      uint64_t v10 = HIBYTE(v9) & 0xF;
    }
    else {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v1);
    if (v10)
    {
      uint64_t v3 = 1;
    }
    else
    {
      uint64_t v11 = SpeakableString.speak.getter();
      long long v13 = v12;
      swift_bridgeObjectRelease();
      uint64_t v14 = HIBYTE(v13) & 0xF;
      if ((v13 & 0x2000000000000000) == 0) {
        uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v3 = v14 != 0;
    }
    uint64_t v15 = *(void *)(v0 + 256);
    uint64_t v16 = *(void *)(v0 + 232);
    uint64_t v17 = *(void (**)(void))(*(void *)(v0 + 240) + 8);
    OUTLINED_FUNCTION_36_11();
    v17();
    ((void (*)(uint64_t, uint64_t))v17)(v15, v16);
  }
  *(unsigned char *)(v0 + 377) = v3;
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v18;
  *uint64_t v18 = v0;
  v18[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
  OUTLINED_FUNCTION_37_12();
  OUTLINED_FUNCTION_24_2();
  return LinkActionDialogTemplating.makeActionPerformedPattern_preRFv2(customResponse:useSonicStatus:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 280) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v6();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v4;
  unint64_t v5;
  void *v6;
  id v7;
  id v8;
  Class isa;
  Class v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_13_1();
  if (*(unsigned char *)(v0 + 377) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v1;
    void *v1 = v0;
    v1[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    OUTLINED_FUNCTION_24_2();
    return LinkActionDialogTemplating.actionPerformedDialog_preRFv2(customPrompt:)();
  }
  uint64_t v4 = [*(id *)(v0 + 280) dialog];
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for PatternExecutionDialog);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = *(void **)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
    if (v6)
    {
LABEL_7:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v5 & 0xC000000000000001) == 0);
      if ((v5 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v5 + 32);
      }
      uint64_t v6 = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = v6;
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      [v8 setSpokenOnly:isa];

      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
LABEL_12:
  *(void *)(v0 + 320) = v6;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v10 = (Class)static WFDialogState.shared;
  OUTLINED_FUNCTION_16_5();
  if (((*(uint64_t (**)(void))(v11 + 272))() & 1) != 0 && v6)
  {
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    uint64_t v12 = v6;
    uint64_t v10 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    [v12 setPrintOnly:v10];
  }
  long long v13 = *(void *)(v0 + 160);
  if (v13 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = OUTLINED_FUNCTION_8_21();
    v15(v14);
    if (v10)
    {
      uint64_t v16 = [*(id *)(v0 + 320) dialogId];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    OutputGenerationManifest.responseViewId.setter();
    OUTLINED_FUNCTION_16_5();
    uint64_t v22 = OUTLINED_FUNCTION_28_15();
    v23(v22);
    OUTLINED_FUNCTION_23_17();
    uint64_t v24 = swift_task_alloc();
    uint64_t v25 = (void *)OUTLINED_FUNCTION_22_21(v24);
    *uint64_t v25 = v26;
    v25[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    OUTLINED_FUNCTION_11_23();
    OUTLINED_FUNCTION_24_2();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v27, v28, v29, v30, v31);
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 152);
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v18 = *(void *)(v0 + 136);
    outlined init with copy of DeviceState(*(void *)(v0 + 168), v0 + 80);
    outlined copy of Data?(v17, v13);
    outlined copy of Data?(v17, v13);
    swift_bridgeObjectRetain();
    ActionPerformedVisual.init(appBundleId:prompt:viewData:deviceState:)(v19, v18, 0, 0, v17, v13, v0 + 80, (void *)(v0 + 16));
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v20;
    *uint64_t v20 = v0;
    v20[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    OUTLINED_FUNCTION_24_2();
    return ActionPerformedVisual.data.getter();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  id v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[37] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[38] = v3;
    v7[39] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  void *v5;
  id v6;
  id v7;
  Class isa;
  uint64_t v9;
  id v10;
  Class v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = [*(id *)(v0 + 280) dialog];
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for PatternExecutionDialog);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v5 = *(void **)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8));
  if (!v5) {
    goto LABEL_7;
  }
LABEL_3:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v4 & 0xC000000000000001) == 0);
  if ((v4 & 0xC000000000000001) != 0) {
    uint64_t v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v6 = *(id *)(v4 + 32);
  }
  uint64_t v5 = v6;
  swift_bridgeObjectRelease();
  id v7 = v5;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  [v7 setSpokenOnly:isa];

LABEL_8:
  *(void *)(v0 + 320) = v5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_16_5();
  if (((*(uint64_t (**)(void))(v9 + 272))() & 1) != 0 && v5)
  {
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    uint64_t v10 = v5;
    uint64_t v11 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    [v10 setPrintOnly:v11];
  }
  uint64_t v12 = *(void *)(v0 + 160);
  if (v12 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    long long v13 = OUTLINED_FUNCTION_8_21();
    v14(v13);
    if (v12)
    {
      uint64_t v15 = [*(id *)(v0 + 320) dialogId];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    OUTLINED_FUNCTION_29_12();
    OUTLINED_FUNCTION_16_5();
    uint64_t v22 = OUTLINED_FUNCTION_28_15();
    v23(v22);
    OUTLINED_FUNCTION_23_17();
    uint64_t v24 = swift_task_alloc();
    uint64_t v25 = (void *)OUTLINED_FUNCTION_22_21(v24);
    *uint64_t v25 = v26;
    v25[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    OUTLINED_FUNCTION_11_23();
    OUTLINED_FUNCTION_14_1();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v27, v28, v29, v30, v31);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v17 = *(void *)(v0 + 136);
    outlined init with copy of DeviceState(*(void *)(v0 + 168), v0 + 80);
    outlined copy of Data?(v16, v12);
    outlined copy of Data?(v16, v12);
    swift_bridgeObjectRetain();
    ActionPerformedVisual.init(appBundleId:prompt:viewData:deviceState:)(v18, v17, v2, v1, v16, v12, v0 + 80, (void *)(v0 + 16));
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v19;
    NSObject *v19 = v0;
    v19[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
    OUTLINED_FUNCTION_14_1();
    return ActionPerformedVisual.data.getter();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  id v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v10 = v9;
  v7[42] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[43] = v3;
    v7[44] = v5;
    outlined release of ActionPerformedVisual((uint64_t)(v7 + 2));
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(*(void *)(v0 + 352), *(void *)(v0 + 344), *(void **)(v0 + 280));
  outlined consume of Data?(v1, v2);
  uint64_t v3 = OUTLINED_FUNCTION_8_21();
  v4(v3);
  if (v2)
  {
    uint64_t v5 = [*(id *)(v0 + 320) dialogId];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  OUTLINED_FUNCTION_29_12();
  OUTLINED_FUNCTION_16_5();
  uint64_t v6 = OUTLINED_FUNCTION_28_15();
  v7(v6);
  OUTLINED_FUNCTION_23_17();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_22_21(v8);
  *uint64_t v9 = v10;
  v9[1] = static ShortcutsLinkRCHFlowStrategy.makeCustomOutput_preRFv2(appBundleId:isAudioStartAction:customDialog:viewData:deviceState:linkActionDialogTemplate:manifest:responseFactory:);
  uint64_t v11 = OUTLINED_FUNCTION_11_23();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v11, v12, v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 368) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void **)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);

  outlined release of ActionPerformedVisual(v0 + 16);
  outlined consume of Data?(v3, v2);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 320);

  OUTLINED_FUNCTION_36_11();
  v2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t ShortcutsLinkRCHFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 88);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
  swift_release();
  return v0;
}

uint64_t ShortcutsLinkRCHFlowStrategy.__deallocating_deinit()
{
  ShortcutsLinkRCHFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v31 = a9;
  uint64_t v32 = a8;
  uint64_t v33 = a13;
  uint64_t v18 = type metadata accessor for CATOption();
  __chkstk_darwin(v18 - 8);
  v39[3] = a12;
  v39[4] = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(boxed_opaque_existential_1, a10, a12);
  *(void *)(a11 + 16) = a1;
  *(void *)(a11 + 24) = a2;
  *(void *)(a11 + 32) = a3;
  outlined init with copy of DeviceState(a5, a11 + 40);
  *(unsigned char *)(a11 + 80) = a4;
  outlined init with copy of DeviceState(v32, a11 + 88);
  outlined init with copy of DeviceState(v31, a11 + 128);
  outlined init with copy of DeviceState(a5, (uint64_t)v38);
  outlined init with copy of DeviceState((uint64_t)v39, (uint64_t)v36);
  type metadata accessor for RunVoiceCommandCATs();
  id v20 = a3;
  static CATOption.defaultMode.getter();
  uint64_t v21 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v22 = CATWrapperSimple.__allocating_init(options:globals:)();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
  __swift_destroy_boxed_opaque_existential_1Tm(v31);
  __swift_destroy_boxed_opaque_existential_1Tm(v32);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t v23 = (void *)swift_allocObject();
  uint64_t v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v36, v37);
  __chkstk_darwin(v24);
  os_log_type_t v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v27 + 16))(v26);
  uint64_t v28 = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)(v38, v34, v35, v21, v22, (uint64_t)v26, v23, a12, v33);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
  *(void *)(a11 + 168) = v28;
  return a11;
}

void *specialized LNNeedsValueRequest.toDisambiguationItems(bundleIdentifier:actionParameterMetadata:selectedValues:locale:metadataProvider:)(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_retain();
  id v10 = [a3 valueType];
  self;
  uint64_t v11 = swift_dynamicCastObjCClass();
  if (!v11)
  {

    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
    id v15 = a3;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 138412290;
      id v40 = [v15 valueType];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v19 = v40;

      _os_log_impl(&dword_0, v16, v17, "Can only create disambiguations for LNLinkEnumerationValueType, not %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      return _swiftEmptyArrayStorage;
    }
    swift_release();

LABEL_10:
    return _swiftEmptyArrayStorage;
  }
  if (!a4)
  {
    id v20 = (void *)v11;
    unint64_t v22 = LinkMetadataProvider.enums(forBundleIdentifier:)();
    id v23 = v10;
    uint64_t v24 = (void *)specialized Sequence.first(where:)(v22, v20);
    swift_bridgeObjectRelease();
    if (v24)
    {
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNLinkEnumerationValueType);
      id v25 = v24;
      id v26 = [v20 enumerationIdentifier];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v27 = LNLinkEnumerationValueType.__allocating_init(enumerationIdentifier:)();
      id v28 = [v25 cases];
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNEnumCaseMetadata);
      unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      id v30 = v27;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18LNEnumCaseMetadataCG_18SiriLinkFlowPlugin09ShortcutsH18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18ghij5E21tol108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4m66VGSS_So08LNActionnO0CSaySo7LNValueCGSgSSAC0eO9Providing_ptFAKSo010dE9O0CXEfU1_So017LNLinkEnumerationR4TypeCSSTf1cn_n(v29, v30, a5, a6);
      uint64_t v13 = v31;
      swift_release();

      swift_bridgeObjectRelease();
      return (void *)v13;
    }
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.voiceCommands);
    id v15 = v23;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      id v40 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      id v36 = [v20 enumerationIdentifier];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v33, v34, "Could not find LNEnumMetadata for identifier: %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
    }
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7LNValueCG_18SiriLinkFlowPlugin09ShortcutsF18DisambiguationItemVs5NeverOTg5028_sSo19LNNeedsValueRequestC18efgh5E21toj108Items16bundleIdentifier23actionParameterMetadata14selectedValues6locale16metadataProviderSayAC09ShortcutseI4k27VGSS_So08LNActionnO0CSaySo7D33CGSgSSAC0eO9Providing_ptFAkPXEfU_SSTf1cn_n(a4, a5);
  uint64_t v13 = v12;
  swift_release();

  return (void *)v13;
}

void *specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long *a8, void *a9)
{
  a9[13] = type metadata accessor for LinkMetadataProvider();
  a9[14] = &protocol witness table for LinkMetadataProvider;
  a9[10] = a5;
  a9[3] = a1;
  a9[4] = a2;
  a9[20] = a3;
  a9[2] = a4;
  outlined init with take of AceServiceInvokerAsync(a6, (uint64_t)(a9 + 5));
  outlined init with take of AceServiceInvokerAsync(a7, (uint64_t)(a9 + 15));
  outlined init with take of AceServiceInvokerAsync(a8, (uint64_t)(a9 + 21));
  return a9;
}

void *specialized ShortcutsLinkPromptForConfirmationFlowStrategy.init(action:request:actionMetadata:appBundleId:runLinkActionCatWrapperSimple:linkActionPatterns:runLinkActionCatWrapper:enableTCCLabelsProvider:responseFactory:deviceState:serviceInvoker:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long *a10, long long *a11, long long *a12, void *a13)
{
  a13[11] = type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  a13[12] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  a13[8] = a7;
  a13[17] = &type metadata for EnableTCCLabelsProvider;
  a13[18] = &protocol witness table for EnableTCCLabelsProvider;
  a13[22] = type metadata accessor for ResponseFactory();
  a13[23] = &protocol witness table for ResponseFactory;
  a13[19] = a9;
  a13[2] = a1;
  a13[3] = a2;
  a13[4] = a3;
  a13[5] = a4;
  a13[6] = a5;
  a13[7] = a6;
  a13[13] = a8;
  outlined init with take of AceServiceInvokerAsync(a10, (uint64_t)(a13 + 24));
  outlined init with take of AceServiceInvokerAsync(a11, (uint64_t)(a13 + 29));
  outlined init with take of AceServiceInvokerAsync(a12, (uint64_t)(a13 + 34));
  return a13;
}

uint64_t sub_F205C()
{
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 40);
  char v8 = *(unsigned char *)(v0 + 48);
  uint64_t v9 = *(void *)(v0 + 56);
  id v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *id v10 = v1;
  v10[1] = protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance ShortcutsLinkPromptForValueFlowStrategy;
  return closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(action:successResult:startedSessionId:)(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)()
{
  return closure #1 in static ShortcutsLinkRCHFlowStrategy.makeCustomOutput(appBundleId:successOutput:startedSessionId:isAudioStartAction:deviceState:linkActionDialogTemplate:responseFactory:)();
}

uint64_t lazy protocol witness table accessor for type ShortcutsLinkPromptForValueFlowStrategy and conformance ShortcutsLinkPromptForValueFlowStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_F21C8()
{
  swift_errorRelease();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = protocol witness for Flow.execute() in conformance AutoShortcutFlow;
  return closure #1 in ShortcutsLinkRCHFlowStrategy.flowFor(error:)(v3, v5, v4);
}

uint64_t type metadata accessor for ShortcutsLinkRCHFlowStrategy()
{
  return self;
}

uint64_t outlined release of ActionPerformedVisual(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_8_21()
{
  return *(void *)(v0 + 216);
}

uint64_t OUTLINED_FUNCTION_11_23()
{
  return *(void *)(v0 + 120);
}

uint64_t OUTLINED_FUNCTION_18_16()
{
  return *(void *)(v0 + 184);
}

uint64_t OUTLINED_FUNCTION_22_21(uint64_t result)
{
  *(void *)(v1 + 360) = result;
  return result;
}

void *OUTLINED_FUNCTION_23_17()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_26_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19 = *(void *)(v17 - 112);
  uint64_t v20 = *(void *)(v17 - 104);
  uint64_t v21 = *(void *)(v17 - 96);
  uint64_t v22 = *(void *)(v17 - 88);
  return specialized ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)(v16, v15, v14, v13, v19, v20, v21, v22, a9, a10, a11, a12, a13);
}

uint64_t OUTLINED_FUNCTION_28_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_12()
{
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t OUTLINED_FUNCTION_30_13()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_33_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_37_12()
{
  return *(void *)(v0 + 144);
}

uint64_t OUTLINED_FUNCTION_40_10()
{
  return swift_release();
}

void OUTLINED_FUNCTION_41_10()
{
  uint64_t v2 = *(void **)(v0 + 192);
}

void OUTLINED_FUNCTION_42_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

const char *CustomUnderstandingSystemDialogActsFactory.displayStringKey.unsafeMutableAddressor()
{
  return "displayString";
}

uint64_t static CustomUnderstandingSystemDialogActsFactory.displayStringKey.getter()
{
  return 0x5379616C70736964;
}

void static CustomUnderstandingSystemDialogActsFactory.systemPromptedForSlotValue(intentType:bundleId:resolvedParameters:unresolvedParameter:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
  uint64_t v7 = OUTLINED_FUNCTION_16(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_50_1();
  uint64_t v44 = OUTLINED_FUNCTION_10_28(v8);
  OUTLINED_FUNCTION_0_2();
  uint64_t v42 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_50_1();
  uint64_t v41 = v11;
  uint64_t v53 = 95;
  unint64_t v54 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_22_22();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v50 = v5;
  uint64_t v51 = v3;
  *(void *)&long long v48 = 46;
  *((void *)&v48 + 1) = 0xE100000000000000;
  uint64_t v12 = StringProtocol.components<A>(separatedBy:)();
  specialized BidirectionalCollection.last.getter(v12);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (!v14) {
    swift_bridgeObjectRetain();
  }
  type metadata accessor for UsoOpenTaskBuilder();
  OUTLINED_FUNCTION_35_2();
  uint64_t v15 = UsoOpenTaskBuilder.init(baseEntityString:verbString:)();
  uint64_t v16 = v15;
  if (!v1) {
    goto LABEL_32;
  }
  uint64_t v47 = v15;
  uint64_t v45 = v1 + 64;
  OUTLINED_FUNCTION_5_20();
  unint64_t v19 = v18 & v17;
  int64_t v46 = (unint64_t)(v20 + 63) >> 6;
  OUTLINED_FUNCTION_21_15(v46 - 1);
  swift_bridgeObjectRetain();
  uint64_t v21 = 0;
  if (!v19) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v23 = v22 | (v21 << 6);
LABEL_6:
  uint64_t v24 = *(void *)(v1 + 56);
  id v25 = (void *)(*(void *)(v1 + 48) + 16 * v23);
  uint64_t v26 = v25[1];
  *(void *)&long long v48 = *v25;
  *((void *)&v48 + 1) = v26;
  outlined init with copy of Any(v24 + 32 * v23, (uint64_t)v49);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of String?((uint64_t)&v48, (uint64_t)&v50, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any)?);
    if (!v51)
    {
      swift_release();
      uint64_t v16 = v47;
LABEL_32:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      os_log_type_t v34 = (__n128 *)OUTLINED_FUNCTION_16_2();
      OUTLINED_FUNCTION_13_22(v34, (__n128)xmmword_211C70);
      OUTLINED_FUNCTION_35_2();
      v34[2].n128_u64[0] = UsoPrimitiveStringBuilder.init(value:)();
      uint64_t v50 = (uint64_t)v34;
      specialized Array._endMutation()();
      dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)();
      swift_bridgeObjectRelease();
      uint64_t v35 = OUTLINED_FUNCTION_16_2();
      *(_OWORD *)(v35 + 16) = xmmword_211C70;
      *(void *)(v35 + 32) = v16;
      uint64_t v50 = v35;
      specialized Array._endMutation()();
      swift_retain();
      static UsoGraphBuilder.buildGraph(taskBuilders:)();
      swift_bridgeObjectRelease();
      Graph.protobufGraphSiriNl(vocabManager:)();
      OUTLINED_FUNCTION_16_19();
      __swift_storeEnumTagSinglePayload(v36, v37, v38, v44);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v41, v43, v44);
      type metadata accessor for NSError(0, &lazy cache variable for type metadata for USOSerializedGraph);
      unint64_t v39 = (void *)static USOSerializedGraph.fromProto(protoGraph:)();
      [objc_allocWithZone((Class)SIRINLUSystemPrompted) initWithReference:v39];
      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v44);
      OUTLINED_FUNCTION_27_1();
      return;
    }
    outlined init with take of Any(&v52, &v48);
    if (swift_dynamicCast())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v32 = (__n128 *)OUTLINED_FUNCTION_16_2();
      OUTLINED_FUNCTION_13_22(v32, (__n128)xmmword_211C70);
      OUTLINED_FUNCTION_35_2();
      v32[2].n128_u64[0] = UsoPrimitiveStringBuilder.init(value:)();
      *(void *)&long long v48 = v32;
      specialized Array._endMutation()();
      dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_5;
    }
LABEL_7:
    if (__OFADD__(v21, 1)) {
      break;
    }
    OUTLINED_FUNCTION_7_24();
    if (v27 == v28)
    {
      uint64_t v31 = v21;
      goto LABEL_12;
    }
    OUTLINED_FUNCTION_8_22();
    if (v30) {
      goto LABEL_11;
    }
    uint64_t v31 = v29;
    if (v29 + 1 < v46)
    {
      unint64_t v30 = *(void *)(v45 + 8 * (v29 + 1));
      if (v30)
      {
        ++v29;
LABEL_11:
        unint64_t v19 = (v30 - 1) & v30;
        unint64_t v23 = __clz(__rbit64(v30)) + (v29 << 6);
        uint64_t v21 = v29;
        goto LABEL_6;
      }
      uint64_t v31 = v29 + 1;
      if (v29 + 2 < v46)
      {
        unint64_t v30 = *(void *)(v45 + 8 * (v29 + 2));
        if (v30)
        {
          v29 += 2;
          goto LABEL_11;
        }
        OUTLINED_FUNCTION_7_24();
        if (v27 != v28)
        {
          OUTLINED_FUNCTION_8_22();
          if (!v30)
          {
            do
            {
              OUTLINED_FUNCTION_7_24();
              if (v27 == v28)
              {
                uint64_t v31 = v40;
                goto LABEL_12;
              }
              unint64_t v30 = *(void *)(v33 + 8 * v21++);
            }
            while (!v30);
            uint64_t v29 = v21 + 4;
          }
          goto LABEL_11;
        }
      }
    }
LABEL_12:
    unint64_t v19 = 0;
    memset(v49, 0, sizeof(v49));
    uint64_t v21 = v31;
    long long v48 = 0u;
  }
  __break(1u);
}

void static CustomUnderstandingSystemDialogActsFactory.systemOfferedForIntentConfirmation(intent:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
  uint64_t v3 = OUTLINED_FUNCTION_16(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_50_1();
  uint64_t v93 = OUTLINED_FUNCTION_10_28(v4);
  OUTLINED_FUNCTION_0_2();
  uint64_t v91 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_50_1();
  uint64_t v90 = v7;
  Swift::Int v8 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v9 = outlined bridged method (pb) of @objc INIntent.parametersByName.getter(v1);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v89 = v1;
    uint64_t v97 = 0;
    uint64_t v94 = v9 + 64;
    OUTLINED_FUNCTION_5_20();
    unint64_t v13 = v12 & v11;
    int64_t v96 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v88 = v96 - 1;
    uint64_t v95 = v15;
    if ((v12 & v11) == 0) {
      goto LABEL_5;
    }
LABEL_3:
    unint64_t v16 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v17 = v16 | (v97 << 6);
LABEL_4:
    uint64_t v18 = *(void *)(v10 + 56);
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v17);
    uint64_t v20 = v19[1];
    *(void *)&long long v103 = *v19;
    *((void *)&v103 + 1) = v20;
    outlined init with copy of Any(v18 + 32 * v17, (uint64_t)v104);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with take of String?((uint64_t)&v103, (uint64_t)&v105, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any)?);
      unint64_t v28 = v106;
      if (!v106)
      {
        swift_release();
        uint64_t v1 = v89;
        goto LABEL_62;
      }
      uint64_t v29 = v105;
      outlined init with take of Any(v107, &v103);
      outlined init with copy of Any((uint64_t)&v103, (uint64_t)v102);
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INObject);
      if (swift_dynamicCast()) {
        break;
      }
      outlined init with copy of Any((uint64_t)&v103, (uint64_t)v101);
      if (!swift_dynamicCast())
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v42 = type metadata accessor for Logger();
        __swift_project_value_buffer(v42, (uint64_t)static Logger.voiceCommands);
        swift_bridgeObjectRetain();
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = swift_slowAlloc();
          v101[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v45 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v45 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, v101);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_0, v43, v44, "Tried to unwrap parameter as String when generating SystemDialogAct for: %s", (uint8_t *)v45, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

LABEL_58:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v103);
        goto LABEL_59;
      }
      long long v33 = v100[0];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v101[0] = v8;
      specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      OUTLINED_FUNCTION_7_7();
      if (v22) {
        goto LABEL_91;
      }
      unint64_t v37 = v35;
      char v38 = v36;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8))
      {
        unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_96;
        }
        unint64_t v37 = v39;
      }
      Swift::Int v8 = v101[0];
      if (v38)
      {
        uint64_t v41 = (_OWORD *)(*(void *)(v101[0] + 56) + 16 * v37);
        swift_bridgeObjectRelease();
        _OWORD *v41 = v33;
      }
      else
      {
        OUTLINED_FUNCTION_2_21();
        *unint64_t v54 = v29;
        v54[1] = v28;
        *(_OWORD *)(*(void *)(v8 + 56) + 16 * v37) = v33;
        uint64_t v55 = *(void *)(v8 + 16);
        BOOL v22 = __OFADD__(v55, 1);
        uint64_t v56 = v55 + 1;
        if (v22) {
          goto LABEL_93;
        }
        *(void *)(v8 + 16) = v56;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v103);
      uint64_t v10 = v95;
LABEL_59:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v102);
      if (v13) {
        goto LABEL_3;
      }
LABEL_5:
      if (__OFADD__(v97, 1))
      {
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      OUTLINED_FUNCTION_7_24();
      if (v21 != v22)
      {
        OUTLINED_FUNCTION_8_22();
        if (v24) {
          goto LABEL_9;
        }
        OUTLINED_FUNCTION_21_15(v23);
        if (v26 < v96)
        {
          unint64_t v24 = *(void *)(v94 + 8 * v26);
          if (v24) {
            goto LABEL_12;
          }
          uint64_t v97 = v26;
          if (v25 + 2 < v96)
          {
            unint64_t v24 = *(void *)(v94 + 8 * (v25 + 2));
            if (v24)
            {
              uint64_t v23 = v25 + 2;
              goto LABEL_9;
            }
            int64_t v26 = v25 + 3;
            uint64_t v97 = v25 + 2;
            if (v25 + 3 < v96)
            {
              unint64_t v24 = *(void *)(v94 + 8 * v26);
              if (!v24)
              {
                while (!__OFADD__(v26, 1))
                {
                  OUTLINED_FUNCTION_7_24();
                  if (v21 == v22)
                  {
                    OUTLINED_FUNCTION_21_15(v88);
                    goto LABEL_23;
                  }
                  OUTLINED_FUNCTION_8_22();
                  int64_t v26 = v27 + 1;
                  if (v24) {
                    goto LABEL_9;
                  }
                }
                goto LABEL_95;
              }
LABEL_12:
              uint64_t v23 = v26;
LABEL_9:
              unint64_t v13 = (v24 - 1) & v24;
              unint64_t v17 = __clz(__rbit64(v24)) + (v23 << 6);
              uint64_t v97 = v23;
              goto LABEL_4;
            }
          }
        }
      }
LABEL_23:
      unint64_t v13 = 0;
      memset(v104, 0, sizeof(v104));
      long long v103 = 0u;
    }
    unint64_t v30 = (void *)v101[4];
    NSString v31 = OUTLINED_FUNCTION_6_24();
    id v32 = [v30 valueForKey:v31];

    if (v32)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v100, 0, sizeof(v100));
    }
    outlined init with take of String?((uint64_t)v100, (uint64_t)v101, &demangling cache variable for type metadata for Any?);
    if (v101[3])
    {
      if (swift_dynamicCast())
      {
        char v46 = swift_isUniquelyReferenced_nonNull_native();
        v101[0] = v8;
        specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        OUTLINED_FUNCTION_7_7();
        if (v22) {
          goto LABEL_92;
        }
        unint64_t v49 = v47;
        char v50 = v48;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, String>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v46, v8))
        {
          unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
          if ((v50 & 1) != (v52 & 1)) {
            goto LABEL_96;
          }
          unint64_t v49 = v51;
        }
        Swift::Int v8 = v101[0];
        if (v50)
        {
          uint64_t v53 = (void *)(*(void *)(v101[0] + 56) + 16 * v49);
          swift_bridgeObjectRelease();
          void *v53 = v98;
          v53[1] = v99;
        }
        else
        {
          OUTLINED_FUNCTION_2_21();
          *uint64_t v57 = v29;
          v57[1] = v28;
          uint64_t v58 = (void *)(*(void *)(v8 + 56) + 16 * v49);
          void *v58 = v98;
          v58[1] = v99;
          uint64_t v59 = *(void *)(v8 + 16);
          BOOL v22 = __OFADD__(v59, 1);
          uint64_t v60 = v59 + 1;
          if (v22) {
            goto LABEL_94;
          }
          *(void *)(v8 + 16) = v60;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v10 = v95;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {

      swift_bridgeObjectRelease();
      outlined destroy of URL?((uint64_t)v101, &demangling cache variable for type metadata for Any?);
    }
    goto LABEL_58;
  }
LABEL_62:
  id v61 = objc_msgSend(v1, "typeName", v88);
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v64 = v63;

  uint64_t v105 = INIntent.bundleId.getter();
  unint64_t v106 = v65;
  *(void *)&long long v103 = 46;
  *((void *)&v103 + 1) = 0xE100000000000000;
  v102[0] = 95;
  v102[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_20_22();
  OUTLINED_FUNCTION_9_27();
  uint64_t v105 = v62;
  unint64_t v106 = v64;
  *(void *)&long long v103 = 46;
  *((void *)&v103 + 1) = 0xE100000000000000;
  uint64_t v66 = StringProtocol.components<A>(separatedBy:)();
  specialized BidirectionalCollection.last.getter(v66);
  uint64_t v68 = v67;
  swift_bridgeObjectRelease();
  if (v68) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  type metadata accessor for UsoOpenTaskBuilder();
  OUTLINED_FUNCTION_35_2();
  uint64_t v69 = UsoOpenTaskBuilder.init(baseEntityString:verbString:)();
  uint64_t v70 = 0;
  OUTLINED_FUNCTION_5_20();
  uint64_t v73 = v72 & v71;
  uint64_t v75 = v74;
  if ((v72 & v71) == 0) {
    goto LABEL_66;
  }
LABEL_65:
  for (v73 &= v73 - 1; ; uint64_t v73 = (v77 - 1) & v77)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v81 = (__n128 *)OUTLINED_FUNCTION_16_2();
    OUTLINED_FUNCTION_13_22(v81, (__n128)xmmword_211C70);
    OUTLINED_FUNCTION_35_2();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v81[2].n128_u64[0] = UsoPrimitiveStringBuilder.init(value:)();
    uint64_t v105 = (uint64_t)v81;
    specialized Array._endMutation()();
    uint64_t v69 = v75;
    dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v73) {
      goto LABEL_65;
    }
LABEL_66:
    if (__OFADD__(v70, 1))
    {
      __break(1u);
      goto LABEL_89;
    }
    OUTLINED_FUNCTION_7_24();
    if (v21 == v22) {
      goto LABEL_87;
    }
    OUTLINED_FUNCTION_8_22();
    uint64_t v70 = v76;
    if (!v77)
    {
      uint64_t v70 = v76 + 1;
      OUTLINED_FUNCTION_11_24();
      if (v21 == v22) {
        goto LABEL_87;
      }
      OUTLINED_FUNCTION_12_22();
      if (!v77)
      {
        uint64_t v70 = v78 + 2;
        OUTLINED_FUNCTION_11_24();
        if (v21 == v22) {
          goto LABEL_87;
        }
        OUTLINED_FUNCTION_12_22();
        if (!v77) {
          break;
        }
      }
    }
LABEL_84:
    ;
  }
  OUTLINED_FUNCTION_7_24();
  if (v21 == v22)
  {
LABEL_87:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v82 = OUTLINED_FUNCTION_16_2();
    *(_OWORD *)(v82 + 16) = xmmword_211C70;
    *(void *)(v82 + 32) = v69;
    uint64_t v105 = v82;
    specialized Array._endMutation()();
    swift_retain();
    static UsoGraphBuilder.buildGraph(taskBuilders:)();
    swift_bridgeObjectRelease();
    Graph.protobufGraphSiriNl(vocabManager:)();
    OUTLINED_FUNCTION_16_19();
    __swift_storeEnumTagSinglePayload(v83, v84, v85, v93);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32))(v90, v92, v93);
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for USOSerializedGraph);
    os_signpost_id_t v86 = (void *)static USOSerializedGraph.fromProto(protoGraph:)();
    id v87 = [objc_allocWithZone((Class)SIRINLUUserWantedToProceed) initWithReference:v86];
    [objc_allocWithZone((Class)SIRINLUSystemOffered) initWithOfferedAct:v87];
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v93);
    OUTLINED_FUNCTION_27_1();
    return;
  }
  OUTLINED_FUNCTION_8_22();
  if (v77)
  {
    uint64_t v70 = v79;
    goto LABEL_84;
  }
  while (1)
  {
    uint64_t v70 = v79 + 1;
    if (__OFADD__(v79, 1)) {
      break;
    }
    OUTLINED_FUNCTION_11_24();
    if (v21 == v22) {
      goto LABEL_87;
    }
    OUTLINED_FUNCTION_12_22();
    uint64_t v79 = v80 + 1;
    if (v77) {
      goto LABEL_84;
    }
  }
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void static CustomUnderstandingSystemDialogActsFactory.systemOfferedForParameterConfirmation(intent:parameter:resolutionResult:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v39 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_50_1();
  uint64_t v38 = OUTLINED_FUNCTION_10_28(v10);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_21_15(v12);
  id v13 = [v2 itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v47, (uint64_t)&v45);
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for INObject);
  if (swift_dynamicCast())
  {
    NSString v14 = OUTLINED_FUNCTION_6_24();
    id v15 = [v44 valueForKey:v14];

    if (v15)
    {
      _bridgeAnyObjectToAny(_:)();

      swift_unknownObjectRelease();
    }
    else
    {

      memset(v40, 0, 32);
    }
    outlined init with take of String?((uint64_t)v40, (uint64_t)&v41, &demangling cache variable for type metadata for Any?);
    if (v43) {
      swift_dynamicCast();
    }
    else {
      outlined destroy of URL?((uint64_t)&v41, &demangling cache variable for type metadata for Any?);
    }
  }
  else if (swift_dynamicCast())
  {
    v40[0] = v41;
    dispatch thunk of CustomStringConvertible.description.getter();
  }
  else
  {
    outlined init with copy of Any((uint64_t)v47, (uint64_t)&v41);
    if (!swift_dynamicCast())
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v0 = 12;
        unint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)unint64_t v19 = 136315138;
        swift_bridgeObjectRetain();
        v40[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v4, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v17, v18, "Tried to unwrap parameter as String when generating confirmation SystemDialogAct for: %s", v19, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v45);
  id v20 = [v7 typeName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  uint64_t v45 = INIntent.bundleId.getter();
  uint64_t v46 = v24;
  uint64_t v41 = 46;
  unint64_t v42 = 0xE100000000000000;
  v40[0] = 95;
  v40[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_20_22();
  uint64_t v36 = v0;
  OUTLINED_FUNCTION_22_22();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v45 = v21;
  uint64_t v46 = v23;
  uint64_t v41 = 46;
  unint64_t v42 = 0xE100000000000000;
  uint64_t v25 = StringProtocol.components<A>(separatedBy:)();
  specialized BidirectionalCollection.last.getter(v25);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  if (v27) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  type metadata accessor for UsoOpenTaskBuilder();
  OUTLINED_FUNCTION_35_2();
  uint64_t v28 = UsoOpenTaskBuilder.init(baseEntityString:verbString:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = (__n128 *)OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_13_22(v29, (__n128)xmmword_211C70);
  OUTLINED_FUNCTION_35_2();
  v29[2].n128_u64[0] = UsoPrimitiveStringBuilder.init(value:)();
  uint64_t v45 = (uint64_t)v29;
  specialized Array._endMutation()();
  dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v30 + 16) = xmmword_211C70;
  *(void *)(v30 + 32) = v28;
  uint64_t v45 = v30;
  specialized Array._endMutation()();
  swift_retain();
  static UsoGraphBuilder.buildGraph(taskBuilders:)();
  swift_bridgeObjectRelease();
  Graph.protobufGraphSiriNl(vocabManager:)();
  OUTLINED_FUNCTION_16_19();
  __swift_storeEnumTagSinglePayload(v31, v32, v33, v38);
  (*(void (**)(void *, uint64_t, uint64_t))(v36 + 32))(&type metadata for String, v37, v38);
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for USOSerializedGraph);
  os_log_type_t v34 = (void *)static USOSerializedGraph.fromProto(protoGraph:)();
  id v35 = [objc_allocWithZone((Class)SIRINLUUserWantedToProceed) initWithReference:v34];
  [objc_allocWithZone((Class)SIRINLUSystemOffered) initWithOfferedAct:v35];
  swift_release();

  swift_release();
  (*(void (**)(void *, uint64_t))(v36 + 8))(&type metadata for String, v38);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
  OUTLINED_FUNCTION_27_1();
}

void static CustomUnderstandingSystemDialogActsFactory.systemGaveOptionsForDisambiguation(intent:parameter:options:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v1 = v0;
  uint64_t v45 = v2;
  uint64_t v46 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoGraph?);
  uint64_t v7 = OUTLINED_FUNCTION_16(v6);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph();
  OUTLINED_FUNCTION_0_2();
  v50.n128_u64[0] = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_50_1();
  uint64_t v42 = v12;
  id v13 = [v5 typeName];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  uint64_t v55 = INIntent.bundleId.getter();
  uint64_t v56 = v17;
  uint64_t v53 = 46;
  unint64_t v54 = 0xE100000000000000;
  uint64_t v51 = 95;
  unint64_t v52 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v43 = OUTLINED_FUNCTION_9_27();
  uint64_t v48 = v18;
  uint64_t v55 = v14;
  uint64_t v56 = v16;
  uint64_t v53 = 46;
  unint64_t v54 = 0xE100000000000000;
  uint64_t v19 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v47 = specialized BidirectionalCollection.last.getter(v19);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v21)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v47 = v14;
    uint64_t v21 = v16;
  }
  uint64_t v55 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(v1 + 16);
  if (v22)
  {
    uint64_t v41 = v9;
    uint64_t v38 = (void (**)(uint64_t, char *, uint64_t))(v50.n128_u64[0] + 32);
    uint64_t v37 = (void (**)(uint64_t, uint64_t))(v50.n128_u64[0] + 8);
    uint64_t v40 = type metadata accessor for UsoOpenTaskBuilder();
    swift_bridgeObjectRetain();
    uint64_t v36 = v1;
    uint64_t v23 = v1 + 40;
    __n128 v50 = (__n128)xmmword_211C70;
    uint64_t v39 = v21;
    do
    {
      OUTLINED_FUNCTION_35_2();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = UsoOpenTaskBuilder.init(baseEntityString:verbString:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v25 = (__n128 *)OUTLINED_FUNCTION_16_2();
      OUTLINED_FUNCTION_13_22(v25, v50);
      OUTLINED_FUNCTION_35_2();
      v25[2].n128_u64[0] = UsoPrimitiveStringBuilder.init(value:)();
      uint64_t v53 = (uint64_t)v25;
      specialized Array._endMutation()();
      dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)();
      swift_bridgeObjectRelease();
      uint64_t v26 = (__n128 *)OUTLINED_FUNCTION_16_2();
      v26[1] = v50;
      v26[2].n128_u64[0] = v24;
      uint64_t v53 = (uint64_t)v26;
      specialized Array._endMutation()();
      swift_retain();
      static UsoGraphBuilder.buildGraph(taskBuilders:)();
      swift_bridgeObjectRelease();
      uint64_t v27 = v41;
      Graph.protobufGraphSiriNl(vocabManager:)();
      uint64_t v49 = v22;
      OUTLINED_FUNCTION_16_19();
      uint64_t v28 = v44;
      __swift_storeEnumTagSinglePayload(v29, v30, v31, v44);
      uint64_t v32 = v42;
      (*v38)(v42, v27, v28);
      type metadata accessor for NSError(0, &lazy cache variable for type metadata for USOSerializedGraph);
      uint64_t v33 = (void *)static USOSerializedGraph.fromProto(protoGraph:)();
      id v34 = objc_allocWithZone((Class)SIRINLUUserStatedTask);
      id v35 = objc_msgSend(v34, "initWithTask:", v33, v36);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + (v55 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                     + (v55 & 0xFFFFFFFFFFFFFF8)) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v23 += 16;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();

      swift_release();
      (*v37)(v32, v28);
      uint64_t v22 = v49 - 1;
    }
    while (v49 != 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for SIRINLUSystemGaveOptions);
  SIRINLUSystemGaveOptions.__allocating_init(choices:)();
  OUTLINED_FUNCTION_27_1();
}

id SIRINLUSystemGaveOptions.__allocating_init(choices:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithChoices:isa];

  return v2;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32 * v1);
  swift_bridgeObjectRetain();
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16 * v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

ValueMetadata *type metadata accessor for CustomUnderstandingSystemDialogActsFactory()
{
  return &type metadata for CustomUnderstandingSystemDialogActsFactory;
}

void OUTLINED_FUNCTION_2_21()
{
  *(void *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

NSString OUTLINED_FUNCTION_6_24()
{
  return String._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_9_27()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_10_28@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph();
}

uint64_t OUTLINED_FUNCTION_13_22(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for UsoPrimitiveStringBuilder();
}

uint64_t OUTLINED_FUNCTION_20_22()
{
  return v0 - 192;
}

void OUTLINED_FUNCTION_21_15(uint64_t a1@<X8>)
{
  *(void *)(v1 - 336) = a1;
}

uint64_t ListShortcutsCATs.launchApp(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(ListShortcutsCATs.launchApp(device:), 0, 0);
}

uint64_t ListShortcutsCATs.launchApp(device:)()
{
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = swift_allocObject();
  v0[5] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  *(void *)(v2 + 32) = 0x656369766564;
  *(void *)(v2 + 40) = 0xE600000000000000;
  uint64_t v3 = 0;
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  uint64_t v7 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:)
                                                                                    + async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  swift_retain();
  unint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *unint64_t v4 = v0;
  v4[1] = ListShortcutsCATs.launchApp(device:);
  uint64_t v5 = v0[2];
  return v7(v5, 0xD000000000000017, 0x8000000000223A50, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = *v1;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(InstallShortcutCATs.errorInstallShortcut(device:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
}

uint64_t ListShortcutsCATs.viewShortcutsInApp()(uint64_t a1)
{
  uint64_t v5 = (char *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:)
     + async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = ListShortcutsCATs.viewShortcutsInApp();
  return ((uint64_t (*)(uint64_t, unint64_t, unint64_t, void *))v5)(a1, 0xD000000000000020, 0x8000000000223A70, _swiftEmptyArrayStorage);
}

uint64_t ListShortcutsCATs.viewShortcutsInApp()()
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t ListShortcutsCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return ListShortcutsCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ListShortcutsCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v10;
}

uint64_t type metadata accessor for ListShortcutsCATs()
{
  uint64_t result = type metadata singleton initialization cache for ListShortcutsCATs;
  if (!type metadata singleton initialization cache for ListShortcutsCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ListShortcutsCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ListShortcutsCATs()
{
  return type metadata accessor for ListShortcutsCATs();
}

uint64_t _finalizeUninitializedArray<A>(_:)(uint64_t a1)
{
  return a1;
}

void ExactMatcher.match(term:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v110)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  void (*v115)(Swift::String *__return_ptr, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  Swift::String v123;
  void *v124;
  Swift::Int v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  Swift::String v130;
  char v131;
  char v132;
  uint64_t v133;
  id v134;
  char v135[8];
  Swift::Int after[2];
  uint64_t v137;
  uint64_t v138;
  id v139;
  char v140[8];

  uint64_t v5 = *v3;
  uint64_t v6 = *v3;
  uint64_t v122 = type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_12_1();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v5 + 80);
  OUTLINED_FUNCTION_12_1();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_6_25((uint64_t)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_24_7();
  OUTLINED_FUNCTION_6_25(v18);
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_24_7();
  OUTLINED_FUNCTION_6_25(v20);
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_24_7();
  os_log_type_t v116 = v22;
  uint64_t v100 = v23;
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_24_7();
  v114 = v25;
  v120 = String.sanitized.getter();
  v121 = v26;
  swift_bridgeObjectRetain();
  uint64_t v27 = Array.startIndex.getter();
  after[0] = v27;
  uint64_t v28 = OUTLINED_FUNCTION_12_23();
  v117 = v14;
  if (v27 == v28)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    Swift::Int v29 = Array.startIndex.getter();
    uint64_t v125 = v29;
    uint64_t v30 = OUTLINED_FUNCTION_12_23();
    uint64_t v31 = v102;
    if (v29 == v30)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v119 = *(void *)(v6 + 88);
      v115 = *(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v119 + 8);
      os_log_type_t v116 = v119 + 8;
      v114 = v14 + 16;
      uint64_t v118 = (uint64_t *)(v14 + 32);
      uint64_t v113 = (uint64_t *)&v131;
      uint64_t v112 = &v132;
      uint64_t v58 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v110 = (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 8);
      uint64_t v101 = a3;
      while (1)
      {
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        OUTLINED_FUNCTION_8_23();
        if (IsNativeType)
        {
          OUTLINED_FUNCTION_5_21();
          uint64_t v60 = OUTLINED_FUNCTION_13_23();
          v61(v60);
        }
        else
        {
          uint64_t v89 = _ArrayBuffer._getElementSlowPath(_:)();
          if (v100 != 8) {
            goto LABEL_66;
          }
          v123._uint64_t countAndFlagsBits = v89;
          OUTLINED_FUNCTION_14_14();
          uint64_t v90 = OUTLINED_FUNCTION_13_23();
          v91(v90);
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRetain();
        Array.formIndex(after:)(&v125);
        swift_bridgeObjectRelease();
        uint64_t v111 = *v118;
        OUTLINED_FUNCTION_73();
        v62();
        v115(&v130, v12, v119);
        uint64_t v63 = v133;
        v137 = v133;
        *(Swift::String *)after = v130;
        swift_bridgeObjectRetain();
        outlined release of String?((uint64_t)after);
        outlined init with take of String?((uint64_t)v113, (uint64_t)v135, &demangling cache variable for type metadata for String?);
        outlined release of String?((uint64_t)v135);
        outlined init with take of String?((uint64_t)v112, (uint64_t)&v134, &demangling cache variable for type metadata for INImage?);
        outlined release of INImage?(&v134);
        outlined release of [String]((uint64_t)&v137);
        uint64_t v64 = *(void *)(v63 + 16);
        if (v64)
        {
          v124 = _swiftEmptyArrayStorage;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v65 = v63 + 40;
          do
          {
            v123 = String.lowercased()();
            swift_bridgeObjectRetain();
            static CharacterSet.punctuationCharacters.getter();
            lazy protocol witness table accessor for type String and conformance String();
            uint64_t v66 = StringProtocol.components(separatedBy:)();
            (*v58)(v11, v122);
            swift_bridgeObjectRelease();
            v123._uint64_t countAndFlagsBits = v66;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
            lazy protocol witness table accessor for type [String] and conformance [A]();
            uint64_t v67 = OUTLINED_FUNCTION_11_25();
            uint64_t v69 = v68;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v70 = v124;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v70 = v124;
            }
            unint64_t v71 = v70[2];
            if (v71 >= v70[3] >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v70 = v124;
            }
            v65 += 16;
            v70[2] = v71 + 1;
            uint64_t v72 = &v70[2 * v71];
            v72[4] = v67;
            v72[5] = v69;
            --v64;
          }
          while (v64);
          outlined release of [String]((uint64_t)&v137);
          uint64_t v31 = v102;
        }
        else
        {
          outlined release of [String]((uint64_t)&v137);
          uint64_t v70 = _swiftEmptyArrayStorage;
        }
        uint64_t v73 = v70[2];
        if (v73)
        {
          BOOL v74 = v70[4] == v120 && v70[5] == v121;
          if (v74 || (OUTLINED_FUNCTION_2_22(), OUTLINED_FUNCTION_4_23(), (v77 & 1) != 0))
          {
LABEL_58:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            getContiguousArrayStorageType<A>(for:)(v12, v12);
            OUTLINED_FUNCTION_3_25();
            static Array._adoptStorage(_:count:)();
            OUTLINED_FUNCTION_73();
            v92();
            type metadata accessor for Array();
            uint64_t v93 = OUTLINED_FUNCTION_30_0();
            goto LABEL_63;
          }
          if (v73 != 1)
          {
            if (v70[6] == v76 && v70[7] == v75) {
              goto LABEL_58;
            }
            OUTLINED_FUNCTION_2_22();
            OUTLINED_FUNCTION_4_23();
            if (v81) {
              goto LABEL_58;
            }
            if (v73 != 2) {
              break;
            }
          }
        }
LABEL_54:
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_14_14();
        v87(v31, v12);
        Swift::Int v88 = v125;
        if (v88 == OUTLINED_FUNCTION_12_23()) {
          goto LABEL_3;
        }
      }
      uint64_t v82 = v70 + 9;
      uint64_t v83 = 2;
      while (1)
      {
        uint64_t v84 = v83 + 1;
        if (__OFADD__(v83, 1)) {
          break;
        }
        if (*(v82 - 1) == v80 && *v82 == v79) {
          goto LABEL_58;
        }
        OUTLINED_FUNCTION_2_22();
        OUTLINED_FUNCTION_4_23();
        if (v86) {
          goto LABEL_58;
        }
        v82 += 2;
        ++v83;
        if (v84 == v73) {
          goto LABEL_54;
        }
      }
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
    }
  }
  else
  {
    uint64_t v32 = *(void *)(v6 + 88);
    uint64_t v110 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v32 + 8);
    uint64_t v111 = v32 + 8;
    uint64_t v119 = v14 + 16;
    uint64_t v113 = (uint64_t *)(v14 + 32);
    os_log_type_t v109 = &v127;
    v108 = &v128;
    uint64_t v107 = v8 + 8;
    uint64_t v105 = v32 + 32;
    uint64_t v104 = v8;
    uint64_t v103 = v6;
    uint64_t v112 = (char *)(v14 + 8);
    while (1)
    {
      Swift::Bool v33 = Array._hoistableIsNativeTypeChecked()();
      OUTLINED_FUNCTION_8_23();
      if (v33)
      {
        OUTLINED_FUNCTION_5_21();
        uint64_t v34 = OUTLINED_FUNCTION_13_23();
        uint64_t v118 = v35;
        ((void (*)(uint64_t))v35)(v34);
      }
      else
      {
        uint64_t v55 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v100 != 8) {
          goto LABEL_65;
        }
        v130._uint64_t countAndFlagsBits = v55;
        uint64_t v56 = OUTLINED_FUNCTION_13_23();
        uint64_t v118 = v57;
        ((void (*)(uint64_t))v57)(v56);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRetain();
      Array.formIndex(after:)(after);
      swift_bridgeObjectRelease();
      uint64_t v106 = *v113;
      OUTLINED_FUNCTION_73();
      v36();
      v110(&v126, v12, v32);
      outlined init with take of String?((uint64_t)v109, (uint64_t)v140, &demangling cache variable for type metadata for String?);
      outlined release of String?((uint64_t)v140);
      outlined init with take of String?((uint64_t)v108, (uint64_t)&v139, &demangling cache variable for type metadata for INImage?);
      outlined release of INImage?(&v139);
      uint64_t v138 = v129;
      outlined release of [String]((uint64_t)&v138);
      v130 = String.lowercased()();
      static CharacterSet.punctuationCharacters.getter();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v37 = StringProtocol.components(separatedBy:)();
      OUTLINED_FUNCTION_14_14();
      v38(v11, v122);
      swift_bridgeObjectRelease();
      v130._uint64_t countAndFlagsBits = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v39 = OUTLINED_FUNCTION_11_25();
      uint64_t v41 = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v42 = v120;
      if (v39 == v120 && v41 == v121)
      {
        swift_bridgeObjectRelease();
        uint64_t v94 = OUTLINED_FUNCTION_0_22();
        v95(v94);
        goto LABEL_61;
      }
      uint64_t v44 = v121;
      char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = OUTLINED_FUNCTION_0_22();
      v47(v46);
      uint64_t v14 = v117;
      if (v45) {
        goto LABEL_61;
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v32 + 32))(v12, v32) == v42 && v48 == v44) {
        break;
      }
      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v51 = *(void (**)(uint64_t))v112;
      uint64_t v52 = OUTLINED_FUNCTION_30_0();
      v51(v52);
      if (v50) {
        goto LABEL_62;
      }
      ((void (*)(uint64_t, uint64_t))v51)(v116, v12);
      Swift::Int v53 = after[0];
      uint64_t v54 = OUTLINED_FUNCTION_12_23();
      uint64_t v8 = v104;
      uint64_t v6 = v103;
      if (v53 == v54) {
        goto LABEL_2;
      }
    }
    swift_bridgeObjectRelease();
LABEL_61:
    OUTLINED_FUNCTION_14_14();
    uint64_t v96 = OUTLINED_FUNCTION_30_0();
    v97(v96);
LABEL_62:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    getContiguousArrayStorageType<A>(for:)(v12, v12);
    OUTLINED_FUNCTION_3_25();
    static Array._adoptStorage(_:count:)();
    OUTLINED_FUNCTION_73();
    v98();
    type metadata accessor for Array();
    uint64_t v93 = OUTLINED_FUNCTION_30_0();
LABEL_63:
    CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)v93);
  }
}

uint64_t protocol witness for StringMatching.match(term:in:) in conformance ExactMatcher<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (dynamic_cast_existential_0_class_conditional(a2))
  {
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
  else
  {
    return type metadata accessor for _ContiguousArrayStorage();
  }
}

uint64_t type metadata completion function for ExactMatcher()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ExactMatcher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dynamic_cast_existential_0_class_conditional(uint64_t a1)
{
  if (swift_isClassType()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  return *(void *)(v0 - 360);
}

uint64_t OUTLINED_FUNCTION_2_22()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_3_25()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_6_25(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_8_23()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

uint64_t OUTLINED_FUNCTION_11_25()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_12_23()
{
  return Array.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_13_23()
{
  return v0;
}

uint64_t static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (dispatch thunk of DeviceState.isCarPlay.getter())
  {
    outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v4);
    type metadata accessor for WorkflowCarplaySnippetProvider();
  }
  else
  {
    OUTLINED_FUNCTION_9_28();
    if (dispatch thunk of DeviceState.isWatch.getter())
    {
      outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v4);
      type metadata accessor for WorkflowWatchSnippetProvider();
    }
    else
    {
      OUTLINED_FUNCTION_9_28();
      if (dispatch thunk of DeviceState.isHomePod.getter())
      {
        outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v4);
        type metadata accessor for WorkflowHomePodSnippetProvider();
      }
      else
      {
        OUTLINED_FUNCTION_9_28();
        if (dispatch thunk of DeviceState.isMac.getter())
        {
          outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v4);
          type metadata accessor for WorkflowMacSnippetProvider();
        }
        else
        {
          outlined init with copy of DeviceState((uint64_t)a1, (uint64_t)v4);
          type metadata accessor for WorkflowPhoneSnippetProvider();
        }
      }
    }
  }
  uint64_t v2 = swift_allocObject();
  outlined init with take of AceServiceInvokerAsync(v4, v2 + 16);
  return v2;
}

uint64_t WorkflowSnippetProvider.buildSnippetForChooseFromList(shortcutName:appBundleId:disambiguationItems:utteranceViews:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  OUTLINED_FUNCTION_16_5();
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 128)
                                                                                     + **(int **)(v13 + 128));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v14;
  *uint64_t v14 = v6;
  v14[1] = protocol witness for AppShortcutInvoking.autoShortcuts.getter in conformance AutoShortcutInvocation;
  return v16(a5, a1, a2, a3, a4, a6);
}

uint64_t WorkflowSnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  OUTLINED_FUNCTION_16(v1);
  v0[5] = OUTLINED_FUNCTION_13_0();
  v0[6] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v0[7] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v0[8] = v3;
  v0[9] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

void WorkflowSnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_29_0();
  a23 = v27;
  a24 = v28;
  a22 = v25;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_26_18();
  uint64_t v30 = OUTLINED_FUNCTION_4_24(v29, (uint64_t)static Logger.voiceCommands);
  ((void (*)(uint64_t))v26)(v30);
  OUTLINED_FUNCTION_6_26();
  v26();
  OUTLINED_FUNCTION_5_22();
  uint64_t v31 = OUTLINED_FUNCTION_18_17();
  if (v32 == 1)
  {
    outlined destroy of URL?(v31, &demangling cache variable for type metadata for Logger?);
  }
  else
  {
    Swift::Bool v33 = (void *)Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_28_7(v34))
    {
      OUTLINED_FUNCTION_13_24();
      a13 = OUTLINED_FUNCTION_33_13();
      *uint64_t v24 = 136315650;
      uint64_t v35 = OUTLINED_FUNCTION_36_12();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &a13);
      OUTLINED_FUNCTION_11_26(v37);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_27_17();
      *(void *)"#WorkflowSnippetBuilder makeSnippetForShowAlert is not implemented" = 79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_7_25();
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000042, v38, v39);
      OUTLINED_FUNCTION_14_15(v40);
      OUTLINED_FUNCTION_24_16(&dword_0, v41, v42, "FatalError at %s:%lu - %s");
      OUTLINED_FUNCTION_22_23();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v43 = OUTLINED_FUNCTION_21_16();
    v44(v43);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  OUTLINED_FUNCTION_20_23();
  OUTLINED_FUNCTION_18_2();
}

uint64_t WorkflowSnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  OUTLINED_FUNCTION_16(v1);
  v0[5] = OUTLINED_FUNCTION_13_0();
  v0[6] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v0[7] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v0[8] = v3;
  v0[9] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

void WorkflowSnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_29_0();
  a23 = v27;
  a24 = v28;
  a22 = v25;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_26_18();
  uint64_t v30 = OUTLINED_FUNCTION_4_24(v29, (uint64_t)static Logger.voiceCommands);
  ((void (*)(uint64_t))v26)(v30);
  OUTLINED_FUNCTION_6_26();
  v26();
  OUTLINED_FUNCTION_5_22();
  uint64_t v31 = OUTLINED_FUNCTION_18_17();
  if (v32 == 1)
  {
    outlined destroy of URL?(v31, &demangling cache variable for type metadata for Logger?);
  }
  else
  {
    Swift::Bool v33 = (void *)Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_28_7(v34))
    {
      OUTLINED_FUNCTION_13_24();
      a13 = OUTLINED_FUNCTION_33_13();
      *uint64_t v24 = 136315650;
      uint64_t v35 = OUTLINED_FUNCTION_36_12();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &a13);
      OUTLINED_FUNCTION_11_26(v37);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_27_17();
      *(void *)"#WorkflowSnippetBuilder buildIntentSnippet is not implemented" = 92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_7_25();
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003DLL, v38, v39);
      OUTLINED_FUNCTION_14_15(v40);
      OUTLINED_FUNCTION_24_16(&dword_0, v41, v42, "FatalError at %s:%lu - %s");
      OUTLINED_FUNCTION_22_23();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v43 = OUTLINED_FUNCTION_21_16();
    v44(v43);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  OUTLINED_FUNCTION_20_23();
  OUTLINED_FUNCTION_18_2();
}

uint64_t WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[12] = v2;
  v1[13] = v0;
  v1[10] = v3;
  v1[11] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v5);
  v1[14] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingText();
  v1[15] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[16] = v7;
  v1[17] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for TemplatingSection();
  v1[18] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[19] = v9;
  v1[20] = OUTLINED_FUNCTION_25();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v10);
  v1[21] = OUTLINED_FUNCTION_13_0();
  v1[22] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v11);
  v1[23] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for TemplatingResult();
  v1[24] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[25] = v13;
  v1[26] = OUTLINED_FUNCTION_13_0();
  v1[27] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[22];
  type metadata accessor for App();
  swift_bridgeObjectRetain();
  v0[28] = App.__allocating_init(appIdentifier:)();
  type metadata accessor for AppNameResolver();
  swift_initStackObject();
  uint64_t v2 = (void *)static SAAppInfoFactory.createAppInfo(app:)();
  v0[29] = AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(v2);
  v0[30] = v3;

  v0[31] = type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v4 = (void *)CATWrapper.__allocating_init(options:globals:)();
  v0[32] = v4;
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  uint64_t v5 = type metadata accessor for SpeakableString();
  v0[33] = v5;
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v5);
  uint64_t v16 = *(void *)(class metadata base offset for RunVoiceCommandCATs + *v4 + 24)
      + **(int **)(class metadata base offset for RunVoiceCommandCATs + *v4 + 24);
  uint64_t v17 = class metadata base offset for RunVoiceCommandCATs + *v4 + 24;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[34] = v6;
  *uint64_t v6 = v0;
  v6[1] = WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:);
  OUTLINED_FUNCTION_42_7();
  return v10(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v2 + 176);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 280) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  uint64_t v1 = v0[33];
  uint64_t v2 = v0[21];
  uint64_t v3 = (void *)v0[13];
  v0[9] = _swiftEmptyArrayStorage;
  static CATOption.defaultMode.getter();
  uint64_t v4 = (void *)CATWrapper.__allocating_init(options:globals:)();
  v0[36] = v4;
  uint64_t v5 = v3 + 2;
  uint64_t v6 = v3[5];
  uint64_t v7 = v3[6];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v8 = DeviceState.asSiriKitDeviceState()(v6, v7);
  v0[37] = v8;
  SpeakableString.init(print:speak:)();
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v1);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(class metadata base offset for RunVoiceCommandCATs
                                                                      + *v4
                                                                      + 64)
                                                          + **(int **)(class metadata base offset for RunVoiceCommandCATs
                                                                     + *v4
                                                                     + 64));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[38] = v9;
  *uint64_t v9 = v0;
  v9[1] = WorkflowSnippetProvider.buildSnippetForPreflightError(appBundleId:);
  uint64_t v10 = v0[26];
  uint64_t v11 = v0[21];
  return v13(v10, v8, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 312) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 168);
    swift_release();
    swift_release();
    outlined destroy of URL?(v7, &demangling cache variable for type metadata for SpeakableString?);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of URL?(*(void *)(v3 + 168), &demangling cache variable for type metadata for SpeakableString?);
    swift_release();
    swift_release();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  id v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t (*v33)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  uint64_t v5 = TemplatingResult.sections.getter();
  if (!*(void *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v37 = (uint64_t *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 152);
  uint64_t v7 = *(void *)(v1 + 160);
  uint64_t v9 = *(void *)(v1 + 136);
  uint64_t v8 = *(void *)(v1 + 144);
  uint64_t v11 = *(void *)(v1 + 120);
  uint64_t v10 = *(void *)(v1 + 128);
  uint64_t v12 = *(void *)(v1 + 104);
  uint64_t v13 = *(void *)(v1 + 88);
  unint64_t v36 = *(void *)(v1 + 96);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v7, v5 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v8);
  swift_bridgeObjectRelease();
  TemplatingSection.content.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  uint64_t v14 = TemplatingText.text.getter();
  uint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  uint64_t v17 = [objc_allocWithZone((Class)SAAppsLaunchApp) init];
  outlined bridged method (mbgnn) of @objc SAAppsLaunchApp.launchId.setter(v13, v36, v17);
  __swift_project_boxed_opaque_existential_1((void *)(v12 + 16), *(void *)(v12 + 40));
  unint64_t v38 = v17;
  if (dispatch thunk of DeviceState.isPhone.getter())
  {
    swift_bridgeObjectRelease();
    type metadata accessor for SiriKitAceViewBuilder();
    dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
    uint64_t v18 = v17;
    dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)();
    swift_bridgeObjectRelease();

    swift_release();
    uint64_t v19 = dispatch thunk of SiriKitAceViewBuilder.build()();
    swift_release();
    *uint64_t v37 = v19;
    goto LABEL_8;
  }
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v1 + 104) + 16), *(void *)(*(void *)(v1 + 104) + 40));
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    uint64_t v2 = [objc_allocWithZone((Class)SASTCommandTemplateAction) init];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v20 = OUTLINED_FUNCTION_16_2();
    *(_OWORD *)(v20 + 16) = xmmword_211C70;
    *(void *)(v20 + 32) = v17;
    uint64_t v39 = v20;
    specialized Array._endMutation()();
    uint64_t v21 = v17;
    outlined bridged method (mbnn) of @objc SAUIConfirmationView.confirmCommands.setter(v39, v2, (SEL *)&selRef_setCommands_);
    uint64_t v4 = [objc_allocWithZone((Class)SAUIDecoratedText) init];
    outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter(v14, v16, v4);
    uint64_t v22 = [objc_allocWithZone((Class)SASTButtonItem) init];
    [v22 setDecoratedLabel:v4];
    [v22 setCentered:1];
    [v22 setAction:v2];
    uint64_t v23 = [objc_allocWithZone((Class)SASTItemGroup) init];
    uint64_t v24 = OUTLINED_FUNCTION_16_2();
    *(_OWORD *)(v24 + 16) = xmmword_211C70;
    *(void *)(v24 + 32) = v22;
    uint64_t v40 = v24;
    specialized Array._endMutation()();
    uint64_t v0 = v22;
    outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v40, v23);
    uint64_t v3 = v23;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (*v37 & 0xFFFFFFFFFFFFFF8)) < *(void *)((char *)&dword_18
                                                                                   + (*v37 & 0xFFFFFFFFFFFFFF8)) >> 1)
    {
LABEL_6:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_8;
    }
LABEL_12:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v25 = *(void *)(v1 + 216);
  uint64_t v26 = *(void *)(v1 + 200);
  uint64_t v35 = *(void *)(v1 + 208);
  uint64_t v27 = *(void *)(v1 + 192);
  uint64_t v28 = *(void *)(v1 + 112);
  uint64_t v29 = *(uint64_t **)(v1 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v1 + 104) + 16), *(void *)(*(void *)(v1 + 104) + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v30 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v28, 1, 1, v30);
  uint64_t v31 = type metadata accessor for AceOutput();
  *(_OWORD *)(v1 + 32) = 0u;
  *(void *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  void v29[3] = v31;
  v29[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v29);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_release();

  outlined destroy of URL?(v1 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v28, &demangling cache variable for type metadata for NLContextUpdate?);
  int v32 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v32(v35, v27);
  v32(v25, v27);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::Bool v33 = *(uint64_t (**)(void))(v1 + 8);
  return v33();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_21_0();
  swift_release();
  OUTLINED_FUNCTION_32_13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[25];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  OUTLINED_FUNCTION_32_13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

id WorkflowSnippetProvider.makeConfirmationOptions(confirmationButtonText:cancelButtonText:appBundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = [objc_allocWithZone((Class)SAUIConfirmationOptions) init];
  static Device.current.getter();
  id v13 = static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)(0, a5, a6, v20);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  static Device.current.getter();
  id v14 = static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)(2, a5, a6, v20);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmText.setter(a1, a2, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v15 + 16) = xmmword_211C70;
  *(void *)(v15 + 32) = v13;
  v20[0] = v15;
  specialized Array._endMutation()();
  uint64_t v16 = v20[0];
  id v17 = v13;
  outlined bridged method (mbnn) of @objc SAUIConfirmationView.confirmCommands.setter(v16, v12, (SEL *)&selRef_setConfirmCommands_);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.denyText.setter(a3, a4, v12);
  uint64_t v18 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v18 + 16) = xmmword_211C70;
  *(void *)(v18 + 32) = v14;
  v20[0] = v18;
  specialized Array._endMutation()();
  outlined bridged method (mbnn) of @objc SAUIConfirmationView.confirmCommands.setter(v20[0], v12, (SEL *)&selRef_setDenyCommands_);

  return v12;
}

Swift::Bool __swiftcall WorkflowSnippetProvider.shouldShowSnippet(intent:)(INIntent intent)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v2 = OUTLINED_FUNCTION_16(v1);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  id v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v13(v11, v12, v8);
  v13(v7, (uint64_t)v11, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  outlined init with copy of Logger?((uint64_t)v7, (uint64_t)v5);
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v8) == 1)
  {
    outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for Logger?);
  }
  else
  {
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315650;
      uint64_t v17 = OUTLINED_FUNCTION_36_12();
      uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2048;
      uint64_t v20 = 155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 22) = 2080;
      uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000045, 0x8000000000228F00, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v14, v15, "FatalError at %s:%lu - %s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v8);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t WorkflowSnippetProvider.buildConfirmationButtons(buttonLabels:appBundleId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  long long v4[2] = a1;
  v4[3] = a2;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t WorkflowSnippetProvider.buildConfirmationButtons(buttonLabels:appBundleId:)()
{
  uint64_t v1 = (void *)v0[2];
  if (v1[2] == 2)
  {
    uint64_t v2 = v0[4];
    uint64_t v3 = v0[3];
    uint64_t v5 = v1[4];
    uint64_t v4 = v1[5];
    uint64_t v6 = v1[6];
    uint64_t v7 = v1[7];
    OUTLINED_FUNCTION_16_5();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9(v5, v4, v6, v7, v3, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = OUTLINED_FUNCTION_11_4();
  return v11(v10);
}

uint64_t WorkflowSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:)()
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v3;
  v1[5] = v4;
  OUTLINED_FUNCTION_16_5();
  uint64_t v17 = v5 + 120;
  uint64_t v16 = *(void *)(v5 + 120) + **(int **)(v5 + 120);
  uint64_t v6 = (void *)swift_task_alloc();
  v1[8] = v6;
  *uint64_t v6 = v1;
  v6[1] = WorkflowSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:);
  OUTLINED_FUNCTION_42_7();
  return v13(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *(void *)(v1 + 16) = v0;
  *(void *)(v1 + 24) = v3;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[4];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v2 = swift_allocObject();
  v0[9] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_212170;
  uint64_t v3 = [v1 okButton];
  uint64_t v4 = [v3 title];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *(void *)(v2 + 32) = v5;
  *(void *)(v2 + 40) = v7;
  uint64_t v8 = [v1 cancelButton];
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = [v8 title];

    uint64_t v9 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v12 = 0xE000000000000000;
  }
  uint64_t v13 = v0[3];
  uint64_t v14 = (void *)v0[7];
  *(void *)(v2 + 48) = v9;
  *(void *)(v2 + 56) = v12;
  v0[10] = v13;
  uint64_t v26 = (void *)(*v14 + 168);
  uint64_t v25 = *v26 + *(int *)*v26;
  os_log_type_t v15 = (void *)swift_task_alloc();
  v0[11] = v15;
  *os_log_type_t v15 = v0;
  v15[1] = WorkflowSnippetProvider.buildSnippetForShowAlert(dialogRequest:shortcutName:appBundleId:);
  OUTLINED_FUNCTION_42_7();
  return v20(v16, v17, v18, v19, v20, v21, v22, v23, v25, v26);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  *(void *)(v6 + 96) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void **)(v0 + 80);
  [v2 setConfirmationOptions:v1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v3 + 16) = xmmword_211C70;
  *(void *)(v3 + 32) = v2;
  specialized Array._endMutation()();

  uint64_t v4 = OUTLINED_FUNCTION_11_4();
  return v5(v4);
}

uint64_t WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[9] = v2;
  v1[10] = v0;
  v1[7] = v3;
  v1[8] = v4;
  v1[5] = v5;
  v1[6] = v6;
  uint64_t v7 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v7);
  v1[11] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v11)(id, id, uint64_t, uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = [v1 interaction];
  uint64_t v3 = [v2 intent];
  v0[12] = v3;

  uint64_t v4 = [v1 interaction];
  uint64_t v5 = [v4 intentResponse];
  v0[13] = v5;

  OUTLINED_FUNCTION_16_5();
  uint64_t v11 = (uint64_t (*)(id, id, uint64_t, uint64_t))(*(void *)(v6 + 136) + **(int **)(v6 + 136));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  char *v7 = v0;
  v7[1] = WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
  uint64_t v8 = v0[6];
  uint64_t v9 = v0[7];
  return v11(v3, v5, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 120) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v12;
  uint64_t (*v13)(void *);
  uint64_t v14;

  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = *(void **)(v0 + 96);
    uint64_t v2 = *(void *)(v0 + 80);
    type metadata accessor for RunVoiceCommandCATs();
    static CATOption.defaultMode.getter();
    uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for CATButtonLabelTemplating();
    uint64_t inited = swift_initStackObject();
    *(void *)(v0 + 128) = inited;
    *(void *)(inited + 16) = v3;
    uint64_t v5 = v2 + 16;
    uint64_t v6 = [v1 verb];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    *(void *)(v0 + 136) = v9;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v10;
    *uint64_t v10 = v0;
    v10[1] = WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
    return CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:)(v5, v7, v9);
  }
  else
  {
    uint64_t v12 = *(void **)(v0 + 96);

    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void *))(v0 + 8);
    return v13(_swiftEmptyArrayStorage);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v0;
  *uint64_t v4 = *v0;
  *(void *)(v3 + 152) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_16_5();
  unint64_t v18 = v6 + 168;
  uint64_t v17 = *(void *)(v6 + 168) + **(int **)(v6 + 168);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 160) = v7;
  char *v7 = v5;
  v7[1] = WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:);
  OUTLINED_FUNCTION_42_7();
  return v12(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v4 = v3;
  *(void *)(v6 + 168) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t WorkflowSnippetProvider.buildSnippetForConfirmInteraction(dialogRequest:shortcutName:appBundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v10 = (void *)v9[21];
  uint64_t v11 = (void *)v9[15];
  uint64_t v12 = (void *)v9[12];
  uint64_t v13 = (void *)v9[13];
  [v11 setConfirmationOptions:v10];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v14 + 16) = xmmword_211C70;
  *(void *)(v14 + 32) = v11;
  uint64_t v25 = v14;
  specialized Array._endMutation()();
  id v15 = v11;

  swift_setDeallocating();
  swift_release();

  swift_task_dealloc();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_42_7();
  return v18(v16, v17, v18, v19, v20, v21, v22, v23, a9, v25);
}

uint64_t WorkflowSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  OUTLINED_FUNCTION_16(v1);
  v0[5] = OUTLINED_FUNCTION_13_0();
  v0[6] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v0[7] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v0[8] = v3;
  v0[9] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

void WorkflowSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_29_0();
  a23 = v27;
  a24 = v28;
  a22 = v25;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_26_18();
  uint64_t v30 = OUTLINED_FUNCTION_4_24(v29, (uint64_t)static Logger.voiceCommands);
  ((void (*)(uint64_t))v26)(v30);
  OUTLINED_FUNCTION_6_26();
  v26();
  OUTLINED_FUNCTION_5_22();
  uint64_t v31 = OUTLINED_FUNCTION_18_17();
  if (v32 == 1)
  {
    outlined destroy of URL?(v31, &demangling cache variable for type metadata for Logger?);
  }
  else
  {
    Swift::Bool v33 = (void *)Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_28_7(v34))
    {
      OUTLINED_FUNCTION_13_24();
      a13 = OUTLINED_FUNCTION_33_13();
      *uint64_t v24 = 136315650;
      uint64_t v35 = OUTLINED_FUNCTION_36_12();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &a13);
      OUTLINED_FUNCTION_11_26(v37);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_27_17();
      *(void *)"#WorkflowSnippetBuilder makeDisambiguationSnippet is not implemented" = 86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_7_25();
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000044, v38, v39);
      OUTLINED_FUNCTION_14_15(v40);
      OUTLINED_FUNCTION_24_16(&dword_0, v41, v42, "FatalError at %s:%lu - %s");
      OUTLINED_FUNCTION_22_23();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v43 = OUTLINED_FUNCTION_21_16();
    v44(v43);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  OUTLINED_FUNCTION_20_23();
  OUTLINED_FUNCTION_18_2();
}

void outlined bridged method (mbgnn) of @objc SAAppsLaunchApp.launchId.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setLaunchId:v4];
}

void outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(uint64_t a1, void *a2)
{
}

void outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setText:v4];
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.confirmCommands.setter(uint64_t a1, void *a2)
{
}

void outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.denyCommands.setter(uint64_t a1, void *a2)
{
}

uint64_t type metadata accessor for WorkflowSnippetProvider()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_4_24(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(v3, a2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_5_22()
{
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v1);
  return outlined init with copy of Logger?(v2, v0);
}

void OUTLINED_FUNCTION_7_25()
{
  *(_WORD *)(v0 + 22) = 2080;
}

uint64_t OUTLINED_FUNCTION_9_28()
{
  uint64_t v1 = v0[3];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_11_26(uint64_t a1)
{
  void *v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_13_24()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_14_15(uint64_t a1)
{
  void *v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_18_17()
{
  __swift_getEnumTagSinglePayload(v1, 1, v2);
  return *(void *)v0;
}

uint64_t OUTLINED_FUNCTION_20_23()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_21_16()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_22_23()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_24_16(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x20u);
}

void OUTLINED_FUNCTION_27_17()
{
  *(_WORD *)(v0 + 12) = 2048;
}

uint64_t OUTLINED_FUNCTION_32_13()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_33_13()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_36_12()
{
  return StaticString.description.getter();
}

uint64_t protocol witness for DateTimeResolving.makeRecommendation(value:context:spec:) in conformance DateTimeResolver()
{
  return DateTimeResolver.makeRecommendation(value:context:spec:)();
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::Properties_optional __swiftcall RunVoiceCommandCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunVoiceCommandCATsSimple.Properties.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v2 >= 0xF) {
    return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::Properties_optional)15;
  }
  else {
    return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::Properties_optional)v2;
  }
}

void RunVoiceCommandCATsSimple.Properties.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      OUTLINED_FUNCTION_52();
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.Properties()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  RunVoiceCommandCATsSimple.Properties.rawValue.getter(v1);
  *uint64_t v0 = v2;
  v0[1] = v3;
}

uint64_t RunVoiceCommandCATsSimple.confirmSlotValue(device:slotName:slotValue:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_70_3();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t RunVoiceCommandCATsSimple.confirmSlotValue(device:slotName:slotValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_76_3();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_65_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_2138B0);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = v10[7];
  v11[6] = v12;
  OUTLINED_FUNCTION_13_8(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_50_6();
  outlined init with copy of AppDisplayInfo?(v21, v16, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v19)
  {
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = (void *)OUTLINED_FUNCTION_17_2();
  v10[9] = v23;
  *uint64_t v23 = v10;
  v23[1] = RunVoiceCommandCATsSimple.confirmSlotValue(device:slotName:slotValue:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_62_2(32);
  OUTLINED_FUNCTION_48_0();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ConfirmSlotValueDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ConfirmSlotValueDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 27503;
  }
  else {
    return 0x6D7269666E6F63;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ConfirmSlotValueDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ConfirmSlotValueDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_70_3();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = v10[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_76_3();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_65_3(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_2138B0);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = v10[7];
  v11[6] = v12;
  OUTLINED_FUNCTION_13_8(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_50_6();
  outlined init with copy of AppDisplayInfo?(v21, v16, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v19)
  {
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = (void *)OUTLINED_FUNCTION_17_2();
  v10[9] = v23;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v23 = v24;
  v23[1] = RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_61_3(32);
  OUTLINED_FUNCTION_48_0();
  return v30(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_38_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_40_11(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_212170);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = *(void *)(v10 + 40);
  v11[6] = v12;
  OUTLINED_FUNCTION_13_8(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  void *v22 = v23;
  v22[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_62_2(37);
  OUTLINED_FUNCTION_48_0();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

BOOL RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t RunVoiceCommandCATsSimple.disambiguateSlotValueAsLabels(device:slotName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.disambiguateSlotValueAsLabels(device:slotName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_38_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_40_11(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_212170);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = *(void *)(v10 + 40);
  v11[6] = v12;
  OUTLINED_FUNCTION_13_8(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_58_6(v21);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds();
  OUTLINED_FUNCTION_44();
  v11[12] = v22;
  v11[13] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_61_3(37);
  OUTLINED_FUNCTION_48_0();
  return v28(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeCustomError(device:customDialog:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeCustomError(device:customDialog:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_76_3();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_2138B0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  OUTLINED_FUNCTION_41_11(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_82_2();
  v13[16] = v12;
  v13[17] = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v10 + 72) = v24;
  *uint64_t v24 = v10;
  v24[1] = RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:);
  OUTLINED_FUNCTION_48_0();
  return v28(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6C70784568746977;
  }
  else {
    return 0x6E616C7078456F6ELL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeCustomErrorDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeCustomErrorAsLabels(device:customDialog:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeCustomErrorAsLabels(device:customDialog:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_76_3();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_2138B0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  OUTLINED_FUNCTION_41_11(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_82_2();
  v13[16] = v12;
  v13[17] = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v10 + 72) = v24;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v24 = v25;
  v24[1] = RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_48_0();
  return v31(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodePreflightRequired(localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodePreflightRequired(localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_85_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_50_0();
  *(void *)(v11 + 40) = v14;
  *(_OWORD *)(v14 + 16) = xmmword_212160;
  *(void *)(v14 + 32) = v13;
  *(void *)(v14 + 40) = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v10, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v15);
  if (v16)
  {
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    *(void *)(v14 + 72) = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v14 + 48));
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v17 + 32))();
  }
  uint64_t v18 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v11 + 48) = v18;
  *uint64_t v18 = v11;
  v18[1] = RunVoiceCommandCATsSimple.errorWithCodePreflightRequired(localizedAppName:);
  OUTLINED_FUNCTION_48_0();
  return v22(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
}

BOOL RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds.rawValue.getter()
{
  return 0x7250747065636361;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds(void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodePreflightRequiredAsLabels(localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodePreflightRequiredAsLabels(localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_85_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_50_0();
  *(void *)(v11 + 40) = v14;
  *(_OWORD *)(v14 + 16) = xmmword_212160;
  *(void *)(v14 + 32) = v13;
  *(void *)(v14 + 40) = 0x8000000000226B80;
  outlined init with copy of AppDisplayInfo?(v10, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v15);
  if (v16)
  {
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    *(void *)(v14 + 72) = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v14 + 48));
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v17 + 32))();
  }
  uint64_t v18 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v11 + 48) = v18;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v18 = v19;
  v18[1] = RunVoiceCommandCATsSimple.errorWithCodePreflightRequiredAsLabels(localizedAppName:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_48_0();
  return v25(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeUnsupportedOnCarPlay(device:userAssignedDeviceName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeUnsupportedOnCarPlay(device:userAssignedDeviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_40_11(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_9_29(v16);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_59();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  void *v22 = v23;
  v22[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_18_18(49);
  OUTLINED_FUNCTION_6_1();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeUnsupportedOnCarPlayDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeUnsupportedOnCarPlayDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x656E6F68506E6FLL;
  }
  else {
    return 0x65446D6F74737563;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeUnsupportedOnCarPlayDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::ErrorWithCodeUnsupportedOnCarPlayDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeUnsupportedOnCarPlayAsLabels(device:userAssignedDeviceName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.errorWithCodeUnsupportedOnCarPlayAsLabels(device:userAssignedDeviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_9_29(v17);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_46_10();
  OUTLINED_FUNCTION_6_1();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.followupNotSupported(device:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.followupNotSupported(device:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_40_11(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_9_29(v16);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_59();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  void *v22 = v23;
  v22[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_18_18(36);
  OUTLINED_FUNCTION_6_1();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::FollowupNotSupportedDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v2 >= 4) {
    return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::FollowupNotSupportedDialogIds_optional)4;
  }
  else {
    return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::FollowupNotSupportedDialogIds_optional)v2;
  }
}

uint64_t RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds.rawValue.getter(char a1)
{
  uint64_t result = 0x7070416E69;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7375437070416E69;
      break;
    case 2:
      uint64_t result = 0x7070416E65706FLL;
      break;
    case 3:
      uint64_t result = 0x437070416E65706FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::FollowupNotSupportedDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::FollowupNotSupportedDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunVoiceCommandCATsSimple.followupNotSupportedAsLabels(device:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.followupNotSupportedAsLabels(device:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_9_29(v17);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_46_10();
  OUTLINED_FUNCTION_6_1();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds and conformance RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_77_3(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  v0[8] = OUTLINED_FUNCTION_13_0();
  v0[9] = swift_task_alloc();
  v0[10] = swift_task_alloc();
  v0[11] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t RunVoiceCommandCATsSimple.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = (__n128 *)swift_allocObject();
  *(void *)(v11 + 96) = v15;
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_2138C0);
  if (v14)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v15[3].n128_u64[1] = 0;
    v15[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_53_3(v16);
  v15[5].n128_u64[1] = 0x8000000000226BC0;
  v15[6].n128_u8[0] = v17;
  v15[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v15[8].n128_u64[0] = v13;
  v15[8].n128_u64[1] = 0x8000000000226B80;
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_76_4(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_45_8();
  outlined init with copy of AppDisplayInfo?(v22, v12, &demangling cache variable for type metadata for SpeakableString?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v12, 1, v10);
  uint64_t v24 = *(void *)(v11 + 80);
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v11 + 80), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v15[13].n128_u64[1] = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15[9]);
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_44_8();
  outlined init with copy of AppDisplayInfo?(v26, v24, &demangling cache variable for type metadata for SpeakableString?);
  int v27 = __swift_getEnumTagSinglePayload(v24, 1, v10);
  uint64_t v28 = *(void *)(v11 + 72);
  if (v27 == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v11 + 72), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v15[16].n128_u64[1] = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15[9]);
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v29();
  }
  uint64_t v30 = OUTLINED_FUNCTION_48_7();
  outlined init with copy of AppDisplayInfo?(v30, v28, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v28, 1, v10) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v11 + 64), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v15[19].n128_u64[1] = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15[9]);
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v31();
  }
  OUTLINED_FUNCTION_72_3(*(unsigned char *)(v11 + 121));
  uint64_t v32 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v11 + 104) = v32;
  *uint64_t v32 = v11;
  v32[1] = RunVoiceCommandCATsSimple.intentConfirmationPrompt(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_18_18(v13 + 24);
  OUTLINED_FUNCTION_6_1();
  return v36(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::IntentConfirmationPromptDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_97();
  if (v1 >= 0x17) {
    return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::IntentConfirmationPromptDialogIds_optional)23;
  }
  else {
    return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::IntentConfirmationPromptDialogIds_optional)v1;
  }
}

uint64_t RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter(char a1)
{
  uint64_t result = 1819042147;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E496B63656863;
      break;
    case 2:
      uint64_t result = 0x657461657263;
      break;
    case 3:
      uint64_t result = 0x6441657461657263;
      break;
    case 4:
      uint64_t result = 0x7543657461657263;
      break;
    case 5:
    case 6:
    case 7:
      uint64_t result = 0x64616F6C6E776F64;
      break;
    case 8:
      uint64_t result = 0x6B6361626C6C6166;
      break;
    case 9:
      uint64_t result = 0x726564726FLL;
      break;
    case 10:
      uint64_t result = 0x6F6F42726564726FLL;
      break;
    case 11:
      uint64_t result = 0x797542726564726FLL;
      break;
    case 12:
      uint64_t v3 = 0x43726564726FLL;
      goto LABEL_18;
    case 13:
      uint64_t result = 0x796150726564726FLL;
      break;
    case 14:
      uint64_t result = 0x6964654D79616C70;
      break;
    case 15:
      uint64_t result = 0x74736575716572;
      break;
    case 16:
      uint64_t result = 7628147;
      break;
    case 17:
      uint64_t result = 0x6572616873;
      break;
    case 18:
      uint64_t v3 = 0x436572616873;
LABEL_18:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7375000000000000;
      break;
    case 19:
      uint64_t result = 0x736F506572616873;
      break;
    case 20:
      uint64_t result = 0x6E65536572616873;
      break;
    case 21:
      OUTLINED_FUNCTION_52();
      uint64_t result = 0xD000000000000011;
      break;
    case 22:
      uint64_t result = 0x776F6C666B726F77;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::IntentConfirmationPromptDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::IntentConfirmationPromptDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunVoiceCommandCATsSimple.intentConfirmationPromptAsLabels(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_77_3(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  v0[8] = OUTLINED_FUNCTION_13_0();
  v0[9] = swift_task_alloc();
  v0[10] = swift_task_alloc();
  v0[11] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunVoiceCommandCATsSimple.intentConfirmationPromptAsLabels(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = (__n128 *)swift_allocObject();
  *(void *)(v11 + 96) = v15;
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_2138C0);
  if (v14)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v15[3].n128_u64[1] = 0;
    v15[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_53_3(v16);
  v15[5].n128_u64[1] = 0x8000000000226BC0;
  v15[6].n128_u8[0] = v17;
  v15[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v15[8].n128_u64[0] = v13;
  v15[8].n128_u64[1] = 0x8000000000226B80;
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_76_4(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_45_8();
  outlined init with copy of AppDisplayInfo?(v22, v12, &demangling cache variable for type metadata for SpeakableString?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v12, 1, v10);
  uint64_t v24 = *(void *)(v11 + 80);
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v11 + 80), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v15[13].n128_u64[1] = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15[9]);
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v25();
  }
  uint64_t v26 = OUTLINED_FUNCTION_44_8();
  outlined init with copy of AppDisplayInfo?(v26, v24, &demangling cache variable for type metadata for SpeakableString?);
  int v27 = __swift_getEnumTagSinglePayload(v24, 1, v10);
  uint64_t v28 = *(void *)(v11 + 72);
  if (v27 == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v11 + 72), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v15[16].n128_u64[1] = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15[9]);
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v29();
  }
  uint64_t v30 = OUTLINED_FUNCTION_48_7();
  outlined init with copy of AppDisplayInfo?(v30, v28, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v28, 1, v10) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(*(void *)(v11 + 64), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v15[19].n128_u64[1] = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15[9]);
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v31();
  }
  OUTLINED_FUNCTION_72_3(*(unsigned char *)(v11 + 121));
  uint64_t v32 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v11 + 104) = v32;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v32 = v33;
  v32[1] = RunVoiceCommandCATsSimple.intentConfirmationPromptAsLabels(device:customResponsesEnabled:localizedAppName:customResponse:intentCategory:intentVerb:shouldShowAppAttribution:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_46_10();
  OUTLINED_FUNCTION_6_1();
  return v39(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds and conformance RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.intentHandledResponseDone(device:localizedAppName:intentVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t RunVoiceCommandCATsSimple.intentHandledResponseDone(device:localizedAppName:intentVerb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_76_3();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_65_3(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_2138B0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_60_1(v17);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_49_7();
  outlined init with copy of AppDisplayInfo?(v22, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v20)
  {
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v23();
  }
  uint64_t v24 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v10 + 72) = v24;
  *uint64_t v24 = v10;
  v24[1] = RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:);
  OUTLINED_FUNCTION_18_18(v13 + 25);
  OUTLINED_FUNCTION_6_1();
  return v28(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
}

BOOL RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds.rawValue.getter()
{
  return 0x64656C646E6168;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds(void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.intentHandledResponseDoneAsLabels(device:localizedAppName:intentVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  uint64_t v5 = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = OUTLINED_FUNCTION_57_1(v5);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t RunVoiceCommandCATsSimple.intentHandledResponseDoneAsLabels(device:localizedAppName:intentVerb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_76_3();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_65_3(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_2138B0);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_60_1(v16);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_12_24(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_19_14();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_49_7();
  outlined init with copy of AppDisplayInfo?(v21, v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v19)
  {
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_0_7();
    OUTLINED_FUNCTION_1_7();
    v22();
  }
  uint64_t v23 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v10 + 72) = v23;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v23 = v24;
  v23[1] = RunVoiceCommandCATsSimple.confirmSlotValueAsLabels(device:slotName:slotValue:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_46_10();
  OUTLINED_FUNCTION_6_1();
  return v30(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds and conformance RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.openApp(device:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.openApp(device:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_40_11(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_9_29(v16);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_59();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  void *v22 = v23;
  v22[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_18_18(23);
  OUTLINED_FUNCTION_6_1();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

BOOL RunVoiceCommandCATsSimple.OpenAppDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.OpenAppDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.OpenAppDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunVoiceCommandCATsSimple.OpenAppDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.OpenAppDialogIds(void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.openAppAsLabels(device:localizedAppName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.openAppAsLabels(device:localizedAppName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_9_29(v17);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_46_10();
  OUTLINED_FUNCTION_6_1();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.openAppFailed(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunVoiceCommandCATsSimple.openAppFailed(device:));
}

uint64_t RunVoiceCommandCATsSimple.openAppFailed(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v11 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v7;
  void *v7 = v0;
  v7[1] = RunVoiceCommandCATsSimple.openAppFailed(device:);
  OUTLINED_FUNCTION_20_10();
  unint64_t v8 = OUTLINED_FUNCTION_80_2(29);
  return v9(v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

BOOL RunVoiceCommandCATsSimple.OpenAppFailedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.OpenAppFailedDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunVoiceCommandCATsSimple.OpenAppFailedDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds(void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:));
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v7;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds();
  OUTLINED_FUNCTION_44();
  void *v7 = v8;
  v7[1] = RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:);
  OUTLINED_FUNCTION_52();
  unint64_t v9 = OUTLINED_FUNCTION_81_2(29);
  return v10(v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedCarPlay(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunVoiceCommandCATsSimple.openAppFailedCarPlay(device:));
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedCarPlay(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v11 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v7;
  void *v7 = v0;
  v7[1] = RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:);
  unint64_t v8 = OUTLINED_FUNCTION_80_2(36);
  return v9(v8);
}

BOOL RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedCarPlayAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunVoiceCommandCATsSimple.openAppFailedCarPlayAsLabels(device:));
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedCarPlayAsLabels(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v7;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds();
  OUTLINED_FUNCTION_44();
  void *v7 = v8;
  v7[1] = RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:);
  OUTLINED_FUNCTION_52();
  unint64_t v9 = OUTLINED_FUNCTION_81_2(36);
  return v10(v9);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedWatch(device:userAssignedDeviceName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedWatch(device:userAssignedDeviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_40_11(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_9_29(v16);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_59();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  void *v22 = v23;
  v22[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_18_18(34);
  OUTLINED_FUNCTION_6_1();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::OpenAppFailedWatchDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::OpenAppFailedWatchDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x64656C696166;
  }
  else {
    return 0x65446D6F74737563;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::OpenAppFailedWatchDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::OpenAppFailedWatchDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedWatchAsLabels(device:userAssignedDeviceName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.openAppFailedWatchAsLabels(device:userAssignedDeviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_9_29(v17);
  OUTLINED_FUNCTION_24_5();
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_46_10();
  OUTLINED_FUNCTION_6_1();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds and conformance RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.promptForSlotValue(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunVoiceCommandCATsSimple.promptForSlotValue(device:));
}

uint64_t RunVoiceCommandCATsSimple.promptForSlotValue(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v11 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v7;
  void *v7 = v0;
  v7[1] = RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:);
  OUTLINED_FUNCTION_20_10();
  unint64_t v8 = OUTLINED_FUNCTION_80_2(34);
  return v9(v8);
}

BOOL RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds.rawValue.getter()
{
  return 0x74706D6F7270;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds(void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.promptForSlotValueAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RunVoiceCommandCATsSimple.promptForSlotValueAsLabels(device:));
}

uint64_t RunVoiceCommandCATsSimple.promptForSlotValueAsLabels(device:)()
{
  OUTLINED_FUNCTION_75_2();
  uint64_t v12 = v2;
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_50_0();
  uint64_t v5 = (__n128 *)OUTLINED_FUNCTION_69_3(v4);
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_212160);
  if (v3)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_58_5(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v7;
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds();
  OUTLINED_FUNCTION_44();
  void *v7 = v8;
  v7[1] = RunVoiceCommandCATsSimple.openAppFailedAsLabels(device:);
  OUTLINED_FUNCTION_52();
  unint64_t v9 = OUTLINED_FUNCTION_81_2(34);
  return v10(v9);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.unsupportedSlotValue(device:slotName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.unsupportedSlotValue(device:slotName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_38_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_40_11(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_212170);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = *(void *)(v10 + 40);
  v11[6] = v12;
  OUTLINED_FUNCTION_13_8(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  void *v22 = v23;
  v22[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_62_2(36);
  OUTLINED_FUNCTION_48_0();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

BOOL RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds.rawValue.getter()
{
  return 0x726F707075736E75;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds(void *a1@<X8>)
{
}

uint64_t RunVoiceCommandCATsSimple.unsupportedSlotValueAsLabels(device:slotName:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.unsupportedSlotValueAsLabels(device:slotName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_38_2();
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_40_11(v13);
  uint64_t v15 = OUTLINED_FUNCTION_1_2(v14, (__n128)xmmword_212170);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  uint64_t v16 = *(void *)(v10 + 40);
  v11[6] = v12;
  OUTLINED_FUNCTION_13_8(v15);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_58_6(v21);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds();
  OUTLINED_FUNCTION_44();
  v11[12] = v22;
  v11[13] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_61_3(36);
  OUTLINED_FUNCTION_48_0();
  return v28(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds and conformance RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.yesAndCancel(device:intentVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

uint64_t RunVoiceCommandCATsSimple.yesAndCancel(device:intentVerb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = *(void *)(v10 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = OUTLINED_FUNCTION_38_2();
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_40_11(v14);
  uint64_t v16 = OUTLINED_FUNCTION_1_2(v15, (__n128)xmmword_212170);
  if (v13)
  {
    uint64_t v16 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  OUTLINED_FUNCTION_42_10(v16);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v18);
  if (v19)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v20();
    swift_retain();
  }
  uint64_t v21 = OUTLINED_FUNCTION_17_2();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_64_0(v21);
  void *v22 = v23;
  v22[1] = RunVoiceCommandCATsSimple.yesAndCancel(device:intentVerb:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_62_2(28);
  OUTLINED_FUNCTION_48_0();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::YesAndCancelDialogIds_optional __swiftcall RunVoiceCommandCATsSimple.YesAndCancelDialogIds.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunVoiceCommandCATsSimple.YesAndCancelDialogIds.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v2 >= 3) {
    return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::YesAndCancelDialogIds_optional)3;
  }
  else {
    return (SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::YesAndCancelDialogIds_optional)v2;
  }
}

uint64_t RunVoiceCommandCATsSimple.YesAndCancelDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6C65636E6163;
  }
  if (a1 == 1) {
    return 28526;
  }
  return 7562617;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::YesAndCancelDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunVoiceCommandCATsSimple::YesAndCancelDialogIds_optional *a2@<X8>)
{
  result.value = RunVoiceCommandCATsSimple.YesAndCancelDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = RunVoiceCommandCATsSimple.YesAndCancelDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t RunVoiceCommandCATsSimple.yesAndCancelAsLabels(device:intentVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t RunVoiceCommandCATsSimple.yesAndCancelAsLabels(device:intentVerb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = *(void *)(v11 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_38_2();
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_40_11(v15);
  uint64_t v17 = OUTLINED_FUNCTION_1_2(v16, (__n128)xmmword_212170);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  OUTLINED_FUNCTION_42_10(v17);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v18);
  uint64_t v19 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v19);
  if (v20)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_9_7();
    v21();
    swift_retain();
  }
  uint64_t v22 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_58_6(v22);
  lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v10 = v23;
  v10[1] = RunVoiceCommandCATsSimple.disambiguateSlotValue(device:slotName:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_61_3(28);
  OUTLINED_FUNCTION_48_0();
  return v29(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.YesAndCancelDialogIds and conformance RunVoiceCommandCATsSimple.YesAndCancelDialogIds);
  }
  return result;
}

uint64_t RunVoiceCommandCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return RunVoiceCommandCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t RunVoiceCommandCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_16(v10);
  __chkstk_darwin(v11);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t RunVoiceCommandCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_56();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v1;
}

uint64_t RunVoiceCommandCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_56();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type RunVoiceCommandCATsSimple.Properties and conformance RunVoiceCommandCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.Properties and conformance RunVoiceCommandCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.Properties and conformance RunVoiceCommandCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunVoiceCommandCATsSimple.Properties and conformance RunVoiceCommandCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for RunVoiceCommandCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for RunVoiceCommandCATsSimple;
  if (!type metadata singleton initialization cache for RunVoiceCommandCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RunVoiceCommandCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for RunVoiceCommandCATsSimple()
{
  return type metadata accessor for RunVoiceCommandCATsSimple();
}

uint64_t getEnumTagSinglePayload for RunVoiceCommandCATsSimple.Properties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF2)
  {
    if (a2 + 14 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 14) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 15;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v5 = v6 - 15;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xFEBE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.Properties()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.ErrorWithCodeCustomErrorDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.ErrorWithCodePreflightRequiredDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.ErrorWithCodeUnsupportedOnCarPlayDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xFED28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.FollowupNotSupportedDialogIds()
{
}

uint64_t getEnumTagSinglePayload for RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEA)
  {
    if (a2 + 22 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 22) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 23;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x17;
  int v5 = v6 - 23;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 22 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 22) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE9)
  {
    unsigned int v6 = ((a2 - 234) >> 8) + 1;
    *uint64_t result = a2 + 22;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xFEEB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 22;
        break;
    }
  }
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.IntentHandledResponseDoneDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.OpenAppDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.OpenAppFailedDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.OpenAppFailedCarPlayDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.ConfirmSlotValueDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xFEFE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.OpenAppFailedWatchDialogIds()
{
}

void type metadata accessor for RunVoiceCommandCATsSimple.PromptForSlotValueDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.DisambiguateSlotValueDialogIds(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0xFF0BCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.UnsupportedSlotValueDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for RunVoiceCommandCATsSimple.YesAndCancelDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xFF1BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for RunVoiceCommandCATsSimple.YesAndCancelDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_2_23(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_9_29(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = v3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_24(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_18_18@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_21_17()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_40_11(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_41_11(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "customDialog");
  *(unsigned char *)(v2 + 93) = 0;
  *(_WORD *)(v2 + 94) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_42_10(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x6556746E65746E69;
  v2[11] = 0xEA00000000006272;
  return result;
}

uint64_t OUTLINED_FUNCTION_44_8()
{
  uint64_t result = *(void *)(v0 + 40);
  strcpy((char *)(v1 + 224), "intentCategory");
  *(unsigned char *)(v1 + 239) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_45_8()
{
  uint64_t result = *(void *)(v0 + 32);
  strcpy((char *)(v1 + 176), "customResponse");
  *(unsigned char *)(v1 + 191) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_48_7()
{
  uint64_t result = *(void *)(v0 + 48);
  *(void *)(v1 + 272) = 0x6556746E65746E69;
  *(void *)(v1 + 280) = 0xEA00000000006272;
  return result;
}

uint64_t OUTLINED_FUNCTION_49_7()
{
  uint64_t result = *(void *)(v0 + 32);
  *(void *)(v1 + 128) = 0x6556746E65746E69;
  *(void *)(v1 + 136) = 0xEA00000000006272;
  return result;
}

uint64_t OUTLINED_FUNCTION_50_6()
{
  uint64_t result = *(void *)(v0 + 32);
  *(void *)(v1 + 128) = 0x756C6156746F6C73;
  *(void *)(v1 + 136) = 0xE900000000000065;
  return result;
}

uint64_t OUTLINED_FUNCTION_53_3(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0xD000000000000016;
  return result;
}

uint64_t OUTLINED_FUNCTION_58_6(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_60_1(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0xD000000000000010;
  return result;
}

unint64_t OUTLINED_FUNCTION_61_3(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

unint64_t OUTLINED_FUNCTION_62_2(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_64_2()
{
  return 0x64656C696166;
}

uint64_t OUTLINED_FUNCTION_65_3(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_69_3(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_70_3()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_72_3(char a1@<W8>)
{
  *(void *)(v3 + 320) = v4 + 8;
  *(void *)(v3 + 328) = (v1 - 32) | 0x8000000000000000;
  *(void *)(v3 + 360) = v2;
  *(unsigned char *)(v3 + 336) = a1;
}

uint64_t OUTLINED_FUNCTION_76_4(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_77_3(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v8 + 121) = a7;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 56) = v7;
  *(void *)(v8 + 32) = a4;
  *(void *)(v8 + 40) = a5;
  *(unsigned char *)(v8 + 120) = a2;
  *(void *)(v8 + 16) = result;
  *(void *)(v8 + 24) = a3;
  return result;
}

unint64_t OUTLINED_FUNCTION_80_2(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

unint64_t OUTLINED_FUNCTION_81_2(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_82_2()
{
  return *(void *)(v0 + 32);
}

uint64_t AppShortcutGeneralizedInvocation.action.getter()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_2_3((uint64_t)AppShortcutGeneralizedInvocation.action.getter);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  unsigned int v6 = v1[1];
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  unint64_t v9 = v1[4];
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 32) + **(int **)(v3 + 32));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v10;
  *uint64_t v10 = v0;
  v10[1] = AppShortcutGeneralizedInvocation.action.getter;
  return v12(v4, v5, v6, v7, v8, v9, v2, v3);
}

uint64_t AppShortcutGeneralizedInvocation.action.getter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  if (!v1) {
    uint64_t v6 = a1;
  }
  return v7(v6);
}

uint64_t AppShortcutGeneralizedInvocation.init(bundleIdentifier:appShortcutIdentifier:parameterIdentifier:provider:preferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, long long *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  a9[5] = a1;
  a9[6] = a2;
  a9[3] = a5;
  a9[4] = a6;
  a9[1] = a3;
  a9[2] = a4;
  *a9 = a8;
  return outlined init with take of AceServiceInvokerAsync(a7, (uint64_t)(a9 + 7));
}

id AppShortcutGeneralizedInvocation.preferences.getter()
{
  return *v0;
}

void AppShortcutGeneralizedInvocation.preferences.setter(void *a1)
{
  id *v1 = a1;
}

uint64_t AppShortcutGeneralizedInvocation.appShortcutIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppShortcutGeneralizedInvocation.provider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeviceState(v1 + 56, a1);
}

uint64_t AppShortcutGeneralizedInvocation.ExtractionError.description.getter(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t result = 0x6C616E7265746E49;
  switch(a3)
  {
    case 1:
      OUTLINED_FUNCTION_5_23();
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD00000000000001ALL;
      goto LABEL_4;
    case 2:
      OUTLINED_FUNCTION_5_23();
      _StringGuts.grow(_:)(59);
      v9._object = (void *)0x8000000000229020;
      v9._uint64_t countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v9);
      v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = 0xD000000000000026;
      v11._object = (void *)0x8000000000229040;
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      uint64_t v7 = 41;
      unint64_t v8 = 0xE100000000000000;
      goto LABEL_6;
    case 3:
      return result;
    default:
      OUTLINED_FUNCTION_5_23();
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD000000000000023;
LABEL_4:
      unint64_t v13 = v6;
      uint64_t v7 = a1;
      unint64_t v8 = a2;
LABEL_6:
      String.append(_:)(*(Swift::String *)&v7);
      return v13;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AppShortcutGeneralizedInvocation.ExtractionError()
{
  return AppShortcutGeneralizedInvocation.ExtractionError.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t AppShortcutGeneralizedInvocation.autoShortcuts.getter()
{
  *(void *)(v1 + 32) = v0;
  return OUTLINED_FUNCTION_2_3((uint64_t)AppShortcutGeneralizedInvocation.autoShortcuts.getter);
}

{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t (*v17)(void *);
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  uint64_t v1 = [**(id **)(v0 + 32) languageCode];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void **)(v0 + 32);
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    *(void *)(v0 + 40) = v6;
    uint64_t v7 = v3[10];
    unint64_t v8 = v3[11];
    __swift_project_boxed_opaque_existential_1(v3 + 7, v7);
    Swift::String v9 = v3[5];
    Swift::String v10 = v3[6];
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 8)
                                                                                       + **(int **)(v8 + 8));
    Swift::String v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v11;
    *Swift::String v11 = v0;
    v11[1] = AppShortcutGeneralizedInvocation.autoShortcuts.getter;
    return v18(v9, v10, v4, v6, v7, v8);
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    unint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v14 = Logger.logObject.getter();
    uint64_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#AppShortcutGeneralizedInvocation cannot get Siri language", v16, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_15_3();
    return v17(_swiftEmptyArrayStorage);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 64) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    unint64_t v8 = AppShortcutGeneralizedInvocation.autoShortcuts.getter;
  }
  else {
    unint64_t v8 = AppShortcutGeneralizedInvocation.autoShortcuts.getter;
  }
  return _swift_task_switch(v8, 0, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t result;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v1 = v0[7];
  v0[2] = v1;
  uint64_t v2 = v0[4];
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  }
  unint64_t v6 = v0[8];
  uint64_t v7 = static AppShortcutGeneralizedInvocation.extractRank(from:maxRank:)(v3, v4, v5);
  if (v6)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    unint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain();
    swift_errorRetain();
    Swift::String v9 = Logger.logObject.getter();
    Swift::String v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      Swift::String v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v11 = 138412290;
      swift_errorRetain();
      Swift::String v12 = _swift_stdlib_bridgeErrorToNSError();
      v0[3] = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v17 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v9, v10, "#AppShortcutGeneralizedInvocation could not prepare App Shortcuts list. Error: %@", v11, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRelease();
  }
  else
  {
    unint64_t v13 = specialized Array.remove(at:)(v7);
    if (v0[2] >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v16 < 0)
      {
        __break(1u);
        return result;
      }
    }
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v13);
  }
  OUTLINED_FUNCTION_15_3();
  return v14();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void *);
  uint64_t v9;

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    unint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "#AppShortcutGeneralizedInvocation could not prepare App Shortcuts list. Error: %@", v4, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  OUTLINED_FUNCTION_15_3();
  return v7(_swiftEmptyArrayStorage);
}

uint64_t static AppShortcutGeneralizedInvocation.extractRank(from:maxRank:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v8 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  if (*(void *)(v8 + 16) < 2uLL)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError();
    swift_allocError();
    *(void *)uint64_t v9 = a1;
    *(void *)(v9 + 8) = a2;
    *(unsigned char *)(v9 + 16) = 0;
LABEL_15:
    swift_bridgeObjectRetain();
    goto LABEL_16;
  }
  uint64_t v10 = specialized BidirectionalCollection.last.getter(v8);
  unint64_t v12 = v11;
  unint64_t v14 = v13;
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  if (!v16)
  {
    lazy protocol witness table accessor for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError();
    swift_allocError();
    *(void *)uint64_t v20 = 0;
    *(void *)(v20 + 8) = 0;
    char v21 = 3;
    goto LABEL_12;
  }
  if (!((v10 ^ v12) >> 14))
  {
    swift_bridgeObjectRelease();
LABEL_14:
    lazy protocol witness table accessor for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError();
    swift_allocError();
    *(void *)uint64_t v22 = a1;
    *(void *)(v22 + 8) = a2;
    *(unsigned char *)(v22 + 16) = 1;
    goto LABEL_15;
  }
  uint64_t v24 = a3;
  uint64_t v17 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v10, v12, v14, v16, 10);
  if ((v18 & 0x100) != 0) {
    uint64_t v17 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v10, v12, v14, v16, 10);
  }
  uint64_t v4 = v17;
  char v19 = v18;
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_14;
  }
  if (v4 < 0 || v4 >= v24)
  {
    lazy protocol witness table accessor for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError();
    swift_allocError();
    *(void *)uint64_t v20 = v4;
    *(void *)(v20 + 8) = v24;
    char v21 = 2;
LABEL_12:
    *(unsigned char *)(v20 + 16) = v21;
LABEL_16:
    swift_willThrow();
  }
  return v4;
}

uint64_t protocol witness for AppShortcutInvoking.action.getter in conformance AppShortcutGeneralizedInvocation()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for AppShortcutInvoking.action.getter in conformance AppShortcutGeneralizedInvocation;
  return AppShortcutGeneralizedInvocation.action.getter();
}

uint64_t protocol witness for AppShortcutInvoking.action.getter in conformance AppShortcutGeneralizedInvocation(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  if (!v1) {
    uint64_t v6 = a1;
  }
  return v7(v6);
}

uint64_t protocol witness for AppShortcutInvoking.autoShortcuts.getter in conformance AppShortcutGeneralizedInvocation()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for AppShortcutInvoking.autoShortcuts.getter in conformance AppShortcutGeneralizedInvocation;
  return AppShortcutGeneralizedInvocation.autoShortcuts.getter();
}

uint64_t protocol witness for AppShortcutInvoking.autoShortcuts.getter in conformance AppShortcutGeneralizedInvocation(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  return v5(a1);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  long long v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    OUTLINED_FUNCTION_4_25(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = String.UTF8View._foreignIndex(_:offsetBy:)();
    OUTLINED_FUNCTION_4_25(v3);
    return v4 | 8;
  }
}

uint64_t destroy for AppShortcutGeneralizedInvocation(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 7));
}

uint64_t initializeWithCopy for AppShortcutGeneralizedInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = a1 + 56;
  uint64_t v8 = a2 + 56;
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v9;
  uint64_t v10 = v9;
  unint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  id v12 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v7, v8, v10);
  return a1;
}

uint64_t assignWithCopy for AppShortcutGeneralizedInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for AppShortcutGeneralizedInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutGeneralizedInvocation(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutGeneralizedInvocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutGeneralizedInvocation()
{
  return &type metadata for AppShortcutGeneralizedInvocation;
}

uint64_t outlined copy of AppShortcutGeneralizedInvocation.ExtractionError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for AppShortcutGeneralizedInvocation.ExtractionError(uint64_t a1)
{
  return outlined consume of AppShortcutGeneralizedInvocation.ExtractionError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of AppShortcutGeneralizedInvocation.ExtractionError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AppShortcutGeneralizedInvocation.ExtractionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AppShortcutGeneralizedInvocation.ExtractionError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AppShortcutGeneralizedInvocation.ExtractionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AppShortcutGeneralizedInvocation.ExtractionError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of AppShortcutGeneralizedInvocation.ExtractionError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AppShortcutGeneralizedInvocation.ExtractionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of AppShortcutGeneralizedInvocation.ExtractionError(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AppShortcutGeneralizedInvocation.ExtractionError()
{
  return &type metadata for AppShortcutGeneralizedInvocation.ExtractionError;
}

unint64_t lazy protocol witness table accessor for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError()
{
  unint64_t result = lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError;
  if (!lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation.ExtractionError and conformance AppShortcutGeneralizedInvocation.ExtractionError);
  }
  return result;
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    long long v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = static String._copying(_:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    long long v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    long long v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v13 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }
        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          char v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }
              else
              {
                char v21 = -55;
              }
            }
            else
            {
              char v21 = -48;
            }
            uint64_t v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21))) {
              return 0;
            }
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }
        if (result)
        {
          uint64_t v26 = 0;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }
              else
              {
                char v28 = -55;
              }
            }
            else
            {
              char v28 = -48;
            }
            uint64_t v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
              return 0;
            }
            uint64_t v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28))) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          for (i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            uint64_t v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12))) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = specialized Collection.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Collection.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0),
          unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4), swift_bridgeObjectRetain(), swift_bridgeObjectRelease(), v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t specialized Collection.count.getter(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    long long v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v15;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_n((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v16 = v14 & 1;
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_n(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v12 = result;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4 << v13;
  uint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4 << v13)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a5, a6);
    unint64_t v16 = result;
  }
  uint64_t v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    unint64_t v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v19 = HIBYTE(a6) & 0xF;
    }
    if (v19 < v16 >> 16) {
      goto LABEL_96;
    }
    uint64_t result = String.UTF8View._foreignDistance(from:to:)();
    uint64_t v18 = result;
    uint64_t v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    uint64_t v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    uint64_t v20 = v17;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a5, a6);
    uint64_t v17 = v20;
    unint64_t v11 = result;
  }
  if ((a4 & 0xC) == v14)
  {
    uint64_t v21 = a4;
    uint64_t v22 = v17;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v21, a5, a6);
    uint64_t v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    uint64_t result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0) {
    unint64_t v23 = v17;
  }
  if (v23 < v11 >> 16) {
    goto LABEL_92;
  }
  if (v23 < a4 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_22:
  uint64_t v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v24 < v18)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  unsigned __int8 v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12) {
    unsigned __int8 v25 = 0;
  }
  int v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v37 = a7 + 48;
        unsigned __int8 v38 = a7 + 55;
        unsigned __int8 v39 = a7 + 87;
        if (a7 > 10)
        {
          unsigned __int8 v37 = 58;
        }
        else
        {
          unsigned __int8 v39 = 97;
          unsigned __int8 v38 = 65;
        }
        if (v25)
        {
          uint64_t v30 = 0;
          uint64_t v40 = v25 + 1;
          uint64_t v41 = result - 1;
          do
          {
            unsigned int v42 = *v40;
            if (v42 < 0x30 || v42 >= v37)
            {
              if (v42 < 0x41 || v42 >= v38)
              {
                uint64_t v35 = 0;
                if (v42 < 0x61 || v42 >= v39) {
                  return v35;
                }
                char v43 = -87;
              }
              else
              {
                char v43 = -55;
              }
            }
            else
            {
              char v43 = -48;
            }
            uint64_t v44 = v30 * a7;
            if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63) {
              return 0;
            }
            uint64_t v30 = v44 + (v42 + v43);
            if (__OFADD__(v44, (v42 + v43))) {
              return 0;
            }
            ++v40;
            --v41;
          }
          while (v41);
          return v30;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v26 != 45)
  {
    if (v24 != v18)
    {
      unsigned __int8 v45 = a7 + 48;
      unsigned __int8 v46 = a7 + 55;
      unsigned __int8 v47 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v45 = 58;
      }
      else
      {
        unsigned __int8 v47 = 97;
        unsigned __int8 v46 = 65;
      }
      if (v25)
      {
        uint64_t v48 = 0;
        do
        {
          unsigned int v49 = *v25;
          if (v49 < 0x30 || v49 >= v45)
          {
            if (v49 < 0x41 || v49 >= v46)
            {
              uint64_t v35 = 0;
              if (v49 < 0x61 || v49 >= v47) {
                return v35;
              }
              char v50 = -87;
            }
            else
            {
              char v50 = -55;
            }
          }
          else
          {
            char v50 = -48;
          }
          uint64_t v51 = v48 * a7;
          if ((unsigned __int128)(v48 * (__int128)a7) >> 64 != (v48 * a7) >> 63) {
            return 0;
          }
          uint64_t v48 = v51 + (v49 + v50);
          if (__OFADD__(v51, (v49 + v50))) {
            return 0;
          }
          ++v25;
          --result;
        }
        while (result);
        return v51 + (v49 + v50);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v27 = a7 + 48;
      unsigned __int8 v28 = a7 + 55;
      unsigned __int8 v29 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v27 = 58;
      }
      else
      {
        unsigned __int8 v29 = 97;
        unsigned __int8 v28 = 65;
      }
      if (v25)
      {
        uint64_t v30 = 0;
        uint64_t v31 = v25 + 1;
        uint64_t v32 = result - 1;
        while (1)
        {
          unsigned int v33 = *v31;
          if (v33 < 0x30 || v33 >= v27)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              uint64_t v35 = 0;
              if (v33 < 0x61 || v33 >= v29) {
                return v35;
              }
              char v34 = -87;
            }
            else
            {
              char v34 = -55;
            }
          }
          else
          {
            char v34 = -48;
          }
          uint64_t v36 = v30 * a7;
          if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63) {
            return 0;
          }
          uint64_t v30 = v36 - (v33 + v34);
          if (__OFSUB__(v36, (v33 + v34))) {
            return 0;
          }
          ++v31;
          if (!--v32) {
            return v30;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

unint64_t OUTLINED_FUNCTION_4_25(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

#error "101AB8: call analysis failed (funcsize=15)"

uint64_t LinkRCHFlow.exitValue.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  OUTLINED_FUNCTION_84_1();
  swift_retain_n();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    v23[0] = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v5 = 136315138;
    OUTLINED_FUNCTION_40_2();
    outlined init with copy of LinkRCHFlow.State((uint64_t *)(v1 + 48), (uint64_t)&v16);
    uint64_t v6 = String.init<A>(describing:)();
    id v16 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, v4, "Exiting LinkRCHFlow... currentState: %s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v8 = (uint64_t *)(v1 + 48);
  OUTLINED_FUNCTION_40_2();
  outlined init with copy of LinkRCHFlow.State(v8, (uint64_t)&v16);
  uint64_t result = (uint64_t)v16;
  switch(v22)
  {
    case 4:
    case 6:

      swift_bridgeObjectRelease();
      unint64_t v10 = v18;
      goto LABEL_10;
    case 5:
    case 7:

      unint64_t v10 = &v17;
LABEL_10:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
      goto LABEL_15;
    case 8:
    case 10:
    case 11:
      return result;
    case 9:
      swift_errorRelease();
      goto LABEL_15;
    case 12:
      unint64_t v11 = v18[1] | v18[0] | v17;
      if (!(v20 | v21 | (unint64_t)v16 | v19 | v11) || v16 == (char *)&dword_0 + 1 && !(v20 | v21 | v19 | v11)) {
        goto LABEL_15;
      }
      uint64_t result = 0;
      break;
    default:
      outlined destroy of LinkRCHFlow.State((uint64_t)&v16);
LABEL_15:
      id v16 = 0;
      unint64_t v17 = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      id v14 = v16;
      unint64_t v15 = v17;
      v12._object = (void *)0x80000000002290C0;
      v12._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
      String.append(_:)(v12);
      outlined init with copy of LinkRCHFlow.State(v8, (uint64_t)&v16);
      _print_unlocked<A, B>(_:_:)();
      outlined destroy of LinkRCHFlow.State((uint64_t)&v16);
      lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
      uint64_t result = OUTLINED_FUNCTION_9_6();
      *uint64_t v13 = v14;
      v13[1] = v15;
      break;
  }
  return result;
}

#error "101E4C: call analysis failed (funcsize=15)"

void LinkRCHFlow.__allocating_init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void (*a24)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  OUTLINED_FUNCTION_36();
  uint64_t v46 = v25;
  uint64_t v47 = v26;
  unsigned int v45 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v38 = *(void *)(v36 + 24);
  uint64_t v37 = *(void *)(v36 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v36, v38);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v39);
  OUTLINED_FUNCTION_20_0();
  uint64_t v42 = v41 - v40;
  (*(void (**)(uint64_t))(v43 + 16))(v41 - v40);
  a24(v35, v33, v31, v29, v45, v42, v46, v47, a21, a22, a23, v24, v38, v37);
  uint64_t v44 = OUTLINED_FUNCTION_84_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v44);
  OUTLINED_FUNCTION_27_1();
}

uint64_t LinkRCHFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t LinkRCHFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[109] = v0;
  v1[108] = v2;
  type metadata accessor for CATOption();
  v1[110] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  os_log_type_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v35;
  void *v36;
  os_log_type_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _WORD *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_type_t v70;
  _WORD *v71;
  uint64_t v72;
  void *v73;
  os_log_type_t v74;
  _WORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  os_log_type_t v88;
  _WORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  long long *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[4];
  uint64_t v107;

  uint64_t v107 = v0;
  uint64_t v101 = v0 + 208;
  uint64_t v102 = (void *)(v0 + 352);
  uint64_t v97 = v0 + 16;
  uint64_t v99 = (long long *)(v0 + 432);
  uint64_t v96 = v0 + 656;
  uint64_t v100 = v0 + 704;
  uint64_t v103 = v0 + 832;
  uint64_t v104 = v0 + 840;
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 872) + 48);
  OUTLINED_FUNCTION_40_2();
  uint64_t v105 = (uint64_t)v1;
  uint64_t v2 = outlined init with copy of LinkRCHFlow.State(v1, v0 + 80);
  unint64_t v10 = *(void *)(v0 + 80);
  switch(*(unsigned char *)(v0 + 136))
  {
    case 1:
      outlined destroy of LinkRCHFlow.State(v0 + 80);
      goto LABEL_43;
    case 2:
      outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 80), v0 + 512);
      *(_OWORD *)(v0 + 776) = 0u;
      *(unsigned char *)(v0 + 792) = -1;
      uint64_t v31 = swift_task_alloc();
      *(void *)(v0 + 896) = v31;
      *(void *)(v31 + 16) = v0 + 776;
      *(void *)(v31 + 24) = v0 + 512;
      uint64_t v32 = (void *)swift_task_alloc();
      *(void *)(v0 + 904) = v32;
      *uint64_t v32 = v0;
      v32[1] = LinkRCHFlow.execute();
      OUTLINED_FUNCTION_23_7();
      return static VoiceCmdsInstrumentations.emitWaitForRequest(type:logMessage:task:updateInfo:)();
    case 3:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      uint64_t v36 = (void *)OUTLINED_FUNCTION_26_1(v35, (uint64_t)static Logger.voiceCommands);
      uint64_t v37 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_32(v37))
      {
        uint64_t v38 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_28_2(v38);
        OUTLINED_FUNCTION_42_0(&dword_0, v39, v40, "execute() called while waiting for child flow to return. Ignoring.");
        OUTLINED_FUNCTION_7_0();
      }

      static ExecuteResponse.ongoing(requireInput:)();
      outlined destroy of LinkRCHFlow.State(v0 + 80);
      goto LABEL_58;
    case 4:
      uint64_t v41 = v0 + 312;
      uint64_t v42 = OUTLINED_FUNCTION_40_12();
      LinkRCHFlow.createNeedsDisambiguationFlow(request:iterator:selectedValues:)(v42, v43, v44, v45, v46, v47, v48, v49, v92, (uint64_t)v93, v94, v96, v97, (uint64_t)v99, v100, v101, (uint64_t)v102, v103, v104,
        v105);
      goto LABEL_25;
    case 5:
      uint64_t v41 = v0 + 272;
      OUTLINED_FUNCTION_65_4();
      LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:)();
      goto LABEL_27;
    case 6:
      uint64_t v41 = v0 + 392;
      OUTLINED_FUNCTION_40_12();
      LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:)();
LABEL_25:

      swift_bridgeObjectRelease();
      goto LABEL_28;
    case 7:
      uint64_t v41 = v0 + 552;
      OUTLINED_FUNCTION_65_4();
      LinkRCHFlow.createNeedsActionConfirmationFlow(request:iterator:)();
LABEL_27:

LABEL_28:
      char v50 = v41;
      goto LABEL_29;
    case 8:
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      __swift_project_value_buffer(v51, (uint64_t)static Logger.voiceCommands);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v52 = Logger.logObject.getter();
      Swift::Int v53 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = (uint8_t *)OUTLINED_FUNCTION_25_2();
        v106[0] = OUTLINED_FUNCTION_22_3();
        *(_DWORD *)uint64_t v54 = 136315138;
        swift_getErrorValue();
        uint64_t v55 = Error.localizedDescription.getter();
        *(void *)(v0 + 800) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v52, v53, "Exiting due to previously handled error %s", v54, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      static InstrumentationUtils.emitLinkFlowFailedInstrumentation(error:)(v10);
      static ExecuteResponse.complete()();
      swift_errorRelease();
      goto LABEL_58;
    case 9:
      uint64_t v57 = *(void *)(v0 + 872);
      static InstrumentationUtils.emitLinkFlowFailedInstrumentation(error:)(*(void *)(v0 + 80));
      OUTLINED_FUNCTION_16_5();
      *(void *)(v0 + 824) = (*(uint64_t (**)(unint64_t))(v58 + 208))(v10);
      uint64_t v59 = OUTLINED_FUNCTION_57_2();
      *(void *)(v59 + 16) = v57;
      *(void *)(v59 + 24) = v10;
      swift_retain();
      swift_errorRetain();
      type metadata accessor for AnyFlow();
      static ExecuteResponse.complete<A>(next:childCompletion:)();
      swift_errorRelease();
      swift_release();
      swift_release();
      goto LABEL_58;
    case 0xA:
      swift_errorRelease();
      goto LABEL_49;
    case 0xB:

      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      id v61 = OUTLINED_FUNCTION_26_1(v60, (uint64_t)static Logger.voiceCommands);
      uint64_t v62 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_5_3(v62)) {
        goto LABEL_48;
      }
      uint64_t v63 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v63);
      uint64_t v64 = "LinkRCHFlow is complete";
      goto LABEL_47;
    case 0xC:
      uint64_t v65 = *(void *)(v0 + 104);
      uint64_t v67 = *(void *)(v0 + 88);
      uint64_t v66 = *(void *)(v0 + 96);
      uint64_t v68 = *(void *)(v0 + 112) | *(void *)(v0 + 120) | *(void *)(v0 + 128);
      if (v68 | v10 | v65 | v66 | v67)
      {
        if (v10 == 1 && !(v68 | v65 | v66 | v67))
        {
LABEL_43:
          if (one-time initialization token for voiceCommands != -1) {
            swift_once();
          }
          uint64_t v69 = type metadata accessor for Logger();
          id v61 = OUTLINED_FUNCTION_26_1(v69, (uint64_t)static Logger.voiceCommands);
          uint64_t v70 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_5_3(v70))
          {
            unint64_t v71 = (_WORD *)OUTLINED_FUNCTION_33();
            OUTLINED_FUNCTION_15_2(v71);
            uint64_t v64 = "Unexpected state .waitingForUnlock in LinkRCHFlow execute()";
LABEL_47:
            _os_log_impl(&dword_0, v61, (os_log_type_t)(v0 + 80), v64, (uint8_t *)(v0 + 144), 2u);
            OUTLINED_FUNCTION_7_0();
          }
LABEL_48:
        }
LABEL_49:
        static ExecuteResponse.complete()();
LABEL_58:
        swift_task_dealloc();
        OUTLINED_FUNCTION_18_0();
        OUTLINED_FUNCTION_23_7();
        __asm { BRAA            X1, X16 }
      }
      static InstrumentationUtils.emitActionExecutionStartedInstrumentation()(v2, v3, v4, v5, v6, v7, v8, v9, v92, v93, v94, v96, v97, (uint64_t)v99, v100, v101, (uint64_t)v102, v103, v104,
        v105,
        v106[0],
        v106[1],
        v106[2],
        v106[3]);
      char v81 = (void *)swift_task_alloc();
      *(void *)(v0 + 888) = v81;
      *char v81 = v0;
      v81[1] = LinkRCHFlow.execute();
      OUTLINED_FUNCTION_23_7();
      return LinkRCHFlow.initializeLinkConnection(connection:)(v82);
    default:
      unint64_t v11 = *(void *)(v0 + 872);
      uint64_t v95 = v0 + 592;
      outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 80), v0 + 592);
      Swift::String v12 = v11 + 208;
      __swift_project_boxed_opaque_existential_1((void *)(v11 + 208), *(void *)(v11 + 232));
      OUTLINED_FUNCTION_84_1();
      if (dispatch thunk of DeviceState.isLockedWithPasscode.getter())
      {
        if ([*(id *)(*(void *)(v0 + 872) + 24) authenticationPolicy]
          || ([*(id *)(*(void *)(v0 + 872) + 16) openAppWhenRun] & 1) != 0)
        {
          if (one-time initialization token for voiceCommands != -1) {
            swift_once();
          }
          uint64_t v13 = type metadata accessor for Logger();
          id v14 = (void *)OUTLINED_FUNCTION_26_1(v13, (uint64_t)static Logger.voiceCommands);
          unint64_t v15 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_5_3(v15))
          {
            id v16 = (_WORD *)OUTLINED_FUNCTION_33();
            OUTLINED_FUNCTION_28_2(v16);
            OUTLINED_FUNCTION_35_12(&dword_0, v17, v18, "#LinkRCHFlow device is locked and the action requires authentication or open app.");
            OUTLINED_FUNCTION_7_0();
          }

          outlined init with copy of DeviceState(v12, v0 + 472);
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          uint64_t v98 = *(void *)(v0 + 872);
          uint64_t v19 = static WFDialogState.shared;
          type metadata accessor for RunCustomIntentCATs();
          OUTLINED_FUNCTION_84_1();
          swift_retain();
          static CATOption.defaultMode.getter();
          uint64_t v20 = CATWrapper.__allocating_init(options:globals:)();
          type metadata accessor for RunCustomIntentCATsSimple();
          static CATOption.defaultMode.getter();
          uint64_t v21 = CATWrapperSimple.__allocating_init(options:globals:)();
          type metadata accessor for RunVoiceCommandCATs();
          static CATOption.defaultMode.getter();
          char v22 = CATWrapper.__allocating_init(options:globals:)();
          type metadata accessor for RunVoiceCommandCATsSimple();
          static CATOption.defaultMode.getter();
          unint64_t v23 = CATWrapperSimple.__allocating_init(options:globals:)();
          type metadata accessor for AppNameResolver();
          uint64_t v24 = swift_allocObject();
          type metadata accessor for CustomIntentsDialogTemplating();
          uint64_t v25 = swift_allocObject();
          uint64_t v26 = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)((long long *)(v0 + 472), v19, 0, 1, v20, v21, v22, v23, v24, v25);
          outlined init with copy of DeviceState(v12, (uint64_t)v99);
          type metadata accessor for ShortcutsUnlockDeviceStrategy();
          unsigned int v27 = swift_allocObject();
          *(void *)(v27 + 16) = v26;
          outlined init with take of AceServiceInvokerAsync(v99, v27 + 24);
          swift_retain();
          uint64_t v28 = ShortcutsUnlockDeviceStrategy.makeShortcutsUnlockDeviceFlow()();
          outlined init with copy of DeviceState(v95, v101);
          *(unsigned char *)(v0 + 264) = 1;
          OUTLINED_FUNCTION_23_6();
          outlined assign with take of LinkRCHFlow.State(v101, v105);
          swift_endAccess();
          outlined init with copy of RunCustomIntentReadingDelegate.Templating?(v98 + 168, (uint64_t)v102, &demangling cache variable for type metadata for SiriWorkflowRunning?);
          uint64_t v29 = *(void *)(v0 + 376);
          if (v29)
          {
            uint64_t v30 = *(void *)(v0 + 384);
            __swift_project_boxed_opaque_existential_1(v102, *(void *)(v0 + 376));
            (*(void (**)(uint64_t, uint64_t))(v30 + 16))(v29, v30);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v102);
          }
          else
          {
            outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)v102, &demangling cache variable for type metadata for SiriWorkflowRunning?);
          }
          uint64_t v84 = *(void *)(v0 + 872);
          *(void *)(v0 + 832) = v28;
          type metadata accessor for GuardFlow();
          *(void *)(v0 + 840) = Flow.eraseToAnyValueFlow()();
          uint64_t v85 = OUTLINED_FUNCTION_57_2();
          *(void *)(v85 + 16) = partial apply for implicit closure #2 in implicit closure #1 in LinkRCHFlow.execute();
          *(void *)(v85 + 24) = v84;
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
          lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>((unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
          static ExecuteResponse.replan<A>(next:childCompletion:)();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          char v50 = v0 + 592;
          goto LABEL_29;
        }
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        char v86 = type metadata accessor for Logger();
        id v87 = (void *)OUTLINED_FUNCTION_26_1(v86, (uint64_t)static Logger.voiceCommands);
        Swift::Int v88 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_5_3(v88))
        {
          uint64_t v89 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_28_2(v89);
          OUTLINED_FUNCTION_35_12(&dword_0, v90, v91, "#LinkRCHFlow action is always allowed to run.");
          OUTLINED_FUNCTION_7_0();
        }

        uint64_t v78 = v0 + 592;
        outlined init with copy of DeviceState(v95, v97);
        *(unsigned char *)(v0 + 72) = 2;
        OUTLINED_FUNCTION_23_6();
        outlined assign with take of LinkRCHFlow.State(v97, v105);
      }
      else
      {
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v72 = type metadata accessor for Logger();
        uint64_t v73 = (void *)OUTLINED_FUNCTION_26_1(v72, (uint64_t)static Logger.voiceCommands);
        BOOL v74 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_5_3(v74))
        {
          uint64_t v75 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_28_2(v75);
          OUTLINED_FUNCTION_35_12(&dword_0, v76, v77, "#LinkRCHFlow device is unlocked. ");
          OUTLINED_FUNCTION_7_0();
        }

        uint64_t v78 = v0 + 592;
        outlined init with copy of DeviceState(v95, v0 + 144);
        *(unsigned char *)(v0 + 200) = 2;
        OUTLINED_FUNCTION_79_3();
        OUTLINED_FUNCTION_23_6();
        outlined assign with take of LinkRCHFlow.State(v0 + 144, v105);
      }
      swift_endAccess();
      static ExecuteResponse.ongoing(requireInput:)();
      char v50 = v78;
LABEL_29:
      __swift_destroy_boxed_opaque_existential_1Tm(v50);
      goto LABEL_58;
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  static ExecuteResponse.ongoing(requireInput:)();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 912) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 792);
  *(unsigned char *)(v0 + 73) = v1;
  if (v1 == 255)
  {
    lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
    OUTLINED_FUNCTION_9_6();
    *uint64_t v9 = 0xD00000000000002BLL;
    v9[1] = 0x8000000000226C30;
    OUTLINED_FUNCTION_16_5();
    (*(void (**)(void))(v10 + 208))();
    swift_errorRelease();
    static ExecuteResponse.complete(next:)();
    swift_release();
    OUTLINED_FUNCTION_62_3();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 512);
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v11();
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 784);
    *(void *)(v0 + 920) = v2;
    uint64_t v3 = *(void *)(v0 + 776);
    *(void *)(v0 + 928) = v3;
    uint64_t v4 = (void *)OUTLINED_FUNCTION_16_12();
    outlined copy of LinkConnectionEvent(v4, v5, v1);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 936) = v6;
    *uint64_t v6 = v0;
    v6[1] = LinkRCHFlow.execute();
    uint64_t v7 = *(void *)(v0 + 864);
    return LinkRCHFlow.responseFrom(event:iterator:)(v7, v3, v2, v1, v0 + 512);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined consume of LinkConnectionEvent?(*(void **)(v0 + 928), *(void *)(v0 + 920), *(unsigned char *)(v0 + 73));
  OUTLINED_FUNCTION_62_3();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 512);
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  void *v14;
  uint64_t v15;

  id v14 = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_62_3();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v13 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[106] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "Handled LinkAction error: %s", v4, 0xCu);
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = v0[114];
  uint64_t v8 = v0[109];
  OUTLINED_FUNCTION_16_5();
  v0[102] = (*(uint64_t (**)(uint64_t))(v9 + 208))(v7);
  unint64_t v10 = OUTLINED_FUNCTION_57_2();
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = v7;
  swift_retain();
  swift_errorRetain();
  type metadata accessor for AnyFlow();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_errorRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 64));
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v11();
}

uint64_t LinkRCHFlow.initializeLinkConnection(connection:)(uint64_t a1)
{
  v2[25] = a1;
  v2[26] = v1;
  v2[27] = *v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>);
  v2[28] = v3;
  v2[29] = *(void *)(v3 - 8);
  v2[30] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v2[31] = v4;
  v2[32] = *(void *)(v4 - 8);
  v2[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v2[34] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ResponseMode();
  v2[35] = v5;
  v2[36] = *(void *)(v5 - 8);
  v2[37] = swift_task_alloc();
  return _swift_task_switch(LinkRCHFlow.initializeLinkConnection(connection:), 0, 0);
}

uint64_t LinkRCHFlow.initializeLinkConnection(connection:)()
{
  uint64_t v35 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = v0[25];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  outlined init with copy of DeviceState(v1, (uint64_t)(v0 + 10));
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[26];
  if (v5)
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    id v8 = [*(id *)(v6 + 16) identifier];
    os_log_type_t type = v4;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2080;
    outlined init with copy of DeviceState((uint64_t)(v0 + 10), (uint64_t)(v0 + 15));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinkConnection);
    uint64_t v12 = String.init<A>(describing:)();
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 10));
    _os_log_impl(&dword_0, v3, type, "Starting action %s against connection %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_release_n();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 10));
  }

  uint64_t v15 = v0[36];
  uint64_t v14 = v0[37];
  uint64_t v16 = v0[34];
  uint64_t v17 = v0[35];
  id v18 = [objc_allocWithZone((Class)LNActionExecutorOptions) init];
  v0[38] = v18;
  outlined bridged method (mbnn) of @objc LNActionExecutorOptions.clientLabel.setter(1769105747, 0xE400000000000000, v18);
  lazy protocol witness table accessor for type LinkRCHFlow and conformance LinkRCHFlow(&lazy protocol witness table cache variable for type LinkRCHFlow and conformance LinkRCHFlow, v19, (void (*)(uint64_t))type metadata accessor for LinkRCHFlow);
  SiriEnvironmentLocating<>.siriEnvironment.getter();
  SiriEnvironment.currentRequest.getter();
  swift_release();
  CurrentRequest.responseMode.getter();
  swift_release();
  uint64_t v20 = ResponseMode.toLinkInteractionMode()();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v17);
  [v18 setInteractionMode:v20];
  [v18 setSource:3];
  static InstrumentationUtils.createFlowUUID()();
  uint64_t v21 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload(v16, 1, v21) == 1)
  {
    outlined destroy of SiriWorkflowRunnerEvent?(v0[34], &demangling cache variable for type metadata for UUID?);
    NSString v22 = 0;
  }
  else
  {
    UUID.uuidString.getter();
    OUTLINED_FUNCTION_66();
    v23();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = v0[32];
  uint64_t v25 = v0[33];
  uint64_t v26 = v0[31];
  uint64_t v27 = v0[26];
  [v18 setClientLabel:v22];

  type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNEnvironment);
  __swift_project_boxed_opaque_existential_1((void *)(v27 + 208), *(void *)(v27 + 232));
  dispatch thunk of DeviceState.siriLocale.getter();
  Locale.identifier.getter();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
  id v28 = LNEnvironment.__allocating_init(localeIdentifier:)();
  [v18 setEnvironment:v28];

  id v29 = [*(id *)(v27 + 24) systemProtocols];
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[39] = v30;

  uint64_t v31 = (void *)swift_task_alloc();
  v0[40] = v31;
  *uint64_t v31 = v0;
  v31[1] = LinkRCHFlow.initializeLinkConnection(connection:);
  return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v27 + 208, v27 + 128, v30);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

void LinkRCHFlow.initializeLinkConnection(connection:)()
{
  uint64_t v1 = *(void **)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 224);
  BOOL v5 = *(void **)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 208);
  uint64_t v7 = v5[3];
  uint64_t v8 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v7);
  (*(void (**)(void, void *, uint64_t, uint64_t))(v8 + 8))(*(void *)(v6 + 16), v1, v7, v8);
  *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Iterator);
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type AsyncThrowingStream<LinkConnectionEvent, Error>.Iterator and conformance AsyncThrowingStream<A, B>.Iterator, &demangling cache variable for type metadata for AsyncThrowingStream<LinkConnectionEvent, Error>.Iterator);
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  AsyncThrowingStream.makeAsyncIterator()();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  *(unsigned char *)(v0 + 72) = 0;
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of LinkRCHFlow.State(v0 + 16, v6 + 48);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_18_2();
  __asm { BRAA            X1, X16 }
}

uint64_t implicit closure #2 in implicit closure #1 in LinkRCHFlow.execute()(char a1)
{
  return LinkRCHFlow.processDeviceUnlockResult(exitValue:)(a1 & 1);
}

uint64_t LinkRCHFlow.processDeviceUnlockResult(exitValue:)(char a1)
{
  uint64_t v3 = v1 + 48;
  swift_beginAccess();
  outlined init with copy of LinkRCHFlow.State((uint64_t *)(v1 + 48), (uint64_t)v10);
  if (v11 == 1)
  {
    outlined init with take of AceServiceInvokerAsync(v10, (uint64_t)v12);
    if (a1)
    {
      lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
      uint64_t v7 = swift_allocError();
      *uint64_t v8 = 0x64656B636F6C6E55;
      v8[1] = 0xEF64656C69616620;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
      *(void *)&v10[0] = v7;
      char v4 = 9;
    }
    else
    {
      outlined init with take of AceServiceInvokerAsync(v12, (uint64_t)v10);
      char v4 = 2;
    }
    char v11 = v4;
    swift_beginAccess();
    outlined assign with take of LinkRCHFlow.State((uint64_t)v10, v3);
  }
  else
  {
    outlined destroy of LinkRCHFlow.State((uint64_t)v10);
    lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = 0xD00000000000001BLL;
    v6[1] = 0x80000000002292D0;
    *(void *)&v10[0] = v5;
    char v11 = 9;
    swift_beginAccess();
    outlined assign with take of LinkRCHFlow.State((uint64_t)v10, v1 + 48);
  }
  return swift_endAccess();
}

uint64_t closure #1 in LinkRCHFlow.execute()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return _swift_task_switch(closure #1 in LinkRCHFlow.execute(), 0, 0);
}

uint64_t closure #1 in LinkRCHFlow.execute()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  char v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  *char v4 = v0;
  v4[1] = closure #1 in LinkRCHFlow.execute();
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, v2, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  char v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  uint64_t v4;
  char v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(unsigned char *)(v0 + 32);
  uint64_t v3 = *(void **)v1;
  char v4 = *(void *)(v1 + 8);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)(v0 + 16);
  uint64_t v5 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(v1 + 16) = v2;
  outlined consume of LinkConnectionEvent?(v3, v4, v5);
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t LinkRCHFlow.responseFrom(event:iterator:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 152) = a5;
  *(void *)(v6 + 160) = v5;
  *(unsigned char *)(v6 + 57) = a4;
  *(void *)(v6 + 136) = a2;
  *(void *)(v6 + 144) = a3;
  *(void *)(v6 + 128) = a1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t LinkRCHFlow.responseFrom(event:iterator:)()
{
  uint64_t v60 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  char v3 = *(unsigned char *)(v0 + 57);
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v0 + 168) = __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
  outlined copy of LinkConnectionEvent(v1, v2, v3);
  outlined copy of LinkConnectionEvent(v1, v2, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  BOOL v7 = OUTLINED_FUNCTION_5_3(v6);
  char v8 = *(unsigned char *)(v0 + 57);
  uint64_t v10 = *(void **)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 144);
  if (v7)
  {
    uint64_t v49 = v0 + 40;
    uint64_t v50 = v0 + 120;
    char v11 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v12 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)char v11 = 136315138;
    uint64_t v51 = v12;
    uint64_t v48 = v11 + 4;
    *(void *)(v0 + 40) = v10;
    *(void *)(v0 + 48) = v9;
    *(unsigned char *)(v0 + 56) = v8;
    outlined copy of LinkConnectionEvent(v10, v9, v8);
    uint64_t v13 = String.init<A>(describing:)();
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_63_3();
    _os_log_impl(&dword_0, v5, (os_log_type_t)v1, "#LinkRCHFlow recieved LinkConnectionEvent: %s", v11, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_63_3();
  }

  switch(*(unsigned char *)(v0 + 57))
  {
    case 1:
      OUTLINED_FUNCTION_9_30();
      OUTLINED_FUNCTION_16_20();
      OUTLINED_FUNCTION_55_5();
      LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:)();
      uint64_t v15 = (void *)OUTLINED_FUNCTION_16_12();
      char v17 = 1;
      break;
    case 2:
      OUTLINED_FUNCTION_9_30();
      OUTLINED_FUNCTION_16_20();
      uint64_t v18 = OUTLINED_FUNCTION_77_4();
      LinkRCHFlow.createNeedsDisambiguationFlow(request:iterator:selectedValues:)(v18, v19, v20, v21, v22, v23, v24, v25, v47, (uint64_t)v48, v49, v50, v51, v52, v53, v54, v55, v56, v57,
        v58);
      uint64_t v15 = (void *)OUTLINED_FUNCTION_16_12();
      char v17 = 2;
      break;
    case 3:
      OUTLINED_FUNCTION_9_30();
      OUTLINED_FUNCTION_16_20();
      OUTLINED_FUNCTION_55_5();
      LinkRCHFlow.createNeedsActionConfirmationFlow(request:iterator:)();
      uint64_t v15 = (void *)OUTLINED_FUNCTION_16_12();
      char v17 = 3;
      break;
    case 4:
      OUTLINED_FUNCTION_9_30();
      OUTLINED_FUNCTION_16_20();
      uint64_t v26 = (void *)OUTLINED_FUNCTION_55_5();
      LinkRCHFlow.createContinueInAppFlow(request:iterator:)(v26, v27);
      uint64_t v15 = (void *)OUTLINED_FUNCTION_16_12();
      char v17 = 4;
      break;
    case 5:
      uint64_t v28 = *(void *)(v0 + 152);
      swift_retain();
      uint64_t v29 = OUTLINED_FUNCTION_16_12();
      LinkRCHFlow.runAppProtectionCheckFlow(completionHandler:iterator:)(v29, v30, v28);
      uint64_t v15 = (void *)OUTLINED_FUNCTION_16_12();
      char v17 = 5;
      break;
    case 6:
      uint64_t v33 = *(void **)(v0 + 136);
      *(void *)(v0 + 176) = *(void *)(*(void *)(v0 + 160) + 16);
      id v34 = v33;
      static InstrumentationUtils.emitLinkFlowStartedInstrumentation(targetBundle:action:)();
      id v35 = [v34 output];
      id v36 = [v35 dialog];

      if (v36) {
      static InstrumentationUtils.emitActionExecutionEndedInstrumentation(hasOutputToPresent:)(v36 != 0, v37, v38, v39, v40, v41, v42, v43, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57,
      }
        v58,
        v59,
        v60,
        v61,
        v62);
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0;
      swift_retain();
      uint64_t v44 = (void *)swift_task_alloc();
      *(void *)(v0 + 184) = v44;
      *(void *)(v0 + 192) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      *uint64_t v44 = v0;
      v44[1] = LinkRCHFlow.responseFrom(event:iterator:);
      OUTLINED_FUNCTION_18_2();
      return withTimeout<A>(seconds:operation:)();
    default:
      OUTLINED_FUNCTION_9_30();
      OUTLINED_FUNCTION_16_20();
      OUTLINED_FUNCTION_77_4();
      LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:)();
      uint64_t v15 = (void *)OUTLINED_FUNCTION_16_12();
      char v17 = 0;
      break;
  }
  outlined consume of LinkConnectionEvent(v15, v16, v17);
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_18_2();
  __asm { BRAA            X1, X16 }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *os_log_type_t v6 = v5;
  *(void *)(v3 + 200) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[8];
  v0[12] = v2;
  char v3 = v0[9];
  v0[13] = v3;
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    BOOL v7 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)os_log_type_t v6 = 136315138;
    uint64_t v18 = v7;
    v0[10] = v2;
    v0[11] = v3;
    swift_bridgeObjectRetain();
    char v8 = String.init<A>(describing:)();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_29_11();
    _os_log_impl(&dword_0, v4, v5, "#LinkRCHFlow retrieved session id: %s", v6, 0xCu);
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_29_11();
  }

  uint64_t v10 = v0[22];
  char v11 = v0[20];
  uint64_t v13 = (void *)v1[17];
  uint64_t v12 = v1[18];
  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(uint64_t, void *))(v14 + 192))(v10, v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = OUTLINED_FUNCTION_57_2();
  *(void *)(v15 + 16) = v11;
  *(void *)(v15 + 24) = v13;
  outlined copy of LinkConnectionEvent(v13, v12, 6);
  swift_retain();
  static ExecuteResponse.ongoing(next:childCompletion:)();
  outlined consume of LinkConnectionEvent(v13, v12, 6);
  swift_release();
  swift_release();
  uint64_t v16 = (uint64_t (*)(void))v1[1];
  return v16();
}

{
  void *v0;
  void *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  swift_release();
  uint64_t v1 = (void *)Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v2))
  {
    char v3 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v3);
    OUTLINED_FUNCTION_42_0(&dword_0, v4, v5, "#LinkRCHFlow unable to get sessionId before time out");
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  os_log_type_t v6 = v0[22];
  BOOL v7 = v0[20];
  uint64_t v9 = (void *)v0[17];
  char v8 = v0[18];
  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(uint64_t, void *))(v10 + 192))(v6, v9);
  swift_bridgeObjectRelease();
  char v11 = OUTLINED_FUNCTION_57_2();
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 24) = v9;
  outlined copy of LinkConnectionEvent(v9, v8, 6);
  swift_retain();
  static ExecuteResponse.ongoing(next:childCompletion:)();
  outlined consume of LinkConnectionEvent(v9, v8, 6);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_18_0();
  return v12();
}

uint64_t closure #3 in LinkRCHFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v6[0] = a3;
  char v7 = a4;
  uint64_t v4 = a2 + 48;
  OUTLINED_FUNCTION_23_6();
  swift_errorRetain();
  outlined assign with take of LinkRCHFlow.State((uint64_t)v6, v4);
  return swift_endAccess();
}

void LinkRCHFlow.createNeedsDisambiguationFlow(request:iterator:selectedValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_36();
  a19 = v22;
  a20 = v23;
  uint64_t v89 = v20;
  uint64_t v90 = v24;
  uint64_t v83 = v25;
  uint64_t v86 = v26;
  uint64_t v28 = v27;
  uint64_t v82 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_12_1();
  uint64_t v30 = v29;
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_32_9();
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_56_3();
  uint64_t v33 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_12_1();
  uint64_t v35 = v34;
  uint64_t v37 = __chkstk_darwin(v36);
  OUTLINED_FUNCTION_6_27(v37, v38, v39, v40, v41, v42, v43, v44, (uint64_t)v77);
  __chkstk_darwin(v45);
  uint64_t v47 = (char *)&v77 - v46;
  uint64_t v48 = v28;
  id v49 = [v28 parameterName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  int v50 = OUTLINED_FUNCTION_79_3();
  static InstrumentationUtils.emitActionParameterDisambiguationStartedInstrumentation(parameterName:)(v50, v51, v52, v53, v54, v55, v56, v57, v77, v78, (uint64_t)v79, v80, v81, v82, v83, v84, v85, v86, v87,
    v88,
    v89,
    v90,
    v91,
    v92);
  swift_bridgeObjectRelease();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v33, (uint64_t)static Signposter.voiceCommands);
  uint64_t v87 = v35;
  uint64_t v88 = v33;
  uint64_t v59 = *(void *)(v35 + 16);
  uint64_t v58 = (void *)(v35 + 16);
  uint64_t v81 = v59;
  OUTLINED_FUNCTION_73_0();
  v60();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v61 = OSSignposter.logHandle.getter();
  static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v62 = v47;
    uint64_t v63 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v63 = 0;
    OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_76_5();
    _os_signpost_emit_with_name_impl(&dword_0, v61, v64, v65, "LinkRCHFlowNeedsDisambiguation", "", v63, 2u);
    uint64_t v47 = v62;
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v79 = v47;

  uint64_t v66 = v82;
  OUTLINED_FUNCTION_59_0();
  v67();
  type metadata accessor for OSSignpostIntervalState();
  OUTLINED_FUNCTION_35_2();
  uint64_t v80 = OUTLINED_FUNCTION_29_13();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v21, v66);
  OUTLINED_FUNCTION_16_5();
  uint64_t v69 = *(uint64_t (**)(void))(v68 + 176);
  id v78 = v48;
  uint64_t v70 = v69();
  OUTLINED_FUNCTION_41_12(v70);
  char v93 = 3;
  OUTLINED_FUNCTION_23_6();
  OUTLINED_FUNCTION_49_8();
  swift_endAccess();
  OUTLINED_FUNCTION_73_0();
  v71();
  OUTLINED_FUNCTION_86_2();
  OUTLINED_FUNCTION_2_24();
  uint64_t v72 = swift_allocObject();
  uint64_t v73 = OUTLINED_FUNCTION_13_25(v72);
  v74(v73);
  OUTLINED_FUNCTION_32_14((uint64_t)&a18);
  swift_retain();
  id v75 = v58;
  OUTLINED_FUNCTION_37_13();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_34_12();
  v76();
  OUTLINED_FUNCTION_27_1();
}

void LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v63 = v0;
  uint64_t v65 = v2;
  uint64_t v60 = v3;
  uint64_t v5 = v4;
  uint64_t v57 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_12_1();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_32_9();
  __chkstk_darwin(v9);
  uint64_t v10 = OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_12_1();
  uint64_t v12 = v11;
  uint64_t v14 = __chkstk_darwin(v13);
  OUTLINED_FUNCTION_6_27(v14, v15, v16, v17, v18, v19, v20, v21, v51);
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_56_3();
  uint64_t v23 = v5;
  id v24 = [v5 parameterName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  int v25 = OUTLINED_FUNCTION_79_3();
  static InstrumentationUtils.emitActionParameterConfirmationStartedInstrumentation(parameterName:)(v25, v26, v27, v28, v29, v30, v31, v32, v52, v53, v54, v56, v57, v58, v59, v60, v61, v62, v63,
    v65,
    v66,
    v67,
    v68,
    v69);
  swift_bridgeObjectRelease();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v10, (uint64_t)static Signposter.voiceCommands);
  OUTLINED_FUNCTION_72_4();
  OUTLINED_FUNCTION_50_7();
  v33();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v34 = OSSignposter.logHandle.getter();
  uint64_t v35 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v36 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_36_13(v36);
    OUTLINED_FUNCTION_76_5();
    _os_signpost_emit_with_name_impl(&dword_0, v34, v37, v38, "LinkRCHFlowNeedsConfirmation", "", v1, 2u);
    uint64_t v1 = (uint8_t *)v10;
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_24_17();
  OUTLINED_FUNCTION_59_0();
  v39();
  type metadata accessor for OSSignpostIntervalState();
  OUTLINED_FUNCTION_35_2();
  uint64_t v55 = OUTLINED_FUNCTION_29_13();
  uint64_t v40 = OUTLINED_FUNCTION_61_4();
  v41(v40);
  OUTLINED_FUNCTION_16_5();
  uint64_t v43 = (*(uint64_t (**)(void))(v42 + 160))();
  OUTLINED_FUNCTION_41_12(v43);
  char v70 = 3;
  uint64_t v44 = v64 + 48;
  OUTLINED_FUNCTION_23_6();
  OUTLINED_FUNCTION_49_8();
  swift_endAccess();
  OUTLINED_FUNCTION_68_3();
  OUTLINED_FUNCTION_50_7();
  v45();
  OUTLINED_FUNCTION_86_2();
  OUTLINED_FUNCTION_2_24();
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = OUTLINED_FUNCTION_13_25(v46);
  v48(v47);
  *(void *)(v44 + v7) = v55;
  *(void *)(v44 + v35) = v64;
  outlined init with take of AceServiceInvokerAsync(&v69, v64 + 48 + v12);
  *(void *)&v1[v44] = v23;
  swift_retain();
  swift_retain();
  id v49 = v23;
  OUTLINED_FUNCTION_37_13();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_34_12();
  v50();
  OUTLINED_FUNCTION_27_1();
}

void LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v92 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_12_1();
  uint64_t v85 = v11;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_32_9();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_12_1();
  uint64_t v89 = v15;
  uint64_t v90 = v14;
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = __chkstk_darwin(v14);
  uint64_t v86 = (uint64_t)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v93 = (uint64_t)&v81 - v19;
  id v94 = v7;
  uint64_t v20 = LNActionMetadata.firstParameterMetadata(from:)(v7);
  if (!v20)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    uint64_t v42 = (void *)OUTLINED_FUNCTION_26_1(v41, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_16_11(v43))
    {
      uint64_t v44 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v44);
      OUTLINED_FUNCTION_20(&dword_0, v45, v46, "#LinkRCHFlow Could not find matching parameter data for LNNeedsValueRequest");
      OUTLINED_FUNCTION_7_0();
    }

    lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
    uint64_t v47 = OUTLINED_FUNCTION_9_6();
    OUTLINED_FUNCTION_45_9(v47, v48, 0xD00000000000001CLL);
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_85_3();
    swift_endAccess();
    static ExecuteResponse.complete()();
    goto LABEL_23;
  }
  uint64_t v21 = v20;
  uint64_t v87 = v2;
  uint64_t v88 = v9;
  id v22 = [v20 valueType];
  if (v22)
  {
    uint64_t v23 = v22;
    self;
    uint64_t v24 = swift_dynamicCastObjCClass();

    if (v24)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      int v26 = (void *)OUTLINED_FUNCTION_26_1(v25, (uint64_t)static Logger.voiceCommands);
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_16_11(v27))
      {
        int v28 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v28);
        OUTLINED_FUNCTION_20(&dword_0, v29, v30, "#LinkRCHFlow LNNeedsValueRequest has parameter value type LNArrayValueType, punching out to Shortcuts jr");
        OUTLINED_FUNCTION_7_0();
      }

      id v31 = [self wfSiriExecutionRequiresShortcutsJrError];
      *(void *)&v97[0] = v31;
      char v98 = 8;
      OUTLINED_FUNCTION_23_6();
      id v32 = v31;
      OUTLINED_FUNCTION_49_8();
      swift_endAccess();
      static ExecuteResponse.complete()();

LABEL_23:
      OUTLINED_FUNCTION_27_1();
      return;
    }
  }
  id v91 = v21;
  id v33 = [v91 valueType];
  self;
  uint64_t v34 = swift_dynamicCastObjCClass();

  if (!v34)
  {
    id v49 = [v94 parameterName];
    int v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v52 = v51;

    static InstrumentationUtils.emitPromptForValueStartedInstrumentation(parameterName:)(v50, v52, v53, v54, v55, v56, v57, v58, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, (uint64_t)v91,
      v92,
      v93,
      (uint64_t)v94,
      v95,
      v96);
    swift_bridgeObjectRelease();
    uint64_t v59 = v87;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v90, (uint64_t)static Signposter.voiceCommands);
    uint64_t v60 = *(void *)(v89 + 16);
    uint64_t v84 = v89 + 16;
    uint64_t v83 = v60;
    OUTLINED_FUNCTION_59_0();
    v61();
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    uint64_t v62 = OSSignposter.logHandle.getter();
    static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v63 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v63 = 0;
      OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_76_5();
      _os_signpost_emit_with_name_impl(&dword_0, v62, v64, v65, "LinkRCHFlowNeedsValue", "", v63, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    uint64_t v66 = v85;
    OUTLINED_FUNCTION_24_17();
    OUTLINED_FUNCTION_59_0();
    v67();
    type metadata accessor for OSSignpostIntervalState();
    OUTLINED_FUNCTION_35_2();
    id v82 = (id)OUTLINED_FUNCTION_29_13();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v0, v10);
    OUTLINED_FUNCTION_16_5();
    uint64_t v85 = (*(uint64_t (**)(void))(v68 + 144))();
    outlined init with copy of DeviceState(v92, (uint64_t)v97);
    char v98 = 3;
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_49_8();
    swift_endAccess();
    uint64_t v69 = v86;
    uint64_t v70 = v90;
    OUTLINED_FUNCTION_59_0();
    v71();
    OUTLINED_FUNCTION_86_2();
    uint64_t v72 = v89;
    unint64_t v73 = (*(unsigned __int8 *)(v89 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
    unint64_t v74 = (v17 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v75 = v59;
    unint64_t v76 = (v74 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v77 = (v76 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v78 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v72 + 32))(v78 + v73, v69, v70);
    *(void *)(v78 + v74) = v82;
    *(void *)(v78 + v76) = v75;
    id v79 = v94;
    *(void *)(v78 + v77) = v94;
    outlined init with take of AceServiceInvokerAsync(v97, v78 + ((v77 + 15) & 0xFFFFFFFFFFFFFFF8));
    swift_retain();
    swift_retain();
    id v80 = v79;
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v93, v70);
    goto LABEL_23;
  }
  LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:)((uint64_t)v94, (uint64_t)v91, v92, v4, v35, v36, v37, v38, (uint64_t)v81, (uint64_t)v82, v83, v84, v85, v86, v87, v88, v89, v90, (uint64_t)v91,
    v92);

  OUTLINED_FUNCTION_27_1();
}

void LinkRCHFlow.createNeedsActionConfirmationFlow(request:iterator:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = v1;
  uint64_t v5 = v4;
  uint64_t v63 = (void *)v6;
  uint64_t v61 = v7;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_12_1();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_32_9();
  __chkstk_darwin(v12);
  uint64_t v13 = OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_12_1();
  uint64_t v15 = v14;
  uint64_t v17 = __chkstk_darwin(v16);
  OUTLINED_FUNCTION_6_27(v17, v18, v19, v20, v21, v22, v23, v24, v54);
  int v26 = __chkstk_darwin(v25);
  int v28 = (char *)&v54 - v27;
  static InstrumentationUtils.emitActionConfirmationStartedInstrumentation()(v26, v29, v30, v31, v32, v33, v34, v35, v54, v55, v56, v57, v58, v59, v60, v61, (uint64_t)v62, (uint64_t)v63, v64,
    v65,
    v66,
    v67,
    *((uint64_t *)&v67 + 1),
    v68);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v13, (uint64_t)static Signposter.voiceCommands);
  uint64_t v59 = v15;
  uint64_t v60 = v13;
  uint64_t v37 = *(void *)(v15 + 16);
  uint64_t v36 = v15 + 16;
  uint64_t v56 = v37;
  OUTLINED_FUNCTION_50_7();
  v38();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v62 = v28;
  uint64_t v39 = OSSignposter.logHandle.getter();
  uint64_t v40 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v41 = (_WORD *)OUTLINED_FUNCTION_33();
    id v55 = v2;
    OUTLINED_FUNCTION_36_13(v41);
    OUTLINED_FUNCTION_76_5();
    _os_signpost_emit_with_name_impl(&dword_0, v39, v42, v43, "LinkRCHFlowNeedsActionConfirmation", "", v5, 2u);
    uint64_t v5 = (uint8_t *)v8;
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_24_17();
  OUTLINED_FUNCTION_59_0();
  v44();
  type metadata accessor for OSSignpostIntervalState();
  OUTLINED_FUNCTION_35_2();
  uint64_t v54 = OUTLINED_FUNCTION_29_13();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v8);
  OUTLINED_FUNCTION_16_5();
  id v55 = (id)(*(uint64_t (**)(void))(v45 + 168))();
  outlined init with copy of DeviceState((uint64_t)v5, (uint64_t)&v67);
  char v69 = 3;
  OUTLINED_FUNCTION_23_6();
  OUTLINED_FUNCTION_49_8();
  swift_endAccess();
  uint64_t v46 = v58;
  uint64_t v47 = v60;
  OUTLINED_FUNCTION_50_7();
  v48();
  outlined init with copy of DeviceState((uint64_t)v5, (uint64_t)&v67);
  uint64_t v49 = v59;
  OUTLINED_FUNCTION_2_24();
  uint64_t v50 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))((char *)v39 + v50, v46, v47);
  *(void *)(v50 + v10 + 8) = v54;
  *(void *)(v50 + v40) = v3;
  outlined init with take of AceServiceInvokerAsync(&v67, v50 + v36);
  int v51 = v63;
  *(void *)&v5[v50] = v63;
  swift_retain();
  swift_retain();
  id v52 = v51;
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_34_12();
  v53();
  OUTLINED_FUNCTION_27_1();
}

uint64_t LinkRCHFlow.createContinueInAppFlow(request:iterator:)(void *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v5 + 184))();
  outlined init with copy of DeviceState(a2, (uint64_t)v9);
  char v10 = 3;
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of LinkRCHFlow.State((uint64_t)v9, v2 + 48);
  swift_endAccess();
  outlined init with copy of DeviceState(a2, (uint64_t)v9);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v2;
  outlined init with take of AceServiceInvokerAsync(v9, v6 + 24);
  *(void *)(v6 + 64) = a1;
  swift_retain();
  id v7 = a1;
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in LinkRCHFlow.responseFrom(event:iterator:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(closure #1 in LinkRCHFlow.responseFrom(event:iterator:), 0, 0);
}

uint64_t closure #1 in LinkRCHFlow.responseFrom(event:iterator:)()
{
  uint64_t v1 = *(void *)(v0[3] + 40);
  if (v1)
  {
    uint64_t v6 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 192) + **(int **)(*(void *)v1 + 192));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[4] = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in LinkRCHFlow.responseFrom(event:iterator:);
    uint64_t v3 = v6;
  }
  else
  {
    uint64_t v4 = (void *)v0[2];
    *uint64_t v4 = 0;
    v4[1] = 0;
    OUTLINED_FUNCTION_18_0();
  }
  return v3();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;

  *(_OWORD *)*(void *)(v0 + 16) = *(_OWORD *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in LinkRCHFlow.responseFrom(event:iterator:)(uint64_t a1, void *a2)
{
  uint64_t v6 = a2;
  char v7 = 11;
  uint64_t v3 = a1 + 48;
  swift_beginAccess();
  id v4 = a2;
  outlined assign with take of LinkRCHFlow.State((uint64_t)&v6, v3);
  return swift_endAccess();
}

uint64_t LinkRCHFlow.runAppProtectionCheckFlow(completionHandler:iterator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v14 = 1;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  char v18 = 12;
  swift_beginAccess();
  outlined assign with take of LinkRCHFlow.State((uint64_t)&v14, v3 + 48);
  swift_endAccess();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.voiceCommands);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "#LinkRCHFlow runAppProtectionCheckFlow - resolving...", v11, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(void))(**(void **)(v4 + 32) + 200))();
  outlined init with copy of DeviceState(a3, (uint64_t)&v14);
  uint64_t v12 = (void *)swift_allocObject();
  long long v12[2] = v4;
  outlined init with take of AceServiceInvokerAsync((long long *)&v14, (uint64_t)(v12 + 3));
  v12[8] = a1;
  v12[9] = a2;
  swift_retain();
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

void LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_36();
  a19 = v22;
  a20 = v23;
  uint64_t v83 = v20;
  uint64_t v84 = v24;
  uint64_t v76 = v25;
  uint64_t v77 = v26;
  uint64_t v80 = v27;
  int v29 = v28;
  uint64_t v75 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_12_1();
  int v31 = v30;
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_32_9();
  __chkstk_darwin(v33);
  uint64_t v34 = OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_12_1();
  uint64_t v36 = __chkstk_darwin(v35);
  OUTLINED_FUNCTION_6_27(v36, v37, v38, v39, v40, v41, v42, v43, v70);
  __chkstk_darwin(v44);
  OUTLINED_FUNCTION_56_3();
  id v45 = [v29 parameterName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  int v46 = OUTLINED_FUNCTION_79_3();
  static InstrumentationUtils.emitPromptForValueStartedInstrumentation(parameterName:)(v46, v47, v48, v49, v50, v51, v52, v53, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81,
    v82,
    v83,
    v84,
    v85,
    v86);
  swift_bridgeObjectRelease();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v34, (uint64_t)static Signposter.voiceCommands);
  OUTLINED_FUNCTION_72_4();
  OUTLINED_FUNCTION_50_7();
  v54();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  id v55 = OSSignposter.logHandle.getter();
  os_signpost_type_t v56 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v57 = (_WORD *)OUTLINED_FUNCTION_33();
    os_signpost_id_t v58 = OUTLINED_FUNCTION_36_13(v57);
    _os_signpost_emit_with_name_impl(&dword_0, v55, v56, v58, "LinkRCHFlowNeedsValue", "", v21, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_24_17();
  OUTLINED_FUNCTION_59_0();
  v59();
  type metadata accessor for OSSignpostIntervalState();
  OUTLINED_FUNCTION_35_2();
  OUTLINED_FUNCTION_29_13();
  uint64_t v60 = OUTLINED_FUNCTION_61_4();
  v61(v60);
  OUTLINED_FUNCTION_16_5();
  uint64_t v63 = (*(uint64_t (**)(void))(v62 + 152))();
  OUTLINED_FUNCTION_41_12(v63);
  OUTLINED_FUNCTION_23_6();
  OUTLINED_FUNCTION_49_8();
  swift_endAccess();
  OUTLINED_FUNCTION_68_3();
  OUTLINED_FUNCTION_50_7();
  v64();
  OUTLINED_FUNCTION_86_2();
  OUTLINED_FUNCTION_2_24();
  uint64_t v65 = swift_allocObject();
  uint64_t v66 = OUTLINED_FUNCTION_13_25(v65);
  v67(v66);
  OUTLINED_FUNCTION_32_14((uint64_t)&a17);
  swift_retain();
  id v68 = v31;
  OUTLINED_FUNCTION_37_13();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_34_12();
  v69();
  OUTLINED_FUNCTION_27_1();
}

uint64_t closure #1 in LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:)(uint64_t a1, void *a2, const char *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v100 = a6;
  id v101 = a5;
  uint64_t v102 = a4;
  uint64_t v103 = a3;
  uint64_t v98 = type metadata accessor for OSSignpostError();
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v96 = (uint64_t)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v99 = (uint64_t)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v108 = (char *)&v92 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<LNValue>);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v109 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v107 = (char *)&v92 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v92 - v20;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.voiceCommands);
  uint64_t v110 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v111 = v15 + 16;
  v110(v21, a1, v14);
  uint64_t v94 = v23;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v104 = v15;
  uint64_t v105 = a1;
  if (v26)
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v95 = v10;
    v113[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    id v93 = a2;
    lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptResult<LNValue> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<LNValue>);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v113);
    uint64_t v15 = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v106 = *(void (**)(char *, uint64_t))(v15 + 8);
    v106(v21, v14);
    _os_log_impl(&dword_0, v24, v25, "PromptForConfirmationFlow.createNeedsValueFlow received %s", v27, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v95;
    swift_slowDealloc();
    a1 = v105;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v106 = *(void (**)(char *, uint64_t))(v15 + 8);
    v106(v21, v14);
  }

  uint64_t v31 = (uint64_t)v107;
  v110(v107, a1, v14);
  uint64_t v32 = OSSignposter.logHandle.getter();
  uint64_t v33 = v108;
  OSSignpostIntervalState.signpostID.getter();
  LODWORD(v95) = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    uint64_t v34 = v96;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v35 = v97;
    uint64_t v36 = v98;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v97 + 88))(v34, v98) == enum case for OSSignpostError.doubleEnd(_:))
    {
      char v37 = 0;
      char v38 = 0;
      uint64_t v103 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
      uint64_t v103 = "exitValue: %s";
      char v38 = 2;
      char v37 = 1;
    }
    uint64_t v39 = v99;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v99, v33, v9);
    uint64_t v40 = v9;
    uint64_t v41 = swift_slowAlloc();
    v113[0] = swift_slowAlloc();
    *(unsigned char *)uint64_t v41 = v38;
    *(unsigned char *)(v41 + 1) = v37;
    *(_WORD *)(v41 + 2) = 2080;
    lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptResult<LNValue> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<LNValue>);
    uint64_t v42 = (uint64_t)v107;
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = v104;
    v106((char *)v42, v14);
    os_signpost_id_t v45 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v32, (os_signpost_type_t)v95, v45, "LinkRCHFlowNeedsValue", v103, (uint8_t *)v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int v46 = *(void (**)(char *, uint64_t))(v10 + 8);
    v46(v108, v40);
    v46((char *)v39, v40);
    a1 = v105;
  }
  else
  {
    v106((char *)v31, v14);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v33, v9);
  }
  int v47 = v109;
  v110(v109, a1, v14);
  int v48 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v47, v14);
  if (v48 == enum case for PromptResult.answered<A>(_:))
  {
    os_signpost_type_t v56 = (void **)v109;
    int v57 = (*(uint64_t (**)(char *, uint64_t))(v15 + 96))(v109, v14);
    os_signpost_id_t v58 = *v56;
    static InstrumentationUtils.emitPromptForValueEndedInstrumentation()(v57, v59, v60, v61, v62, v63, v64, v65, v92, v93, v94, v95, v96, v97, v98, v99, v100, (uint64_t)v101, v102,
      (uint64_t)v103,
      v104,
      v105,
      (uint64_t)v106,
      (uint64_t)v107);
    [v101 respondWithValue:v58];

    outlined init with copy of DeviceState(v100, (uint64_t)v113);
    char v66 = 2;
LABEL_19:
    char v114 = v66;
    uint64_t v70 = v102 + 48;
LABEL_22:
    swift_beginAccess();
LABEL_23:
    outlined assign with take of LinkRCHFlow.State((uint64_t)v113, v70);
    return swift_endAccess();
  }
  if (v48 == enum case for PromptResult.error<A>(_:))
  {
    long long v67 = v109;
    (*(void (**)(char *, uint64_t))(v15 + 96))(v109, v14);
    uint64_t v68 = *(void *)v67;
    int v69 = v67[8];
    uint64_t v70 = v102 + 48;
    v113[0] = v68;
    if (v69 == 1) {
      char v71 = 8;
    }
    else {
      char v71 = 9;
    }
    char v114 = v71;
    goto LABEL_22;
  }
  if (v48 == enum case for PromptResult.cancelled<A>(_:))
  {
    static InstrumentationUtils.emitLinkFlowCancelledInstrumentation(cancellationInitiator:)(1, v49, v50, v51, v52, v53, v54, v55, v92, v93, v94, v95, v96, v97, v98, v99, v100, (uint64_t)v101, v102,
      (uint64_t)v103,
      v104,
      v105,
      (uint64_t)v106,
      (uint64_t)v107);
    v113[0] = 2;
    memset(&v113[1], 0, 48);
    char v66 = 12;
    goto LABEL_19;
  }
  if (v48 == enum case for PromptResult.unanswered<A>(_:))
  {
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v75 = 0;
      _os_log_impl(&dword_0, v73, v74, "PromptForValueFlow received an .unanswered result, reprompting...", v75, 2u);
      swift_slowDealloc();
    }

    static InstrumentationUtils.emitPromptForValueEndedInstrumentation()(v76, v77, v78, v79, v80, v81, v82, v83, v92, v93, v94, v95, v96, v97, v98, v99, v100, (uint64_t)v101, v102,
      (uint64_t)v103,
      v104,
      v105,
      (uint64_t)v106,
      (uint64_t)v107);
    id v84 = v101;
    v113[0] = (uint64_t)v101;
    v113[1] = 0;
    outlined init with copy of DeviceState(v100, (uint64_t)&v113[2]);
    char v114 = 6;
    uint64_t v70 = v102 + 48;
    swift_beginAccess();
    id v85 = v84;
    goto LABEL_23;
  }
  lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
  uint64_t v86 = swift_allocError();
  *uint64_t v87 = 0xD000000000000022;
  v87[1] = 0x80000000002292A0;
  v113[0] = v86;
  char v114 = 9;
  uint64_t v88 = v102 + 48;
  swift_beginAccess();
  outlined assign with take of LinkRCHFlow.State((uint64_t)v113, v88);
  swift_endAccess();
  uint64_t v89 = Logger.logObject.getter();
  os_log_type_t v90 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v89, v90))
  {
    id v91 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v91 = 0;
    _os_log_impl(&dword_0, v89, v90, "Unexpected result", v91, 2u);
    swift_slowDealloc();
  }

  return ((uint64_t (*)(char *, uint64_t))v106)(v109, v14);
}

void closure #1 in LinkRCHFlow.createNeedsActionConfirmationFlow(request:iterator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const char *a21,char a22)
{
  OUTLINED_FUNCTION_36();
  os_log_type_t v129 = v22;
  uint64_t v134 = v23;
  id v135 = v24;
  uint64_t v26 = v25;
  uint64_t v142 = v27;
  v137 = v28;
  uint64_t v136 = v29;
  uint64_t v31 = v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  __chkstk_darwin(v32 - 8);
  OUTLINED_FUNCTION_25_6();
  uint64_t v125 = v33;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_53_4((uint64_t)&v123 - v35);
  uint64_t v132 = type metadata accessor for SimpleConfirmationResponseProvider();
  OUTLINED_FUNCTION_12_1();
  uint64_t v131 = v36;
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_53_4(v38);
  uint64_t v128 = type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_12_1();
  uint64_t v127 = v39;
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_53_4(v41);
  uint64_t v140 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_12_1();
  uint64_t v43 = v42;
  __chkstk_darwin(v44);
  OUTLINED_FUNCTION_25_6();
  uint64_t v138 = v45;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v46);
  int v48 = (char *)&v123 - v47;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
  OUTLINED_FUNCTION_12_1();
  uint64_t v51 = v50;
  __chkstk_darwin(v52);
  OUTLINED_FUNCTION_25_6();
  uint64_t v141 = v53;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v54);
  uint64_t v146 = (char *)&v123 - v55;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v56);
  os_signpost_id_t v58 = (char *)&v123 - v57;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v59 = type metadata accessor for Logger();
  int v60 = (void *)__swift_project_value_buffer(v59, (uint64_t)static Logger.voiceCommands);
  uint64_t v147 = *(void *)(v51 + 16);
  uint64_t v148 = v51 + 16;
  OUTLINED_FUNCTION_59_0();
  v61();
  id v124 = v60;
  int v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  BOOL v64 = os_log_type_enabled(v62, v63);
  uint64_t v143 = v31;
  uint64_t v144 = v26;
  v139 = v48;
  if (v64)
  {
    int v65 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    uint64_t v150 = OUTLINED_FUNCTION_22_3();
    uint64_t v123 = v43;
    *(_DWORD *)int v65 = 136315138;
    lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptResult<SimpleConfirmationResponseProvider> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
    uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v149 = OUTLINED_FUNCTION_81_3(v66, v67);
    uint64_t v43 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v145 = *(void (**)(char *, uint64_t))(v51 + 8);
    OUTLINED_FUNCTION_50_5();
    v68();
    _os_log_impl(&dword_0, v62, v63, v134, v65, 0xCu);
    OUTLINED_FUNCTION_68();
    int v48 = v139;
    OUTLINED_FUNCTION_7_0();
    uint64_t v26 = v144;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v145 = *(void (**)(char *, uint64_t))(v51 + 8);
    v145(v58, v49);
  }

  uint64_t v134 = a21;
  OUTLINED_FUNCTION_59_0();
  v69();
  uint64_t v70 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  LODWORD(v136) = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    uint64_t v71 = v126;
    checkForErrorAndConsumeState(state:)();
    uint64_t v72 = v71;
    swift_release();
    uint64_t v73 = v127;
    uint64_t v74 = v128;
    OUTLINED_FUNCTION_75_3();
    if (v75() == enum case for OSSignpostError.doubleEnd(_:))
    {
      char v76 = 0;
      char v77 = 0;
      v137 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
      v137 = "exitValue: %s";
      char v77 = 2;
      char v76 = 1;
    }
    uint64_t v79 = v140;
    OUTLINED_FUNCTION_59_0();
    v80();
    uint64_t v81 = OUTLINED_FUNCTION_25_2();
    uint64_t v150 = OUTLINED_FUNCTION_22_3();
    *(unsigned char *)uint64_t v81 = v77;
    *(unsigned char *)(v81 + 1) = v76;
    *(_WORD *)(v81 + 2) = 2080;
    lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptResult<SimpleConfirmationResponseProvider> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
    uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v84 = OUTLINED_FUNCTION_81_3(v82, v83);
    OUTLINED_FUNCTION_60_2(v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_50_5();
    v85();
    uint64_t v86 = v138;
    os_signpost_id_t v87 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v70, (os_signpost_type_t)v136, v87, v129, v137, (uint8_t *)v81, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    uint64_t v88 = *(void (**)(char *, uint64_t))(v43 + 8);
    v88(v139, v79);
    v88((char *)v86, v79);
    uint64_t v26 = v144;
  }
  else
  {
    OUTLINED_FUNCTION_50_5();
    v78();

    (*(void (**)(char *, uint64_t))(v43 + 8))(v48, v140);
  }
  uint64_t v89 = v141;
  outlined init with copy of DeviceState(v26, (uint64_t)&v150);
  char v152 = 2;
  uint64_t v90 = v142 + 48;
  OUTLINED_FUNCTION_23_6();
  outlined assign with take of LinkRCHFlow.State((uint64_t)&v150, v90);
  swift_endAccess();
  OUTLINED_FUNCTION_59_0();
  v91();
  OUTLINED_FUNCTION_75_3();
  int v93 = v92();
  if (v93 != enum case for PromptResult.answered<A>(_:))
  {
    if (v93 == enum case for PromptResult.error<A>(_:))
    {
      uint64_t v109 = OUTLINED_FUNCTION_54_4();
      v110(v109);
      if (*(unsigned char *)(v89 + 8) == 1)
      {
        uint64_t v150 = *(void *)v89;
        char v111 = 8;
      }
      else
      {
        uint64_t v150 = *(void *)v89;
        char v111 = 9;
      }
    }
    else
    {
      if (v93 != enum case for PromptResult.cancelled<A>(_:))
      {
        if (v93 != enum case for PromptResult.unanswered<A>(_:))
        {
          [v135 respondWithConfirmation:0];
          OUTLINED_FUNCTION_50_5();
          v122();
          goto LABEL_26;
        }
        ((void (*)(void))v134)(0);
        os_log_type_t v116 = v124;
        v117 = Logger.logObject.getter();
        os_log_type_t v118 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_16_11(v118))
        {
          uint64_t v119 = (uint8_t *)OUTLINED_FUNCTION_33();
          *(_WORD *)uint64_t v119 = 0;
          _os_log_impl(&dword_0, v117, v116, "PromptForConfirmationFlow received an .unanswered result, reprompting...", v119, 2u);
          OUTLINED_FUNCTION_7_0();
        }

        id v120 = v135;
        uint64_t v150 = (uint64_t)v135;
        outlined init with copy of DeviceState(v26, (uint64_t)&v151);
        char v152 = a22;
        OUTLINED_FUNCTION_23_6();
        id v121 = v120;
        goto LABEL_25;
      }
      static InstrumentationUtils.emitLinkFlowCancelledInstrumentation(cancellationInitiator:)(1, v94, v95, v96, v97, v98, v99, v100, v123, v124, v125, v126, v127, v128, (uint64_t)v129, v130, v131, v132, v133,
        (uint64_t)v134,
        (uint64_t)v135,
        v136,
        (uint64_t)v137,
        v138);
      OUTLINED_FUNCTION_51_7();
    }
    char v152 = v111;
    OUTLINED_FUNCTION_23_6();
LABEL_25:
    outlined assign with take of LinkRCHFlow.State((uint64_t)&v150, v90);
    swift_endAccess();
    goto LABEL_26;
  }
  uint64_t v101 = OUTLINED_FUNCTION_54_4();
  v102(v101);
  uint64_t v103 = v131;
  uint64_t v104 = v130;
  uint64_t v105 = v132;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 32))(v130, v89, v132);
  uint64_t v106 = v133;
  SimpleConfirmationResponseProvider.confirmationResponse.getter();
  uint64_t v107 = type metadata accessor for ConfirmationResponse();
  if (__swift_getEnumTagSinglePayload(v106, 1, v107) != 1)
  {
    uint64_t v112 = v125;
    outlined init with copy of RunCustomIntentReadingDelegate.Templating?(v106, v125, &demangling cache variable for type metadata for ConfirmationResponse?);
    uint64_t v113 = *(void *)(v107 - 8);
    OUTLINED_FUNCTION_75_3();
    int v115 = v114();
    if (v115 == enum case for ConfirmationResponse.confirmed(_:))
    {
      uint64_t v108 = 1;
      goto LABEL_20;
    }
    if (v115 != enum case for ConfirmationResponse.rejected(_:)) {
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v112, v107);
    }
  }
  uint64_t v108 = 0;
LABEL_20:
  ((void (*)(uint64_t))v134)(v108);
  [v135 respondWithConfirmation:v108];
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v104, v105);
  outlined destroy of SiriWorkflowRunnerEvent?(v106, &demangling cache variable for type metadata for ConfirmationResponse?);
LABEL_26:
  OUTLINED_FUNCTION_27_1();
}

void closure #1 in LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:)()
{
  OUTLINED_FUNCTION_36();
  HIDWORD(v123) = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v137 = v5;
  uint64_t v134 = v6;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v128 = type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_12_1();
  uint64_t v127 = v13;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_20_0();
  uint64_t v17 = v16 - v15;
  uint64_t v133 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_12_1();
  uint64_t v132 = v18;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_25_6();
  uint64_t v131 = v20;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v21);
  uint64_t v140 = (char *)&v121 - v22;
  uint64_t v23 = (uint8_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<[LNValue]>);
  OUTLINED_FUNCTION_12_1();
  uint64_t v25 = v24;
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_25_6();
  uint64_t v142 = v27;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v28);
  uint64_t v138 = (char *)&v121 - v29;
  OUTLINED_FUNCTION_25_7();
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v121 - v31;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v126 = v17;
  id v135 = v8;
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.voiceCommands);
  uint64_t v35 = *(void (**)(void))(v25 + 16);
  uint64_t v141 = v12;
  v139 = v35;
  OUTLINED_FUNCTION_73_0();
  v36();
  uint64_t v129 = v34;
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  id v124 = v4;
  uint64_t v130 = v25 + 16;
  if (v39)
  {
    uint64_t v125 = v10;
    uint64_t v40 = v25;
    uint64_t v41 = (uint8_t *)OUTLINED_FUNCTION_25_2();
    unint64_t v143 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v41 = 136315138;
    uint64_t v122 = (char *)v2;
    lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptResult<[LNValue]> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<[LNValue]>);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v44 = OUTLINED_FUNCTION_81_3(v42, v43);
    OUTLINED_FUNCTION_69_4(v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v136 = *(void (**)(char *, uint8_t *))(v40 + 8);
    OUTLINED_FUNCTION_50_5();
    v45();
    _os_log_impl(&dword_0, v37, v38, v122, v41, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v136 = *(void (**)(char *, uint8_t *))(v25 + 8);
    v136(v32, v23);
  }

  uint64_t v46 = v139;
  OUTLINED_FUNCTION_73_0();
  v46();
  uint64_t v47 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  LODWORD(v125) = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    uint64_t v48 = v126;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v49 = v127;
    uint64_t v50 = v128;
    OUTLINED_FUNCTION_75_3();
    if (v51() == enum case for OSSignpostError.doubleEnd(_:))
    {
      char v52 = 0;
      char v53 = 0;
      id v135 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
      id v135 = "exitValue: %s";
      char v53 = 2;
      char v52 = 1;
    }
    uint64_t v56 = v132;
    uint64_t v57 = v133;
    OUTLINED_FUNCTION_59_0();
    v58();
    uint64_t v59 = OUTLINED_FUNCTION_25_2();
    unint64_t v143 = OUTLINED_FUNCTION_22_3();
    *(unsigned char *)uint64_t v59 = v53;
    *(unsigned char *)(v59 + 1) = v52;
    *(_WORD *)(v59 + 2) = 2080;
    lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptResult<[LNValue]> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<[LNValue]>);
    uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = OUTLINED_FUNCTION_81_3(v60, v61);
    OUTLINED_FUNCTION_60_2(v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_50_5();
    v63();
    uint64_t v64 = v131;
    os_signpost_id_t v65 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v47, (os_signpost_type_t)v125, v65, "LinkRCHFlowNeedsDisambiguation", v135, (uint8_t *)v59, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    uint64_t v66 = *(void (**)(char *, uint64_t))(v56 + 8);
    v66(v140, v57);
    v66((char *)v64, v57);
    uint64_t v46 = v139;
  }
  else
  {
    OUTLINED_FUNCTION_50_5();
    v54();

    OUTLINED_FUNCTION_66();
    v55();
  }
  outlined init with copy of DeviceState(v137, (uint64_t)&v143);
  char v145 = 2;
  OUTLINED_FUNCTION_23_6();
  OUTLINED_FUNCTION_85_3();
  swift_endAccess();
  unint64_t v67 = v142;
  OUTLINED_FUNCTION_73_0();
  v46();
  OUTLINED_FUNCTION_75_3();
  int v69 = v68();
  if (v69 == enum case for PromptResult.answered<A>(_:))
  {
    uint64_t v77 = OUTLINED_FUNCTION_44_9();
    int v79 = v78(v77);
    unint64_t v80 = *v67;
    static InstrumentationUtils.emitActionParameterDisambiguationEndedInstrumentation()(v79, v81, v82, v83, v84, v85, v86, v87, v121, v122, v123, (uint64_t)v124, v125, v126, v127, v128, v129, v130, v131,
      v132,
      v133,
      v134,
      (uint64_t)v135,
      (uint64_t)v136);
    if (v80 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v117 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v117)
      {
        swift_bridgeObjectRetain();
        uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v88 = *(void *)((char *)&dword_10 + (v80 & 0xFFFFFFFFFFFFFF8));
      if (v88)
      {
LABEL_15:
        if (v88 == 1)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v89 = OUTLINED_FUNCTION_52_6();
          os_log_type_t v90 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v89, v90))
          {
            id v91 = (uint8_t *)OUTLINED_FUNCTION_25_2();
            unint64_t v143 = OUTLINED_FUNCTION_22_3();
            *(_DWORD *)id v91 = 136315138;
            type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNValue);
            swift_bridgeObjectRetain();
            uint64_t v92 = Array.description.getter();
            unint64_t v94 = v93;
            swift_bridgeObjectRelease();
            uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v94, (uint64_t *)&v143);
            OUTLINED_FUNCTION_69_4(v95);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_29_11();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_0, v89, v90, "PromptForDisambiguationFlow successfully selected values: %s.", v91, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_7_0();
            OUTLINED_FUNCTION_7_0();
          }
          else
          {

            OUTLINED_FUNCTION_29_11();
          }
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v80 & 0xC000000000000001) == 0);
          if ((v80 & 0xC000000000000001) != 0) {
            id v108 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v108 = *(id *)(v80 + 32);
          }
          uint64_t v103 = v108;
          swift_bridgeObjectRelease();
          [v124 respondWithValue:v103];
LABEL_35:

          goto LABEL_46;
        }
        int v99 = OUTLINED_FUNCTION_52_6();
        os_log_type_t v100 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v99, v100))
        {
          uint64_t v101 = (_WORD *)OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_28_2(v101);
          _os_log_impl(&dword_0, v99, v100, "PromptForDisambiguationFlow received multiple items, reprompting...", v23, 2u);
          OUTLINED_FUNCTION_7_0();
        }

        OUTLINED_FUNCTION_87_1();
        unint64_t v143 = (unint64_t)v99;
        unint64_t v144 = v80;
        goto LABEL_44;
      }
    }
    swift_bridgeObjectRelease();
    int v99 = OUTLINED_FUNCTION_52_6();
    os_log_type_t v118 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v118))
    {
      uint64_t v119 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v119 = 0;
      _os_log_impl(&dword_0, v99, (os_log_type_t)v80, "PromptForDisambiguationFlow did not receive any valid input, reprompting...", v119, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    OUTLINED_FUNCTION_87_1();
    unint64_t v143 = (unint64_t)v99;
    unint64_t v144 = 0;
LABEL_44:
    outlined init with copy of DeviceState(v137, v102);
    char v145 = BYTE4(v123);
    OUTLINED_FUNCTION_23_6();
    id v120 = v99;
    goto LABEL_45;
  }
  if (v69 == enum case for PromptResult.error<A>(_:))
  {
    uint64_t v96 = OUTLINED_FUNCTION_44_9();
    v97(v96);
    if (*((unsigned char *)v67 + 8) == 1)
    {
      unint64_t v143 = *v67;
      char v98 = 8;
    }
    else
    {
      unint64_t v143 = *v67;
      char v98 = 9;
    }
    goto LABEL_27;
  }
  if (v69 == enum case for PromptResult.cancelled<A>(_:))
  {
    static InstrumentationUtils.emitLinkFlowCancelledInstrumentation(cancellationInitiator:)(1, v70, v71, v72, v73, v74, v75, v76, v121, v122, v123, (uint64_t)v124, v125, v126, v127, v128, v129, v130, v131,
      v132,
      v133,
      v134,
      (uint64_t)v135,
      (uint64_t)v136);
    OUTLINED_FUNCTION_51_7();
LABEL_27:
    char v145 = v98;
    OUTLINED_FUNCTION_23_6();
LABEL_45:
    OUTLINED_FUNCTION_85_3();
    swift_endAccess();
    goto LABEL_46;
  }
  if (v69 == enum case for PromptResult.unanswered<A>(_:))
  {
    static InstrumentationUtils.emitLinkFlowCancelledInstrumentation(cancellationInitiator:)(1, v70, v71, v72, v73, v74, v75, v76, v121, v122, v123, (uint64_t)v124, v125, v126, v127, v128, v129, v130, v131,
      v132,
      v133,
      v134,
      (uint64_t)v135,
      (uint64_t)v136);
    uint64_t v103 = (void *)OUTLINED_FUNCTION_52_6();
    os_log_type_t v104 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_16_11(v104))
    {
      uint64_t v105 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v105);
      OUTLINED_FUNCTION_20(&dword_0, v106, v107, "Unexpected .unanswered result from a disambiguation request.");
      OUTLINED_FUNCTION_7_0();
    }
    goto LABEL_35;
  }
  lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError();
  uint64_t v109 = OUTLINED_FUNCTION_9_6();
  OUTLINED_FUNCTION_45_9(v109, v110, 0xD00000000000002BLL);
  OUTLINED_FUNCTION_23_6();
  OUTLINED_FUNCTION_85_3();
  swift_endAccess();
  char v111 = (void *)OUTLINED_FUNCTION_52_6();
  os_log_type_t v112 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_16_11(v112))
  {
    uint64_t v113 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v113);
    OUTLINED_FUNCTION_20(&dword_0, v114, v115, "Unexpected result");
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_50_5();
  v116();
LABEL_46:
  OUTLINED_FUNCTION_27_1();
}

void closure #1 in LinkRCHFlow.createContinueInAppFlow(request:iterator:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v95 = a3;
  uint64_t v96 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v88 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v84 - v9;
  uint64_t v11 = type metadata accessor for SimpleConfirmationResponseProvider();
  uint64_t v91 = *(void *)(v11 - 8);
  uint64_t v92 = v11;
  __chkstk_darwin(v11);
  uint64_t v90 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  int v97 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v84 - v17;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  unint64_t v93 = v10;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
  unint64_t v94 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v94(v18, a1, v13);
  uint64_t v89 = v20;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    int v87 = a4;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v86 = a1;
    uint64_t v100 = v25;
    *(_DWORD *)uint64_t v24 = 136315138;
    id v85 = v24 + 4;
    lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type PromptResult<SimpleConfirmationResponseProvider> and conformance PromptResult<A>, &demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = v18;
    uint64_t v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    v29(v28, v13);
    _os_log_impl(&dword_0, v21, v22, "PromptForConfirmationFlow.createContinueInAppFlow received %s", v24, 0xCu);
    swift_arrayDestroy();
    a1 = v86;
    swift_slowDealloc();
    a4 = v87;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v30 = v18;
    uint64_t v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    v29(v30, v13);
  }

  uint64_t v31 = v13;
  outlined init with copy of DeviceState(v95, (uint64_t)&v100);
  char v104 = 2;
  uint64_t v32 = v96 + 48;
  swift_beginAccess();
  outlined assign with take of LinkRCHFlow.State((uint64_t)&v100, v32);
  swift_endAccess();
  uint64_t v33 = (uint64_t)v97;
  v94(v97, a1, v31);
  int v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v33, v31);
  if (v34 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 96))(v33, v31);
    uint64_t v43 = v90;
    uint64_t v42 = v91;
    uint64_t v44 = v92;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32))(v90, v33, v92);
    uint64_t v45 = (uint64_t)v93;
    SimpleConfirmationResponseProvider.confirmationResponse.getter();
    uint64_t v46 = type metadata accessor for ConfirmationResponse();
    if (__swift_getEnumTagSinglePayload(v45, 1, v46) != 1)
    {
      uint64_t v54 = v88;
      outlined init with copy of RunCustomIntentReadingDelegate.Templating?(v45, v88, &demangling cache variable for type metadata for ConfirmationResponse?);
      uint64_t v55 = *(void *)(v46 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v55 + 88))(v54, v46) == enum case for ConfirmationResponse.confirmed(_:))
      {
        static InstrumentationUtils.emitActionConfirmationEndedInstrumentation(isCorrectAction:)(1, v56, v57, v58, v59, v60, v61, v62, v84, v85, v86, (uint64_t)v87, v88, v89, v90, v91, v92, (uint64_t)v93, (uint64_t)v94,
          v95,
          v96,
          (uint64_t)v97,
          v98,
          v99);
        [a4 respondWithSuccess];
LABEL_19:
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
        outlined destroy of SiriWorkflowRunnerEvent?(v45, &demangling cache variable for type metadata for ConfirmationResponse?);
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v46);
    }
    static InstrumentationUtils.emitActionParameterConfirmationEndedInstrumentation(isCorrectParameter:)(0, v47, v48, v49, v50, v51, v52, v53, v84, v85, v86, (uint64_t)v87, v88, v89, v90, v91, v92, (uint64_t)v93, (uint64_t)v94,
      v95,
      v96,
      (uint64_t)v97,
      v98,
      v99);
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSError);
    id v75 = static NSError.userCancelled.getter();
    int v76 = (void *)_convertErrorToNSError(_:)();

    [a4 respondWithError:v76];
    goto LABEL_19;
  }
  int v63 = v34;
  if (v34 == enum case for PromptResult.error<A>(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 96))(v33, v31);
    swift_errorRelease();
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v64, v65))
    {
LABEL_14:

      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSError);
      id v70 = static NSError.userCancelled.getter();
      static InstrumentationUtils.emitLinkFlowFailedInstrumentation(error:)();

      id v71 = v70;
      int v72 = (void *)_convertErrorToNSError(_:)();

      [a4 respondWithError:v72];
      return;
    }
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v66 = 0;
    unint64_t v67 = "PromptForConfirmationFlow.createContinueInAppFlow received an .error result, returning error";
    uint64_t v68 = v64;
    os_log_type_t v69 = v65;
LABEL_13:
    _os_log_impl(&dword_0, v68, v69, v67, v66, 2u);
    swift_slowDealloc();
    goto LABEL_14;
  }
  if (v34 == enum case for PromptResult.cancelled<A>(_:))
  {
    static InstrumentationUtils.emitLinkFlowCancelledInstrumentation(cancellationInitiator:)(1, v35, v36, v37, v38, v39, v40, v41, v84, v85, v86, (uint64_t)v87, v88, v89, v90, v91, v92, (uint64_t)v93, (uint64_t)v94,
      v95,
      v96,
      (uint64_t)v97,
      v98,
      v99);
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSError);
    id v73 = static NSError.userCancelled.getter();
    int v74 = (void *)_convertErrorToNSError(_:)();

    [a4 respondWithError:v74];
    uint64_t v100 = 2;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    char v104 = 12;
    swift_beginAccess();
    outlined assign with take of LinkRCHFlow.State((uint64_t)&v100, v32);
    swift_endAccess();
    return;
  }
  int v77 = enum case for PromptResult.unanswered<A>(_:);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.error.getter();
  BOOL v79 = os_log_type_enabled(v64, v78);
  if (v63 == v77)
  {
    if (!v79) {
      goto LABEL_14;
    }
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v66 = 0;
    os_log_type_t v69 = v78;
    unint64_t v67 = "PromptForConfirmationFlow.createContinueInAppFlow received an .unanswered result, returning error";
    uint64_t v68 = v64;
    goto LABEL_13;
  }
  if (v79)
  {
    unint64_t v80 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v80 = 0;
    _os_log_impl(&dword_0, v64, v78, "PromptForConfirmationFlow.createContinueInAppFlow received an unknown result, returning error", v80, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSError);
  id v81 = static NSError.userCancelled.getter();
  static InstrumentationUtils.emitLinkFlowFailedInstrumentation(error:)();

  id v82 = v81;
  int v83 = (void *)_convertErrorToNSError(_:)();

  [a4 respondWithError:v83];
  v29((char *)v33, v31);
}

id static NSError.userCancelled.getter()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  id v3 = objc_allocWithZone((Class)NSError);
  return @nonobjc NSError.init(domain:code:userInfo:)(v0, v2, 3072, 0);
}

uint64_t closure #1 in LinkRCHFlow.runAppProtectionCheckFlow(completionHandler:iterator:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v54 = a5;
  uint64_t v9 = type metadata accessor for AppResolutionFlowResult();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v50 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v50 - v17;
  outlined init with copy of DeviceState(a3, (uint64_t)v56);
  char v57 = 2;
  swift_beginAccess();
  outlined assign with take of LinkRCHFlow.State((uint64_t)v56, a2 + 48);
  swift_endAccess();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v19(v18, a1, v9);
  int v20 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v18, v9);
  if (v20 == enum case for AppResolutionFlowResult.resolved(_:))
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v18, v9);
    uint64_t v21 = *(void *)v18;
LABEL_5:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.voiceCommands);
    swift_retain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      int v53 = a4;
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v55 = v21;
      type metadata accessor for App();
      lazy protocol witness table accessor for type LinkRCHFlow and conformance LinkRCHFlow(&lazy protocol witness table cache variable for type App and conformance App, 255, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      a4 = v53;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v23, v24, "#LinkRCHFlow runAppProtectionCheckFlow - resolved app: %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v28 = 1;
    return ((uint64_t (*)(uint64_t))a4)(v28);
  }
  if (v20 == enum case for AppResolutionFlowResult.resolvedWithIntent(_:))
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v18, v9);
    uint64_t v21 = *(void *)v18;

    goto LABEL_5;
  }
  if (v20 == enum case for AppResolutionFlowResult.error(_:))
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v18, v9);
    int v30 = v18[8];
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      int v35 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 138412546;
      swift_errorRetain();
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
      v56[0] = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v35 = v36;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v34 + 12) = 1024;
      LODWORD(v56[0]) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v32, v33, "#LinkRCHFlow runAppProtectionCheckFlow - error: %@; \n\t handled=%{BOOL}d",
        (uint8_t *)v34,
        0x12u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a4(0);
    return swift_errorRelease();
  }
  else
  {
    if (v20 == enum case for AppResolutionFlowResult.cancelled(_:))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.voiceCommands);
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        int v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v40 = 0;
        _os_log_impl(&dword_0, v38, v39, "#LinkRCHFlow runAppProtectionCheckFlow - cancelled", v40, 2u);
        swift_slowDealloc();
      }

      uint64_t v28 = 0;
      return ((uint64_t (*)(uint64_t))a4)(v28);
    }
    int v53 = a4;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
    v19(v16, a1, v9);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      os_log_t v51 = v42;
      uint64_t v45 = (uint8_t *)v44;
      uint64_t v52 = swift_slowAlloc();
      v56[0] = v52;
      *(_DWORD *)uint64_t v45 = 136315138;
      int v50 = v45 + 4;
      v19(v13, (uint64_t)v16, v9);
      uint64_t v46 = String.init<A>(describing:)();
      uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int v48 = *(void (**)(char *, uint64_t))(v10 + 8);
      v48(v16, v9);
      os_log_t v49 = v51;
      _os_log_impl(&dword_0, v51, v43, "#LinkRCHFlow runAppProtectionCheckFlow - received unexpected appResolutionFlowResult: %s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      int v48 = *(void (**)(char *, uint64_t))(v10 + 8);
      v48(v16, v9);
    }
    v53(0);
    return ((uint64_t (*)(char *, uint64_t))v48)(v18, v9);
  }
}

id LNEnvironment.__allocating_init(localeIdentifier:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithLocaleIdentifier:v1];

  return v2;
}

uint64_t LinkRCHFlow.deinit()
{
  swift_release();
  swift_release();
  outlined destroy of LinkRCHFlow.State(v0 + 48);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
  outlined destroy of SiriWorkflowRunnerEvent?(v0 + 168, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 208);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 248);
  return v0;
}

uint64_t LinkRCHFlow.__deallocating_deinit()
{
  LinkRCHFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.execute(completion:) in conformance LinkRCHFlow(uint64_t a1, uint64_t a2)
{
  return LinkRCHFlow.execute(completion:)(a1, a2);
}

uint64_t protocol witness for Flow.execute() in conformance LinkRCHFlow()
{
  NSString v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return LinkRCHFlow.execute()();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance LinkRCHFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = LinkRCHFlow.exitValue.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

id @nonobjc NSError.init(domain:code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }
  id v9 = [v4 initWithDomain:v7 code:a3 userInfo:v8.super.isa];

  return v9;
}

void outlined bridged method (mbnn) of @objc LNActionExecutorOptions.clientLabel.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setClientLabel:v4];
}

void specialized ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  OUTLINED_FUNCTION_36();
  uint64_t v24 = v23;
  uint64_t v48 = v25;
  uint64_t v49 = v26;
  uint64_t v28 = v27;
  char v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v37 = type metadata accessor for CATOption();
  __chkstk_darwin(v37 - 8);
  OUTLINED_FUNCTION_20_0();
  v52[3] = type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  v52[4] = &protocol witness table for RunLinkActionCATPatternsExecutor;
  v52[0] = a22;
  *(void *)(a23 + 16) = v36;
  *(void *)(a23 + 24) = v34;
  *(void *)(a23 + 32) = v32;
  outlined init with copy of DeviceState(v28, a23 + 40);
  *(unsigned char *)(a23 + 80) = v30;
  outlined init with copy of DeviceState(v24, a23 + 88);
  outlined init with copy of DeviceState(a21, a23 + 128);
  outlined init with copy of DeviceState(v28, (uint64_t)v51);
  outlined init with copy of DeviceState((uint64_t)v52, (uint64_t)v50);
  type metadata accessor for RunVoiceCommandCATs();
  id v38 = v32;
  static CATOption.defaultMode.getter();
  uint64_t v39 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v40 = CATWrapperSimple.__allocating_init(options:globals:)();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
  __swift_destroy_boxed_opaque_existential_1Tm(a21);
  __swift_destroy_boxed_opaque_existential_1Tm(v24);
  __swift_destroy_boxed_opaque_existential_1Tm(v28);
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t v41 = (void *)swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v50, v50[3]);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v42);
  OUTLINED_FUNCTION_20_0();
  uint64_t v45 = (uint64_t *)(v44 - v43);
  (*(void (**)(uint64_t))(v46 + 16))(v44 - v43);
  unint64_t v47 = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)(v51, v48, v49, v39, v40, *v45, v41);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
  *(void *)(a23 + 168) = v47;
  OUTLINED_FUNCTION_27_1();
}

uint64_t specialized LinkRCHFlow.__allocating_init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  int v25 = a5;
  uint64_t v24 = a4;
  long long v23 = a9;
  uint64_t v17 = *(void *)(a12 - 8);
  __chkstk_darwin(a11);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a6, a12);
  uint64_t v21 = specialized LinkRCHFlow.init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)(a1, a2, a3, v24, v25, (uint64_t)v19, v26, v27, v23, *((uint64_t *)&v23 + 1), a10, v20, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a6, a12);
  return v21;
}

uint64_t outlined init with copy of LinkRCHFlow.State(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of LinkRCHFlow.State(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type LinkRCHFlowError and conformance LinkRCHFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkRCHFlowError and conformance LinkRCHFlowError;
  if (!lazy protocol witness table cache variable for type LinkRCHFlowError and conformance LinkRCHFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkRCHFlowError and conformance LinkRCHFlowError);
  }
  return result;
}

uint64_t specialized LinkRCHFlow.init(action:actionMetadata:bundleId:showWhenRun:connection:workflowRunner:serviceInvoker:deviceState:overrideStrategy:outputPublisher:)(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v62 = (long long *)a8;
  uint64_t v56 = a7;
  HIDWORD(v51) = a5;
  uint64_t v58 = a4;
  uint64_t v52 = a3;
  uint64_t v57 = a11;
  uint64_t v17 = a10;
  uint64_t v18 = type metadata accessor for CATOption();
  __chkstk_darwin(v18 - 8);
  uint64_t v50 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v66[3] = a13;
  v66[4] = a14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v66);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(boxed_opaque_existential_1, a6, a13);
  *(void *)(a12 + 16) = a1;
  *(void *)(a12 + 24) = a2;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(a14 + 16);
  id v22 = a1;
  uint64_t v23 = v56;
  id v59 = v22;
  id v24 = a2;
  int v53 = boxed_opaque_existential_1;
  uint64_t v54 = a13;
  uint64_t v55 = a14;
  *(void *)(a12 + 112) = v21(a13, a14);
  *(void *)(a12 + 120) = v25;
  outlined init with copy of RunCustomIntentReadingDelegate.Templating?(v23, a12 + 168, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  uint64_t v61 = a9;
  outlined init with copy of DeviceState(a9, a12 + 208);
  uint64_t v60 = a10;
  if (a10)
  {
    uint64_t v26 = v57;
    swift_retain();
    swift_bridgeObjectRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.voiceCommands);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      char v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v30 = 0;
      _os_log_impl(&dword_0, v28, v29, "#LinkRCHFlow init - overriding strategy", v30, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    outlined init with copy of DeviceState(v61, (uint64_t)v65);
    uint64_t v26 = v57;
    outlined init with copy of DeviceState(v57, (uint64_t)v64);
    outlined init with copy of DeviceState((uint64_t)v62, (uint64_t)v63);
    type metadata accessor for RunLinkActionCATs();
    id v49 = v24;
    static CATOption.defaultMode.getter();
    uint64_t v48 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for RunLinkActionCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v31 = v23;
    uint64_t v32 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for RunLinkActionCATPatternsExecutor(0);
    static CATOption.defaultMode.getter();
    uint64_t v33 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for ShortcutsLinkRCHFlowStrategy();
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v32;
    uint64_t v23 = v31;
    specialized ShortcutsLinkRCHFlowStrategy.init(appBundleId:actionMetadata:showWhenRun:deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:outputPublisher:aceServiceInvoker:linkActionPatterns:)(v52, v58, (uint64_t)v49, BYTE4(v51) & 1, (uint64_t)v65, v48, v35, (uint64_t)v64, (uint64_t)v63, v33, v34, v47, v48, (uint64_t)v49, v50, v51, v52, (uint64_t)v53, v54,
      v55,
      v56,
      v57,
      v58);
    uint64_t v17 = v36;
  }
  *(void *)(a12 + 32) = v17;
  id v37 = [v24 systemProtocols];
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  unint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v39 = [self sessionStartingProtocol];
  char v40 = specialized Sequence<>.contains(_:)((uint64_t)v39, v38);
  swift_bridgeObjectRelease();

  if (v40)
  {
    uint64_t v41 = v21(v54, v55);
    uint64_t v43 = v42;
    type metadata accessor for LinkActivityManager();
    swift_allocObject();
    uint64_t v44 = LinkActivityManager.init(bundleId:)(v41, v43);

    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v26);
    __swift_destroy_boxed_opaque_existential_1Tm(v61);
    outlined destroy of SiriWorkflowRunnerEvent?(v23, &demangling cache variable for type metadata for SiriWorkflowRunning?);
  }
  else
  {

    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v26);
    __swift_destroy_boxed_opaque_existential_1Tm(v61);
    outlined destroy of SiriWorkflowRunnerEvent?(v23, &demangling cache variable for type metadata for SiriWorkflowRunning?);
    uint64_t v44 = 0;
  }
  uint64_t v45 = v62;
  *(void *)(a12 + 40) = v44;
  outlined init with take of AceServiceInvokerAsync(v45, a12 + 128);
  outlined init with copy of DeviceState((uint64_t)v66, a12 + 248);
  *(_OWORD *)(a12 + 48) = 0u;
  *(_OWORD *)(a12 + 64) = 0u;
  *(_OWORD *)(a12 + 80) = 0u;
  *(void *)(a12 + 96) = 0;
  *(unsigned char *)(a12 + 104) = 12;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v66);
  return a12;
}

uint64_t type metadata accessor for LinkRCHFlow()
{
  return self;
}

uint64_t partial apply for closure #4 in LinkRCHFlow.execute()(uint64_t a1)
{
  return closure #3 in LinkRCHFlow.execute()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 10);
}

uint64_t partial apply for closure #1 in LinkRCHFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  NSString v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *NSString v4 = v1;
  v4[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return closure #1 in LinkRCHFlow.execute()(v2, v3);
}

void outlined consume of LinkConnectionEvent?(void *a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    outlined consume of LinkConnectionEvent(a1, a2, a3);
  }
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_errorRelease();
  uint64_t v0 = OUTLINED_FUNCTION_66_3();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for closure #3 in LinkRCHFlow.execute()(uint64_t a1)
{
  return closure #3 in LinkRCHFlow.execute()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 8);
}

uint64_t outlined assign with take of LinkRCHFlow.State(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in LinkRCHFlow.execute()(char a1)
{
  return implicit closure #2 in implicit closure #1 in LinkRCHFlow.execute()(a1 & 1);
}

uint64_t sub_10A5E4()
{
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_66_3();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for closure #1 in LinkRCHFlow.responseFrom(event:iterator:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  NSString v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *NSString v4 = v1;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return closure #1 in LinkRCHFlow.responseFrom(event:iterator:)(v3, v0);
}

uint64_t sub_10A6AC()
{
  swift_release();

  uint64_t v1 = OUTLINED_FUNCTION_66_3();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t partial apply for closure #2 in LinkRCHFlow.responseFrom(event:iterator:)()
{
  return closure #2 in LinkRCHFlow.responseFrom(event:iterator:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void partial apply for closure #1 in LinkRCHFlow.createNeedsDisambiguationFlow(request:iterator:selectedValues:)()
{
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_1_0(v0);
  OUTLINED_FUNCTION_15_18();
  closure #1 in LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:)();
}

uint64_t partial apply for closure #1 in LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char *a9)
{
  return partial apply for closure #1 in LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:)(a1, "PromptForConfirmationFlow.createNeedsConfirmationFlow received %s", a9);
}

uint64_t sub_10A730()
{
  type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_31_12();
  unint64_t v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF8;
  OUTLINED_FUNCTION_66();
  v4();
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1Tm(v1 + v3);

  return _swift_deallocObject(v1, v3 + 40, v0);
}

uint64_t partial apply for closure #1 in LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_1_0(v3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(const char **)(v1 + v9);
  uint64_t v13 = *(void *)(v1 + v10);
  uint64_t v14 = *(void **)(v1 + v11);

  return closure #1 in LinkRCHFlow.createNeedsValueFlow(request:iterator:selectedValues:)(a1, (void *)(v1 + v8), v12, v13, v14, v1 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t partial apply for closure #1 in LinkRCHFlow.createNeedsActionConfirmationFlow(request:iterator:)(uint64_t a1)
{
  return partial apply for closure #1 in LinkRCHFlow.createNeedsConfirmationFlow(request:iterator:)(a1, "PromptForConfirmationFlow.createNeedsActionConfirmationFlow received %s", "LinkRCHFlowNeedsActionConfirmation", static InstrumentationUtils.emitActionConfirmationEndedInstrumentation(isCorrectAction:), 7);
}

#error "10A930: call analysis failed (funcsize=37)"

uint64_t sub_10A94C()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);

  return _swift_deallocObject(v0, 72, 7);
}

void partial apply for closure #1 in LinkRCHFlow.createContinueInAppFlow(request:iterator:)(uint64_t a1)
{
  closure #1 in LinkRCHFlow.createContinueInAppFlow(request:iterator:)(a1, *(void *)(v1 + 16), v1 + 24, *(void **)(v1 + 64));
}

uint64_t objectdestroy_17Tm()
{
  type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_31_12();
  unint64_t v3 = (v2 + 47) & 0xFFFFFFFFFFFFFFF8;
  OUTLINED_FUNCTION_66();
  v4();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + v2);

  return _swift_deallocObject(v1, v3 + 8, v0);
}

void partial apply for closure #1 in LinkRCHFlow.createDismbiguatingNeedsValueFlow(request:actionParameterMetadata:iterator:selectedValues:)()
{
}

uint64_t base witness table accessor for Flow in LinkRCHFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkRCHFlow and conformance LinkRCHFlow(&lazy protocol witness table cache variable for type LinkRCHFlow and conformance LinkRCHFlow, a2, (void (*)(uint64_t))type metadata accessor for LinkRCHFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in LinkRCHFlow(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkRCHFlow and conformance LinkRCHFlow(&lazy protocol witness table cache variable for type LinkRCHFlow and conformance LinkRCHFlow, a2, (void (*)(uint64_t))type metadata accessor for LinkRCHFlow);
}

uint64_t initializeBufferWithCopyOfBuffer for LinkRCHFlowResult(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of LinkRCHFlowResult(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for LinkRCHFlowResult(uint64_t a1)
{
}

void outlined consume of LinkRCHFlowResult(id a1, char a2)
{
  if (a2 == 2 || a2 == 1)
  {
    swift_errorRelease();
  }
  else if (!a2)
  {
  }
}

uint64_t assignWithCopy for LinkRCHFlowResult(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of LinkRCHFlowResult(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of LinkRCHFlowResult(v5, v6);
  return a1;
}

uint64_t assignWithTake for LinkRCHFlowResult(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of LinkRCHFlowResult(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for LinkRCHFlowResult()
{
  return &type metadata for LinkRCHFlowResult;
}

void *initializeBufferWithCopyOfBuffer for LinkRCHFlowError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for LinkRCHFlowError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for LinkRCHFlowError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for LinkRCHFlowError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkRCHFlowError(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkRCHFlowError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkRCHFlowError()
{
  return &type metadata for LinkRCHFlowError;
}

void destroy for LinkRCHFlow.State(uint64_t a1)
{
  uint64_t v1 = a1;
  unsigned int v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 >= 0xC) {
    unsigned int v2 = *(_DWORD *)a1 + 12;
  }
  switch(v2)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
      goto LABEL_9;
    case 4u:
    case 6u:

      swift_bridgeObjectRelease();
      uint64_t v3 = v1 + 16;
      goto LABEL_10;
    case 5u:
    case 7u:
      uint64_t v1 = a1 + 8;

LABEL_9:
      uint64_t v3 = v1;
LABEL_10:
      __swift_destroy_boxed_opaque_existential_1Tm(v3);
      break;
    case 8u:
    case 9u:
    case 0xAu:
      swift_errorRelease();
      break;
    case 0xBu:
      id v4 = *(id *)a1;

      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for LinkRCHFlow.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 56);
  if (v3 >= 0xC) {
    unsigned int v3 = *(_DWORD *)a2 + 12;
  }
  switch(v3)
  {
    case 0u:
      long long v4 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t))(v4 - 8))(a1);
      *(unsigned char *)(a1 + 56) = 0;
      return a1;
    case 1u:
      long long v5 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t))(v5 - 8))(a1);
      char v6 = 1;
      goto LABEL_15;
    case 2u:
      long long v7 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v7;
      (**(void (***)(uint64_t))(v7 - 8))(a1);
      char v6 = 2;
      goto LABEL_15;
    case 3u:
      long long v8 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t))(v8 - 8))(a1);
      char v6 = 3;
      goto LABEL_15;
    case 4u:
      unint64_t v9 = (void *)*a2;
      uint64_t v10 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v10;
      unint64_t v11 = a2 + 2;
      long long v12 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 40) = v12;
      uint64_t v13 = v12;
      uint64_t v14 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v12 - 8);
      id v15 = v9;
      swift_bridgeObjectRetain();
      v14(a1 + 16, v11, v13);
      char v6 = 4;
      goto LABEL_15;
    case 5u:
      uint64_t v16 = (void *)*a2;
      *(void *)a1 = *a2;
      uint64_t v17 = a2 + 1;
      long long v18 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 32) = v18;
      uint64_t v19 = v18;
      uint64_t v20 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v18 - 8);
      id v21 = v16;
      v20(a1 + 8, v17, v19);
      char v6 = 5;
      goto LABEL_15;
    case 6u:
      id v22 = (void *)*a2;
      uint64_t v23 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v23;
      id v24 = a2 + 2;
      long long v25 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 40) = v25;
      uint64_t v26 = v25;
      uint64_t v27 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v25 - 8);
      id v28 = v22;
      swift_bridgeObjectRetain();
      v27(a1 + 16, v24, v26);
      char v6 = 6;
      goto LABEL_15;
    case 7u:
      os_log_type_t v29 = (void *)*a2;
      *(void *)a1 = *a2;
      char v30 = a2 + 1;
      long long v31 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 32) = v31;
      uint64_t v32 = v31;
      uint64_t v33 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v31 - 8);
      id v34 = v29;
      v33(a1 + 8, v30, v32);
      char v6 = 7;
      goto LABEL_15;
    case 8u:
      uint64_t v35 = *a2;
      swift_errorRetain();
      *(void *)a1 = v35;
      char v6 = 8;
      goto LABEL_15;
    case 9u:
      uint64_t v36 = *a2;
      swift_errorRetain();
      *(void *)a1 = v36;
      char v6 = 9;
      goto LABEL_15;
    case 0xAu:
      uint64_t v37 = *a2;
      swift_errorRetain();
      *(void *)a1 = v37;
      char v6 = 10;
LABEL_15:
      *(unsigned char *)(a1 + 56) = v6;
      break;
    case 0xBu:
      id v39 = (void *)*a2;
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 56) = 11;
      id v40 = v39;
      break;
    default:
      long long v41 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v41;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for LinkRCHFlow.State(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 0xC) {
      unsigned int v4 = *(_DWORD *)a1 + 12;
    }
    switch(v4)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
        goto LABEL_8;
      case 4u:
      case 6u:

        swift_bridgeObjectRelease();
        a1 = v2 + 16;
        goto LABEL_8;
      case 5u:
      case 7u:

        a1 = v2 + 8;
LABEL_8:
        __swift_destroy_boxed_opaque_existential_1Tm(a1);
        break;
      case 8u:
      case 9u:
      case 0xAu:
        swift_errorRelease();
        break;
      case 0xBu:

        break;
      default:
        break;
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 56);
    if (v5 >= 0xC) {
      unsigned int v5 = *(_DWORD *)a2 + 12;
    }
    switch(v5)
    {
      case 0u:
        uint64_t v6 = a2[3];
        *(void *)(v2 + 24) = v6;
        *(void *)(v2 + 32) = a2[4];
        (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(v2, a2);
        *(unsigned char *)(v2 + 56) = 0;
        return v2;
      case 1u:
        uint64_t v10 = a2[3];
        *(void *)(v2 + 24) = v10;
        *(void *)(v2 + 32) = a2[4];
        (**(void (***)(uint64_t, uint64_t *))(v10 - 8))(v2, a2);
        char v11 = 1;
        goto LABEL_25;
      case 2u:
        uint64_t v12 = a2[3];
        *(void *)(v2 + 24) = v12;
        *(void *)(v2 + 32) = a2[4];
        (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(v2, a2);
        char v11 = 2;
        goto LABEL_25;
      case 3u:
        uint64_t v13 = a2[3];
        *(void *)(v2 + 24) = v13;
        *(void *)(v2 + 32) = a2[4];
        (**(void (***)(uint64_t, uint64_t *))(v13 - 8))(v2, a2);
        char v11 = 3;
        goto LABEL_25;
      case 4u:
        uint64_t v14 = (void *)*a2;
        *(void *)uint64_t v2 = *a2;
        *(void *)(v2 + 8) = a2[1];
        id v15 = a2 + 2;
        uint64_t v16 = a2[5];
        *(void *)(v2 + 40) = v16;
        *(void *)(v2 + 48) = a2[6];
        uint64_t v17 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v16 - 8);
        id v18 = v14;
        swift_bridgeObjectRetain();
        v17(v2 + 16, v15, v16);
        char v11 = 4;
        goto LABEL_25;
      case 5u:
        uint64_t v19 = (void *)*a2;
        *(void *)uint64_t v2 = *a2;
        uint64_t v20 = a2 + 1;
        uint64_t v21 = a2[4];
        *(void *)(v2 + 32) = v21;
        *(void *)(v2 + 40) = a2[5];
        id v22 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v21 - 8);
        id v23 = v19;
        v22(v2 + 8, v20, v21);
        char v11 = 5;
        goto LABEL_25;
      case 6u:
        id v24 = (void *)*a2;
        *(void *)uint64_t v2 = *a2;
        *(void *)(v2 + 8) = a2[1];
        long long v25 = a2 + 2;
        uint64_t v26 = a2[5];
        *(void *)(v2 + 40) = v26;
        *(void *)(v2 + 48) = a2[6];
        uint64_t v27 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v26 - 8);
        id v28 = v24;
        swift_bridgeObjectRetain();
        v27(v2 + 16, v25, v26);
        char v11 = 6;
        goto LABEL_25;
      case 7u:
        os_log_type_t v29 = (void *)*a2;
        *(void *)uint64_t v2 = *a2;
        char v30 = a2 + 1;
        uint64_t v31 = a2[4];
        *(void *)(v2 + 32) = v31;
        *(void *)(v2 + 40) = a2[5];
        uint64_t v32 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v31 - 8);
        id v33 = v29;
        v32(v2 + 8, v30, v31);
        char v11 = 7;
        goto LABEL_25;
      case 8u:
        uint64_t v34 = *a2;
        swift_errorRetain();
        *(void *)uint64_t v2 = v34;
        char v11 = 8;
        goto LABEL_25;
      case 9u:
        uint64_t v35 = *a2;
        swift_errorRetain();
        *(void *)uint64_t v2 = v35;
        char v11 = 9;
        goto LABEL_25;
      case 0xAu:
        uint64_t v36 = *a2;
        swift_errorRetain();
        *(void *)uint64_t v2 = v36;
        char v11 = 10;
LABEL_25:
        *(unsigned char *)(v2 + 56) = v11;
        break;
      case 0xBu:
        unint64_t v38 = (void *)*a2;
        *(void *)uint64_t v2 = *a2;
        *(unsigned char *)(v2 + 56) = 11;
        id v39 = v38;
        break;
      default:
        long long v7 = *(_OWORD *)a2;
        long long v8 = *((_OWORD *)a2 + 1);
        long long v9 = *((_OWORD *)a2 + 2);
        *(_OWORD *)(v2 + 41) = *(_OWORD *)((char *)a2 + 41);
        *(_OWORD *)(v2 + 16) = v8;
        *(_OWORD *)(v2 + 32) = v9;
        *(_OWORD *)uint64_t v2 = v7;
        break;
    }
  }
  return v2;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LinkRCHFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 0xC) {
      unsigned int v4 = *(_DWORD *)a1 + 12;
    }
    switch(v4)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
        goto LABEL_8;
      case 4u:
      case 6u:

        swift_bridgeObjectRelease();
        a1 = v2 + 16;
        goto LABEL_8;
      case 5u:
      case 7u:

        a1 = v2 + 8;
LABEL_8:
        __swift_destroy_boxed_opaque_existential_1Tm(a1);
        break;
      case 8u:
      case 9u:
      case 0xAu:
        swift_errorRelease();
        break;
      case 0xBu:

        break;
      default:
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 0xC) {
      unsigned int v5 = *(_DWORD *)a2 + 12;
    }
    switch(v5)
    {
      case 0u:
        long long v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v6;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(v2 + 56) = 0;
        return v2;
      case 1u:
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v8;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        char v9 = 1;
        goto LABEL_26;
      case 2u:
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v10;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        char v9 = 2;
        goto LABEL_26;
      case 3u:
        long long v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v11;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        char v9 = 3;
        goto LABEL_26;
      case 4u:
        long long v12 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v12;
        *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
        *(void *)(v2 + 48) = *(void *)(a2 + 48);
        char v9 = 4;
        goto LABEL_26;
      case 5u:
        long long v13 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v13;
        *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
        char v9 = 5;
        goto LABEL_26;
      case 6u:
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v14;
        *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
        *(void *)(v2 + 48) = *(void *)(a2 + 48);
        char v9 = 6;
        goto LABEL_26;
      case 7u:
        long long v15 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v15;
        *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
        char v9 = 7;
        goto LABEL_26;
      case 8u:
        *(void *)uint64_t v2 = *(void *)a2;
        char v9 = 8;
        goto LABEL_26;
      case 9u:
        *(void *)uint64_t v2 = *(void *)a2;
        char v9 = 9;
        goto LABEL_26;
      case 0xAu:
        *(void *)uint64_t v2 = *(void *)a2;
        char v9 = 10;
        goto LABEL_26;
      case 0xBu:
        *(void *)uint64_t v2 = *(void *)a2;
        char v9 = 11;
LABEL_26:
        *(unsigned char *)(v2 + 56) = v9;
        break;
      default:
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v7;
        *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(v2 + 41) = *(_OWORD *)(a2 + 41);
        break;
    }
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for LinkRCHFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF4 && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 0xD) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LinkRCHFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 244;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for LinkRCHFlow.State(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 56);
  if (result >= 0xC) {
    return (*(_DWORD *)a1 + 12);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for LinkRCHFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 > 0xB)
  {
    *(void *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 12;
    LOBYTE(a2) = 12;
  }
  *(unsigned char *)(result + 56) = a2;
  return result;
}

void *type metadata accessor for LinkRCHFlow.State()
{
  return &unk_28C4D8;
}

uint64_t sub_10BACC()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t partial apply for closure #1 in LinkRCHFlow.runAppProtectionCheckFlow(completionHandler:iterator:)(uint64_t a1)
{
  return closure #1 in LinkRCHFlow.runAppProtectionCheckFlow(completionHandler:iterator:)(a1, *(void *)(v1 + 16), v1 + 24, *(void (**)(void))(v1 + 64), *(void *)(v1 + 72));
}

uint64_t lazy protocol witness table accessor for type LinkRCHFlow and conformance LinkRCHFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void OUTLINED_FUNCTION_6_27(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 232) = v9;
  *(void *)(v10 - 224) = (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

id OUTLINED_FUNCTION_9_30()
{
  uint64_t v2 = *(void **)(v0 + 136);
  return v2;
}

uint64_t OUTLINED_FUNCTION_13_25(uint64_t a1)
{
  return a1 + v1;
}

void OUTLINED_FUNCTION_16_20()
{
  static InstrumentationUtils.emitLinkFlowStartedInstrumentation(targetBundle:action:)();
}

uint64_t OUTLINED_FUNCTION_23_18()
{
  return type metadata accessor for OSSignposter();
}

uint64_t OUTLINED_FUNCTION_24_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_13()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t OUTLINED_FUNCTION_32_14@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + v2) = *(void *)(a1 - 256);
  *(void *)(v1 + v4) = v3;
  outlined init with take of AceServiceInvokerAsync((long long *)(v7 - 152), v1 + v5);
  *(void *)(v1 + v6) = *(void *)(v7 - 280);
  return swift_retain();
}

void OUTLINED_FUNCTION_35_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_36_13(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_37_13()
{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)();
}

uint64_t OUTLINED_FUNCTION_40_12()
{
  outlined init with take of AceServiceInvokerAsync((long long *)(v1 + 96), v0);
  return v2;
}

uint64_t OUTLINED_FUNCTION_41_12(uint64_t a1)
{
  *(void *)(v1 - 240) = a1;
  uint64_t v3 = *(void *)(v1 - 216);
  return outlined init with copy of DeviceState(v3, v1 - 152);
}

uint64_t OUTLINED_FUNCTION_44_9()
{
  return *(void *)(v0 - 184);
}

uint64_t OUTLINED_FUNCTION_45_9@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *a2 = a3;
  a2[1] = (v3 - 32) | 0x8000000000000000;
  *(void *)(v4 - 152) = result;
  *(unsigned char *)(v4 - 96) = 9;
  return result;
}

uint64_t OUTLINED_FUNCTION_49_8()
{
  return outlined assign with take of LinkRCHFlow.State(v1 - 152, v0);
}

double OUTLINED_FUNCTION_51_7()
{
  *(void *)(v0 - 152) = 2;
  double result = 0.0;
  *(_OWORD *)(v0 - 144) = 0u;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_52_6()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_53_4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_54_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_55_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_57_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_60_2(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

uint64_t OUTLINED_FUNCTION_61_4()
{
  return v0;
}

void OUTLINED_FUNCTION_62_3()
{
  uint64_t v2 = *(void **)(v0 + 776);
  uint64_t v3 = *(void *)(v0 + 784);
  char v4 = *(unsigned char *)(v0 + 792);
  outlined consume of LinkConnectionEvent?(v2, v3, v4);
}

void OUTLINED_FUNCTION_63_3()
{
  outlined consume of LinkConnectionEvent(v2, v1, v0);
  outlined consume of LinkConnectionEvent(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_65_4()
{
  outlined init with take of AceServiceInvokerAsync((long long *)(v1 + 88), v0);
  return v2;
}

uint64_t OUTLINED_FUNCTION_66_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_68_3()
{
  return *(void *)(v0 - 224);
}

uint64_t OUTLINED_FUNCTION_69_4(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

uint64_t OUTLINED_FUNCTION_72_4()
{
  *(void *)(v3 - 208) = v1;
  *(void *)(v3 - 200) = v0;
  return v2;
}

uint64_t OUTLINED_FUNCTION_77_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_79_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_81_3(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 152));
}

uint64_t OUTLINED_FUNCTION_84_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_85_3()
{
  return outlined assign with take of LinkRCHFlow.State(v1 - 152, v0);
}

uint64_t OUTLINED_FUNCTION_86_2()
{
  return outlined init with copy of DeviceState(v0, v1 - 152);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::Properties_optional __swiftcall AutoShortcutCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AutoShortcutCATsSimple.Properties.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v1 >= 0xC) {
    return (SiriLinkFlowPlugin::AutoShortcutCATsSimple::Properties_optional)12;
  }
  else {
    return (SiriLinkFlowPlugin::AutoShortcutCATsSimple::Properties_optional)v1;
  }
}

void AutoShortcutCATsSimple.Properties.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      OUTLINED_FUNCTION_52();
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.Properties()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  AutoShortcutCATsSimple.Properties.rawValue.getter(v1);
  *uint64_t v0 = v2;
  v0[1] = v3;
}

uint64_t AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_45_10(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(void);
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;

  OUTLINED_FUNCTION_27_3();
  uint64_t v17 = v3;
  OUTLINED_FUNCTION_21_0();
  uint64_t v4 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_76_3();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_40_11(v5);
  uint64_t v7 = OUTLINED_FUNCTION_1_2(v6, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[7] = 0;
    v2[8] = 0;
  }
  OUTLINED_FUNCTION_6_28(v7);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v9);
  if (v10)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_9_7();
    v11();
    swift_retain();
  }
  long long v12 = *(unsigned char *)(v0 + 72);
  v2[16] = 0xD000000000000011;
  v2[17] = 0x80000000002292F0;
  OUTLINED_FUNCTION_71_4(v12);
  long long v13 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 56) = v13;
  *long long v13 = v0;
  v13[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  long long v14 = OUTLINED_FUNCTION_52_7(0xD000000000000018);
  return v15(v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppDisabledDialogIds_optional __swiftcall AutoShortcutCATsSimple.AppDisabledDialogIds.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AutoShortcutCATsSimple.AppDisabledDialogIds.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v1 >= 4) {
    return (SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppDisabledDialogIds_optional)4;
  }
  else {
    return (SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppDisabledDialogIds_optional)v1;
  }
}

uint64_t AutoShortcutCATsSimple.AppDisabledDialogIds.rawValue.getter(char a1)
{
  uint64_t result = 0x64656C6261736964;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_32_15();
      break;
    case 2:
      uint64_t result = 0x6C62616E45736177;
      break;
    case 3:
      uint64_t result = 0x7361576863746177;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.AppDisabledDialogIds(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.AppDisabledDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.AppDisabledDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.AppDisabledDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppDisabledDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.AppDisabledDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppDisabledDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.AppDisabledDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.AppDisabledDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = AutoShortcutCATsSimple.AppDisabledDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t AutoShortcutCATsSimple.appDisabledAsLabels(device:appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_45_10(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(void);
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v16)(void);
  uint64_t v17;

  OUTLINED_FUNCTION_27_3();
  uint64_t v17 = v3;
  OUTLINED_FUNCTION_21_0();
  uint64_t v4 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_76_3();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_40_11(v5);
  uint64_t v7 = OUTLINED_FUNCTION_1_2(v6, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[7] = 0;
    v2[8] = 0;
  }
  OUTLINED_FUNCTION_6_28(v7);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v9);
  if (v10)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_9_7();
    v11();
    swift_retain();
  }
  long long v12 = *(unsigned char *)(v0 + 72);
  v2[16] = 0xD000000000000011;
  v2[17] = 0x80000000002292F0;
  OUTLINED_FUNCTION_71_4(v12);
  long long v13 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 56) = v13;
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds();
  OUTLINED_FUNCTION_44();
  *long long v13 = v14;
  v13[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_52();
  return v16();
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppDisabledDialogIds and conformance AutoShortcutCATsSimple.AppDisabledDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.appEnabled(device:appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_45_10(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(void);
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;

  OUTLINED_FUNCTION_27_3();
  uint64_t v17 = v3;
  OUTLINED_FUNCTION_21_0();
  uint64_t v4 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_76_3();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_40_11(v5);
  uint64_t v7 = OUTLINED_FUNCTION_1_2(v6, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[7] = 0;
    v2[8] = 0;
  }
  OUTLINED_FUNCTION_6_28(v7);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v9);
  if (v10)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_9_7();
    v11();
    swift_retain();
  }
  long long v12 = *(unsigned char *)(v0 + 72);
  v2[16] = 0xD000000000000011;
  v2[17] = 0x80000000002292F0;
  OUTLINED_FUNCTION_71_4(v12);
  long long v13 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 56) = v13;
  *long long v13 = v0;
  v13[1] = AutoShortcutCATsSimple.appEnabled(device:appName:wasAlreadyEnabled:);
  long long v14 = OUTLINED_FUNCTION_52_7(0xD000000000000017);
  return v15(v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppEnabledDialogIds_optional __swiftcall AutoShortcutCATsSimple.AppEnabledDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.AppEnabledDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppEnabledDialogIds_optional)RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t AutoShortcutCATsSimple.AppEnabledDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x64656C62616E65;
  }
  if (a1 == 1) {
    return 0x6C62616E45736177;
  }
  return 0x6863746177;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.AppEnabledDialogIds(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.AppEnabledDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.AppEnabledDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.AppEnabledDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppEnabledDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.AppEnabledDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::AppEnabledDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.AppEnabledDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.AppEnabledDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = AutoShortcutCATsSimple.AppEnabledDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t AutoShortcutCATsSimple.appEnabledAsLabels(device:appName:wasAlreadyEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_45_10(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(void);
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v16)(void);
  uint64_t v17;

  OUTLINED_FUNCTION_27_3();
  uint64_t v17 = v3;
  OUTLINED_FUNCTION_21_0();
  uint64_t v4 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_76_3();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_40_11(v5);
  uint64_t v7 = OUTLINED_FUNCTION_1_2(v6, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[7] = 0;
    v2[8] = 0;
  }
  OUTLINED_FUNCTION_6_28(v7);
  OUTLINED_FUNCTION_22_8(&demangling cache variable for type metadata for SpeakableString?, v8);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_23(v9);
  if (v10)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_9_7();
    v11();
    swift_retain();
  }
  long long v12 = *(unsigned char *)(v0 + 72);
  v2[16] = 0xD000000000000011;
  v2[17] = 0x80000000002292F0;
  OUTLINED_FUNCTION_71_4(v12);
  long long v13 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 56) = v13;
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds();
  OUTLINED_FUNCTION_44();
  *long long v13 = v14;
  v13[1] = AutoShortcutCATsSimple.appDisabled(device:appName:wasAlreadyEnabled:);
  OUTLINED_FUNCTION_52();
  return v16();
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.AppEnabledDialogIds and conformance AutoShortcutCATsSimple.AppEnabledDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablement(appName:isEnabling:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_72_5(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_38_2();
  char v2 = (__n128 *)OUTLINED_FUNCTION_33_5(v1);
  uint64_t v3 = OUTLINED_FUNCTION_13_26(v2, (__n128)xmmword_212170);
  OUTLINED_FUNCTION_25_5((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  OUTLINED_FUNCTION_38_12();
  OUTLINED_FUNCTION_67_4(v8);
  uint64_t v9 = OUTLINED_FUNCTION_59();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_58_1(v9);
  *uint64_t v10 = v11;
  v10[1] = AutoShortcutCATsSimple.confirmChangeEnablement(appName:isEnabling:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(36);
  OUTLINED_FUNCTION_23_1();
  return v15(v12, v13, v14, v15, v16, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDialogIds_optional __swiftcall AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x656C62616E65;
  }
  else {
    return 0x656C6261736964;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablementAsLabels(appName:isEnabling:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_72_5(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 *v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v2 = OUTLINED_FUNCTION_38_2();
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_33_5(v2);
  uint64_t v4 = OUTLINED_FUNCTION_13_26(v3, (__n128)xmmword_212170);
  OUTLINED_FUNCTION_25_5((uint64_t)v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_10_15();
    v8();
  }
  OUTLINED_FUNCTION_38_12();
  OUTLINED_FUNCTION_67_4(v9);
  uint64_t v10 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_55_1(v10);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v0 = v11;
  v0[1] = AutoShortcutCATsSimple.confirmChangeEnablementAsLabels(appName:isEnabling:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(36);
  OUTLINED_FUNCTION_23_1();
  return v17(v12, v13, v14, v15, v16, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablementDeclined(appName:isEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_72_5(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_38_2();
  char v2 = (__n128 *)OUTLINED_FUNCTION_33_5(v1);
  uint64_t v3 = OUTLINED_FUNCTION_13_26(v2, (__n128)xmmword_212170);
  OUTLINED_FUNCTION_25_5((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  OUTLINED_FUNCTION_37_14();
  OUTLINED_FUNCTION_67_4(v8);
  uint64_t v9 = OUTLINED_FUNCTION_59();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_58_1(v9);
  *uint64_t v10 = v11;
  v10[1] = AutoShortcutCATsSimple.confirmChangeEnablementAsLabels(appName:isEnabling:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(44);
  OUTLINED_FUNCTION_23_1();
  return v15(v12, v13, v14, v15, v16, v17, v18, v19);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDeclinedDialogIds_optional __swiftcall AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDeclinedDialogIds_optional)RunLinkActionCATsSimple.ActionConfirmationDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_32_15();
  }
  if (a1 == 1) {
    return 0x66664F7470656BLL;
  }
  return 0x6E4F7470656BLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDeclinedDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::ConfirmChangeEnablementDeclinedDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t AutoShortcutCATsSimple.confirmChangeEnablementDeclinedAsLabels(appName:isEnabled:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_72_5(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 *v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v2 = OUTLINED_FUNCTION_38_2();
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_33_5(v2);
  uint64_t v4 = OUTLINED_FUNCTION_13_26(v3, (__n128)xmmword_212170);
  OUTLINED_FUNCTION_25_5((uint64_t)v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_10_15();
    v8();
  }
  OUTLINED_FUNCTION_37_14();
  OUTLINED_FUNCTION_67_4(v9);
  uint64_t v10 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_55_1(v10);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v0 = v11;
  v0[1] = AutoShortcutCATsSimple.confirmChangeEnablementAsLabels(appName:isEnabling:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(44);
  OUTLINED_FUNCTION_23_1();
  return v17(v12, v13, v14, v15, v16, v17, v18, v19);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds and conformance AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.disableAndCancel()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v0 = OUTLINED_FUNCTION_59();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_21(v0);
  void *v1 = v2;
  v1[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_52();
  unint64_t v3 = OUTLINED_FUNCTION_66_4(29);
  return v4(v3);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::DisableAndCancelDialogIds_optional __swiftcall AutoShortcutCATsSimple.DisableAndCancelDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.DisableAndCancelDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::AutoShortcutCATsSimple::DisableAndCancelDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t AutoShortcutCATsSimple.DisableAndCancelDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x66664F6E727574;
  }
  else {
    return 0x6E4F657661656CLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::DisableAndCancelDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::DisableAndCancelDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.DisableAndCancelDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = AutoShortcutCATsSimple.DisableAndCancelDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = 0xE700000000000000;
  return result;
}

uint64_t AutoShortcutCATsSimple.disableAndCancelAsLabels()()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_60_3(v1);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v0 = v2;
  v0[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_52();
  return v4(0xD00000000000001DLL);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.DisableAndCancelDialogIds and conformance AutoShortcutCATsSimple.DisableAndCancelDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.enableAndCancel()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v0 = OUTLINED_FUNCTION_59();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_21(v0);
  void *v1 = v2;
  v1[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_52();
  unint64_t v3 = OUTLINED_FUNCTION_66_4(28);
  return v4(v3);
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::EnableAndCancelDialogIds_optional __swiftcall AutoShortcutCATsSimple.EnableAndCancelDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.EnableAndCancelDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::AutoShortcutCATsSimple::EnableAndCancelDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

void AutoShortcutCATsSimple.EnableAndCancelDialogIds.rawValue.getter()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::EnableAndCancelDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::EnableAndCancelDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.EnableAndCancelDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds()
{
  OUTLINED_FUNCTION_49_1();
  AutoShortcutCATsSimple.EnableAndCancelDialogIds.rawValue.getter();
  *uint64_t v0 = v1;
  v0[1] = 0xE600000000000000;
}

uint64_t AutoShortcutCATsSimple.enableAndCancelAsLabels()()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_60_3(v1);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v0 = v2;
  v0[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_52();
  unint64_t v3 = OUTLINED_FUNCTION_58_7();
  return v4(v3);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.EnableAndCancelDialogIds and conformance AutoShortcutCATsSimple.EnableAndCancelDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.firstRun(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_33_5(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = OUTLINED_FUNCTION_29_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_59();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_58_1(v8);
  *uint64_t v9 = v10;
  v9[1] = AutoShortcutCATsSimple.confirmChangeEnablementAsLabels(appName:isEnabling:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_19_7(21);
  OUTLINED_FUNCTION_23_1();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

BOOL AutoShortcutCATsSimple.FirstRunDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.FirstRunDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void AutoShortcutCATsSimple.FirstRunDialogIds.rawValue.getter()
{
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.FirstRunDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = AutoShortcutCATsSimple.FirstRunDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.FirstRunDialogIds(void *a1@<X8>)
{
}

uint64_t AutoShortcutCATsSimple.firstRunAsLabels(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  Swift::OpaquePointer v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_33_5(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = (void *)(v2 + 48);
  uint64_t v4 = OUTLINED_FUNCTION_29_14(v2);
  OUTLINED_FUNCTION_25_5(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_10_15();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_55_1(v9);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v3 = v10;
  v3[1] = AutoShortcutCATsSimple.confirmChangeEnablementAsLabels(appName:isEnabling:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(21);
  OUTLINED_FUNCTION_23_1();
  return v16(v11, v12, v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunDialogIds and conformance AutoShortcutCATsSimple.FirstRunDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.firstRunHomePod(app:firstPhrase:secondPhrase:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  int EnumTagSinglePayload;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  void (*v13)(void);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  Swift::OpaquePointer v1 = v0[8];
  uint64_t v2 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_76_3();
  v0[9] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_2138B0;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  OUTLINED_FUNCTION_29_14(v3);
  outlined init with copy of AppDisplayInfo?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_59_6(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_24_18();
  outlined init with copy of AppDisplayInfo?(v8, v1, &demangling cache variable for type metadata for SpeakableString?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v2);
  uint64_t v10 = v0[7];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[7], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 120) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v11();
  }
  long long v12 = OUTLINED_FUNCTION_27_18();
  outlined init with copy of AppDisplayInfo?(v12, v10, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v10, 1, v2) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[6], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 168) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v13();
  }
  long long v14 = (void *)OUTLINED_FUNCTION_59();
  v0[10] = v14;
  *long long v14 = v0;
  v14[1] = AutoShortcutCATsSimple.firstRunHomePod(app:firstPhrase:secondPhrase:);
  OUTLINED_FUNCTION_19_7(28);
  OUTLINED_FUNCTION_23_1();
  return v18(v15, v16, v17, v18, v19, v20, v21, v22);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::OpaquePointer v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::FirstRunHomePodDialogIds_optional __swiftcall AutoShortcutCATsSimple.FirstRunHomePodDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.FirstRunHomePodDialogIds.init(rawValue:);
  return (SiriLinkFlowPlugin::AutoShortcutCATsSimple::FirstRunHomePodDialogIds_optional)RunLinkActionCATsSimple.ContinueInAppDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t AutoShortcutCATsSimple.FirstRunHomePodDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x7845657361726870;
  }
  else {
    return 0x616D7269666E6F63;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::AutoShortcutCATsSimple::FirstRunHomePodDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::AutoShortcutCATsSimple::FirstRunHomePodDialogIds_optional *a2@<X8>)
{
  result.value = AutoShortcutCATsSimple.FirstRunHomePodDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = AutoShortcutCATsSimple.FirstRunHomePodDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t AutoShortcutCATsSimple.firstRunHomePodAsLabels(app:firstPhrase:secondPhrase:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  int EnumTagSinglePayload;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  void (*v13)(void);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  char v1 = v0[8];
  uint64_t v2 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_76_3();
  v0[9] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_2138B0;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  OUTLINED_FUNCTION_29_14(v3);
  outlined init with copy of AppDisplayInfo?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_59_6(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_24_18();
  outlined init with copy of AppDisplayInfo?(v8, v1, &demangling cache variable for type metadata for SpeakableString?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v2);
  uint64_t v10 = v0[7];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[7], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 120) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v11();
  }
  long long v12 = OUTLINED_FUNCTION_27_18();
  outlined init with copy of AppDisplayInfo?(v12, v10, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v10, 1, v2) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[6], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 168) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v13();
  }
  long long v14 = (void *)OUTLINED_FUNCTION_59();
  v0[10] = v14;
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds();
  OUTLINED_FUNCTION_44();
  *long long v14 = v15;
  v14[1] = AutoShortcutCATsSimple.firstRunHomePodAsLabels(app:firstPhrase:secondPhrase:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(28);
  OUTLINED_FUNCTION_23_1();
  return v21(v16, v17, v18, v19, v20, v21, v22, v23);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.FirstRunHomePodDialogIds and conformance AutoShortcutCATsSimple.FirstRunHomePodDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.moreShortcuts(numberOfShortcuts:)(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 56) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutCATsSimple.moreShortcuts(numberOfShortcuts:));
}

uint64_t AutoShortcutCATsSimple.moreShortcuts(numberOfShortcuts:)()
{
  OUTLINED_FUNCTION_14_0();
  char v1 = *(unsigned char *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_50_0();
  uint64_t v3 = v2;
  *(void *)(v0 + 32) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  *(void *)(v2 + 32) = 0xD000000000000011;
  *(void *)(v2 + 40) = 0x8000000000229310;
  if (v1)
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v5 = &type metadata for Double;
  }
  *(void *)(v2 + 72) = v5;
  *(void *)(v2 + 48) = v4;
  uint64_t v6 = (void *)OUTLINED_FUNCTION_59();
  *(void *)(v0 + 40) = v6;
  *uint64_t v6 = v0;
  v6[1] = AutoShortcutCATsSimple.moreShortcuts(numberOfShortcuts:);
  return v8(0xD00000000000001ALL, 0x8000000000224360, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL AutoShortcutCATsSimple.MoreShortcutsDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.MoreShortcutsDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t AutoShortcutCATsSimple.MoreShortcutsDialogIds.rawValue.getter()
{
  return 1701998445;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = AutoShortcutCATsSimple.MoreShortcutsDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds(void *a1@<X8>)
{
}

uint64_t AutoShortcutCATsSimple.moreShortcutsAsLabels(numberOfShortcuts:)(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 56) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  return OUTLINED_FUNCTION_2_3((uint64_t)AutoShortcutCATsSimple.moreShortcutsAsLabels(numberOfShortcuts:));
}

uint64_t AutoShortcutCATsSimple.moreShortcutsAsLabels(numberOfShortcuts:)()
{
  OUTLINED_FUNCTION_13_1();
  char v1 = *(unsigned char *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_50_0();
  *(void *)(v0 + 32) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  *(void *)(v2 + 32) = 0xD000000000000011;
  *(void *)(v2 + 40) = 0x8000000000229310;
  if (v1)
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = &type metadata for Double;
  }
  *(void *)(v2 + 72) = v4;
  *(void *)(v2 + 48) = v3;
  uint64_t v5 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 40) = v5;
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v5 = v6;
  v5[1] = AutoShortcutCATsSimple.moreShortcutsAsLabels(numberOfShortcuts:);
  OUTLINED_FUNCTION_52();
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.MoreShortcutsDialogIds and conformance AutoShortcutCATsSimple.MoreShortcutsDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.openInShortcuts()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v0 = OUTLINED_FUNCTION_59();
  char v1 = (void *)OUTLINED_FUNCTION_7_21(v0);
  void *v1 = v2;
  v1[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_52();
  unint64_t v3 = OUTLINED_FUNCTION_66_4(28);
  return v4(v3);
}

BOOL AutoShortcutCATsSimple.OpenInShortcutsDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.OpenInShortcutsDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = AutoShortcutCATsSimple.OpenInShortcutsDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t AutoShortcutCATsSimple.openInShortcutsAsLabels()()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_60_3(v1);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v0 = v2;
  v0[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_52();
  unint64_t v3 = OUTLINED_FUNCTION_58_7();
  return v4(v3);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.OpenInShortcutsDialogIds and conformance AutoShortcutCATsSimple.OpenInShortcutsDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.shortcutPhrases(phrase:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_33_5(v1);
  uint64_t v3 = OUTLINED_FUNCTION_42_11(v2, (__n128)xmmword_212160);
  OUTLINED_FUNCTION_25_5((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_59();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_58_1(v8);
  *uint64_t v9 = v10;
  v9[1] = AutoShortcutCATsSimple.confirmChangeEnablement(appName:isEnabling:);
  OUTLINED_FUNCTION_19_7(28);
  OUTLINED_FUNCTION_23_1();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

BOOL AutoShortcutCATsSimple.ShortcutPhrasesDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.ShortcutPhrasesDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

uint64_t AutoShortcutCATsSimple.ShortcutPhrasesDialogIds.rawValue.getter()
{
  return 0x73657361726870;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = AutoShortcutCATsSimple.ShortcutPhrasesDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds(void *a1@<X8>)
{
}

uint64_t AutoShortcutCATsSimple.shortcutPhrasesAsLabels(phrase:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 *v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_34_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_50_0();
  uint64_t v3 = (__n128 *)OUTLINED_FUNCTION_33_5(v2);
  uint64_t v4 = OUTLINED_FUNCTION_42_11(v3, (__n128)xmmword_212160);
  OUTLINED_FUNCTION_25_5((uint64_t)v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_3_15(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_12_25();
    OUTLINED_FUNCTION_10_15();
    v8();
  }
  uint64_t v9 = OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_55_1(v9);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v0 = v10;
  v0[1] = AutoShortcutCATsSimple.confirmChangeEnablementAsLabels(appName:isEnabling:);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_18_9(28);
  OUTLINED_FUNCTION_23_1();
  return v16(v11, v12, v13, v14, v15, v16, v17, v18);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.ShortcutPhrasesDialogIds and conformance AutoShortcutCATsSimple.ShortcutPhrasesDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.userDenied()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v0 = OUTLINED_FUNCTION_59();
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_7_21(v0);
  void *v1 = v2;
  v1[1] = AutoShortcutCATsSimple.userDenied();
  OUTLINED_FUNCTION_52();
  unint64_t v3 = OUTLINED_FUNCTION_66_4(23);
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  unint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

BOOL AutoShortcutCATsSimple.UserDeniedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AutoShortcutCATsSimple.UserDeniedDialogIds.init(rawValue:);
  return RunLinkActionCATsSimple.ActionConfirmationHeaderDialogIds.init(rawValue:)(a1, v1);
}

void AutoShortcutCATsSimple.UserDeniedDialogIds.rawValue.getter()
{
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance AutoShortcutCATsSimple.UserDeniedDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = AutoShortcutCATsSimple.UserDeniedDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutoShortcutCATsSimple.UserDeniedDialogIds(void *a1@<X8>)
{
}

uint64_t AutoShortcutCATsSimple.userDeniedAsLabels()()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_60_3(v1);
  lazy protocol witness table accessor for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds();
  OUTLINED_FUNCTION_44();
  *uint64_t v0 = v2;
  v0[1] = AutoShortcutCATsSimple.disableAndCancelAsLabels();
  OUTLINED_FUNCTION_52();
  return v4(0xD000000000000017);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.UserDeniedDialogIds and conformance AutoShortcutCATsSimple.UserDeniedDialogIds);
  }
  return result;
}

uint64_t AutoShortcutCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return AutoShortcutCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t AutoShortcutCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_16(v10);
  __chkstk_darwin(v11);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t AutoShortcutCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_56();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v1;
}

uint64_t AutoShortcutCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_29_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_56();
  uint64_t v2 = OUTLINED_FUNCTION_53();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_54();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutCATsSimple.Properties and conformance AutoShortcutCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutCATsSimple.Properties and conformance AutoShortcutCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type AutoShortcutCATsSimple.Properties and conformance AutoShortcutCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutCATsSimple.Properties and conformance AutoShortcutCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for AutoShortcutCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for AutoShortcutCATsSimple;
  if (!type metadata singleton initialization cache for AutoShortcutCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AutoShortcutCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AutoShortcutCATsSimple()
{
  return type metadata accessor for AutoShortcutCATsSimple();
}

uint64_t getEnumTagSinglePayload for AutoShortcutCATsSimple.Properties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x110484);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

void type metadata accessor for AutoShortcutCATsSimple.Properties()
{
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutCATsSimple.AppDisabledDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x110584);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for AutoShortcutCATsSimple.AppDisabledDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.AppEnabledDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutCATsSimple.AppEnabledDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1106A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for AutoShortcutCATsSimple.ConfirmChangeEnablementDeclinedDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.DisableAndCancelDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.EnableAndCancelDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.FirstRunDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutCATsSimple.ConfirmChangeEnablementDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1107CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for AutoShortcutCATsSimple.FirstRunHomePodDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.MoreShortcutsDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.OpenInShortcutsDialogIds()
{
}

void type metadata accessor for AutoShortcutCATsSimple.ShortcutPhrasesDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutCATsSimple.FirstRunDialogIds(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1108C0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for AutoShortcutCATsSimple.UserDeniedDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_6_28(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x656D614E707061;
  v2[11] = 0xE700000000000000;
  return result;
}

__n128 *OUTLINED_FUNCTION_13_26(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x656D614E707061;
  result[2].n128_u64[1] = 0xE700000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_24_18()
{
  uint64_t result = *(void *)(v0 + 24);
  *(void *)(v1 + 80) = 0x7268507473726966;
  *(void *)(v1 + 88) = 0xEB00000000657361;
  return result;
}

uint64_t OUTLINED_FUNCTION_27_18()
{
  uint64_t result = *(void *)(v0 + 32);
  strcpy((char *)(v1 + 128), "secondPhrase");
  *(unsigned char *)(v1 + 141) = 0;
  *(_WORD *)(v1 + 142) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_29_14(uint64_t result)
{
  *(void *)(result + 32) = 7368801;
  *(void *)(result + 40) = 0xE300000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_32_15()
{
  return 0x6D69547473726966;
}

void OUTLINED_FUNCTION_37_14()
{
  *(void *)(v0 + 80) = 0x656C62616E457369;
  *(void *)(v0 + 88) = 0xE900000000000064;
}

void OUTLINED_FUNCTION_38_12()
{
  *(void *)(v0 + 80) = 0x696C62616E457369;
  *(void *)(v0 + 88) = 0xEA0000000000676ELL;
}

__n128 *OUTLINED_FUNCTION_42_11(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x657361726870;
  result[2].n128_u64[1] = 0xE600000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_45_10(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 72) = a3;
  *(void *)(v4 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_52_7@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

unint64_t OUTLINED_FUNCTION_58_7()
{
  return 0xD00000000000001CLL;
}

uint64_t OUTLINED_FUNCTION_59_6(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_60_3(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

unint64_t OUTLINED_FUNCTION_66_4(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

void OUTLINED_FUNCTION_67_4(char a1@<W8>)
{
  *(void *)(v2 + 120) = v1;
  *(unsigned char *)(v2 + 96) = a1;
}

void OUTLINED_FUNCTION_71_4(char a1@<W8>)
{
  *(void *)(v2 + 168) = v1;
  *(unsigned char *)(v2 + 144) = a1;
}

uint64_t OUTLINED_FUNCTION_72_5(uint64_t result, char a2)
{
  *(unsigned char *)(v3 + 64) = a2;
  *(void *)(v3 + 16) = result;
  *(void *)(v3 + 24) = v2;
  return result;
}

uint64_t SiriWorkflowRunnerEvent.name.getter()
{
  type metadata accessor for SiriWorkflowRunnerEvent(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_20_0();
  uint64_t v3 = v2 - v1;
  uint64_t v4 = OUTLINED_FUNCTION_19();
  outlined init with copy of SiriWorkflowRunnerEvent(v4, v5, v6);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined destroy of SiriWorkflowRunnerEvent(v3, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
      OUTLINED_FUNCTION_11_27();
      uint64_t v7 = v8 + 5;
      break;
    case 2u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, bundleId: String?, completionHandler: ()));
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for URL();
      OUTLINED_FUNCTION_6();
      (*(void (**)(uint64_t))(v9 + 8))(v3);
      uint64_t v7 = 0x4C52556E65706FLL;
      break;
    case 3u:
      outlined destroy of SiriWorkflowRunnerEvent(v3, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
      OUTLINED_FUNCTION_11_27();
      uint64_t v7 = v10 + 1;
      break;
    case 4u:
      outlined destroy of SiriWorkflowRunnerEvent(v3, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
      uint64_t v7 = 0x4965747563657865;
      break;
    case 5u:
      outlined destroy of SiriWorkflowRunnerEvent(v3, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
      uint64_t v7 = 0x6C616944776F6873;
      break;
    case 6u:
    case 0xAu:
      outlined destroy of SiriWorkflowRunnerEvent(v3, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
      uint64_t v7 = 0xD000000000000014;
      break;
    case 7u:
      outlined destroy of SiriWorkflowRunnerEvent(v3, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
      uint64_t v7 = 0x7070416E65706FLL;
      break;
    case 8u:
      outlined destroy of SiriWorkflowRunnerEvent(v3, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
      OUTLINED_FUNCTION_11_27();
      uint64_t v7 = v11 | 2;
      break;
    case 0xBu:
      outlined destroy of SiriWorkflowRunnerEvent(v3, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
      OUTLINED_FUNCTION_11_27();
      uint64_t v7 = v12 + 11;
      break;
    case 0xCu:
      outlined destroy of SiriWorkflowRunnerEvent(v3, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
      uint64_t v7 = 0x7472617453646964;
      break;
    default:
      uint64_t v7 = 0xD000000000000011;
      outlined destroy of SiriWorkflowRunnerEvent(v3, (void (*)(void))type metadata accessor for SiriWorkflowRunnerEvent);
      break;
  }
  return v7;
}

uint64_t static VoiceCmdsInstrumentations.emitWaitForRequest(type:logMessage:task:updateInfo:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v4;
  *(void *)(v0 + 16) = v5;
  *(void *)(v0 + 24) = v6;
  *(unsigned char *)(v0 + 100) = v7;
  type metadata accessor for UUID();
  *(void *)(v0 + 64) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(unsigned char *)(v0 + 100) & 1;
  type metadata accessor for SISchemaUUID();
  UUID.init()();
  uint64_t v3 = SISchemaUUID.__allocating_init(nsuuid:)(v1);
  *(void *)(v0 + 72) = v3;
  static VoiceCmdsInstrumentations.emitWaitForRequestStarted(type:contextId:)(v2, (uint64_t)v3);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static DurationUtil.computeDuration(task:logMessage:)
                                                                   + async function pointer to specialized static DurationUtil.computeDuration(task:logMessage:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  *uint64_t v4 = v0;
  v4[1] = static VoiceCmdsInstrumentations.emitWaitForRequest(type:logMessage:task:updateInfo:);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 16);
  char v7 = *(void *)(v0 + 24);
  return v10(v8, v7, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  char v7 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 88) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(_DWORD *)(v5 + 96) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 72);
  static VoiceCmdsInstrumentations.emitWaitForRequestEnded(contextId:duration:updateInfo:)((uint64_t)v1, *(unsigned int *)(v0 + 96), *(void (**)(void *))(v0 + 48));

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 72);
  static VoiceCmdsInstrumentations.emitWaitForRequestEnded(contextId:duration:updateInfo:)((uint64_t)v1, 0x100000000, *(void (**)(void *))(v0 + 48));

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id SISchemaUUID.__allocating_init(nsuuid:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v4 = [v2 initWithNSUUID:isa];

  type metadata accessor for UUID();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v5 + 8))(a1);
  return v4;
}

uint64_t WaitForRequestType.getDomainExecutionType()(char a1)
{
  if (a1) {
    return 401;
  }
  else {
    return 400;
  }
}

uint64_t static VoiceCmdsInstrumentations.emitWaitForRequestStarted(type:contextId:)(char a1, uint64_t a2)
{
  id v4 = [self sharedStream];
  id v5 = [objc_allocWithZone((Class)VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContext) init];
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = [objc_allocWithZone((Class)VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContextInfo) init];
    if (v7)
    {
      id v8 = v7;
      [v6 setContextId:a2];
      [v6 setStartedOrChanged:v8];
      [v4 emitMessage:v6];

      uint64_t v6 = v8;
    }
  }
  id v9 = [objc_allocWithZone((Class)FLOWSchemaFLOWClientEvent) init];
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = [objc_allocWithZone((Class)FLOWSchemaFLOWDomainExecutionContext) init];
    if (v11)
    {
      uint64_t v12 = v11;
      id v13 = [objc_allocWithZone((Class)FLOWSchemaFLOWDomainExecutionStarted) init];
      if (v13)
      {
        long long v14 = v13;
        if (a1) {
          uint64_t v15 = 401;
        }
        else {
          uint64_t v15 = 400;
        }
        [v13 setDomainExecutionType:v15];
        [v12 setStartedOrChanged:v14];
        [v12 setContextId:a2];
        [v10 setFlowDomainExecutionContext:v12];
        static SiriKitEventSender.current.getter();
        __swift_project_boxed_opaque_existential_1(v18, v18[3]);
        type metadata accessor for SiriKitEvent();
        id v16 = v10;
        SiriKitEvent.__allocating_init(taskType:domainPerfContext:_:)();
        dispatch thunk of SiriKitEventSending.send(_:)();
        swift_release();
        swift_unknownObjectRelease();

        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      }
    }
    else
    {
    }
  }

  return swift_unknownObjectRelease();
}

uint64_t specialized static DurationUtil.computeDuration(task:logMessage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  long long v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for DurationUtil();
  v4[6] = swift_task_alloc();
  return _swift_task_switch(specialized static DurationUtil.computeDuration(task:logMessage:), 0, 0);
}

uint64_t specialized static DurationUtil.computeDuration(task:logMessage:)()
{
  uint64_t v1 = v0[6];
  uint64_t v3 = (void *)v0[3];
  id v2 = (int *)v0[4];
  uint64_t v4 = v0[2];
  swift_bridgeObjectRetain();
  DurationUtil.init(logMessage:)(v4, v3, v1);
  id v7 = (uint64_t (*)(void))((char *)v2 + *v2);
  id v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *id v5 = v0;
  v5[1] = specialized static DurationUtil.computeDuration(task:logMessage:);
  return v7();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *id v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(__n128);
  __n128 v3;
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = *(void *)(v0 + 48);
  DurationUtil.computeDuration()();
  outlined destroy of SiriWorkflowRunnerEvent(v1, (void (*)(void))type metadata accessor for DurationUtil);
  swift_task_dealloc();
  v3.n128_f32[0] = OUTLINED_FUNCTION_10_29();
  return v2(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of SiriWorkflowRunnerEvent(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for DurationUtil);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static DurationUtil.computeDuration(task:logMessage:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[4] = v1;
  v0[5] = v2;
  v0[2] = v3;
  v0[3] = v4;
  type metadata accessor for DurationUtil();
  v0[6] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t v8;

  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = (int *)v0[2];
  swift_bridgeObjectRetain();
  DurationUtil.init(logMessage:)(v3, v1, v2);
  uint64_t v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized static DurationUtil.computeDuration(task:logMessage:);
  return v7();
}

uint64_t static VoiceCmdsInstrumentations.emitWaitForRequestEnded(contextId:duration:updateInfo:)(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  id v6 = [self sharedStream];
  id v7 = [objc_allocWithZone((Class)VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestContext) init];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [objc_allocWithZone((Class)VoiceCmdsSchemaProvisionalVoiceCmdsWaitForRequestRemovalInfo) init];
    if (v9)
    {
      uint64_t v10 = v9;
      [v8 setContextId:a1];
      a3(v10);
      if ((a2 & 0x100000000) == 0)
      {
        LODWORD(v11) = a2;
        [v10 setClockSeconds:v11];
      }
      [v8 setEnded:v10];
      [v6 emitMessage:v8];
    }
    else
    {
      uint64_t v10 = v8;
    }
  }
  id v12 = [objc_allocWithZone((Class)FLOWSchemaFLOWClientEvent) init];
  if (v12)
  {
    id v13 = v12;
    id v14 = [objc_allocWithZone((Class)FLOWSchemaFLOWDomainExecutionContext) init];
    if (v14)
    {
      uint64_t v15 = v14;
      id v16 = [objc_allocWithZone((Class)FLOWSchemaFLOWDomainExecutionEnded) init];
      if (v16)
      {
        uint64_t v17 = v16;
        [v15 setEnded:v16];
        [v15 setContextId:a1];
        [v13 setFlowDomainExecutionContext:v15];
        static SiriKitEventSender.current.getter();
        __swift_project_boxed_opaque_existential_1(v20, v20[3]);
        type metadata accessor for SiriKitEvent();
        id v18 = v13;
        SiriKitEvent.__allocating_init(taskType:domainPerfContext:_:)();
        dispatch thunk of SiriKitEventSending.send(_:)();
        swift_release();
        swift_unknownObjectRelease();

        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
      }
    }
    else
    {
    }
  }

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for DurationUtil()
{
  uint64_t result = type metadata singleton initialization cache for DurationUtil;
  if (!type metadata singleton initialization cache for DurationUtil) {
    return swift_getSingletonMetadata();
  }
  return result;
}

float Duration.asSeconds.getter()
{
  uint64_t v0 = Duration.components.getter();
  return (float)((float)v1 / 1.0e18) + (float)v0;
}

uint64_t DurationUtil.startInstant.getter()
{
  type metadata accessor for ContinuousClock.Instant();
  OUTLINED_FUNCTION_6();
  uint64_t v0 = OUTLINED_FUNCTION_19();

  return v1(v0);
}

uint64_t DurationUtil.innerMessage.getter()
{
  return OUTLINED_FUNCTION_19();
}

void DurationUtil.init(logMessage:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  static ContinuousClock.now.getter();
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  id v6 = (void *)static DurationUtil.lock;
  [(id)static DurationUtil.lock lock];
  int v7 = static DurationUtil.nextId;
  if (static DurationUtil.nextId == -1)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_7;
  }
  ++static DurationUtil.nextId;
  [v6 unlock];
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  uint64_t v23 = 0x6E6F697461727544;
  unint64_t v24 = 0xEF5B235F6C697455;
  LODWORD(v22[0]) = v7;
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 93;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  uint64_t v11 = 0x6E6F697461727544;
  unint64_t v10 = 0xEF5B235F6C697455;
  if (a2)
  {
    v22[0] = 539831584;
    v22[1] = 0xE400000000000000;
    v12._uint64_t countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 539831584;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v11 = v23;
    unint64_t v10 = v24;
  }
  id v14 = (uint64_t *)(a3 + *(int *)(type metadata accessor for DurationUtil() + 20));
  *id v14 = v11;
  v14[1] = v10;
  uint64_t v15 = one-time initialization token for voiceCommands;
  swift_bridgeObjectRetain();
  if (v15 != -1) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  uint64_t v18 = v23;
  unint64_t v17 = v24;
  swift_bridgeObjectRetain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_bridgeObjectRetain();
    long long v22[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v19, v20, "started: %s ...", v21, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t outlined destroy of SiriWorkflowRunnerEvent(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

Swift::Float __swiftcall DurationUtil.computeDuration()()
{
  uint64_t v1 = type metadata accessor for DurationUtil();
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_20_0();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  uint64_t v10 = v9 - v8;
  static ContinuousClock.now.getter();
  ContinuousClock.Instant.duration(to:)();
  uint64_t v11 = Duration.components.getter();
  float v13 = (float)v12 / 1.0e18;
  float v14 = (float)v11;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  float v15 = v13 + v14;
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  outlined init with copy of SiriWorkflowRunnerEvent(v0, v5, (void (*)(void))type metadata accessor for DurationUtil);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315394;
    os_log_type_t v20 = (uint64_t *)(v5 + *(int *)(v1 + 20));
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriWorkflowRunnerEvent(v5, (void (*)(void))type metadata accessor for DurationUtil);
    *(_WORD *)(v19 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v17, v18, "stopped: %s; duration=%fs", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {

    outlined destroy of SiriWorkflowRunnerEvent(v5, (void (*)(void))type metadata accessor for DurationUtil);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  return v15;
}

id one-time initialization function for lock()
{
  id result = [objc_allocWithZone((Class)NSLock) init];
  static DurationUtil.lock = (uint64_t)result;
  return result;
}

uint64_t outlined init with copy of SiriWorkflowRunnerEvent(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_19();
  v5(v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type WaitForRequestType and conformance WaitForRequestType()
{
  unint64_t result = lazy protocol witness table cache variable for type WaitForRequestType and conformance WaitForRequestType;
  if (!lazy protocol witness table cache variable for type WaitForRequestType and conformance WaitForRequestType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WaitForRequestType and conformance WaitForRequestType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for WaitForRequestType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x112630);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WaitForRequestType()
{
  return &type metadata for WaitForRequestType;
}

ValueMetadata *type metadata accessor for VoiceCmdsInstrumentations()
{
  return &type metadata for VoiceCmdsInstrumentations;
}

uint64_t *initializeBufferWithCopyOfBuffer for DurationUtil(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ContinuousClock.Instant();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DurationUtil(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_112A08);
}

uint64_t sub_112A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ContinuousClock.Instant();
  OUTLINED_FUNCTION_2_25();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for DurationUtil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_112AAC);
}

void sub_112AAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ContinuousClock.Instant();
  OUTLINED_FUNCTION_2_25();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t type metadata completion function for DurationUtil()
{
  uint64_t result = type metadata accessor for ContinuousClock.Instant();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

float OUTLINED_FUNCTION_10_29()
{
  return v0;
}

void CustomIntentsDialogTemplating.__allocating_init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_91_1(v25, v26, v27, v28, v29, v30, v31, v32);
  char v34 = v33 & 1;
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = *(void *)(a21 + 24);
  uint64_t v37 = *(void *)(a21 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a21, v36);
  OUTLINED_FUNCTION_41_13();
  __chkstk_darwin(v38);
  id v40 = (char *)v42 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v41 + 16))(v40);
  specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(v24, v23, v22, v34, v21, v42[1], v42[2], v42[3], (uint64_t)v40, v35, v36, v37);
  __swift_destroy_boxed_opaque_existential_1Tm(a21);
  OUTLINED_FUNCTION_27_1();
}

uint64_t static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(void *a1)
{
  id v1 = [a1 typeName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.lowercased()();
  swift_bridgeObjectRelease();
  String.lowercased()();
  lazy protocol witness table accessor for type String and conformance String();
  char v2 = OUTLINED_FUNCTION_0_14();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0
    || (String.lowercased()(), char v3 = OUTLINED_FUNCTION_0_14(), swift_bridgeObjectRelease(), (v3 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    char v4 = 1;
  }
  else
  {
    char v4 = OUTLINED_FUNCTION_0_14();
    swift_bridgeObjectRelease();
  }
  return v4 & 1;
}

uint64_t specialized DisambiguationItemProtocol.getDisplayTitle()()
{
  type metadata accessor for CATSpeakableString();
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  swift_bridgeObjectRetain();
  static CATSpeakableString.stripTTSHint(print:)(v1, v2, v3, v4, v5, v6, v7, v8, v12, v13, v14);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

void *CustomIntentsDialogTemplating.catFamily.unsafeMutableAddressor()
{
  return &static CustomIntentsDialogTemplating.catFamily;
}

unint64_t static CustomIntentsDialogTemplating.catFamily.getter()
{
  return 0xD000000000000010;
}

void CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_91_1(v26, v27, v28, v29, v30, v31, v32, v33);
  char v35 = v34 & 1;
  uint64_t v36 = *(void *)(a21 + 24);
  uint64_t v37 = *(void *)(a21 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a21, v36);
  OUTLINED_FUNCTION_41_13();
  __chkstk_darwin(v38);
  id v40 = (char *)v42 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v41 + 16))(v40);
  specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(v25, v24, v23, v35, v22, v42[1], v42[2], v42[3], (uint64_t)v40, v21, v36, v37);
  __swift_destroy_boxed_opaque_existential_1Tm(a21);
  OUTLINED_FUNCTION_27_1();
}

uint64_t CustomIntentsDialogTemplating.yesAndCancel(intentVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  v1[5] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_11_28(*(void **)(v0 + 32));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_15_19();
  uint64_t v1 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_20_24(v1);
  uint64_t v13 = *(void *)(class metadata base offset for RunVoiceCommandCATsSimple + v2 + 232)
      + **(int **)(class metadata base offset for RunVoiceCommandCATsSimple + v2 + 232);
  float v14 = class metadata base offset for RunVoiceCommandCATsSimple + v2 + 232;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  v3[1] = CustomIntentsDialogTemplating.yesAndCancel(intentVerb:);
  OUTLINED_FUNCTION_131();
  OUTLINED_FUNCTION_42_7();
  return v7(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_20_19();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 40);
  if (!v0) {
    *(void *)(v5 + 72) = v2;
  }
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_24_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  *(unsigned char *)(v0 + 80) = 2;
  dispatch thunk of LabelExecutionResult.subscript.getter();
  *(unsigned char *)(v0 + 81) = 0;
  dispatch thunk of LabelExecutionResult.subscript.getter();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_24_2();
  return v6(v1, v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CustomIntentsDialogTemplating.yesAndCancel_rfv1(intentVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[15] = v2;
  v1[16] = v0;
  v1[14] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  v1[17] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v1[18] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[19] = v6;
  v1[20] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  *(void *)(v0 + 168) = OUTLINED_FUNCTION_11_28(*(void **)(v0 + 128));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_15_19();
  uint64_t v1 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_20_24(v1);
  float v14 = *(void *)(class metadata base offset for RunVoiceCommandCATs + v2 + 112)
      + **(int **)(class metadata base offset for RunVoiceCommandCATs + v2 + 112);
  float v15 = class metadata base offset for RunVoiceCommandCATs + v2 + 112;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 176) = v3;
  *uint64_t v3 = v4;
  v3[1] = CustomIntentsDialogTemplating.yesAndCancel_rfv1(intentVerb:);
  OUTLINED_FUNCTION_52_8();
  OUTLINED_FUNCTION_42_7();
  return v9(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 136);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  const char *v7 = v6;
  *(void *)(v8 + 184) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void *CustomIntentsDialogTemplating.yesAndCancel_rfv1(intentVerb:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_212170;
  *(void *)(inited + 32) = 7562617;
  *(void *)(inited + 40) = 0xE300000000000000;
  uint64_t result = (void *)TemplatingResult.print.getter();
  if (!result[2])
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v13 = result[4];
  uint64_t v12 = result[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v13;
  *(void *)(inited + 56) = v12;
  *(void *)(inited + 64) = 0x6C65636E6163;
  *(void *)(inited + 72) = 0xE600000000000000;
  uint64_t result = (void *)TemplatingResult.print.getter();
  if (result[2] < 2uLL)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v15 = result[6];
  uint64_t v14 = result[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(inited + 80) = v15;
  *(void *)(inited + 88) = v14;
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v16 = OUTLINED_FUNCTION_28_1();
  v17(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_14_1();
  return (void *)v20(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

uint64_t CustomIntentsDialogTemplating.inputErrorDialog()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v1);
  *(void *)(v0 + 184) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *inited;
  void *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  static Device.current.getter();
  type metadata accessor for RunLinkActionCATs();
  OUTLINED_FUNCTION_18_15();
  uint64_t v1 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATsSimple();
  OUTLINED_FUNCTION_18_15();
  uint64_t v2 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_18_15();
  uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_18_15();
  uint64_t v4 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  OUTLINED_FUNCTION_18_15();
  uint64_t v5 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t inited = (void *)swift_initStackObject();
  *(void *)(v0 + 192) = inited;
  *(void *)(v0 + 200) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)((long long *)(v0 + 144), v1, v2, v3, v4, v5, inited);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v7;
  const char *v7 = v0;
  v7[1] = CustomIntentsDialogTemplating.inputErrorDialog();
  OUTLINED_FUNCTION_14_1();
  return LinkActionDialogTemplating.makeGenericError()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterPromptDialog(app:parameterName:intent:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 88) = v2;
  *(void *)(v1 + 96) = v0;
  *(unsigned char *)(v1 + 176) = v3;
  *(void *)(v1 + 72) = v4;
  *(void *)(v1 + 80) = v5;
  *(void *)(v1 + 64) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  *(void *)(v1 + 104) = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 112) = swift_task_alloc();
  *(void *)(v1 + 120) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v3 = v2;
  OUTLINED_FUNCTION_47_8(v4);
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 152) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_39_0();
  return v1(v0);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v3 = v2;
  v2[5] = v1;
  v2[6] = v4;
  v2[7] = v0;
  OUTLINED_FUNCTION_51_8();
  uint64_t v6 = *(void *)(v5 + 104);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v9 + 168) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_39_0();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterPromptDialog(app:parameterName:intent:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = v14[11];
  uint64_t v17 = v14[9];
  uint64_t v16 = v14[10];
  uint64_t v18 = v14[8];
  v14[16] = OUTLINED_FUNCTION_56_4((void *)(v14[12] + 16));
  uint64_t v19 = CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)(0, v18, v17, v16, v15, 0);
  v14[17] = v19;
  if (v19)
  {
    uint64_t v20 = v14[14];
    uint64_t v21 = *(void **)(v14[12] + 88);
    uint64_t v22 = *(void (**)(uint64_t))(*(void *)v19 + 112);
    uint64_t v23 = swift_retain();
    v22(v23);
    uint64_t v24 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_74_1(v24);
    __swift_storeEnumTagSinglePayload(v20, 0, 1, (uint64_t)v22);
    uint64_t v49 = *(void *)(class metadata base offset for RunCustomIntentCATsSimple + *v21 + 368)
        + **(int **)(class metadata base offset for RunCustomIntentCATsSimple + *v21 + 368);
    uint64_t v51 = class metadata base offset for RunCustomIntentCATsSimple + *v21 + 368;
    uint64_t v25 = (void *)swift_task_alloc();
    v14[18] = v25;
    *uint64_t v25 = v14;
    v25[1] = CustomIntentsDialogTemplating.makeParameterPromptDialog(app:parameterName:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_130();
    OUTLINED_FUNCTION_3();
    return v31(v26, v27, v28, v29, v30, v31, v32, v33, a9, v49, v51, a12, a13, a14);
  }
  else
  {
    uint64_t v35 = v14[13];
    swift_retain();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_15_19();
    uint64_t v36 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_118(v35, v37, v38, v36);
    uint64_t v50 = *(void *)(class metadata base offset for RunCustomIntentCATsSimple + v39 + 352)
        + **(int **)(class metadata base offset for RunCustomIntentCATsSimple + v39 + 352);
    uint64_t v52 = class metadata base offset for RunCustomIntentCATsSimple + v39 + 352;
    id v40 = (void *)swift_task_alloc();
    v14[20] = v40;
    void *v40 = v14;
    v40[1] = CustomIntentsDialogTemplating.makeParameterPromptDialog(app:parameterName:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_3();
    return v44(v41, v42, v43, v44, v45, v46, v47, v48, a9, v50, v52, a12, a13, a14);
  }
}

uint64_t CustomIntentsDialogTemplating.makeParameterPromptDialog_preRFv2(app:parameterName:intent:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 144) = v2;
  *(void *)(v1 + 48) = v3;
  *(void *)(v1 + 56) = v0;
  *(void *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v5;
  *(void *)(v1 + 16) = v6;
  *(void *)(v1 + 24) = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  *(void *)(v1 + 64) = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v1 + 80) = OUTLINED_FUNCTION_36_0(v9);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v12();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterPromptDialog_preRFv2(app:parameterName:intent:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)(0, v12[3], v12[4], v12[5], v12[6], 0);
  v12[11] = v13;
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = v12[9];
    v12[12] = OUTLINED_FUNCTION_4_21((void *)(v12[7] + 16));
    OUTLINED_FUNCTION_42_12();
    OUTLINED_FUNCTION_26_19();
    v16();
    uint64_t v17 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_19_16(v17);
    OUTLINED_FUNCTION_33_14(v15, 0, 1, v14);
    uint64_t v41 = *(void *)(class metadata base offset for RunCustomIntentCATs + v18 + 184)
        + **(int **)(class metadata base offset for RunCustomIntentCATs + v18 + 184);
    uint64_t v43 = class metadata base offset for RunCustomIntentCATs + v18 + 184;
    uint64_t v19 = (void *)swift_task_alloc();
    v12[13] = v19;
    void *v19 = v12;
    v19[1] = CustomIntentsDialogTemplating.makeParameterPromptDialog_preRFv2(app:parameterName:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_76_6();
    OUTLINED_FUNCTION_85();
    return v26(v20, v21, v22, v23, v24, v25, v26, v27, v41, v43, a11, a12);
  }
  else
  {
    v12[15] = OUTLINED_FUNCTION_11_28((void *)v12[7]);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_15_19();
    uint64_t v29 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_20_24(v29);
    uint64_t v42 = *(void *)(class metadata base offset for RunCustomIntentCATs + v30 + 176)
        + **(int **)(class metadata base offset for RunCustomIntentCATs + v30 + 176);
    uint64_t v44 = class metadata base offset for RunCustomIntentCATs + v30 + 176;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v12[16] = v31;
    *uint64_t v31 = v32;
    v31[1] = CustomIntentsDialogTemplating.makeParameterPromptDialog_preRFv2(app:parameterName:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_52_8();
    OUTLINED_FUNCTION_85();
    return v37(v33, v34, v35, v36, v37, v38, v39, v40, v42, v44, a11, a12);
  }
}

uint64_t CustomIntentsDialogTemplating.getCustomIntroductionPrompt(disambiguationList:app:parameterName:intent:tokens:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (*(void *)(a1 + 16) >= 6uLL
    && (uint64_t v8 = CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)(2, a2, a3, a4, a5, a6)) != 0)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 112))(v8);
    swift_release();
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 1;
  }
  uint64_t v10 = type metadata accessor for SpeakableString();

  return __swift_storeEnumTagSinglePayload(a7, v9, 1, v10);
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 120) = v16;
  *(void *)(v1 + 128) = v0;
  *(unsigned char *)(v1 + 249) = v2;
  *(void *)(v1 + 104) = v3;
  *(void *)(v1 + 112) = v4;
  *(unsigned char *)(v1 + 248) = v5;
  *(void *)(v1 + 88) = v6;
  *(void *)(v1 + 96) = v7;
  *(void *)(v1 + 80) = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v9);
  uint64_t v10 = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 144) = OUTLINED_FUNCTION_145(v10);
  *(void *)(v1 + 152) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 144);
  uint64_t v7 = *(void *)(v5 + 136);
  uint64_t v8 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v9 = v8;
  *(void *)(v3 + 184) = v10;
  *(void *)(v3 + 192) = v0;
  swift_task_dealloc();
  swift_release();
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  id v1;
  char v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(id *)(v0 + 184);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_125();
  if (v2) {
    OUTLINED_FUNCTION_100();
  }
  uint64_t v3 = *(void **)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 152);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();

  outlined destroy of URL?(v4, &demangling cache variable for type metadata for SpeakableString?);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v5;
  *char v5 = v0;
  v5[1] = CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:);
  OUTLINED_FUNCTION_124();
  OUTLINED_FUNCTION_23_1();
  return CustomIntentsDialogTemplating.makeJoinedSpeakableDisambiguationItemList(app:intent:parameterName:disambiguationList:deviceIsLocked:siriEnvironment:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *char v5 = v4;
  *(void *)(v7 + 208) = v6;
  *(void *)(v7 + 216) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  id v1;
  char v2;
  void *v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(id *)(v0 + 208);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_125();
  if (v2) {
    OUTLINED_FUNCTION_100();
  }
  uint64_t v3 = *(void **)(v0 + 208);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v4;
  *uint64_t v4 = v0;
  v4[1] = CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:);
  OUTLINED_FUNCTION_124();
  return CustomIntentsDialogTemplating.makeJoinedSpeakableDisambiguationItemList(app:intent:parameterName:disambiguationList:deviceIsLocked:siriEnvironment:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 232) = v5;
  *(void *)(v3 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 232);
  if (v1)
  {
    char v2 = v1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (*(void *)(v0 + 72) & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + (*(void *)(v0 + 72) & 0xFFFFFFFFFFFFFF8)) >> 1) {
      OUTLINED_FUNCTION_100();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  swift_release();
  uint64_t v3 = *(void *)(v0 + 72);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 152);
  swift_release();
  swift_release();
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:)()
{
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v6 = v0[10];
  v0[9] = _swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Int)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_89_1(inited, (__n128)xmmword_212160)[3].n128_u64[0] = *(void *)(v3 + 16);
  uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
  v0[20] = OUTLINED_FUNCTION_56_4((void *)(v1 + 16));
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
  uint64_t v10 = CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)(4, v6, v5, v4, v2, v9);
  v0[21] = v10;
  swift_bridgeObjectRelease();
  if (v10)
  {
    uint64_t v11 = v0[19];
    uint64_t v28 = v0[18];
    uint64_t v29 = v0[17];
    uint64_t v12 = v0[13];
    uint64_t v27 = v0[14];
    uint64_t v14 = v0[11];
    uint64_t v13 = v0[12];
    uint64_t v15 = v0[10];
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    CustomIntentsDialogTemplating.getCustomIntroductionPrompt(disambiguationList:app:parameterName:intent:tokens:)(v12, v15, v14, v13, v27, v17, v11);
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void (**)(uint64_t))(*(void *)v10 + 112);
    uint64_t v19 = swift_retain();
    v18(v19);
    uint64_t v20 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v28, 0, 1, v20);
    CustomIntentsDialogTemplating.getAppName(app:)(v15);
    __swift_storeEnumTagSinglePayload(v29, 0, 1, v20);
    uint64_t v21 = (void *)swift_task_alloc();
    v0[22] = v21;
    *uint64_t v21 = v0;
    v21[1] = CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:);
    OUTLINED_FUNCTION_18_2();
    __asm { BRAA            X6, X16 }
  }
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v24 = (void *)swift_task_alloc();
  v0[25] = v24;
  *uint64_t v24 = v0;
  v24[1] = CustomIntentsDialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:shouldShowAppAttribution:siriEnvironment:);
  OUTLINED_FUNCTION_18_2();
  __asm { BRAA            X2, X16 }
}

uint64_t CustomIntentsDialogTemplating.offerMoreItems(remainingPages:nextPageSize:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentsDialogTemplating.offerMoreItems(remainingPages:nextPageSize:));
}

uint64_t CustomIntentsDialogTemplating.offerMoreItems(remainingPages:nextPageSize:)()
{
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = OUTLINED_FUNCTION_4_21((void *)(v0[4] + 16));
  v0[5] = v3;
  OUTLINED_FUNCTION_12_26();
  uint64_t v9 = (uint64_t (*)(uint64_t, double, void, double, void))(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                                                   + v4
                                                                                   + 336)
                                                                       + **(int **)(class metadata base offset for RunCustomIntentCATsSimple
                                                                                  + v4
                                                                                  + 336));
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_58_1(v5);
  *uint64_t v6 = v7;
  v6[1] = CustomIntentsDialogTemplating.offerMoreItems(remainingPages:nextPageSize:);
  return ((uint64_t (*)(void, void, void, void, void))v9)(v3, (double)v1, 0, (double)v2, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CustomIntentsDialogTemplating.makeUnlockDeviceDialog()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentsDialogTemplating.makeUnlockDeviceDialog());
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();
  v0[3] = OUTLINED_FUNCTION_4_21((void *)(v0[2] + 16));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  void *v1 = v0;
  v1[1] = WorkflowDialogTemplating.makePromptForShortcutName();
  uint64_t v2 = OUTLINED_FUNCTION_31_9();
  return v3(v2);
}

uint64_t CustomIntentsDialogTemplating.makeUnlockDeviceDialog_rfv1()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentsDialogTemplating.makeUnlockDeviceDialog_rfv1());
}

uint64_t CustomIntentsDialogTemplating.makeUnlockDeviceDialog_rfv1()()
{
  OUTLINED_FUNCTION_13_1();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_4_21((void *)(*(void *)(v0 + 24) + 16));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_65_1(v1);
  *uint64_t v2 = v3;
  v2[1] = CustomIntentsDialogTemplating.makeUnlockDeviceDialog_rfv1();
  uint64_t v4 = OUTLINED_FUNCTION_25_13();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

uint64_t CustomIntentsDialogTemplating.makeOpenAppDialogAsLabels(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  v1[4] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  v0[5] = OUTLINED_FUNCTION_4_21((void *)(v0[3] + 16));
  CustomIntentsDialogTemplating.getAppName(app:)(v2);
  uint64_t v3 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_33_14(v1, 0, 1, v3);
  uint64_t v17 = *(void *)(class metadata base offset for RunVoiceCommandCATsSimple + v4 + 136)
      + **(int **)(class metadata base offset for RunVoiceCommandCATsSimple + v4 + 136);
  uint64_t v18 = class metadata base offset for RunVoiceCommandCATsSimple + v4 + 136;
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_58_1(v5);
  *uint64_t v6 = v7;
  v6[1] = CustomIntentsDialogTemplating.makeOpenAppDialogAsLabels(app:);
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_42_7();
  return v11(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(*(void *)(v2 + 32), &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v5, v6, v7);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_23_1();
    return v11(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CustomIntentsDialogTemplating.makeOpenAppDialog_rfv1(app:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  v1[5] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  v0[6] = OUTLINED_FUNCTION_4_21((void *)(v0[4] + 16));
  CustomIntentsDialogTemplating.getAppName(app:)(v2);
  uint64_t v3 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_33_14(v1, 0, 1, v3);
  uint64_t v15 = *(void *)(class metadata base offset for RunVoiceCommandCATs + v4 + 64)
      + **(int **)(class metadata base offset for RunVoiceCommandCATs + v4 + 64);
  uint64_t v16 = class metadata base offset for RunVoiceCommandCATs + v4 + 64;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = CustomIntentsDialogTemplating.makeOpenAppDialog_rfv1(app:);
  OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_42_7();
  return v10(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v12();
  }
}

uint64_t CustomIntentsDialogTemplating.makeReadDisambiguationList(disambiguationItems:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[13] = v2;
  v1[14] = v0;
  uint64_t v3 = type metadata accessor for SpeakableString();
  v1[15] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[16] = v4;
  v1[17] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void CustomIntentsDialogTemplating.makeReadDisambiguationList(disambiguationItems:)()
{
  uint64_t v2 = *(void *)(v0[13] + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = (uint64_t)(v0 + 2);
    OUTLINED_FUNCTION_96_0();
    type metadata accessor for CATSpeakableString();
    OUTLINED_FUNCTION_93();
    do
    {
      uint64_t v66 = v2;
      outlined init with copy of CustomIntentDisambiguationItem(v1, v4);
      uint64_t v5 = v0[2];
      uint64_t v6 = v0[3];
      swift_bridgeObjectRetain();
      static CATSpeakableString.stripTTSHint(print:)(v5, v6, v7, v8, v9, v10, v11, v12, v59, v61, v63);
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      uint64_t v17 = v0[4];
      uint64_t v18 = v0[5];
      if (v18)
      {
        swift_bridgeObjectRetain();
        uint64_t v64 = v17;
        static CATSpeakableString.stripTTSHint(print:)(v17, v18, v19, v20, v21, v22, v23, v24, v60, v62, v63);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_147();
        if (v33)
        {
          OUTLINED_FUNCTION_60_4(v25, v26, v27, v28, v29, v30, v31, v32, v60, v62, (uint64_t)v63, v17, v65, v66, v67, v14, v16, v68._countAndFlagsBits, (uint64_t)v68._object);
          swift_bridgeObjectRelease();
          String.append(_:)(v68);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      uint64_t v34 = static CATSpeakableString.applyTTSHint(speak:)();
      uint64_t v36 = v35;
      swift_bridgeObjectRelease();
      if (v18)
      {
        swift_bridgeObjectRetain();
        static CATSpeakableString.applyTTSHint(speak:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_144();
        if (v45)
        {
          OUTLINED_FUNCTION_61_5(v37, v38, v39, v40, v41, v42, v43, v44, v60, v62, (uint64_t)v63, v64, v65, v66, v67, v34, v36, v68._countAndFlagsBits, (uint64_t)v68._object);
          swift_bridgeObjectRelease();
          String.append(_:)(v68);
        }
        uint64_t v46 = v66;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v46 = v66;
      }
      OUTLINED_FUNCTION_138();
      uint64_t v4 = (uint64_t)v63;
      outlined destroy of CustomIntentDisambiguationItem((uint64_t)v63);
      uint64_t v3 = (void *)v67;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        OUTLINED_FUNCTION_108();
        uint64_t v3 = (void *)v67;
      }
      unint64_t v53 = v3[3];
      if (v3[2] >= v53 >> 1)
      {
        OUTLINED_FUNCTION_99(v53);
        uint64_t v3 = (void *)v67;
      }
      unint64_t v54 = OUTLINED_FUNCTION_40_13(isUniquelyReferenced_nonNull_native, v0[17], v0[15], v48, v49, v50, v51, v52, v60, v62);
      v55(v54);
      uint64_t v67 = (uint64_t)v3;
      v1 += 88;
      uint64_t v2 = v46 - 1;
    }
    while (v2);
  }
  v0[18] = v3;
  v0[19] = OUTLINED_FUNCTION_4_21((void *)(v0[14] + 16));
  uint64_t v56 = (void *)swift_task_alloc();
  v0[20] = v56;
  void *v56 = v0;
  v56[1] = CustomIntentsDialogTemplating.makeReadDisambiguationList(disambiguationItems:);
  OUTLINED_FUNCTION_102();
  OUTLINED_FUNCTION_107();
  __asm { BRAA            X3, X16 }
}

uint64_t CustomIntentsDialogTemplating.makeOfferMoreDisambiguationItem(app:parameterName:intent:remainingPages:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v3;
  v1[5] = v4;
  v1[2] = v5;
  v1[3] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  v1[8] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v15)(uint64_t, double, void, uint64_t);
  uint64_t v16;

  OUTLINED_FUNCTION_30_4();
  uint64_t v1 = v0[7];
  uint64_t v2 = CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)(4, v0[2], v0[3], v0[4], v0[5], 0);
  v0[9] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_4_21((void *)(v1 + 16));
  v0[10] = v3;
  if (v2)
  {
    OUTLINED_FUNCTION_42_12();
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 112);
    uint64_t v6 = swift_retain();
    v5(v6);
    swift_release();
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  uint64_t v8 = v0[8];
  uint64_t v9 = v0[6];
  uint64_t v10 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v8, v7, 1, v10);
  OUTLINED_FUNCTION_12_26();
  uint64_t v15 = (uint64_t (*)(uint64_t, double, void, uint64_t))(*(void *)(class metadata base offset for RunCustomIntentCATsSimple
                                                                             + v11
                                                                             + 320)
                                                                 + **(int **)(class metadata base offset for RunCustomIntentCATsSimple
                                                                            + v11
                                                                            + 320));
  uint64_t v12 = (void *)swift_task_alloc();
  v0[11] = v12;
  *uint64_t v12 = v0;
  v12[1] = CustomIntentsDialogTemplating.makeOfferMoreDisambiguationItem(app:parameterName:intent:remainingPages:);
  uint64_t v13 = v0[8];
  return ((uint64_t (*)(void, void, void, void))v15)(v3, (double)v9, 0, v13);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_20_19();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 64);
  if (!v0) {
    *(void *)(v5 + 104) = v2;
  }
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_24_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  uint64_t v2 = *(void *)(v0 + 104);
  return v1(v2);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[16] = v2;
  v1[17] = v0;
  v1[14] = v3;
  v1[15] = v4;
  v1[12] = v5;
  v1[13] = v6;
  uint64_t v7 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v7);
  v1[18] = OUTLINED_FUNCTION_25();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  v1[19] = OUTLINED_FUNCTION_13_0();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  v2[9] = v1;
  v2[10] = v4;
  v2[11] = v0;
  OUTLINED_FUNCTION_51_8();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 192) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  outlined destroy of URL?(*(void *)(v0 + 168), &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_120();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_39_0();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 152);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 216) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_19_2();
    OUTLINED_FUNCTION_23_1();
    return v15(v13, v14, v15, v16, v17, v18, v19, v20);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_19_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  outlined destroy of URL?(*(void *)(v0 + 168), &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_120();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_120();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  OUTLINED_FUNCTION_120();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<CustomIntentDisambiguationItem>);
  if (PaginatedItemContainer.getCurrentPageIndex()())
  {
    uint64_t v15 = *(void *)(v14 + 112);
    uint64_t v16 = *(void *)(v14 + 120);
    id v17 = [*(id *)(v14 + 104) _codableDescription];
    id v18 = outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(v15, v16, v17);

    if (v18
      && (INCodableAttribute.localizedPrompt(promptDialogType:intent:appInfo:tokens:)(3, *(void *)(v14 + 104), 0, 0), uint64_t v20 = v19, v18, v20))
    {
      uint64_t v21 = *(void *)(v14 + 152);
      type metadata accessor for WorkflowRunnerCATsSimple();
      static CATOption.defaultMode.getter();
      *(void *)(v14 + 200) = CATWrapperSimple.__allocating_init(options:globals:)();
      OUTLINED_FUNCTION_75();
      OUTLINED_FUNCTION_36_7();
      uint64_t v22 = type metadata accessor for SpeakableString();
      OUTLINED_FUNCTION_118(v21, v23, v24, v22);
      uint64_t v69 = *(void *)(class metadata base offset for WorkflowRunnerCATsSimple + v25 + 32)
          + **(int **)(class metadata base offset for WorkflowRunnerCATsSimple + v25 + 32);
      uint64_t v71 = class metadata base offset for WorkflowRunnerCATsSimple + v25 + 32;
      int v26 = (void *)swift_task_alloc();
      *(void *)(v14 + 208) = v26;
      void *v26 = v14;
      v26[1] = CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:);
      OUTLINED_FUNCTION_3();
    }
    else
    {
      uint64_t v36 = *(void *)(v14 + 136);
      int v37 = *(void **)(v36 + 88);
      *(void *)(v14 + 224) = OUTLINED_FUNCTION_4_21((void *)(v36 + 16));
      uint64_t v69 = *(void *)(class metadata base offset for RunCustomIntentCATsSimple + *v37 + 304)
          + **(int **)(class metadata base offset for RunCustomIntentCATsSimple + *v37 + 304);
      uint64_t v71 = class metadata base offset for RunCustomIntentCATsSimple + *v37 + 304;
      int v38 = (void *)swift_task_alloc();
      *(void *)(v14 + 232) = v38;
      *int v38 = v14;
      v38[1] = CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:);
      OUTLINED_FUNCTION_31_9();
      OUTLINED_FUNCTION_3();
    }
    return v29(v27, v28, v29, v30, v31, v32, v33, v34, a9, v69, v71, a12, a13, a14);
  }
  else
  {
    uint64_t v39 = *(void *)(v14 + 168);
    int64_t v40 = *(void *)(PaginatedItemContainer.items.getter() + 16);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Int)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    OUTLINED_FUNCTION_89_1(inited, (__n128)xmmword_212160)[3].n128_u64[0] = v40;
    uint64_t v42 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v43 = PaginatedItemContainer.pageSize.getter();
    uint64_t v44 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v39, 1, 1, v44);
    if (v43 >= v40)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v46 = *(void *)(v14 + 112);
      uint64_t v45 = *(void *)(v14 + 120);
      uint64_t v48 = *(void *)(v14 + 96);
      uint64_t v47 = *(void *)(v14 + 104);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v42);
      uint64_t v50 = v49;
      swift_bridgeObjectRelease();
      uint64_t v51 = CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)(2, v48, v46, v45, v47, v50);
      swift_bridgeObjectRelease();
      if (v51)
      {
        OUTLINED_FUNCTION_16_5();
        (*(void (**)(void))(v52 + 112))();
        swift_release();
        uint64_t v53 = 0;
      }
      else
      {
        uint64_t v53 = 1;
      }
      uint64_t v55 = *(void *)(v14 + 160);
      uint64_t v54 = *(void *)(v14 + 168);
      outlined destroy of URL?(v54, &demangling cache variable for type metadata for SpeakableString?);
      __swift_storeEnumTagSinglePayload(v55, v53, 1, v44);
      outlined init with take of SpeakableString?(v55, v54);
    }
    uint64_t v56 = *(void *)(v14 + 136);
    uint64_t v57 = *(void **)(v56 + 88);
    *(void *)(v14 + 176) = OUTLINED_FUNCTION_57_3((void *)(v56 + 16));
    uint64_t v70 = *(void *)(class metadata base offset for RunCustomIntentCATsSimple + *v57 + 288)
        + **(int **)(class metadata base offset for RunCustomIntentCATsSimple + *v57 + 288);
    uint64_t v72 = class metadata base offset for RunCustomIntentCATsSimple + *v57 + 288;
    uint64_t v58 = (void *)swift_task_alloc();
    *(void *)(v14 + 184) = v58;
    void *v58 = v14;
    v58[1] = CustomIntentsDialogTemplating.makeIntroduceDisambiguationPagination(app:intent:parameterName:intentResolutionResult:paginatedItems:);
    OUTLINED_FUNCTION_3();
    return v67(v59, v60, v61, v62, v63, v64, v65, v66, a9, v70, v72, a12, a13, a14);
  }
}

uint64_t CustomIntentsDialogTemplating.makeJoinedSpeakableDisambiguationItemList(app:intent:parameterName:disambiguationList:deviceIsLocked:siriEnvironment:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[14] = v2;
  v1[15] = v0;
  v1[13] = v3;
  uint64_t v4 = type metadata accessor for SpeakableString();
  v1[16] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[17] = v5;
  v1[18] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void CustomIntentsDialogTemplating.makeJoinedSpeakableDisambiguationItemList(app:intent:parameterName:disambiguationList:deviceIsLocked:siriEnvironment:)()
{
  if (static OutputUtils.shouldReadItemsInDisambiguationList(siriEnvironment:)())
  {
    uint64_t v2 = *(void *)(v0[13] + 16);
    uint64_t v3 = _swiftEmptyArrayStorage;
    if (v2)
    {
      uint64_t v4 = (uint64_t)(v0 + 2);
      OUTLINED_FUNCTION_96_0();
      type metadata accessor for CATSpeakableString();
      OUTLINED_FUNCTION_93();
      do
      {
        uint64_t v68 = v2;
        outlined init with copy of CustomIntentDisambiguationItem(v1, v4);
        uint64_t v5 = v0[2];
        uint64_t v6 = v0[3];
        swift_bridgeObjectRetain();
        static CATSpeakableString.stripTTSHint(print:)(v5, v6, v7, v8, v9, v10, v11, v12, v61, v63, v65);
        uint64_t v14 = v13;
        uint64_t v16 = v15;
        swift_bridgeObjectRelease();
        uint64_t v17 = v0[4];
        uint64_t v18 = v0[5];
        if (v18)
        {
          swift_bridgeObjectRetain();
          uint64_t v66 = v17;
          static CATSpeakableString.stripTTSHint(print:)(v17, v18, v19, v20, v21, v22, v23, v24, v62, v64, v65);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_147();
          if (v33)
          {
            OUTLINED_FUNCTION_60_4(v25, v26, v27, v28, v29, v30, v31, v32, v62, v64, (uint64_t)v65, v17, v67, v68, v69, v14, v16, v70._countAndFlagsBits, (uint64_t)v70._object);
            swift_bridgeObjectRelease();
            String.append(_:)(v70);
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain();
        uint64_t v34 = static CATSpeakableString.applyTTSHint(speak:)();
        uint64_t v36 = v35;
        swift_bridgeObjectRelease();
        if (v18)
        {
          swift_bridgeObjectRetain();
          static CATSpeakableString.applyTTSHint(speak:)();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_144();
          if (v45)
          {
            OUTLINED_FUNCTION_61_5(v37, v38, v39, v40, v41, v42, v43, v44, v62, v64, (uint64_t)v65, v66, v67, v68, v69, v34, v36, v70._countAndFlagsBits, (uint64_t)v70._object);
            swift_bridgeObjectRelease();
            String.append(_:)(v70);
          }
          uint64_t v46 = v68;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v46 = v68;
        }
        OUTLINED_FUNCTION_138();
        uint64_t v4 = (uint64_t)v65;
        outlined destroy of CustomIntentDisambiguationItem((uint64_t)v65);
        uint64_t v3 = (void *)v69;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          OUTLINED_FUNCTION_108();
          uint64_t v3 = (void *)v69;
        }
        unint64_t v53 = v3[3];
        if (v3[2] >= v53 >> 1)
        {
          OUTLINED_FUNCTION_99(v53);
          uint64_t v3 = (void *)v69;
        }
        unint64_t v54 = OUTLINED_FUNCTION_40_13(isUniquelyReferenced_nonNull_native, v0[18], v0[16], v48, v49, v50, v51, v52, v62, v64);
        v55(v54);
        uint64_t v69 = (uint64_t)v3;
        v1 += 88;
        uint64_t v2 = v46 - 1;
      }
      while (v2);
    }
    v0[19] = v3;
    v0[20] = OUTLINED_FUNCTION_4_21((void *)(v0[15] + 16));
    uint64_t v58 = (void *)swift_task_alloc();
    v0[21] = v58;
    void *v58 = v0;
    v58[1] = CustomIntentsDialogTemplating.makeJoinedSpeakableDisambiguationItemList(app:intent:parameterName:disambiguationList:deviceIsLocked:siriEnvironment:);
    OUTLINED_FUNCTION_102();
    OUTLINED_FUNCTION_107();
    __asm { BRAA            X3, X16 }
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_107();
  __asm { BRAA            X2, X16 }
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 344) = v2;
  *(void *)(v1 + 256) = v3;
  *(void *)(v1 + 264) = v0;
  *(void *)(v1 + 240) = v4;
  *(void *)(v1 + 248) = v5;
  *(void *)(v1 + 224) = v6;
  *(void *)(v1 + 232) = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  *(void *)(v1 + 272) = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 280) = swift_task_alloc();
  *(void *)(v1 + 288) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  v2[22] = v1;
  v2[23] = v4;
  v2[24] = v0;
  OUTLINED_FUNCTION_51_8();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 320) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_39_0();
  return v1(v0);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  v2[25] = v1;
  v2[26] = v4;
  v2[27] = v0;
  OUTLINED_FUNCTION_51_8();
  uint64_t v6 = *(void *)(v5 + 272);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v9 + 336) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_39_0();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = *(void **)(v14 + 256);
  *(void *)(v14 + 296) = OUTLINED_FUNCTION_56_4((void *)(*(void *)(v14 + 264) + 16));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  OUTLINED_FUNCTION_67_5((__n128 *)inited, (__n128)xmmword_212170);
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v15 valueForKey:v17];

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any((_OWORD *)(v14 + 144), (_OWORD *)(inited + 48));
  }
  else
  {
    uint64_t v20 = *(void *)(v14 + 232);
    uint64_t v19 = *(void *)(v14 + 240);
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v20;
    *(void *)(inited + 56) = v19;
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = *(void **)(v14 + 248);
  uint64_t v21 = *(void *)(v14 + 256);
  uint64_t v24 = *(void *)(v14 + 232);
  uint64_t v23 = *(void *)(v14 + 240);
  uint64_t v25 = *(void *)(v14 + 224);
  *(void *)(inited + 80) = v24;
  *(void *)(inited + 88) = v23;
  swift_bridgeObjectRetain();
  id v26 = [v22 itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v28 = CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)(5, v25, v24, v23, v21, v27);
  *(void *)(v14 + 304) = v28;
  swift_bridgeObjectRelease();
  if (v28)
  {
    uint64_t v29 = *(void *)(v14 + 280);
    int v30 = *(void **)(*(void *)(v14 + 264) + 88);
    OUTLINED_FUNCTION_16_5();
    int v32 = *(void (**)(uint64_t))(v31 + 112);
    uint64_t v33 = swift_retain();
    v32(v33);
    uint64_t v34 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_74_1(v34);
    __swift_storeEnumTagSinglePayload(v29, 0, 1, (uint64_t)v32);
    uint64_t v59 = *(void *)(class metadata base offset for RunCustomIntentCATsSimple + *v30 + 16)
        + **(int **)(class metadata base offset for RunCustomIntentCATsSimple + *v30 + 16);
    uint64_t v61 = class metadata base offset for RunCustomIntentCATsSimple + *v30 + 16;
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v14 + 312) = v35;
    *uint64_t v35 = v14;
    v35[1] = CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_130();
    OUTLINED_FUNCTION_3();
    return v41(v36, v37, v38, v39, v40, v41, v42, v43, a9, v59, v61, a12, a13, a14);
  }
  else
  {
    uint64_t v45 = *(void *)(v14 + 272);
    swift_bridgeObjectRetain();
    swift_retain();
    OUTLINED_FUNCTION_15_19();
    uint64_t v46 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_118(v45, v47, v48, v46);
    uint64_t v60 = *(void *)(v49 + class metadata base offset for RunCustomIntentCATsSimple)
        + **(int **)(v49 + class metadata base offset for RunCustomIntentCATsSimple);
    uint64_t v62 = v49 + class metadata base offset for RunCustomIntentCATsSimple;
    uint64_t v50 = (void *)swift_task_alloc();
    *(void *)(v14 + 328) = v50;
    *uint64_t v50 = v14;
    v50[1] = CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_3();
    return v54(v51, v52, v53, v54, v55, v56, v57, v58, a9, v60, v62, a12, a13, a14);
  }
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog_preRFv2(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 216) = v2;
  *(void *)(v1 + 224) = v0;
  *(unsigned char *)(v1 + 312) = v3;
  *(void *)(v1 + 200) = v4;
  *(void *)(v1 + 208) = v5;
  *(void *)(v1 + 184) = v6;
  *(void *)(v1 + 192) = v7;
  *(void *)(v1 + 176) = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v9);
  *(void *)(v1 + 232) = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 240) = swift_task_alloc();
  *(void *)(v1 + 248) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 280) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 232);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 304) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v12();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog_preRFv2(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = (void *)v12[27];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_67_5(inited, (__n128)xmmword_212170);
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v13 valueForKey:v15];

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    NSString v17 = (_OWORD *)OUTLINED_FUNCTION_28_1();
    outlined init with take of Any(v17, v18);
  }
  else
  {
    unint64_t v20 = v12[24];
    unint64_t v19 = v12[25];
    inited[4].n128_u64[1] = (unint64_t)&type metadata for String;
    inited[3].n128_u64[0] = v20;
    inited[3].n128_u64[1] = v19;
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = (void *)v12[26];
  uint64_t v21 = v12[27];
  unint64_t v24 = v12[24];
  unint64_t v23 = v12[25];
  uint64_t v25 = v12[23];
  inited[5].n128_u64[0] = v24;
  inited[5].n128_u64[1] = v23;
  swift_bridgeObjectRetain();
  id v26 = [v22 itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v28 = CustomIntentsDialogTemplating.localizedCustomPromptFor(promptDialogType:app:parameterName:intent:tokens:)(5, v25, v24, v23, v21, v27);
  v12[32] = v28;
  swift_bridgeObjectRelease();
  if (v28)
  {
    uint64_t v29 = v12[30];
    v12[33] = OUTLINED_FUNCTION_4_21((void *)(v12[28] + 16));
    OUTLINED_FUNCTION_42_12();
    OUTLINED_FUNCTION_26_19();
    v30();
    uint64_t v31 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_19_16(v31);
    OUTLINED_FUNCTION_33_14(v29, 0, 1, v28);
    uint64_t v57 = *(void *)(class metadata base offset for RunCustomIntentCATs + v32 + 8)
        + **(int **)(class metadata base offset for RunCustomIntentCATs + v32 + 8);
    uint64_t v59 = class metadata base offset for RunCustomIntentCATs + v32 + 8;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v12[34] = v33;
    *uint64_t v33 = v34;
    v33[1] = CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog_preRFv2(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_76_6();
    OUTLINED_FUNCTION_85();
    return v41(v35, v36, v37, v38, v39, v40, v41, v42, v57, v59, a11, a12);
  }
  else
  {
    uint64_t v44 = v12[29];
    v12[36] = OUTLINED_FUNCTION_11_28((void *)v12[28]);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_15_19();
    uint64_t v45 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v44, 0, 1, v45);
    OUTLINED_FUNCTION_12_26();
    uint64_t v58 = *(void *)(v46 + class metadata base offset for RunCustomIntentCATs)
        + **(int **)(v46 + class metadata base offset for RunCustomIntentCATs);
    uint64_t v60 = v46 + class metadata base offset for RunCustomIntentCATs;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v12[37] = v47;
    void *v47 = v48;
    v47[1] = CustomIntentsDialogTemplating.makeParameterValueConfirmationDialog_preRFv2(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_52_8();
    OUTLINED_FUNCTION_85();
    return v53(v49, v50, v51, v52, v53, v54, v55, v56, v58, v60, a11, a12);
  }
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 168) = v2;
  *(void *)(v1 + 72) = v3;
  *(void *)(v1 + 80) = v0;
  *(void *)(v1 + 56) = v4;
  *(void *)(v1 + 64) = v5;
  *(void *)(v1 + 40) = v6;
  *(void *)(v1 + 48) = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v8);
  *(void *)(v1 + 88) = OUTLINED_FUNCTION_13_0();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v1 + 104) = OUTLINED_FUNCTION_95_0(v9);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  OUTLINED_FUNCTION_47_8(v4);
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 136) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_39_0();
  return v1(v0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 88);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_23_1();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_19_2();
    OUTLINED_FUNCTION_23_1();
    return v15(v13, v14, v15, v16, v17, v18, v19, v20);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = OUTLINED_FUNCTION_82_3((uint64_t)[*(id *)(v12 + 64) unsupportedReason]);
  *(void *)(v12 + 112) = v13;
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v12 + 96);
    *(void *)(v12 + 120) = OUTLINED_FUNCTION_4_21((void *)(*(void *)(v12 + 80) + 16));
    OUTLINED_FUNCTION_42_12();
    OUTLINED_FUNCTION_26_19();
    v16();
    uint64_t v17 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_19_16(v17);
    OUTLINED_FUNCTION_33_14(v15, 0, 1, v14);
    uint64_t v40 = *(void *)(class metadata base offset for RunCustomIntentCATsSimple + v18 + 416)
        + **(int **)(class metadata base offset for RunCustomIntentCATsSimple + v18 + 416);
    uint64_t v42 = class metadata base offset for RunCustomIntentCATsSimple + v18 + 416;
    unint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v12 + 128) = v19;
    void *v19 = v12;
    v19[1] = CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_85();
    return v25(v20, v21, v22, v23, v24, v25, v26, v27, v40, v42, a11, a12);
  }
  else
  {
    *(void *)(v12 + 144) = OUTLINED_FUNCTION_11_28(*(void **)(v12 + 80));
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_15_19();
    uint64_t v29 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_20_24(v29);
    uint64_t v41 = *(void *)(class metadata base offset for RunCustomIntentCATsSimple + v30 + 400)
        + **(int **)(class metadata base offset for RunCustomIntentCATsSimple + v30 + 400);
    uint64_t v43 = class metadata base offset for RunCustomIntentCATsSimple + v30 + 400;
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v12 + 152) = v31;
    *uint64_t v31 = v12;
    v31[1] = CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_131();
    OUTLINED_FUNCTION_85();
    return v35(v32, v33, v34, v35, v36, v37, v38, v39, v41, v43, a11, a12);
  }
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog_rfv1(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v0;
  *(unsigned char *)(v1 + 152) = v3;
  *(void *)(v1 + 40) = v4;
  *(void *)(v1 + 48) = v5;
  OUTLINED_FUNCTION_56_2(v6, v7, v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v9);
  uint64_t v10 = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 80) = OUTLINED_FUNCTION_36_0(v10);
  *(void *)(v1 + 88) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  char v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 72);
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v12();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog_rfv1(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = OUTLINED_FUNCTION_82_3((uint64_t)[*(id *)(v12 + 48) unsupportedReason]);
  *(void *)(v12 + 96) = v13;
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v12 + 80);
    *(void *)(v12 + 104) = OUTLINED_FUNCTION_4_21((void *)(*(void *)(v12 + 64) + 16));
    OUTLINED_FUNCTION_42_12();
    OUTLINED_FUNCTION_26_19();
    v16();
    uint64_t v17 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_19_16(v17);
    OUTLINED_FUNCTION_33_14(v15, 0, 1, v14);
    uint64_t v40 = *(void *)(class metadata base offset for RunCustomIntentCATs + v18 + 208)
        + **(int **)(class metadata base offset for RunCustomIntentCATs + v18 + 208);
    uint64_t v42 = class metadata base offset for RunCustomIntentCATs + v18 + 208;
    unint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v12 + 112) = v19;
    void *v19 = v12;
    v19[1] = CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog_rfv1(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_76_6();
    OUTLINED_FUNCTION_85();
    return v26(v20, v21, v22, v23, v24, v25, v26, v27, v40, v42, a11, a12);
  }
  else
  {
    *(void *)(v12 + 128) = OUTLINED_FUNCTION_11_28(*(void **)(v12 + 64));
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_15_19();
    uint64_t v29 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_20_24(v29);
    uint64_t v41 = *(void *)(class metadata base offset for RunCustomIntentCATs + v30 + 200)
        + **(int **)(class metadata base offset for RunCustomIntentCATs + v30 + 200);
    uint64_t v43 = class metadata base offset for RunCustomIntentCATs + v30 + 200;
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v12 + 136) = v31;
    *uint64_t v31 = v12;
    v31[1] = CustomIntentsDialogTemplating.makeParameterValueUnsupportedDialog_rfv1(app:parameterName:intentResolutionResult:intent:shouldShowAppAttribution:);
    OUTLINED_FUNCTION_52_8();
    OUTLINED_FUNCTION_85();
    return v36(v32, v33, v34, v35, v36, v37, v38, v39, v41, v43, a11, a12);
  }
}

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 216) = v2;
  *(void *)(v1 + 80) = v3;
  *(void *)(v1 + 88) = v0;
  *(void *)(v1 + 64) = v4;
  *(void *)(v1 + 72) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  uint64_t v7 = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 104) = OUTLINED_FUNCTION_95_0(v7);
  *(void *)(v1 + 112) = swift_task_alloc();
  *(void *)(v1 + 120) = swift_task_alloc();
  *(void *)(v1 + 128) = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v1 + 144) = OUTLINED_FUNCTION_145(v8);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  OUTLINED_FUNCTION_47_8(v4);
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 184) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_139();
  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_24_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  v2[5] = v1;
  v2[6] = v4;
  v2[7] = v0;
  OUTLINED_FUNCTION_51_8();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 208) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v8, v9, v10);
}

#error "11A4D0: call analysis failed (funcsize=290)"

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog(app:intent:intentResponse:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *(void **)(v10 + 80);
  swift_release();

  OUTLINED_FUNCTION_119();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_14_1();
  return v14(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *(void **)(v10 + 80);
  swift_release();

  OUTLINED_FUNCTION_119();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog(app:intent:intentResponse:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();

  OUTLINED_FUNCTION_70_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_28_0();
  return v15(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();

  OUTLINED_FUNCTION_70_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 176) = v3;
  OUTLINED_FUNCTION_56_2(v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 64) = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v1 + 80) = OUTLINED_FUNCTION_36_0(v8);
  *(void *)(v1 + 88) = swift_task_alloc();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v1 + 104) = OUTLINED_FUNCTION_95_0(v9);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_139();
  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_24_2();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void **)(v0 + 40);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 168) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v7, v8, v9);
}

#error "11AF88: call analysis failed (funcsize=295)"

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *(void **)(v10 + 40);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_14_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *(void **)(v10 + 40);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t CustomIntentsDialogTemplating.makeIntentConfirmationDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = *(void **)(v12 + 112);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_28_0();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t CustomIntentsDialogTemplating.makeIntentHandledDialog(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v1 + 208) = v2;
  *(void *)(v1 + 80) = v3;
  *(void *)(v1 + 88) = v0;
  *(void *)(v1 + 64) = v4;
  *(void *)(v1 + 72) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  uint64_t v7 = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 104) = OUTLINED_FUNCTION_95_0(v7);
  *(void *)(v1 + 112) = swift_task_alloc();
  *(void *)(v1 + 120) = swift_task_alloc();
  *(void *)(v1 + 128) = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v1 + 144) = OUTLINED_FUNCTION_145(v8);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  OUTLINED_FUNCTION_47_8(v4);
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 176) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_139();
  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_24_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  v2[5] = v1;
  v2[6] = v4;
  v2[7] = v0;
  OUTLINED_FUNCTION_51_8();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 200) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void **)(v0 + 80);
  swift_release();

  OUTLINED_FUNCTION_142();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_21_0();

  OUTLINED_FUNCTION_142();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

#error "11BB10: call analysis failed (funcsize=329)"

uint64_t CustomIntentsDialogTemplating.makeIntentHandledDialog(app:intent:intentResponse:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  swift_release();
  uint64_t v13 = *(void **)(v12 + 72);
  type metadata accessor for CustomIntentsDialogTemplating();
  if ((static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(v13) & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = OUTLINED_FUNCTION_26_1(v14, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_42_0(&dword_0, v17, v18, "CustomIntentDialogTemplating.makeIntentHandledDialog incrementing dialogCount");
      swift_slowDealloc();
    }

    OUTLINED_FUNCTION_16_5();
    uint64_t v19 = OUTLINED_FUNCTION_113();
    v20(v19);
  }
  OUTLINED_FUNCTION_70_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_28_0();
  return v23(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_30_4();
  uint64_t v13 = *(void **)(v12 + 72);
  type metadata accessor for CustomIntentsDialogTemplating();
  if ((static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(v13) & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = OUTLINED_FUNCTION_26_1(v14, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_42_0(&dword_0, v17, v18, "CustomIntentDialogTemplating.makeIntentHandledDialog incrementing dialogCount");
      swift_slowDealloc();
    }

    OUTLINED_FUNCTION_16_5();
    uint64_t v19 = OUTLINED_FUNCTION_113();
    v20(v19);
  }
  OUTLINED_FUNCTION_70_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_28_0();
  return v23(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
}

uint64_t CustomIntentsDialogTemplating.makeIntentHandledDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 240) = v3;
  OUTLINED_FUNCTION_56_2(v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v7);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 64) = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v1 + 80) = OUTLINED_FUNCTION_36_0(v8);
  *(void *)(v1 + 88) = swift_task_alloc();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v1 + 104) = OUTLINED_FUNCTION_95_0(v9);
  uint64_t v10 = type metadata accessor for TemplatingResult();
  *(void *)(v1 + 112) = v10;
  OUTLINED_FUNCTION_1_0(v10);
  *(void *)(v1 + 120) = v11;
  *(void *)(v1 + 128) = OUTLINED_FUNCTION_13_0();
  uint64_t v12 = swift_task_alloc();
  *(void *)(v1 + 144) = OUTLINED_FUNCTION_145(v12);
  uint64_t v13 = type metadata accessor for BehaviorAfterSpeaking();
  *(void *)(v1 + 152) = v13;
  OUTLINED_FUNCTION_1_0(v13);
  *(void *)(v1 + 160) = v14;
  *(void *)(v1 + 168) = OUTLINED_FUNCTION_13_0();
  *(void *)(v1 + 176) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 208) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_139();
  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_24_2();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *char v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v7, v8, v9);
}

#error "11C8D4: call analysis failed (funcsize=350)"

uint64_t CustomIntentsDialogTemplating.makeIntentHandledDialog_rfv1(app:intent:intentResponse:shouldShowAppAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = v14[17];
  uint64_t v16 = v14[18];
  uint64_t v17 = v14[14];
  uint64_t v18 = v14[15];
  swift_release();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  v19(v16, v15, v17);
  uint64_t v20 = (void *)v14[4];
  type metadata accessor for CustomIntentsDialogTemplating();
  if ((static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(v20) & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = (void *)OUTLINED_FUNCTION_26_1(v21, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v23))
    {
      uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v24);
      OUTLINED_FUNCTION_23_0(&dword_0, v25, v26, "CustomIntentDialogTemplating.makeIntentHandledDialog incrementing dialogCount");
      OUTLINED_FUNCTION_15();
    }

    OUTLINED_FUNCTION_16_5();
    uint64_t v27 = OUTLINED_FUNCTION_113();
    v28(v27);
  }
  OUTLINED_FUNCTION_128();
  uint64_t v29 = OUTLINED_FUNCTION_86_3();
  ((void (*)(uint64_t))v19)(v29);
  OUTLINED_FUNCTION_31_13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_3();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14);
}

{
  void *v14;
  void (*v15)(void);
  void *v16;
  uint64_t v17;
  void *v18;
  os_log_type_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = *(void (**)(void))(v14[15] + 32);
  ((void (*)(void, void, void))v15)(v14[18], v14[16], v14[14]);
  uint64_t v16 = (void *)v14[4];
  type metadata accessor for CustomIntentsDialogTemplating();
  if ((static CustomIntentsDialogTemplating.isShortcutsInternalCustomIntent(intent:)(v16) & 1) == 0)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    uint64_t v18 = (void *)OUTLINED_FUNCTION_26_1(v17, (uint64_t)static Logger.voiceCommands);
    uint64_t v19 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v19))
    {
      uint64_t v20 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v20);
      OUTLINED_FUNCTION_23_0(&dword_0, v21, v22, "CustomIntentDialogTemplating.makeIntentHandledDialog incrementing dialogCount");
      OUTLINED_FUNCTION_15();
    }

    OUTLINED_FUNCTION_16_5();
    os_log_type_t v23 = OUTLINED_FUNCTION_113();
    v24(v23);
  }
  OUTLINED_FUNCTION_128();
  uint64_t v25 = OUTLINED_FUNCTION_86_3();
  v15(v25);
  OUTLINED_FUNCTION_31_13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_3();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = *(void **)(v14 + 40);
  swift_release();

  OUTLINED_FUNCTION_58_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_3();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();

  OUTLINED_FUNCTION_58_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_3();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12, a13, a14);
}

uint64_t CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  v1[6] = OUTLINED_FUNCTION_13_0();
  v1[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SpeakableString();
  v1[8] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[9] = v7;
  v1[10] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_20_19();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 112) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v7 = *(void *)(v3 + 56);
  uint64_t v8 = *(void *)(v3 + 48);
  if (!v0) {
    *(void *)(v5 + 120) = v2;
  }
  outlined destroy of URL?(v8, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of URL?(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_24_2();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_122();

  uint64_t v1 = OUTLINED_FUNCTION_38_13();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_24_2();
  return v5(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_122();

  uint64_t v1 = OUTLINED_FUNCTION_38_13();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

#error "11D3F8: call analysis failed (funcsize=171)"

uint64_t CustomIntentsDialogTemplating.makeFailureHandlingIntentDialog_prerfv2(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  OUTLINED_FUNCTION_56_2(v3, v4, v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  v1[7] = OUTLINED_FUNCTION_13_0();
  v1[8] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SpeakableString();
  v1[9] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[10] = v8;
  v1[11] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_32_16();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_121();

  uint64_t v1 = OUTLINED_FUNCTION_38_13();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_121();

  uint64_t v1 = OUTLINED_FUNCTION_38_13();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_24_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

#error "11D9E0: call analysis failed (funcsize=172)"

uint64_t CustomIntentsDialogTemplating.makeHandoffDialog_preRFv2()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentsDialogTemplating.makeHandoffDialog_preRFv2());
}

uint64_t CustomIntentsDialogTemplating.makeHandoffDialog_preRFv2()()
{
  OUTLINED_FUNCTION_13_1();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_4_21((void *)(*(void *)(v0 + 24) + 16));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_65_1(v1);
  *uint64_t v2 = v3;
  v2[1] = CustomIntentsDialogTemplating.makeHandoffDialog_preRFv2();
  uint64_t v4 = OUTLINED_FUNCTION_25_13();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeNotificationMessageForHandoff()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentsDialogTemplating.makeNotificationMessageForHandoff());
}

{
  void *v0;
  uint64_t v1;
  char v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = OUTLINED_FUNCTION_71_5();
  *(void *)(v1 + 24) = OUTLINED_FUNCTION_57_3(v0);
  OUTLINED_FUNCTION_12_26();
  if (v2)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v1 + 32) = v3;
    *uint64_t v3 = v1;
    v3[1] = CustomIntentsDialogTemplating.makeNotificationMessageForHandoff();
    uint64_t v4 = OUTLINED_FUNCTION_31_9();
  }
  else
  {
    uint64_t v6 = swift_task_alloc();
    uint64_t v7 = (void *)OUTLINED_FUNCTION_58_1(v6);
    const char *v7 = v8;
    v7[1] = CustomIntentsDialogTemplating.makeNotificationMessageForHandoff();
    uint64_t v4 = OUTLINED_FUNCTION_31_9();
  }
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    uint64_t v10 = OUTLINED_FUNCTION_10_14();
    return v11(v10);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.makeNotificationMessageForHandoff_preRFv2()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentsDialogTemplating.makeNotificationMessageForHandoff_preRFv2());
}

uint64_t CustomIntentsDialogTemplating.makeNotificationMessageForHandoff_preRFv2()()
{
  OUTLINED_FUNCTION_21_0();
  char v2 = OUTLINED_FUNCTION_71_5();
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_57_3(v0);
  OUTLINED_FUNCTION_12_26();
  if (v2)
  {
    uint64_t v3 = swift_task_alloc();
    uint64_t v4 = (void *)OUTLINED_FUNCTION_65_1(v3);
    *uint64_t v4 = v5;
    v4[1] = CustomIntentsDialogTemplating.makeNotificationMessageForHandoff_preRFv2();
    uint64_t v6 = OUTLINED_FUNCTION_25_13();
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v1 + 56) = v8;
    *uint64_t v8 = v1;
    v8[1] = CustomIntentsDialogTemplating.makeNotificationMessageForHandoff_preRFv2();
    uint64_t v6 = OUTLINED_FUNCTION_25_13();
  }
  return v7(v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentsDialogTemplating.doneButton()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[3] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4)
  {
    uint64_t v5 = *(int **)(class metadata base offset for RunCustomIntentCATsSimple + **(void **)(v0[2] + 88) + 120);
    uint64_t v11 = (uint64_t (*)(void))((char *)v5 + *v5);
    uint64_t v6 = swift_task_alloc();
    uint64_t v7 = (void *)OUTLINED_FUNCTION_58_1(v6);
    const char *v7 = v8;
    v7[1] = CustomIntentsDialogTemplating.doneButton();
    return v11();
  }
  else
  {
    uint64_t v10 = (void *)swift_task_alloc();
    v0[8] = v10;
    *uint64_t v10 = v0;
    v10[1] = CustomIntentsDialogTemplating.doneButton();
    return CustomIntentsDialogTemplating.doneButton_rfv1()();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 56) = v3;
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();
  dispatch thunk of LabelExecutionResult.subscript.getter();
  swift_release();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_75();
  return v1(v0);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_23_1();
  return v6(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t CustomIntentsDialogTemplating.doneButton_rfv1()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for TemplatingText();
  v1[3] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_25();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_16(v4);
  v1[6] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for TemplatingSection();
  v1[7] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[8] = v6;
  v1[9] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  v1[10] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[11] = v8;
  v1[12] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  int *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(int **)(class metadata base offset for RunCustomIntentCATs + **(void **)(v0[2] + 80) + 56);
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[13] = v2;
  *uint64_t v2 = v0;
  v2[1] = CustomIntentsDialogTemplating.doneButton_rfv1();
  uint64_t v3 = v0[12];
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

void CustomIntentsDialogTemplating.doneButton_rfv1()()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = TemplatingResult.sections.getter();
  specialized Collection.first.getter(v3, v2);
  swift_bridgeObjectRelease();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v1);
  uint64_t v6 = v0[11];
  uint64_t v5 = v0[12];
  uint64_t v7 = v0[10];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?(v0[6], &demangling cache variable for type metadata for TemplatingSection?);
    lazy protocol witness table accessor for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError();
    swift_allocError();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_18_2();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v18 = v0[10];
  uint64_t v11 = v0[8];
  uint64_t v10 = v0[9];
  uint64_t v12 = v0[7];
  uint64_t v13 = v0[4];
  uint64_t v14 = v0[5];
  uint64_t v15 = v0[3];
  (*(void (**)(uint64_t))(v11 + 32))(v10);
  TemplatingSection.content.getter();
  TemplatingText.text.getter();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_2();
  __asm { BRAA            X3, X16 }
}

#error "11F548: call analysis failed (funcsize=96)"

#error "11F6CC: call analysis failed (funcsize=97)"

uint64_t CustomIntentsDialogTemplating.getAppName(app:)(uint64_t a1)
{
  uint64_t v3 = v1[17];
  uint64_t v4 = v1[18];
  __swift_project_boxed_opaque_existential_1(v1 + 14, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a1, v3, v4);

  return SpeakableString.init(print:speak:)();
}

uint64_t CustomIntentsDialogTemplating.copyPropertiesFromIntentToResponse(intent:intentResponse:)(void *a1, void *a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    return (uint64_t)v2;
  }
  id v4 = a2;
  id v5 = [a1 _dictionaryRepresentation];
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = [a1 typeName];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  INIntentResponse.localizedResponseTemplate(intentName:)(v11);
  type metadata accessor for CATSpeakableString();
  uint64_t v12 = static CATSpeakableString.getPropertiesInTemplateString(templateString:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v84 = v4;
  id v13 = [v4 _codableDescription];
  if (!v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  id v14 = v13;
  id v81 = v12;
  uint64_t v15 = outlined bridged method (pb) of @objc INCodableDescription.attributes.getter(v13);
  if (v15)
  {
    unint64_t v16 = v15;
    BOOL v79 = v14;
    unint64_t v80 = v2;
    if ((v15 & 0xC000000000000001) != 0)
    {
      uint64_t v17 = __CocoaDictionary.makeIterator()();
      uint64_t v83 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      unint64_t v16 = v17 | 0x8000000000000000;
    }
    else
    {
      uint64_t v20 = -1 << *(unsigned char *)(v15 + 32);
      uint64_t v83 = v15 + 64;
      uint64_t v21 = ~v20;
      uint64_t v22 = -v20;
      if (v22 < 64) {
        uint64_t v23 = ~(-1 << v22);
      }
      else {
        uint64_t v23 = -1;
      }
      unint64_t v19 = v23 & *(void *)(v15 + 64);
      uint64_t v18 = v21;
    }
    int64_t v24 = 0;
    int64_t v82 = (unint64_t)(v18 + 64) >> 6;
    os_log_type_t v78 = v12 + 9;
    if ((v16 & 0x8000000000000000) != 0) {
      goto LABEL_14;
    }
LABEL_12:
    if (v19)
    {
      uint64_t v25 = (v19 - 1) & v19;
      unint64_t v26 = __clz(__rbit64(v19)) | (v24 << 6);
      int64_t v27 = v24;
      goto LABEL_31;
    }
    int64_t v33 = v24 + 1;
    if (!__OFADD__(v24, 1))
    {
      if (v33 < v82)
      {
        unint64_t v34 = *(void *)(v83 + 8 * v33);
        int64_t v27 = v24 + 1;
        if (v34) {
          goto LABEL_30;
        }
        int64_t v27 = v24 + 2;
        if (v24 + 2 >= v82) {
          goto LABEL_87;
        }
        unint64_t v34 = *(void *)(v83 + 8 * v27);
        if (v34) {
          goto LABEL_30;
        }
        int64_t v27 = v24 + 3;
        if (v24 + 3 >= v82) {
          goto LABEL_87;
        }
        unint64_t v34 = *(void *)(v83 + 8 * v27);
        if (v34)
        {
LABEL_30:
          uint64_t v25 = (v34 - 1) & v34;
          unint64_t v26 = __clz(__rbit64(v34)) + (v27 << 6);
LABEL_31:
          uint64_t v36 = *(void **)(*(void *)(v16 + 56) + 8 * v26);
          id v31 = *(id *)(*(void *)(v16 + 48) + 8 * v26);
          id v32 = v36;
          if (v31)
          {
            while (1)
            {

              uint64_t v37 = outlined bridged method (pb) of @objc INCodableAttribute.propertyName.getter(v32);
              if (v38)
              {
                uint64_t v39 = v37;
                uint64_t v40 = v38;
                *(void *)&long long v86 = v37;
                *((void *)&v86 + 1) = v38;
                swift_bridgeObjectRetain();
                AnyHashable.init<A>(_:)();
                if (*(void *)(v6 + 16)
                  && (unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v88), (v42 & 1) != 0))
                {
                  outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v41, (uint64_t)&v86);
                }
                else
                {
                  long long v86 = 0u;
                  long long v87 = 0u;
                }
                outlined destroy of AnyHashable((uint64_t)v88);
                if (!*((void *)&v87 + 1))
                {
                  swift_bridgeObjectRelease();

                  outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
                  goto LABEL_85;
                }
                outlined init with take of Any(&v86, v89);
                *(void *)&long long v86 = v39;
                *((void *)&v86 + 1) = v40;
                swift_bridgeObjectRetain_n();
                AnyHashable.init<A>(_:)();
                uint64_t v43 = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(v84);
                if (!v43) {
                  goto LABEL_93;
                }
                uint64_t v44 = v43;
                swift_bridgeObjectRelease();
                if (*(void *)(v44 + 16)
                  && (unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v88), (v46 & 1) != 0))
                {
                  outlined init with copy of Any(*(void *)(v44 + 56) + 32 * v45, (uint64_t)&v86);
                }
                else
                {
                  long long v86 = 0u;
                  long long v87 = 0u;
                }
                swift_bridgeObjectRelease();
                outlined destroy of AnyHashable((uint64_t)v88);
                uint64_t v47 = *((void *)&v87 + 1);
                outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
                if (!v47)
                {
                  uint64_t v48 = v81[2];
                  if (v48)
                  {
                    BOOL v49 = v81[4] == v39 && v40 == v81[5];
                    if (v49 || (OUTLINED_FUNCTION_94() & 1) != 0)
                    {
LABEL_53:
                      *(void *)&long long v86 = v39;
                      *((void *)&v86 + 1) = v40;
                      swift_bridgeObjectRetain();
                      AnyHashable.init<A>(_:)();
                      outlined init with copy of Any((uint64_t)v89, (uint64_t)&v86);
                      uint64_t v50 = outlined bridged method (pb) of @objc INIntentResponse.propertiesByName.getter(v84);
                      if (!v50) {
                        goto LABEL_94;
                      }
                      uint64_t v51 = (void *)v50;
                      swift_bridgeObjectRelease();
                      if (*((void *)&v87 + 1))
                      {
                        outlined init with take of Any(&v86, v85);
                        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v88);
                        uint64_t v55 = v51[2];
                        BOOL v56 = (v54 & 1) == 0;
                        Swift::Int v57 = v55 + v56;
                        if (__OFADD__(v55, v56)) {
                          goto LABEL_90;
                        }
                        unint64_t v58 = v53;
                        char v59 = v54;
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
                        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v57))
                        {
                          unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v88);
                          if ((v59 & 1) != (v61 & 1)) {
                            goto LABEL_96;
                          }
                          unint64_t v58 = v60;
                        }
                        if (v59)
                        {
                          uint64_t v62 = (_OWORD *)(v51[7] + 32 * v58);
                          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
                          outlined init with take of Any(v85, v62);
                        }
                        else
                        {
                          v51[(v58 >> 6) + 8] |= 1 << v58;
                          outlined init with copy of AnyHashable((uint64_t)v88, v51[6] + 40 * v58);
                          outlined init with take of Any(v85, (_OWORD *)(v51[7] + 32 * v58));
                          uint64_t v68 = v51[2];
                          BOOL v69 = __OFADD__(v68, 1);
                          uint64_t v70 = v68 + 1;
                          if (v69) {
                            goto LABEL_91;
                          }
                          long long v51[2] = v70;
                        }
                        swift_bridgeObjectRelease();
                        outlined destroy of AnyHashable((uint64_t)v88);
                      }
                      else
                      {
                        outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
                        swift_bridgeObjectRetain();
                        unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v88);
                        char v65 = v64;
                        swift_bridgeObjectRelease();
                        if (v65)
                        {
                          char v66 = swift_isUniquelyReferenced_nonNull_native();
                          Swift::Int v67 = v51[3];
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
                          _NativeDictionary.ensureUnique(isUnique:capacity:)(v66, v67);
                          outlined destroy of AnyHashable(v51[6] + 40 * v63);
                          outlined init with take of Any((_OWORD *)(v51[7] + 32 * v63), v85);
                          _NativeDictionary._delete(at:)();
                          swift_bridgeObjectRelease();
                        }
                        else
                        {
                          memset(v85, 0, sizeof(v85));
                        }
                        outlined destroy of AnyHashable((uint64_t)v88);
                        outlined destroy of URL?((uint64_t)v85, &demangling cache variable for type metadata for Any?);
                      }
                      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      [v84 setPropertiesByName:isa];

                      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v89);
                      goto LABEL_85;
                    }
                    if (v48 != 1)
                    {
                      BOOL v72 = v81[6] == v39 && v40 == v81[7];
                      if (v72 || (OUTLINED_FUNCTION_94() & 1) != 0) {
                        goto LABEL_53;
                      }
                      if (v48 != 2)
                      {
                        id v73 = v78;
                        uint64_t v74 = 2;
                        while (!__OFADD__(v74, 1))
                        {
                          uint64_t v77 = v74 + 1;
                          BOOL v75 = *(v73 - 1) == v39 && v40 == *v73;
                          if (v75 || (OUTLINED_FUNCTION_94() & 1) != 0) {
                            goto LABEL_53;
                          }
                          v73 += 2;
                          ++v74;
                          if (v77 == v48) {
                            goto LABEL_44;
                          }
                        }
                        goto LABEL_92;
                      }
                    }
                  }
                }
LABEL_44:
                __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v89);
                swift_bridgeObjectRelease();
              }

LABEL_85:
              int64_t v24 = v27;
              unint64_t v19 = v25;
              if ((v16 & 0x8000000000000000) == 0) {
                goto LABEL_12;
              }
LABEL_14:
              uint64_t v28 = __CocoaDictionary.Iterator.next()();
              if (v28)
              {
                uint64_t v30 = v29;
                *(void *)&v89[0] = v28;
                type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
                swift_unknownObjectRetain();
                swift_dynamicCast();
                id v31 = (id)v88[0];
                swift_unknownObjectRelease();
                *(void *)&v89[0] = v30;
                type metadata accessor for NSError(0, &lazy cache variable for type metadata for INCodableAttribute);
                swift_unknownObjectRetain();
                swift_dynamicCast();
                id v32 = (id)v88[0];
                swift_unknownObjectRelease();
                int64_t v27 = v24;
                uint64_t v25 = v19;
                if (v31) {
                  continue;
                }
              }
              goto LABEL_87;
            }
          }
          goto LABEL_87;
        }
        int64_t v27 = v24 + 4;
        if (v24 + 4 < v82)
        {
          unint64_t v34 = *(void *)(v83 + 8 * v27);
          if (!v34)
          {
            int64_t v35 = v24 + 5;
            do
            {
              if (v35 >= v82) {
                goto LABEL_87;
              }
              unint64_t v34 = *(void *)(v83 + 8 * v35++);
            }
            while (!v34);
            int64_t v27 = v35 - 1;
          }
          goto LABEL_30;
        }
      }
LABEL_87:
      outlined consume of [String : DMFPolicy].Iterator._Variant();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return (uint64_t)v80;
    }
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
  }
  __break(1u);
LABEL_96:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t CustomIntentsDialogTemplating.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  return v0;
}

uint64_t CustomIntentsDialogTemplating.__deallocating_deinit()
{
  CustomIntentsDialogTemplating.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized DisambiguationItemProtocol.toDisplayString()()
{
  type metadata accessor for CATSpeakableString();
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  swift_bridgeObjectRetain();
  static CATSpeakableString.stripTTSHint(print:)(v1, v2, v3, v4, v5, v6, v7, v8, v26, v29, v31);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t v11 = v0[3];
  if (v11)
  {
    uint64_t v12 = v0[2];
    swift_bridgeObjectRetain();
    static CATSpeakableString.stripTTSHint(print:)(v12, v11, v13, v14, v15, v16, v17, v18, v27, v30, v10);
    uint64_t v20 = v19;
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0) {
      uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (v23)
    {
      OUTLINED_FUNCTION_92_1();
      v24._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_127();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      String.append(_:)(v28);
    }
    swift_bridgeObjectRelease();
  }
  return OUTLINED_FUNCTION_75();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  type metadata accessor for CATSpeakableString();
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[3];
  swift_bridgeObjectRetain();
  static CATSpeakableString.stripTTSHint(print:)(v1, v2, v4, v5, v6, v7, v8, v9, v25, v28, v30);
  OUTLINED_FUNCTION_106();
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = OUTLINED_FUNCTION_127();
    static CATSpeakableString.stripTTSHint(print:)(v10, v11, v12, v13, v14, v15, v16, v17, v26, v29, v0);
    uint64_t v19 = v18;
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    unint64_t v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0) {
      unint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
    }
    if (v22)
    {
      OUTLINED_FUNCTION_92_1();
      v23._uint64_t countAndFlagsBits = v19;
      v23._object = (void *)v21;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      String.append(_:)(v27);
    }
    swift_bridgeObjectRelease();
  }
  return OUTLINED_FUNCTION_75();
}

uint64_t outlined bridged method (pb) of @objc INCodableDescription.attributes.getter(void *a1)
{
  id v1 = [a1 attributes];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for INCodableAttribute);
  lazy protocol witness table accessor for type NSNumber and conformance NSObject();
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc INCodableAttribute.propertyName.getter(void *a1)
{
  id v1 = [a1 propertyName];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(long long *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(a10 + 136) = a11;
  *(void *)(a10 + 144) = a12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a10 + 112));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32))(boxed_opaque_existential_1, a9, a11);
  *(void *)(a10 + 56) = a2;
  outlined init with take of AceServiceInvokerAsync(a1, a10 + 16);
  *(void *)(a10 + 64) = a3;
  *(unsigned char *)(a10 + 72) = a4 & 1;
  *(void *)(a10 + 80) = a5;
  *(void *)(a10 + 88) = a6;
  *(void *)(a10 + 96) = a7;
  *(void *)(a10 + 104) = a8;
  return a10;
}

uint64_t type metadata accessor for CustomIntentsDialogTemplating()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError;
  if (!lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError;
  if (!lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentsDialogTemplatingError and conformance CustomIntentsDialogTemplatingError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CustomIntentsDialogTemplatingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x12057CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentsDialogTemplatingError()
{
  return &type metadata for CustomIntentsDialogTemplatingError;
}

unint64_t lazy protocol witness table accessor for type NSNumber and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSNumber and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSNumber and conformance NSObject)
  {
    type metadata accessor for NSError(255, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSNumber and conformance NSObject);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_11_28@<X0>(void *a1@<X8>)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v1);
  return DeviceState.asSiriKitDeviceState()(v1, v2);
}

uint64_t OUTLINED_FUNCTION_15_19()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_19_16(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return CustomIntentsDialogTemplating.getAppName(app:)(v2);
}

uint64_t OUTLINED_FUNCTION_20_24(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_24_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __swift_storeEnumTagSinglePayload(v11, 0, 1, v12);
  return CustomIntentsDialogTemplating.getAppName(app:)(a11);
}

uint64_t OUTLINED_FUNCTION_30_14()
{
  return outlined destroy of URL?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_31_13()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_32_16()
{
  return outlined destroy of URL?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_33_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_36_14(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_38_13()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_40_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v12 + 16) = v11;
  return v12
       + ((*(unsigned __int8 *)(a10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(a10 + 80))
       + *(void *)(a10 + 72) * v10;
}

uint64_t OUTLINED_FUNCTION_47_8(uint64_t result)
{
  v1[2] = v3;
  v1[3] = result;
  v1[4] = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_50_8()
{
  return DeviceState.isVox.getter();
}

uint64_t OUTLINED_FUNCTION_56_4(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v2);
  return DeviceState.asSiriKitDeviceState()(v2, v1);
}

uint64_t OUTLINED_FUNCTION_57_3(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return DeviceState.asSiriKitDeviceState()(v1, v2);
}

uint64_t OUTLINED_FUNCTION_58_8()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_60_4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v22 = v19;
  uint64_t v23 = v20;
  String.append(_:)(*(Swift::String *)&v22);
}

void OUTLINED_FUNCTION_61_5(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v22 = v19;
  uint64_t v23 = v20;
  String.append(_:)(*(Swift::String *)&v22);
}

uint64_t OUTLINED_FUNCTION_62_4()
{
  return outlined destroy of URL?(v1, v0);
}

__n128 *OUTLINED_FUNCTION_67_5(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6574656D61726170;
  result[2].n128_u64[1] = 0xE900000000000072;
  return result;
}

id OUTLINED_FUNCTION_68_4()
{
  __swift_project_boxed_opaque_existential_1(v2, v1);
  return v0;
}

void OUTLINED_FUNCTION_70_4()
{
}

uint64_t OUTLINED_FUNCTION_71_5()
{
  uint64_t v1 = *(void *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v1);
  return DeviceState.isActualHomePod.getter(v1);
}

uint64_t OUTLINED_FUNCTION_72_6()
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return DeviceState.asSiriKitDeviceState()(v2, v3);
}

uint64_t OUTLINED_FUNCTION_73_1()
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return DeviceState.asSiriKitDeviceState()(v2, v3);
}

uint64_t OUTLINED_FUNCTION_74_1(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return CustomIntentsDialogTemplating.getAppName(app:)(v2);
}

uint64_t OUTLINED_FUNCTION_75_4()
{
  return INIntentResponse.localizedSpokenResponse(intentName:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_81_4(uint64_t a1, uint64_t a2)
{
  return static LocaleUtils.getContentLocale(dialogLocale:appInfo:formatString:)(v2, v4, v3, a1, a2);
}

uint64_t OUTLINED_FUNCTION_82_3(uint64_t a1)
{
  return CustomIntentsDialogTemplating.localizedCustomUnsupportendPromptFor(app:parameterName:unsupportedReasonCode:intent:tokens:)(v4, v3, v1, a1, v2, 0);
}

uint64_t OUTLINED_FUNCTION_83_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_84_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __swift_storeEnumTagSinglePayload(v10, 0, 1, v9);
  return CustomIntentsDialogTemplating.getAppName(app:)(a9);
}

uint64_t OUTLINED_FUNCTION_85_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_86_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_87_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __swift_storeEnumTagSinglePayload(v10, 0, 1, v9);
  return CustomIntentsDialogTemplating.getAppName(app:)(a9);
}

uint64_t OUTLINED_FUNCTION_88_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __swift_storeEnumTagSinglePayload(v12, 0, 1, v11);
  return CustomIntentsDialogTemplating.getAppName(app:)(a11);
}

__n128 *OUTLINED_FUNCTION_89_1(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x746E756F63;
  result[2].n128_u64[1] = 0xE500000000000000;
  return result;
}

void OUTLINED_FUNCTION_91_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 - 96) = a7;
  *(void *)(v8 - 88) = a8;
  *(void *)(v8 - 104) = a6;
}

uint64_t OUTLINED_FUNCTION_94()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_95_0(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_96_0()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0, 0);
}

void OUTLINED_FUNCTION_99(unint64_t a1@<X8>)
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1, 1);
}

uint64_t OUTLINED_FUNCTION_100()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_101()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_102()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_103(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_106()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_108()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 1);
}

uint64_t OUTLINED_FUNCTION_110(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_113()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_114()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_117(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, a4);
}

void OUTLINED_FUNCTION_119()
{
  uint64_t v2 = *(void **)(v0 + 152);
}

uint64_t OUTLINED_FUNCTION_120()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_121()
{
  uint64_t v2 = *(void **)(v0 + 40);
}

void OUTLINED_FUNCTION_122()
{
  uint64_t v2 = *(void **)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_126(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static LocaleUtils.getContentLocale(dialogLocale:appInfo:formatString:)(v7, v6, v4, a4, v5);
}

uint64_t OUTLINED_FUNCTION_127()
{
  return v0;
}

void OUTLINED_FUNCTION_128()
{
  uint64_t v2 = *(void **)(v0 + 40);
}

id OUTLINED_FUNCTION_129(void *a1)
{
  return outlined bridged method (mbgnn) of @objc INCodableDescription.attribute(byName:)(v2, v1, a1);
}

uint64_t OUTLINED_FUNCTION_130()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_131()
{
  return v0;
}

void OUTLINED_FUNCTION_132()
{
}

void OUTLINED_FUNCTION_133()
{
}

uint64_t OUTLINED_FUNCTION_136()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_138()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_139()
{
  return outlined destroy of URL?(v1, v0);
}

void OUTLINED_FUNCTION_141()
{
}

uint64_t OUTLINED_FUNCTION_142()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_145(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_146()
{
  return 0x6B6E616C62;
}

uint64_t protocol witness for DisambiguationItemProtocol.getDisplayTitle() in conformance WFChooseFromListDisambiguationItem()
{
  __n128 v0 = OUTLINED_FUNCTION_0_23();
  return specialized DisambiguationItemProtocol.getDisplayTitle()(v0);
}

Swift::String __swiftcall DisambiguationItemProtocol.getDisplayTitle()()
{
  uint64_t v2 = DisambiguationItemProtocol.getDisplayTitle()(v0, v1, (void (*)(uint64_t, uint64_t))static CATSpeakableString.stripTTSHint(print:));
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t _sSSSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v4 = OUTLINED_FUNCTION_19();
  v5(v4);
  return a2;
}

uint64_t specialized DisambiguationItemProtocol.getVoiceCommandPayloadsForItem()()
{
  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  swift_allocObject();
  uint64_t v1 = UsoEntityBuilder_common_VoiceCommandPayload.init()();
  type metadata accessor for CATSpeakableString();
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[5];
  swift_bridgeObjectRetain();
  static CATSpeakableString.stripTTSHint(print:)(v2, v3, v5, v6, v7, v8, v9, v10, v16, v17[0], (void *)v17[1]);
  swift_bridgeObjectRelease();
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_211C70;
  *(void *)(v11 + 32) = v1;
  v17[0] = v11;
  specialized Array._endMutation()();
  uint64_t v12 = v17[0];
  v17[0] = v4;
  uint64_t v13 = *(void *)(v4 + 16);
  if (v13)
  {
    swift_retain();
    outlined retain of [String]((uint64_t)v17);
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v14 = v4 + 40;
    do
    {
      OUTLINED_FUNCTION_7_26();
      swift_bridgeObjectRetain();
      UsoEntityBuilder_common_VoiceCommandPayload.init()();
      OUTLINED_FUNCTION_6_29();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_5_24();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v14 += 16;
      --v13;
    }
    while (v13);
    outlined release of [String]((uint64_t)v17);
  }
  else
  {
    swift_retain();
  }
  specialized Array.append<A>(contentsOf:)((unint64_t)_swiftEmptyArrayStorage);
  swift_release();
  return v12;
}

uint64_t DisambiguationItemProtocol.getVoiceCommandPayloadsForItem()(uint64_t a1, uint64_t a2)
{
  void (*v7)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unsigned char v17[16];
  long long v18;
  uint64_t v19;

  type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
  swift_allocObject();
  uint64_t v4 = UsoEntityBuilder_common_VoiceCommandPayload.init()();
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_211C70;
  *(void *)(v5 + 32) = v4;
  *(void *)&uint64_t v12 = v5;
  specialized Array._endMutation()();
  uint64_t v6 = v12;
  uint64_t v7 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a2 + 8);
  swift_retain();
  v7(&v12, a1, a2);
  uint64_t v8 = v15;
  uint64_t v19 = v15;
  uint64_t v18 = v12;
  swift_bridgeObjectRetain();
  outlined release of String?((uint64_t)&v18);
  _sSSSgWObTm_0((uint64_t)&v13, (uint64_t)v17, &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)v17);
  _sSSSgWObTm_0((uint64_t)&v14, (uint64_t)&v16, &demangling cache variable for type metadata for INImage?);
  outlined release of INImage?(&v16);
  outlined release of [String]((uint64_t)&v19);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v10 = v8 + 40;
    do
    {
      OUTLINED_FUNCTION_7_26();
      swift_bridgeObjectRetain();
      UsoEntityBuilder_common_VoiceCommandPayload.init()();
      OUTLINED_FUNCTION_6_29();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_5_24();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v10 += 16;
      --v9;
    }
    while (v9);
  }
  outlined release of [String]((uint64_t)&v19);
  specialized Array.append<A>(contentsOf:)((unint64_t)_swiftEmptyArrayStorage);
  swift_release();
  return v6;
}

Swift::String __swiftcall DisambiguationItemProtocol.toSpeakString()()
{
  DisambiguationItemProtocol.getDisplayTitle()(v0, v1, (void (*)(uint64_t, uint64_t))static CATSpeakableString.applyTTSHint(speak:));
  uint64_t v4 = OUTLINED_FUNCTION_3_26();
  DisambiguationItemProtocol.getDisplaySubtitle()(v4, v5, (void (*)(uint64_t, uint64_t))static CATSpeakableString.applyTTSHint(speak:));
  if (v6)
  {
    OUTLINED_FUNCTION_2_26();
    if (v8)
    {
      OUTLINED_FUNCTION_1_23(v7);
      swift_bridgeObjectRelease();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      uint64_t v2 = v13;
      uint64_t v3 = v14;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v9 = v2;
  uint64_t v10 = v3;
  result._object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t DisambiguationItemProtocol.asSpeakableString()()
{
  DisambiguationItemProtocol.toDisplayString()();
  DisambiguationItemProtocol.toSpeakString()();

  return SpeakableString.init(print:speak:)();
}

uint64_t DisambiguationItemComponent.synonyms.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *DisambiguationItemComponent.synonyms.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

Swift::String __swiftcall DisambiguationItemProtocol.toDisplayString()()
{
  (*(void (**)(void))(v0 + 32))();
  OUTLINED_FUNCTION_3_26();
  if ((unint64_t)DisambiguationItemProtocol.getDisplaySubtitle()().value._object)
  {
    OUTLINED_FUNCTION_2_26();
    if (v4)
    {
      OUTLINED_FUNCTION_1_23(v3);
      swift_bridgeObjectRelease();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      uint64_t v1 = v9;
      uint64_t v2 = v10;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v5 = v1;
  uint64_t v6 = v2;
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

Swift::String_optional __swiftcall DisambiguationItemProtocol.getDisplaySubtitle()()
{
  uint64_t v2 = DisambiguationItemProtocol.getDisplaySubtitle()(v0, v1, (void (*)(uint64_t, uint64_t))static CATSpeakableString.stripTTSHint(print:));
  result.value._object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t DisambiguationItemProtocol.getDisplayTitle()(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  type metadata accessor for CATSpeakableString();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 8))(v9, a1, a2);
  uint64_t v6 = v9[0];
  uint64_t v7 = v9[1];
  _sSSSgWObTm_0((uint64_t)&v10, (uint64_t)v14, &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)v14);
  _sSSSgWObTm_0((uint64_t)v11, (uint64_t)&v13, &demangling cache variable for type metadata for INImage?);
  outlined release of INImage?(&v13);
  uint64_t v12 = v11[1];
  outlined release of [String]((uint64_t)&v12);
  a3(v6, v7);
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_19();
}

uint64_t DisambiguationItemProtocol.getDisplaySubtitle()(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  (*(void (**)(long long *__return_ptr))(a2 + 8))(&v7);
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  long long v13 = v7;
  outlined release of String?((uint64_t)&v13);
  _sSSSgWObTm_0((uint64_t)v10, (uint64_t)&v12, &demangling cache variable for type metadata for INImage?);
  outlined release of INImage?(&v12);
  uint64_t v11 = v10[1];
  outlined release of [String]((uint64_t)&v11);
  if (v5)
  {
    type metadata accessor for CATSpeakableString();
    a3(v4, v5);
    swift_bridgeObjectRelease();
  }
  return OUTLINED_FUNCTION_19();
}

ValueMetadata *type metadata accessor for DisambiguationItemComponent()
{
  return &type metadata for DisambiguationItemComponent;
}

uint64_t protocol witness for DisambiguationItemProtocol.getVoiceCommandPayloadsForItem() in conformance ShortcutsLinkDisambiguationItem()
{
  return specialized DisambiguationItemProtocol.getVoiceCommandPayloadsForItem()();
}

uint64_t outlined retain of [String](uint64_t a1)
{
  return a1;
}

__n128 OUTLINED_FUNCTION_0_23()
{
  return v0[2];
}

void OUTLINED_FUNCTION_1_23(uint64_t a1)
{
  uint64_t v3 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_3_26()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_24()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t OUTLINED_FUNCTION_6_29()
{
  return dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)();
}

uint64_t OUTLINED_FUNCTION_7_26()
{
  return swift_allocObject();
}

uint64_t IntroduceCustomIntentViewBuilder.init(viewFactory:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  long long v4[2] = a1;
  v4[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return _swift_task_switch(CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:), 0, 0);
}

uint64_t CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = *(void **)(v0[5] + 16);
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  uint64_t v6 = DeviceState.asSiriKitDeviceState()(v4, v5);
  v0[10] = v6;
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  uint64_t v7 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v7);
  id v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(class metadata base offset for RunVoiceCommandCATs
                                                                      + *v3
                                                                      + 112)
                                                          + **(int **)(class metadata base offset for RunVoiceCommandCATs
                                                                     + *v3
                                                                     + 112));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[11] = v8;
  *uint64_t v8 = v0;
  v8[1] = CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:);
  uint64_t v9 = v0[9];
  uint64_t v10 = v0[6];
  return v12(v9, v6, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  outlined destroy of SpeakableString?(v2);
  swift_release();
  if (v0) {
    uint64_t v3 = CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:);
  }
  else {
    uint64_t v3 = CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = TemplatingResult.print.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(_UNKNOWN **);
  uint64_t v3;

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(_UNKNOWN **))(v0 + 8);
  return v1(&outlined read-only object #0 of CATButtonLabelTemplating.getYesAndCancelButtonTemplates(deviceState:intentVerb:));
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CATButtonLabelTemplating()
{
  return self;
}

uint64_t ModeInfoProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ModeInfoProvider.init()();
  return v0;
}

id ModeInfoProvider.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_20_0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  OUTLINED_FUNCTION_20_0();
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.background.getter();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  uint64_t v9 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  objc_allocWithZone((Class)AFNotifyObserver);
  id v10 = v9;
  id result = @nonobjc AFNotifyObserver.init(name:options:queue:delegate:)(0xD000000000000021, 0x80000000002295C0, 1, v9, 0);
  if (result)
  {
    id v12 = result;

    *(void *)(v1 + 16) = v12;
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

Swift::Bool __swiftcall ModeInfoProvider.isSilentMode()()
{
  return [*(id *)(v0 + 16) state] == 0;
}

uint64_t protocol witness for ModeInfoProviding.isSilentMode() in conformance ModeInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))() & 1;
}

id @nonobjc AFNotifyObserver.init(name:options:queue:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (a2)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  id v11 = [v6 initWithName:v10 options:a3 queue:a4 delegate:a5];

  swift_unknownObjectRelease();
  return v11;
}

uint64_t type metadata accessor for ModeInfoProvider()
{
  return self;
}

id static LNSnippetEnvironment.make(from:localeIdentifier:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  __chkstk_darwin(v3 - 8);
  OUTLINED_FUNCTION_2_27();
  id v4 = [a1 estimatedVisibleSnippetDisplaySize];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  double v6 = (double)(uint64_t)[v4 width];
  double v7 = (double)(uint64_t)[v5 height];
  swift_bridgeObjectRetain();
  Locale.init(identifier:)();
  uint64_t v8 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v8);
  uint64_t v9 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(a1, (SEL *)&selRef_dynamicTypeSize);
  uint64_t v35 = static LNSnippetEnvironmentDynamicTypeSize.make(from:)(v9, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(a1, (SEL *)&selRef_textLegibilityWeight);
  uint64_t v34 = static LNSnippetEnvironmentLegibilityWeight.make(from:)(v11, v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(a1, (SEL *)&selRef_textDirection);
  uint64_t v15 = static LNSnippetEnvironmentLayoutDirection.make(from:)(v13, v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(a1, (SEL *)&selRef_displayColorScheme);
  uint64_t v18 = static LNSnippetEnvironmentColorScheme.make(from:)(v16, v17);
  swift_bridgeObjectRelease();
  uint64_t v19 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(a1, (SEL *)&selRef_displayContrast);
  uint64_t v21 = static LNSnippetEnvironmentColorSchemeContrast.make(from:)(v19, v20);
  swift_bridgeObjectRelease();
  [v5 scale];
  double v23 = v22;
  uint64_t v24 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(a1, (SEL *)&selRef_displayGamut);
  uint64_t v26 = static LNSnippetEnvironmentDisplayGamut.make(from:)(v24, v25);
  swift_bridgeObjectRelease();
  char v27 = [a1 accessibilityDifferentiateWithoutColor];
  char v28 = [a1 accessibilityInvertColors];
  char v29 = [a1 accessibilityReduceMotion];
  char v30 = [a1 accessibilityReduceTransparency];
  id v31 = objc_allocWithZone((Class)LNSnippetEnvironment);
  id v32 = @nonobjc LNSnippetEnvironment.init(size:locale:dynamicTypeSize:legibilityWeight:layoutDirection:colorScheme:colorSchemeContrast:displayScale:displayGamut:accessibilityDifferentiateWithoutColor:accessibilityInvertColors:accessibilityReduceMotion:accessibilityReduceTransparency:)(v1, v35, v34, v15, v18, v21, v26, v27, v6, v7, v23, v28, v29, v30);

  return v32;
}

id static LNSnippetEnvironment.make(size:)(double a1, double a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  __chkstk_darwin(v5 - 8);
  OUTLINED_FUNCTION_2_27();
  uint64_t v6 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v6);
  id v7 = objc_allocWithZone((Class)LNSnippetEnvironment);
  return @nonobjc LNSnippetEnvironment.init(size:locale:dynamicTypeSize:legibilityWeight:layoutDirection:colorScheme:colorSchemeContrast:displayScale:displayGamut:accessibilityDifferentiateWithoutColor:accessibilityInvertColors:accessibilityReduceMotion:accessibilityReduceTransparency:)(v2, -1, -1, -1, -1, -1, -1, 0, a1, a2, 1.0, 0, 0, 0);
}

uint64_t static LNSnippetEnvironmentDynamicTypeSize.make(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v5 == a1 && v6 == a2)
    {
LABEL_124:
      swift_bridgeObjectRelease();
      return -1;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return -1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v8 == a1 && v9 == a2)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v11 == a1 && v12 == a2)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 2;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v15 == a1 && v16 == a2)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v18 == a1 && v19 == a2)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 3;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v21 == a1 && v22 == a2)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 4;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v24 == a1 && v25 == a2)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 5;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v27 == a1 && v28 == a2)
    {
      swift_bridgeObjectRelease();
      return 6;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 6;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v30 == a1 && v31 == a2)
    {
      swift_bridgeObjectRelease();
      return 7;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 7;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v33 == a1 && v34 == a2)
    {
      swift_bridgeObjectRelease();
      return 8;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 8;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v36 == a1 && v37 == a2)
    {
      swift_bridgeObjectRelease();
      return 9;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 9;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v39 == a1 && v40 == a2)
    {
      swift_bridgeObjectRelease();
      return 10;
    }
    OUTLINED_FUNCTION_0_24();
    OUTLINED_FUNCTION_1_24();
    if (v2) {
      return 10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!a2) {
    goto LABEL_124;
  }
  if (v42 != a1 || v43 != a2)
  {
    char v45 = OUTLINED_FUNCTION_0_24();
    swift_bridgeObjectRelease();
    if (v45) {
      return 11;
    }
    return -1;
  }
  swift_bridgeObjectRelease();
  return 11;
}

uint64_t static LNSnippetEnvironmentLegibilityWeight.make(from:)(uint64_t a1, uint64_t a2)
{
  return static LNSnippetEnvironmentLegibilityWeight.make(from:)(a1, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v4 == a1 && v5 == a2)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      return -1;
    }
    id v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return -1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    if (v8 == a1 && v9 == a2)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v11) {
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!a2) {
    goto LABEL_27;
  }
  if (v12 != a1 || v13 != a2)
  {
    uint64_t v15 = OUTLINED_FUNCTION_0_24();
    swift_bridgeObjectRelease();
    if (v15) {
      return 1;
    }
    return -1;
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t static LNSnippetEnvironmentLayoutDirection.make(from:)(uint64_t a1, uint64_t a2)
{
  return static LNSnippetEnvironmentLegibilityWeight.make(from:)(a1, a2);
}

uint64_t static LNSnippetEnvironmentColorScheme.make(from:)(uint64_t a1, uint64_t a2)
{
  return static LNSnippetEnvironmentLegibilityWeight.make(from:)(a1, a2);
}

uint64_t static LNSnippetEnvironmentColorSchemeContrast.make(from:)(uint64_t a1, uint64_t a2)
{
  return static LNSnippetEnvironmentLegibilityWeight.make(from:)(a1, a2);
}

uint64_t static LNSnippetEnvironmentDisplayGamut.make(from:)(uint64_t a1, uint64_t a2)
{
  return static LNSnippetEnvironmentLegibilityWeight.make(from:)(a1, a2);
}

id @nonobjc LNSnippetEnvironment.init(size:locale:dynamicTypeSize:legibilityWeight:layoutDirection:colorScheme:colorSchemeContrast:displayScale:displayGamut:accessibilityDifferentiateWithoutColor:accessibilityInvertColors:accessibilityReduceMotion:accessibilityReduceTransparency:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, double a9, double a10, double a11, char a12, char a13, char a14)
{
  uint64_t v22 = type metadata accessor for Locale();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload(a1, 1, v22) != 1)
  {
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(a1, v22);
  }
  BYTE3(v26) = a14 & 1;
  BYTE2(v26) = a13 & 1;
  BYTE1(v26) = a12 & 1;
  LOBYTE(v26) = a8 & 1;
  id v24 = objc_msgSend(v28, "initWithSize:locale:dynamicTypeSize:legibilityWeight:layoutDirection:colorScheme:colorSchemeContrast:displayScale:displayGamut:accessibilityDifferentiateWithoutColor:accessibilityInvertColors:accessibilityReduceMotion:accessibilityReduceTransparency:", isa, a2, a3, a4, a5, a6, a9, a10, a11, a7, v26);

  return v24;
}

uint64_t outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t OUTLINED_FUNCTION_0_24()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_1_24()
{
  return swift_bridgeObjectRelease();
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So13SFCardSectionCs5NeverOTg504_s18def51Plugin28WorkflowPhoneSnippetProviderC35cardSectionsik96Items33_4EECA0108B9B644B18340581AEC8AD2DLL014disambiguationM011appBundleId13utteranceViewSaySo13mn51CG_SaySo20SAClientBoundCommand_pGtSayAA08WFChoosek4j2L4L47VG_SSSo022SAUIAssistantUtteranceY0CSgtFAjOXEfU_SSAF0rstU0CSaySo20SAClientBoundCommand_pGTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    id v24 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v9 = (void **)(a1 + 80);
    while (1)
    {
      uint64_t v10 = *(v9 - 5);
      uint64_t v11 = (uint64_t)*(v9 - 4);
      uint64_t v12 = (uint64_t)*(v9 - 3);
      uint64_t v13 = *(v9 - 2);
      uint64_t v14 = (uint64_t)*(v9 - 1);
      uint64_t v15 = *v9;
      v22[0] = (uint64_t)*(v9 - 6);
      v22[1] = (uint64_t)v10;
      long long v22[2] = v11;
      uint64_t v22[3] = v12;
      void v22[4] = (uint64_t)v13;
      v22[5] = v14;
      v22[6] = (uint64_t)v15;
      id v16 = v13;
      swift_bridgeObjectRetain();
      id v17 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in WorkflowPhoneSnippetProvider.cardSectionsFromDisambiguationItems(disambiguationItems:appBundleId:utteranceView:)(v22, a2, a3, a4, a5, &v23);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v5) {
        break;
      }
      v9 += 7;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!--v6)
      {
        uint64_t v10 = v24;
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_7:
    swift_release();
  }
  return v10;
}

uint64_t WorkflowPhoneSnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowPhoneSnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:));
}

uint64_t WorkflowPhoneSnippetProvider.buildIntentSnippet(intent:intentResponse:shortcutName:)()
{
  uint64_t v1 = (void *)v0[3];
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = (void *)v0[2];
  id v3 = v1;
  outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v2);
  if (!v4)
  {

LABEL_7:
    uint64_t v18 = 0;
    goto LABEL_8;
  }
  uint64_t v5 = (void *)v0[2];
  type metadata accessor for App();
  App.__allocating_init(appIdentifier:)();
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
  id v6 = v3;
  id v7 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();

  id v8 = v7;
  uint64_t v9 = (void *)static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
  uint64_t v23 = v8;

  uint64_t v10 = (void *)static CasinoFactory.makePlaceholderCardSection()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v11 + 16) = xmmword_211C70;
  *(void *)(v11 + 32) = v9;
  uint64_t v25 = v11;
  specialized Array._endMutation()();
  id v24 = v9;
  outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v25, v10);
  id v12 = [v5 _metadata];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = (void *)v0[2];
    [v12 setExecutionContext:2];
    [v14 _setMetadata:v13];
  }
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for SACardSnippet);
  uint64_t v15 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v15 + 16) = xmmword_211C70;
  *(void *)(v15 + 32) = v10;
  specialized Array._endMutation()();
  id v16 = v6;
  id v17 = v10;
  uint64_t v18 = (void *)static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();

  swift_bridgeObjectRelease();
  uint64_t v19 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v19 + 16) = xmmword_211C70;
  *(void *)(v19 + 32) = v23;
  uint64_t v26 = v19;
  specialized Array._endMutation()();
  id v20 = v23;
  outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(v26, v18);

  swift_release();
LABEL_8:
  uint64_t v21 = (uint64_t (*)(void *))v0[1];
  return v21(v18);
}

uint64_t WorkflowPhoneSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7[5] = a6;
  v7[6] = v6;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowPhoneSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:));
}

uint64_t WorkflowPhoneSnippetProvider.makeDisambiguationViews(disambiguationItems:shortcutName:appBundleId:utteranceViews:)()
{
  unint64_t v1 = v0[5];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  if (v2)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0);
    if ((v1 & 0xC000000000000001) != 0) {
      id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v3 = *(id *)(v0[5] + 32);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v3 = 0;
  }
  unint64_t v4 = v0[5];
  WorkflowPhoneSnippetProvider.cardSectionsFromDisambiguationItems(disambiguationItems:appBundleId:utteranceView:)(v0[2], v0[3], v0[4], v3);
  uint64_t v6 = v5;

  type metadata accessor for NSError(0, &lazy cache variable for type metadata for SACardSnippet);
  id v7 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)();
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(v6, v7);
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  id v8 = v7;
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  [v8 setListenAfterSpeaking:isa];

  [v8 setCanUseServerTTS:0];
  id v10 = static CustomIntentPlatformSpecificSnippets.makeDialogFromUtteranceView(utteranceViews:)(v4);
  if (v10)
  {
    uint64_t v11 = v10;
    [v8 setDialog:v10];
  }
  type metadata accessor for SiriKitAceViewBuilder();
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
  swift_release();
  uint64_t v12 = dispatch thunk of SiriKitAceViewBuilder.build()();
  swift_release();

  uint64_t v13 = (uint64_t (*)(uint64_t))v0[1];
  return v13(v12);
}

uint64_t WorkflowPhoneSnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)WorkflowPhoneSnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:));
}

uint64_t WorkflowPhoneSnippetProvider.makeSnippetForShowAlert(dialogRequest:appBundleId:shortcutName:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  id v3 = (void *)v0[2];
  id v4 = [objc_allocWithZone((Class)SAAppsLaunchApp) init];
  outlined bridged method (mbgnn) of @objc SAAppsLaunchApp.launchId.setter(v1, v2, v4);
  id v5 = v4;
  uint64_t v6 = (void *)static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

  outlined bridged method (pb) of @objc WFShowAlertDialogRequest.message.getter(v3);
  LOWORD(v16) = 257;
  OUTLINED_FUNCTION_1_25();
  id v7 = (void *)static CasinoFactory.makeRowCardSection(possibleTitle:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:shouldUseDefaultImageSize:)();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v8 + 16) = xmmword_211C70;
  *(void *)(v8 + 32) = v6;
  uint64_t v17 = v8;
  specialized Array._endMutation()();
  id v9 = v6;
  outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v17, v7);
  id v10 = objc_msgSend(objc_allocWithZone((Class)INStartCallIntent), "init", 0, 0, 0, 0, 1, v16);
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for SACardSnippet);
  uint64_t v11 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v11 + 16) = xmmword_211C70;
  *(void *)(v11 + 32) = v7;
  specialized Array._endMutation()();
  id v12 = v7;
  uint64_t v13 = static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();

  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v13);
}

Swift::Bool __swiftcall WorkflowPhoneSnippetProvider.shouldShowSnippet(intent:)(INIntent intent)
{
  return INIntent.showsWhenRun.getter() & 1;
}

unint64_t WorkflowPhoneSnippetProvider.cardSectionsFromDisambiguationItems(disambiguationItems:appBundleId:utteranceView:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for ImageSize();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v21 = _swiftEmptyArrayStorage;
  if (a4)
  {
    id v14 = a4;
    outlined bridged method (pb) of @objc SAUIAssistantUtteranceView.text.getter(v14);
    (*(void (**)(unsigned char *, void, uint64_t))(v11 + 104))(v13, enum case for ImageSize.original(_:), v10);
    OUTLINED_FUNCTION_1_25();
    uint64_t v15 = (void *)static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
    id v16 = v15;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                   + (v20 & 0xFFFFFFFFFFFFFF8)) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin34WFChooseFromListDisambiguationItemVG_So13SFCardSectionCs5NeverOTg504_s18def51Plugin28WorkflowPhoneSnippetProviderC35cardSectionsik96Items33_4EECA0108B9B644B18340581AEC8AD2DLL014disambiguationM011appBundleId13utteranceViewSaySo13mn51CG_SaySo20SAClientBoundCommand_pGtSayAA08WFChoosek4j2L4L47VG_SSSo022SAUIAssistantUtteranceY0CSgtFAjOXEfU_SSAF0rstU0CSaySo20SAClientBoundCommand_pGTf1cn_n(a1, a2, a3, v5, &v21);
  specialized Array.append<A>(contentsOf:)((uint64_t)v17);
  return v20;
}

void closure #1 in WorkflowPhoneSnippetProvider.cardSectionsFromDisambiguationItems(disambiguationItems:appBundleId:utteranceView:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  uint64_t v51 = a6;
  uint64_t v49 = a3;
  uint64_t v50 = a5;
  uint64_t v48 = a2;
  uint64_t v8 = type metadata accessor for ImageSize();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = a1[2];
  uint64_t v14 = a1[3];
  uint64_t v47 = (void *)a1[4];
  type metadata accessor for CATSpeakableString();
  swift_bridgeObjectRetain();
  static CATSpeakableString.stripTTSHint(print:)(v12, v13, v16, v17, v18, v19, v20, v21, v45, v12, v47);
  uint64_t v45 = v22;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for ImageSize.default(_:), v8);
  if (v14)
  {
    swift_bridgeObjectRetain();
    static CATSpeakableString.stripTTSHint(print:)(v15, v14, v23, v24, v25, v26, v27, v28, v45, v46, v47);
    swift_bridgeObjectRelease();
  }
  uint64_t v47 = (void *)static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v29 = static SLFDisambiguationItemConverter.toDirectInvocationPayload(title:)(v46, v13);
  __swift_project_boxed_opaque_existential_1((void *)(a4 + 16), *(void *)(a4 + 40));
  uint64_t v30 = (void *)DeviceState.asInvocationContext.getter();
  [v30 setInputOrigin:SAInputOriginDialogButtonTapValue];
  uint64_t v31 = self;
  id v32 = [v31 runSiriKitExecutorCommandWithContext:v30 payload:v29];
  id v33 = [objc_allocWithZone((Class)SAIntentGroupSiriKitAppSelectionState) init];
  id v34 = [objc_allocWithZone((Class)SASyncAppIdentifyingInfo) init];
  NSString v35 = String._bridgeToObjectiveC()();
  [v34 setBundleId:v35];

  [v33 setRequestedApp:v34];
  [v32 setAppSelectionState:v33];

  id v36 = [v31 wrapCommandInStartLocalRequest:v32];
  id v37 = v36;
  uint64_t v38 = (void *)static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_211C70;
  *(void *)(v39 + 32) = v38;
  uint64_t v52 = v39;
  specialized Array._endMutation()();
  uint64_t v40 = v52;
  id v41 = v38;
  uint64_t v42 = v47;
  outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v40, v47);
  id v43 = v37;
  uint64_t v44 = v50;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((char *)&dword_10
                                                                              + (*v44 & 0xFFFFFFFFFFFFFF8)));
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  void *v51 = v42;
}

void outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(uint64_t a1, void *a2)
{
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SFAbstractCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setCommands:isa];
}

void outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setReferencedCommands:isa];
}

uint64_t type metadata accessor for WorkflowPhoneSnippetProvider()
{
  return self;
}

uint64_t RFFeatureFlags.ResponseFramework.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v1 = specialized Dictionary.subscript.getter(v0, static RFFeatureFlags.ResponseFramework.forceEnabled);
  if (v1 == 2)
  {
    swift_endAccess();
    uint64_t v2 = type metadata accessor for RFFeatureFlags.ResponseFramework();
    long long v10[3] = v2;
    v10[4] = lazy protocol witness table accessor for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework(&lazy protocol witness table cache variable for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(boxed_opaque_existential_1, v0, v2);
    char v4 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  }
  else
  {
    char v4 = v1 & 1;
    swift_endAccess();
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109120;
    LODWORD(v10[0]) = v4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v6, v7, "RFFeatureFlags.ResponseFramework - isRFv2: %{BOOL}d", v8, 8u);
    swift_slowDealloc();
  }

  return v4 & 1;
}

void one-time initialization function for forceEnabled()
{
  static RFFeatureFlags.ResponseFramework.forceEnabled = (uint64_t)&_swiftEmptyDictionarySingleton;
}

{
  static SiriLinkFlowFeatureFlags.forceEnabled = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t *RFFeatureFlags.ResponseFramework.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static RFFeatureFlags.ResponseFramework.forceEnabled;
}

uint64_t static RFFeatureFlags.ResponseFramework.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static RFFeatureFlags.ResponseFramework.forceEnabled.setter(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  static RFFeatureFlags.ResponseFramework.forceEnabled = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static RFFeatureFlags.ResponseFramework.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static LocaleUtils.intentBundleCache.modify;
}

uint64_t RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)(char a1, void (*a2)(uint64_t))
{
  uint64_t v3 = v2;
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v6 = specialized Dictionary.subscript.getter(v3, static RFFeatureFlags.ResponseFramework.forceEnabled);
  swift_endAccess();
  swift_beginAccess();
  specialized Dictionary._Variant.setValue(_:forKey:)(a1 & 1, v3);
  uint64_t v7 = swift_endAccess();
  a2(v7);
  return $defer #1 <A>() in RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)(v3, v6);
}

uint64_t RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 80) = a4;
  *(void *)(v5 + 88) = v4;
  *(unsigned char *)(v5 + 112) = a2;
  *(void *)(v5 + 64) = a1;
  *(void *)(v5 + 72) = a3;
  return _swift_task_switch(RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:), 0, 0);
}

uint64_t RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(int **)(v0 + 72);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 112);
  swift_beginAccess();
  *(unsigned char *)(v0 + 113) = specialized Dictionary.subscript.getter(v1, static RFFeatureFlags.ResponseFramework.forceEnabled);
  swift_endAccess();
  swift_beginAccess();
  specialized Dictionary._Variant.setValue(_:forKey:)(v3, v1);
  swift_endAccess();
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  *uint64_t v4 = v0;
  v4[1] = RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:);
  uint64_t v5 = *(void *)(v0 + 64);
  return v7(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:);
  }
  else {
    uint64_t v2 = RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)(*(void *)(v0 + 88), *(unsigned char *)(v0 + 113));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)(*(void *)(v0 + 88), *(unsigned char *)(v0 + 113));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t $defer #1 <A>() in RFFeatureFlags.ResponseFramework.withForcedEnabled<A>(_:block:)(uint64_t a1, char a2)
{
  if (a2 == 2)
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_27();
    specialized Dictionary._Variant.removeValue(forKey:)(a1);
  }
  else
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_3_27();
    specialized Dictionary._Variant.setValue(_:forKey:)(a2 & 1, a1);
  }
  return swift_endAccess();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)()
{
  OUTLINED_FUNCTION_0_25();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v1);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_1_26();
    int v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    OUTLINED_FUNCTION_2_28(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
    OUTLINED_FUNCTION_4_26();
    outlined init with take of Any((_OWORD *)(*(void *)(v6 + 56) + 32 * v4), v2);
    _NativeDictionary._delete(at:)();
    *uint64_t v0 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }
  return result;
}

{
  void *v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double result;
  uint64_t v16;
  char v17;

  OUTLINED_FUNCTION_0_25();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v1);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_1_26();
    int v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
    OUTLINED_FUNCTION_2_28(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
    OUTLINED_FUNCTION_4_26();
    *uint64_t v2 = *(_OWORD *)(*(void *)(v6 + 56) + 16 * v4);
    _NativeDictionary._delete(at:)();
    *uint64_t v0 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *uint64_t v2 = xmmword_216970;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 2;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v7 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<RFFeatureFlags.ResponseFramework, Bool>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(v13 + 48);
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * v4, v10);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v13 + 56) + v4);
  lazy protocol witness table accessor for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework(&lazy protocol witness table cache variable for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework);
  _NativeDictionary._delete(at:)();
  *uint64_t v2 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t lazy protocol witness table accessor for type RFFeatureFlags.ResponseFramework and conformance RFFeatureFlags.ResponseFramework(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for RFFeatureFlags.ResponseFramework();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_25()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_1_26()
{
  *uint64_t v0 = 0x8000000000000000;
}

BOOL OUTLINED_FUNCTION_2_28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t OUTLINED_FUNCTION_3_27()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_4_26()
{
  return swift_bridgeObjectRelease();
}

uint64_t WFShowAlertFlow.exitValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 120);
  int v2 = *(unsigned __int8 *)(v0 + 128);
  if (v2 == 2)
  {
    swift_errorRetain();
  }
  else if (v2 == 1)
  {
    id v3 = v1;
  }
  else
  {
    lazy protocol witness table accessor for type WFShowAlertFlowError and conformance WFShowAlertFlowError();
    return swift_allocError();
  }
  return (uint64_t)v1;
}

uint64_t WFShowAlertFlow.__allocating_init(shortcutName:request:appBundleId:dialogTemplating:deviceState:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v14 = swift_allocObject();
  WFShowAlertFlow.init(shortcutName:request:appBundleId:dialogTemplating:deviceState:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t WFShowAlertFlow.init(shortcutName:request:appBundleId:dialogTemplating:deviceState:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v8 = v7;
  uint64_t v15 = type metadata accessor for CATOption();
  __chkstk_darwin(v15 - 8);
  OUTLINED_FUNCTION_20_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.voiceCommands);
  char v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_0, v17, v18, "#WFShowAlertFlow initialized.", v19, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  outlined init with copy of DeviceState((uint64_t)a7, v8 + 56);
  outlined init with copy of DeviceState((uint64_t)a7, (uint64_t)v37);
  if (a6)
  {
    swift_retain();
    id v20 = a3;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
    uint64_t v21 = a6;
  }
  else
  {
    outlined init with copy of DeviceState((uint64_t)v37, (uint64_t)v36);
    uint64_t v22 = one-time initialization token for shared;
    uint64_t v23 = a3;
    id v24 = a3;
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v25 = static WFDialogState.shared;
    type metadata accessor for WorkflowRunnerCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v34 = OUTLINED_FUNCTION_42_13();
    type metadata accessor for WorkflowRunnerCATsSimple();
    OUTLINED_FUNCTION_19_12();
    uint64_t v33 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for RunCustomIntentCATs();
    OUTLINED_FUNCTION_19_12();
    uint64_t v26 = OUTLINED_FUNCTION_42_13();
    type metadata accessor for RunCustomIntentCATsSimple();
    OUTLINED_FUNCTION_19_12();
    uint64_t v27 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for RunVoiceCommandCATs();
    OUTLINED_FUNCTION_19_12();
    uint64_t v28 = OUTLINED_FUNCTION_42_13();
    type metadata accessor for RunVoiceCommandCATsSimple();
    OUTLINED_FUNCTION_19_12();
    uint64_t v29 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
    OUTLINED_FUNCTION_19_12();
    uint64_t v30 = OUTLINED_FUNCTION_42_13();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
    type metadata accessor for WorkflowDialogTemplating();
    swift_allocObject();
    uint64_t v21 = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v36, v25, v34, v33, v26, v27, v28, v29, v30);
    a3 = v23;
  }
  *(void *)(v8 + 96) = v21;
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t v31 = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(a7);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a7);
  *(void *)(v8 + 104) = v31;
  type metadata accessor for WorkflowNLContextProvider();
  *(void *)(v8 + 112) = swift_allocObject();
  *(void *)(v8 + 120) = 0;
  *(unsigned char *)(v8 + 128) = 3;
  return v8;
}

uint64_t WFShowAlertFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_20_0();
  uint64_t v39 = (uint8_t *)(v9 - v8);
  uint64_t v10 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_2();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_20_0();
  uint64_t v16 = v15 - v14;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v16, a1, v10);
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  id v20 = (uint8_t *)v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v38 = v4;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v22 = Input.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = OUTLINED_FUNCTION_43_7();
    v25(v24);
    _os_log_impl(&dword_0, v18, (os_log_type_t)v20, "#WFShowAlertFlow received input: %s", v21, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    uint64_t v4 = v38;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    uint64_t v26 = OUTLINED_FUNCTION_43_7();
    v27(v26);
  }

  if (*(unsigned char *)(v1 + 128) != 3 || *(void *)(v1 + 120) != 1)
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v31);
      id v32 = "#WFShowAlertFlow on input, state is not waitingForResponse";
LABEL_15:
      _os_log_impl(&dword_0, v29, v30, v32, v20, 2u);
      OUTLINED_FUNCTION_15();
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  id v20 = v39;
  Input.parse.getter();
  unsigned __int8 v33 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  (*(void (**)(uint8_t *, uint64_t))(v6 + 8))(v39, v4);
  if (v33 == 3)
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v34 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v34);
      id v32 = "#WFShowAlertFlow on input, no confirmation state";
      goto LABEL_15;
    }
LABEL_16:

    return 0;
  }
  id v36 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = v33;
  char v37 = *(unsigned char *)(v2 + 128);
  *(unsigned char *)(v2 + 128) = 0;
  outlined consume of WFShowAlertFlow.State(v36, v37);
  return 1;
}

uint64_t WFShowAlertFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = v1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t WFShowAlertFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_11_0();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_26();
  a20 = v22;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  v22[15] = __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
  swift_retain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = v22[14];
  if (v28)
  {
    os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    a11 = v31;
    *(_DWORD *)os_log_type_t v30 = 136315138;
    id v32 = [*(id *)(v29 + 32) message];
    a10 = v31;
    if (v32)
    {
      unsigned __int8 v33 = v32;
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;
    }
    else
    {
      unint64_t v36 = 0xE500000000000000;
      uint64_t v34 = 0x7974706D65;
    }
    v22[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v26, v27, "#WFShowAlertFlow begins execution, message: %s", v30, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_15();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v37 = v22[14];
  uint64_t v38 = *(void *)(v37 + 120);
  switch(*(unsigned char *)(v37 + 128))
  {
    case 1:
      uint64_t v45 = (void *)Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_5_3(v46)) {
        goto LABEL_19;
      }
      uint64_t v47 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v47);
      uint64_t v50 = "#WFShowAlertFlow completed";
      goto LABEL_18;
    case 2:
      uint64_t v45 = (void *)Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_5_3(v51))
      {
        uint64_t v52 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v52);
        uint64_t v50 = "#WFShowAlertFlow error state";
LABEL_18:
        OUTLINED_FUNCTION_23_0(&dword_0, v48, v49, v50);
        OUTLINED_FUNCTION_15();
      }
LABEL_19:

      static ExecuteResponse.complete()();
      goto LABEL_34;
    case 3:
      unint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.debug.getter();
      BOOL v55 = os_log_type_enabled(v53, v54);
      if (v38)
      {
        if (v55)
        {
          BOOL v56 = (uint8_t *)OUTLINED_FUNCTION_33();
          *(_WORD *)BOOL v56 = 0;
          _os_log_impl(&dword_0, v53, v54, "#WFShowAlertFlow waiting for response", v56, 2u);
          OUTLINED_FUNCTION_15();
        }

        goto LABEL_33;
      }
      if (v55)
      {
        unint64_t v60 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)unint64_t v60 = 0;
        _os_log_impl(&dword_0, v53, v54, "#WFShowAlertFlow submitting output", v60, 2u);
        OUTLINED_FUNCTION_15();
      }

      swift_task_alloc();
      OUTLINED_FUNCTION_22_0();
      v22[16] = v61;
      *char v61 = v62;
      v61[1] = WFShowAlertFlow.execute();
      OUTLINED_FUNCTION_3();
      return WFShowAlertFlow.buildOutput()();
    default:
      uint64_t v39 = (void *)Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_5_3(v40))
      {
        id v41 = (_WORD *)OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_15_2(v41);
        OUTLINED_FUNCTION_23_0(&dword_0, v42, v43, "#WFShowAlertFlow responseReceived");
        OUTLINED_FUNCTION_15();
      }

      if (v38 - 1 < 2)
      {
        id v44 = [objc_allocWithZone((Class)WFDialogResponse) initWithCancelled:1];
LABEL_26:
        Swift::Int v57 = *(void **)(v37 + 120);
        *(void *)(v37 + 120) = v44;
        char v58 = *(unsigned char *)(v37 + 128);
        *(unsigned char *)(v37 + 128) = 1;
        id v59 = v44;
        outlined consume of WFShowAlertFlow.State(v57, v58);
        static ExecuteResponse.ongoing(requireInput:)();

        goto LABEL_34;
      }
      if (!(_BYTE)v38)
      {
        id v44 = [objc_allocWithZone((Class)WFDialogResponse) initWithResponseCode:0];
        goto LABEL_26;
      }
      char v65 = *(void **)(v37 + 120);
      *(void *)(v37 + 120) = 0;
      char v66 = *(unsigned char *)(v37 + 128);
      *(unsigned char *)(v37 + 128) = 3;
      outlined consume of WFShowAlertFlow.State(v65, v66);
LABEL_33:
      static ExecuteResponse.ongoing(requireInput:)();
LABEL_34:
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_3();
      return v68(v67, v68, v69, v70, v71, v72, v73, v74, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t WFShowAlertFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 136) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  static OutputPublisherFactory.makeOutputPublisherAsync()();
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[18] = v3;
  *uint64_t v3 = v0;
  v3[1] = WFShowAlertFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 2, v1, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 152) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  uint64_t v2 = *(void **)(v1 + 120);
  *(void *)(v1 + 120) = 1;
  uint64_t v3 = *(unsigned char *)(v1 + 128);
  *(unsigned char *)(v1 + 128) = 3;
  outlined consume of WFShowAlertFlow.State(v2, v3);
  static ExecuteResponse.ongoing(requireInput:)();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_18_0();
  return v4();
}

{
  char v0;
  NSObject *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_33();
    uint64_t v0 = (char)v3;
    *uint64_t v3 = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v4, v5, "#WFShowAlertFlow error submitting output");
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_25_14();
  outlined consume of WFShowAlertFlow.State(v1, v0);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  OUTLINED_FUNCTION_18_0();
  return v6();
}

{
  uint64_t v0;
  char v1;
  NSObject *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    uint64_t v1 = (char)v4;
    *uint64_t v4 = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v5, v6, "#WFShowAlertFlow error submitting output");
    OUTLINED_FUNCTION_7_0();
  }

  OUTLINED_FUNCTION_25_14();
  outlined consume of WFShowAlertFlow.State(v2, v1);
  static ExecuteResponse.ongoing(requireInput:)();
  swift_errorRelease();
  OUTLINED_FUNCTION_18_0();
  return v7();
}

uint64_t WFShowAlertFlow.execute(completion:)()
{
  type metadata accessor for WFShowAlertFlow();
  lazy protocol witness table accessor for type WFShowAlertFlow and conformance WFShowAlertFlow(&lazy protocol witness table cache variable for type WFShowAlertFlow and conformance WFShowAlertFlow, v0, (void (*)(uint64_t))type metadata accessor for WFShowAlertFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t WFShowAlertFlow.buildOutput()()
{
  OUTLINED_FUNCTION_9_0();
  v1[17] = v2;
  v1[18] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[19] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for DialogPhase();
  v1[20] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[21] = v4;
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v1[24] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[25] = v6;
  v1[26] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  v1[27] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[28] = v8;
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[30] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[31] = v10;
  v1[32] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[30];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    uint64_t v6 = (void *)Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v7))
    {
      uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v8);
      OUTLINED_FUNCTION_23_0(&dword_0, v9, v10, "#WFShowAlertFlow: building rfv2 snippet");
      OUTLINED_FUNCTION_15();
    }
    uint64_t v11 = v0[18];

    OUTLINED_FUNCTION_16_5();
    (*(void (**)(void))(v12 + 184))();
    uint64_t v13 = *(void *)(v11 + 32);
    v0[33] = v13;
    OUTLINED_FUNCTION_16_5();
    os_log_type_t v19 = (uint64_t (*)(uint64_t))(*(void *)(v14 + 168) + **(int **)(v14 + 168));
    uint64_t v15 = (void *)swift_task_alloc();
    v0[34] = v15;
    *uint64_t v15 = v0;
    v15[1] = WFShowAlertFlow.buildOutput();
    return v19(v13);
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v0[48] = v17;
    *uint64_t v17 = v18;
    v17[1] = WFShowAlertFlow.buildOutput();
    return WFShowAlertFlow.buildOutput_rfv1()();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 280) = v4;
  *(void *)(v2 + 288) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 56;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = (void *)v0[35];
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v0[42] = ResponseFactory.init()();
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[15] = type metadata accessor for WorkflowDataModels(0);
  v0[16] = lazy protocol witness table accessor for type WFShowAlertFlow and conformance WFShowAlertFlow((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, 255, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  __swift_allocate_boxed_opaque_existential_1(v0 + 12);
  v4(v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_211C70;
  *(void *)(v5 + 32) = v1;
  uint64_t v13 = v5;
  specialized Array._endMutation()();
  v0[43] = v13;
  uint64_t v12 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(resultModel:dialog:outputGenerationManifest:);
  uint64_t v6 = v1;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[44] = v7;
  void *v7 = v8;
  v7[1] = WFShowAlertFlow.buildOutput();
  uint64_t v9 = v0[26];
  uint64_t v10 = v0[17];
  return ((uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))v12)(v10, v0 + 12, v13, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 96;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_13_1();

  uint64_t v1 = OUTLINED_FUNCTION_34_13();
  v2(v1);
  uint64_t v3 = OUTLINED_FUNCTION_29_15();
  v4(v3);
  OUTLINED_FUNCTION_31_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v5();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();
  (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t WFShowAlertFlow.buildOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v10 = *(void **)(v9 + 280);
  uint64_t v11 = *(void *)(v9 + 224);
  uint64_t v53 = *(void *)(v9 + 216);
  uint64_t v55 = *(void *)(v9 + 232);
  uint64_t v13 = *(void *)(v9 + 176);
  uint64_t v12 = *(void *)(v9 + 184);
  uint64_t v14 = *(void *)(v9 + 168);
  uint64_t v15 = *(void *)(v9 + 152);
  uint64_t v48 = *(void *)(v9 + 160);
  uint64_t v51 = *(void *)(v9 + 144);
  static DialogPhase.confirmation.getter();
  id v16 = [v10 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v48);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v15, v55, v53);
  OUTLINED_FUNCTION_19_17();
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OUTLINED_FUNCTION_2_29();
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) != 0
    || (OUTLINED_FUNCTION_2_29(), (dispatch thunk of DeviceState.isHomePod.getter() & 1) != 0))
  {
    uint64_t v17 = *(void **)(v9 + 280);
    type metadata accessor for ResponseFactory();
    OUTLINED_FUNCTION_35_2();
    *(void *)(v9 + 360) = ResponseFactory.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_211C70;
    *(void *)(v18 + 32) = v17;
    uint64_t v57 = v18;
    specialized Array._endMutation()();
    *(void *)(v9 + 368) = v57;
    BOOL v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
                                                            + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
    id v19 = v17;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v9 + 376) = v20;
    *id v20 = v21;
    v20[1] = WFShowAlertFlow.buildOutput();
    uint64_t v22 = *(void *)(v9 + 208);
    uint64_t v23 = *(void *)(v9 + 136);
    return v56(v23, v57, v22);
  }
  else
  {
    uint64_t v25 = *(void **)(v9 + 264);
    uint64_t v26 = *(void *)(v9 + 144);
    outlined init with copy of DeviceState(v51 + 56, v9 + 56);
    unint64_t v52 = *(void *)(v26 + 24);
    unint64_t v54 = *(void *)(v26 + 16);
    id v27 = [v25 okButton];
    id v28 = [v27 title];

    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    *(void *)(v9 + 296) = v30;
    id v31 = [v25 cancelButton];
    if (v31)
    {
      id v32 = v31;
      id v33 = [v31 title];

      unint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;
    }
    else
    {
      unint64_t v34 = 0;
      unint64_t v36 = 0xE000000000000000;
    }
    *(void *)(v9 + 304) = v36;
    id v37 = objc_msgSend(*(id *)(v9 + 264), "promptForDisplay", v49);
    if (v37)
    {
      uint64_t v38 = v37;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v39;
    }
    else
    {
      uint64_t v40 = 0;
    }
    *(void *)(v9 + 312) = v40;
    id v41 = [*(id *)(v9 + 264) message];
    if (v41)
    {
      uint64_t v42 = v41;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;
    }
    else
    {
      unint64_t v44 = 0xE000000000000000;
    }
    *(void *)(v9 + 320) = v44;
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v9 + 328) = v46;
    *os_log_type_t v46 = v47;
    v46[1] = WFShowAlertFlow.buildOutput();
    return static WorkflowDataModels.modelForShowAlert(deviceState:shortcutName:confirmLabel:cancelLabel:title:message:)(v9 + 16, v9 + 56, v54, v52, v50, v30, v34, v36, v45, a9);
  }
}

uint64_t WFShowAlertFlow.buildOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v12 = *(void *)(v10 + 224);
  uint64_t v11 = *(void *)(v10 + 232);
  uint64_t v14 = *(void *)(v10 + 208);
  uint64_t v13 = *(void *)(v10 + 216);
  uint64_t v15 = *(void *)(v10 + 192);
  uint64_t v16 = *(void *)(v10 + 200);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  __swift_destroy_boxed_opaque_existential_1Tm(v10 + 16);
  OUTLINED_FUNCTION_31_14();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_6_1();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
}

{
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *v10;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v12 = v11;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_1();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t WFShowAlertFlow.buildOutput_rfv1()()
{
  OUTLINED_FUNCTION_9_0();
  v1[25] = v2;
  v1[26] = v0;
  uint64_t v3 = type metadata accessor for AceOutput();
  v1[27] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[28] = v4;
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v1[30] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[31] = v6;
  v1[32] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[33] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for DialogPhase();
  v1[34] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[35] = v8;
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v1[38] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[39] = v10;
  v1[40] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  v1[41] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[42] = v12;
  v1[43] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t inited;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t (*v34)(uint64_t);
  uint64_t (*v35)(void *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  OUTLINED_FUNCTION_26();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = (void *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_3(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_15_2(v4);
    OUTLINED_FUNCTION_23_0(&dword_0, v5, v6, "#WFShowAlertFlow: building rfv1 snippet");
    OUTLINED_FUNCTION_15();
  }

  OUTLINED_FUNCTION_16_5();
  (*(void (**)(void))(v7 + 184))();
  OUTLINED_FUNCTION_2_29();
  if ((dispatch thunk of DeviceState.isPhone.getter() & 1) != 0
    || (OUTLINED_FUNCTION_2_29(), (dispatch thunk of DeviceState.isPad.getter() & 1) != 0)
    || (OUTLINED_FUNCTION_2_29(), (dispatch thunk of DeviceState.isPod.getter() & 1) != 0))
  {
    uint64_t v8 = *(void *)(v0[26] + 32);
    v0[44] = v8;
    OUTLINED_FUNCTION_16_5();
    unint64_t v34 = (uint64_t (*)(uint64_t))(*(void *)(v9 + 160) + **(int **)(v9 + 160));
    uint64_t v10 = (void *)swift_task_alloc();
    v0[45] = v10;
    *uint64_t v10 = v0;
    v10[1] = WFShowAlertFlow.buildOutput_rfv1();
    return v34(v8);
  }
  else
  {
    uint64_t v12 = v0[26];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_212160;
    uint64_t v14 = *(void **)(v12 + 32);
    uint64_t v15 = [v14 message];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v19 = 0xE000000000000000;
    }
    *(void *)(inited + 32) = v17;
    *(void *)(inited + 40) = v19;
    uint64_t v20 = swift_initStackObject();
    *(_OWORD *)(v20 + 16) = xmmword_212160;
    uint64_t v21 = [v14 message];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v25 = 0xE000000000000000;
    }
    uint64_t v26 = (void *)v0[32];
    id v27 = (void *)v0[26];
    *(void *)(v20 + 32) = v23;
    *(void *)(v20 + 40) = v25;
    TemplatingResult.init(dialogId:print:speak:)(inited, v20, v26);
    id v28 = v27[2];
    unint64_t v29 = v27[3];
    unint64_t v30 = v27[5];
    id v31 = v27[6];
    OUTLINED_FUNCTION_16_5();
    unint64_t v35 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 + 96)
                                                                             + **(int **)(v32 + 96));
    id v33 = (void *)swift_task_alloc();
    v0[58] = v33;
    *id v33 = v0;
    v33[1] = WFShowAlertFlow.buildOutput_rfv1();
    return v35(v14, v28, v29, v30, v31);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 368) = v4;
  *(void *)(v2 + 376) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_21_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = (void *)*v1;
  OUTLINED_FUNCTION_4_0();
  void *v7 = v6;
  void *v7 = *v1;
  v6[52] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    v6[53] = v3;
    v6[54] = v5;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 456) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 472) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v10 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v14 = *(void *)(v0 + 248);
  uint64_t v15 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 232);
  uint64_t v12 = *(void *)(v0 + 216);
  uint64_t v13 = *(void *)(v0 + 224);
  uint64_t v5 = *(uint64_t **)(v0 + 200);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 208) + 56), *(void *)(*(void *)(v0 + 208) + 80));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v10, v2);
  __swift_storeEnumTagSinglePayload(v4, 0, 1, v2);
  *(void *)(v0 + 192) = 0;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v0 + 160, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  v5[3] = v12;
  v5[4] = (uint64_t)&protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v3, v15);
  uint64_t v7 = *(void *)(v0 + 344);
  OUTLINED_FUNCTION_44_10();
  (*(void (**)(uint64_t))(v1 + 8))(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v8();
}

uint64_t WFShowAlertFlow.buildOutput_rfv1()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v14 + 208) + 56), *(void *)(*(void *)(v14 + 208) + 80));
  if (dispatch thunk of DeviceState.isCarPlay.getter())
  {
    [*(id *)(v14 + 368) setVisual:0];
    OUTLINED_FUNCTION_17_17();
    id v16 = [v15 patternId];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = OUTLINED_FUNCTION_21_18();
    v18(v17);
    OutputGenerationManifest.init(dialogPhase:_:)();
    OutputGenerationManifest.responseViewId.setter();
    uint64_t v19 = OUTLINED_FUNCTION_33_15();
    v20(v19);
    uint64_t v21 = OUTLINED_FUNCTION_27_19();
    v22(v21);
    OUTLINED_FUNCTION_19_17();
    OutputGenerationManifest.listenAfterSpeaking.setter();
    type metadata accessor for ResponseFactory();
    OUTLINED_FUNCTION_35_2();
    *(void *)(v14 + 440) = ResponseFactory.init()();
    uint64_t v23 = (void *)OUTLINED_FUNCTION_40_14();
    *(void *)(v14 + 448) = v23;
    *uint64_t v23 = v14;
    v23[1] = WFShowAlertFlow.buildOutput_rfv1();
    OUTLINED_FUNCTION_32_17();
    OUTLINED_FUNCTION_3();
    return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    id v33 = *(void **)(v14 + 352);
    uint64_t v34 = *(void *)(v14 + 208);
    uint64_t v36 = *(void *)(v34 + 16);
    uint64_t v35 = *(void *)(v34 + 24);
    *(void *)(v14 + 384) = v35;
    swift_bridgeObjectRetain();
    id v37 = [v33 promptForDisplay];
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v41 = 0;
    }
    *(void *)(v14 + 392) = v41;
    id v42 = [*(id *)(v14 + 352) message];
    if (v42)
    {
      unint64_t v43 = v42;
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v45;
    }
    else
    {
      uint64_t v44 = 0;
      unint64_t v46 = 0xE000000000000000;
    }
    *(void *)(v14 + 400) = v46;
    *(void *)(v14 + 16) = v36;
    *(void *)(v14 + 24) = v35;
    *(void *)(v14 + 32) = v39;
    *(void *)(v14 + 40) = v41;
    *(void *)(v14 + 48) = v44;
    *(void *)(v14 + 56) = v46;
    uint64_t v47 = (void *)swift_task_alloc();
    *(void *)(v14 + 408) = v47;
    void *v47 = v14;
    v47[1] = WFShowAlertFlow.buildOutput_rfv1();
    OUTLINED_FUNCTION_3();
    return ShowAlertVisual.data.getter();
  }
}

{
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(*(void *)(v14 + 432), *(void *)(v14 + 424), *(void **)(v14 + 368));
  OUTLINED_FUNCTION_17_17();
  id v16 = [v15 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = OUTLINED_FUNCTION_21_18();
  v18(v17);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  uint64_t v19 = OUTLINED_FUNCTION_33_15();
  v20(v19);
  uint64_t v21 = OUTLINED_FUNCTION_27_19();
  v22(v21);
  OUTLINED_FUNCTION_19_17();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  *(void *)(v14 + 440) = ResponseFactory.init()();
  uint64_t v23 = (void *)OUTLINED_FUNCTION_40_14();
  *(void *)(v14 + 448) = v23;
  *uint64_t v23 = v14;
  v23[1] = WFShowAlertFlow.buildOutput_rfv1();
  OUTLINED_FUNCTION_32_17();
  OUTLINED_FUNCTION_3();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14);
}

uint64_t WFShowAlertFlow.buildOutput_rfv1()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();

  uint64_t v11 = OUTLINED_FUNCTION_21_6();
  v12(v11);
  uint64_t v13 = *(void *)(v10 + 344);
  OUTLINED_FUNCTION_44_10();
  (*(void (**)(uint64_t))(v14 + 8))(v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_6_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

{
  void *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();
  (*(void (**)(void, void))(v10[42] + 8))(v10[43], v10[41]);
  OUTLINED_FUNCTION_15_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();

  uint64_t v11 = OUTLINED_FUNCTION_21_6();
  v12(v11);
  OUTLINED_FUNCTION_15_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_0();

  uint64_t v11 = OUTLINED_FUNCTION_34_13();
  v12(v11);
  uint64_t v13 = OUTLINED_FUNCTION_29_15();
  v14(v13);
  OUTLINED_FUNCTION_15_20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_6_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

uint64_t WFConfirmInteractionFlow.deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of WFShowAlertFlow.State(*(id *)(v0 + 120), *(unsigned char *)(v0 + 128));
  return v0;
}

uint64_t WFConfirmInteractionFlow.__deallocating_deinit()
{
  WFConfirmInteractionFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance WFShowAlertFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFShowAlertFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for Flow.execute() in conformance WFShowAlertFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 192) + **(int **)(**(void **)v1 + 192));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFShowAlertFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 168))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

void outlined consume of WFShowAlertFlow.State(id a1, char a2)
{
  if (a2 == 2)
  {
    swift_errorRelease();
  }
  else if (a2 == 1)
  {
  }
}

uint64_t type metadata accessor for WFShowAlertFlow()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for WFShowAlertFlowError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x128874);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for WFShowAlertFlowError()
{
  return &type metadata for WFShowAlertFlowError;
}

uint64_t initializeBufferWithCopyOfBuffer for WFShowAlertFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of WFShowAlertFlow.State(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of WFShowAlertFlow.State(id result, char a2)
{
  if (a2 == 2) {
    return (id)swift_errorRetain();
  }
  if (a2 == 1) {
    return result;
  }
  return result;
}

void destroy for WFShowAlertFlow.State(uint64_t a1)
{
}

uint64_t assignWithCopy for WFShowAlertFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of WFShowAlertFlow.State(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of WFShowAlertFlow.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for WFShowAlertFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of WFShowAlertFlow.State(v4, v5);
  return a1;
}

void *type metadata accessor for WFShowAlertFlow.State()
{
  return &unk_28CF70;
}

uint64_t lazy protocol witness table accessor for type WFShowAlertFlow and conformance WFShowAlertFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_29()
{
  uint64_t v2 = *(void *)(v1 + 80);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_15_20()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_17_17()
{
  return static DialogPhase.confirmation.getter();
}

uint64_t OUTLINED_FUNCTION_19_17()
{
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t OUTLINED_FUNCTION_21_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_14()
{
  *(void *)(v1 + 120) = v0;
  *(unsigned char *)(v1 + 128) = 2;
  return swift_errorRetain();
}

uint64_t OUTLINED_FUNCTION_27_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31_14()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_32_17()
{
  return *(void *)(v0 + 200);
}

uint64_t OUTLINED_FUNCTION_33_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_40_14()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_42_13()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_43_7()
{
  return v0;
}

uint64_t static CustomTypeReference.buildFromAttributeHash(attributeHash:)(uint64_t a1)
{
  uint64_t v1 = static CustomTypeReference.getTypeString(attributeHash:)(a1);
  uint64_t v3 = v2;
  if (one-time initialization token for TypeNameMap != -1) {
    swift_once();
  }
  uint64_t v4 = specialized Dictionary.subscript.getter(v1, v3, (uint64_t)static CustomTypeReference.TypeNameMap);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (v6) {
    return v4;
  }
  else {
    return 0x697461646E756F66;
  }
}

Swift::String __swiftcall CustomTypeReference.asString()()
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v11 = v0;
  uint64_t v12 = v1;
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v5;
  v7._object = v4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = v11;
  uint64_t v9 = v12;
  result._object = v9;
  result._uint64_t countAndFlagsBits = v8;
  return result;
}

uint64_t static CustomTypeReference.fromSlotValueType(valueType:)(uint64_t a1)
{
  uint64_t v1 = static CustomTypeReference.typeString(valueType:)(a1);
  uint64_t v3 = v2;
  if (one-time initialization token for TypeNameMap != -1) {
    swift_once();
  }
  uint64_t v4 = 0x697461646E756F66;
  uint64_t v5 = static CustomTypeReference.TypeNameMap;
  if (*(void *)((char *)&dword_10 + (void)static CustomTypeReference.TypeNameMap))
  {
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
    if (v7)
    {
      uint64_t v4 = *(void *)(*(void *)&stru_20.segname[(void)v5 + 16] + 32 * v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t CustomIntentDefinition.requestDefinition.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

void *static CustomRequestDefinition.buildFromIntentDescription(intentDescription:)(void *a1)
{
  uint64_t v1 = outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(a1);
  if (!v1) {
    return 0;
  }
  specialized Dictionary.subscript.getter(0xD000000000000012, 0x80000000002296C0, v1, &v133);
  swift_bridgeObjectRelease();
  if (!v134)
  {
    outlined destroy of Any?((uint64_t)&v133);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(v131[0] + 16);
  if (v2)
  {
    uint64_t v132 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v106 = v131[0];
    uint64_t v3 = v131[0] + 32;
    uint64_t v112 = 0x8000000000229740;
    uint64_t v118 = 0x8000000000229720;
    uint64_t v125 = 0x8000000000229700;
    uint64_t v126 = (char *)&type metadata for Any + 8;
    uint64_t v124 = 0x80000000002296E0;
    do
    {
      outlined init with copy of Any(v3, (uint64_t)&v133);
      outlined init with copy of Any((uint64_t)&v133, (uint64_t)v131);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      swift_dynamicCast();
      uint64_t v4 = v129;
      if (*(void *)(v129 + 16)
        && (unint64_t v5 = OUTLINED_FUNCTION_20_25(), v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v124), (v7 & 1) != 0)
        && (uint64_t v14 = OUTLINED_FUNCTION_4_27(v6, v7, v8, v9, v10, v11, v12, v13, v106, v112, v118),
            OUTLINED_FUNCTION_2_30(v14, v15, v16, v17, v18, v19, v20, v21, v107, v113, v119, v124, v125, (uint64_t)v126, v127, v128, v129), swift_dynamicCast()))
      {
        uint64_t v22 = v129;
        uint64_t v23 = v130;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0xE000000000000000;
      }
      uint64_t v127 = v23;
      uint64_t v128 = v22;
      if (*(void *)(v4 + 16))
      {
        unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, v125);
        if (v25)
        {
          uint64_t v32 = OUTLINED_FUNCTION_4_27(v24, v25, v26, v27, v28, v29, v30, v31, v106, v112, v118);
          OUTLINED_FUNCTION_2_30(v32, v33, v34, v35, v36, v37, v38, v39, v108, v114, v120, v124, v125, (uint64_t)v126, v23, v22, v129);
          if (swift_dynamicCast()) {
            goto LABEL_20;
          }
        }
      }
      if (*(void *)(v4 + 16)
        && (unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000019, v118), (v41 & 1) != 0)
        && (uint64_t v48 = OUTLINED_FUNCTION_4_27(v40, v41, v42, v43, v44, v45, v46, v47, v106, v112, v118),
            OUTLINED_FUNCTION_2_30(v48, v49, v50, v51, v52, v53, v54, v55, v109, v115, v121, v124, v125, (uint64_t)v126, v127, v128, v129), (swift_dynamicCast() & 1) != 0)|| *(void *)(v4 + 16)
        && (unint64_t v56 = OUTLINED_FUNCTION_20_25(),
            unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v112),
            (v58 & 1) != 0)
        && (uint64_t v65 = OUTLINED_FUNCTION_4_27(v57, v58, v59, v60, v61, v62, v63, v64, v106, v112, v118),
            OUTLINED_FUNCTION_2_30(v65, v66, v67, v68, v69, v70, v71, v72, v110, v116, v122, v124, v125, (uint64_t)v126, v127, v128, v129), (swift_dynamicCast() & 1) != 0))
      {
LABEL_20:
        uint64_t v73 = v129;
        uint64_t v74 = v130;
      }
      else
      {
        uint64_t v74 = 0xE600000000000000;
        uint64_t v73 = 0x7463656A624FLL;
      }
      if (one-time initialization token for TypeNameMap != -1) {
        swift_once();
      }
      BOOL v75 = static CustomTypeReference.TypeNameMap;
      if (*(void *)((char *)&dword_10 + (void)static CustomTypeReference.TypeNameMap)
        && (unint64_t v76 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74), (v77 & 1) != 0))
      {
        os_log_type_t v78 = (uint64_t *)(*(void *)&stru_20.segname[(void)v75 + 16] + 32 * v76);
        uint64_t v79 = *v78;
        unint64_t v80 = v78[1];
        uint64_t v82 = v78[2];
        unint64_t v81 = v78[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v81 = 0xE600000000000000;
        uint64_t v79 = 0x697461646E756F66;
        unint64_t v80 = 0xEA00000000006E6FLL;
        uint64_t v82 = 0x7463656A624FLL;
      }
      swift_bridgeObjectRelease();
      if (*(void *)(v4 + 16)
        && (uint64_t v83 = CustomParameterOptions.CodingKeys.stringValue.getter(),
            unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v84),
            (v86 & 1) != 0)
        && (uint64_t v93 = OUTLINED_FUNCTION_4_27(v85, v86, v87, v88, v89, v90, v91, v92, v106, v112, v118),
            OUTLINED_FUNCTION_2_30(v93, v94, v95, v96, v97, v98, v99, v100, v111, v117, v123, v124, v125, (uint64_t)v126, v127, v128, v129), (swift_dynamicCast() & 1) != 0))
      {
        char v101 = v129;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        char v101 = 0;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v133);
      long long v102 = v132;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        long long v102 = v132;
      }
      unint64_t v103 = v102[2];
      if (v103 >= v102[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        long long v102 = v132;
      }
      v102[2] = v103 + 1;
      char v104 = &v102[7 * v103];
      v104[4] = v128;
      v104[5] = v127;
      v104[6] = v79;
      v104[7] = v80;
      v104[8] = v82;
      v104[9] = v81;
      *((unsigned char *)v104 + 80) = v101;
      v3 += 32;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v102;
}

uint64_t CustomIntentDefinition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000000229760)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t CustomIntentDefinition.CodingKeys.stringValue.getter()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CustomIntentDefinition.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CustomIntentDefinition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CustomIntentDefinition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CustomIntentDefinition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void CustomIntentDefinition.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CustomIntentDefinition.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys();
  OUTLINED_FUNCTION_10_30();
  lazy protocol witness table accessor for type CustomRequestDefinition and conformance CustomRequestDefinition();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  OUTLINED_FUNCTION_37_11();
  v1();
  OUTLINED_FUNCTION_15_21();
}

void CustomIntentDefinition.init(from:)()
{
  OUTLINED_FUNCTION_14_16();
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CustomIntentDefinition.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_9_31();
  lazy protocol witness table accessor for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys();
  OUTLINED_FUNCTION_17_18();
  if (!v0)
  {
    lazy protocol witness table accessor for type CustomRequestDefinition and conformance CustomRequestDefinition();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_37_11();
    v4();
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  OUTLINED_FUNCTION_15_21();
}

void protocol witness for Decodable.init(from:) in conformance CustomIntentDefinition(void *a1@<X8>)
{
  CustomIntentDefinition.init(from:)();
  if (!v1) {
    *a1 = v3;
  }
}

void protocol witness for Encodable.encode(to:) in conformance CustomIntentDefinition()
{
}

uint64_t static CustomRequestParameterDefinition.buildFromAttributeHash(attributeHash:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = OUTLINED_FUNCTION_20_25();
  specialized Dictionary.subscript.getter(v4, v5, a1, v6);
  if (!v20)
  {
    outlined destroy of Any?((uint64_t)v19);
    goto LABEL_5;
  }
  if (!OUTLINED_FUNCTION_5_14())
  {
LABEL_5:
    uint64_t v7 = 0;
    unint64_t v8 = 0xE000000000000000;
    goto LABEL_6;
  }
  uint64_t v7 = v17;
  unint64_t v8 = v18;
LABEL_6:
  uint64_t v9 = static CustomTypeReference.buildFromAttributeHash(attributeHash:)(a1);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t result = static CustomParameterOptions.buildFromAttributeHash(attributeHash:)(a1);
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v15;
  *(unsigned char *)(a2 + 48) = result & 1;
  return result;
}

uint64_t CustomRequestDefinition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t static Transformer<>.parametersDictionaryKey.getter()
{
  return 0x6574656D61726170;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CustomRequestDefinition.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CustomRequestDefinition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CustomRequestDefinition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CustomRequestDefinition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void CustomRequestDefinition.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CustomRequestDefinition.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys();
  OUTLINED_FUNCTION_10_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CustomRequestParameterDefinition]);
  lazy protocol witness table accessor for type [CustomRequestParameterDefinition] and conformance <A> [A](&lazy protocol witness table cache variable for type [CustomRequestParameterDefinition] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  OUTLINED_FUNCTION_37_11();
  v1();
  OUTLINED_FUNCTION_15_21();
}

void CustomRequestDefinition.init(from:)()
{
  OUTLINED_FUNCTION_14_16();
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CustomRequestDefinition.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_9_31();
  lazy protocol witness table accessor for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys();
  OUTLINED_FUNCTION_17_18();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CustomRequestParameterDefinition]);
    lazy protocol witness table accessor for type [CustomRequestParameterDefinition] and conformance <A> [A](&lazy protocol witness table cache variable for type [CustomRequestParameterDefinition] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_37_11();
    v4();
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  OUTLINED_FUNCTION_15_21();
}

void protocol witness for Decodable.init(from:) in conformance CustomRequestDefinition(void *a1@<X8>)
{
  CustomRequestDefinition.init(from:)();
  if (!v1) {
    *a1 = v3;
  }
}

void protocol witness for Encodable.encode(to:) in conformance CustomRequestDefinition()
{
}

uint64_t CustomRequestParameterDefinition.typeDefinition.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CustomRequestParameterDefinition.typeDefinition.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  long long v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return result;
}

uint64_t CustomRequestParameterDefinition.options.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t CustomRequestParameterDefinition.options.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomRequestParameterDefinition.options.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t static CustomParameterOptions.buildFromAttributeHash(attributeHash:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v1 = CustomParameterOptions.CodingKeys.stringValue.getter();
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v2);
  if ((v4 & 1) == 0) {
    return 0;
  }
  OUTLINED_FUNCTION_5_25(v3, v4, v5);
  uint64_t result = swift_dynamicCast();
  if (result) {
    return v7;
  }
  return result;
}

void __swiftcall CustomRequestParameterDefinition.init(name:typeDefinition:options:)(SiriLinkFlowPlugin::CustomRequestParameterDefinition *__return_ptr retstr, Swift::String name, SiriLinkFlowPlugin::CustomTypeReference typeDefinition, SiriLinkFlowPlugin::CustomParameterOptions options)
{
  retstr->name = name;
  retstr->typeDefinition = typeDefinition;
  retstr->options = options;
}

uint64_t CustomRequestParameterDefinition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6966654465707974 && a2 == 0xEE006E6F6974696ELL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t CustomRequestParameterDefinition.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 1701667182;
  }
  if (a1 == 1) {
    return 0x6966654465707974;
  }
  return 0x736E6F6974706FLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CustomRequestParameterDefinition.CodingKeys()
{
  return CustomRequestParameterDefinition.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CustomRequestParameterDefinition.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CustomRequestParameterDefinition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CustomRequestParameterDefinition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CustomRequestParameterDefinition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void CustomRequestParameterDefinition.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CustomRequestParameterDefinition.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys();
  OUTLINED_FUNCTION_10_30();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    lazy protocol witness table accessor for type CustomTypeReference and conformance CustomTypeReference();
    OUTLINED_FUNCTION_16_21();
    lazy protocol witness table accessor for type CustomParameterOptions and conformance CustomParameterOptions();
    OUTLINED_FUNCTION_16_21();
  }
  OUTLINED_FUNCTION_37_11();
  v2();
  OUTLINED_FUNCTION_15_21();
}

uint64_t CustomRequestParameterDefinition.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CustomRequestParameterDefinition.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_9_31();
  lazy protocol witness table accessor for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  LOBYTE(v13) = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v8 = v7;
  uint64_t v12 = v6;
  lazy protocol witness table accessor for type CustomTypeReference and conformance CustomTypeReference();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_12_27();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  lazy protocol witness table accessor for type CustomParameterOptions and conformance CustomParameterOptions();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_12_27();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = OUTLINED_FUNCTION_3_28();
  v10(v9);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v16;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

double protocol witness for Decodable.init(from:) in conformance CustomRequestParameterDefinition@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CustomRequestParameterDefinition.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(unsigned char *)(a2 + 48) = v8;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance CustomRequestParameterDefinition()
{
}

uint64_t CustomParameterOptions.multiCardinal.getter(char a1)
{
  return a1 & 1;
}

uint64_t CustomParameterOptions.multiCardinal.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t CustomParameterOptions.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x72614369746C756DLL && a2 == 0xED00006C616E6964)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t CustomParameterOptions.CodingKeys.stringValue.getter()
{
  return 0x72614369746C756DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CustomParameterOptions.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CustomParameterOptions.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CustomParameterOptions.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CustomParameterOptions.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void CustomParameterOptions.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CustomParameterOptions.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys();
  OUTLINED_FUNCTION_10_30();
  KeyedEncodingContainer.encode(_:forKey:)();
  OUTLINED_FUNCTION_37_11();
  v1();
  OUTLINED_FUNCTION_15_21();
}

void CustomParameterOptions.init(from:)()
{
  OUTLINED_FUNCTION_14_16();
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CustomParameterOptions.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_9_31();
  lazy protocol witness table accessor for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_37_11();
    v4();
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  OUTLINED_FUNCTION_15_21();
}

void protocol witness for Decodable.init(from:) in conformance CustomParameterOptions(unsigned char *a1@<X8>)
{
  CustomParameterOptions.init(from:)();
  if (!v1) {
    *a1 = v3 & 1;
  }
}

void protocol witness for Encodable.encode(to:) in conformance CustomParameterOptions()
{
}

uint64_t Document.body.getter(uint64_t a1)
{
  return a1;
}

uint64_t CustomTypeReference.name.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t static CustomTypeReference.typeString(valueType:)(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 0x676E69727453;
  switch(v1)
  {
    case 0:
      uint64_t result = 0x6E61656C6F6F42;
      break;
    case 2:
    case 3:
    case 20:
      uint64_t result = 0x656C62756F44;
      break;
    case 4:
    case 5:
    case 7:
    case 8:
    case 23:
    case 25:
      uint64_t result = 0x72656765746E49;
      break;
    case 6:
    case 29:
      return result;
    case 9:
      uint64_t result = 0x6E6F73726550;
      break;
    case 13:
      uint64_t result = 0x706D6F4365746144;
      break;
    case 15:
      uint64_t result = 0x65746E49656D6954;
      break;
    case 18:
      uint64_t result = 0x65636E6174736944;
      break;
    case 26:
      uint64_t result = 0x72616D6563616C50;
      break;
    case 31:
      uint64_t result = 0x74617265706D6554;
      break;
    case 35:
      uint64_t result = 5001813;
      break;
    case 37:
      uint64_t result = 1936941389;
      break;
    case 38:
      uint64_t result = 0x656D756C6F56;
      break;
    case 39:
      uint64_t result = 0x6465657053;
      break;
    case 40:
      uint64_t result = 0x796772656E45;
      break;
    case 52:
      uint64_t result = 0x79636E6572727543;
      break;
    default:
      uint64_t result = 0x7463656A624FLL;
      break;
  }
  return result;
}

int *one-time initialization function for TypeNameMap()
{
  uint64_t result = (int *)Dictionary.init(dictionaryLiteral:)();
  static CustomTypeReference.TypeNameMap = result;
  return result;
}

uint64_t static CustomTypeReference.getTypeString(attributeHash:)(uint64_t a1)
{
  if (*(void *)(a1 + 16)
    && ((unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x8000000000229700), (v3 & 1) != 0)
     && (OUTLINED_FUNCTION_5_25(v2, v3, v4), (OUTLINED_FUNCTION_5_14() & 1) != 0)
     || *(void *)(a1 + 16)
     && ((unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000019, 0x8000000000229720), (v6 & 1) != 0)
      && (OUTLINED_FUNCTION_5_25(v5, v6, v7), (OUTLINED_FUNCTION_5_14() & 1) != 0)
      || *(void *)(a1 + 16)
      && (unint64_t v8 = OUTLINED_FUNCTION_20_25(), v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9), (v11 & 1) != 0)
      && (OUTLINED_FUNCTION_5_25(v10, v11, v12), (OUTLINED_FUNCTION_5_14() & 1) != 0))))
  {
    return v14;
  }
  else
  {
    return 0x7463656A624FLL;
  }
}

uint64_t static CustomTypeReference.getTypeField(attributeHash:probeKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 16))
  {
    long long v10 = 0u;
    long long v11 = 0u;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v6 & 1) == 0)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_5_25(v5, v6, v7);
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1))
  {
LABEL_9:
    outlined destroy of Any?((uint64_t)&v10);
    return 0;
  }
  if (OUTLINED_FUNCTION_5_14()) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t CustomTypeReference.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x63617073656D616ELL && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t CustomTypeReference.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t CustomTypeReference.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 1701667182;
  }
  else {
    return 0x63617073656D616ELL;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CustomTypeReference.CodingKeys()
{
  return CustomTypeReference.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CustomTypeReference.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CustomTypeReference.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CustomTypeReference.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CustomTypeReference.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CustomTypeReference.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CustomTypeReference.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CustomTypeReference.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[0] = a4;
  v14[1] = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CustomTypeReference.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v7);
}

uint64_t CustomTypeReference.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CustomTypeReference.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_20_0();
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = OUTLINED_FUNCTION_13_27();
    v7(v6);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CustomTypeReference@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = CustomTypeReference.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CustomTypeReference(void *a1)
{
  return CustomTypeReference.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(void *a1)
{
  id v1 = [a1 dictionaryRepresentation];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t lazy protocol witness table accessor for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDefinition.CodingKeys and conformance CustomIntentDefinition.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomRequestDefinition and conformance CustomRequestDefinition()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition and conformance CustomRequestDefinition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestDefinition.CodingKeys and conformance CustomRequestDefinition.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition and conformance CustomRequestParameterDefinition);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CustomRequestParameterDefinition] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CustomRequestParameterDefinition]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomRequestParameterDefinition.CodingKeys and conformance CustomRequestParameterDefinition.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomTypeReference and conformance CustomTypeReference()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference;
  if (!lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference;
  if (!lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference and conformance CustomTypeReference);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomParameterOptions and conformance CustomParameterOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions and conformance CustomParameterOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomParameterOptions.CodingKeys and conformance CustomParameterOptions.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomTypeReference.CodingKeys and conformance CustomTypeReference.CodingKeys);
  }
  return result;
}

void type metadata accessor for CustomIntentDefinition()
{
}

void type metadata accessor for CustomRequestDefinition()
{
}

uint64_t initializeWithCopy for CustomRequestParameterDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CustomRequestParameterDefinition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CustomRequestParameterDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomRequestParameterDefinition(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomRequestParameterDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for CustomRequestParameterDefinition()
{
}

uint64_t getEnumTagSinglePayload for CustomParameterOptions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}